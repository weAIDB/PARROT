{"QuerySetId":534139,"Title":"is it possible to search my own topics?","Description":"http:\/\/meta.stackexchange.com\/questions\/167328\/is-it-possible-to-search-my-own-topics","QueryBody":"WITH  allQs as \n(\n    select coalesce(parentid,id) as postid\n    from posts p\n    where owneruserid = ##userid:int?393087##\n) \nselect id as [Post Link]\n     , owneruserid as [User Link]\n     , creationdate\n     , score\nfrom posts p\ninner join allQs q on q.postid = p.parentid \nwhere p.body like '%' + ##search:string?database## +'%'\nand p.owneruserid <> ##userid:int?393087##\nunion\nselect id as [Post Link]\n     , owneruserid as [User Link]\n     , creationdate\n     , score\nfrom posts p\ninner join allQs q on q.postid = p.id\nwhere p.body like '%' + ##search:string?database## +'%'\nand p.owneruserid <> ##userid:int?393087##","CreationDate":"2016-09-04 18:21:40","validated":true}
{"QuerySetId":538490,"Title":"List of questions for a tag with score and closed date","Description":null,"QueryBody":"SELECT  \n --DATEFROMPARTS(YEAR(p.CreationDate), MONTH(p.CreationDate), 01) [MonthStart]\n -- , COUNT(p.Id) \n p.CreationDate,\np.id as[Post Link],\np.ClosedDate,\np.Score\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nWHERE t.TagName IN ('##Tag##')\nAND p.PostTypeId= 1","CreationDate":"2017-12-01 7:40:51","validated":true}
{"QuerySetId":539033,"Title":"This query identifies all open Community-bumped posts that \n1.) were bumped within the 30 days preceding the most recent Data Explorer import; and \n2.) have been bumped more than once ever.","Description":"This query identifies all open Community-bumped posts that \n1.) were bumped within the 30 days preceding the most recent Data Explorer import; and \n2.) have been bumped more than once ever.","QueryBody":"DECLARE  @last_extract AS datetime = (SELECT MAX(CreationDate) FROM PostHistory)\n\nSELECT TOP 100\n    ph.PostId AS [Post Link]\n  , COUNT(*) AS [Count]\n  , MAX(ph.CreationDate) AS [LastBump]\n  , MAX(p.Score) AS [Score] -- MAX because we have a GROUP BY\n  , MAX(p.AnswerCount) AS [AnswerCount]\nFROM\n  Posts AS p\n  INNER JOIN PostHistory AS ph\n    ON p.Id = ph.PostId\nWHERE\n  p.ClosedDate IS NULL\n  AND ph.PostHistoryTypeId = 50\nGROUP BY\n  ph.PostId\nHAVING\n  MAX(ph.CreationDate) > DATEADD(DAY, -30, @last_extract)\n  AND COUNT(*) > 1\nORDER BY\n  [Count] DESC","CreationDate":"2016-09-14 4:00:33","validated":true}
{"QuerySetId":539106,"Title":"Top 200 users from Kolkata,India","Description":null,"QueryBody":"SELECT  TOP 2000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%kolkata%'\n    OR UPPER(Location) LIKE '%KOLKATA'\nORDER BY\n    Reputation DESC;","CreationDate":"2016-09-14 12:30:06","validated":true}
{"QuerySetId":539469,"Title":"Count of posts edited by some users","Description":null,"QueryBody":"SELECT  Month, [209103] as [puf], [4625829], [5637321], [5996134] as [kendi], [807126] as [doug], [2207583] as [tburner]\nFROM (\n  SELECT \n    DATEADD(MONTH, DATEDIFF(MONTH, 0, PostHistory.CreationDate), 0) AS [Month]\n    , PostHistory.UserId\n    , COUNT(*) AS Count\n  FROM Posts\n  INNER JOIN PostHistory ON PostHistory.PostId = Posts.Id\n  WHERE PostHistory.UserId IN (209103, 4625829, 5637321, 5996134, 807126, 2207583)\n  GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, PostHistory.CreationDate), 0), PostHistory.UserId\n) src\nPIVOT (\n  MAX(Count)\n  FOR UserId IN ([209103], [4625829], [5637321], [5996134], [807126], [2207583])\n) piv\nORDER BY [Month] DESC","CreationDate":"2020-12-08 20:39:13","validated":true}
{"QuerySetId":539672,"Title":"Top 25 SO Users from Delhi","Description":"Top 30 SO Users from Pune, Maharashtra, India","QueryBody":"SELECT  TOP 25\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%Delhi%'\n    OR UPPER(Location) LIKE '%DELHI%'\n    or Location like '%delhi%'\nORDER BY\n    Reputation DESC;","CreationDate":"2018-09-06 10:26:13","validated":true}
{"QuerySetId":542195,"Title":"# of users with rep > amount, active recently","Description":null,"QueryBody":"SELECT \n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 7, 1, 0)) Days7,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 14, 1, 0)) Days14,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 30, 1, 0)) Days30,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 90, 1, 0)) Days90,\n  SUM(IIF(DATEDIFF(DAY, u.LastAccessDate, GETDATE()) <= 180, 1, 0)) Days180,\n  COUNT(*) Total\nFROM\n  Users u\nWHERE\n  u.Reputation >= ##Reputation?500##","CreationDate":"2016-09-20 22:29:21","validated":true}
{"QuerySetId":542258,"Title":"Questions for a given tag by week","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(25) = '##Tag##';\n\nSELECT\n   MonthStart, COUNT(UniqueId)\nFROM \n(\n  SELECT\n    Posts.ViewCount AS UniqueId, \n   DATEFROMPARTS(YEAR(Posts.CreationDate), MONTH(Posts.CreationDate), 01) [MonthStart]  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY MonthStart;","CreationDate":"2017-06-20 3:55:34","validated":true}
{"QuerySetId":542264,"Title":"Top users in Amsterdam or Netherlands","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    Location,\n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%Amsterdam%')\n    OR\n    LOWER(Location) LIKE LOWER('%netherlands%')\nORDER BY\n    Reputation DESC;","CreationDate":"2016-09-21 3:44:51","validated":true}
{"QuerySetId":542974,"Title":"Top 50 Users from Ahmedabad.","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [http:\/\/stackoverflow.com\/users\/1844392\/piyush], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%ahmedabad%'\n    OR UPPER(Location) LIKE '%AHMEDABAD'\nORDER BY\n    Reputation DESC;","CreationDate":"2016-09-22 16:49:14","validated":true}
{"QuerySetId":544775,"Title":"Bumped Posts - New Answer Yet Unresolved","Description":null,"QueryBody":"SELECT  \n        BH.*,\n    'http:\/\/stackoverflow.com\/questions\/' + CONVERT(varchar,BH.PostID) + '\/' AS PostLink,\n        Posts.*\nFROM\n        (SELECT\n                PH.PostId,\n                MAX(PH.CreationDate) AS LastBump,\n                COUNT(1) AS BumpCount,\n                (SELECT Max(CreationDate) AS AnswerDate FROM Posts AP WHERE AP.ParentID=PH.PostId AND AP.Score=0) AS LastAnswer\n        FROM\n                PostHistory PH\n        GROUP BY\n                PostId) BH\nLEFT JOIN\n        Posts ON Posts.Id=BH.PostId\nWHERE \n        Posts.AcceptedAnswerID IS NULL\n        AND Posts.Score>=0\n        AND NOT EXISTS (SELECT * FROM Posts AP WHERE AP.ParentID=Posts.Id AND AP.Score>0)\n        AND BH.BumpCount>1\nORDER BY\n        BumpCount DESC,\n        Score DESC","CreationDate":"2016-09-26 20:22:05","validated":true}
{"QuerySetId":544929,"Title":"Average question score by reputation","Description":null,"QueryBody":"SELECT \n  AVG(CAST(ROUND(Reputation, -FLOOR(LOG(Reputation, 10))) AS BigInt)) AS UserReputation,\n  AVG(CAST(Posts.Score AS Float)) AS AverageQuestionScore\nFROM\n  Posts\nINNER JOIN\n  Users ON (Users.Id = Posts.OwnerUserId)\nWHERE\n  PostTypeId = 1\nGROUP BY\n ROUND(Reputation, -FLOOR(LOG(Reputation, 10)))\nORDER BY\n  UserReputation","CreationDate":"2016-09-26 22:09:22","validated":true}
{"QuerySetId":544953,"Title":"Average Score of my Answers","Description":null,"QueryBody":"SELECT \nAVG(CAST(Score AS Float)) AS 'AverageScore'\nFROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId##;","CreationDate":"2016-09-26 22:43:56","validated":true}
{"QuerySetId":545292,"Title":"All Time Most Popular Tags","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n     row_number() over (order by num.Num desc) as TotalRank,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2016-09-27 14:54:42","validated":true}
{"QuerySetId":545296,"Title":"All Time Most Popular Tags-A.A.","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n     row_number() over (order by num.Num desc) as TotalRank,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2016-09-27 15:04:53","validated":true}
{"QuerySetId":547136,"Title":"Most popular StackOverflow tags in time range","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as TimePeriodRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as TimePeriodQuestions,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate >= ##StartDate##\nand Posts.CreationDate < ##EndDate##\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2016-10-01 1:05:03","validated":true}
{"QuerySetId":548171,"Title":"num users and reputation by \"ios\" tag name since 2016","Description":null,"QueryBody":"SELECT  t.tagname, sum(u.reputation) sumrep, count(distinct u.id) users\nFROM \n    Posts p INNER JOIN PostTags pt ON p.id=pt.Postid \n    INNER JOIN Tags t on pt.TagId=t.id\n    INNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE p.CreationDate >= '2016'\nAND t.tagname IN ('ios')\ngroup by t.tagname","CreationDate":"2018-01-05 15:24:23","validated":true}
{"QuerySetId":550292,"Title":"Get a row of tag adjacency matrix with more than 10 posts","Description":null,"QueryBody":"DECLARE  @t_id int = (SELECT Id FROM Tags WHERE TagName = ##tagName:string##);\n\nwith TaggedPosts (PostId) as (\nSELECT \n  PostID \nFROM \n  PostTags pt\nWHERE \npt.tagid = @t_id)\n\nSELECT\n  TagId, count(pt.PostId) as cnt\nFROM \n  TaggedPosts tpos\n  JOIN\n  PostTags pt\n  ON pt.PostId = tpos.PostId\nWHERE\n  pt.TagId != @t_id\nGROUP BY TagId\nHAVING count(pt.PostId) > 10\nORDER BY cnt DESC","CreationDate":"2016-10-04 18:17:05","validated":true}
{"QuerySetId":551084,"Title":"Hidden gems: Highest question score per thousand views, minimum 10 views","Description":null,"QueryBody":"SELECT  TOP 1000 Posts.Id AS [Post Link], Posts.OwnerUserId as [User Link], Score, ViewCount, Score*1000\/ViewCount as \"Score per Thousand Views\"\nFROM Posts\nWHERE ViewCount >= 10 AND PostTypeId = 1\nORDER BY Score*1000\/ViewCount DESC","CreationDate":"2016-10-24 13:38:14","validated":true}
{"QuerySetId":551108,"Title":"Running total of initial votes vs time in an election","Description":null,"QueryBody":"SELECT  b.Date, SUM(COUNT(b.Date)) OVER (ORDER BY b.Date) running \nFROM badges AS b \nWHERE b.Name = 'Constituent' \n  AND b.Date BETWEEN '##ElectionYear##-01-01' \n                 AND '##ElectionYear##-12-31' \nGROUP BY b.Date \nORDER BY b.Date;","CreationDate":"2016-10-05 20:36:04","validated":true}
{"QuerySetId":551415,"Title":"All norwegian users and their global site rank (sorted by reputation and filtered by location)","Description":null,"QueryBody":"SELECT  *\nFROM (\n    SELECT\n        ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS GlobalRank,\n        Users.Id as [User Link],\n        Reputation,\n        Location\n    FROM\n        Users) AS x\nWHERE\n    UPPER(Location) LIKE '%NORWAY%'\n OR UPPER(Location) LIKE '%NORGE%'    \nORDER BY\n    Reputation DESC","CreationDate":"2016-10-06 17:32:01","validated":true}
{"QuerySetId":551848,"Title":"Top 200 Users by Country","Description":null,"QueryBody":"SELECT  TOP 200\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    u.Id,\n    u.Id AS [User Link], \n    u.Reputation,\n    count(p.id)\nFROM\n    Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nWHERE\n    LOWER(Location) LIKE LOWER('%##countryname##%')\ngroup by u.reputation, u.id\nORDER BY\n    Reputation DESC;","CreationDate":"2016-10-07 11:52:08","validated":true}
{"QuerySetId":551939,"Title":"Top 10 users by reputation in Cyprus","Description":null,"QueryBody":"SELECT  TOP(10) Reputation, DisplayName, Location FROM Users \nWHERE Location LIKE '%Cyprus%' AND Reputation > 0\nORDER BY Reputation DESC","CreationDate":"2016-10-07 17:32:05","validated":true}
{"QuerySetId":552121,"Title":"Percentage of questions with at least one answer with removal of recent questions","Description":null,"QueryBody":"SELECT \n  DATEPART(dayofyear,CreationDate),\n  CAST(SUM(CASE when AnswerCount > 0 then 1 else 0 END) as float)\/COUNT(Posts.Id) as Ratio\n  FROM Posts WHERE (PostTypeId=1 AND CreationDate<'##Date##') \nGROUP BY DATEPART(dayofyear,CreationDate)\nORDER BY DATEPART(dayofyear,CreationDate) ASC","CreationDate":"2016-10-07 20:57:35","validated":true}
{"QuerySetId":552130,"Title":"What sort of questions are migrated away?","Description":null,"QueryBody":"select count(*) as 'Migrated away', \n       avg(Score*1.0) 'Avg score',\n       avg(AnswerCount*1.0) 'Avg answers',\n       avg(CommentCount*1.0) 'Avg comments',\n       avg(datediff(hour, p.CreationDate, ph.CreationDate)\/24.0) 'Avg age (days)'\nfrom PostHistory ph\n     join Posts p on p.Id = PostId\nwhere PostHistoryTypeId In (@PostMigratedAway)\n      and ph.CreationDate > @from","CreationDate":"2016-10-07 21:18:51","validated":true}
{"QuerySetId":552236,"Title":"Percentage of questions with at least one answer by week","Description":null,"QueryBody":"SELECT \n  DATEPART(week,CreationDate),\n  CAST(SUM(CASE when AnswerCount > 0 then 1 else 0 END) as float)\/COUNT(Posts.Id) as Ratio\n  FROM Posts WHERE (PostTypeId=1 AND CreationDate >= '##Date1##' AND CreationDate <= '##Date2##')\nGROUP BY DATEPART(week,CreationDate)\nORDER BY DATEPART(week,CreationDate) ASC","CreationDate":"2016-10-08 2:15:43","validated":true}
{"QuerySetId":552386,"Title":"Where to see how long I have been a member of SO?","Description":"http:\/\/meta.stackoverflow.com\/questions\/334109\/where-to-see-how-long-i-have-been-a-member-of-so","QueryBody":"SELECT  id as [User Link]\n     , creationdate\nfrom users\nwhere id = ##userid##","CreationDate":"2016-10-08 13:56:56","validated":true}
{"QuerySetId":552916,"Title":"Posts, and Total Views by Date Range and DisplayName","Description":null,"QueryBody":"DECLARE  @user varchar(50);\nSELECT @user = ##user:string##;\n\n-- startDate: YYYY-MM-DD\nDECLARE @startDate DATETIME;\nSELECT @startDate = ##startDate:string##;\n\n-- endDate: YYYY-MM-DD\nDECLARE @endDate DATETIME;\nSELECT @endDate = ##endDate:string##;\n\nSELECT\n  pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = FORMAT(@startDate, 'MMM-yyyy'),\n  Finish = FORMAT(@endDate, 'MMM-yyyy')\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\nGROUP BY ROLLUP(pt.Name)","CreationDate":"2019-01-28 7:28:27","validated":true}
{"QuerySetId":554337,"Title":"Highest number of comments on a post","Description":null,"QueryBody":"SELECT  'site:\/\/\/a\/' + CAST(p.id AS NVARCHAR) + '\/4918|' + CAST(p.id AS NVARCHAR) AS pLink, \ncount(*) AS cCount \nFROM Comments AS c \nLEFT JOIN Posts AS p ON c.PostId = p.Id \nGROUP BY p.Id\nHAVING ##limit?30## <= count(*)\nORDER BY 2 DESC;","CreationDate":"2018-12-19 6:40:17","validated":true}
{"QuerySetId":559288,"Title":"Users with their own Silver Tag Badges","Description":null,"QueryBody":"SELECT  B.Name, B.UserId AS [User Link], (SELECT Count(B2.Name) FROM Badges B2 WHERE B2.Name = B.Name) as [Total Gold, Silver, and Bronze Badges Awarded for this Tag]\nFROM Badges B\nWHERE Class = 2\nAND TagBased = 1\nAND (SELECT Count(B2.Name)\n     FROM Badges B2\n     WHERE B2.Name = B.Name\n     AND B2.Class = 2\n     AND B2.TagBased = 1) = 1\nGROUP BY B.Name, B.UserId\nORDER BY B.Name","CreationDate":"2017-07-06 17:14:44","validated":true}
{"QuerySetId":560207,"Title":"Unanswered questions from established users","Description":null,"QueryBody":"SELECT \np.Id AS [Post Link], p.Tags, p.CreationDate\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \np.AnswerCount = 0 AND u.Reputation >= 1000\n  \nORDER BY p.CreationDate DESC","CreationDate":"2016-10-20 13:45:01","validated":true}
{"QuerySetId":564905,"Title":"Instances of 'well actually' in answers","Description":null,"QueryBody":"SELECT  Id, Body\nfrom posts\nwhere posttypeid = 2 \nand (lower(Body) like '%well actually%')","CreationDate":"2016-10-27 9:25:50","validated":true}
{"QuerySetId":565309,"Title":"Search for text in comments (with parameters)","Description":null,"QueryBody":"SELECT  PostId AS [Post Link], Id AS [Comment Link], [Text], [CreationDate] FROM Comments \nWHERE Text LIKE '%##SearchString##%'\nORDER BY CreationDate DESC","CreationDate":"2018-10-28 16:44:04","validated":true}
{"QuerySetId":567274,"Title":"Answers of users in Latvia","Description":null,"QueryBody":"SELECT  OwnerUserId [UserId]\n, sum(case when PostTypeId = 1 then 1 else 0 end) [QuestionsCount]\n, sum(case when PostTypeId = 2 then 1 else 0 end) [AnswersCount]\n, sum(case when PostTypeId = 1 then Score else 0 end) [QuestionsScore]\n, sum(case when PostTypeId = 2 then Score else 0 end) [AnswersScore]\nfrom Posts p\nwhere exists (\n  SELECT *\n  from Users u\n  where u.Id = p.OwnerUserId\n  and (upper(u.Location) like '%LATVIJA%' \n    or upper(u.Location) like '%LATVIA%' \n    or upper(u.Location) = 'LV'\n  )\n)\ngroup by OwnerUserId","CreationDate":"2016-11-01 23:29:21","validated":true}
{"QuerySetId":571818,"Title":"StackOverflow users from IRAN TEHRAN","Description":"List of StackOverflow users from IRAN TEHRAN \u0627\u06cc\u0631\u0627\u0646 \u062a\u0647\u0631\u0627\u0646 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0627\u06cc\u0631\u0627\u0646\u06cc \u0627\u0633\u062a\u06a9\u0622\u0648\u0631\u0641\u0644\u0648.\n","QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position\n        ,DisplayName\n        ,Reputation\n        ,Age\n        ,WebsiteUrl\n        ,AboutMe\n        ,'http:\/\/stackoverflow.com\/users\/' + CONVERT(VARCHAR(10), Id) AS ProfileUrl\n    FROM Users(NOLOCK)\n   WHERE UPPER(Location) like N'%TEHRAN%'\n      OR Location like N'%, IR'\n      OR Location like N'%,iran'\n      OR UPPER(Location) like N'%\u0627\u06cc\u0631\u0627\u0646%'\n      OR Location like N'%\u062a\u0647\u0631\u0627\u0646%'\n      OR UPPER(Location) like N'%IRAN%'\n      OR UPPER(Location) like N'%Qom%'\n      OR Location like N'%Mashhad%'\n      OR UPPER(Location) like N'%ISFAHAN%'\n      OR Location like N'%ISFEHAN%'\nORDER BY Reputation DESC","CreationDate":"2016-11-05 21:25:00","validated":true}
{"QuerySetId":574212,"Title":"The top 250 answers with the most up-votes (ignores down-votes)","Description":null,"QueryBody":"SELECT  top 250 count(v.postid) as 'Vote count', v.postid AS [Post Link],p.body\nfrom votes v \ninner join posts p on p.id=v.postid\nwhere PostTypeId = 2 and VoteTypeId=2\ngroup by v.postid,p.body\norder by 'Vote count' desc","CreationDate":"2016-11-08 11:08:10","validated":true}
{"QuerySetId":575753,"Title":"StackOverflow score to length ratio","Description":null,"QueryBody":"SELECT id as [Post Link], Score, len(body) as Length, cast(score as float) \/ len(body) as Ratio, OwnerUserId as [User Link] from posts order by cast(score as float) \/ len(body) desc","CreationDate":"2016-11-10 21:36:33","validated":true}
{"QuerySetId":575842,"Title":"Post length to score ratio","Description":null,"QueryBody":"SELECT  id as [Post Link], Score, len(body) as Length, cast(score as float) \/ len(body) as Ratio, OwnerUserId as [User Link]\nfrom posts\nwhere body <> ''\norder by cast(score as float) \/ len(body) desc","CreationDate":"2016-11-11 1:11:20","validated":true}
{"QuerySetId":576802,"Title":"Most popular StackOverflow tags in October 2016","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as OctoberRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInOctober,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2016-01-01'\nand Posts.CreationDate > '2016-12-31'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\n)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2016-11-14 2:19:32","validated":true}
{"QuerySetId":576944,"Title":"questions from 2010.01.01 to 2010 10.10","Description":null,"QueryBody":"SELECT  * from posts where \ncreationdate >= '2010-01-01 00:00:00' and creationdate < '2010-01-10 00:00:00'\nand PostTypeId = 2\norder by creationdate desc","CreationDate":"2016-11-13 14:25:24","validated":true}
{"QuerySetId":579261,"Title":"Find people with a tag-based silver badge in a certain country","Description":"Find people with a tag-based silver badge in a certain country.\nUseful to search experts on a given subject.","QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Users.Id AS [User Link],\n    Reputation,\n    Location\nFROM\n    Users, Badges\nWHERE\n    LOWER(Users.Location) LIKE LOWER('%##CountryName##%')\n    AND Users.Id = Badges.UserId\n    AND Badges.Class = 3\n    AND Badges.TagBased = 1\n    AND LOWER(Badges.name) = LOWER('##TagName##')\nORDER BY\n    Reputation DESC;","CreationDate":"2016-11-16 19:27:21","validated":true}
{"QuerySetId":579431,"Title":"number of posts by tags","Description":null,"QueryBody":"SELECT  count(p.id) as nb, tagname\nfrom posts p\ninner join posttags pt on pt.postid = p.id\ninner join tags t on pt.tagid = t.id\ngroup by tagname\norder by nb desc","CreationDate":"2016-11-17 2:10:39","validated":true}
{"QuerySetId":579868,"Title":"total of unanswered questions x user reputation","Description":null,"QueryBody":"SELECT  p.id, ownerdisplayname, u.reputation, title, tags, viewcount, p.creationdate, answercount, count(*)\nfrom posts p, users u\nwhere \nAnswerCount > 0 and\nAcceptedAnswerId is null and\np.owneruserid = u.id\ngroup by p.id, ownerdisplayname, u.reputation, title, tags, viewcount, p.creationdate, answercount","CreationDate":"2016-11-17 23:14:35","validated":true}
{"QuerySetId":580560,"Title":"Last 5 Notable Question Badges in MATLAB Tag","Description":null,"QueryBody":"SELECT  DISTINCT TOP 5 \nCreationDate,\nPosts.Id as [Post Link],\nPosts.Tags as [Tagged With]\nFROM Posts \nWHERE (Tags LIKE '%matlab%')\nORDER BY CreationDate DESC","CreationDate":"2016-11-19 10:01:59","validated":true}
{"QuerySetId":580681,"Title":"Top 500 Users In A Given Tag With Rank","Description":null,"QueryBody":"DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT \n  ROW_NUMBER() OVER(ORDER BY T.UpVotes DESC) AS [Rank],\n  T.Id as [User Link],\n  T.UpVotes\n\nFROM\n(SELECT TOP 500\n    u.Id,\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC) T","CreationDate":"2016-11-19 18:25:01","validated":true}
{"QuerySetId":580682,"Title":"A User Rank In A Given Tag","Description":null,"QueryBody":"SELECT \n  T2.Rank,\n  T2.Id as [User Link],\n  T2.UpVotes as [Total Up Votes]\nFROM (\nSELECT \n  ROW_NUMBER() OVER(ORDER BY T.UpVotes DESC) AS Rank,\n  T.Id,\n  T.UpVotes\n\nFROM\n(SELECT\n    u.Id,\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC) T\n) T2\nWHERE\n    T2.id = @UserId","CreationDate":"2016-11-19 18:23:06","validated":true}
{"QuerySetId":580684,"Title":"A User Rank by Reputation","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n  T2.Position,\n  T2.Id as [User Link],\n  T2.Reputation\nFROM (\nSELECT \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position,\n  Id,\n  Reputation\nFROM Users\n) T2\nWHERE\n    T2.id = @UserId","CreationDate":"2016-11-19 21:52:54","validated":true}
{"QuerySetId":581360,"Title":"Find user info all users in Paris","Description":null,"QueryBody":"SELECT  \n  Id AS [Id Link],\n  DisplayName,\n  Reputation,\n  WebsiteUrl,\n  Location,\n  AboutMe,\n  Views,\n  UpVotes,\n  DownVotes,\n  EmailHash,\n  Age,\n  AccountId\nFROM \n  Users\nWHERE\n   LOWER(Location) LIKE '%paris%'\nORDER BY\n  Reputation DESC","CreationDate":"2016-11-21 18:47:21","validated":true}
{"QuerySetId":581745,"Title":"Unpopular golfs for golfing languages","Description":null,"QueryBody":"SELECT  Id FROM Tags WHERE TagName='code-golf' -- 12\n\nSELECT TOP 10 *\nFROM (\n  SELECT\n    Id,\n    Title,\n    COUNT(Golfed) AS TotalAnswers,\n    SUM(Golfed) AS TotalGolf,\n    AVG(Golfed) AS GolfFraction\n  FROM (\n    SELECT\n      q.Id,\n      q.Title,\n      CASE WHEN (\n        ' ' + a.Body + ' ' LIKE '%[^a-z]pyth[^a-z]%'\n      ) THEN 1.0 ELSE 0.0 END AS Golfed\n    FROM Posts AS a\n    INNER JOIN Posts AS q ON (q.Id = a.ParentId)\n    INNER JOIN PostTags AS t ON (t.PostId = q.Id AND t.TagId = 12)\n  ) AS t\n  GROUP BY Id, Title\n) AS t\nWHERE TotalAnswers > 2\nORDER BY GolfFraction DESC","CreationDate":"2016-11-22 1:18:16","validated":true}
{"QuerySetId":582502,"Title":"Top 100 users in Italy.","Description":null,"QueryBody":"SELECT  TOP 100\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('Italy')\nORDER BY\n    Reputation DESC;","CreationDate":"2016-11-23 18:12:21","validated":true}
{"QuerySetId":583315,"Title":"Top 100 Last Two Months Related Tags of Single Tag","Description":null,"QueryBody":"WITH  that base tag.\n\nselect TOP(100) t2.TagName as \"Related Tag\", count(t2.TagName) as \"Count\"\n\nfrom PostTags as pt1\n  INNER JOIN Tags as t1 ON pt1.TagId = t1.Id\n  INNER JOIN PostTags as pt2 ON pt1.PostId = pt2.PostId AND pt1.TagId <> pt2.TagId\n  INNER JOIN Tags as t2 ON pt2.TagId = t2.Id\n  INNER JOIN posts A on pt2.postid = A.id\nwhere t1.TagName = 'ibm-bluemix'\nand A.creationdate > getdate() - 60 -- Date filter\ngroup by t1.TagName, t2.TagName\norder by count(t2.TagName) desc","CreationDate":"2017-02-23 13:40:24","validated":true}
{"QuerySetId":583553,"Title":"Top 20 users from kochi","Description":null,"QueryBody":"SELECT  TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%Kochi, Kerala%'\n    OR UPPER(Location) LIKE '%Kochi, Kerala%'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-09-28 19:12:56","validated":true}
{"QuerySetId":583703,"Title":"How many answers did users answer on the last year? You can select the minimum number of answers to be considered. It also returns the reputation of such users. It is ordered by the number of answers in descending order.","Description":"How many answers did users answer on the last year?\nYou can select the minimum number of answers to be considered.\nIt also returns the reputation of such users.\nIt is ordered by the number of answers in descending order.","QueryBody":"SELECT  OwnerUserId [User Link], \n  Reputation,\n  count(*) as [Answers last year]\nfrom Posts \njoin Users u on u.Id = OwnerUserId \nwhere PostTypeId = 2\nand Posts.CreationDate >= DATEADD(month,-12, DATEADD(month, DATEDIFF(month,0,GETDATE()), 0) )\ngroup by OwnerUserId, Reputation\nhaving count(*) >= ##MinAnswers##\norder by [Answers last year] desc","CreationDate":"2016-11-25 13:34:04","validated":true}
{"QuerySetId":586301,"Title":"Get unanswered Latest 20 Questions By Tag","Description":null,"QueryBody":"SELECT  TOP 20\n    q.Id AS [Post Link],\n    q.TAGS\nFROM\n    Posts q\n  LEFT OUTER JOIN\n    Posts a \n    ON \n    q.Id = a.ParentId\n    AND\n    a.PostTypeId = 2\nWHERE\n    q.PostTypeId = 1\n    AND\n    a.Id IS NULL\n    AND\n    q.TAGS LIKE '%<##TagName##>%'\nORDER BY\n    q.CreationDate","CreationDate":"2016-11-29 18:18:08","validated":true}
{"QuerySetId":586332,"Title":"Search keyword in user comments","Description":null,"QueryBody":"SELECT  CONCAT('http:\/\/worldbuilding.stackexchange.com\/questions\/', PostID), Score, Text, CreationDate FROM comments WHERE Text Like '%##Keyword##%' COLLATE Latin1_General_100_CI_AI_SC ORDER BY CreationDate DESC","CreationDate":"2018-06-12 2:01:18","validated":true}
{"QuerySetId":586650,"Title":"My posts which were last edited by someone else","Description":null,"QueryBody":"SELECT  Id AS [Post Link], LastEditDate, Body\n  FROM posts\n  WHERE OwnerUserId = ##UserId##\n    AND LastEditorUserId != OwnerUserId\n  ORDER BY LastEditDate DESC","CreationDate":"2016-11-30 14:24:26","validated":true}
{"QuerySetId":592404,"Title":"Top 20 highest upvoted questions regarding Android","Description":null,"QueryBody":"SELECT  TOP 20 p.Title, p.Body, COUNT(v.PostID), v.PostID AS [Post Link], p.Tags\nFROM Posts P\nJOIN Votes V on p.Id=v.Postid\nWHERE PostTypeId = 1 \nAND VoteTypeId=2 \nAND p.Tags LIKE '%android%'\nGROUP BY p.Title, p.Body, v.PostID, p.Tags\nORDER BY COUNT(v.PostID) DESC","CreationDate":"2016-12-08 15:35:05","validated":true}
{"QuerySetId":594367,"Title":"Users with specific numbers of questions \/ answers","Description":null,"QueryBody":"SELECT  userid as [User Link]\n      , sum(q) q\n      , sum(a) a \nfrom\n(\nSELECT owneruserid as userid\n     , count(*) q\n     , 0 a\nfrom posts\nwhere posttypeid = 1\nand owneruserid is not null\ngroup by owneruserid\nhaving count(*) > ##q##\nunion\nSELECT owneruserid\n     , 0 \n     , count(*) a\nfrom posts\nwhere posttypeid = 2\nand owneruserid is not null\ngroup by owneruserid\nhaving count(*) < ##a##\n) as data\ngroup by userid\nhaving sum(q) > ##q## and sum(a) < ##a##\norder by  sum(a) desc","CreationDate":"2016-12-10 15:16:27","validated":true}
{"QuerySetId":594894,"Title":"Most favorited questions for a certain tag","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], p.FavoriteCount, p.Title, p.Body\n  FROM Posts AS p\n  INNER JOIN PostTags AS pt ON p.Id = pt.PostId\n  INNER JOIN Tags AS t ON t.Id = pt.TagId\n  WHERE t.TagName = ##tagName:string##\n  ORDER BY p.FavoriteCount DESC","CreationDate":"2016-12-10 20:50:47","validated":true}
{"QuerySetId":596013,"Title":"Top 10 users of Kadi, Gujarat","Description":null,"QueryBody":"Top 10 of Kadi, Gujarat","CreationDate":"2016-12-12 14:44:33","validated":true}
{"QuerySetId":596263,"Title":"Number of comments on each user's posts","Description":null,"QueryBody":"SELECT  users.displayname, count(posts.id) as number_of_posts,\nSUM(commentcount) * 1.0 \/ count(posts.id) as number_of_comments_per_post\nfrom users inner join\nposts on posts.owneruserid = users.id\n--where posts.parentid IS NOT NULL\ngroup by displayname\norder by 2 desc","CreationDate":"2016-12-12 16:36:24","validated":true}
{"QuerySetId":596423,"Title":"Questions going from [status-declined] to [status-completed] after posting a bounty","Description":null,"QueryBody":"SELECT  DISTINCT(d.postid) AS [Post Link]\n  FROM posthistory AS d\n  INNER JOIN posthistory AS c\n    ON d.postid = c.postid\n  INNER JOIN votes AS v\n    ON v.postid = c.postid\n    AND v.creationdate > d.creationdate\n    AND v.creationdate < c.creationdate\n  WHERE d.posthistorytypeid = 6\n    AND d.text LIKE '%<status-declined>%'\n    AND c.posthistorytypeid = 6\n    AND c.text LIKE '%<status-completed>%'\n    AND v.votetypeid = 8","CreationDate":"2016-12-12 19:08:46","validated":true}
{"QuerySetId":599669,"Title":"Users Mentioning DropBox in AboutMe","Description":null,"QueryBody":"SELECT \nId as 'User ID',\nDisplayName as 'User Name',\nReputation as 'Reputation',\nLocation as 'Location',\nAboutMe as 'User Bio'\nfrom Users\nwhere AboutMe like '%dropbox%'\norder by Reputation desc","CreationDate":"2017-01-05 23:43:45","validated":true}
{"QuerySetId":600611,"Title":"Most upvoted questions by tag","Description":null,"QueryBody":"SELECT  TOP 12 COUNT(v.PostID), v.PostID AS [Post Link], p.Tags, DATEPART(Year,p.CreationDate)\nFROM Posts P\nJOIN Votes V on p.Id=v.Postid\nWHERE PostTypeId = 1 \nAND VoteTypeId=2 \nGROUP BY p.Title, p.Body, v.PostID, p.Tags, DATEPART(Year,p.CreationDate)\nORDER BY COUNT(v.PostID) DESC","CreationDate":"2017-05-06 11:21:49","validated":true}
{"QuerySetId":604145,"Title":"Questions which were closed after a suggested edit was approved","Description":null,"QueryBody":"SELECT  DISTINCT(p.Id) AS [Post Link]\n  FROM SuggestedEdits AS se\n  INNER JOIN Posts AS p ON se.PostId = p.Id\n  WHERE se.ApprovalDate IS NOT NULL\n    AND p.ClosedDate > se.CreationDate","CreationDate":"2016-12-19 1:34:12","validated":true}
{"QuerySetId":607101,"Title":"Filter Title Questions by Two Tags","Description":null,"QueryBody":"SELECT  P.title, P.tags, P.creationdate\nFROM Posts P, PostTags Pt, Tags T\nWHERE P.Id = Pt.PostId\nAND T.Id = Pt.TagId\nAND T.TagName = '##tags##'\nAND T.TagName <>'##tags2##'","CreationDate":"2017-01-24 15:47:22","validated":true}
{"QuerySetId":607410,"Title":"Community Voting Statistics of Stack Overflow","Description":"http:\/\/meta.stackexchange.com\/questions\/156143\/community-voting-statistics-of-stack-overflow\/288704#288704","QueryBody":"SELECT  year(v.creationdate)\n     , sum(case when votetypeid = 1 then 1 else 0 end) as accepted\n     , sum(case when votetypeid = 2 and posttypeid = 1 then 1 else 0 end) as [Q upmod]\n     , sum(case when votetypeid = 3 and posttypeid = 1 then 1 else 0 end) as [Q downmod]\n     , sum(case when votetypeid = 2 and posttypeid = 2 then 1 else 0 end) as [A upmod]\n     , sum(case when votetypeid = 3 and posttypeid = 2 then 1 else 0 end) as [A downmod]\nfrom posts p \ninner join votes v on v.postid = p.id\nwhere votetypeid in (1,2,3)\ngroup by year(v.creationdate)","CreationDate":"2016-12-23 20:32:29","validated":true}
{"QuerySetId":607686,"Title":"Top 100 users from shanghai","Description":null,"QueryBody":"SELECT  TOP 100\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%shanghai%'\n    OR UPPER(Location) LIKE '%shanghai%'\nORDER BY\n    Reputation DESC;","CreationDate":"2018-02-22 18:58:19","validated":true}
{"QuerySetId":607693,"Title":"Top 10 users for c++ in China","Description":null,"QueryBody":"SELECT  TOP 10\n   ROW_NUMBER() OVER(ORDER BY P3.Posts DESC) AS [#], \n   Users.id [User Link],\n   P3.Posts,\n   Users.Reputation\n\nFROM Users with (nolock)\n\nINNER JOIN \n(SELECT Posts.OwnerUserId AS UserId, Count(*) AS Posts\n  FROM Tags \n    INNER JOIN PostTags with (nolock) ON PostTags.TagId = Tags.id\n    INNER JOIN Posts with (nolock) ON Posts.ParentId = PostTags.PostId\n  WHERE Tags.TagName = 'c++'\n    AND Posts.CommunityOwnedDate IS NULL\n  GROUP BY Posts.OwnerUserId\n) P3 ON P3.UserId = Users.Id\n\nWHERE\n  LOWER(Location) LIKE '%china%'\n  OR UPPER(Location) LIKE '%CHN%'\n  \nORDER BY Reputation DESC;","CreationDate":"2018-01-26 13:22:53","validated":true}
{"QuerySetId":608156,"Title":"Top users in Sri lanka for Python","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.Reputation,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('perl')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%lanka%'\nOR lower(us.Location) LIKE '%colombo%'\n    OR lower(us.Location) LIKE '%kandy%'\nORDER BY Score DESC;","CreationDate":"2019-10-16 18:58:39","validated":true}
{"QuerySetId":609937,"Title":"TensorFlow: number of answerers over time","Description":null,"QueryBody":"SELECT  a.OwnerUserId, MIN(a.CreationDate), ROW_NUMBER() OVER(ORDER BY MIN(a.CreationDate) ASC) AS AnswerCount\nFROM Posts q INNER JOIN Posts a ON a.ParentId = q.Id\nWHERE q.Tags LIKE '%<tensorflow>%'\nGROUP BY a.OwnerUserId\nORDER BY MIN(a.CreationDate) ASC","CreationDate":"2016-12-30 5:16:29","validated":true}
{"QuerySetId":610056,"Title":"Top Users in New Zealand","Description":"Created by samliew (http:\/\/stackoverflow.com\/users\/584192\/samuel-liew)\n","QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    DisplayName, \n    Reputation, \n    Location \nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%New Zealand%')\nORDER BY\n    Reputation DESC;","CreationDate":"2016-12-30 13:53:50","validated":true}
{"QuerySetId":610212,"Title":"Questions with score above n and without accepted answer","Description":null,"QueryBody":"SELECT  top ##howmany?25## p.Id [Post Link], p.OwnerUserId as [User Link], p.Score\nfrom Posts p\nwhere p.score >= ##minscore?3##\n   and p.AcceptedAnswerId is null\n   and p.PostTypeId = 1   \n   and p.closedDate is null\norder by p.Score DESC","CreationDate":"2016-12-31 3:37:53","validated":true}
{"QuerySetId":610369,"Title":"Top 5 Users from Pakistan by Reputation","Description":null,"QueryBody":"SELECT  TOP 5\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%pakistan%'\n    OR UPPER(Location) LIKE '%PK'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-01-08 0:01:21","validated":true}
{"QuerySetId":610400,"Title":"Best of Code Review 2016 - Best Newcomer (question) category","Description":null,"QueryBody":"DECLARE  @TargetYear INT = 2016;\nDECLARE @Question INT = 1;\nWITH FirstQuestions AS (\n  SELECT MIN(p.Id) AS [PostId]\n  FROM Posts AS p\n  WHERE p.PostTypeId = @Question\n  GROUP BY p.OwnerUserId\n)\nSELECT\n  fq.PostId AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.Score,\n  p.CreationDate\nFROM \n  FirstQuestions AS fq\n  JOIN Posts AS p\n    ON fq.PostId = p.Id\nWHERE\n  DATEPART(YEAR, CreationDate) = @TargetYear\n  AND p.ClosedDate IS NULL\nGROUP BY\n  fq.PostId,\n  p.OwnerUserId,\n  p.Score,\n  p.CreationDate\nORDER BY \n  p.Score DESC,\n  p.CreationDate ASC","CreationDate":"2017-01-02 6:07:46","validated":true}
{"QuerySetId":610822,"Title":"Vote count by vote type","Description":null,"QueryBody":"SELECT  vt.Name, count(*) from Votes v\nINNER JOIN VoteTypes vt\n    ON v.VoteTypeId = vt.Id\n\nGROUP BY vt.Name\nORDER BY vt.Name","CreationDate":"2017-01-03 16:55:30","validated":true}
{"QuerySetId":611026,"Title":"My Comments with Score of At Least X","Description":"Gets a list of all your comments that have a score of at least a given amount.","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT ID AS [Comment Link],\n       Text,\n       Score\nFROM Comments\nWHERE UserId = @UserId\n    AND Score >= @Score\nORDER BY \n    Score DESC","CreationDate":"2017-01-03 23:35:37","validated":true}
{"QuerySetId":611173,"Title":"\"Very well, thank you\" comments","Description":null,"QueryBody":"SELECT \n  u.Id as [User Link],\n  c.Id as [Comment Link],\n  c.CreationDate,\n  c.Score\nfrom users u\n  left join comments c\n    on c.UserId = u.Id\nwhere UPPER(text) like UPPER('%very well, thank you%') \n\n\norder by c.CreationDate asc","CreationDate":"2017-01-04 6:37:22","validated":true}
{"QuerySetId":611591,"Title":"Answers with word \".BY\" for \"data.table\" tag posts","Description":null,"QueryBody":"SELECT  OwnerUserId as [User Link], Id As [Post Link]\nFROM Posts\nWHERE ParentId IN (\n    SELECT ID\n    FROM Posts\n    WHERE Tags like '%data.table%'\n      AND Body COLLATE Latin1_General_CS_AS like '%column%'\n  )\n  AND Body COLLATE Latin1_General_CS_AS like '%.BY%'","CreationDate":"2017-01-05 4:59:10","validated":true}
{"QuerySetId":611696,"Title":"Questions with all answers having at least given score","Description":null,"QueryBody":"SELECT  question.Id as [Post Link],\n  question.Score,\n  question.AnswerCount,\n  min(answer.Score) as \"Lowest answer score\"\nFROM Posts as question, Posts as answer\nWHERE question.PostTypeId = 1\n  AND  answer.PostTypeId=2 \n  AND answer.ParentId = question.Id \nGROUP BY \n  question.Id,\n  question.Score,\n  question.AnswerCount\nHAVING min(answer.score) >= ##MinScore?10##\nORDER BY question.Score DESC","CreationDate":"2017-01-05 19:29:55","validated":true}
{"QuerySetId":612830,"Title":"Count of Tags relevant to Taxonomist","Description":"Returns the number of tags that would be eligible for awarding Taxonomist if it could be awarded multiple times","QueryBody":"SELECT  \n  COUNT(*) as Tag_Count\nFROM Tags t\nWHERE\n  t.Count >= 50","CreationDate":"2017-01-09 7:52:35","validated":true}
{"QuerySetId":612905,"Title":"Top Closed Tags of The Year","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as YearRank,\n       rate.Rate as QuestionsInYear,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2016-12-31'\nand Posts.CreationDate > '2016-01-01'\nand Posts.ClosedDate IS NOT NULL\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2017-01-09 12:58:37","validated":true}
{"QuerySetId":614190,"Title":"Silver Badges for C++ Worldwide","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Users.Id AS [User Link],\n    Reputation,\n    Location\nFROM\n    Users, Badges\nWHERE\n    Users.Id = Badges.UserId\n    AND Badges.Class = 1\n    AND Badges.TagBased = 1\n    AND Badges.name = 'c++'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-04-27 20:44:23","validated":true}
{"QuerySetId":614659,"Title":"Users between 21 and 29 and votes 200 to 1000","Description":null,"QueryBody":"SELECT     \n*\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##Location##%')\n    AND AGE BETWEEN 21 AND 29\n    AND UPVOTES BETWEEN 200 AND 1000","CreationDate":"2017-01-12 1:48:22","validated":true}
{"QuerySetId":615851,"Title":"Negative scored questions percentage per year","Description":null,"QueryBody":"DECLARE  @year int = ##year##\n\nselect sum(case when Score < 0 then 1 else 0 end) * 100 \/ count(*) as percentage,\n       count(*) as total,\n       sum(case when Score < 0 then 1 else 0 end) as negatice_count\nfrom posts\nwhere year(creationdate) = @year\nand PostTypeId = 1","CreationDate":"2017-01-14 16:13:10","validated":true}
{"QuerySetId":616003,"Title":"Top Users from Algeria all wilaya","Description":null,"QueryBody":"SELECT  TOP ##Count:int?1000##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        Id AS [User Link],\n        Reputation,\n        -- Id AS ID,\n        -- Age,\n        Location,\n        WebsiteUrl as Wesbite,\n        LastAccessDate AS Seen,\n        -- Views,\n        -- UpVotes,\n        -- DownVotes,\n        CreationDate   \n        \nFROM Users \nWHERE \n        Reputation >= ##MinimalReputation:int?10## \n\n        AND (\n            UPPER(Location) LIKE UPPER('%algeria%')\n            )  \n             \nORDER BY Reputation DESC","CreationDate":"2018-07-31 12:20:50","validated":true}
{"QuerySetId":616934,"Title":"Questions by users with high rep (above 20K)","Description":null,"QueryBody":"SELECT  \n    TOP 50\n    Users.Id as [User Link],\n    Posts.Id as [Post Link],\n    Posts.LastEditDate\nFROM\n    Users\n  INNER JOIN\n    Posts ON Users.Id = OwnerUserId\nWHERE \n    Reputation >= 20000 AND PostTypeId = 2\nORDER BY\n    [LastEditDate] DESC","CreationDate":"2018-02-21 21:36:37","validated":true}
{"QuerySetId":616935,"Title":"Top 20 Users from bangalore","Description":null,"QueryBody":"SELECT  TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%bengaluru%' OR\n    LOWER(Location) LIKE '%bengalore%'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-06-09 14:28:54","validated":true}
{"QuerySetId":617031,"Title":"Open questions by users with rep>1000 from the past year, with link to post","Description":null,"QueryBody":"SELECT  \n    \n    Users.Id as [User Link],\n    Posts.Title as [Posts Link],\n    'http:\/\/english.stackexchange.com\/questions\/'+ cast(posts.id as nvarchar), \n    Posts.LastEditDate,\n    posts.creationdate,\n    posts.closeddate,\n    posts.acceptedanswerid\n    FROM\n    Users\n  INNER JOIN\n    Posts ON Users.Id = OwnerUserId\nWHERE \nReputation >= 1000 AND Title != '' and posts.creationdate>getdate()-365 and closeddate is null and posts.acceptedanswerid is null\nORDER BY\n    [LastEditDate] DESC","CreationDate":"2017-01-18 7:09:56","validated":true}
{"QuerySetId":617064,"Title":"Top 250 users from India","Description":null,"QueryBody":"SELECT  top 250 ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],us.id [User Link],\n       us.DisplayName,\n       us.Reputation,us.Location\nFROM Users us\nWHERE lower(us.Location) like '%india'\nORDER BY Reputation DESC;","CreationDate":"2019-04-26 15:37:24","validated":true}
{"QuerySetId":617436,"Title":"count of questions with an accepted answer","Description":null,"QueryBody":"SELECT  count (q.id) from posts q inner join posts a on q.AcceptedAnswerId = a.id\nwhere q.PostTypeId = 1 ","CreationDate":"2017-04-07 17:43:04","validated":true}
{"QuerySetId":618637,"Title":"Never Too Old To Learn (No Self-Answers)","Description":null,"QueryBody":"SELECT \n    U.Id AS [User Link],\n    P.Id As [Post Link]\n\n\nFROM Posts P\n    INNER JOIN Users U on U.Id = P.OwnerUserId\n    INNER JOIN Posts A on A.ParentId = P.Id\n    WHERE \n        P.PostTypeId = 1 AND\n        A.PostTypeId = 2 AND\n        A.OwnerUserId <> U.Id AND\n    GROUP BY\n        U.Id, P.id\n    ORDER BY\n        U.Id DESC","CreationDate":"2017-01-23 1:38:01","validated":true}
{"QuerySetId":619023,"Title":"Top python answers, short time window","Description":null,"QueryBody":"SELECT  u.id as [User Link],  \n       u.WebsiteUrl,\n       t.TagName, \n       sum(score) totscore\nfrom Posts p, PostTags pt, Tags t, Users u\nWHERE PostTypeId = 2\nAND p.ParentId = pt.PostId\nAND pt.TagId = t.id\nAND p.OwnerUserId = u.id\nAND t.TagName = ##tag:string?python##\ngroup by u.id, \n         u.WebsiteUrl,\n         t.TagName\norder by totscore desc","CreationDate":"2017-01-24 1:13:21","validated":true}
{"QuerySetId":620685,"Title":"COMMENTS - Top 1000 Join the Users table with the Posts table to get Display Name with Location","Description":null,"QueryBody":"SELECT  TOP 1000\n  Comments.Id, PostId, UserId, DisplayName, Location\nFROM\n  Comments\nJOIN\n  Users\nON \n  Comments.UserId = Users.Id","CreationDate":"2017-01-27 21:26:11","validated":true}
{"QuerySetId":621141,"Title":"Get favorites for a given Question","Description":"Grabs the favoriting information on a given question","QueryBody":"DECLARE  @questionID int = ##questionID##;\n\nSELECT * FROM Votes\nWHERE VoteTypeId = 5 \/* for favorites *\/\nAND PostId = @questionID; \/* on given question *\/","CreationDate":"2017-01-29 19:17:04","validated":true}
{"QuerySetId":621414,"Title":"Biblical Hermeneutics > Top 50 Posts by Views per day","Description":null,"QueryBody":"SELECT  TOP (50) P.Id as [Post Link], P.Title, P.ViewCount, P.Score, CAST(GETDATE() - P.CreationDate AS Integer) AS [Days Active], ViewCount\/CAST(GETDATE() - P.CreationDate AS Integer) AS [Average Views Per Day], U.DisplayName\nFROM Posts As P Inner Join Users as U ON P.OwnerUserId = U.Id\nORDER BY P.ViewCount\/CAST(GETDATE() - P.CreationDate AS Integer) DESC","CreationDate":"2017-01-30 21:34:04","validated":true}
{"QuerySetId":622977,"Title":"top users in Reporting services  ssrs in India","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       \n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName like '%reporting%'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%india%'\n\nORDER BY Score DESC;","CreationDate":"2019-04-03 12:35:57","validated":true}
{"QuerySetId":622987,"Title":"Relatively obscure questions with more than four characters","Description":null,"QueryBody":"SELECT  \n    * \nFROM \n    Tags \nWHERE \n    LEN(Text) > 4\nORDER BY \n    Count ASC;","CreationDate":"2017-02-03 10:00:36","validated":true}
{"QuerySetId":623165,"Title":"Gold Badges for Node.js in Poland","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Users.Id AS [User Link],\n    Reputation,\n    Location\nFROM\n    Users, Badges\nWHERE\n    Users.Id = Badges.UserId\n    AND Badges.Class = 1\n    AND Badges.TagBased = 1\n    AND Badges.name = 'node.js'\n    AND LOWER(Users.Location) LIKE LOWER('%Poland%')\nORDER BY\n    Reputation DESC;","CreationDate":"2017-02-03 16:51:26","validated":true}
{"QuerySetId":625404,"Title":"Broken software-centre links in Ask Ubuntu","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link],\n  CreationDate\nFROM Posts\nWHERE Body LIKE '%bit.ly\/software-small%'\nOR Body LIKE '%bit.ly\/software-larse%'\nORDER BY CreationDate DESC","CreationDate":"2017-03-14 5:21:45","validated":true}
{"QuerySetId":626108,"Title":"Active Users -- Two Question Posts a Week during Twenty Weeks For Python Tag","Description":null,"QueryBody":"SELECT  u.Id, u.DisplayName, COUNT(*) as QNum\nFROM Users u INNER JOIN\n  (SELECT OwnerUserId, DATEPART(WEEK, CreationDate) as Week\n   FROM Posts \n   WHERE PostTypeId = 1 AND\n    Tags LIKE '%python%' AND\n    NOT OwnerUserId IS NULL\n  GROUP BY OwnerUserId, DATEPART(WEEK, CreationDate)\n  HAVING COUNT(*) > 2) r ON u.Id = r.OwnerUserId\nGROUP BY u.Id, u.DisplayName\nORDER BY QNum desc","CreationDate":"2017-02-09 18:43:05","validated":true}
{"QuerySetId":627911,"Title":"Uber Employees on Stack Overflow by reputation","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n  lower(Users.AboutMe) LIKE lower('% Uber %')\nORDER BY\n    Reputation DESC;","CreationDate":"2017-02-14 2:00:16","validated":true}
{"QuerySetId":628571,"Title":"Links to the old Astronomy SE site","Description":null,"QueryBody":"SELECT \nId As [Post Link],\nCreationDate\nFROM Posts\nWHERE Body LIKE '%astronomy.stackexchange.com%'\nORDER BY CreationDate DESC","CreationDate":"2017-02-15 19:27:59","validated":true}
{"QuerySetId":630197,"Title":"Highest answer rate of popular tags","Description":null,"QueryBody":"SELECT \n  tags.tagname, \n  count(*) as NumQuestions,\n  sum(case when AcceptedAnswerId is not null then 1 else 0 end) AS NumAnswered,\n  (sum(case when AcceptedAnswerId is not null then 1 else 0 end)*100\/count(*)) AS PercentageAnswered\nfrom tags\n  inner join posttags on posttags.tagid = tags.id\n  inner join posts on posts.id = posttags.postid and posttypeid = 1\n\ngroup by tags.tagname\nhaving count(*) > 100000\norder by PercentageAnswered desc, NumQuestions desc","CreationDate":"2017-02-20 9:57:45","validated":true}
{"QuerySetId":631732,"Title":"Find Best Developers in location with Specific Badge","Description":null,"QueryBody":"SELECT  DISTINCT  \n    u.Id AS [User Link], \n    u.Reputation\nFROM\n    Users u\nINNER JOIN Badges b ON b.UserId = u.Id\nWHERE\n    LOWER(Location) LIKE LOWER('%##CityName##%')\n    AND LOWER(b.Name) LIKE LOWER('%##BadgeName##%')\nORDER BY\n    Reputation DESC;","CreationDate":"2017-02-24 5:57:24","validated":true}
{"QuerySetId":632041,"Title":"How many of my edits have been rolled back?","Description":"Lists all of your posts where someone else performed a rollback after your edit.\n\nThere could be some false positives here, where someone edited after you and the rollback just reverted their changes (and not yours).","QueryBody":"SELECT  DISTINCT\n  edits.PostId AS [Post Link], \n  edits.Comment AS [Edit Comment],\n  edits.CreationDate AS [Edit Date],\n  rollbacks.Comment AS [Rollback Comment],\n  rollbacks.CreationDate AS [Rollback Date]\n\nFROM PostHistory edits\n  INNER JOIN PostHistory rollbacks\n    ON edits.PostId = rollbacks.PostId\n    AND rollbacks.CreationDate > edits.CreationDate\nWHERE \n  edits.PostHistoryTypeId IN (4,5,6)\n  AND rollbacks.PostHistoryTypeId IN (7,8,9)\n  AND edits.UserId = ##UserId?117549##\n  AND rollbacks.UserId <> ##UserId?117549##","CreationDate":"2017-06-05 5:32:53","validated":true}
{"QuerySetId":634518,"Title":"London based Python Bronze Badge","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Users.Id AS [User Link],\n    Reputation,\n    Location\nFROM\n    Users, Badges\nWHERE\n    Users.Id = Badges.UserId\n    AND Badges.Class = 3\n    AND Badges.TagBased = 1\n    AND Badges.name = 'python'\n    AND LOWER(Users.Location) LIKE LOWER('%London%')\nORDER BY\n    Reputation DESC;","CreationDate":"2017-03-01 15:20:28","validated":true}
{"QuerySetId":634701,"Title":"Number of close votes status","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT COUNT(*) FROM Votes WHERE VoteTypeId = 6;","CreationDate":"2017-03-01 23:41:46","validated":true}
{"QuerySetId":637386,"Title":"Number of Questions per month","Description":"Android questions per day in 2011\n","QueryBody":"SELECT \n    YEAR(CreationDate) as Year,\n    MONTH(CreationDate) as Month,\n    COUNT(CreationDate) as Count\nFROM Posts\nWHERE PostTypeId=1\nGROUP BY MONTH(CreationDate), YEAR(CreationDate)\nORDER BY YEAR(CreationDate) ASC, MONTH(CreationDate) ASC;","CreationDate":"2017-04-30 9:22:59","validated":true}
{"QuerySetId":638492,"Title":"Search post where post text like PostText","Description":null,"QueryBody":"SELECT  Id AS [Post Link], Body\n  FROM Posts \n WHERE UPPER(Body) LIKE UPPER('%##PostText##%')\n ORDER BY Score DESC","CreationDate":"2017-03-10 5:50:10","validated":true}
{"QuerySetId":639070,"Title":"Get User Info (Total answers and Accepted Answers). Returns the URL with the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted.","Description":"Returns the URL with the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted.  \nFor https:\/\/www.codersclan.net\/ticket\/659","QueryBody":"SELECT answer.OwnerUserId As [User Link], 'http:\/\/codegolf.stackexchange.com\/users\/' + Cast(answer.OwnerUserId as nvarchar(10)) As [Permalink], Users.Reputation, count(answer.id) AS [Total Answers], count(question.id) AS [Accepted Answers] FROM Posts answer LEFT OUTER JOIN Posts question ON question.AcceptedAnswerId = answer.id INNER JOIN Users ON answer.OwnerUserId = Users.id WHERE answer.OwnerUserId in (##UserId##) AND answer.postTypeId = 2 -- 2 means that post is an answer GROUP BY answer.OwnerUserId, Users.Reputation","CreationDate":"2017-03-18 1:00:41","validated":true}
{"QuerySetId":640928,"Title":"getting all TagSynonyms mapped to Tags","Description":null,"QueryBody":"SELECT   distinct t1.TagName from  tags t1 ,TagSynonyms t2 where t1.TagName=t2.TargetTagName order by t1.TagName","CreationDate":"2017-07-09 22:07:54","validated":true}
{"QuerySetId":641954,"Title":"Top 200 users from Uganda","Description":null,"QueryBody":"SELECT  TOP 200\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%uganda%'\n    OR UPPER(Location) LIKE '%UGA'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-03-16 7:13:34","validated":true}
{"QuerySetId":642206,"Title":"Top editors: own posts vs others'","Description":null,"QueryBody":"SELECT  ph.userid as [User Link],\ncount(ph.id) as allEditCount,\nsum(case ph.userid when p.owneruserid then 0 else 1 end) as otherEditCount,\nsum(case ph.userid when p.owneruserid then 1 else 0 end) as selfEditCount\nfrom\nposthistory ph\njoin posts p\non ph.postid = p.id\nwhere posthistorytypeid in (4,5,6) and\nph.creationdate > ##StartDate:string?2016-01-01##\ngroup by userid\norder by otherEditCount desc","CreationDate":"2017-03-16 19:59:07","validated":true}
{"QuerySetId":646250,"Title":"Count questions by Year for andriod testing Tag","Description":null,"QueryBody":"SELECT  count(P.Id) as Posts, YEAR(P.CreationDate) as Year_Data\nFROM Posts P\nWHERE P.Tags like '%android-testing%'\nGROUP BY YEAR(P.CreationDate)","CreationDate":"2017-07-25 22:06:53","validated":true}
{"QuerySetId":647529,"Title":"average votes per view for questions","Description":null,"QueryBody":"SELECT  max(value)\nfrom (\nSELECT cast(count(v.Id) as float) \/ p.ViewCount as value\nfrom Votes v, Posts p\nwhere v.VoteTypeId in (2, 3)\nand p.Id = v.PostId\nand p.posttypeid = 1\nand p.ViewCount >= 1\ngroup by p.ViewCount, p.id\n) t","CreationDate":"2018-05-08 22:58:28","validated":true}
{"QuerySetId":649059,"Title":"Questions closed\/reopened by mod intervention on the ServerFault","Description":null,"QueryBody":"SELECT  TOP 100 *, CASE WHEN Voter = 9140 THEN 1 ELSE 0 END AS b FROM (\n  SELECT JSON_VALUE(Text, '$.Voters[0].Id') AS Voter, Id, CreationDate\n  FROM PostHistory\n  WHERE PostHistoryTypeId IN (10, 11)\n\n  UNION\n\n  SELECT JSON_VALUE(Text, '$.Voters[1].Id') AS Voter, Id, CreationDate\n  FROM PostHistory\n  WHERE PostHistoryTypeId IN (10, 11)\n\n  UNION\n\n  SELECT JSON_VALUE(Text, '$.Voters[2].Id') AS Voter, Id, CreationDate\n  FROM PostHistory\n  WHERE PostHistoryTypeId IN (10, 11)\n\n  UNION\n\n  SELECT JSON_VALUE(Text, '$.Voters[3].Id') AS Voter, Id, CreationDate\n  FROM PostHistory\n  WHERE PostHistoryTypeId IN (10, 11)\n\n  UNION\n\n  SELECT JSON_VALUE(Text, '$.Voters[4].Id') AS Voter, Id, CreationDate\n  FROM PostHistory\n  WHERE PostHistoryTypeId IN (10, 11)) p\nWHERE Id IS NOT NULL;","CreationDate":"2017-03-27 23:04:00","validated":true}
{"QuerySetId":650798,"Title":"windows phone post count, view count, view\/post ratio per day","Description":null,"QueryBody":"DECLARE  @TagName nvarchar (25) = 'windows-phone'\n\nSELECT TOP 365 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC","CreationDate":"2017-03-31 23:48:31","validated":true}
{"QuerySetId":651546,"Title":"Tag growth in specific projects","Description":null,"QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where year(p.CreationDate) IN (2015,2016, 2017, 2018, 2019) AND\n  TagName IN ('graphql','reactjs', 'redux')\n) as X\ngroup by TagName, [Month]\norder by [Month] asc, TagName asc","CreationDate":"2019-10-28 21:38:29","validated":true}
{"QuerySetId":652044,"Title":"Number of times tags were paired with a given tag","Description":null,"QueryBody":"SELECT  \n  OtherTags.TagName, Count(*) as Pairings\nFROM Tags AS MainTags\n  INNER JOIN PostTags as MainPostTags ON MainPostTags.TagId = MainTags.id\n  INNER JOIN PostTags as OtherPostTags ON MainPostTags.PostId = OtherPostTags.PostId\n  INNER JOIN Tags AS OtherTags ON OtherPostTags.TagId = OtherTags.id\nWHERE \n  MainTags.TagName = ##TagName##\n  AND OtherTags.TagName != ##TagName##\nGROUP BY OtherTags.TagName\nORDER BY Pairings DESC","CreationDate":"2017-04-01 19:35:48","validated":true}
{"QuerySetId":652079,"Title":"New Android Testing by Year","Description":null,"QueryBody":"SELECT  count(P.Title), YEAR(P.CreationDate)\nFROM Posts P\nWHERE\n(P.Tags LIKE '%android-testing%' ) OR\n(P.Tags LIKE '%robotium%' ) OR\n(P.Tags LIKE '%androidviewclient%') OR\n(P.Tags LIKE '%monkeyrunner%') OR\n(P.Tags LIKE '%robolectric%') OR\n(P.Tags LIKE '%android-espresso%') OR\n\n(P.Tags LIKE '%android%' AND P.Tags LIKE '%uiautomator%') OR\n(P.Tags LIKE '%android%' AND P.Tags LIKE '%appium%') OR\n(P.Tags LIKE '%android%' AND P.Tags LIKE '%calabash%') OR\n(P.Tags LIKE '%android%' AND P.Tags LIKE '%test%')\nGROUP BY YEAR(P.CreationDate)","CreationDate":"2017-04-20 22:23:49","validated":true}
{"QuerySetId":652084,"Title":"Top Javascript programmers in Mexico","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('javascript')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%mexico%'\nORDER BY Score DESC;","CreationDate":"2017-04-01 3:07:14","validated":true}
{"QuerySetId":652418,"Title":"average number of accepted answers \/ number of answers where there is more than one answer","Description":null,"QueryBody":"SELECT  count(*) as total\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.posttypeid = 1 \nand a.posttypeid = 2\nand q.acceptedanswerid is not null\nand q.answercount > 1) > 0\nSELECT cast(cast(mine as float) \/ total  * 100 as varchar) + '%' from \n(SELECT count(*) as mine\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.posttypeid = 1 \nand a.posttypeid = 2\nand q.acceptedanswerid is not null\nand q.answercount > 1\nand q.acceptedanswerid = a.id) mine,\n(SELECT count(*) as total\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.posttypeid = 1 \nand a.posttypeid = 2\nand q.acceptedanswerid is not null\nand q.answercount > 1) total\nelse SELECT 'User has not answered any questions where there are multiple answers, one of which is accepted'","CreationDate":"2017-11-06 2:53:47","validated":true}
{"QuerySetId":652474,"Title":"Top C++ users in Israel","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes, u.Reputation As Reputation\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%israel%'\n     AND  TagName = 'c++'\n  GROUP BY u.id, TagName, u.Reputation\n)\n\nSELECT * FROM USER_BY_TAG ORDER BY upvotes DESC ;","CreationDate":"2017-04-02 18:40:24","validated":true}
{"QuerySetId":652476,"Title":"Top java users","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes, u.Reputation As Reputation\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n     TagName IN ('java')\n  GROUP BY u.id, TagName, u.Reputation\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2017-11-05 16:43:27","validated":true}
{"QuerySetId":652818,"Title":"Questions with the highest number of answers.\n","Description":"Questions with the highest number of answers.\n","QueryBody":"SELECT  TOP 100\n    p.OwnerUserId as [User Link],\n    p.Id as [Post Link],\n    p.AnswerCount as [Answers],\n    Score as [Votes],\n    ViewCount  as [Views]\nFROM Posts p\nwhere p.OwnerUserId = 64785\nORDER BY p.AnswerCount DESC","CreationDate":"2017-04-30 9:20:04","validated":true}
{"QuerySetId":656447,"Title":"Earliest and Latest Bumps for Questions Bumped N Times by Community User","Description":null,"QueryBody":"SELECT  S.BumpCount, MIN(S.FirstBump) AS EarliestBump, MAX(S.LastBump) AS LatestBump\n  FROM (SELECT P.ID, B.BumpCount, B.FirstBump, B.LastBump, P.Title\n          FROM Posts AS P\n          JOIN (SELECT H.PostID, COUNT(*) AS BumpCount,\n                       MIN(H.CreationDate) AS FirstBump,\n                       MAX(H.CreationDate) AS LastBump\n                  FROM PostHistory AS H\n                 WHERE PostHistoryTypeID  = 50\n                 GROUP BY PostID\n               ) AS B\n            ON P.ID = B.PostID\n       ) AS S\n GROUP BY S.BumpCount\n ORDER BY S.BumpCount;","CreationDate":"2017-04-11 4:17:39","validated":true}
{"QuerySetId":657180,"Title":"Time between first comment and question closure","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], users.reputation, datediff(n, first_comment, closeddate) as time_between_comment_and_close_vote\nfrom posts inner join\n(SELECT postid, min(creationdate) as first_comment from\ncomments\ngroup by postid) comment on comment.postid = posts.id inner join\nusers on users.id = posts.owneruserid\nwhere posts.closeddate IS NOT NULL\norder by reputation","CreationDate":"2017-04-12 6:43:15","validated":true}
{"QuerySetId":658416,"Title":"Top SO users in Krakow","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Rank,\n  Id AS [User Link], Reputation\nFROM Users\nWHERE LOWER(Location) LIKE '%krakow%'\nORDER BY Reputation DESC;","CreationDate":"2017-05-06 10:17:50","validated":true}
{"QuerySetId":659516,"Title":"Average answer score by the Log2 reputation of the answerer *at the time of the posting*","Description":"This query groups the answers by the Log2 reputation of the answerer *at the time of posting the answer*.\n\nThe reputation is not exact (counts the total answer score * 10), but nearly passes the truth.\n\nThe horizontal line shows the Log2 Reputation! Thus, for example, 17 means reputation between 131072 and 262144!","QueryBody":"DECLARE  @AnswerNo INT;\nSELECT @AnswerNo = COUNT(*)\nFROM Posts\nWHERE PostTypeId = 2;\n\nWITH Raw AS (\n  SELECT\n    1.0 * Posts.Score AS Score,\n    SUM(Posts.Score) OVER (\n        PARTITION BY Users.Id\n        ORDER BY Posts.CreationDate\n        ROWS UNBOUNDED PRECEDING\n    ) AS RunningScore\n  FROM Posts, Users\n  WHERE Posts.OwnerUserId = Users.Id\n    AND Posts.PostTypeId = 2\n),\nLogGroupedRaw AS (\n  SELECT\n    CAST(LOG(RunningScore * 10)\/LOG(2) AS INT)\n      AS LogReputation,\n    Score\n  FROM Raw\n  WHERE RunningScore > 0\n)\nSELECT\n  LogReputation,\n  AVG(Score) AS AvgScore,\n  100.0 * COUNT(*) \/ (COUNT(*)\nFROM Posts\nWHERE PostTypeId = 2) AS PctAnswers\nFROM LogGroupedRaw\nGROUP BY LogReputation\nORDER BY LogReputation","CreationDate":"2017-04-17 19:30:40","validated":true}
{"QuerySetId":660374,"Title":"accept rate, for positive-scoring q\/a, users with rep from elsewhere","Description":null,"QueryBody":"SELECT  \n\ncast(sum(hasAccepted) as float) \/ count(acc.id) as ratio,\ncount(acc.id) as numQuestions,\nsum(hasAccepted) as numAccepts\n\nfrom\n\n(\nSELECT\n  fq.id as id,\n  case when sum(case when a.score > 0 then 1 else 0 end) > 0 then 1 else 0 end as hasPositiveAnswer,\n  case when count(fq.accepted) > 0 then 1 else 0 end as hasAccepted\nfrom\n(\n  SELECT \n    q.id as id,\n    q.AcceptedAnswerId as accepted\n  from posts q\n  join users u\n  on q.owneruserid = u.id\n  where\n    q.posttypeid = 1 and\n    q.score > ##minQScore?1## and\n    u.reputation > q.score * 5 + 1\n\n) as fq\njoin posts a\non fq.id = a.parentid\ngroup by fq.id\n) as acc\nwhere hasPositiveAnswer > 0","CreationDate":"2017-04-19 1:24:53","validated":true}
{"QuerySetId":661084,"Title":"Total users added, by month, with reputation at least 50","Description":null,"QueryBody":"select dateadd(month, datediff(month, 0, u.CreationDate), 0) as 'month', \n  count(*) as '# Users Added',\n  count(iif(u.Reputation >= 50, 1, null)) as '# Users Added (current rep >= 50)'\n\nfrom Users u\n\ngroup by dateadd(month, datediff(month, 0, u.CreationDate), 0)\norder by dateadd(month, datediff(month, 0, u.CreationDate), 0)","CreationDate":"2017-04-20 19:34:45","validated":true}
{"QuerySetId":661156,"Title":"Answers that have been unaccepted","Description":null,"QueryBody":"SELECT  a.id as [Post Link],a.CreationDate,q.LastActivityDate\nfrom posts a inner join posts q on q.id = a.parentid\nwhere q.acceptedanswerid <> a.id\nand (SELECT count(*) from votes where postid = a.id and votetypeid = 1) > 0","CreationDate":"2017-04-21 1:36:49","validated":true}
{"QuerySetId":662125,"Title":"Shows the most popular tags in percent of all questions asked in the month","Description":"Shows the most popular tags in percent of all questions asked in the month","QueryBody":"WITH  TopTags AS (\n  SELECT TOP ##TopN:INT?10## Id, TagName\n  FROM Tags\n  ORDER BY Count DESC\n),\nPostTagMonth AS (\n  SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, CreationDate),\n      DATEPART(mm, CreationDate),\n    1) AS Month,\n    TopTags.TagName\n  FROM Posts, PostTags, TopTags\n  WHERE\n    TopTags.Id = PostTags.TagId\n    AND\n    Posts.Id = PostTags.PostId\n)\nSELECT Month, TagName, COUNT(*) AS N\nFROM PostTagMonth\nGROUP BY Month, TagName\nORDER BY Month, TagName","CreationDate":"2017-04-23 22:42:14","validated":true}
{"QuerySetId":662610,"Title":"monthly questions nodejs, angularjs, & reactjs","Description":null,"QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) Month, \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where TagName in \n    ('node.js','angularjs','reactjs')\n) as X\ngroup by TagName, Month\norder by Month desc, TagName asc","CreationDate":"2017-08-10 22:35:03","validated":true}
{"QuerySetId":664978,"Title":"Number of users with 1 reputation","Description":null,"QueryBody":"SELECT  \n count( * ) count_min_rep\nfrom users WHERE reputation = '1';","CreationDate":"2017-04-30 2:07:50","validated":true}
{"QuerySetId":665494,"Title":"Accepted answer has fewer votes than other answer(s) to question","Description":null,"QueryBody":"SELECT  q.Id as [Post Link],\nq.score QuestionScore,\naa.score AcceptedScore,\nnaa.score NotAcceptedScore\n\nfrom posts q inner join posttypes pt on q.posttypeid = pt.id join \nposts aa on aa.id = q.acceptedanswerid join\nposts naa on naa.id != q.acceptedanswerid and naa.parentid = q.id\n\nwhere naa.score > aa.score and\nnaa.score > 0\n\norder by naa.score desc, aa.score asc","CreationDate":"2017-05-01 10:48:21","validated":true}
{"QuerySetId":667195,"Title":"Search Users By Area and Tag","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY SUM(p.score) DESC) AS [#], \n    p.OwnerUserId AS [User Link], \n    Max(u.Reputation) as [Total Reputation],\n    SUM(p.score) as [Tag Upvote],\n    SUM(p.score)*10 + MAX(CASE q.AcceptedAnswerId\n     WHEN p.Id THEN 15   \n     ELSE 0  \n     END) As [Tag Reputation],\n     SUM(CASE q.AcceptedAnswerId\n     WHEN p.Id THEN 1   \n     ELSE 0  \n     END) As [Accepted Answers],\n    Count(p.id) as [Answers per Tag]\nFROM Users u\nJOIN Posts p ON p.OwnerUserId = u.Id\nINNER JOIN Posts q on q.id = p.parentid\nWHERE\n    LOWER(u.Location) LIKE LOWER('%##CityName##%')\n    AND p.posttypeid = 2 -- just answers\n    AND q.tags like LOWER('%<##TagName##>%')\nGROUP BY p.OwnerUserId\nORDER BY sum(p.score) DESC","CreationDate":"2017-05-04 22:51:22","validated":true}
{"QuerySetId":670788,"Title":"Number of posts by year","Description":null,"QueryBody":"SELECT  datediff(day, CreationDate, getdate())\/365 as yearsBack,\n  count(Id) as postsCount \n  from Posts\ngroup by datediff(day, CreationDate, getdate())\/365 \norder by datediff(day, CreationDate, getdate())\/365 desc","CreationDate":"2017-05-13 7:53:01","validated":true}
{"QuerySetId":670871,"Title":"Posts by day of the week","Description":null,"QueryBody":"SELECT  datepart(weekday, CreationDate) D,\n       count(*) Posts\nfrom Posts\ngroup by datename(weekday, CreationDate), datepart(weekday, CreationDate) \norder by D","CreationDate":"2017-05-14 0:16:20","validated":true}
{"QuerySetId":670935,"Title":"Latest 1000 Protected Questions (which haven't been unprotected)","Description":null,"QueryBody":"SELECT  Top 1000\n  ph.PostId as [Post Link], ph.CreationDate as [ProtectionDate]\nFrom PostHistory ph\nWhere PostHistoryTypeId = 19 and not exists (\n    SELECT * \n    From PostHistory ph2 \n    Where ph2.PostId = ph.PostId and ph2.PostHistoryTypeId = 20 and ph2.CreationDate > ph.CreationDate\n  )\nOrder By ph.CreationDate Desc","CreationDate":"2017-06-03 3:23:38","validated":true}
{"QuerySetId":671087,"Title":"Most popular good questions about Python","Description":"All non-CW questions with at least 1000 views ordered by votes ascending so that the least popular of the questions is on top\n","QueryBody":"Select TOP 500\n  question.Id as [Post Link],\n  question.Score,\n  question.AnswerCount as \"Answer Count\",\n  question.ViewCount,\n  question.Title,\n  question.Body,\n\n  t.TagName\nfrom\n  Posts as question\nJOIN PostTypes ty ON ty.Id = question.PostTypeId\nJOIN PostTags questiont ON question.Id = questiont.PostId\nJOIN Tags t ON t.Id = questiont.TagId\nwhere  \n  question.CommunityOwnedDate is null and\n  question.PostTypeId=1 and\n  question.ViewCount > 1 and\n  t.TagName = 'python' and\n  ty.Name = 'Question'\n\n\norder by question.Score asc, question.ViewCount desc","CreationDate":"2017-05-31 13:46:53","validated":true}
{"QuerySetId":671268,"Title":"Counting http -> https edits by the Community User","Description":null,"QueryBody":"SELECT  Count(*)\nFrom PostHistory\nWhere PostHistoryTypeId = 5              -- edited body\n      and UserId = -1                    -- community user\n      and Comment like 'replaced http%'  -- comments are of the form \"replaced http:\/\/... with https:\/\/...\"","CreationDate":"2017-05-15 19:18:39","validated":true}
{"QuerySetId":671524,"Title":"Questions favorited by the OP","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], posts.FavoriteCount, posts.Score, posts.CreationDate, votes.userid as [User Link]\nfrom votes\njoin posts on (posts.id = votes.postid) \nwhere\n  votetypeid=5 and\n  posts.PostTypeId = 1 and\n  posts.OwnerUserId = votes.UserId\n  order by posts.CreationDate desc","CreationDate":"2017-05-16 16:02:48","validated":true}
{"QuerySetId":671527,"Title":"Questions with negative score favorited only by the OP","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], posts.FavoriteCount, posts.Score, posts.CreationDate, votes.userid as [User Link]\nfrom votes\njoin posts on (posts.id = votes.postid) \nwhere\n  posts.FavoriteCount = 1 and\n  posts.Score < 0 and\n  votetypeid=5 and\n  posts.PostTypeId = 1 and\n  posts.OwnerUserId = votes.UserId\n  order by posts.CreationDate desc","CreationDate":"2017-05-16 16:08:10","validated":true}
{"QuerySetId":671546,"Title":"Questions favorited by a single user","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], posts.FavoriteCount, posts.Score, posts.CreationDate, posts.OwnerUserId as [User Link], votes.userid as [User Link]\nfrom votes\njoin posts on (posts.id = votes.postid) \nwhere\n  posts.FavoriteCount = 1 and\n  votetypeid=5 and\n  posts.PostTypeId = 1\n  order by posts.CreationDate desc","CreationDate":"2017-05-16 17:31:48","validated":true}
{"QuerySetId":672441,"Title":"Question Closures by Vote Counts","Description":null,"QueryBody":"SELECT  TOP 10\n  ph.PostId AS [Post Link],\n  u.DisplayName AS CloseUser,\n  COUNT(v.value) AS VoterCount\nFROM PostHistory ph\nJOIN Posts p ON p.Id = ph.PostId\nJOIN Users u ON u.Id = ph.UserId\nCROSS APPLY OPENJSON(ph.Text,'$.Voters') AS v\nWHERE PostHistoryTypeId = 10\n  AND p.PostTypeId = 1\nGROUP BY\n  ph.PostID,\n  ph.Text,\n  ph.Comment,\n  u.DisplayName","CreationDate":"2017-05-18 16:11:26","validated":true}
{"QuerySetId":672460,"Title":"Question Single Vote Closures by User & Reason","Description":null,"QueryBody":"WITH  superclosures AS\n(\nSELECT\n  ph.Id,\n  ph.PostId AS [Post Link],\n  u.DisplayName AS CloseUser,\n  crt.Name AS CloseReasonType,\n  COUNT(v.value) AS VoterCount\nFROM PostHistory ph\nJOIN Posts p ON p.Id = ph.PostId\nJOIN Users u ON u.Id = ph.UserId\nJOIN CloseReasonTypes crt ON crt.Id = ph.Comment\nCROSS APPLY OPENJSON(ph.Text,'$.Voters') AS v\nWHERE PostHistoryTypeId = 10\n  AND p.PostTypeId = 1\n  AND u.DisplayName <> 'Community'\nGROUP BY\n  ph.Id,\n  ph.PostID,\n  ph.Comment,\n  u.DisplayName,\n  crt.Name\nHAVING COUNT(v.value) = 1\n)\nSELECT\n  CloseUser,\n  CloseReasonType,\n  COUNT(*) AS Closures\nFROM superclosures\nGROUP BY\n  CloseUser,\n  CloseReasonType\nORDER BY CloseUser ASC, COUNT(*) DESC","CreationDate":"2017-05-19 21:26:25","validated":true}
{"QuerySetId":673316,"Title":"Top uses from France in tag 'elixir' or 'phoenix-framework'","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%france%'\n      AND  (TagName = 'elixir' OR TagName = 'phoenix-framework')\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG ORDER BY upvotes DESC ;","CreationDate":"2017-05-22 9:37:29","validated":true}
{"QuerySetId":674291,"Title":"Average score of questions without an accepted answer","Description":null,"QueryBody":"SELECT  avg(score+0.000001) from Posts \nwhere PostTypeId = 1 and AcceptedAnswerId is null","CreationDate":"2017-05-22 23:26:16","validated":true}
{"QuerySetId":674462,"Title":"How many close votes have I cast?","Description":null,"QueryBody":"SELECT YEAR(CreationDate) FROM Votes\nWHERE VoteTypeID = 6\nAND UserID = ##UserId##","CreationDate":"2020-09-14 19:15:56","validated":true}
{"QuerySetId":675877,"Title":"Suggested edits approved by 10k+ers","Description":null,"QueryBody":"SELECT  u.Id AS [User Link], COUNT(v.Id) AS NumberOfCounterexamples\nFROM SuggestedEditVotes AS v\nJOIN Users AS u ON v.UserId = u.Id\nWHERE v.VoteTypeId = 2\nAND u.Reputation >= 10000\nGROUP BY u.Id\nORDER BY NumberOfCounterexamples DESC","CreationDate":"2017-05-26 1:02:50","validated":true}
{"QuerySetId":677339,"Title":"Top users in Argentina for R","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('r')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE LOWER(Location) like '%argentina%'\nORDER BY Score DESC;","CreationDate":"2017-05-29 5:46:42","validated":true}
{"QuerySetId":677412,"Title":"Most popular bad questions about Python","Description":"All non-CW questions with at least 1000 views ordered by votes ascending so that the least popular of the questions is on top\n","QueryBody":"\nSelect TOP 20\n \n  question.Title,\n  question.Score,\n  question.AnswerCount as \"Answer Count\",\n  question.ViewCount,\n  t.TagName\nfrom\n  Posts as question\nJOIN PostTypes ty ON ty.Id = question.PostTypeId\nJOIN PostTags questiont ON question.Id = questiont.PostId\nJOIN Tags t ON t.Id = questiont.TagId\nwhere  \n  question.CommunityOwnedDate is null and\n  question.PostTypeId=1 and\n  question.ViewCount > 1 and\n  t.TagName = 'python' and\n  ty.Name = 'Question'\n\n\norder by question.Score asc, question.ViewCount desc","CreationDate":"2017-05-29 12:07:16","validated":true}
{"QuerySetId":679452,"Title":"[draft] Top users by Tag","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    u.Id AS [User Link], \n    u.Reputation,\n    count(p.id)\nFROM\n    Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nWHERE\n    t.tagname='##tagname##'\ngroup by u.reputation, u.id\nORDER BY\n    count(p.id) DESC,\n    Reputation DESC\n;","CreationDate":"2018-01-16 15:11:35","validated":true}
{"QuerySetId":680410,"Title":"Average Reputation of SO Users n Manchester, United Kingdom with reputation more than 15","Description":null,"QueryBody":"SELECT  \nAVG(reputation) as [Average Reputation],\nCOUNT(Id) as [Total Users]\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%manchester, united kingdom' and reputation >= 15","CreationDate":"2017-06-03 21:57:06","validated":true}
{"QuerySetId":680412,"Title":"Average Reputation of SO Users in Manchester, United Kingdom with reputation equal or more than 15","Description":null,"QueryBody":"SELECT  \nAVG(reputation) as [Average Reputation],\nCOUNT(Id) as [Total Users]\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%manchester, united kingdom' and reputation >= 15","CreationDate":"2017-06-03 22:01:08","validated":true}
{"QuerySetId":681797,"Title":"Tolkien questions with low scoring answers and no accepted answer","Description":null,"QueryBody":"SELECT \n  q.id AS [Post Link],\n  q.creationdate,\n  COUNT(a.id) AS answers,\n  MAX(a.score) AS max_score\nFROM posts q\nLEFT JOIN posts a ON a.parentid = q.id\nWHERE q.posttypeid = 1\n  AND q.AcceptedAnswerID IS NULL\n  AND q.tags LIKE '%star-wars-legends%'\n  AND q.deletiondate IS NULL\n  AND q.closeddate IS NULL\nGROUP BY\n  q.id,\n  q.creationdate\nHAVING MAX(a.score) < 10\nORDER BY\n  max_score,\n  creationdate","CreationDate":"2017-11-23 1:08:08","validated":true}
{"QuerySetId":681814,"Title":"Posts with more than 10 comments","Description":null,"QueryBody":"SELECT \n  p.id AS [Post Link],\n  p.tags,\n  p.creationdate,\n  COUNT(c.id) AS comments\nFROM posts p\nLEFT JOIN comments c ON c.postid = p.id\nWHERE p.posttypeid IN (1, 2)\nGROUP BY\n  p.id,\n  p.tags,\n  p.creationdate\nHAVING COUNT(c.id) > 10\nORDER BY comments DESC","CreationDate":"2017-06-06 23:32:31","validated":true}
{"QuerySetId":682052,"Title":"How many points as user made from (NOT) EXISTS queries","Description":null,"QueryBody":"SELECT  *\nfrom\n(SELECT\n  DisplayName\n  , question\n  , answer\n  , case \n      when id = acceptedAnswerId\n        then score * 10 + 15\n      else score * 10\n   end [postScore]\n   , body\nfrom\n(SELECT\n  u.DisplayName\n  , 'https:\/\/stackoverflow.com\/questions\/' + cast(p.parentId as nvarchar(max)) [question]\n  , 'https:\/\/stackoverflow.com\/questions\/' + cast(p.parentId as nvarchar(max)) + '\/#' + cast(p.id as nvarchar(max)) [answer]\n  , p.id\n  , p2.acceptedAnswerId\n  , p.score\n  , p.body\nfrom users u\n  inner join posts p on u.id = p.owneruserid\n  inner join posts p2 on p2.id = p.parentId\nwhere u.id = @UserId\n  and (\n    p.body like '%where%exists%'\n    or\n    p.body like '%where%not%exists%'\n    )    \n  and p.postTypeId = 2\n  ) result\n  ) result","CreationDate":"2017-06-07 17:01:34","validated":true}
{"QuerySetId":682614,"Title":"Upvotes as more than N% of votes","Description":null,"QueryBody":"DECLARE  @PERCENT float = ##PERCENTDOWNVOTES##\nDECLARE @MIN_VOTES int = ##MINVOTES##\n\n\nSELECT \n  id as [User Link], \n  Reputation,\n  UpVotes,\n  DownVotes,\n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) as PercentDown\n\nfrom USERS\n\nwhere \n  downVotes>0 and \n  (1.0*downVotes\/(1.0*UpVotes+1.0*DownVotes)) > @PERCENT\/100.0 and\n  (UpVotes+DownVotes) > @MIN_VOTES\n\norder by DownVotes desc","CreationDate":"2017-12-23 2:38:13","validated":true}
{"QuerySetId":682658,"Title":"Most controversial users on the site","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Users.Id AS UserId,\n    COUNT(CASE WHEN Votes.VoteTypeId = 2 THEN 1 ELSE NULL END) AS Ups,\n    COUNT(CASE WHEN Votes.VoteTypeId = 3 THEN 1 ELSE NULL END) AS Downs\n  FROM Votes, Posts, Users\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Posts.OwnerUserId = Users.Id\n    AND\n    Votes.VoteTypeId IN (2, 3)\n  GROUP BY Users.Id\n),\nOrdered AS (\n  SELECT\n    UserId,\n    Ups,\n    Downs,\n    DENSE_RANK() OVER (ORDER BY Ups DESC) AS UpRank,\n    DENSE_RANK() OVER (ORDER BY Downs DESC) AS DownRank\nFROM Raw)\nSELECT TOP 100\n  UserId AS [User Link],\n  Ups,\n  Downs,\n  UpRank,\n  DownRank\nFROM Ordered\nORDER BY UpRank + DownRank;","CreationDate":"2017-06-08 21:14:40","validated":true}
{"QuerySetId":682739,"Title":"Tags existing as both tags and as synonyms","Description":null,"QueryBody":"SELECT  TagName AS Tag FROM Tags\nINTERSECT\nSELECT SourceTagName AS Tag FROM TagSynonyms","CreationDate":"2017-06-09 0:35:32","validated":true}
{"QuerySetId":682824,"Title":"Unanswered questions that have a zero-score","Description":"Questions that can be marked as answered by upvoting a self-answered question.\n","QueryBody":"SELECT  q.Id AS [Post Link]\nFROM Posts q \nWHERE q.PostTypeId = 1 \n      AND q.ClosedDate IS NULL\n      AND q.AcceptedAnswerId IS NULL\n      AND q.AnswerCount > 0\n      AND EXISTS (SELECT a.Id\n                  FROM Posts a\n                  WHERE a.Score = 0\n                        AND a.ParentId = q.Id)\n      AND NOT EXISTS (SELECT a.Id \n                      FROM Posts a \n                      WHERE a.Score > 0 \n                            AND a.ParentId = q.Id) \nORDER BY q.Id DESC","CreationDate":"2017-06-09 6:29:41","validated":true}
{"QuerySetId":682873,"Title":"Top users in Sri Lanka in Scala , Play framework","Description":null,"QueryBody":"SELECT   ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#] , \n    U.Id AS [User Link], U.Age,\n    U.Location,\n    U.Reputation,\n    U.UpVotes,\n    U.DownVotes\n    \n    from Users U where U.Id in (\n    \nSELECT distinct  \n    U.Id \nFROM\n    Users U inner join Posts P on U.Id=P.OwnerUserId \n    inner join PostTags PT on PT.PostId=P.Id \n    inner join Tags T on T.Id=PT.TagId\nWHERE\n    LOWER(U.Location) LIKE '%sri lanka%' AND LOWER(T.TagName) LIKE 'scala%'\n    \n    \n    );","CreationDate":"2017-06-09 9:07:40","validated":true}
{"QuerySetId":683029,"Title":"Sandboxed posts that have a score > 1 and no activity for a month","Description":null,"QueryBody":"SELECT  Id AS [Post Link], LastActivityDate as [Last Active], Body as [Post Content] FROM Posts WHERE ParentId = 2140 AND LastActivityDate < DATEADD(MONTH, -1, GETDATE()) AND Score > 1 ORDER BY LastActivityDate","CreationDate":"2017-06-09 19:12:56","validated":true}
{"QuerySetId":683078,"Title":"Sandbox: # of Posts by Users Inactive for X Months","Description":null,"QueryBody":"SELECT  \n  'https:\/\/codegolf.meta.stackexchange.com\/a\/' + CAST(P.Id AS nvarchar) + '\/43214|' + CAST(P.Score as nvarchar) \nFrom Posts as P\nWhere (LastActivityDate<DATEADD(mm,-##Month##,getDate())\n  and exists(\n    SELECT * from Users as U\n    Where LastAccessDate<DATEADD(mm,-##Month##,getDate())\n      and U.Id = P.OwnerUserId\n      ))","CreationDate":"2017-06-09 22:07:11","validated":true}
{"QuerySetId":685056,"Title":"find unanswered question of users with reputation lower than 102","Description":"find unanswered question of users with reputation lower than 102","QueryBody":"SELECT \nq.Id,q.title ,'https:\/\/math.stackexchange.com\/questions\/'+cast(q.id as varchar(16)),\nq.Tags\nfrom\n    Posts q\n  inner join\n    Users u\n  on u.Id = q.OwnerUserId\nwhere\n  u.Reputation < 102\n  and q.PostTypeId = 1\n  and q.AcceptedAnswerId  is null\n  order by q.LastEditDate desc","CreationDate":"2017-06-16 2:13:40","validated":true}
{"QuerySetId":685459,"Title":"Users with the most edits of other users' posts in 2017","Description":null,"QueryBody":"SELECT  \n  a.UserId AS [User Link]\n  , COUNT(a.PostId) AS \"Count\"\n  , a.UserId as \"UserId\"\nFROM \n  PostHistory a\n  INNER JOIN Posts b\n  ON a.PostId = b.id\nWHERE \n  a.PostHistoryTypeId = 5 -- Edit Body\n  AND b.CreationDate < '2018-01-01'\n  AND a.CreationDate >= '2017-01-01'\nGROUP BY a.UserId\nORDER BY COUNT(a.PostId) DESC;","CreationDate":"2017-06-18 13:06:35","validated":true}
{"QuerySetId":685478,"Title":"All of a user's edits of other users' posts","Description":null,"QueryBody":"SELECT  \n  a.UserId AS [User Link]\n  , a.PostId as [Post Link]\n  , Comment\n  , *\nFROM \n  PostHistory a\n  INNER JOIN Posts b\n  ON a.PostId = b.id\nWHERE \n  a.PostHistoryTypeId = 5 -- Edit Body\n  AND b.CreationDate < '2014-01-01'\n  AND a.CreationDate >= '2017-01-01'\n  AND a.UserId = ##UserId##","CreationDate":"2017-06-18 13:04:48","validated":true}
{"QuerySetId":686675,"Title":"In Which Tags Am I top 10?","Description":null,"QueryBody":"WITH  top_answerers as (\nselect a.owneruserid\n     , t.tagname \n     , sum(a.score) [tag score]\n     , rank() over(partition by t.tagname order by sum(a.score) desc ) as pos\nfrom posts a\ninner join posts q on q.id = a.parentid\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.id = pt.tagid\nwhere a.posttypeid = 2 -- answer\nand q.posttypeid = 1 -- Question\nand a.owneruserid is not null \ngroup by a.owneruserid\n       , t.tagname\n)\n\nselect tagname\n     , pos\n     , owneruserid as [User Link]\n     , [tag score]\nfrom top_answerers\nwhere  owneruserid = ##userid?918215##\nand pos <= ##pos?10##\norder by pos desc","CreationDate":"2017-06-20 23:24:53","validated":true}
{"QuerySetId":686676,"Title":"Open questions with no comments or answers","Description":null,"QueryBody":"SELECT  \n    Id AS [Post Link],\n    Score,\n    ViewCount AS \"View Count\"\nFROM Posts\nWHERE\n    PostTypeId = 1 \n    AND DeletionDate IS null\n    AND AnswerCount = 0\n    AND CommentCount = 0\n    AND ClosedDate IS null\n    AND CommunityOwnedDate IS null\n    AND NOT EXISTS (\n        SELECT \n            *\n        FROM PostHistory\n        WHERE \n            Posts.Id = PostHistory.PostId\n            AND PostHistory.PostHistoryTypeId = 37 -- No merged questions.\n    )\nORDER BY ViewCount DESC","CreationDate":"2017-06-20 23:26:40","validated":true}
{"QuerySetId":690447,"Title":"Is there a way to find out how many edits have made by user","Description":"suport query for\n\nhttps:\/\/meta.stackexchange.com\/questions\/291912\/is-there-a-way-to-find-out-how-many-edits-ive-made-network-wide","QueryBody":"DECLARE  @accountid int = ##accountid?123456##\n\nselect sum([4]) as [title]\n     , sum([5]) as [body]\n     , sum([6]) as [tag]\n     , count(*) as [revtot]\nfrom \n(\nselect revisionguid\n     , [4] \n     , [5]\n     , [6]\n from\n(select revisionguid\n      , posthistorytypeid\nfrom posthistory ph\ninner join users u on u.id = ph.userid\nwhere posthistorytypeid in (4,5,6)\nand accountid = @accountid) as data\npivot\n(\n   count(posthistorytypeid)\n   for posthistorytypeid in ([4] , [5], [6]) \n) as pvt\n) alldata","CreationDate":"2017-07-02 22:16:54","validated":true}
{"QuerySetId":691445,"Title":"Best Question Degrees By Country","Description":null,"QueryBody":"WITH  \nT as (select \n          CASE\n            WHEN Users.Location LIKE '%,%' THEN LOWER(RTRIM(LTRIM(RIGHT(location, Charindex(',', Reverse(Location))-1))))\n            ELSE LOWER(RTRIM(LTRIM(Location)))\n          END as loc,\n      count(*) as 'count',\n      sum(score) as 'score'\n      from Posts\n        INNER JOIN Users ON OwnerUserId = Users.id\n        where Tags like '%##TagNameInput##%'\n      group by Location ) \nselect loc,\n      sum(count) as total,\n      sum(score) as score,\n      \n      CASE\n        when sum(count) = 0 and sum(score) = 0 then 0\n        WHEN sum(count) = 0 and sum(score) > 0 THEN sum(score) \n        when sum(score) = 0 and sum(count) > 0 then 0\n        else sum(score) * 1.0 \/ sum(count)\n      END as 'degree'\nfrom T group by loc order by score desc","CreationDate":"2017-07-04 19:54:26","validated":true}
{"QuerySetId":691518,"Title":"Best answer degree by country","Description":null,"QueryBody":"WITH  T as (\nselect \n  CASE\n    WHEN u.location LIKE '%,%' THEN LOWER(RTRIM(LTRIM(RIGHT(u.location, Charindex(',', Reverse(u.location))-1))))\n    ELSE LOWER(RTRIM(LTRIM(u.location)))\n    END as loc, \n    count(p.Id) as total,\n    sum(score) as score\nfrom Posts as p \n  JOIN Users as u on p.OwnerUserId = u.id\nwhere p.ParentId > 0\ngroup by u.location\n), S as (\nselect \n  loc,\n  sum(total) as TotalQuestions,\n  sum(score) as TotalScore\n  \n from T \n group by loc )\n \nselect \n    *\nfrom S","CreationDate":"2017-07-05 15:40:13","validated":true}
{"QuerySetId":692473,"Title":"Number of harry potter Questions by Day","Description":null,"QueryBody":"SELECT  dateadd(DAY,0, datediff(day,0, CreationDate )) as cdate, count(*) as count\nfrom Posts\nwhere PostTypeId = 1\nand Tags like '%harry-potter%'\ngroup by dateadd(DAY,0, datediff(day,0, CreationDate ))\norder by count desc","CreationDate":"2017-07-06 22:55:20","validated":true}
{"QuerySetId":695599,"Title":"Top 100 user with highest posts from Kolkata","Description":null,"QueryBody":"SELECT  \n    TOP 100\n    Users.Id as [User Link],\n    Count(Posts.Id) AS Answers,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\n    AND LOWER(Users.Location) LIKE LOWER('%kolkata%')\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > 5\nORDER BY\n    [Average Answer Score] DESC","CreationDate":"2017-07-14 14:48:54","validated":true}
{"QuerySetId":698506,"Title":"Questions where dupe is older as the original","Description":"It doesn't count the rare cases as a question has multiple origs. Also it filters out as the orig and the dupe has the same OP or the same title.","QueryBody":"WITH  DupeRaw AS (\n  SELECT\n    Posts.Id AS PostId,\n    MAX(PostHistory.Id) AS PostHistoryId\n  FROM PostHistory, Posts\n  WHERE\n    PostHistory.PostId = Posts.Id\n    AND\n    Posts.ClosedDate IS NOT NULL\n    AND\n    PostHistory.PostHistoryTypeId = 10\n    AND\n    Comment IN (1, 101)\n  GROUP BY Posts.Id\n),\nDupes AS (\n  SELECT\n    DupeRaw.PostId AS DupeId,\n    JSON_VALUE(PostHistory.Text, '$.OriginalQuestionIds[0]') AS OrigId\n  FROM DupeRaw, PostHistory\n  WHERE\n    DupeRaw.PostHistoryId = PostHistory.Id\n)\nSELECT\n  Orig.Id AS [Post Link],\n  Orig.CreationDate AS OrigPostDate,\n  Dupe.Id AS [Post Link],\n  Dupe.CreationDate AS DupePostDate\nFROM Posts AS Orig, Dupes, Posts AS Dupe\nWHERE\n  Orig.Id = Dupes.OrigId\n  AND\n  Dupe.Id = Dupes.DupeId\n  AND\n  Orig.CreationDate > Dupe.CreationDate","CreationDate":"2017-07-19 20:39:57","validated":true}
{"QuerySetId":698988,"Title":"Invalidated close review tasks where the question remains open","Description":null,"QueryBody":"SELECT  count(*)\nfrom reviewtasks r \ninner join Posts p on p.Id = r.PostId \nwhere r.reviewtasktypeid = 2 and \n      r.reviewtaskstateid = 3 and \n      p.ClosedDate is null and \n      r.CreationDate >= '##startdate##'\n\n-- compared to all close reviews for the same period\n\nSELECT count(*)\nfrom reviewtasks r \nwhere r.reviewtasktypeid = 2 and \n      r.CreationDate >= '##startdate##'","CreationDate":"2017-07-20 21:15:48","validated":true}
{"QuerySetId":700579,"Title":"questions with only a single tag","Description":null,"QueryBody":"SELECT  id \nfrom posts \nwhere PostTypeId = 0 and len(tags) = 1","CreationDate":"2017-07-24 3:07:56","validated":true}
{"QuerySetId":701190,"Title":"all the questions with jira in the title and tag","Description":null,"QueryBody":"SELECT  Id as [Post Link], Title, Body, Tags from Posts where Tags LIKE '%jira%' OR Title LIKE '%JIRA%';","CreationDate":"2017-07-25 5:32:14","validated":true}
{"QuerySetId":701531,"Title":"Rolling 7-Day Count of Posters","Description":null,"QueryBody":"WITH  PostsPerDay as (\n  select cast(CreationDate as Date) [Day]\n  , OwnerUserId [User]\n  , count(*) Post\nfrom Posts\nwhere CreationDate > '2017-07-01'\ngroup by \n  cast(CreationDate as Date)\n  , OwnerUserId\n)\n\nselect [Day], count(distinct [User]) DailyPosters, Rolling7DayCount\nfrom PostsPerDay\n\nouter apply (\n  select count(distinct [User]) Rolling7DayCount\n  from PostsPerDay ppd\n  where ppd.[Day] >= dateadd(dd, -7, PostsPerDay.[Day])\n  and ppd.[Day] < PostsPerDay.[Day]\n  ) Rolling7DayCount\n\ngroup by [Day], Rolling7DayCount\norder by 1","CreationDate":"2017-07-26 2:05:55","validated":true}
{"QuerySetId":701560,"Title":"percentage of homework tagged questions that are closed","Description":null,"QueryBody":"SELECT \n  Posts.Id AS [Post Link],\n  Posts.PostTypeId,\n  Posts.ClosedDate,\n  Posts.Tags\nFROM PostHistory\nJOIN Posts on Posts.Id = PostHistory.PostId\nWHERE PostHistoryTypeId IN (3,6) --initial tags, tag edits\n  AND PostHistory.Text LIKE '%homework-and-exercises%'\n  AND ClosedDate != ''","CreationDate":"2017-07-26 5:00:00","validated":true}
{"QuerySetId":702843,"Title":"Total DTD (Range)  'classroom'  in Title","Description":null,"QueryBody":"SELECT \n  ID as [Post Link],\n  CreationDate,\n  Tags,\n  Score, AnswerCount,CommentCount\n  FROM Posts \nWHERE \n  Posts.Title Like '%classroom%'  \n  and \n  CreationDate \n  BETWEEN \n  @StartDate \n  and\n  @EndDate \nORDER BY CreationDate ASC","CreationDate":"2017-07-28 23:13:12","validated":true}
{"QuerySetId":703485,"Title":"Top SO users From India","Description":null,"QueryBody":"SELECT \n    *\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%india%'\n    OR UPPER(Location) LIKE '%INDIA%'\n    or Location like '%India%'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;","CreationDate":"2019-11-21 14:16:47","validated":true}
{"QuerySetId":703932,"Title":"My comments with at least one upvote, in order with most recent first.","Description":"My comments with at least one upvote, in order with most recent first.","QueryBody":"SELECT  \n  postID [Post Link], Score, Text, CreationDate\nFROM \n  Comments\nWHERE \n  UserId = ##UserId##\n  AND Score > 0\nORDER BY \n  CreationDate Desc","CreationDate":"2017-08-11 16:25:43","validated":true}
{"QuerySetId":708190,"Title":"My \\newcommand comments without \\begingroup","Description":null,"QueryBody":"SELECT  CONCAT('https:\/\/math.stackexchange.com\/questions\/', PostID), Score, Text, CreationDate FROM comments WHERE UserId = 11994 AND Text Like '%\\newcommand%' AND Text Not Like '%\\begingroup%' COLLATE Latin1_General_100_CI_AI_SC ORDER BY CreationDate DESC","CreationDate":"2017-08-08 22:55:14","validated":true}
{"QuerySetId":708518,"Title":"Tags without excerpt, ordered by usage","Description":null,"QueryBody":"SELECT  t.TagName, COUNT(*) AS 'Number of posts'\n  FROM Tags AS t\n  INNER JOIN PostTags AS pt ON pt.TagId = t.Id\n  WHERE t.ExcerptPostId IS NULL\n  GROUP BY t.TagName\n  ORDER BY COUNT(*) DESC","CreationDate":"2017-08-09 23:53:24","validated":true}
{"QuerySetId":708918,"Title":"Attempt to flush out Users part of a voting ring. Targeting the Multi-votes per post in even fashion pattern","Description":"My first attempt to flush out Users part of a voting ring. \n\nTargeting the Multi-votes per post in even fashion pattern.","QueryBody":"SELECT  \nvdv.USER_ID AS [User Link],\nCONVERT(VARCHAR(20), vdv.VOTE_DATE, 107) AS [Date of Occurence],\nvdv.VOTE_COUNT AS [Votes per Post],\nCOUNT(vdv.POST_ID) AS [Posts Upvoted]\n\nFROM\n(\n\n--- Posts that have recieved more then 2 votes a day \nSELECT \nCOUNT(v.Id) AS VOTE_COUNT,\np.Id AS POST_ID,\np.OwnerUserId AS USER_ID,\nv.CreationDate AS VOTE_DATE\n\nFROM Votes AS v\nINNER JOIN Posts AS p ON v.PostId = p.Id\nWHERE v.VoteTypeId = 2\nGROUP BY p.Id, v.CreationDate, p.OwnerUserId\nHAVING COUNT(v.Id) > 1 AND COUNT(v.Id) < 10\n) AS vdv\n\nINNER JOIN Users AS u ON vdv.USER_ID = u.Id\n\nGROUP BY \nvdv.USER_ID,\nvdv.VOTE_DATE,\nvdv.VOTE_COUNT\n\nHAVING COUNT(vdv.POST_ID) > 3\n\nORDER BY vdv.VOTE_DATE DESC","CreationDate":"2017-08-10 19:43:11","validated":true}
{"QuerySetId":709805,"Title":"Python 2.x vs. Python 3.x - Number of Questions - Yearly Since 2013","Description":"The goal of this query is to compare the trend of the number of Python 2 vs. Python 3 related questions. I started with 2012, because there were very few questions before that.\n\nFor more information on the purpose of the query, see https:\/\/www.webucator.com\/blog\/2016\/03\/still-using-python-2-it-is-time-to-upgrade\/.","QueryBody":"SELECT  left(t.TagName,8) AS Tag, YEAR(p.CreationDate) AS y,\nCOUNT(p.Id) AS NumPosts\nFROM Tags t \n  JOIN PostTags pt ON pt.TagID = t.Id\n  JOIN Posts p ON p.Id = pt.PostId\n  WHERE (t.TagName LIKE '%python%')\n  AND YEAR(p.CreationDate) >= 2013\nGROUP BY left(t.TagName,8), YEAR(p.CreationDate)\nORDER BY y, Tag DESC\n;","CreationDate":"2017-08-13 0:45:57","validated":true}
{"QuerySetId":710026,"Title":"Top tags (with more than 4 posts) by country (Brazil\/Brasil) since 2017","Description":null,"QueryBody":"SELECT  Tags.TagName, count(*)\nfrom posttags \njoin posts on posts.id = posttags.postid\njoin users on users.id = posts.owneruserid\njoin Tags on Tags.id=posttags.tagid\nwhere year(posts.CreationDate)>=2017 and\n(lower(users.location) like '%brasil%' or lower(users.location) like '%brazil%')\ngroup by tags.TagName\nhaving count(*)>4\norder by 2 desc","CreationDate":"2019-10-30 11:44:25","validated":true}
{"QuerySetId":712200,"Title":"Golden Tag Badges of the site","Description":null,"QueryBody":"SELECT \n  ROW_NUMBER() OVER(ORDER BY Badges.UserId ASC) AS Row,\n  Badges.UserId AS [User Link],\n  Tags.TagName AS [TagName],\n  Badges.Date AS Date\nFROM Badges, Tags\nWHERE\n  Badges.TagBased = 1\n  AND\n  Badges.Class = 1\n  AND\n  Badges.Name = Tags.TagName\nORDER BY Badges.UserId, Badges.Date","CreationDate":"2017-08-30 5:11:05","validated":true}
{"QuerySetId":712228,"Title":"Top 50 users from Finland","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%finland%'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-08-19 23:34:25","validated":true}
{"QuerySetId":713171,"Title":"Top Unity users","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('unity3d')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nORDER BY Score DESC;","CreationDate":"2017-08-22 18:24:43","validated":true}
{"QuerySetId":714362,"Title":"Old answers edited by me recently","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link],\n       a.LastActivityDate AS Date\nFROM Posts a\nWHERE a.PostTypeId = 2\n      AND a.CreationDate < '2014-01-01'\n      AND a.LastActivityDate > '2017-07-07'\n      AND a.LastEditorUserId = ##userId##\nORDER BY a.LastActivityDate DESC","CreationDate":"2017-08-24 23:12:15","validated":true}
{"QuerySetId":714532,"Title":"Which question since 100K has had the best reception for [R] tag?","Description":null,"QueryBody":"SELECT  TOP 100 id AS [Post Link], score, viewcount \nFROM   (SELECT Row_number() OVER(ORDER BY a.creationdate ASC) AS [rowNumber], * \n        FROM   posts a, \n               posttags b \n        WHERE  a.id = b.postid \n               AND b.tagid = 4452) abSorted \nWHERE  rownumber > 100000\nORDER BY Score DESC ","CreationDate":"2017-08-26 9:37:18","validated":true}
{"QuerySetId":717087,"Title":"Top users in Serbia for SQL","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName LIKE '%sql%'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE\n   (Location like N'%Belgrade%'\n   OR Location like N'%Beograd%'\n   OR Location like N'%Sr'\n   OR Location like N'%Serbia%'\n   OR Location like N'%Novi Sad%'\n   OR Location like N'%Srbija%'\n   OR Location like N'%Ni\u0161%')\nORDER BY Score DESC;","CreationDate":"2017-09-06 18:10:50","validated":true}
{"QuerySetId":718964,"Title":"Users with many answers in a single tag","Description":null,"QueryBody":"SELECT  \nMAX(t.Count) AS TagCount, \n'site:\/\/questions\/tagged\/' + MAX(t.TagName) + '|' + MAX(t.TagName) AS TagLink, \nCOALESCE('site:\/\/users\/' + CAST(p.OwnerUserId AS NVARCHAR) + '|' + u.DisplayName, p.OwnerDisplayName) AS UserLink,\nCOUNT(p.Id) AS UTQnCount\nFROM Tags AS t \nJOIN PostTags as a ON a.TagId = t.Id\nJOIN Posts AS q ON q.Id = a.PostId \nJOIN Posts AS p ON p.ParentId = q.Id \nLEFT JOIN users AS u ON u.Id = p.OwnerUserId\nWHERE p.PostTypeId = 2\nGROUP BY t.Id, p.OwnerUserId, p.OwnerdisplayName, u.DisplayName\nHAVING ##MinCount?40## <= COUNT(p.Id)\nORDER BY MAX(t.Count) DESC, t.Id DESC, COUNT(p.Id) DESC;","CreationDate":"2018-12-11 3:36:17","validated":true}
{"QuerySetId":719970,"Title":"Estimated reputation on a given day","Description":"It calculates *only* the upvotes, downvotes and the accepted answers (by OPs). Doesn't count: bounties, acceptions (+2 for accepting an answer as OP), association bonus, -100 for rude\/offensive\/spam flags, +2 for edited posts, -1 for answer downvotes, and the rare cases as gained\/lost rep remains on deleted posts.","QueryBody":"SELECT \n  SUM(CASE\n    WHEN Votes.VoteTypeId = 1 THEN 15\n    WHEN Votes.VoteTypeId = 2 AND Posts.PostTypeId = 1 THEN 5\n    WHEN Votes.VoteTypeId = 2 AND Posts.PostTypeId = 2 THEN 10\n    WHEN Votes.VoteTypeId = 3 THEN -2\n    WHEN Votes.VoteTypeId = 9 AND Votes.BountyAmount IS NOT NULL\n    THEN Votes.BountyAmount\n  END) AS EstimatedReputation\nFROM Votes, Posts\nWHERE\n  Votes.VoteTypeId IN (1, 2, 3)\n  AND\n  Votes.PostId = Posts.Id\n  AND\n  Posts.OwnerUserId = ##UserId:int##\n  AND\n  Votes.CreationDate < ##BeforeDate:string##\n  AND\n  Posts.PostTypeId IN (1, 2)","CreationDate":"2017-09-10 21:29:24","validated":true}
{"QuerySetId":721229,"Title":"Users with the most downvoted questions","Description":null,"QueryBody":"SELECT  TOP 1000 OwnerUserId AS [User Link], COUNT(*) AS N\nFROM Posts\nWHERE PostTypeId = 1 AND Score < 0\nGROUP BY OwnerUserId\nORDER BY N DESC","CreationDate":"2017-09-11 4:32:18","validated":true}
{"QuerySetId":722669,"Title":"MVP - Pull Contribution (Based on User ID)","Description":null,"QueryBody":"SELECT \n  U.DisplayName as [Name],\n  DATEPART(YEAR, P.CreationDate) as [Year],\n  SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) as [Number of Answers],\n  COUNT(P.Id) as [Number of Posts],\n  CAST(SUM(P.Score) as decimal(6,2)) \/ COUNT(P.Id) as [Average Score],\n  MAX(P.Score) as [Max Score],\n  SUM(CASE WHEN P.PostTypeId = 2 THEN parent.ViewCount ELSE 0 END) as [Views of Answers]\nFROM Posts P\ninner join Users U on U.Id = P.OwnerUserId\nleft outer join Posts parent on parent.Id = P.ParentId\nWHERE P.OwnerUserId = '##UserId##' AND P.CreationDate >= '##asOf##'\nGROUP BY U.DisplayName, DATEPART(YEAR, P.CreationDate)","CreationDate":"2017-09-14 1:00:12","validated":true}
{"QuerySetId":724512,"Title":"Downvoted questions with all-downvoted answers","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Q.Id,\n    MIN(Q.Score) AS QScore,\n    COUNT(*) AS AnswerNo,\n    COUNT(CASE WHEN A.Score < 0 THEN 1 ELSE NULL END) AS NegAnswerNo\n  FROM Posts Q, Posts A\n  WHERE\n    Q.Score < 0\n    AND\n    A.ParentId = Q.Id\n    AND\n    Q.AcceptedAnswerId IS NULL\n    AND\n    Q.ClosedDate IS NOT NULL\n  GROUP BY Q.Id\n)\nSELECT Id AS [Post Link], QScore, AnswerNo, NegAnswerNo\nFROM Raw\nWHERE AnswerNo > 0 AND NegAnswerNo = AnswerNo\nORDER BY Id","CreationDate":"2017-09-17 22:56:06","validated":true}
{"QuerySetId":726135,"Title":"Date difference between the question and the accept vote","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT DATEDIFF(day, Posts.CreationDate, Votes.CreationDate) AS days\n  FROM Posts, Votes\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId = 1\n),\n--SELECT AVG(days) FROM Raw\n\/*\nSELECT days, LOG(1.0 * COUNT(*)) \/ LOG(10.0) AS logN\nFROM Raw\nGROUP BY days\nORDER BY days\n*\/\nRaw2 AS (\n  SELECT\n    days,\n    COUNT(*) AS N\n  FROM Raw\n  GROUP BY days\n)\nSELECT\n  days,\n  N,\n  SUM(N) OVER (ORDER BY days ROWS UNBOUNDED PRECEDING) AS RunningTotal\nFROM Raw2","CreationDate":"2017-09-21 15:34:59","validated":true}
{"QuerySetId":726230,"Title":"Longest Answers by Markdown for User","Description":null,"QueryBody":"SELECT  Top 100 \n      p.Id AS [Post Link], \n      Len(ph.Text) as [Markdown Length],\n      p.Score as [Score]\nFrom Posts p, PostHistory ph\nWhere p.PostTypeId = 2                     -- is an answer\n      and ph.PostId = p.Id                 -- getting history for the right post\n      and ph.PostHistoryTypeId in (2,5,8)  -- initial body, edit body, rollback body\n      and not exists (                     -- no later revisions of the body\n        SELECT * from PostHistory phtwo\n        Where phtwo.PostId = p.Id\n          and phtwo.PostHistoryTypeId in (2,5,8)\n          and phtwo.CreationDate > ph.CreationDate\n      )\n      and p.OwnerUserId = 26369\nOrder By Len(ph.Text) Desc","CreationDate":"2017-10-02 4:00:56","validated":true}
{"QuerySetId":726915,"Title":"Questions with accepted (non-self) answer","Description":null,"QueryBody":"SELECT \n  q.Title,\n  q.CreationDate,\n  q.Score,\n  q.ViewCount\nFROM Posts q\nLEFT JOIN Posts a ON a.Id = q.AcceptedAnswerId\nWHERE\n      q.OwnerUserId =  ##UserId##\n  AND a.OwnerUserId != ##UserId##\nORDER BY q.CreationDate DESC","CreationDate":"2017-09-24 15:30:07","validated":true}
{"QuerySetId":727283,"Title":"Search tag-speified developers in the City","Description":null,"QueryBody":"SELECT  u.Id [User Link], Reputation, DisplayName, Location, Tags\nfrom Users u\njoin Posts p on p.ownerUserId=u.id\nwhere Location like '%##Location##%' and tags like '%##tags##%'\norder by Reputation desc","CreationDate":"2017-09-25 19:02:11","validated":true}
{"QuerySetId":729711,"Title":"Geocoding posts within the youtube and facebook API","Description":null,"QueryBody":"SELECT  \n  p.Title, \n  p.Body, \n  p.Tags, \n  CONCAT('http:\/\/stackoverflow.com\/questions\/', p.Id) as link \nfrom Posts p \n  Inner Join PostTags pt on p.Id = Pt.PostId \n    Inner Join Tags t on pt.TagId = t.Id \n      Where AnswerCount >= 3 \n      And t.TagName in ('youtube-api','facebook-api')","CreationDate":"2018-04-03 11:38:15","validated":true}
{"QuerySetId":733570,"Title":"Percentage of unanswered questions by tag","Description":null,"QueryBody":"SELECT  t.TagName,\n  COUNT(*) AS [Total Posts], \n  SUM(CASE WHEN AcceptedAnswerId IS NULL THEN 1 ELSE 0 END) AS [Unanswered Posts],\n  SUM(CASE WHEN AcceptedAnswerId IS NULL THEN 1 ELSE 0 END) * 1.0 \/ COUNT(*) AS [% Unanswered]\nFROM Posts p\nINNER JOIN PostTags pt ON pt.PostId = p.Id\nINNER JOIN Tags t ON t.Id = pt.TagId\nWHERE p.ClosedDate IS NULL\n  AND p.PostTypeId = 1\nGROUP BY t.TagName\nORDER BY 2 DESC, 3 DESC","CreationDate":"2017-10-02 2:32:39","validated":true}
{"QuerySetId":736158,"Title":"Custom - Responsive subscribers for a Tag","Description":null,"QueryBody":"SELECT  TagName, Count(Id) numUsers FROM\n(SELECT \n  t.TagName, \n  u.Id FROM Users u\n      INNER JOIN Posts answer \n        ON u.Id = answer.OwnerUserId\n      INNER JOIN Posts question\n        ON answer.ParentId = question.Id\n      INNER JOIN PostTags m\n        ON question.Id = m.PostId\n      INNER JOIN Tags t\n        ON m.TagId = t.Id\n   WHERE question.AnswerCount > 0\n   GROUP BY t.TagName, u.Id) AS X\nGROUP BY TagName\nORDER BY numUsers DESC","CreationDate":"2017-10-05 4:05:54","validated":true}
{"QuerySetId":737145,"Title":"Posts from Jon Skeet that have down votes","Description":null,"QueryBody":"SELECT  p.id as [Post Link]\n     , score\n     , case when posttypeid = 1 then 'Q' else 'A' end [Q\/A]\nfrom posts p\ninner join votes v on v.postid = p.id\nwhere p.owneruserid = 22656 -- jon skeet\nand v.votetypeid = 3 -- down votes\norder by score","CreationDate":"2017-11-06 1:17:24","validated":true}
{"QuerySetId":737727,"Title":"Number of users authored at least one post","Description":null,"QueryBody":"SELECT count(distinct owneruserid) from posts","CreationDate":"2019-03-04 22:03:32","validated":true}
{"QuerySetId":738559,"Title":"How many UpVotes and DownVotes I've given?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect Id as [User Link], Reputation, UpVotes, DownVotes\nfrom Users\nwhere Id = @UserId","CreationDate":"2017-10-09 20:52:04","validated":true}
{"QuerySetId":738568,"Title":"Ranking of questions by score","Description":null,"QueryBody":"SELECT  Top ##NumberOfResults## Posts.Id As [Post Link], Posts.Title, Posts.Score As Score\nfrom Posts\nOrder By Posts.Score desc","CreationDate":"2017-10-09 21:33:44","validated":true}
{"QuerySetId":738993,"Title":"Find old posts (more than 2 months) without any answers","Description":null,"QueryBody":"SELECT  Id AS [Post Link], Tags FROM Posts\n  WHERE CreationDate > DATEADD(month, -2, GETDATE())\n    AND AcceptedAnswerID IS NULL\n    AND PostTypeId = 1\n    AND AnswerCount = 0","CreationDate":"2017-10-10 22:38:17","validated":true}
{"QuerySetId":739207,"Title":"Answered questions with LaTeX \\newcommand's","Description":null,"QueryBody":"SELECT \n  questions.Id AS [Post Link],\n  questions.OwnerUserId AS [User Link],\n  questions.CreationDate,\n  COUNT(*)\nFROM Posts questions\nJOIN Posts answers ON answers.ParentID = questions.Id\nWHERE questions.PostTypeId = 1 --questions\n  AND questions.Body LIKE '%newcommand%'\nGROUP BY questions.Id, questions.OwnerUserId, questions.CreationDate\nORDER BY questions.CreationDate DESC","CreationDate":"2020-04-15 16:50:42","validated":true}
{"QuerySetId":742309,"Title":"Top Angular User In Sri Lanka","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('angular')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%lanka%'\nORDER BY Score DESC;","CreationDate":"2017-10-15 12:04:19","validated":true}
{"QuerySetId":744219,"Title":"Top SO Users from Poznan","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%pozna%'\n    OR UPPER(Location) LIKE '%POZNA%'\n    or Location like '%Pozna%'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;","CreationDate":"2017-10-18 16:44:53","validated":true}
{"QuerySetId":744376,"Title":"Days in queue for close votes 2017 and later","Description":null,"QueryBody":"SELECT \n  CONVERT(DATE, rt.CreationDate) AS CreationDate,\n  AVG(DATEDIFF(DAY, rt.CreationDate, rt.DeletionDate)) AS DaysInQueue\nFROM ReviewTasks rt\nWHERE rt.ReviewTaskTypeId = 2\nAND rt.CreationDate >= '2017-01-01'\nGROUP BY CONVERT(DATE, rt.CreationDate)\nORDER BY CONVERT(DATE, rt.CreationDate) ASC","CreationDate":"2017-10-18 23:14:07","validated":true}
{"QuerySetId":744548,"Title":"Short ID questions to review","Description":null,"QueryBody":"SELECT \n  score, \n  len(Body) as BodyLength,\n  creationDate,\n  id AS [Post Link],\n  p.id,\n  ViewCount,\n  LastEditDate\n  \nfrom posts p\nwhere tags like '%identify%'\n  and posttypeid = 1\n  and acceptedanswerid is null\n  and closeddate is null\norder by len(Body), CreationDate","CreationDate":"2017-10-19 19:24:25","validated":true}
{"QuerySetId":745146,"Title":"view all 1000 question titles","Description":null,"QueryBody":"SELECT  top 1000 Title from Posts where Title is not null Order by score Desc","CreationDate":"2017-10-30 15:16:37","validated":true}
{"QuerySetId":745178,"Title":"A list of users from Saint Petersburg","Description":null,"QueryBody":"SELECT  Id [User Link]\nFROM Users\nWHERE Location LIKE '%\u0421\u0430\u043d\u043a\u0442%' OR Location LIKE '%Saint%'","CreationDate":"2017-10-22 1:08:45","validated":true}
{"QuerySetId":745248,"Title":"Tags that are used together","Description":"This might give some interesting insight in the types of posts on a site..\n","QueryBody":"SELECT  TOP 1000\n   t1.TagName AS [Tag Link], \n   t2.TagName AS [Tag Link], \n   COUNT(pt1.PostId) AS [Post Count]\nFROM PostTags pt1 \n   JOIN PostTags pt2 ON pt1.PostId = pt2.PostId\n   JOIN Tags t1 ON t1.Id = pt1.TagId\n   JOIN Tags t2 ON t2.Id = pt2.TagId\nGROUP BY t1.TagName, t2.TagName\nORDER BY COUNT(pt1.PostId) DESC","CreationDate":"2018-01-29 22:07:49","validated":true}
{"QuerySetId":750867,"Title":"A set of users creating a high number of txtspk questions","Description":null,"QueryBody":"SELECT \nTOP 20\nCOUNT(*) QuestCount, P.OwnerUserId, U.DisplayName,\nU.Reputation, U.LastAccessDate FROM\nPosts P\nINNER JOIN Users U ON (P.OwnerUserId = U.Id)\nWHERE\nP.ParentId IS NULL\nAND (\n   P.Body LIKE '%plz%'\n   OR P.Body LIKE '%pls%'\n   OR P.Body LIKE '%thx%'\n   OR P.Body LIKE '%thnx%'\n   OR P.Body LIKE '%smth%'\n   OR P.Body LIKE '%sth%'\n)\nGROUP BY P.OwnerUserId, U.DisplayName, U.Reputation, U.LastAccessDate\nHAVING COUNT(*) > 40\nORDER BY COUNT(*) DESC","CreationDate":"2018-07-02 2:25:12","validated":true}
{"QuerySetId":756921,"Title":"SO highest accept rate of answers","Description":null,"QueryBody":"SELECT TOP 30000\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id\nORDER BY AcceptedPercent DESC, NumAnswers DESC","CreationDate":"2017-11-13 6:02:05","validated":true}
{"QuerySetId":759913,"Title":"Top Tag users (score > 0) by Location","Description":null,"QueryBody":"DECLARE  @tag_id int = (select id from tags where tagname = LOWER('##TagName##'));\n\nselect top (##Limit##)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.Location as [User Link],\n  sum(answers.score) as \"Score\"\nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id and answers.score > 0\n\ngroup by users.Location\norder by sum(answers.score) desc;","CreationDate":"2017-11-17 16:28:17","validated":true}
{"QuerySetId":761575,"Title":"Ratio of Closed Questions to New Questions Between Dates","Description":null,"QueryBody":"SELECT \n  q.CloseQuestion,\n  q.QuestionTotal,\n  ROUND(((q.CloseQuestion * 100) \/ q.QuestionTotal), 1) as ClosePercentage\nFROM (\n  SELECT\n    SUM (\n      CASE WHEN \n        ClosedDate IS NOT NULL \n        AND PostTypeID = 1 \n        AND CreationDate BETWEEN ##fromdate:string## AND ##todate:string##\n      THEN 1 END\n    ) AS CloseQuestion,\n    SUM (\n      CASE WHEN\n        PostTypeId = 1\n        AND CreationDate BETWEEN ##fromdate:string## AND ##todate:string##\n      THEN 1 END\n    ) AS QuestionTotal\n  FROM Posts\n) q","CreationDate":"2019-01-07 6:01:34","validated":true}
{"QuerySetId":764509,"Title":"You vs competitor - Face to Face","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##;\nDECLARE @CompetitorId int = ##CompetitorId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   jonsAnswer.Score as competitorsScore\n  from Posts as myAnswer\n  inner join Posts as jonsAnswer\n   on jonsAnswer.OwnerUserId = @CompetitorId and myAnswer.ParentId = jonsAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > competitorsScore then 'You win'\n   when myScore < competitorsScore then 'Sorry'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'You',\n  competitorsScore as \"Not you\"\nfrom fights;","CreationDate":"2017-11-28 22:54:29","validated":true}
{"QuerySetId":765415,"Title":"Questions asked per month for a given tag","Description":null,"QueryBody":"SELECT  \n --   MONTH(p.CreationDate) [Month]\n -- , YEAR(p.CreationDate) [Year]\n  DATEFROMPARTS(YEAR(p.CreationDate), MONTH(p.CreationDate), 01) [MonthStart]\n  , COUNT(p.Id) \nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nWHERE t.TagName IN ('bigcommerce')\nGROUP BY MONTH(p.CreationDate), YEAR(p.CreationDate)\nORDER BY YEAR(p.CreationDate), MONTH(p.CreationDate)","CreationDate":"2019-01-18 2:38:40","validated":true}
{"QuerySetId":768048,"Title":"Reviews Over Time (per week), For Period of 27 Weeks","Description":null,"QueryBody":"SELECT \n  DATEADD(DAYOFYEAR, -(DATEPART(DAYOFYEAR, rtr.CreationDate) % 7), rtr.CreationDate) AS [Date],\n  COUNT(rt.Id) AS [Reviews Completed]\nFROM ReviewTasks AS rt\nINNER JOIN ReviewTaskResults AS rtr ON rtr.ReviewTaskId = rt.Id\nWHERE rt.ReviewTaskStateId = 2  -- Completed reviews only\nGROUP BY DATEADD(DAYOFYEAR, -(DATEPART(DAYOFYEAR, rtr.CreationDate) % 27), rtr.CreationDate)\nORDER BY DATEADD(DAYOFYEAR, -(DATEPART(DAYOFYEAR, rtr.CreationDate) % 27), rtr.CreationDate);","CreationDate":"2017-12-07 6:07:12","validated":true}
{"QuerySetId":768050,"Title":"Reviews Over Time (per month)","Description":null,"QueryBody":"SELECT \n  DATEADD(DAY, -(DATEPART(DAY, rtr.CreationDate) % 30), rtr.CreationDate) AS [Date],\n  COUNT(rt.Id) AS [Reviews Completed]\nFROM ReviewTasks AS rt\nINNER JOIN ReviewTaskResults AS rtr ON rtr.ReviewTaskId = rt.Id\nWHERE rt.ReviewTaskStateId = 2  -- Completed reviews only\nGROUP BY DATEADD(DAY, -(DATEPART(DAY, rtr.CreationDate) % 30), rtr.CreationDate)\nORDER BY DATEADD(DAY, -(DATEPART(DAY, rtr.CreationDate) % 30), rtr.CreationDate);","CreationDate":"2017-12-07 5:32:27","validated":true}
{"QuerySetId":768426,"Title":"Get questioners and answerers for specific tag","Description":null,"QueryBody":"SELECT p.id, p.creationdate, p.score, p.viewcount, p.title, p.answercount, p.commentcount, p.favoritecount, u.displayname as quest_name, u.reputation as quest_rep, u2.displayname as ans_name, u2.reputation as ans_rep from posts as p join posttags as pt on p.id = pt.postid join tags as t on pt.tagid = t.id left join posts as ans on p.acceptedanswerid = ans.id left join users as u on p.owneruserid = u.id left join users as u2 on ans.owneruserid = u2.id where t.tagname = 'facebook-graph-api' ","CreationDate":"2018-08-26 8:44:17","validated":true}
{"QuerySetId":768548,"Title":"Most accepting users, at least N acceptances","Description":null,"QueryBody":"SELECT  p.OwnerUserId as [User Link], count(p.Id) as Acceptances\nfrom Posts p\nwhere p.AcceptedAnswerId is not null\ngroup by p.OwnerUserId\nhaving count(p.Id) >= ##acceptances##\norder by count(p.Id) desc","CreationDate":"2017-12-08 7:11:21","validated":true}
{"QuerySetId":770705,"Title":"Questions I have answered where asker has accepted another answer","Description":"Lists all questions I have proposed an answer to, and, sadly, the original asker accepted a different answer.\n","QueryBody":"SELECT  p.Id AS [Post Link], a.Score, a.CreationDate\nFROM Posts a, Posts p\nWHERE a.OwnerUserId = ##UserId##\nAND a.PostTypeId = 2\n\nAND p.Id = a.ParentId\nAND p.AcceptedAnswerId <> a.Id\nORDER BY a.Score, a.CreationDate ASC","CreationDate":"2017-12-18 5:17:57","validated":true}
{"QuerySetId":771169,"Title":"Users with most reputation from different states","Description":null,"QueryBody":"SELECT  \n    u.Id AS [User Link], \n    Reputation, Location\n    -- t.tagname,\n    --count(p.id)\nFROM Users u\nWHERE LOWER(Location) LIKE LOWER('%##countryname##%')\n   or LOWER(Location) LIKE LOWER('%##countryname1##%')\n   or LOWER(Location) LIKE LOWER('%##countryname2##%')\nORDER BY Reputation DESC;","CreationDate":"2017-12-16 17:27:04","validated":true}
{"QuerySetId":771214,"Title":"Top Swift Users from India","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('swift')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%india%'\nORDER BY Score DESC;","CreationDate":"2019-10-01 12:20:13","validated":true}
{"QuerySetId":771229,"Title":"Bounties per month since 2013","Description":null,"QueryBody":"SELECT  DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0) AS Month,\n       COUNT(*) as Bounties\nFROM   Votes\nWHERE  VoteTypeId = 8\n  AND  CreationDate >= '2013-01-01'\nGROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\nORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)","CreationDate":"2017-12-16 21:19:32","validated":true}
{"QuerySetId":772672,"Title":"My Answer Count Over Time By Month","Description":null,"QueryBody":"WITH  MyPostsWITHDates AS (\n  SELECT p.Id, p.CreationDate, p.CreationDate As DateFormat,\n         p.Score, p.OwnerUserId, p.PostTypeId\n  FROM Posts p\n  WHERE p.OwnerUserId = 11742502\n)\n\nSELECT CAST(d.DateFormat+'-01' AS DATETIME)\n      ,COUNT(CASE WHEN d.PostTypeId=1 THEN 1 END) AS [Question Count]\n      ,COUNT(CASE WHEN d.PostTypeId=2 THEN 1 END) AS [Answer Count]   \nFROM MyPostsWITHDates d\nGROUP BY d.DateFormat\nORDER BY d.DateFormat","CreationDate":"2019-11-01 18:03:49","validated":true}
{"QuerySetId":772701,"Title":"Top ten lowest scored answers with OwnerUserID","Description":null,"QueryBody":"SELECT  top(10) [Id] as [Post Link], [Score], [OwnerUserID] as [User Link] from [Posts]\nwhere [PostTypeId] = 2 and [Score] < 0\norder by [Score]","CreationDate":"2017-12-20 1:46:18","validated":true}
{"QuerySetId":773677,"Title":"Tags of the most hated Posts","Description":null,"QueryBody":"SELECT  TOP 50 TagName,\n  COUNT (*) AS freq\nFROM Tags\n  INNER JOIN PostTags ON PostTags.TagId = Tags.id\n  INNER JOIN Posts ON Posts.id = PostTags.PostId\nWHERE Posts.Score < -10\nGROUP BY TagName\nORDER BY freq DESC","CreationDate":"2017-12-21 15:26:49","validated":true}
{"QuerySetId":774958,"Title":"Unanswered questions with at least one answer having zero score","Description":null,"QueryBody":"SELECT  Id as [Post Link], Score\nFROM Posts p\nWHERE AnswerCount > 0\nAND \n  (SELECT MAX(Score) FROM Posts\n  WHERE ParentId = p.Id) = 0\nAND ClosedDate IS NULL\nAND AcceptedAnswerId IS NULL\nORDER BY Score DESC","CreationDate":"2017-12-25 16:11:18","validated":true}
{"QuerySetId":775289,"Title":"Users in Bangalore ordered according to Rep","Description":null,"QueryBody":"SELECT  * FROM Users\nWHERE LOWER(Location) LIKE '%bangalore%' \nOrder by Reputation DESC;","CreationDate":"2018-04-04 12:32:57","validated":true}
{"QuerySetId":775750,"Title":"Top 50 Users by Country Name","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    DisplayName,\n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##CountryName##%')\nORDER BY\n    Reputation DESC;","CreationDate":"2017-12-29 12:12:33","validated":true}
{"QuerySetId":776347,"Title":"Max reputation of the same age as me","Description":null,"QueryBody":"DECLARE  @UserID int = ##UserID##\n\nSELECT\n    Reputation,\n    Id AS [User ID],\n    DisplayName AS Name\nFROM Users \nWHERE Age = (SELECT Age FROM Users WHERE Id = @UserID)\nORDER BY Reputation DESC","CreationDate":"2017-12-31 17:17:44","validated":true}
{"QuerySetId":776924,"Title":"Questions & Answers with \"Thanks in advance\"","Description":null,"QueryBody":"SELECT  p.CreationDate,\n  CASE WHEN (2 = p.PostTypeId) THEN 'Answer'\n       ELSE                         'Question'\n       END AS PostType,\n  p.Score,\n  CASE WHEN (2 = p.PostTypeId) THEN t.Title\n       ELSE                         p.Title\n       END AS QuestionTitle,\n  p.Body,\n  p.Id as [Post Link]\nFROM Posts p LEFT OUTER JOIN Posts t on (p.ParentId = t.Id)\nWHERE 1=1 AND\n\n-- only needed on Stack Overflow\np.CreationDate >= DATEADD(DAY, -10, GETDATE()) AND\n\n(\n\nUPPER(p.Body) LIKE UPPER('%thanks in advanced%')\n)\n\nORDER BY p.Score DESC","CreationDate":"2018-04-09 15:53:59","validated":true}
{"QuerySetId":776987,"Title":"You are in the top N% in your positively scored tags","Description":null,"QueryBody":"WITH  UserTagScore AS (\n  SELECT\n    A.OwnerUserId AS UserId,\n    PostTags.TagId,\n    SUM(A.Score) AS Score\n  FROM\n    Posts Q,\n    Posts A,\n    PostTags\n  WHERE\n    A.ParentId = Q.Id\n    AND\n    Q.Id = PostTags.PostId\n  GROUP BY\n    A.OwnerUserId,\n    PostTags.TagId\n  HAVING SUM(A.Score) > 0\n),\nUserNo AS (\n  SELECT COUNT(*) AS UserNo FROM Users\n),\nUserTagRank AS (\n  SELECT\n    UserId,\n    TagId,\n    Tags.TagName,\n    Score,\n    DENSE_RANK() OVER (PARTITION BY TagId ORDER BY Score DESC) AS TagRank,\n    COUNT(*) OVER (PARTITION BY TagId) AS UserNumWITHTag\n  FROM UserTagScore, Tags\n  WHERE UserTagScore.TagId = Tags.Id\n)\nSELECT\n  *,\n  100.0 * TagRank \/ UserNumWITHTag AS TopPct\nFROM UserTagRank\nWHERE UserId = ##AccountId:int##","CreationDate":"2018-01-03 5:36:14","validated":true}
{"QuerySetId":778537,"Title":"Date of first questions 2017","Description":null,"QueryBody":"SELECT  CAST(Posts.CreationDate AS DATE) as asked, count(1) as questions\nfrom (\n  SELECT Min(Id) as Id, OwnerUserId\n  from Posts\n  group by OwnerUserId\n) temp, Posts\nwhere temp.Id = Posts.Id\n  and CAST(Posts.CreationDate AS DATE) between '01\/01\/2017' and '01\/01\/2018'\n  and DATEPART(dw,CAST(Posts.CreationDate AS DATE)) in (2, 3, 4, 5, 6)\ngroup by CAST(Posts.CreationDate AS DATE)\norder by CAST(Posts.CreationDate AS DATE)","CreationDate":"2018-01-09 22:02:16","validated":true}
{"QuerySetId":778802,"Title":"A list of the top 500 users with the highest average answer score excluding\ncommunity wiki \/ closed posts\n","Description":"A list of the top 500 users with the highest average answer score excluding\ncommunity wiki \/ closed posts or users with less than 10 answers\n","QueryBody":"SELECT  \n    TOP 500\n    Users.Id as [User Link],\n    Count(Posts.Id) AS Questions, users.reputation as Reputation,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Question Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 1 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, users.reputation, DisplayName\nORDER BY\n    [Average Question Score] DESC","CreationDate":"2018-01-08 3:52:28","validated":true}
{"QuerySetId":780208,"Title":"Top Node.js Developers in Warsaw, Poland","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Users.Id AS [User Link],\n    Reputation,\n    Badges.name AS Badge,\n    Badges.Class AS Class,\n    Location\nFROM\n    Users, Badges\nWHERE\n    Users.Id = Badges.UserId\n    AND Badges.TagBased = 1\n    AND Badges.name = 'node.js'\n    AND LOWER(Users.Location) LIKE LOWER('%Warsaw%')\nORDER BY\n    Reputation DESC;","CreationDate":"2018-01-09 18:06:12","validated":true}
{"QuerySetId":780209,"Title":"Top Frontend Developers in Warsaw, Poland","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Users.Id AS [User Link],\n    Reputation,\n    Badges.name AS Badge,\n    Badges.Class AS Class,\n    Location\nFROM\n    Users, Badges\nWHERE\n    Users.Id = Badges.UserId\n    AND Badges.TagBased = 1\n    AND Badges.name IN (\n      'angular', 'reactjs', 'frontend',\n      'vuejs', 'aurelia', 'ember.js',\n      'html', 'html5'\n    )\n    AND LOWER(Users.Location) LIKE LOWER('%Warsaw%')\nORDER BY\n    Reputation DESC;","CreationDate":"2018-01-10 17:45:21","validated":true}
{"QuerySetId":780210,"Title":"Users by number of profile-trackable badges obtained","Description":"Total is 47; currently only Stack Overflow has users on the max.","QueryBody":"SELECT  TOP 500\n*\nFROM Badges\nWHERE Name IN ('Copy Editor', 'Electorate', 'Fanatic', 'Illuminator', 'Legendary', 'Marshal', 'Socratic')\n   OR Name IN ('Archaeologist', 'Civic Duty', 'Deputy', 'Enthusiast', 'Epic', 'Inquisitive', 'Necromancer', 'Refiner', 'Research Assistant', 'Sportsmanship', 'Strunk & White')","CreationDate":"2018-01-09 18:22:51","validated":true}
{"QuerySetId":782706,"Title":"Women (AboutMe contains \"a female\", \"a girl\", \"a woman\", \"a mother\" or \"a mom\")","Description":null,"QueryBody":"SELECT  \n  Id [User Link],\n  Reputation, \n  Location,\n  WebsiteUrl,\n  REPLACE(REPLACE(AboutMe, CHAR(13), ''), CHAR(10), '') as AboutMe\n  \nFROM \n  Users\n  \nWHERE \n  AboutMe LIKE '%a female%' \n  OR AboutMe LIKE '%a girl%'\n  OR AboutMe LIKE '%a woman%' \n  OR AboutMe LIKE '%a mom%' \n  OR AboutMe LIKE '%a mother%'\n  \nORDER BY \n  Reputation DESC;","CreationDate":"2018-08-17 0:27:39","validated":true}
{"QuerySetId":782722,"Title":"Top users in UAE for angular","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('angular')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%uae%'\n\nORDER BY Score DESC;","CreationDate":"2018-02-07 15:15:01","validated":true}
{"QuerySetId":782725,"Title":"Top users in dubai for c# tag","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('c#')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%dubai%'\n\nORDER BY Score DESC;","CreationDate":"2018-01-15 16:19:31","validated":true}
{"QuerySetId":785622,"Title":"Top 20 by Tag Master","Description":null,"QueryBody":"SELECT  top 20 \n\nq.id,  \n--q.id as [Post Link], \nq.title as \"Title\",\nu.id as \"Asker\", \nu.id as [User Link], \nau.id as \"Answerer\", \nau.id as [User Link],\nq.creationdate as \"When Asked\", \na.creationdate as \"When Answered\",\nq.lastactivitydate as \"Last Active\",\nq.viewcount as \"Views\", \nq.answercount as \"Total Answers\", \nq.commentcount as \"Q Comments\",\na.commentcount as \"A Comments\",\nq.score as \"Q Score\",\na.score as \"A Score\",\nq.tags as \"Tags\" \n \nfrom Posts q\n\njoin Posts a on q.acceptedanswerid = a.id\njoin Users u ON q.OwnerUserId = u.Id\njoin Users au ON a.OwnerUserId = au.Id\n\nwhere q.posttypeid =1 \nand q.acceptedanswerid is not null\nand q.tags like '%<' + ##tagname:string## + '>%'\nand q.ClosedDate is NULL\nand q.CommunityOwnedDate is null\norder by q.score desc","CreationDate":"2018-07-10 12:58:53","validated":true}
{"QuerySetId":792107,"Title":"Stack overflow users count for each country","Description":null,"QueryBody":"SELECT  * FROM\n(\n  SELECT Count(Id) as UserCount , Location\n  FROM Users as u\n  Group By Location\n) as K\nOrder By UserCount Desc","CreationDate":"2018-01-26 15:40:04","validated":true}
{"QuerySetId":792681,"Title":"Top SO users by tag and location","Description":null,"QueryBody":"SELECT \n  row_number() over (order by u.reputation desc) as [#], \n  u.id as [User Link], \n  u.reputation    \nfrom\n  users u\n  join posts a on a.ownerUserId = u.id and a.postTypeId = 2 \n  join posts q on q.id = a.parentId and q.tags like lower('%##Tag##%')\nwhere  \n  lower(location) like lower('%##Location##%')\n  and reputation >= 1000    \ngroup by\n  u.id, \n  u.reputation\norder by\n  u.reputation desc","CreationDate":"2018-01-27 20:46:45","validated":true}
{"QuerySetId":793943,"Title":"Count of Questions with no Answer","Description":null,"QueryBody":"SELECT  count(Q.Id)\nFROM Posts Q\nWHERE Q.AnswerCount = 0 and Q.PostTypeId = 1","CreationDate":"2018-01-29 23:42:07","validated":true}
{"QuerySetId":793944,"Title":"Count of Question with no Accepted Answer","Description":null,"QueryBody":"SELECT  count(Q.Id)\nFROM Posts Q\nWHERE Q.AcceptedAnswerId is NULL and Q.PostTypeId = 1 and q.ClosedDate is NULL","CreationDate":"2018-03-29 16:09:16","validated":true}
{"QuerySetId":794213,"Title":"Find questions containing given tag","Description":null,"QueryBody":"SELECT  Id as [Post Link], Tags, CreationDate\nFROM Posts\nWHERE  PostTypeId = 1  AND (Tags LIKE '%<##Tagname?geometry##>%')\nORDER BY CreationDate DESC","CreationDate":"2020-02-01 17:21:51","validated":true}
{"QuerySetId":795271,"Title":"My Top 100 highest-voted comments","Description":null,"QueryBody":"SELECT  TOP 100 p.Id as [Post Link], c.Id as \"Comment ID\", c.id as [Comment Link], c.Score, c.UserDisplayName, c.UserId\n\nFROM Comments c\n\nINNER JOIN Posts p\n ON c.PostId = p.Id\n \nWHERE c.UserId = ##UserId## \n \nORDER BY Score DESC","CreationDate":"2019-12-15 8:40:01","validated":true}
{"QuerySetId":795496,"Title":"posts of a user that are tagged as apex","Description":null,"QueryBody":"SELECT  distinct u.DisplayName,\nCONCAT('https:\/\/stackoverflow.com\/users\/', u.Id) AS [Profile Link], u.Location, u.AboutMe, u.Reputation\nfrom users u, posts q, posts a\nwhere u.id=a.OwnerUserId\nand a.ParentId=q.id\nand a.PostTypeId=2\nand q.tags like '%apex%'\nand q.PostTypeId=1\norder by u.Reputation desc;","CreationDate":"2019-06-26 2:42:03","validated":true}
{"QuerySetId":795612,"Title":"Code golf answers that wouldn't show on the leaderboard","Description":null,"QueryBody":"SELECT  Posts.Body, \nPosts.Id AS [Post Link],\nUsers.DisplayName as 'Poster name'\nfrom Posts\n\n\ninner join Posts as Question on Posts.ParentId = Question.Id\ninner join Users on Posts.OwnerUserId = Users.Id\n\nwhere Posts.PostTypeId = 2\n  and Question.Tags like '%<code-golf>%'\n  and Posts.Body not like '<h_>%'","CreationDate":"2018-02-01 19:59:35","validated":true}
{"QuerySetId":795641,"Title":"List of tags and excerpt","Description":null,"QueryBody":"SELECT  \n  t.tagName,\n  e.body as 'Excerpt',\n  t.count as \"Number\"\nfrom tags t\nleft join Posts e\n  on t.ExcerptPostId = e.Id\n\norder by t.count desc","CreationDate":"2018-02-01 19:37:00","validated":true}
{"QuerySetId":795961,"Title":"Length of posts over time","Description":null,"QueryBody":"SELECT  CAST(creationdate as DATE),SUM (len(body) )\nFROM Posts\nWHERE PostTypeId =1 OR PostTypeId = 2\nGROUP BY CAST(creationdate as DATE)\nORDER BY  CAST(creationdate as DATE)","CreationDate":"2018-02-02 9:50:37","validated":true}
{"QuerySetId":797981,"Title":"questions about Excel or VBA Scraping (by score)","Description":null,"QueryBody":"SELECT  id as [post link], score, viewcount, title, creationdate, tags, commentcount\nfrom posts\nwhere \n   posttypeid = 1\n   and (tags like '%excel%' or tags like '%vba%')\n   and (title like '%scrap%' or tags like '%scraping%')\norder by score desc","CreationDate":"2018-02-06 11:24:30","validated":true}
{"QuerySetId":800979,"Title":"Amount of votes by top 5 voters","Description":null,"QueryBody":"SELECT  SUM(Downvotes), SUM(Upvotes),\nSUM(Downvotes)\/CAST(TotalDown As Float)*100 As '% of downvotes',\nSUM(Downvotes)\/CAST(TotalPosts As Float)*100 As '% of Posts Downvoted'\nFROM (\n\nSELECT TOP(5) Users.Downvotes, Users.Upvotes\nFROM Users\nORDER BY Users.Downvotes Desc\n\n\n) AS T\n\n--Grab a total to use for percentage of total downvotes\nCROSS JOIN (\n  SELECT SUM(Downvotes) As TotalDown\n  From Users\n  Where Users.Id != -1\n) As D\n\n--Grab a total to use for percentage of total downvotes\nCROSS JOIN (\n  SELECT SUM(Downvotes) As TotalUp\n  From Users\n  Where Users.Id != -1\n) As U\n\n--Grab a total to use for percentage of total downvotes\nCROSS JOIN (\n  SELECT SUM(Downvotes) As TotalPosts\n  From Users\n  Where Users.Id != -1\n) As P\n\nGROUP BY TotalDown, TotalUp, TotalPosts","CreationDate":"2018-02-09 21:07:57","validated":true}
{"QuerySetId":801382,"Title":"Questions about Excel\/VBA Web Scraping","Description":null,"QueryBody":"SELECT  \n  id as [Post Link], \n  score, \n  viewcount, \n  title, \n  creationdate, \n  tags, \n  commentcount,\n  len(body) as len_body\n  \nfrom \n  posts\n  \nwhere \n   posttypeid = 1\n   and (tags like '%excel%' COLLATE SQL_Latin1_General_CP1_CI_AS \n        or tags like '%vba%' COLLATE SQL_Latin1_General_CP1_CI_AS )\n   and (tags like '%scraping%' \n        or title like '%scrape%' COLLATE SQL_Latin1_General_CP1_CI_AS \n        or body like '%scrape%' COLLATE SQL_Latin1_General_CP1_CI_AS\n        or title like '%scraping%' COLLATE SQL_Latin1_General_CP1_CI_AS \n        or body like '%scraping%' COLLATE SQL_Latin1_General_CP1_CI_AS)\n   --and score>0\n   \norder by \n  score desc, \n  viewcount desc","CreationDate":"2018-02-18 15:45:09","validated":true}
{"QuerySetId":802724,"Title":"post with text like \"seems like a list question\"","Description":null,"QueryBody":"\"seems like a list question\"","CreationDate":"2018-02-12 22:42:59","validated":true}
{"QuerySetId":803444,"Title":"500 Longest questions with score and poster rep since 2013-01-01","Description":null,"QueryBody":"SELECT  TOP 500 Id as [Post Link], len(Body) AS Length, Score,\nUserRep = (SELECT Reputation FROM Users WHERE Id = OwnerUserId)\nFROM Posts WHERE PostTypeId=1 AND creationdate > 2013-01-01 ORDER BY len(Body) DESC","CreationDate":"2018-02-13 21:23:26","validated":true}
{"QuerySetId":805394,"Title":"Closed questions with answers by high-reputation users","Description":null,"QueryBody":"SELECT \n  questions.Id AS [Post Link],\n  users.Id AS [User Link],\n  questions.CreationDate,\n  questions.ClosedDate\nFROM Posts answers\nJOIN Posts questions ON answers.ParentId = questions.Id\nJOIN Users users ON users.Id = answers.OwnerUserId\nWHERE questions.ClosedDate IS NOT NULL\n  AND users.Reputation >= ##reputationThreshold?3000##\nORDER BY questions.ClosedDate DESC","CreationDate":"2018-02-15 18:03:41","validated":true}
{"QuerySetId":805504,"Title":"Comments from rene regarding get more rep","Description":null,"QueryBody":"SELECT  Id, PostId as [Post Link], Text \nfrom Comments\nwhere lower(Text) like '%get more rep%' and UserId = 578411 \norder by len(Text), Id asc","CreationDate":"2018-02-15 21:47:05","validated":true}
{"QuerySetId":805507,"Title":"Comments regarding rep","Description":null,"QueryBody":"SELECT  Id, PostId as [Post Link], Text \nfrom Comments\nwhere lower(Text) like '% rep %' \norder by len(Text), Id asc","CreationDate":"2018-02-15 21:52:12","validated":true}
{"QuerySetId":806441,"Title":"Test - top 20 viewcount","Description":null,"QueryBody":"SELECT  top 20 Id as [Post Link], Score, Tags, OwnerUserId, OwnerDisplayName, ParentId\nfrom Posts\norder by ViewCount desc","CreationDate":"2018-02-17 19:28:29","validated":true}
{"QuerySetId":807646,"Title":"Questions per day over time","Description":null,"QueryBody":"SELECT  dateadd(year, datediff(year, '20120101', CreationDate), '20120101'),\n       count(*)\/365.0 QpD\nfrom Posts\nwhere PostTypeId = 1\ngroup by datediff(year, '20120101', CreationDate)\norder by datediff(year, '20120101', CreationDate)","CreationDate":"2018-02-19 19:17:02","validated":true}
{"QuerySetId":809977,"Title":"*Fixed* How many upvotes do I have towards tag-specialist badges?","Description":"copy of \"How many upvotes do I have towards tag-specialist badges?\", but this query also shows how many answers you posted for each tag. (20 needed for bronze badge, 80for silver, 200 for gold)","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes,\n    COUNT(DISTINCT Posts.Id) AS Answers\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName \nORDER BY UpVotes DESC","CreationDate":"2018-02-23 18:40:29","validated":true}
{"QuerySetId":810459,"Title":"Users above given number of upvotes","Description":null,"QueryBody":"SELECT \n  Id AS [User Link], Reputation, CreationDate, DisplayName, LastAccessDate, Upvotes, Downvotes\nFROM Users   \nWHERE Upvotes > ##votes##\nORDER BY Id","CreationDate":"2018-02-25 13:18:17","validated":true}
{"QuerySetId":815013,"Title":"Questions closed\/reopen most time with community votes","Description":null,"QueryBody":"SELECT  TOP 100\n  PostId AS [Post Link],\n  COUNT(*) AS Count\nFROM PostHistory\nWHERE\n  PostHistoryTypeId IN (10, 11)\n  AND\n  JSON_VALUE(Text, '$.Voters[4].Id') IS NOT NULL\nGROUP BY PostId\nORDER BY Count DESC, PostId","CreationDate":"2018-03-06 16:37:00","validated":true}
{"QuerySetId":817856,"Title":"Rank users by what fraction of their answers are accepted","Description":null,"QueryBody":"DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT\n    TOP 100\n    Users.Id AS [User Link],\n    Count(*) as \"Answers\",\n    Cast(Count(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 END) as Float) \/ Count(*) AS \"Fraction\"\nFROM Posts a\n    INNER JOIN Posts q\n        ON a.ParentId = q.Id\n    INNER JOIN Users\n        ON a.OwnerUserId = Users.Id\nGROUP BY Users.Id\nHAVING COUNT(*) >= @MinAnswers\nORDER BY \"Fraction\" DESC","CreationDate":"2020-05-09 2:38:41","validated":true}
{"QuerySetId":818198,"Title":"barely viewed VBA\/Excel questions over a day old","Description":null,"QueryBody":"SELECT  \n  id,\n  id as [Post Link],\n  creationdate,\n  score,\n  viewcount,\n  answercount,\n  commentcount,\n  favoritecount,\n  owneruserid as [User Link],\n  tags\n\nfrom \n  posts\n\nwhere \n  datediff(hh,creationdate,getdate()) >=24 --24hours old\n  and viewcount <10 --under 10 views\n  and posttypeid = 1\n  and year(creationdate) >= year(getdate())-1 --since beginning of last year\n  and ( tags like '%vba%' or tags like '%excel%' )\n  and deletiondate is null\n  and closeddate is null\n  and acceptedanswerid is null\n \norder by\n  creationdate desc","CreationDate":"2018-03-11 17:23:14","validated":true}
{"QuerySetId":818597,"Title":"posts tagged excel or vba","Description":null,"QueryBody":"SELECT \n  --tags,\n  count(id) as num\n  \nfrom \n  posts\n\nwhere \n  tags like '%vba%' or tags like '%excel%'\n\n\/*group by\n  tags\n  \norder by\n  count(id) desc*\/","CreationDate":"2018-03-12 2:01:27","validated":true}
{"QuerySetId":819124,"Title":"Number of duplicate for specific question","Description":null,"QueryBody":"SELECT  count(*)\nfrom postlinks\nwhere linktypeid = 3 -- duplicate\nAND relatedPostid = 218384","CreationDate":"2018-03-14 17:52:04","validated":true}
{"QuerySetId":820352,"Title":"Most Answered Questions (>= 10)","Description":null,"QueryBody":"SELECT  ps.Id, ps.Title, ps.ViewCount, ps.Score  \nfrom Posts ps\nwhere PostTypeId = 1 \/* 1 = question, 2 = answer *\/\n  and ViewCount >= 10\norder by Score DESC","CreationDate":"2018-03-20 15:13:51","validated":true}
{"QuerySetId":821366,"Title":"Top Go Developers in Serbia","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], \n       us.id [User Link],\n       tuser.Score,\n       us.Reputation,\n       us.Location\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('go')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\nWHERE LOWER(Location) LIKE '%serbia%'\nORDER BY Score DESC;","CreationDate":"2018-07-06 21:46:30","validated":true}
{"QuerySetId":822730,"Title":"top 10 users by post score","Description":null,"QueryBody":"SELECT  TOP 10\n    Users.Id as [User Link],\n    max(Age) as Age,\n    max(Location) as Location,\n    max(WebsiteUrl) as Website,\n    max(Reputation) as Rep,\n    Count(Answers.Id) as Answers,\n    sum(Answers.Score) as Score,\n    CAST(AVG(CAST(Answers.Score AS float)) as numeric(6,1)) as [Avg]\nFROM Tags    \n    JOIN PostTags ON PostTags.TagId = Tags.Id\n    JOIN Posts ON Posts.Id = PostTags.PostId \n    JOIN Posts as Answers ON Answers.ParentId = Posts.Id\n    JOIN Users ON Users.Id = Answers.OwnerUserId\nGROUP BY \n    Users.Id, DisplayName\nORDER BY \n    sum(Answers.Score) DESC","CreationDate":"2018-03-16 2:03:44","validated":true}
{"QuerySetId":822859,"Title":"Latests answers by top users with minimum reputation and minimum posts","Description":null,"QueryBody":"SELECT  * FROM \n(\nSELECT OwnerUserId AS [User Link], Id AS [Post Link], CreationDate,\n  RANK() OVER (Partition BY OwnerUserId\n         ORDER BY CreationDate DESC) AS Rank\nFROM Posts\nWHERE PostTypeId = 2\n  AND OwnerUserId IN (\n  \nSELECT TOP ##UserCount##\n  Users.Id\nFROM \n  Posts\n  INNER JOIN\n   Users ON Users.Id = OwnerUserId\nWHERE Users.Reputation > ##MinReputation## AND PostTypeId = 2\nGROUP BY Users.Id, Users.Reputation\nHAVING Count(Posts.Id) > ##MinPostsCount##\nORDER BY \n  Users.Reputation DESC \n  \n  )\n  ) AS _ WHERE Rank <= 5","CreationDate":"2018-03-16 12:27:16","validated":true}
{"QuerySetId":823334,"Title":"VBA Question Answer'ers with the TOP REP","Description":null,"QueryBody":"SELECT \n  u.displayname,\n  u.reputation as ActualRep,\n  count(a.id) as NumAnswers,\n  LastAccessDate \n  \nfrom \n  posts q,\n  posts a,\n  users u\n  \nwhere \n  q.tags like '%vba%'\n  and a.owneruserid = u.id\n  and a.parentid = q.id\n  \n\ngroup by\n  u.displayname,\n  u.reputation,\n  LastAccessDate\n  \norder by\n  u.reputation desc","CreationDate":"2018-03-17 5:13:27","validated":true}
{"QuerySetId":824951,"Title":"Tumbleweeds: users with 1 question","Description":null,"QueryBody":"WITH  a as (\nselect q.OwnerUserId from Posts q\ninner join Badges b on q.OwnerUserId = b.UserId\nwhere q.PostTypeId = 1 and b.Name = 'Tumbleweed' \ngroup by q.OwnerUserId\nhaving count(q.Id) = 1 \n) \nselect count(*) from a","CreationDate":"2018-03-18 23:56:06","validated":true}
{"QuerySetId":825243,"Title":"Users who have asked the most unanswered questions (Excluding any User with any Answer))","Description":null,"QueryBody":"SELECT  TOP(10)\n    COUNT(*) AS UnansweredCount,\n    OwnerUserId  as[User Link]\nFROM\n    Posts p\nWHERE\n    p.PostTypeId = 1 AND\n    p.AnswerCount = 0 AND\n    p.OwnerUserId NOT IN (\n        SELECT DISTINCT OwnerUserId\n        FROM Posts p2\n        WHERE\n            p2.PostTypeId = 1 AND\n            p2.OwnerUserId IS NOT NULL AND\n            p2.AnswerCount > 0\n            \n    )\nGROUP BY OwnerUserId\nORDER BY UnansweredCount DESC","CreationDate":"2018-03-19 14:08:42","validated":true}
{"QuerySetId":828175,"Title":"Number of Posts by Day","Description":null,"QueryBody":"SELECT  \n  convert(date,creationdate), \n  count (id) as numPosts\nfrom posts \n--where year(creationdate) >=2013\ngroup by convert(date,creationdate)\norder by convert(date,creationdate)","CreationDate":"2018-03-24 5:06:41","validated":true}
{"QuerySetId":828585,"Title":"% downvoted questions per tag","Description":null,"QueryBody":"SELECT  t.TagName,\n  t.Count AS '# of questions',\n  ROUND(100.0 * (t.Count - COUNT(*)) \/ t.[Count], 2) AS '% downvoted'\n  FROM Tags AS t\n  INNER JOIN PostTags AS pt ON t.Id = pt.TagId\n  LEFT OUTER JOIN Votes AS v ON v.PostId = pt.PostId\n                            AND v.VoteTypeId = 3 -- downvotes\n  WHERE v.PostId IS NULL -- so we SELECT the questions WITHOUT downvotes\n  GROUP BY t.TagName, t.Count\n  ORDER BY ROUND(100.0 * (t.Count - COUNT(*)) \/ t.Count, 2) DESC","CreationDate":"2018-03-22 13:46:04","validated":true}
{"QuerySetId":828990,"Title":"Total Accepted Answers for a user By Month and Year","Description":null,"QueryBody":"DECLARE @UserId int = ##UserId## SELECT Month(a.CreationDate) AS[Month], Year(a.CreationDate) AS[Year], COUNT(*) AS [Number of Answers] FROM Posts a join posts as q on a.parentid = q.id INNER JOIN Users ON Users.Id = a.OwnerUserId WHERE (a.OwnerUserId = @UserId and a.posttypeid = 2 and q.acceptedanswerid = a.id) GROUP BY Month(a.CreationDate), Year(a.CreationDate) ORDER BY Year(a.CreationDate) DESC, Month(a.CreationDate) DESC","CreationDate":"2018-03-22 21:38:10","validated":true}
{"QuerySetId":830022,"Title":"Questions posted this year, by day","Description":null,"QueryBody":"SELECT  \n  cast (creationdate as date) as dt, \n  count(id) as num,\n  avg(cast(score as decimal)) as AvgScore\n  \nfrom \n  posts\n  \nwhere\n  year(creationdate)>=year(getdate())\n  and posttypeid = 1\n\ngroup by\n  cast (creationdate as date)\n  \norder by\n  cast (creationdate as date)","CreationDate":"2018-03-31 3:17:13","validated":true}
{"QuerySetId":830174,"Title":"Get All Users of Posts for a aws-lambda tag","Description":null,"QueryBody":"SELECT  * FROM Users WHERE Id IN \n(SELECT OwnerUserId FROM Posts WHERE ParentId IN (\n  SELECT Id FROM Posts WHERE Tags LIKE '%aws-lambda%')\n)","CreationDate":"2018-03-25 13:52:50","validated":true}
{"QuerySetId":831178,"Title":"Users with Generalist badge ordered by their reputation","Description":"Users with Generalist badge ordered by their reputation","QueryBody":"SELECT  u.Id as [User Link], u.Reputation, b.Date from Badges b\ninner join Users u on u.Id = b.UserId\nwhere b.Name = 'Generalist'\norder by u.Reputation asc","CreationDate":"2018-03-31 12:15:22","validated":true}
{"QuerySetId":832400,"Title":"Percentage of Questions edited by Owner, by Year","Description":null,"QueryBody":"SELECT \n  year(creationdate) as [Year],\n  \n  count(id) [NumQs],\n  \n  sum(case when LastEditorUserId is not null\n   then 1 else 0 end ) as [Edited],\n   \n  sum(case when LastEditorUserId = owneruserid\n   then 1 else 0 end ) as [Edit by Owner],\n   \n  format(sum(case when LastEditorUserId = owneruserid\n   then 1.0 else 0.0 end ) \/ sum(case when LastEditorUserId is not null\n   then 1.0 else 0.0 end ),'0.0%') as [% Owner Edit]\n  \nfrom \n  posts\n\nwhere \n  posttypeid = 1\n \ngroup by \n  year(creationdate)","CreationDate":"2018-03-28 22:16:38","validated":true}
{"QuerySetId":832862,"Title":"Answers, Posts, and Views by Date Range and DisplayName (MVP)","Description":null,"QueryBody":"SELECT\n  pt.Name,\n  Posts = COUNT(*),\n  Views = SUM(COALESCE(p.ViewCount, parent.ViewCount)),\n  Start = CONCAT(DATENAME(m, @startDate), ' ', DATENAME(year, @startDate)),\n  Finish = CONCAT(DATENAME(m, @endDate), ' ', DATENAME(year, @endDate))\nFROM Posts p\nLEFT JOIN Posts parent ON p.ParentId = parent.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN PostTypes pt ON p.PostTypeId = pt.Id\nWHERE u.DisplayName = @user\nAND p.CreationDate BETWEEN @startDate AND @endDate\n--GROUP BY ROLLUP(pt.Name)\nGROUP BY pt.Name, DATENAME(year, P.CreationDate), DATENAME(m, P.CreationDate)","CreationDate":"2019-03-31 19:36:38","validated":true}
{"QuerySetId":834260,"Title":"Popular MongoDB Queries by Score","Description":null,"QueryBody":"SELECT  Score, ViewCount, CreationDate, DATEDIFF(DAY, CreationDate, GETDATE()) AS \"DaysOpen\", LastActivityDate, Title, Id, tags\nFROM Posts\nWHERE Title LIKE '%mongodb%' or Tags LIKE '%mongodb%'\nORDER BY Score DESC","CreationDate":"2018-04-03 22:25:31","validated":true}
{"QuerySetId":834607,"Title":"Most Popular tags 2018 so far","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as MayRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInMay,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2018-04-01'\nand Posts.CreationDate > '2018-01-01'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2018-04-04 16:46:21","validated":true}
{"QuerySetId":834852,"Title":"Comments with Fixed, thank* (bunches of obsolete comments after edits)","Description":null,"QueryBody":"SELECT  TOP 100\n c.Id as [Comment Link]\nfrom Comments c  \nwhere c.Text like '%Fixed, thank%' and len(c.Text) < 20 \norder by c.CreationDate asc;","CreationDate":"2018-04-04 23:04:24","validated":true}
{"QuerySetId":834972,"Title":"Finding basic thank you comments (fewer than 50 characters)","Description":null,"QueryBody":"SELECT  \n c.Id as [Comment Link],\n c.Text as [comment body],\n (SELECT count(c.Id) as [Comment Link] from Comments c  where  \n(c.Text like '%fack%' or c.Text like '%fck%') and len(c.Text) < 50 )\nas [total comments]\nfrom Comments c  \nwhere  (c.Text like '%fu%' or c.Text like '%fuu%') and len(c.Text) < 50 \norder by c.CreationDate desc;","CreationDate":"2018-04-05 5:06:48","validated":true}
{"QuerySetId":835058,"Title":"Ever Protected Questions, simple search","Description":null,"QueryBody":"SELECT \n    ph.PostId           AS [Post Link],\n    ph.CreationDate     AS [Protected Date],\n    CASE ph.UserId\n        WHEN NULL       THEN ph.UserDisplayName\n        ELSE            ph.UserId\n    END AS [User Link]\nFROM        PostHistory ph\nWHERE       ph.PostHistoryTypeId = 19  -- protected\nORDER BY    ph.PostId, ph.CreationDate","CreationDate":"2018-04-05 3:27:17","validated":true}
{"QuerySetId":835239,"Title":"Questions and Answers per Day on a Monthly Basis","Description":null,"QueryBody":"SELECT \n\n(SUM(pd.Questions) * 1.00 \/ COUNT(pd.Date)) AS [Questions per Day],\n(SUM(pd.Answers) * 1.00 \/ COUNT(pd.Date)) AS [Answers per Day],\nDATEPART(month,pd.Date) AS [Month],\nDATEPART(year,pd.Date) AS [Year]\nFROM\n(\n\nSELECT \n\nSUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS [Questions],\nSUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS [Answers],\nCAST(p.CreationDate AS Date) AS [Date]\n\nFROM Posts AS p\nWHERE p.ClosedDate IS NULL\nGROUP BY CAST(p.CreationDate AS Date)\n) AS pd\n\nGROUP BY DATEPART(year,pd.Date),DATEPART(month,pd.Date)\nORDER BY DATEPART(year,pd.Date) DESC,DATEPART(month,pd.Date)DESC","CreationDate":"2018-06-06 11:08:46","validated":true}
{"QuerySetId":835349,"Title":"Comments that should be Answers","Description":null,"QueryBody":"SELECT  c.CreationDate, c.Id [Comment Link], c.Score, a.NumberOfAnswers,\n  CASE WHEN (2 = p.PostTypeId) THEN t.Title\n       ELSE                         p.Title\n       END AS QuestionTitle\nFROM Comments c\n  LEFT OUTER JOIN Posts p on (c.PostId = p.Id)\n  LEFT OUTER JOIN Posts t on (p.ParentId = t.Id)\n  LEFT OUTER JOIN (\n    SELECT ParentId, Count(*) NumberOfAnswers\n    FROM Posts\n    WHERE PostTypeId = 2\n    GROUP BY ParentId\n    ) a on (c.PostId = a.ParentId)\nWHERE\n1 = p.PostTypeId AND\n(\nUPPER(c.Text) LIKE UPPER('%post%as%answer%')\nOR\nc.Text in ('')) ORDER BY c.Id DESC","CreationDate":"2018-04-06 22:27:57","validated":true}
{"QuerySetId":836070,"Title":"Number of Resolved Qs where solution is not the first A","Description":null,"QueryBody":"WITH  resolved_Qs as (\nselect Id as ResolvedQuestionId, AcceptedAnswerId, Score from Posts \nwhere PostTypeId = 1 and AnswerCount > 0\nand AcceptedAnswerId is not null\n),\n\ntopScores as (\nselect max(Score) as TopScore, ParentId as QuestionId from Posts\nwhere PostTypeId = 2 and ParentId is not null\ngroup by ParentId\n),\n\ntopScorerAcceptedAs as (\nselect AcceptedAnswerId, ResolvedQuestionId, Score from resolved_Qs\ninner join topScores on resolved_Qs.ResolvedQuestionId = topScores.QuestionId\nwhere resolved_Qs.Score = topScores.TopScore\n)\n\n\nselect\n(select count(*)  from resolved_Qs) - (select count(*)  from topScorerAcceptedAs) as difference\n\nunion\nselect count(*)  from resolved_Qs\n\nunion\nselect count(*)  from topScores","CreationDate":"2018-04-06 21:10:44","validated":true}
{"QuerySetId":837620,"Title":"AVERAGE SCORE using votes on questions in FIRST 14 DAYS, by year","Description":null,"QueryBody":"SELECT  \n  --datefromparts(year(p.creationdate),month(p.creationdate),1) as YearMth,\n  year(p.creationdate),\n  cast(sum(case when votetypeid = 2 then 1 else -1 end ) as decimal)\n      \/ count(p.id) as [Avgscore]\n  \nfrom \n  posts p left outer join votes v\n  on p.id = v.postid\n  \nwhere\n--  year(p.creationdate)>=year(getdate())-1  --questions in the last 2 yrs\n--  and \n  p.creationdate<dateadd(dd,14,getdate()) \n  and v.creationdate<=dateadd(dd,14,p.creationdate) --votes within 2 weeks\n  and votetypeid in(2,3) --(2=up, 3=down)\n  and p.posttypeid=1\n  \ngroup by \n  year(p.creationdate)\n\norder by\n  year(p.creationdate)","CreationDate":"2019-06-29 3:08:19","validated":true}
{"QuerySetId":838858,"Title":"Get body and score of questions in specified date interval","Description":null,"QueryBody":"SELECT  body, score, CreationDate\nfrom Posts\nwhere\nPostTypeId = 1\nand CreationDate between ##Startdate:string## and ##Enddate:string##","CreationDate":"2018-06-22 5:36:25","validated":true}
{"QuerySetId":838867,"Title":"Tags assoc. with users with answered questions","Description":null,"QueryBody":"WITH  P AS (SELECT ParentId, Id, OwnerUserId,\n  CASE \n    WHEN PostTypeId = 1 THEN Id\n    WHEN PostTypeId = 2 THEN ParentId END AS PID\n    FROM Posts \n\nWHERE OwnerUserId IN\n--User ID of accepted answerers\n  (SELECT OwnerUserId FROM Posts\n  WHERE ID IN\n  --Post Ids of chosen answers\n    (SELECT P1.AcceptedAnswerId\n    FROM Posts P1\n    WHERE P1.PostTypeId = 1 AND P1.AcceptedAnswerId IS NOT NULL)))\n    \nSelect P.PID, Posts.OwnerUserId, T.TagName, Posts.CreationDate FROM P\n\nINNER JOIN Posts on P.PID = Posts.Id\n\nINNER JOIN PostTags PT ON PT.PostID = P.PID\nINNER JOIN Tags T on T.Id = PT.TagId\n","CreationDate":"2018-04-13 19:30:07","validated":true}
{"QuerySetId":839711,"Title":"Top Users from New Delhi","Description":null,"QueryBody":"SELECT  TOP 100\n   Id,\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n    Location like '%New Delhi%' \nORDER BY\n   reputation DESC","CreationDate":"2018-04-15 1:29:32","validated":true}
{"QuerySetId":840905,"Title":"Most prolific answerers during date interval, mean answer score","Description":null,"QueryBody":"DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when ##EndDate:string?today## = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT top ##HowManyUsers?50##\nOwnerUserId as [User Link],\nCOUNT(*) as Answers,\nRound(1.0 * count(*) \/ ##DaysBack##, 1) as 'Answers per day',\nRound(1.0 * sum(Score) \/ Count(*), 2) as 'Mean Answer Score'\nFROM Posts\nWHERE CreationDate between @StartDate and @EndDate\n  AND PostTypeId = 2 -- 1 for questions, 2 for answers\nGROUP BY OwnerUserId\nORDER BY Answers DESC","CreationDate":"2018-06-29 4:32:54","validated":true}
{"QuerySetId":841218,"Title":"Question Count answered in month of July, 2017","Description":null,"QueryBody":"SELECT  Count(Id) as QuestionAnswered from Posts\n\nwhere \nPostTypeId = 2 and CreationDate between '2017-07-01' and '2017-07-31'","CreationDate":"2018-04-18 13:16:35","validated":true}
{"QuerySetId":841253,"Title":"Get total questions answered by a user in July","Description":null,"QueryBody":"SELECT  COUNT(*)\nFROM Posts\nWHERE OwnerUserId = 5140781 and PostTypeId = 2 and CreationDate BETWEEN '2017-07-01' and '2017-07-31'","CreationDate":"2018-04-18 12:58:18","validated":true}
{"QuerySetId":841945,"Title":"Search SO users from Germantown","Description":null,"QueryBody":"SELECT \n  Id [User Link],\n  Reputation,\n  DisplayName,\n  Location,\n  AboutMe\nFROM Users AS DisplayName \nWHERE Location LIKE '%Germantown%'\nORDER BY Reputation DESC","CreationDate":"2018-05-10 20:02:05","validated":true}
{"QuerySetId":842966,"Title":"questions closed in last 10 days: who votes, why, and what was their rep?","Description":null,"QueryBody":"SELECT  \n  ph.postid as [Post Link],\n  q.creationdate,\n  q.closeddate,\n  format(cast(datediff(s,q.creationdate,q.closeddate) as decimal)\/60,'0.0') as MinsToClose,\n  crt.name as [Close Reason],\n  cv.userid as [User Link],\n  u.reputation as [UserReputation]\n  \nfrom \n  posts q\n  inner join posthistory ph on q.id = ph.postid\n  inner join closereasontypes crt on crt.id = comment\n  cross apply OPENJSON(JSON_QUERY(ph.text, '$.Voters')) \n       with (userid int '$.Id') cv\n  join users u on u.id = cv.userid\n  \nwhere\n  posthistorytypeid = 10 --closed\n  and q.closeddate is not null --closed\n  and q.creationdate >= dateadd(d,-10,getdate())  --temp:past 10 days\n  and q.posttypeid = 1\n  and q.score <= 0\n  and q.answercount = 0\n\norder by \n  ph.postid","CreationDate":"2018-04-21 5:40:27","validated":true}
{"QuerySetId":843316,"Title":"Stack Overflow Links shared in a specific user's Comments","Description":null,"QueryBody":"SELECT  \n  patindex('%\/\/stackoverflow.com\/%',text),\n  \n  right(text,len(text)-patindex('%\/\/stackoverflow.com\/%',text)+1),\n  \n  case when\n  nullif(charindex(' ',right(text,len(text)-patindex('%\/\/stackoverflow.com\/%',text)+1)),0)<\n  nullif(charindex(')',right(text,len(text)-patindex('%\/\/stackoverflow.com\/%',text)+1)),0)\n  then\n  charindex(' ',right(text,len(text)-patindex('%\/\/stackoverflow.com\/%',text)+1))\n  else\n  charindex(')',right(text,len(text)-patindex('%\/\/stackoverflow.com\/%',text)+1))\n  end\n\n\nfrom\n  comments\n  \nwhere \n  userid = @userid \n  and text like '%\/\/stackoverflow.com\/%'","CreationDate":"2018-04-22 17:14:24","validated":true}
{"QuerySetId":843547,"Title":"About Me from all Users","Description":null,"QueryBody":"SELECT  Id as [Profile Link], WebsiteUrl as [Website], AboutMe as [About Me] FROM Users;","CreationDate":"2018-04-23 13:57:44","validated":true}
{"QuerySetId":843672,"Title":"Total posted and accepted answers by month and year","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \nYear(a.CreationDate) AS[Year],\nMONTH(a.CreationDate) AS [Month],\n    COUNT(*) AS [Number of Answers] ,\n(SELECT\n    COUNT(*) AS [Number of Answers] \nFROM Posts aa\njoin posts as qq on aa.parentid = qq.id\nINNER JOIN\n    Users ON Users.Id = aa.OwnerUserId\nWHERE \n    (aa.posttypeid = 2\n    and qq.acceptedanswerid = aa.id)\n    and MONTH(aa.CreationDate) = MONTH(a.CreationDate)\n    AND Year(aa.CreationDate) = Year(a.CreationDate) \n    ) AS [Number of Accepted Answers]\nFROM Posts a\nINNER JOIN\n    Users ON Users.Id = a.OwnerUserId\n    GROUP BY MONTH(a.CreationDate) ,Year(a.CreationDate) \n   \n   ORDER BY Year(a.CreationDate), Month(a.CreationDate) DESC","CreationDate":"2019-01-09 13:15:04","validated":true}
{"QuerySetId":844513,"Title":"Total Perl6 users with all tags","Description":null,"QueryBody":"SELECT  b.DisplayName as owner, a.N from\n(SELECT OwnerUserId, count(*) as N from Posts where (Tags like '%perl6%' or Tags like '%rakudo%' or (Tags like '%parrot%' and Tags like '%perl%')) group by OwnerUserId) as a,\n(SELECT Id, DisplayName from Users) as b\nwhere a.OwneruserId = b.Id order by N desc;","CreationDate":"2018-04-25 10:48:08","validated":true}
{"QuerySetId":844721,"Title":"How many users with 4 questions?","Description":null,"QueryBody":"SELECT  count(a.uid) from (\n  SELECT OwnerUserId as uid from Posts\n  where PostTypeId = 1\n  group by OwnerUserId\n  having count(Id) = 4\n) a","CreationDate":"2018-04-25 20:54:40","validated":true}
{"QuerySetId":844766,"Title":"Search posts with string after some date","Description":null,"QueryBody":"SELECT  Id as [Post Link] from Posts\nwhere CreationDate >= '##datefrom##' \nand Body like '%##string##%'","CreationDate":"2018-04-26 1:54:10","validated":true}
{"QuerySetId":845981,"Title":"Top users from Moscow, Russia","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%moscow%'\n    OR UPPER(Location) LIKE '%MOSCOW%'\n    or Location like '%Moscow%'\n    AND Reputation >= 100\nORDER BY\n    Reputation DESC;","CreationDate":"2018-04-30 13:29:47","validated":true}
{"QuerySetId":847017,"Title":"Links to Chip Pearson's site","Description":null,"QueryBody":"SELECT  p.Id, p.PostTypeId, p.CreationDate, u.DisplayName, p.Score, p.Tags\nfrom Posts p\ninner join Users u on p.OwnerUserId = u.Id\nwhere p.Body like '%cpearson.com%'\norder by p.CreationDate","CreationDate":"2018-05-03 5:48:00","validated":true}
{"QuerySetId":847310,"Title":"Top Comments of all time, site-wide","Description":null,"QueryBody":"SELECT  c.score, c.userid as [User Link], c.creationdate, c.postid as [Post Link]\n  ,c.text as C_text\nfrom comments c\ninner join posts p on p.id = c.postid\nleft outer join posts pp on pp.id = p.parentid\ninner join users u on c.userid = u.id\nwhere c.score >= 50\norder by c.score desc","CreationDate":"2019-09-25 5:27:48","validated":true}
{"QuerySetId":849365,"Title":"Top 100 Users from Jaipur","Description":null,"QueryBody":"SELECT  TOP 100\n ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n   Id AS [User Link],\n   DisplayName,\n   Reputation,\n   Location,\n   WebsiteUrl\nFROM\n   Users\nWHERE\n   Location like N'%Jaipur%'","CreationDate":"2018-06-01 14:10:58","validated":true}
{"QuerySetId":849399,"Title":"Average view count for specific tag","Description":null,"QueryBody":"SELECT \n  Tags.TagName,\n  AVG(CAST(ViewCount AS BIGINT)) AS AverageViewCount,\n  COUNT(Posts.Id) AS QuestionCount \nFROM Tags\nJOIN PostTags ON Tags.Id = PostTags.TagId\nJOIN Posts ON PostTags.PostId = Posts.Id\nWHERE AcceptedAnswerId IS NOT NULL AND Tags.TagName = '##TagName##'\nGROUP BY Tags.TagName\nORDER BY AverageViewCount DESC","CreationDate":"2018-05-08 16:18:53","validated":true}
{"QuerySetId":850068,"Title":"Stack Oveflow users names, reputation and number of posts (main + meta) with main\/meta ratio","Description":null,"QueryBody":"SELECT  'https:\/\/stackoverflow.com\/u\/' + CAST(Main.Id AS NVARCHAR)\n  + '|' + Main.DisplayName,\n  Main.Reputation,\n  Main.Total AS '# of posts (main)',\n  Meta.Total AS '# of posts (meta)',\n  CASE WHEN Meta.Total = 0 THEN NULL\n       ELSE ROUND(CAST(Main.Total AS FLOAT) \/ Meta.Total, 2) END AS 'Ratio'\n\nFROM\n\n(SELECT u.Id, u.DisplayName, u.Reputation, COUNT(*) AS Total\n  FROM [StackOverflow].dbo.Users AS u\n  INNER JOIN [StackOverflow].dbo.Posts AS p ON u.Id = p.OwnerUserId\n  GROUP BY u.Id, u.DisplayName, u.Reputation) AS Main\n\nINNER JOIN\n\n(SELECT u.Id, COUNT(*) AS Total\n  FROM [StackOverflow.Meta].dbo.Users AS u\n  INNER JOIN [StackOverflow.Meta].dbo.Posts AS p ON u.Id = p.OwnerUserId\n  GROUP BY u.Id) AS Meta\n  \nON Main.Id = Meta.Id\n\nORDER BY Main.Reputation DESC","CreationDate":"2018-05-10 4:27:11","validated":true}
{"QuerySetId":851077,"Title":"Badges, with award times, for a given user","Description":null,"QueryBody":"SELECT       u.Id     AS [User Link]\n            , CASE\n                WHEN b.Tagbased = 1 THEN 'Tag: [' + b.Name + ']'\n                ELSE b.Name\n            END    AS [Badge name]\n            , CASE\n                WHEN b.Class = 1 THEN 'Gold'\n                WHEN b.Class = 2 THEN 'Silver'\n                WHEN b.Class = 3 THEN 'Bronze'\n                ELSE '*Unkown*'\n            END    AS [Class]\n            , b.Date AS [Awarded]\nFROM        Badges b\nLEFT JOIN   Users u  ON u.Id = b.Userid\nWHERE       b.Userid = ##UserId:int##\nORDER  BY   u.Displayname\n            , [Awarded] DESC","CreationDate":"2018-05-13 0:25:54","validated":true}
{"QuerySetId":851611,"Title":"AWS and IBM topic counts","Description":null,"QueryBody":"SELECT  'AWS' AS Service, COUNT(*) AS Count\n  FROM Posts p \n  WHERE p.Tags LIKE '%amazon%' OR p.Tags LIKE '%aws%'\nUNION ALL\n(\n  SELECT 'IBM' AS Service, COUNT(*) AS Count\n  FROM Posts p \n  WHERE p.Tags LIKE '%ibm-cloud%'\n)","CreationDate":"2018-05-14 17:11:33","validated":true}
{"QuerySetId":853182,"Title":"Questions tagged with mediawiki","Description":null,"QueryBody":"SELECT  *\nFROM Posts\nWHERE PostTypeId = 1\n  AND Tags LIKE '%mediawiki%'","CreationDate":"2018-05-31 4:05:52","validated":true}
{"QuerySetId":853427,"Title":"Questions with dependency-injection and dagger-2 tag","Description":null,"QueryBody":"SELECT  Id, AcceptedAnswerId, CreationDate from Posts where Tags like '%dependency-injection%' and Tags like '%dagger-2%';","CreationDate":"2018-05-18 23:44:07","validated":true}
{"QuerySetId":854657,"Title":"Get TOP python user in your location","Description":null,"QueryBody":"SELECT  Users.Id [User Link], Reputation, Count(Posts.Id) as Posts, Location, TagName\nfrom Users\nJoin Comments on Users.Id = UserId\nJoin PostTags on Comments.PostId = PostTags.PostId\nJoin Tags on PostTags.TagId = Tags.Id\nJoin Posts on Comments.PostId = Posts.Id\nwhere Location like '%##Location##%' \nAND (\nTagName = 'python'\n)\ngroup by Users.Id, Reputation, Location, TagName\norder by Posts DESC, Reputation DESC","CreationDate":"2018-07-16 15:26:57","validated":true}
{"QuerySetId":854978,"Title":"Most popular StackOverflow tags in May 2018","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as MayRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInMay,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2018-06-01'\nand Posts.CreationDate >= '2018-05-01'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2018-05-23 22:51:17","validated":true}
{"QuerySetId":855744,"Title":"Get questions and answers by user ids","Description":null,"QueryBody":"DECLARE  @AnswerUserID int = ##MyUserId##,\n        @QuestionUserId int = ##AskerUserId##\n\nSELECT Q.ID as [Post Link], \n       Q.Score As [Question Score], \n       A.Score As [Answer Score],\n       CASE WHEN Q.AcceptedAnswerId = A.Id THEN 'Yes' ELSE 'No' END As [Accepted]\nFROM Posts as A\nJOIN Posts as Q ON A.ParentId = Q.Id\nWHERE A.OwnerUserId = @AnswerUserID \nAND Q.OwnerUserId = @QuestionUserId","CreationDate":"2018-05-24 22:51:12","validated":true}
{"QuerySetId":855969,"Title":"Search answers by any keyword","Description":null,"QueryBody":"SELECT  p.CreationDate, p.Body, p.Id  as [Post Link]\nfrom Posts p\nwhere p.PostTypeId = 2\nand p.Body like '%##keyword1##%'","CreationDate":"2018-05-25 15:26:16","validated":true}
{"QuerySetId":855984,"Title":"Search usernames and about me by any keyword","Description":null,"QueryBody":"SELECT  top ##NumberOfPosts## u.Id as [User Link], u.DisplayName, u.AboutMe\nfrom Users u\nwhere  u.DisplayName like '%##keyword1##%'\nor u.AboutMe like '%##keyword1##%'\norder by u.CreationDate desc","CreationDate":"2018-05-25 16:41:19","validated":true}
{"QuerySetId":856687,"Title":"Users with highest Rep\/Posts ratio","Description":null,"QueryBody":"SELECT  TOP 1000\n   u.Id,\n   u.DisplayName,\n   u.Reputation,\n   count(*) as [Total Number of Posts],\n   u.Reputation\/count(*) as Ratio\nFROM Users u\njoin Posts p on p.OwnerUserId = u.Id\nwhere p.postTypeId in (1,2)\ngroup by u.Id,u.DisplayName,u.Reputation\nORDER BY Ratio DESC","CreationDate":"2018-05-28 14:57:38","validated":true}
{"QuerySetId":856724,"Title":"Users with the highest rep to total posts ratio (within a specific tag)","Description":null,"QueryBody":"SELECT  TOP 50\n   u.Id,\n   u.DisplayName,\n   u.Reputation,\n   n.NumPosts as [Total Number of Posts],\n   cast(u.Reputation as decimal)\/n.NumPosts as Ratio\nFROM Users u\ninner join (\n   SELECT\n      p.OwnerUserId,\n      count(*) as NumPosts\n   from Posts p\n   inner join PostTags pt on pt.PostId = p.Id\n   inner join Tags t on t.Id = pt.TagId\n   where p.PostTypeId in (1,2)\n   group by p.OwnerUserId\n   having count(*) >= ##MinPosts?10##\n   ) n on n.OwnerUserId = u.Id\n   where u.Reputation > ##MinRep?1##\nORDER BY Ratio ASC","CreationDate":"2018-05-28 15:45:12","validated":true}
{"QuerySetId":856824,"Title":"GitHub users who have answered at least one question","Description":null,"QueryBody":"WITH  GitHubUsers AS (\n  SELECT \n    u.Id, \n    COUNT(a.Id) as answersCount,\n    SUM(a.Score) as answersScore\n  FROM Users u\n  LEFT JOIN Posts a ON a.PostTypeId = 2 AND a.OwnerUserId = u.Id\n  WHERE u.WebsiteUrl LIKE '%github%'\n  GROUP BY u.Id\n)\n\nSELECT  u.Id, \n        u.WebsiteUrl, \n        u.UpVotes, \n        u.Reputation, \n        u.AboutMe,\n        g.answersCount,\n        g.answersScore \nFROM GitHubUsers g\nJOIN Users u ON u.Id = g.Id\nWHERE answersCount >= 1","CreationDate":"2020-09-25 22:52:24","validated":true}
{"QuerySetId":856896,"Title":"VBA Answer'ers, last 2 weeks","Description":null,"QueryBody":"SELECT  \n  a.owneruserid as [UserID],\n  count(*) as [#VBAanswers]\ninto #VBAanswerers\nfrom posts q join posts a\non q.id = a.parentid\nwhere \n  a.posttypeid = 2\n  and q.tags like '%vba%'\n  and a.owneruserid is not null\n  and a.creationdate >= dateadd(d,-14,(SELECT max(creationdate) from posts))\ngroup by a.owneruserid\n------------------------------\nSELECT \n  userid, userid as [User Link], \n  sum(views) as [#ProfileViews], \n  sum(upvotes) as [#Upvotes], \n  sum(downvotes) as [#DownVotes]\ninto #temp\nfrom users u join #VBAanswerers vbau\non u.id = vbau.UserID\ngroup by userid\norder by sum(views) desc\n---------------------------\nSELECT\n  rank() over ( order by [#ProfileViews] desc) Rank,\n  * \nfrom #temp","CreationDate":"2018-05-29 11:56:09","validated":true}
{"QuerySetId":857048,"Title":"TOP Scala users in London","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id, u.DisplayName, u.websiteurl AS [User Link],\n    COUNT(*) AS UpVotes, u.age\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%london%'\n     AND  TagName = 'python'\n     AND  TagName = 'scala'\n  GROUP BY u.id, TagName, u.age, u.DisplayName, u.websiteurl\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2018-05-29 20:00:50","validated":true}
{"QuerySetId":857723,"Title":"Percentage of users with less than 1000 reputation","Description":"Number of Users Under 1000 Reputation","QueryBody":"SELECT \n(\n((SELECT CAST(COUNT(*) AS decimal) FROM Users WHERE Reputation < 1000) \/\n(SELECT CAST(COUNT(*) AS decimal) FROM Users)) * 100\n) As \"% of users with < 1000 rep.\"","CreationDate":"2018-05-31 16:23:17","validated":true}
{"QuerySetId":857792,"Title":"Find tag info by text.  This search is case insensitive.","Description":"Find tag info by text.  This search is case insensitive.","QueryBody":"DECLARE  @text nvarchar(600) = ##text:string?%##\n\nselect\n  t.tagName,\n  t.count,\n  p.Id as [Wiki Post Id],\n  'https:\/\/stackoverflow.com\/tags\/'+t.tagName+'\/info' as [Link to tag info]\nfrom Tags t\njoin Posts p on p.Id = t.wikiPostId\nAND lower(p.Body) LIKE '%' + lower(@text) + '%'\n-- WikiText: Text to be searched \"You can enter anything\"\norder by t.count desc","CreationDate":"2018-06-11 11:42:15","validated":true}
{"QuerySetId":858107,"Title":"MONTHLY QUESTION AND ANSWER POST COUNT with %Q","Description":"Posts this year grouped by date created UTC, split into: questions, answers, other","QueryBody":"SELECT  \ndatefromparts(year(creationdate),month(creationdate),1) as [date],\n  sum(case when posttypeid = 1 then 1 else 0 end ) as Questions,\n  sum(case when posttypeid = 2 then 1 else 0 end ) as Answers,\n  sum(case when posttypeid not in (1,2) then 1 else 0 end ) as Other,\n  count(*) as [TOTAL],\n  format(cast(sum(case when posttypeid = 1 then 1 else 0 end ) as decimal) \/ count(*),'0.0%') as [Questions%]\nfrom posts\nwhere year(creationdate) = year(getdate())\ngroup by datefromparts(year(creationdate),month(creationdate),1)\norder by datefromparts(year(creationdate),month(creationdate),1)","CreationDate":"2018-06-01 14:05:16","validated":true}
{"QuerySetId":859541,"Title":"Most popular StackOverflow tags in Q1 2015","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as MayRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInMay,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2015-01-01'\nand Posts.CreationDate > '2015-03-31'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2018-08-15 23:05:34","validated":true}
{"QuerySetId":861093,"Title":"Top 5 posts of top 10000 SO users","Description":null,"QueryBody":"SELECT  P.*\nFROM (\n  SELECT TOP(10000) Id\n  FROM Users\n  ORDER BY Reputation DESC\n) AS U\nCROSS APPLY(\n  SELECT TOP(5) *\n  FROM Posts P\n  WHERE P.OwnerUserId = U.Id\n  ORDER BY P.Score DESC\n) AS P","CreationDate":"2018-06-12 9:36:08","validated":true}
{"QuerySetId":861606,"Title":"Count answered questions closed between 2^(n-1) and 2^n minutes","Description":null,"QueryBody":"SELECT  t.slot as 'n',\ncount(*) as '# answered questions closed between 2^(n-1) and 2^n minutes'\nfrom (\n  SELECT floor(log(convert(float, ClosedDate - CreationDate)\n  \/convert(float, convert(datetime,'00:01:00'))+1.0)\/log(2))\n  as slot from Posts\n  where PostTypeID = 1 and AnswerCount > 0\n  and ClosedDate is not null\n) as t\ngroup by t.slot\norder by t.slot asc","CreationDate":"2018-06-12 11:35:19","validated":true}
{"QuerySetId":861631,"Title":"Time to closure CDF of answered questions","Description":null,"QueryBody":"SELECT  max(h.t), h.pc as 'Percent of closed answered questions over time' from (\n  SELECT q.t as t, ntile(100) over (order by q.t) as pc\n  from (\n    SELECT ClosedDate - CreationDate as t\n    from Posts\n    where PostTypeID = 1 and AnswerCount > 0\n    and ClosedDate is not null\n  ) as q\n) as h\nwhere h.t <= '23:59:59'\ngroup by h.pc\norder by h.pc","CreationDate":"2018-06-30 21:55:38","validated":true}
{"QuerySetId":862123,"Title":"All questions with pandas and R tag","Description":null,"QueryBody":"SELECT  distinct\nP.Title, P.ViewCount, P.Score, P.AcceptedAnswerId, P.tags, 'http:\/\/stackoverflow.com\/q\/' + Cast(P.Id as varchar) as URL\nFROM Posts P\n--left join PendingFlags PD on PD.PostId = P.Id\nWHERE \nP.Tags LIKE '%<pandas>%' AND P.Tags LIKE '%<r>%' and\nP.Score > 0 and\nP.AcceptedAnswerId is not null","CreationDate":"2018-06-13 20:15:40","validated":true}
{"QuerySetId":862268,"Title":"Number of questions by people with the Informed badge","Description":null,"QueryBody":"SELECT  p.OwnerUserId as Owner, p.Id as [post link], \n       case when b.id is not null then 1 else 0 end as Informed,\n       case when b.id is null then 1 else 0 end as Uninformed,\n       p.Score, p.ViewCount as Views\nfrom Posts as p\nleft outer join Badges b\non\n  b.userid = p.owneruserid\n  and b.name = 'Informed'\nwhere p.PostTypeId = 1\norder by p.OwnerUserId DESC","CreationDate":"2018-06-14 22:05:42","validated":true}
{"QuerySetId":862485,"Title":"Answers on open questions that have NO Accepted Answer, where this is the only answer, and it has a positive score","Description":"Answers on open questions that have NO Accepted Answer, where this is the only answer, and it has a positive score","QueryBody":"SELECT  \n  q.id as [Post Link],\n  q.owneruserid as [User Link],\n  q.creationdate as [Question Date],\n  q.score as [Q. Score],\n  q.answercount as [# of Answers],\n  a.creationdate as[Answer Date],\n  a.score as [A. Score]\n\nfrom \n  posts a join posts q\n  on a.parentid = q.id\n\nwhere\n  a.owneruserid = ##UserID##\n  and a.posttypeid=2\n  and q.acceptedanswerid is null\n  and q.closeddate is null\n  and q.deletiondate is null\n  and a.score > 0              --Answer has a positive score\n  and q.answercount = 1        --this is the only answer on the question\n  \norder by\n  a.score desc,\n  a.creationdate desc","CreationDate":"2018-06-17 15:15:51","validated":true}
{"QuerySetId":863479,"Title":"Users who favorited a post","Description":null,"QueryBody":"SELECT  U.Id as [User Link]\nfrom Votes V\ninner join Posts P on P.Id = V.PostId\ninner join Users U on U.Id = V.UserId\nwhere P.Id = ##PostId##\n  and V.VoteTypeId = 5","CreationDate":"2018-06-16 18:04:14","validated":true}
{"QuerySetId":864434,"Title":"Kubernetes vs Mesos vs Docker-Swarm vs CloudFoundry","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'Kubernetes', 'Mesos', 'Docker-Swarm', 'CloudFoundry'\n) AND\n  \n  PostTypes.Name = 'Question'\n  \n  \n  -- Exclude the current month\n  AND Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n  \n  AND Posts.CreationDate > '2010-07-01'\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2018-10-18 16:41:11","validated":true}
{"QuerySetId":864760,"Title":"Users with the highest posts to total rep ratio","Description":null,"QueryBody":"SELECT  TOP 100\n   u.Id as [User Link],\n   u.Reputation,\n   count(*) as [Total Number of Posts],\n   count(*)\/u.Reputation as Ratio\nFROM Users u\njoin Posts p on p.OwnerUserId = u.Id\nwhere p.postTypeId in (1,2)\ngroup by u.Id,u.DisplayName,u.Reputation\nORDER BY Ratio DESC","CreationDate":"2018-06-20 8:17:01","validated":true}
{"QuerySetId":865478,"Title":"Top Contributors in India for Angular","Description":null,"QueryBody":"Top Contributors in India for PHP","CreationDate":"2020-07-30 9:17:05","validated":true}
{"QuerySetId":867566,"Title":"500 unanswered questions with score > 2","Description":null,"QueryBody":"SELECT  top 500 Id as [Post Link], Body, Score, ViewCount from Posts \nwhere Score > 2 and ParentId is null and AcceptedAnswerId is null\norder by ViewCount asc","CreationDate":"2018-06-27 4:45:50","validated":true}
{"QuerySetId":868495,"Title":"histogram of answer scores for a given user, date-limited","Description":"Returns the distribution of scores on answers by a user during a given date interval.\nNot quite a histogram because the zeros don't get drawn.","QueryBody":"DECLARE  @EndDate datetime = (select case\n  -- If we request 'today', actually use the date\n  -- of the most recent transfer to this database,\n  -- which may be as much as a week in the past.\n  when lower(##EndDate:string?today##) = 'today' then max(CreationDate)\n  -- Otherwise, specify the most recent date to include.\n  else ##EndDate##\n  end\n  from Posts\n);\n  \nDECLARE @StartDate datetime = dateadd(day, -1*##DaysBack?30##, @EndDate);\n\nSELECT\nanswers.Score as Score,\n--COUNT(answers.Id) AS 'Answers with Score'\nanswers.Id [Post Link]\nFROM Posts questions \nINNER JOIN Posts answers ON answers.ParentId = Questions.Id\nWHERE answers.OwnerUserId = ##userId##\n  AND questions.CommunityOwnedDate IS NULL\n  AND answers.CreationDate between @StartDate and @EndDate","CreationDate":"2020-04-29 5:18:31","validated":true}
{"QuerySetId":869988,"Title":"Questions and Answers per Month and Tag Name","Description":null,"QueryBody":"SELECT  [Month], \n  sum(case when 0 < 1 then 1 else 0 end) All_Questions,\n  sum(case when AnswerCount > 0 then 1 else 0 end) Questions_with_Answers\nFROM (\n  SELECT cast(cast(DATEPART(YYYY, CreationDate) AS varchar) + '-' + cast(datepart(MM, CreationDate) AS varchar) + '-01' AS datetime) [Month],\n    AnswerCount\n  FROM Posts p\n  WHERE (ClosedDate IS NULL) AND\n    (PostTypeId = 1) AND\n    (Tags LIKE '%##tagname##%')\n) AS X\nGROUP BY [Month]\nORDER BY [Month] ASC","CreationDate":"2020-06-20 4:23:25","validated":true}
{"QuerySetId":870354,"Title":"Which questions have the best character-to-score?","Description":"Which questions have the best character-to-score?","QueryBody":"SELECT \n  id,\n  owneruserid,  \n  score as Score, \n  len(body) as LenBody,\n  cast(len(body) as decimal)\/score as [Chars per Point],\n  cast(score as decimal)\/len(body) as [Points per Char]\ninto #temp from posts\nwhere score > 100\n\nSELECT \n  rank() over (order by [Points per Char] desc) as Rank,\n  t.id, --as [Post Link], \n  displayname,\n  owneruserid, -- as [User Link],\n  reputation,\n  format(cast(score as decimal)\/reputation, '0.00%') as [PercentOfUserTotalRep],\n  format([Chars per Point],'0.000') as [Chars\/Point],\n  format([Points per Char],'0') as [Points\/Char]\nfrom #temp t join users u\n  on u.id = t.owneruserid\norder by [Points per Char] desc","CreationDate":"2018-07-04 21:42:21","validated":true}
{"QuerySetId":871939,"Title":"VBA & Excel tag badges","Description":"This one may be better: https:\/\/data.stackexchange.com\/stackoverflow\/query\/869444\/how-would-removing-tagexcel-vba-affect-excel-and-vba-tag-badges","QueryBody":"SELECT  \n  date,\n  userid,\n  userid as [User Link],\n  name,\n  class\n\nfrom badges\nwhere tagbased = 'true'\n  and (name like '%vba%' or name like '%excel%' )\norder by userid, date","CreationDate":"2018-07-09 19:45:39","validated":true}
{"QuerySetId":875403,"Title":"Users with most unique badges","Description":"Most decorated users\n","QueryBody":"SELECT  TOP 500 row_number() over(order by count(*) desc) as rank, \n  UserId AS [User Link], count(DISTINCT Name) AS badges\nFROM Badges WHERE TagBased <> 0\nGROUP BY UserId\nORDER BY Badges DESC","CreationDate":"2020-03-15 20:46:29","validated":true}
{"QuerySetId":877035,"Title":"New Posts for a given tag within a given timeframe","Description":null,"QueryBody":"select\n  count(p.Id) as NewPosts\n  from Posts p, PostTags pt, Tags t\n  where \n    t.TagName=@tag and\n    (p.CreationDate between  @startDate and @endDate) and\n    pt.PostId = p.Id and\n    pt.TagId = t.Id","CreationDate":"2018-07-20 18:19:15","validated":true}
{"QuerySetId":878141,"Title":"A's from Q's tagged excel-vba but missing excel or vba tags","Description":null,"QueryBody":"SELECT \n  q.id as [Post Link],\n  a.id as aID,\n  q.creationdate,\n  q.lastactivitydate,\n  q.score as qScore,\n  a.score as aScore,\n  q.viewcount as Views,\n  q.tags\n  \nfrom\n  posts q join posts a on q.id = a.parentid\n  \nwhere\n  q.tags like '%<excel-vba>%'     --<vba> only = 2484 <vba> only plus 'Excel' in body = 245\n  and \n    ( --upper(q.body) like '%EXCEL%'\n      --or upper(q.body) like '%VBA%'\n      ----or upper(q.title) like '%VBA%'\n      --or upper(q.title) like '%EXCEL%'\n      --or\n      not q.tags like '%<excel>%'\n      or not q.tags like '%vba>%'\n    )\n  and q.closeddate is null\n  and q.posttypeid=1\n  and a.posttypeid=2\n  and a.owneruserid=##UserID##\n \norder by \n  a.score desc, a.creationdate desc","CreationDate":"2018-07-23 17:34:59","validated":true}
{"QuerySetId":880233,"Title":"Questions counted by time to first answer","Description":null,"QueryBody":"SELECT  LOG(DATEDIFF(MINUTE, q.CreationDate, a.CreationDate), 10) AS 'Log Time (m)',\n  LOG(COUNT(*), 10)\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON a.ParentId = q.Id\n  LEFT OUTER JOIN Posts AS a2 -- earlier answer, should not exist\n    ON a.ParentId = a2.ParentId\n   AND a.CreationDate > a2.CreationDate\n  WHERE a2.Id IS NULL\n    AND a.CreationDate >= q.CreationDate -- negative values can happen due to question merges\n    --    AND DATEDIFF(HOUR, q.CreationDate, a.CreationDate) < 24\n    -- AND COUNT(*) > 0\n    AND DATEDIFF(MINUTE, q.CreationDate, a.CreationDate) > 0\n  GROUP BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)\n  ORDER BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)","CreationDate":"2018-07-28 14:41:26","validated":true}
{"QuerySetId":880245,"Title":"Top SO users from Taiwan","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS Link, \n    DisplayName,\n    Reputation,\n    Location\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%taiwan%' OR \n    UPPER(Location) LIKE '%Taiwan%' OR Location LIKE '%\u53f0\u7063%' )\nORDER BY\n    Reputation DESC;","CreationDate":"2020-11-28 18:19:28","validated":true}
{"QuerySetId":880418,"Title":"... my posts that have links to other posts","Description":null,"QueryBody":"SELECT \n  id as [Post Link],\n  creationdate\nfrom\n  posts\nwhere \n  owneruserid=##UserID## \n  and body like '%http%\/\/%'","CreationDate":"2018-07-29 5:14:12","validated":true}
{"QuerySetId":881111,"Title":"How to search linked question with specific tag?","Description":"https:\/\/meta.stackoverflow.com\/questions\/371789\/how-to-search-linked-question-with-specific-tag","QueryBody":"SELECT  concat('site:\/\/q\/', q.id, '|', q.title) as [Linked post]\nfrom postlinks pl\ninner join posts q on q.id = pl.postid\ninner join posttags pt on pt.postid = q.id\ninner join tags t on t.id = pt.tagid\nwhere relatedpostid = ##postid:int?588004##\nand t.tagname = ##tagname:string?php##\nand linktypeid = 1 -- linked (not duplicate, use 3 for that)","CreationDate":"2018-07-31 13:07:55","validated":true}
{"QuerySetId":881743,"Title":"List of questions and tags between dates","Description":null,"QueryBody":"SELECT  * from Posts where CreationDate >= ##MinDate:string## and CreationDate <= ##MaxDate:string## and Tags IS NOT NULL\n-- MinDate: The minimum date chosen for the data\n-- MaxDate: The maximum date chosen for the data","CreationDate":"2018-08-01 14:36:11","validated":true}
{"QuerySetId":881918,"Title":"Distribution of posts from a given year by time of day","Description":null,"QueryBody":"WITH  post AS(SELECT DATEPART(HH, CreationDate) AS Hour, PostTypeId AS Id FROM Posts WHERE DATEPART(YYYY, CreationDate) = ##year:int##)\n    , data AS(SELECT Hour, Id, COUNT(*) AS Num FROM post GROUP BY Id, Hour)\n    , totals AS(SELECT COUNT(*) AS Num, Id FROM post GROUP BY Id)\nSELECT Hour, PostTypes.Name, data.Num * 1. \/ totals.Num AS Activity FROM data JOIN totals ON data.Id = totals.Id JOIN PostTypes ON data.Id = PostTypes.Id ORDER BY PostTypes.Id, Hour;","CreationDate":"2018-08-01 22:58:32","validated":true}
{"QuerySetId":882080,"Title":"Closed questions on which you COMMENTED (and whether they were edited after close)","Description":null,"QueryBody":"SELECT  \n  id as [Post Link],\n  Score,\n  viewcount as [Views],\n  owneruserid as [Asker],\n  creationdate as [Asked],\n  closeddate as [Closed],\n  lasteditdate as [Edited],\n  case when lasteditdate>closeddate then 'yes' else 'no' end as [Edited After Close?]\nfrom posts\nwhere \n  closeddate is not null\n  and id in\n   (SELECT distinct postid from comments where userid=##UserID##) --my comments\norder by creationdate desc\n\n--UserID: Enter a numeric User ID:\"You can find your UserID within the URL for your profile link.\"","CreationDate":"2018-08-02 7:59:54","validated":true}
{"QuerySetId":882085,"Title":"Closed questions which you ANSWERED (and whether they were edited after close)","Description":null,"QueryBody":"SELECT  \n  id as [Post Link],\n  Score,\n  viewcount as [Views],\n  owneruserid as [Asker],\n  creationdate as [Asked],\n  closeddate as [Closed],\n  lasteditdate as [Edited],\n  case when lasteditdate>closeddate then 'yes' else 'no' end as [Edited After Close]\nfrom posts\nwhere \n  closeddate is not null\n  and id in\n   (SELECT distinct parentid from posts where owneruserid=##UserID##)\norder by creationdate desc","CreationDate":"2018-08-02 8:00:16","validated":true}
{"QuerySetId":882192,"Title":"Breakdown of [Post History] records by type","Description":null,"QueryBody":"DECLARE  @totalRecords int = (select count(*) from posthistory)\n\nselect\n  row_number() over (order by count(ph.id) desc) as Rank,\n  pht.id,\n  name as [Post History Type],\n  format(count(ph.id),'#,##0') as [#],\n  case when 1.0*count(ph.id)\/@totalRecords<.005 then '<1%' else \n     format(1.0*count(ph.id)\/@totalRecords,'0%') end as [%],\n  format(min(ph.creationdate),'yyyy-MM-dd') as Earliest,\n  format(max(ph.creationdate),'yyyy-MM-dd') as Latest\nfrom posthistory ph join posthistorytypes pht on ph.posthistorytypeid = pht.id\ngroup by name, pht.id\norder by count(ph.id) desc","CreationDate":"2018-08-02 13:59:34","validated":true}
{"QuerySetId":883191,"Title":"most votes received in a day... skeet or enter a userid","Description":null,"QueryBody":"SELECT  \nformat(v.creationdate ,'yyyy-MM-dd HH:mm') as [Time], count(*) as [Count]\nfrom posts p left outer join votes v on v.postid = p.id \nwhere p.owneruserid=##UserID:int?22656## \n  and p.posttypeid in (1,2)                            --Q or A only\ngroup by format(v.creationdate ,'yyyy-MM-dd HH:mm')\norder by count(*) desc","CreationDate":"2018-08-05 16:15:42","validated":true}
{"QuerySetId":884132,"Title":"Most reputation users from Sri Lanka","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%sri lanka%'\nORDER BY\n    Reputation DESC;","CreationDate":"2018-08-07 22:41:24","validated":true}
{"QuerySetId":887338,"Title":"Comments under 15 characters long","Description":"\"uhhh, how the...?\"","QueryBody":"SELECT  \n  len(text) as Length, \n  id as [Comment Link], \n  userid as [User Link], \n  postid as [Post Link], \n  format(creationdate,'MMM d, yyyy HH:MM') as [Date], \n  Score\nfrom comments \nwhere len(text)<15 \norder by len(text)","CreationDate":"2018-08-16 10:07:37","validated":true}
{"QuerySetId":887355,"Title":"How do you rank compared to the sites' top commenter?","Description":null,"QueryBody":"SELECT  \n  format(rank,'\\#0') as [Commenter Rank],\n  userid as [User Link],\n  format([#Comments],'#,##0') as [# Comments],\n  round(1.0*[#Comments]\/datediff(d,mindate,getdate()),1) as [Comments\/Day]\n  from (  SELECT \n            rank() over (order by count(*) desc) as [Rank],\n            userid, \n            count(*) as [#comments], \n            format(min(creationdate), 'MMM d, yyyy') as mindate\n          from comments \n          where userid is not null \n          group by userid  ) a\nwhere userid in (##UserID##) or rank=1 \norder by rank","CreationDate":"2018-08-16 11:24:42","validated":true}
{"QuerySetId":887468,"Title":"\"very much\" questions","Description":null,"QueryBody":"SELECT \nc.Id as [Comment Link]\nfrom Comments c  \nwhere c.Text like '%very much%'\norder by c.CreationDate asc;","CreationDate":"2019-06-29 16:02:05","validated":true}
{"QuerySetId":888075,"Title":"Post CreationDate is not unique","Description":null,"QueryBody":"SELECT       TOP 20000\n            p.Id                AS [A Id]\n            , twn.Id            AS [B Id]\n            , p.CreationDate\n            , p.PostTypeId      AS [A Type]\n            , twn.PostTypeId    AS [B Type]\n            , p.Tags            AS [A Tags]\n            , twn.Tags          AS [B Tags]\n            , p.Title           AS [A Title]\n            , twn.Title         AS [B Title]\nFROM        posts p\nINNER JOIN  posts twn\nON          (p.CreationDate = twn.CreationDate  AND  p.Id < twn.Id)\nORDER BY    p.CreationDate\n            , p.Id\n            , twn.Id","CreationDate":"2018-08-17 21:40:21","validated":true}
{"QuerySetId":888417,"Title":"Top editors in a given period","Description":null,"QueryBody":"SELECT  TOP (##num?100##)\n  ph.UserId AS [User Link],\n  COUNT(DISTINCT RevisionGUID) AS Count\nFROM\n  PostHistory ph\nINNER JOIN \n  Posts p ON p.id = ph.postid\nWHERE\n  ph.PostHistoryTypeId IN (4, 5, 6) -- edit title\/body\/tags\n  AND (ph.CreationDate >= '##Date1?2018-01-01##') AND (ph.CreationDate <= '##Date2?2018-12-31##')\n  AND ph.userid <> p.owneruserid\n--  AND (p.communityowneddate is null or (ph.creationdate < p.communityowneddate))\nGROUP BY\n  ph.UserId\nORDER BY\n  Count DESC","CreationDate":"2018-08-19 19:58:41","validated":true}
{"QuerySetId":888598,"Title":"Posts about 18.04 closed as off topic before release","Description":null,"QueryBody":"SELECT  q.Id AS [Post Link],\n       q.Score AS Score,\n       q.AnswerCount AS Answers,\n       q.ViewCount AS Views,\n       q.Tags AS Tags\n       \nFROM Posts q\n\nJOIN PostHistory ph ON ph.PostId = q.Id\n\nWHERE q.PostTypeId = 1\n      AND q.Body LIKE '%18.04%'\n      AND q.CreationDate > '2018-01-01'\n      AND q.CreationDate < '2018-05-01'\n      AND q.ClosedDate IS NOT NULL\n      AND ph.Comment LIKE '102'\n      \nORDER BY q.CreationDate ASC","CreationDate":"2018-08-20 11:47:54","validated":true}
{"QuerySetId":889151,"Title":"Search for gold badge holders in Python tag","Description":null,"QueryBody":"SELECT  u.Id AS [User Link], b.Name\n  FROM Users AS u\n  INNER JOIN Badges AS b\n    ON b.UserId = u.Id\n  WHERE b.Class = 1 AND b.Name = 'python'\n  GROUP BY u.Id, b.Name","CreationDate":"2018-08-21 20:27:21","validated":true}
{"QuerySetId":889445,"Title":"Top users based on score from questions","Description":null,"QueryBody":"SELECT  top ##num?100## u.Id as User_Link, sum(p.Score) as Question_score from Users u\ninner join Posts p\non p.OwnerUserId = u.Id\nwhere p.PostTypeId = 1\ngroup by u.Id\norder by Question_score desc","CreationDate":"2018-08-22 16:53:20","validated":true}
{"QuerySetId":889471,"Title":"Top users by bounties","Description":null,"QueryBody":"SELECT  UserId as [User Link], sum(bountyamount)\n\nfrom votes \n\nwhere bountyamount is not null and votetypeid = 8\n\ngroup by UserId\n\norder by sum(bountyamount) desc;","CreationDate":"2018-08-22 17:15:08","validated":true}
{"QuerySetId":889473,"Title":"Top users by bounties","Description":null,"QueryBody":"SELECT  UserId as [User Link], sum(bountyamount)\n\nfrom votes \n\nwhere bountyamount is not null\n\ngroup by UserId\n\norder by sum(bountyamount) desc;","CreationDate":"2018-08-22 17:17:51","validated":true}
{"QuerySetId":889697,"Title":"Tags Count per Day for 2018","Description":null,"QueryBody":"WITH  Tags_CTE\nAS\n(\nSELECT _Date, REPLACE(REPLACE(_Tags,'<',''),'>','') as _Tag, count(*) as _Count\nFROM\n\t(\n\t\tSELECT a.Id as _ID, CAST(a.creationdate as date) as _Date, a.Title as _Title, value as _Tags\n\t\tFROM Posts a\n\t\tCROSS APPLY \n\t\tSTRING_SPLIT(REPLACE(a.Tags,'><',','),',')\n\t\tWHERE a.creationdate >= '2018-01-01'-- AND a.creationdate < '2018-08-01'\n\t) Tags_CTE\nGROUP BY _Date, REPLACE(REPLACE(_Tags,'<',''),'>','')\n)\nSELECT _Tag, SUM(_Count) _AUG_2018_Count\nFROM Tags_CTE\nGROUP BY _Tag\nORDER BY 2 DESC","CreationDate":"2018-08-27 11:35:23","validated":true}
{"QuerySetId":890152,"Title":"Recent comments by certain moderators","Description":null,"QueryBody":"SELECT  TOP ##num?100##\n  u.Id AS [User Link], u.LastAccessDate, c.CreationDate, c.Id AS [Comment Link]\nFROM Users u INNER JOIN Comments c ON c.UserId=u.Id\nORDER BY c.CreationDate DESC","CreationDate":"2018-08-24 13:41:28","validated":true}
{"QuerySetId":890535,"Title":"Number of posts by certain moderators","Description":null,"QueryBody":"SELECT  \n  u.Id AS [User Link], COUNT(p.Id)\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nGROUP BY u.Id\nORDER BY u.Id ASC","CreationDate":"2018-08-25 14:22:37","validated":true}
{"QuerySetId":891096,"Title":"Top reputation users with no answer score","Description":null,"QueryBody":"SELECT  top ##num?100## u.Id as [User Link], \nu.Reputation Reputation\nfrom  Posts p inner join Users u on p.OwnerUserId = u.Id\ngroup by u.Id, u.Reputation\nhaving sum(p.Score*(1- abs(sign(p.PostTypeId - 2)))) < 100000\norder by Reputation desc","CreationDate":"2018-08-31 19:30:20","validated":true}
{"QuerySetId":891746,"Title":"Percentage of questions in a given tag per week","Description":null,"QueryBody":"SELECT \n  number = ROW_NUMBER() OVER (ORDER BY Year(CreationDate), DatePart(week,CreationDate) ASC),\n  (CAST(SUM(CASE WHEN (Tags LIKE '%<##Tagname##>%') THEN 1 ELSE 0 END) as float)*100\/COUNT(Posts.Id)) AS [Perc]\n  FROM Posts WHERE (PostTypeId=1 AND CreationDate >= '##Date1##' AND CreationDate <= '##Date2##')\nGROUP BY Year(CreationDate), DatePart(week,CreationDate)\nORDER BY Year(CreationDate), DatePart(week,CreationDate) ASC","CreationDate":"2018-08-28 21:24:48","validated":true}
{"QuerySetId":891987,"Title":"List of StackOverflow users from Turkey","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position\n        ,DisplayName\n        ,Reputation\n        ,Location\n        ,'http:\/\/stackoverflow.com\/users\/' + CONVERT(VARCHAR(10), Id) AS ProfileUrl\n    FROM Users(NOLOCK)\n   WHERE UPPER(Location) like N'%TURKEY%'\n      OR Location like N'%, TR'\n      OR Location like N'%,TR'\n      OR UPPER(Location) like N'%T\u00dcRKIYE%'\n      OR Location like N'%T\u00dcRK\u0130YE%'\n      OR UPPER(Location) like N'%ANKARA%'\n      OR UPPER(Location) like N'%IZMIR%'\n      OR Location like N'%\u0130ZM\u0130R%'\n      OR UPPER(Location) like N'%ISTANBUL%'\n      OR Location like N'%\u0130STANBUL%'\nORDER BY Reputation DESC","CreationDate":"2018-08-29 12:38:09","validated":true}
{"QuerySetId":892082,"Title":"Most Viewed Questions by Tag","Description":null,"QueryBody":"SELECT  TOP 2000\nId \nAS [Post ID],\nTitle \nAS [Post],\nAnswerCount, \nViewCount\nFROM Posts\nWHERE PostTypeId = 1\nORDER BY ViewCount DESC","CreationDate":"2018-11-23 12:51:06","validated":true}
{"QuerySetId":892104,"Title":"Days with at least one post by MathOverflow moderators","Description":null,"QueryBody":"SELECT \n  CAST(p.CreationDate as Date)\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (2,3,66,121,1409,2000,2926)\nGROUP by CAST(p.CreationDate as Date)\nORDER by CAST(p.CreationDate as Date) DESC","CreationDate":"2018-08-29 15:52:13","validated":true}
{"QuerySetId":893579,"Title":"Percentage of questions with tags probability or statistics per week","Description":null,"QueryBody":"SELECT \n  number = ROW_NUMBER() OVER (ORDER BY Year(CreationDate), DatePart(week,CreationDate) ASC),\n  (CAST(SUM(CASE WHEN ((Tags LIKE '%<probability>%') OR (Tags LIKE '%<statistics>%')) THEN 1 ELSE 0 END) as float)*100\/COUNT(Posts.Id)) AS [Perc]\n  FROM Posts WHERE (PostTypeId=1 AND CreationDate >= '##Date1##' AND CreationDate <= '##Date2##')\nGROUP BY Year(CreationDate), DatePart(week,CreationDate)\nORDER BY Year(CreationDate), DatePart(week,CreationDate) ASC","CreationDate":"2018-09-01 20:31:39","validated":true}
{"QuerySetId":893581,"Title":"Percentage of questions in given two tags per month","Description":null,"QueryBody":"SELECT\n  eomonth(creationdate),\n  (CAST(SUM(CASE WHEN (Tags LIKE '%<##Tag1##>%') THEN 1 ELSE 0 END) as float)*100\/COUNT(Posts.Id)) AS [Perc1],\n  (CAST(SUM(CASE WHEN (Tags LIKE '%<##Tag2##>%') THEN 1 ELSE 0 END) as float)*100\/COUNT(Posts.Id)) AS [Perc2]\n  FROM Posts WHERE (PostTypeId=1)\nGROUP BY eomonth(creationdate)\nORDER BY eomonth(creationdate) ASC","CreationDate":"2018-09-01 23:45:14","validated":true}
{"QuerySetId":894415,"Title":"Average reputation gain per day from old posts","Description":null,"QueryBody":"SELECT  temp.Average, u.Id AS [User Link], u.Reputation\nFROM\n(\nSELECT TOP 100 SUM(CASE p.PostTypeId WHEN 1 THEN 5 WHEN 2 THEN 10 ELSE 0 END) \/ 31.0 AS 'Average',\n  p.OwnerUserId\n  FROM Votes AS v\n  INNER JOIN Posts AS p ON v.PostId = p.Id\n  WHERE v.VoteTypeId = 2 \n    AND p.CreationDate < '2018-01-01' -- random cutoff date\n    AND v.CreationDate BETWEEN '2018-07-01' AND '2018-07-31'\n    AND p.CommunityOwnedDate IS NULL\n    AND p.OwnerUserId IS NOT NULL\n  GROUP BY p.OwnerUserId\n  ORDER BY SUM(CASE p.PostTypeId WHEN 1 THEN 5 WHEN 2 THEN 10 ELSE 0 END) DESC\n) AS temp\nINNER JOIN Users AS u ON temp.OwnerUserId = u.Id","CreationDate":"2018-09-04 21:28:43","validated":true}
{"QuerySetId":894618,"Title":"Off-topic' comments on migrated questions","Description":null,"QueryBody":"SELECT  \n  c.creationdate,\n  h.creationdate AS 'Migration date',\n  c.id as [Comment Link], \n  c.postid as [Post Link]\nFROM posthistory AS h\nINNER JOIN comments AS c\n  ON c.postid = h.postid\n AND h.posthistorytypeid = 36 -- Post Migrated Here\n AND h.creationdate > c.creationdate\nINNER JOIN posts AS p\n  ON c.postid = p.id\n AND p.posttypeid = 1 -- Question\nWHERE c.text like '%off-topic%'\nORDER BY c.creationdate DESC","CreationDate":"2018-10-04 17:14:36","validated":true}
{"QuerySetId":894931,"Title":"Find a comment about the Good Work","Description":null,"QueryBody":"SELECT  \nc.Id AS [Comment Link], \nc.Text AS te\nFROM Comments AS c\nWHERE c.Text LIKE '%BOUNTY%' \nOR c.Text LIKE '%AWARD%' \nOR c.Text LIKE '%REP%'\nORDER BY c.CreationDate;","CreationDate":"2018-10-12 0:35:29","validated":true}
{"QuerySetId":895215,"Title":"My Latest Rank In India","Description":null,"QueryBody":"SELECT  #, Id, DisplayName, Reputation\nFROM(\n    SELECT\n       RANK() OVER(ORDER BY Reputation DESC) AS [#],\n       Id,\n       DisplayName,\n       Reputation,\n       WebsiteUrl,\n       Location\n    FROM\n       Users\n    WHERE\n       Location like N'%India%'\n    ORDER BY\n       reputation DESC\n   )T\n   WHERE Id like '%##UserId##%'","CreationDate":"2018-09-07 11:23:30","validated":true}
{"QuerySetId":895333,"Title":"All posts by a given user","Description":null,"QueryBody":"SELECT  Id as [Post Link], CreationDate, Title, Body from Posts where OwnerUserid=##id##","CreationDate":"2018-09-07 18:39:20","validated":true}
{"QuerySetId":895386,"Title":"List all Comments Between Two Users","Description":"Comments from user#1 that specifically mention user#2's name, and vice versa.","QueryBody":"select \n  creationdate,\n  postid as [Post Link],\n  score,\n  text\nfrom comments\nwhere\n  (userid=##UserID## and lower(text) like @name2) or (userid=##UserID2## and lower(text) like @name1)\norder by creationdate","CreationDate":"2018-09-07 20:13:23","validated":true}
{"QuerySetId":897887,"Title":"Top 100 Posts by score","Description":null,"QueryBody":"SELECT  top 100 p.PostTypeId, p.Id, p.ParentId, p.title, p.Body, p.Tags,\np.OwnerUserId, \nu.DisplayName, u.AboutMe, u.ProfileImageUrl, \nu.Reputation, u.WebsiteUrl, \nu.Location, u.CreationDate, u.LastAccessDate\nfrom Posts p\nleft join Users u on p.OwnerUserId = u.Id\nwhere p.PostTypeId = 1\norder by Score desc","CreationDate":"2018-09-18 2:40:18","validated":true}
{"QuerySetId":898779,"Title":"List all comments for a tag for a user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId:int##\n\nSELECT\n    C.Id AS [Comment Link],\n    *\nFROM Comments C\nWHERE\n--    T.TagName = '##TagName##' AND\n    UserId = @UserId\nORDER BY C.CreationDate DESC","CreationDate":"2018-09-17 5:44:38","validated":true}
{"QuerySetId":899223,"Title":"Users who've added a status tag to a post on Meta","Description":null,"QueryBody":"SELECT  Count(PostId) as [Count], UserId as [User Link] from PostHistory \nwhere UserId != -1 AND PostHistoryTypeId = 6 AND Text LIKE '%status-%' GROUP BY UserID \nORDER BY Count(PostId) DESC;","CreationDate":"2019-07-21 19:52:15","validated":true}
{"QuerySetId":900184,"Title":"Questions from a user with no accepted answer","Description":null,"QueryBody":"SELECT \n  questions.Id AS [Post Link],\n  COUNT(*) AS 'AnswerCount'\nFROM Posts questions\nJOIN Posts answers ON answers.ParentId = questions.Id\nWHERE questions.OwnerUserId = ##UserId##\n  AND questions.PostTypeId = 1 --questions\n  AND questions.AcceptedAnswerId IS NULL\nGROUP BY questions.Id","CreationDate":"2018-09-20 0:47:33","validated":true}
{"QuerySetId":900322,"Title":"Positive scored questions without answers for c++ tags","Description":null,"QueryBody":"SELECT  id as \"Post Link\",* from posts\nwhere answercount=0 and tags like '%c++%' and score > 0 and ClosedDate is null\norder by score desc","CreationDate":"2018-09-20 8:33:41","validated":true}
{"QuerySetId":900480,"Title":"Oldest comments containing a given phrase","Description":null,"QueryBody":"SELECT  TOP(##num?250##)\n  PostId as [Post Link],\n  UserId as [User Link],\n  CreationDate,\n  [Text],\n  Score\nFROM\n    Comments\nWHERE\n    Text LIKE '%##SearchTerm##%'\nORDER BY\n    CreationDate ASC","CreationDate":"2018-09-20 20:14:01","validated":true}
{"QuerySetId":900754,"Title":"Query users posts and answers after 2018","Description":null,"QueryBody":"SELECT  \n    A.Id, A.PostTypeId, A.Title, A.Body, A.ParentId, A.Tags, A.CreationDate\nfrom \n\tPosts A\nleft join Users U ON A.OwnerUserId = U.id\nwhere\n\tU.Reputation > ##num## \n\tand A.PostTypeId = 1 \n\tand A.CreationDate > 2018","CreationDate":"2018-09-21 18:41:17","validated":true}
{"QuerySetId":900948,"Title":"Users with the most Necromancer badges","Description":null,"QueryBody":"SELECT  U.Id as [User Link], count(B.Id) as NumBadges\nfrom Badges B\ninner join Users U on U.Id = B.UserId\nwhere B.Name = 'Necromancer'\ngroup by U.Id, U.DisplayName\nhaving count(B.Id) >= 5\norder by NumBadges desc","CreationDate":"2019-08-18 3:56:36","validated":true}
{"QuerySetId":901357,"Title":"Registered users per month and year","Description":null,"QueryBody":"SELECT  datepart(year, u.CreationDate) as [Year],\n  datepart(month, u.CreationDate) as [Month],\n  count(*) as [Registered Users Count]\nfrom Users u\ngroup by datepart(year, u.CreationDate),\n  datepart(month, u.CreationDate)\norder by [Year], [Month]","CreationDate":"2018-09-23 22:17:32","validated":true}
{"QuerySetId":901785,"Title":"Rollbacks by a certain user","Description":null,"QueryBody":"DECLARE  @UserId AS int = ##UserId:int##\n;\n\nWITH RollbackHistory AS (\n    SELECT\n        PostId,\n        CreationDate\n    FROM PostHistory\n    WHERE UserId = @UserId\n      AND PostHistoryTypeId IN (7, -- Rollback Title\n                                8, -- Rollback Body\n                                9) -- Rollback Tags\n    GROUP BY PostId, CreationDate, RevisionGUID\n)\n\nSELECT\n    h.PostId AS [Post Link],\n    h.CreationDate,\n    p.OwnerUserId AS [User Link],\n    CASE p.PostTypeId WHEN 1 THEN 'Question'\n                      WHEN 2 THEN 'Answer' END AS 'Post type'\nFROM RollbackHistory AS h\nINNER JOIN Posts AS p\n        ON h.PostId = p.Id\nORDER BY h.CreationDate DESC","CreationDate":"2020-06-23 16:07:07","validated":true}
{"QuerySetId":902247,"Title":"Users by rep on closed questions","Description":null,"QueryBody":"SELECT\n TOP 500\n    Users.Id AS [User Link],\n    Count(DISTINCT ClosedQuestions.Id) as [Closed Answers]\nFROM\n Users \n INNER JOIN Posts as ClosedAnswers\n    ON ClosedAnswers.OwnerUserId = Users.Id\n INNER JOIN Posts as ClosedQuestions\n    ON ClosedQuestions.id = ClosedAnswers.ParentId\nWHERE \n AllAnswers.PostTypeId = 2\n AND AllAnswers.CommunityOwnedDate is null\n AND ClosedAnswers.PostTypeId = 2\n AND ClosedAnswers.CommunityOwnedDate is null\n AND ClosedQuestions.PostTypeId = 1\n AND ClosedQuestions.ClosedDate is not null\n\nGROUP BY Users.Id\nORDER BY  [Closed Answers] DESC;\n","CreationDate":"2018-09-26 3:07:18","validated":true}
{"QuerySetId":903296,"Title":"Top Users by Tag and Location","Description":null,"QueryBody":"DECLARE  @Tag AS NVARCHAR(64) = LOWER(RTRIM(LTRIM(##Tag:string?rxjs##)))\nDECLARE @Location AS NVARCHAR(64) = LOWER(RTRIM(LTRIM(##Location:string?ukraine##)))\nDECLARE @Empty AS BIT = ##Empty:int?0##\n\nSELECT TOP 100 \n  u.Id AS [User Link],\n  u.Location,\n  COUNT(a.Id) as xCount,\n  SUM(a.Score) as xSum\nFROM Posts AS a\n  JOIN Posts AS q on a.ParentId = q.Id\n  JOIN Users AS u on a.OwnerUserId = u.Id\nWHERE\n  a.PostTypeId = '2'\n  AND (@Empty = 0 OR u.Location is NULL)\n  AND (@Empty = 0 OR u.Location = '')\n  AND LOWER(u.Location) LIKE '%'+@Location+'%'\n  AND LOWER(q.Tags) LIKE '%'+@Tag+'%'\nGROUP BY\n  u.Id, u.Location\nORDER BY\n  xSum DESC","CreationDate":"2018-10-01 2:46:45","validated":true}
{"QuerySetId":903998,"Title":"Decadist badge: Collected at least 200 rep from post votes in each year of the last 10","Description":"Not exact, we can't count a lot of things affecting the reputation, but it is about roughly this. Check this [meta discussion](https:\/\/meta.stackoverflow.com\/q\/374646\/1783163).","QueryBody":"WITH  VoteRep AS (\n  SELECT 1 AS VoteTypeId, 2 AS PostTypeId, 15 AS Rep\n  UNION\n  SELECT 2 AS VoteTypeId, 1 AS PostTypeId, 5 AS Rep\n  UNION\n  SELECT 2 AS VoteTypeId, 2 AS PostTypeId, 10 AS Rep\n  UNION\n  SELECT 3 AS VoteTypeId, 1 AS PostTypeId, -2 AS Rep\n  UNION\n  SELECT 3 AS VoteTypeId, 2 AS PostTypeId, -2 AS Rep\n),\nRaw AS (\n  SELECT\n    VoteRep.Rep,\n    Posts.OwnerUserId AS UserId,\n    DATEDIFF(yy, Votes.CreationDate, CURRENT_TIMESTAMP) AS Age\n  FROM Posts, Votes, VoteRep\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId = VoteRep.VoteTypeId\n    AND\n    Posts.PostTypeId = VoteRep.PostTypeId\n)\nSELECT SUM(Rep) AS Rep, Age, UserId\nFROM Raw\nGROUP BY UserId, Age\nHAVING SUM(Rep) >= 200","CreationDate":"2018-09-28 21:16:50","validated":true}
{"QuerySetId":904169,"Title":"Bounties: on own questions vs. others' questions","Description":null,"QueryBody":"SELECT \n  SUM(CASE v.UserId WHEN p.OwnerUserId THEN 1 ELSE 0 END) AS 'Own',\n  100 * SUM(CASE v.UserId WHEN p.OwnerUserId THEN 1 ELSE 0 END) \/ COUNT(*) AS '%',\n  SUM(CASE v.UserId WHEN p.OwnerUserId THEN 0 ELSE 1 END) AS 'Other',\n  100 * SUM(CASE v.UserId WHEN p.OwnerUserId THEN 0 ELSE 1 END) \/ COUNT(*) AS '%'\n  FROM Votes AS v\n  INNER JOIN Posts AS p ON v.PostId = p.Id\n  WHERE v.VoteTypeId = 8 -- BountyStart","CreationDate":"2018-09-29 11:46:33","validated":true}
{"QuerySetId":905204,"Title":"How many questions were re-tagged in the last 3 months?","Description":"I hope you realize that every tag-based report or query on any SE site, is based largely on what often-self-proclaimed-clueless-OPs decide to randomly tag their question....   ;)","QueryBody":"SELECT  distinct postid as id\ninto #tagsedited from posthistory\nwhere PostHistoryTypeId=6 \n and creationdate >=dateadd(MM,0-##MonthsBack:int?3##,getdate())\n\nSELECT \n  q.id as qID, \n  e.id as eID\ninto #q from posts q left outer join #tagsedited e on q.id=e.id\nwhere\n  q.creationdate >=dateadd(MM,0-##MonthsBack:int?3##,getdate())\n  and q.posttypeid=1\n  \nSELECT\n  count(1) as [# Questions],\n  sum(case when eID is not null then 1 else 0 end) as [# Re-tagged],\n  format(1.0*sum(case when eID is not null then 1 else 0 end)\/count(1),'0%') as [% Re-tagged]\nfrom #q","CreationDate":"2018-10-01 14:59:06","validated":true}
{"QuerySetId":905245,"Title":"Comments mentioning \" close\"","Description":null,"QueryBody":"SELECT  Id as [Comment Link], CreationDate, Score from Comments\n  where (\n      lower(Text) like '% close%'\n    )\n  order by Comments.CreationDate DESC","CreationDate":"2020-07-17 7:07:16","validated":true}
{"QuerySetId":908575,"Title":"The nth question (ordered by id)","Description":null,"QueryBody":"WITH  ordered as\n(\nselect\n    ROW_NUMBER() OVER (ORDER BY id ASC) AS rownumber,\n    id, CreationDate, Title, Score, OwnerUserId, Tags, ViewCount, AnswerCount, FavoriteCount\nFROM Posts q\nWHERE PostTypeId=1\n)\n\nSELECT rownumber, id AS [Post Link], CreationDate, Title, Score, OwnerUserId AS [User Link], Tags, ViewCount, AnswerCount, FavoriteCount\nFROM  ordered\nWHERE rownumber=##num##","CreationDate":"2018-10-08 13:37:01","validated":true}
{"QuerySetId":908576,"Title":"The nth question (ordered by CreationDate)","Description":null,"QueryBody":"WITH  ordered as\n(\nselect\n    ROW_NUMBER() OVER (ORDER BY CreationDate ASC) AS rownumber,\n    id, CreationDate, Title, Score, OwnerUserId, Tags, ViewCount, AnswerCount, FavoriteCount\nFROM Posts q\nWHERE PostTypeId=1\n)\n\nSELECT rownumber, id AS [Post Link], CreationDate, Title, Score, OwnerUserId AS [User Link], Tags, ViewCount, AnswerCount, FavoriteCount\nFROM  ordered\nWHERE rownumber=##num##","CreationDate":"2018-10-08 13:37:49","validated":true}
{"QuerySetId":908632,"Title":"The n-th question (excluding questions migrated here)","Description":null,"QueryBody":"WITH  base AS\n(\n  SELECT DISTINCT q.id AS qid, q.CreationDate as qdate\n  FROM Posts q JOIN PostHistory ph ON (q.Id=ph.postid)\n  WHERE (q.PostTypeId=1) AND (ph.PostHistoryTypeId<>36)\n),\n\nordered AS\n(\nselect\n  ROW_NUMBER() OVER (ORDER BY qdate ASC) AS rownumber,\n  qid, qdate\nFROM base\n)\n\nSELECT rownumber, qid AS [Post Link], qdate\nFROM  ordered\nWHERE rownumber=##num##","CreationDate":"2018-10-08 16:14:18","validated":true}
{"QuerySetId":908634,"Title":"The nth question (excluding closed questions)","Description":null,"QueryBody":"WITH  ordered as\n(\nselect\n    ROW_NUMBER() OVER (ORDER BY CreationDate ASC) AS rownumber,\n    id, CreationDate, Title, Score, OwnerUserId, Tags, ViewCount, AnswerCount, FavoriteCount\nFROM Posts q\nWHERE (PostTypeId=1) AND (ClosedDate IS NULL)\n)\n\nSELECT rownumber, id AS [Post Link], CreationDate, Title, Score, OwnerUserId AS [User Link], Tags, ViewCount, AnswerCount, FavoriteCount\nFROM  ordered\nWHERE rownumber=##num##","CreationDate":"2018-10-08 16:20:53","validated":true}
{"QuerySetId":909092,"Title":"Closed visible questions with answers from high reputation users","Description":null,"QueryBody":"SELECT  TOP 80 QPost.Id as [Post Link], Users.Id as [User Link],\n               QPost.CreationDate, QPost.ClosedDate,\n               DATEDIFF(minute, QPost.CreationDate, Posts.CreationDate) as MinutesToAnswer\n  from Posts\n  inner join Posts as QPost on QPost.Id = Posts.ParentId\n  inner join PostTypes on PostTypes.Id = Posts.PostTypeId\n  inner join Users on Users.Id = Posts.OwnerUserId\n  where PostTypes.Name = 'Answer'\n    and Posts.CommunityOwnedDate is NULL\n    and QPost.ClosedDate is not NULL\n    and QPost.DeletionDate is NULL\n    and Users.Reputation >= 10000\n  order by Posts.CreationDate desc, MinutesToAnswer desc, Users.Reputation desc","CreationDate":"2018-10-18 20:41:46","validated":true}
{"QuerySetId":909251,"Title":"Search for questions merged by specific moderator","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], ph.*\nFROM Posts p, PostHistory ph\nWHERE ph.PostId = p.Id\n      AND ph.PostHistoryTypeId IN (37,38)   -- has a merge destination\n      AND ph.UserId = ##modId##\nORDER BY ph.CreationDate DESC","CreationDate":"2018-10-10 4:22:43","validated":true}
{"QuerySetId":909727,"Title":"Does presence of a question mark affected whether a question gets answers, and it's score? (Yearly)","Description":null,"QueryBody":"SELECT  \n  year(creationdate) as [Year],\n  case when title like '%?%' then 'hasQMark' else 'noQMark' end as hasQMark,\n  format(sum(1),'#,##0') as [#Questions],\n  round(1.0*sum(score)\/sum(1),2) as Score,\n  round(1.0*sum(answercount)\/sum(1),2) as [Avg#Answers],\n  format(1.0*sum(case when answercount>0 then 1 else 0 end)\/sum(1),'0.0%') as hasAnswers\nfrom\n  posts\nwhere \n  posttypeid=1 \n  and closeddate is null\ngroup by \n  case when title like '%?%' then 'hasQMark' else 'noQMark' end,\n  year(creationdate)\norder by year(creationdate)","CreationDate":"2018-10-11 10:35:59","validated":true}
{"QuerySetId":910439,"Title":"Questions I've answered that are closed","Description":null,"QueryBody":"SELECT  score as [Question Score], id as [Post Link], closeddate from posts \nwhere posttypeid=1 \n  and closeddate is not null \n  and id in (\n    SELECT parentid from posts \n      where parentid is not null and owneruserid = ##MyID##\n  )","CreationDate":"2018-10-13 20:50:19","validated":true}
{"QuerySetId":910828,"Title":"Top C Devs in Greece","Description":null,"QueryBody":"SELECT u.id id, count(a.id) answerCount from posts a join users u on u.id = a.owneruserid join posts q on a.parentid = q.id where q.tags like '%C++%' and u.location like '%Greece%' group by u.id ","CreationDate":"2018-10-15 15:34:03","validated":true}
{"QuerySetId":911065,"Title":"Tags, score, views, creationDate by tag","Description":null,"QueryBody":"SELECT  Tags AS [Tags],\n       Score,\n       ViewCount AS Views,\n       CreationDate AS [Date Asked]\n    FROM Posts\n    WHERE\n    Tags LIKE '%<' + ##TagName:string## + '>%'","CreationDate":"2019-10-26 0:03:21","validated":true}
{"QuerySetId":912527,"Title":"Top user in all tags by score and answer count","Description":null,"QueryBody":"SELECT  TOP 50\n       t.TagName,\n       a.OwnerUserId AS [User Link],\n       SUM(a.Score) \/ 10 AS Score,\n       COUNT(a.Score) AS [Count],\n       ((SUM(a.Score) \/ 10) + COUNT(a.Score)) \/ 2 AS Total\nFROM Posts a, \n     Posts q\n     INNER JOIN PostTags qt ON q.Id = qt.PostId\n     INNER JOIN Tags t ON t.Id = qt.TagId\nWHERE a.ParentId = q.Id\n      AND a.PostTypeId = 2\n      AND a.CommunityOwnedDate IS NULL\n      AND a.OwnerUserId IS NOT NULL\nGROUP BY a.OwnerUserId, t.TagName\nORDER BY ((SUM(a.Score) \/ 10) + COUNT(a.Score)) \/ 2 DESC","CreationDate":"2018-10-18 4:23:09","validated":true}
{"QuerySetId":912558,"Title":"Top users in a tag by score and answer count","Description":null,"QueryBody":"SELECT  TOP 100\n       TagUsers.UserLink AS [User Link],\n       TagUsers.Score AS Score,\n       TagUsers.[Count] AS [Count],\n       (TagUsers.Score + TagUsers.[Count]) \/ 2.0 AS Total\nFROM\n(\n    SELECT a.OwnerUserId AS UserLink,\n           SUM(a.Score) \/ 10.0 AS Score,\n           COUNT(a.Score) AS [Count]\n    FROM Posts a, \n         Posts q\n         INNER JOIN PostTags pt ON q.Id = pt.PostId\n         INNER JOIN Tags t ON t.Id = pt.TagId\n    WHERE a.ParentId = q.Id\n      AND a.PostTypeId = 2\n      AND a.CommunityOwnedDate IS NULL\n      AND t.TagName = '##tagName##'\n    GROUP BY a.OwnerUserId\n) TagUsers\nORDER BY (TagUsers.Score + TagUsers.[Count]) \/ 2 DESC","CreationDate":"2018-11-04 0:25:00","validated":true}
{"QuerySetId":913361,"Title":"Dump Question & Answers For \"Java\" or \"code\" Tags","Description":null,"QueryBody":"SELECT  Title, Body\n from Posts\n  where Tags like '%<java>%' and Body like '%<code>%'","CreationDate":"2018-10-18 19:18:43","validated":true}
{"QuerySetId":913437,"Title":"Answers By a User Edited By Me","Description":null,"QueryBody":"SELECT  \n   p.Id AS [Post Link]\n  ,u.DisplayName\n  ,pht.Name\n  ,ph.CreationDate\n  ,p.Id AS PostId\n  ,p.Title\nFROM PostHistory ph\nJOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id \nJOIN Posts p ON ph.PostId = p.Id \nJOIN Users u ON ph.UserId = u.Id \nWHERE ph.UserId = ##userId##\nAND p.OwnerUserId = ##userId2##\nAND pht.Id IN (\n  4,\n  5,\n  6\n);","CreationDate":"2018-10-18 23:31:22","validated":true}
{"QuerySetId":914598,"Title":"Favourites per view for answered questions (draft)","Description":null,"QueryBody":"SELECT  P.Id as [Post Link], P.ViewCount, V.NumFavs\n  , cast(V.NumFavs as decimal) \/ P.ViewCount as Ratio\nfrom Posts P\ninner join (\n  SELECT V.PostId, count(V.Id) as NumFavs\n  from Votes V\n  inner join Users U on U.Id = V.UserId\n  --inner join Badges B on B.UserId = U.Id\n  where V.VoteTypeId = 5\n  group by PostId\n  ) V on V.PostId = P.Id\ninner join PostTags PT on PT.PostId = P.Id\ninner join Tags T on T.Id = PT.TagId\ninner join (\n  SELECT ParentId\n  from Posts\n  group by ParentId\n  ) A on A.ParentId = P.ID\norder by Ratio desc","CreationDate":"2018-10-22 14:38:34","validated":true}
{"QuerySetId":915293,"Title":"number of question ask per Tuesday","Description":null,"QueryBody":"SELECT  \n  CAST(CreationDate as DATE) as DateField, count(p.Id)\nFROM\n  Posts p\nWHERE \n  PostTypeId = 1 and DATENAME(WEEKDAY, CreationDate) = 'Tuesday'\nGROUP BY \n  CAST(CreationDate as DATE)\nORDER BY\n  CAST(CreationDate as DATE) desc\n;","CreationDate":"2018-10-23 20:26:44","validated":true}
{"QuerySetId":916428,"Title":"Migrations from specified site to this one","Description":null,"QueryBody":"SELECT \n  ph.postid as [Post Link],\n  ph.*\nfrom\n  Posts p\n  inner join PostHistory ph on ph.PostId = p.Id\nwhere\n  ph.PostHistoryTypeId = 36 -- Post Migrated Here\n  and ph.Comment like '%:\/\/##FromSiteURLStart##%' -- e.g. ell, english, stackoverflow\n  and p.posttypeid = 1 -- Question\norder by ph.creationdate desc","CreationDate":"2018-10-25 4:26:01","validated":true}
{"QuerySetId":916503,"Title":"lowest scoring answers for specified user","Description":null,"QueryBody":"SELECT \n  q.viewcount,\n  q.tags,\n  a.creationdate as Answered,\n  a.id as [Post Link],\n  a.score\nfrom posts q left outer join posts a on q.id = a.parentid\nwhere a.owneruserid=##UserID## \norder by score","CreationDate":"2018-10-25 9:04:54","validated":true}
{"QuerySetId":917324,"Title":"What are the most popular first 3 words in question titles?","Description":null,"QueryBody":"SELECT  TOP 100 SUBSTRING(p.Title, 1, CHARINDEX(' ', p.Title, CHARINDEX(' ', p.Title, CHARINDEX(' ', p.Title) + 1) + 1)) AS First3Words, \n    COUNT(DISTINCT p.Id) AS Questions, AVG(p.Score) AS AvgScore\n  FROM dbo.Posts p\n  WHERE p.PostTypeId = 1\n    AND CHARINDEX(' ', p.Title, CHARINDEX(' ', p.Title, CHARINDEX(' ', p.Title) + 1) + 1) > 0\n  GROUP BY SUBSTRING(p.Title, 1, CHARINDEX(' ', p.Title, CHARINDEX(' ', p.Title, CHARINDEX(' ',p.Title) + 1) + 1))\n  ORDER BY COUNT(DISTINCT p.Id) DESC;","CreationDate":"2018-10-27 22:52:59","validated":true}
{"QuerySetId":917475,"Title":"Post by Date and germany user","Description":null,"QueryBody":"SELECT  CAST(comments.CreationDate AS DATE), COUNT(comments.id) FROM comments INNER JOIN users ON comments.UserId = users.id WHERE users.Location LIKE '%, Germany' AND comments.CreationDate <= '2017-12-31' AND comments.CreationDate >= '2017-01-01' GROUP BY CAST(comments.CreationDate AS DATE)","CreationDate":"2018-10-28 20:17:44","validated":true}
{"QuerySetId":918265,"Title":"Sorting users by a vocab filtering in theme about-me section.","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(AboutMe) LIKE LOWER('%##Vocab##%')\nORDER BY\n    Reputation DESC;","CreationDate":"2018-10-30 15:22:25","validated":true}
{"QuerySetId":919933,"Title":"Users by Location and Tag","Description":null,"QueryBody":"SELECT \n\n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n\n  u.Id AS [User Link],\n\n  u.Reputation,\n\n  count(p.id)\n\nFROM\n\n  Users u\n\ninner join posts p on p.ownerUserid = u.id\n\ninner join posttags pt on pt.postid = p.id\n\ninner join tags t on t.id = pt.tagid\n\nWHERE\n\n  LOWER(Location) LIKE LOWER('%##Location##%')\n\n  and t.tagname='##tagname##'\n\ngroup by u.reputation, u.id\n\nORDER BY\n\n  Reputation DESC;","CreationDate":"2018-11-02 23:36:33","validated":true}
{"QuerySetId":920202,"Title":"SELECT  DISTINCT\n  p.Id AS [Post Link], p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE \n  (ph.Text LIKE '%www.math.uga.edu%') OR\n  (ph.Text LIKE '%mysite.verizon.net%') OR\n  (ph.Text LIKE '%www.iecn.u-nancy.fr%')\nORDER BY p.CreationDate DESC","Description":null,"QueryBody":"SELECT  DISTINCT TOP ##num## \n  p.Id AS [Post Link], p.CreationDate,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE \n  (ph.Text LIKE '%www.math.uga.edu%') OR\n  (ph.Text LIKE '%mysite.verizon.net%') OR\n  (ph.Text LIKE '%www.iecn.u-nancy.fr%')\nORDER BY p.CreationDate DESC","CreationDate":"2018-11-03 17:06:18","validated":true}
{"QuerySetId":920677,"Title":"who answers the best vba\/excel questions since date? with\/without code, avg question score","Description":"with\/without code, and question score. Must average 1 answer per day","QueryBody":"SELECT \n  a.owneruserid,\n  a.owneruserid as [User Link],\n  count(a.id) as Total,\n  round(1.0*sum(q.score)\/count(*),1) as qScore,\n  round(1.0*sum(a.score)\/count(*),1) as aScore,  \n  sum(case when q.body like '%<code>%' then 1 else 0 end) as WithCode,\n  sum(case when q.body like '%<code>%' then 0 else 1 end) as NoCode,\n  format(1.0*sum(case when q.body like '%<code>%' then 1 else 0 end)\n  \/ count(a.id),'0%') as [%withCode]\nfrom posts q left outer join posts a on q.id=a.parentid\nwhere q.creationdate >= dateadd(d,0-##DaysBack:int?180##,getdate())\n  and a.posttypeid=2 and q.posttypeid=1\n  and ( q.tags like '%vba>%' or q.tags like '%excel%' )\ngroup by a.owneruserid\nhaving count(a.id)>=##DaysBack##\norder by count(a.id) desc\n","CreationDate":"2018-11-05 19:34:10","validated":true}
{"QuerySetId":924185,"Title":"Questions tagged [origins] on SFF","Description":null,"QueryBody":"SELECT \n  tags,\n  p.id AS [Post Link]\nFROM posts p\nJOIN posttags pt ON p.id = pt.postid\nJOIN tags t ON pt.tagid = t.id\nWHERE t.tagname = 'origins'\nORDER BY\n  CASE WHEN p.tags LIKE '%history-of%' THEN 1 ELSE 0 END,\n  p.creationdate","CreationDate":"2018-11-08 14:34:50","validated":true}
{"QuerySetId":924192,"Title":"Search in answers to a user's questions","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link]\n  FROM Posts AS a\n  WHERE a.OwnerUserId = ##UserId:int##\n    AND a.Body LIKE ##Query:string##","CreationDate":"2019-04-27 11:58:01","validated":true}
{"QuerySetId":925600,"Title":"Questions by Comments and Tag","Description":null,"QueryBody":"DECLARE  @Tag VARCHAR(25) = '##Tag##'\n\nSELECT TOP 50 *\n\nFROM Posts AS Questions\n    INNER JOIN PostTags \n    ON PostTags.PostId = Questions.Id\n    INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\n    INNER JOIN Comments\n    ON Comments.Id = Questions.Id\n    \nWHERE Tags.TagName = @Tag\n\nORDER BY ViewCount DESC","CreationDate":"2018-11-12 3:53:49","validated":true}
{"QuerySetId":927857,"Title":"Find answers from a given user","Description":null,"QueryBody":"SELECT  p.Score, p.CreationDate, p.Id, p.ParentId, pp.Title, pp.CreationDate\nFROM Posts p\nJOIN Posts pp ON p.ParentId = pp.Id\nWHERE p.OwnerUserId = ##UserId##\nAND p.PostTypeId = 2 -- answer","CreationDate":"2018-11-15 8:47:13","validated":true}
{"QuerySetId":928171,"Title":"Ratio of Community Wiki to Non-Community Wiki Questions","Description":null,"QueryBody":"SELECT  \n(SELECT COUNT(ID) FROM POSTS WHERE PostTypeId = 1 AND AnswerCount > 0 AND CommunityOwnedDate IS NULL) AS Non_Community_Count,\n(SELECT COUNT(ID) FROM POSTS WHERE PostTypeId = 1 AND AnswerCount > 0 AND CommunityOwnedDate IS NOT NULL) AS Community_Count,\n(SELECT CONVERT(FLOAT, COUNT(ID)) FROM POSTS WHERE PostTypeId = 1 AND AnswerCount > 0 AND CommunityOwnedDate IS NOT NULL)\n\/\n(SELECT COUNT(ID) FROM POSTS WHERE PostTypeId = 1 AND AnswerCount > 0 AND CommunityOwnedDate IS NULL)\nAS Ratio","CreationDate":"2018-11-16 2:08:27","validated":true}
{"QuerySetId":928427,"Title":"HTTP links (instead of HTTPS) for isfdb.org","Description":null,"QueryBody":"SELECT\n  p.creationdate,\n  t.tagname,\n  p.id AS [Post Link]\nFROM posts p\nJOIN tags t\nON ((p.posttypeid = 4 AND t.excerptpostid = p.id) OR (p.posttypeid = 5 AND t.wikipostid = p.id))\nWHERE p.posttypeid IN (4, 5)\nAND p.body LIKE '%http:\/\/%'\nAND p.body NOT LIKE '%http:\/\/isfdb.org%'\nAND p.body NOT LIKE '%http:\/\/www.isfdb.org%'\nORDER BY p.creationdate DESC","CreationDate":"2019-10-30 16:30:22","validated":true}
{"QuerySetId":929919,"Title":"Questions that contain python code snippets","Description":null,"QueryBody":"SELECT  TOP 100 Body FROM \n  Posts AS Question \n  where    \n  (Question.Title LIKE '%implement%' AND Question.Title LIKE '%how%') AND\n  Question.Tags LIKE '%python%' AND \n  Question.Body LIKE '%<code>%'","CreationDate":"2018-11-30 23:25:36","validated":true}
{"QuerySetId":930117,"Title":"Search Questions Asked A Specific Period of Time","Description":null,"QueryBody":"SELECT TOP 500 Id AS [Post Link], CreationDate FROM Posts WHERE (CreationDate >= @beg AND CreationDate <= @endi AND Score >= @score AND PostTypeId = 1)","CreationDate":"2018-11-20 8:57:50","validated":true}
{"QuerySetId":931088,"Title":"Posts containing truncated quotations using [...]","Description":null,"QueryBody":"SELECT  Id AS [Post Link], Body\n  FROM Posts\n  WHERE OwnerUserId = ##UserId##\n  AND Body LIKE '%\\[\\.\\.\\.\\]%' ESCAPE '\\'\n  ORDER BY Id DESC;","CreationDate":"2018-11-22 7:13:39","validated":true}
{"QuerySetId":935283,"Title":"Top 50 Android Developers from Kochi","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    lower(Location) LIKE '%kochi%' AND\n    (lower(AboutMe) LIKE '%android%')\nORDER BY\n    Reputation DESC;","CreationDate":"2020-11-06 23:07:20","validated":true}
{"QuerySetId":936715,"Title":"Most recent post from given set of users","Description":null,"QueryBody":"WITH  recent_cte as\n(\nselect\n    u.Id AS UserId,\n    MAX(p.Id) AS MaxId\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list##)\nGROUP BY u.Id\n)\n\nSELECT UserId AS [User Link], MaxId AS [Post Link], p.CreationDate, p.Score\nFROM recent_cte inner JOIN Posts p ON MaxId = p.Id\nORDER BY p.CreationDate DESC","CreationDate":"2018-11-29 23:47:48","validated":true}
{"QuerySetId":939849,"Title":"Delay between question and answer in answered questions for Beam \/ Dataflow","Description":null,"QueryBody":"SELECT \n    Questions.Id as 'Question',\n    Questions.CreationDate as 'QuestionDate',\n    COUNT(Answers.Id) as 'AnswerCount',\n    MIN(Answers.CreationDate) as 'QuickestAnswerDate',\n    DATEDIFF(second, Questions.CreationDate, MIN(Answers.CreationDate)) \/ 3600.0 as 'Delay'\n  FROM\n    Posts as Questions\n    INNER JOIN Posts as Answers ON Answers.ParentId = Questions.Id\n  WHERE\n  (Questions.Tags LIKE '%apache-beam%' OR Questions.Tags LIKE '%google-cloud-dataflow%')\n    GROUP BY Questions.Id, Questions.CreationDate","CreationDate":"2018-12-04 2:37:49","validated":true}
{"QuerySetId":940632,"Title":"Top 40 User from Bangladesh in Stackoverflow","Description":null,"QueryBody":"SELECT  TOP 40\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%bangladesh%'\n    OR UPPER(Location) LIKE '%bd'\nORDER BY\n    Reputation DESC;","CreationDate":"2018-12-05 13:56:48","validated":true}
{"QuerySetId":941969,"Title":"Number of questions with at least N answers by day","Description":null,"QueryBody":"SELECT\n  CAST(STR(year(q.CreationDate)) + '-' + STR(month(q.CreationDate)) + '-' + STR(day(q.CreationDate)) AS DATE) AS FullDate,\n  CAST(COUNT(*) AS REAL) AS '#Questions'\nFROM\n  Posts q\nWHERE\n  q.PostTypeId=1\n  and q.AnswerCount >= ##minAnswers##\nGROUP BY STR(year(q.CreationDate)) + '-' + STR(month(q.CreationDate)) + '-' + STR(day(q.CreationDate))\nORDER BY FullDate DESC","CreationDate":"2018-12-07 13:55:15","validated":true}
{"QuerySetId":942028,"Title":"Evolution of the time between the question and the answer up to a given number of days","Description":null,"QueryBody":"DECLARE  @N INT = ##maxNbDays##\n\nSELECT\n  CAST(q.CreationDate AS DATE) AS 'Date',\n  DATEDIFF(DAY,q.CreationDate,a.CreationDate) AS 'Delay to answer'\nFROM\n  Posts q\n  inner join Posts a ON a.ParentId=q.Id\nWHERE\n  q.PostTypeId = 1\n  and a.PostTypeId = 2\n  and DATEDIFF(DAY,q.CreationDate,a.CreationDate)<@N\nORDER BY 'Date' DESC","CreationDate":"2018-12-07 16:43:18","validated":true}
{"QuerySetId":942371,"Title":"How many questions has this user answered since 2019-03-31?","Description":null,"QueryBody":"SELECT \nCOUNT(a.Id) AS \"# answers\",\nSUM(a.ViewCount) AS \"# views\",\nSUM(a.Score) AS \"# score\"\nFROM Posts a\nWHERE a.OwnerUserId = ##UserId:int##\nAND a.CreationDate >= '2019-03-31'","CreationDate":"2020-03-31 19:47:36","validated":true}
{"QuerySetId":942396,"Title":"How many answers by reputable users are accepted, and their accepted percentage?","Description":null,"QueryBody":"SELECT TOP 100\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  (sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*100.0\/count(*)) AS AcceptedPercent\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL) \nGROUP BY u.Id\nORDER BY AcceptedPercent DESC, NumAnswers DESC","CreationDate":"2018-12-08 7:01:26","validated":true}
{"QuerySetId":942475,"Title":"Answers of a deleted user","Description":null,"QueryBody":"SELECT  Id As [Post Link], CreationDate, Score\nFROM Posts\nWHERE (OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))\nAND (PostTypeId=2)","CreationDate":"2018-12-08 12:20:42","validated":true}
{"QuerySetId":942742,"Title":"How many answers are accepted?","Description":null,"QueryBody":"SELECT \n  COUNT(a.Id) AS \"# answers\",\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS \"# accepted answers\",\n  CAST(1.0*COUNT(q.AcceptedAnswerId)\/COUNT(a.Id) AS DECIMAL(3,2)) AS \"fraction accepted\"\nFROM Posts q\n  JOIN Posts a ON a.ParentId = q.Id\n  JOIN Votes v ON v.PostId = a.Id\nWHERE q.PostTypeId = 1 -- question\n  AND v.VoteTypeId = 1  -- accepted by originator","CreationDate":"2018-12-08 23:14:17","validated":true}
{"QuerySetId":943053,"Title":"How many of this user's answers were accepted?","Description":null,"QueryBody":"SELECT \n  COUNT(a.Id) AS \"# answers\",\n  SUM(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS \"# accepted answers\",\n  CAST(1.0*SUM(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)\/COUNT(a.Id) AS DECIMAL(3,2)) AS \"fraction accepted\"\nFROM Posts q\n  JOIN Posts a ON a.ParentId = q.Id\n  JOIN Users u ON a.OwnerUserId = u.Id\nWHERE q.PostTypeId = 1 -- question\n  AND u.Id = ##UserId:int##","CreationDate":"2018-12-09 9:07:45","validated":true}
{"QuerySetId":943466,"Title":"Top 200 users with lowest defeat rate of their answers","Description":null,"QueryBody":"SELECT TOP 200\n  count(*) AS NumAnswers,\n  sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end) AS NumAccepted,\n  CAST(sum(case when q.AcceptedAnswerId = a.Id then 1 else 0 end)*1.0\/count(*) AS DECIMAL(3,2)) AS fraction,\n  u.Id AS UserId,\n  u.DisplayName AS Name\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id, u.DisplayName\nORDER BY NumAccepted DESC, NumAnswers DESC","CreationDate":"2018-12-10 5:51:04","validated":true}
{"QuerySetId":945115,"Title":"Posts which are duplicates of closed questions","Description":null,"QueryBody":"SELECT  TOP ##num##\n  pl.PostId AS [Post Link],\n  pl.RelatedPostId AS [Post Link]\nFROM PostLinks pl JOIN Posts p ON  (pl.RelatedPostId=p.Id)\nWHERE p.ClosedDate IS NOT NULL\nORDER BY pl.PostId DESC","CreationDate":"2018-12-12 21:39:27","validated":true}
{"QuerySetId":946327,"Title":"Search tag wiki history example","Description":null,"QueryBody":"SELECT  *\nFROM PostHistory ph\nWHERE ph.PostId = (SELECT t.WikiPostId FROM Tags t WHERE t.TagName = ##TagName:string##)\nORDER BY CreationDate ASC","CreationDate":"2018-12-14 20:51:39","validated":true}
{"QuerySetId":947115,"Title":"Users who posted most recent comments","Description":null,"QueryBody":"WITH  recent_cte AS\n(\nSELECT\n  userId AS uid,\n  MAX(Id) AS MaxId\nFROM Comments\nGROUP BY UserId\n)\n\nSELECT\n  uid AS [User Link], c.CreationDate, MaxId AS [Comment Link], c.PostId AS [Post Link], c.text\nFROM recent_cte inner JOIN Comments c ON MaxId = c.Id\nORDER BY c.CreationDate DESC","CreationDate":"2018-12-16 13:42:53","validated":true}
{"QuerySetId":947297,"Title":"Images that need a description (have \"enter image description here\")","Description":null,"QueryBody":"SELECT  TOP 1000\n    Id as [Post Link]\nFROM\n    Posts\nWHERE\n    body LIKE '%enter image description here%'","CreationDate":"2018-12-16 22:21:13","validated":true}
{"QuerySetId":949713,"Title":"Top 100 TensorFlow users by location","Description":null,"QueryBody":"SELECT  TOP 100\n    u.Id as [User Link]\n    ,COUNT(*) AS UpVotes \nFROM Tags t\n    INNER JOIN PostTags pt ON pt.TagId = t.id\n    INNER JOIN Posts p ON p.ParentId = pt.PostId\n    INNER JOIN Votes v ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and lower(t.TagName) =  'tensorflow'\n    and (\n      lower(Location) LIKE ('%location%')\n      OR Location LIKE  '%location%'              \n         \n         and LEN(Location) > 1 )\n    \nGROUP BY u.Id\nORDER BY UpVotes DESC","CreationDate":"2018-12-19 5:01:20","validated":true}
{"QuerySetId":951634,"Title":"How many upvotes do I have for each tag this year?","Description":"how long before I get tag badges?\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT\n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\n    AND YEAR(Posts.CreationDate) = @Year  \nGROUP BY TagName \nORDER BY UpVotes DESC","CreationDate":"2018-12-21 20:01:31","validated":true}
{"QuerySetId":952283,"Title":"Top 1000 questions 1-2 years old that were most upvoted questions in the last year","Description":null,"QueryBody":"SELECT  TOP 1000 Posts.Id [Post Link], COUNT(Votes.Id) FROM Posts\nJOIN Votes ON Posts.Id = Votes.PostId\nWHERE Posts.PostTypeId = 1\nAND Votes.VoteTypeId = 2\nAND Votes.CreationDate > DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate < DATEADD(year,-1,GETDATE())\nAND Posts.CreationDate > DATEADD(year,-2,GETDATE())\nGROUP BY Posts.Id, Votes.PostId\nORDER BY COUNT(Votes.Id) DESC","CreationDate":"2018-12-25 17:13:29","validated":true}
{"QuerySetId":952654,"Title":"All keras posts with score greater than 5","Description":null,"QueryBody":"SELECT  Title , Body from Posts WHERE \nTags like '%keras%' and Score > 5;","CreationDate":"2018-12-24 22:00:02","validated":true}
{"QuerySetId":954166,"Title":"List of all edits where edit summary contains given keyword (with revision history)","Description":null,"QueryBody":"SELECT  PostId as [Post Link], Comment, UserId as [User Link], CreationDate,\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions'\nFrom PostHistory\nWhere Comment Like '%##keyword##%'\nOrder By CreationDate","CreationDate":"2018-12-28 16:50:53","validated":true}
{"QuerySetId":954184,"Title":"Highest ranked SO users from Armenia","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%yerevan%'\n    OR LOWER(Location) LIKE '%armenia%')\nORDER BY\n    Reputation DESC;","CreationDate":"2018-12-28 19:06:28","validated":true}
{"QuerySetId":954228,"Title":"Posts with given word in some of the revisions","Description":null,"QueryBody":"SELECT  DISTINCT TOP ##num?100##  \n  p.Id AS [Post Link], p.OwnerUserId AS [User Link], p.LastActivityDate, p.CreationDate, p.Tags,\n  url = 'site:\/\/posts\/' + CAST(p.Id AS varchar)+'\/revisions'\nFROM Posts p JOIN PostHistory ph ON (ph.PostId=p.Id)\nWHERE (ph.Text LIKE '%##word?Chebychev##%')\nORDER BY p.LastActivityDate DESC","CreationDate":"2018-12-28 20:14:33","validated":true}
{"QuerySetId":954468,"Title":"Difference between accepted and highest-rated answer","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(20) = ##Tag##;\n\nselect \n  Answers.id as accId,\n  Answers2.id as bestId,\n  Answers.CreationDate as accDate,\n  Answers2.CreationDate as bestDate,\n  Answers.Score as accScore,\n  Answers2.Score as bestScore,\n  (cast(Answers2.CreationDate as int) - cast(Answers.CreationDate as int)) as Dif,\n  Questions.Tags as tags\n  from Posts as Questions\n  inner join Posts as Answers\n    on Answers.ParentId = Questions.id\n      and Questions.AcceptedAnswerId = Answers.id\n  inner join Posts as Answers2\n    on Answers2.ParentId = Answers.ParentId and Answers2.score > Answers.score\n  where Answers.PostTypeId = 2","CreationDate":"2018-12-30 0:41:04","validated":true}
{"QuerySetId":954586,"Title":"Number of tag-info edits (including deleted users)","Description":null,"QueryBody":"SELECT  postid\n     , count(*)\nfrom\n(\n\nSELECT h.RevisionGUID\n     , h.postid\n     , h.id\n     , h.UserId AS [User Link]\n     , h.UserDisplayName\nFROM PostHistory h \nJOIN Posts p ON h.PostId=p.Id\nWHERE (p.PostTypeId in (4,5)) \nAND (h.PostHistoryTypeId in (2,5))\n) data\ngroup by postid\norder by count(*) desc","CreationDate":"2018-12-29 17:51:27","validated":true}
{"QuerySetId":954670,"Title":"Who's my biggest \"favourite\" fan?","Description":null,"QueryBody":"SELECT\n  p.OwnerUserId,\n  p.OwnerDisplayName,\n  p.Id\nFROM\n  Posts p\nWHERE\n  p.OwnerUserId = ##UserID## AND\n  p.PostTypeId = 1","CreationDate":"2018-12-29 23:52:06","validated":true}
{"QuerySetId":957159,"Title":"Percentage of questions tagged with 'tensorflow' each week between dates","Description":null,"QueryBody":"SELECT \n  number = ROW_NUMBER() OVER (ORDER BY Year(CreationDate), DatePart(week,CreationDate) ASC),\n  (CAST(SUM(CASE WHEN (Tags LIKE '%<tensorflow>%') THEN 1 ELSE 0 END) as float)*100\/COUNT(Posts.Id)) AS [Perc]\n  FROM Posts WHERE (PostTypeId=1 AND CreationDate >= '##Date1##' AND CreationDate <= '##Date2##')\nGROUP BY Year(CreationDate), DatePart(week,CreationDate)\nORDER BY Year(CreationDate), DatePart(week,CreationDate) ASC","CreationDate":"2019-01-01 12:28:14","validated":true}
{"QuerySetId":957160,"Title":"Top 100 TensorFlow users, ordered by upvotes.","Description":null,"QueryBody":"SELECT  Top 100 \nROW_NUMBER() OVER(ORDER BY UpVotes DESC) AS [#],userId as [User Link] , UpVotes,siteUrl from \n(SELECT \n    u.Id userId,\n    (SELECT DisplayName from Users udn where udn.Id = u.Id) UserName\n    ,\n    (SELECT WebsiteUrl from Users udn where udn.Id = u.Id) siteUrl,\n    COUNT(*) AS UpVotes \nFROM Tags t\n    INNER JOIN PostTags pt ON pt.TagId = t.id\n    INNER JOIN Posts p ON p.ParentId = pt.PostId\n    INNER JOIN Votes v ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = 'tensorflow'\n    GROUP BY u.Id\n) as sss\nORDER BY UpVotes DESC","CreationDate":"2019-01-01 12:45:13","validated":true}
{"QuerySetId":959004,"Title":"Top 300 users by Reputation in Iran","Description":null,"QueryBody":"SELECT  TOP 300\n   ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n   Id,\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Iran%'\nORDER BY\n   reputation DESC","CreationDate":"2019-01-19 20:42:41","validated":true}
{"QuerySetId":960343,"Title":"top user asp.net mvc 4 from Pakistan","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('asp.net-mvc-4')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%pakistan%'\nOR lower(us.Location) like '%pak%'\nORDER BY Score DESC;","CreationDate":"2019-01-09 13:12:20","validated":true}
{"QuerySetId":960344,"Title":"Top users asp.net from Pakistan","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('asp.net')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%pakistan%'\nOR lower(us.Location) like '%pak%'\nORDER BY Score DESC;","CreationDate":"2019-01-09 13:07:33","validated":true}
{"QuerySetId":960985,"Title":"Owners of the most badges","Description":null,"QueryBody":"SELECT \n  Users.Id AS [User Link],\n  Users.Id,\n  Users.Reputation,\n  COUNT(*) OVER (PARTITION BY Users.Id) AS Count,\n  Badges.Date\nFROM Badges, Users\nWHERE\n  Badges.Name = ##BadgeName:string##\n  AND\n  Badges.UserId = Users.Id\nORDER BY Count DESC, Users.Reputation, Users.Id, Badges.Date","CreationDate":"2019-01-10 19:18:48","validated":true}
{"QuerySetId":962170,"Title":"Find non-accepted answers by a given user with comments","Description":null,"QueryBody":"SELECT  \n  q.CreationDate AS \"Question Date\", \n  a.Id AS \"Answer\",\n  q.AcceptedAnswerId AS \"Accepted Answer\",\n  q.Id AS \"Question ID\", \n  q.Title AS \"Question Title\"\nFROM Posts a\n  JOIN Posts q ON q.Id = a.ParentId\n  JOIN Comments c ON c.PostId = a.Id\n  JOIN Users u ON u.Id = a.OwnerUserId\nWHERE c.UserId <> ##UserId:int##\n  AND a.OwnerUserId = ##UserId:int##\n  AND q.AcceptedAnswerId <> a.Id\nORDER BY q.CreationDate ASC","CreationDate":"2019-01-13 20:14:06","validated":true}
{"QuerySetId":965561,"Title":"Number of questions that remain undeleted (per day, between dates)","Description":null,"QueryBody":"SELECT \n  CAST(p.CreationDate AS date), COUNT(p.Id)\nFROM Posts p\nWHERE p.PostTypeId=1 AND p.CreationDate >= '##Date1##' AND p.CreationDate <= '##Date2##'\nGROUP BY CAST(p.CreationDate AS date)\nORDER BY CAST(p.CreationDate AS date)","CreationDate":"2019-01-15 12:06:26","validated":true}
{"QuerySetId":967824,"Title":"Commenters from more commented questions - android","Description":null,"QueryBody":"SELECT  c.PostId as PostId, c.UserId as C_UserId FROM \n  Comments as c\n  where c.PostId in (\n    SELECT TOP 500 p2.Id from Posts as p2\n    where\n    p2.Tags like '%android%' order by p2.CommentCount desc)","CreationDate":"2019-01-21 21:18:10","validated":true}
{"QuerySetId":968125,"Title":"Average score of a first question (per day, between dates)","Description":null,"QueryBody":"WITH  firstpostids_cte as (\nSELECT MIN(Id) AS MinId, OwnerUserId\nFROM Posts\nWHERE PostTypeId=1\nGROUP BY OwnerUserId, OwnerDisplayName\n)\n, firstpostsscore_cte as (\nSELECT\np.Id, p.CreationDate AS cre, p.Score AS sco\nFROM firstpostids_cte fp JOIN Posts p ON fp.MinId=p.Id\n)\n\nSELECT \nCAST(cre AS date), AVG(cast(sco as decimal))\nFROM firstpostsscore_cte\nWHERE cre >= '##Date1##' AND cre <= '##Date2##'\nGROUP BY CAST(cre AS date)\nORDER BY CAST(cre AS date)","CreationDate":"2019-01-18 19:40:48","validated":true}
{"QuerySetId":968190,"Title":"Top 100 posts with all comments upvoted","Description":"Inspired by this post: https:\/\/meta.stackexchange.com\/questions\/322566\/say-to-the-new-contributor-that-upvoting-comments-does-almost-nothing-for-comm","QueryBody":"SELECT  TOP 100 Posts.Id AS [Post Link] FROM Posts, Comments WHERE Posts.PostTypeId=1 AND Posts.CommentCount>3 AND Posts.Id = Comments.PostId AND Posts.OwnerUserId != Comments.UserId GROUP BY Posts.Id HAVING MIN(Comments.Score) = 1 AND MAX(Comments.Score) = 1","CreationDate":"2019-01-19 0:35:58","validated":true}
{"QuerySetId":969110,"Title":"Top Nginx programmers in Sri Lanka","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('nginx')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%sri lanka%'\nORDER BY Score DESC;","CreationDate":"2020-11-20 15:48:02","validated":true}
{"QuerySetId":969131,"Title":"Lists all users which answered the same questions as I did and compare the scores","Description":"Lists all users which answered the same questions as I did and compare the scores","QueryBody":"SELECT  oa.OwnerUserId AS [User Link]\n     , COUNT(*) AS [Total Answers]\n     , SUM(IIF(qu.AcceptedAnswerId = ma.Id, 1, 0)) AS [MA Accepted]\n     , SUM(IIF(qu.AcceptedAnswerId = oa.Id, 1, 0)) AS [OA Accepted]\n     , NULLIF(SUM(IIF(qu.AcceptedAnswerId = ma.Id, 1, 0)), 0)\n     \/ NULLIF(SUM(IIF(qu.AcceptedAnswerId = oa.Id, 1, 0)), 0) * 100.0 AS [Ratio]\n     , SUM(ma.Score) AS [MA Total Score]\n     , SUM(oa.Score) AS [OA Total Score]\n     , NULLIF(SUM(ma.Score), 0)\n     \/ NULLIF(SUM(oa.Score), 0) * 100.0 AS [Ratio]\nFROM       Posts AS ma\nINNER JOIN Posts AS qu ON ma.ParentId = qu.Id\nINNER JOIN Posts AS oa ON qu.Id = oa.ParentId AND ma.Id <> oa.Id\nWHERE ma.PostTypeId = 2\nAND ma.OwnerUserId = ##UserId##\nAND oa.OwnerUserId IS NOT NULL\nGROUP BY oa.OwnerUserId","CreationDate":"2019-01-21 19:57:15","validated":true}
{"QuerySetId":969187,"Title":"practice\/stackoverflow rank and percentile","Description":null,"QueryBody":"SELECT  ##userid## as uid, a.rank as rank, b.below, c.total,\nCAST(a.rank as decimal(10,2))\/CAST(c.total as decimal(10,2)) as percentile\n\nfrom \n(SELECT count(*)+1 AS rank \nfrom users \nwhere reputation > \n(SELECT reputation \nfrom users \nwhere id = ##userid##)) a, \n\n(SELECT count(*) AS below \nfrom users \nwhere reputation < \n(SELECT reputation \nfrom users \nwhere id = ##userid##)) b, \n\n(SELECT count(*) AS total \nfrom users\nwhere reputation > 100) c\n;","CreationDate":"2019-02-17 2:36:32","validated":true}
{"QuerySetId":969301,"Title":"Top 5 User from Surat","Description":null,"QueryBody":"SELECT  TOP 5\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%surat%'\n    OR UPPER(Location) LIKE '%SURAT'\nORDER BY\n    Reputation DESC;","CreationDate":"2019-01-22 9:46:21","validated":true}
{"QuerySetId":969930,"Title":"Most recent comments in a given tag","Description":null,"QueryBody":"SELECT  TOP ##num?500##\n  c.userId AS [User Link], c.CreationDate, c.Id AS [Comment Link], c.PostId AS [Post Link], c.text\nFROM (Comments c JOIN Posts a ON c.PostId=a.ID) INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.Tags Like '%<##tagName?gn.general-topology##>%') OR (q.Tags Like '%<##tagName?gn.general-topology##>%')\nORDER BY CreationDate DESC","CreationDate":"2019-01-23 16:49:20","validated":true}
{"QuerySetId":970242,"Title":"Golden tag badge owners by reputation","Description":null,"QueryBody":"SELECT \n  Id AS [User Link],\n  Id,\n  Reputation\nFROM Users\nWHERE Id IN (\n  SELECT UserId\n  FROM Badges\n  WHERE TagBased = 1 AND Class=1\n)\nORDER BY Reputation DESC, Id","CreationDate":"2019-01-24 7:29:20","validated":true}
{"QuerySetId":970822,"Title":"2018 answers by users with no answers before 2018","Description":null,"QueryBody":"SELECT  A.Id AS [Post Link], A.Score, U.DisplayName\n  FROM Posts A JOIN Users U ON A.OwnerUserId = U.Id\n    WHERE year(A.CreationDate) = 2018\n    AND A.PostTypeId = 1 -- Post is question?\n    AND NOT EXISTS (SELECT *\n                    FROM Posts A2\n                    WHERE A2.OwnerUserId = U.Id\n                    AND year(A2.CreationDate) < 2018\n                    AND A2.PostTypeId = 1)\n  ORDER BY A.Score DESC","CreationDate":"2019-01-25 10:13:14","validated":true}
{"QuerySetId":973905,"Title":"Posts which had given tag in the past","Description":null,"QueryBody":"SELECT \nDistinct PostHistory.PostId as [Post Link], \n  url = 'site:\/\/posts\/' + CAST(PostHistory.PostId AS varchar)+'\/revisions',\n  Posts.OwnerUserId as [User Link], Posts.Score, Posts.Tags,\n  Posts.CreationDate, Posts.LastActivityDate\nFrom PostHistory INNER JOIN Posts\n  ON PostHistory.PostId=Posts.Id\nwhere PostHistoryTypeId in (3,6,9) and Text Like '%<##tagName##>%'\nOrder By CreationDate","CreationDate":"2019-01-30 17:59:47","validated":true}
{"QuerySetId":975031,"Title":"Most popular Stack Overflow tags","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInMay,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 1)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2019-02-02 1:14:28","validated":true}
{"QuerySetId":975438,"Title":"Top users from Stuttgart, Germany","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%stuttgart%'\n    OR UPPER(Location) LIKE '%STUTTGART%'\n    or Location like '%Stuttgart%'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;","CreationDate":"2020-07-07 20:58:30","validated":true}
{"QuerySetId":976183,"Title":"All posts or titles with 'texture'","Description":null,"QueryBody":"Time to First Answer for Question Posts (By Tag, Weekly, By Hour)","CreationDate":"2019-02-05 11:05:13","validated":true}
{"QuerySetId":977630,"Title":"Number of Rust questions per month","Description":null,"QueryBody":"SELECT \n  DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0) AS [MONTH]\n  ,COUNT(DISTINCT Posts.Id) AS Count\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName like '%rust%' AND PostTypeId = 1\nGROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\nORDER BY [MONTH] ASC","CreationDate":"2019-02-07 22:51:36","validated":true}
{"QuerySetId":977856,"Title":"#2: User vs. Num Answers","Description":null,"QueryBody":"SELECT  count(p.Id) as \"Num Answers\", u.Id as [User Link], u.DisplayName, u.Reputation\nFROM Posts p\nJOIN Users u ON p.OwnerUserId = u.Id\nWHERE p.PostTypeId = 2 and u.Reputation > 10\nGROUP BY u.Id, u.Reputation, u.DisplayName\nORDER BY u.Reputation DESC","CreationDate":"2019-02-08 5:56:21","validated":true}
{"QuerySetId":978207,"Title":"Up and down vote count for user","Description":null,"QueryBody":"SELECT  VoteTypeId as type,count(*) from Votes v\nwhere VoteTypeId in (2,3) and v.PostId in (\n   SELECT p.id from posts p where p.posttypeid=2 and p.OwnerUserId=##USERID##\n) GROUP BY VoteTypeId","CreationDate":"2019-02-10 22:32:52","validated":true}
{"QuerySetId":980053,"Title":"Likely video-only answers (and possibly spam)","Description":null,"QueryBody":"SELECT  Id as [Post Link], Body\nFROM posts \nWHERE PostTypeId=2\n    AND len(body) <= 400 \n    AND (\n        lower(body) LIKE '%<a href=\"http%youtube.com%'\n        OR LOWER(bodY) LIKE '%<a href=\"http%youtu.be%'\n    )","CreationDate":"2019-06-05 1:20:45","validated":true}
{"QuerySetId":980157,"Title":"Distribution of users' up\/down cast votes: graph","Description":null,"QueryBody":"select\n\nround ( 100*UpVotes \/ ( UpVotes + DownVotes + 0.1 ), 0) AS UpRatio,\ncount(*) AS N\n\nFROM\n\n(SELECT * FROM Users U Where U.UpVotes + U.DownVotes > 100) a\n\n  \nGROUP BY\n round ( 100*UpVotes \/ ( UpVotes + DownVotes + 0.1 ), 0)\n\n \nORDER BY\n  UpRatio ASC","CreationDate":"2019-02-11 1:32:46","validated":true}
{"QuerySetId":980512,"Title":"Average time to Answer a question","Description":null,"QueryBody":"SELECT  p1.id      AS \"AnsID\",\n  p1.ParentId     AS \"QuestionId\",\n  p1.Creationdate AS \"AnsCreationdate\",\n  p2.Creationdate AS \"QuestionCreationdate\",\n  DATEDIFF(minute, p2.Creationdate, p1.Creationdate) AS Time_Difference\nFROM posts p1\nJOIN posts p2\nON p1.ParentId     = p2.Id\nWHERE p1.PostTypeId=2\nAND p1.parentid   IN\n  (SELECT pq.id\n  FROM posts pq ,\n    users u\n  WHERE pq.owneruserid= u.id\n  AND pq.PostTypeId   =1);","CreationDate":"2019-02-11 13:17:54","validated":true}
{"QuerySetId":985575,"Title":"My answers for questions not containing Python tag","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT q.Id as [Post Link], q.Tags FROM Posts q\n  INNER JOIN Posts a ON q.Id = a.ParentId\nWHERE\n  a.OwnerUserId = @UserId AND\n  q.Tags NOT LIKE '%<python>%'","CreationDate":"2019-02-17 18:05:38","validated":true}
{"QuerySetId":988294,"Title":"Find answers by a given user to questions with no accepted answer","Description":null,"QueryBody":"SELECT  \n  q.Id AS \"Question ID\", \n  a.Id AS \"Answer ID\", \n  q.CreationDate AS \"Question Date\", \n  a.CreationDate AS \"Answer Date\", \n  q.ViewCount AS \"Views\",\n  a.Score AS \"Score\",\n  q.ClosedDate AS \"Question Closed Date\",\n  q.OwnerUserId AS \"Questioner ID\",\n  u.DisplayName AS \"Questioner Name\",\n  u.Reputation AS \"Reputation\",\n  q.Title AS \"Question Title\"\nFROM Posts a\n  JOIN Posts q ON a.ParentId = q.Id\n  JOIN Users u ON q.OwnerUserId = u.Id\nWHERE a.OwnerUserId = ##UserId:int##\n  AND q.AcceptedAnswerId IS NULL\nORDER BY a.CreationDate DESC","CreationDate":"2019-02-19 6:02:42","validated":true}
{"QuerySetId":988306,"Title":"Which of this user's answers were accepted (above minimum answer score)?","Description":null,"QueryBody":"SELECT \n  a.Id AS \"Answer ID\",\n  q.OwnerUserId AS \"Questioner ID\",\n  u.DisplayName AS \"Questioner Name\",\n  u.Reputation AS \"Reputation\",\n  q.Id AS \"Question ID\",\n  q.Title AS \"Title\"\nFROM Posts q\n  JOIN Posts a ON q.Id = a.ParentId\n  JOIN Users u ON q.OwnerUserId = u.Id\nWHERE q.PostTypeId = 1 -- question\n  AND a.OwnerUserId = ##UserId:int##\n  AND a.Score >= ##MinAnswerScore:int##\n  AND q.AcceptedAnswerId IS NOT NULL\n  AND a.Id = q.AcceptedAnswerId\nORDER BY q.Id DESC","CreationDate":"2019-02-19 6:08:15","validated":true}
{"QuerySetId":989072,"Title":"Users with lots of comments but no other posts","Description":null,"QueryBody":"SELECT  U.Id--, COUNT(C.Id)\nFROM Users U\n--INNER JOIN Comments C\n--ON C.UserId = U.Id\nWHERE U.Id NOT IN (SELECT OwnerUserId FROM Posts WHERE PostTypeID IN (1, 2))\n--GROUP BY U.Id","CreationDate":"2019-02-20 21:53:19","validated":true}
{"QuerySetId":990313,"Title":"Comments containing string1 but not string2, string3, string4","Description":null,"QueryBody":"SELECT  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE Text LIKE '%##string1?\\ve##%'\n  AND NOT(Text LIKE '%##string2?\\vec##%') \n  AND NOT(Text LIKE '%##string3?\\ver##%') \n  AND NOT(Text LIKE '%##string4?\\vee##%') \nORDER BY CreationDate DESC\n---\\ver catches both \\verb and \\vert","CreationDate":"2019-02-24 0:29:56","validated":true}
{"QuerySetId":991617,"Title":"Most disliked users by square-sum of their downvoted posts","Description":null,"QueryBody":"SELECT  TOP 100\n  OwnerUserId AS [User Link],\n  -SQRT(1.0 * SUM(Score*Score)) AS DownSqrtSum\nFROM Posts\nWHERE\n  Score < 0\n  AND\n  OwnerUserId > 0\nGROUP BY Posts.OwnerUserId\nORDER BY DownSqrtSum, OwnerUserId","CreationDate":"2019-02-26 16:39:37","validated":true}
{"QuerySetId":992744,"Title":"StackOverflow User reputation count histogram","Description":null,"QueryBody":"SELECT  Reputation, count(id) from Users\nwhere Reputation > 24999\nGROUP BY Reputation\nORDER BY Reputation","CreationDate":"2019-08-30 21:06:02","validated":true}
{"QuerySetId":994440,"Title":"All the comments on my posts","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nc.Score,\nc.CreationDate 'Comment Date',\nc.Text\nFROM\n    Comments c, Posts p\nWHERE  p.Id = @UserId\n  \nORDER BY \n    c.CreationDate ASC","CreationDate":"2019-03-01 16:30:30","validated":true}
{"QuerySetId":995148,"Title":"Which users do have a post as favorite","Description":null,"QueryBody":"SELECT\n    v.Id\n  , v.PostId\n  , v.VoteTypeId\n  , v.UserId\n  , v.CreationDate\n  , p.CreationDate\n  , p.Score\n  , p.ViewCount\n  , p.OwnerUserId\n  , p.Title\n  , p.FavoriteCount\n  , u.Reputation\n  , u.CreationDate\n  , u.DisplayName\n  , u.UpVotes\n  , u.DownVotes\nFROM\n    Votes v\nINNER JOIN\n    Posts p\nON\n    p.Id = v.PostId\nINNER JOIN\n    Users u\nON\n    u.Id = v.UserId\nWHERE\n    v.VoteTypeId = 5","CreationDate":"2019-03-11 13:57:36","validated":true}
{"QuerySetId":1000167,"Title":"Top 50 users from Iasi (Romania)","Description":null,"QueryBody":"SELECT \nTOP (50) ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    AboutMe,\n    ProfileImageUrl\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%iasi%'\nORDER BY\n    Reputation DESC;","CreationDate":"2019-03-06 17:33:04","validated":true}
{"QuerySetId":1001432,"Title":"Dupe questions by summed rep of orig + dupe","Description":"Well, using the sum of the log of the reps to ordering gives much better results.","QueryBody":"SELECT  TOP 100\n  Orig.Id AS [Post Link],\n  OrigUser.Id AS [User Link],\n  OrigUser.Reputation AS OrigRep,\n  Dupe.Id AS [Post Link],\n  DupeUser.Id AS [User Link],\n  DupeUser.Reputation AS DupeRep\nFROM\n  Posts Orig,\n  Users OrigUser,\n  Posts Dupe,\n  Users DupeUser,\n  PostLinks\nWHERE\n  PostLinks.RelatedPostId = Orig.Id\n  AND\n  Orig.OwnerUserId = OrigUser.Id\n  AND\n  PostLinks.PostId = Dupe.Id\n  AND\n  Dupe.OwnerUserId = DupeUser.Id\n  AND\n  DupeUser.Id <> OrigUser.Id\n  AND\n  PostLinks.LinkTypeId = 3\nORDER BY LOG(DupeUser.Reputation) + LOG(OrigUser.Reputation) DESC","CreationDate":"2019-03-08 15:24:25","validated":true}
{"QuerySetId":1003115,"Title":"Total number of answers by month","Description":null,"QueryBody":"SELECT  datetimefromparts(datepart(year, creationdate), datepart(month, creationdate), 1, 0, 0, 0, 0) date, count(*) count\nfrom posts\nwhere posttypeid = 2\ngroup by datepart(year, creationdate), datepart(month, creationdate)\norder by datepart(year, creationdate), datepart(month, creationdate)","CreationDate":"2019-03-11 22:30:50","validated":true}
{"QuerySetId":1004945,"Title":"Top Ukrainian StackOverflow Users by Tag.","Description":"StackOverflow users from Ukraine with the highest reputation by certain tag.","QueryBody":"SELECT \n  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#],\n  us.id [User Link],\n  us.DisplayName,\n  tuser.Score\nFROM\n  Users us\nJOIN (\n  SELECT\n    Answers.OwnerUserId AS UserId,\n    SUM(Answers.Score) AS Score\n  FROM\n    Tags\n  JOIN PostTags ON Tags.Id = PostTags.TagId\n  JOIN Posts ON Posts.Id = PostTags.PostId\n  JOIN Posts Answers ON Answers.ParentId = Posts.Id \n  WHERE\n    Tags.TagName = '##TagName##'\n  GROUP BY\n    Answers.OwnerUserId\n  ) tuser ON tuser.UserId = us.Id\nWHERE\n  LOWER(us.Location) LIKE '%ukraine%'\nORDER BY\n  Score DESC;","CreationDate":"2019-03-14 17:47:58","validated":true}
{"QuerySetId":1009509,"Title":"Comments asking the downvoter to explain","Description":null,"QueryBody":"SELECT  Comments.Id      as [Comment Link], \n       Comments.UserId  as [User Link], \n       Posts.ClosedDate as Closed, \n       Comments.CreationDate from Comments \n       inner join Posts on Comments.PostId = Posts.Id\n       where (\n           lower(Text) like '%@downvoter%' or\n           lower(Text) like '%downvoter%' or\n           lower(Text) like '%the downvote%' or\n           lower(Text) like '%downvote%' or\n           lower(Text) like '%down-voter%' or\n           lower(Text) like '%@down-voter%'\n       ) and Comments.CreationDate > '2019-01-01'\norder by Comments.CreationDate DESC","CreationDate":"2019-03-18 13:26:17","validated":true}
{"QuerySetId":1012915,"Title":"Accepted answers with zero score","Description":null,"QueryBody":"DECLARE  @UserId int = ##userid:int?5026##\n\nSELECT answers.id as [Post Link]\n\nFROM \n\n(SELECT *\nFROM Posts\nWHERE PostTypeId = 2) AS answers\n\nJOIN\n\n(SELECT *\nFROM Posts\nWHERE PostTypeId = 1) AS questions\n\nON questions.AcceptedAnswerId = answers.id\n\nWHERE answers.OwnerUserId = @UserId AND answers.score = 0","CreationDate":"2019-03-21 21:15:38","validated":true}
{"QuerySetId":1013289,"Title":"Total count of up- and downvotes in the system from the Users and the Votes table","Description":null,"QueryBody":"SELECT \n  'Users Table' AS Source,\n  SUM(UpVotes) AS Ups,\n  SUM(DownVotes) AS Downs\nFROM Users\n\nUNION\n\nSELECT\n  'Votes Table' AS Source,\n  COUNT(CASE WHEN VoteTypeId=2 THEN 1 ELSE NULL END) Ups,\n  COUNT(CASE WHEN VoteTypeId=3 THEN 1 ELSE NULL END) Downs\nFROM Votes","CreationDate":"2019-03-22 13:29:47","validated":true}
{"QuerySetId":1013482,"Title":"Closed questions with highest (current) OP reputation","Description":null,"QueryBody":"SELECT  TOP 100\n  Posts.Id AS [Post Link],\n  Posts.Id AS PostId,\n  Posts.Score,\n  Users.Id AS [User Link],\n  Users.Id AS UserId,\n  Users.Reputation AS UserReputation\nFROM Posts, Users\nWHERE\n  Posts.OwnerUserId = Users.Id\n  AND\n  Posts.ClosedDate IS NOT NULL\nORDER BY\n  Users.Reputation DESC, Users.Id","CreationDate":"2019-03-22 19:56:34","validated":true}
{"QuerySetId":1014350,"Title":"Table of population as a function of number of votes on the post","Description":"https:\/\/chat.stackexchange.com\/transcript\/message\/49612762#49612762","QueryBody":"SELECT  A.Count as 'Votes', COUNT(*) as 'Count', ROUND(COUNT(*) \/ (CAST(B.Total AS float)) * 100, 5) as '%age'\n\nFROM \n\n(SELECT\n  COUNT(*) AS 'Count'\n  FROM Posts\n    JOIN Votes\n    ON Votes.PostId = Posts.Id\n  WHERE Votes.VoteTypeId = 2 or Votes.VoteTypeId = 3\n  GROUP BY Posts.Id) as A\n\nJOIN\n\n(SELECT\n  COUNT(*) as 'Total'\n  FROM Posts\n  WHERE Posts.PostTypeId = 1 or Posts.PostTypeId = 2 or Posts.PostTypeId = 3) as B\n\nON 1 = 1\n\nGROUP BY A.Count, B.Total\nORDER BY '%age' DESC, 'Votes' DESC;","CreationDate":"2019-03-23 16:54:20","validated":true}
{"QuerySetId":1014591,"Title":"Posts by Programming language per month","Description":null,"QueryBody":"SELECT  MONTH(CreationDate), COUNT(Id) FROM posts WHERE tags like '%<lang>%'\nGROUP BY MONTH(CreationDate)","CreationDate":"2019-03-23 19:07:29","validated":true}
{"QuerySetId":1015264,"Title":"Search questions by any keyword","Description":null,"QueryBody":"SELECT  top ##NumberOfPosts## p.CreationDate, p.Body, p.Id  as [Post Link]\nfrom Posts p\nwhere p.PostTypeId = 1\nand p.Body like '%##keyword1##%'","CreationDate":"2019-03-24 13:24:20","validated":true}
{"QuerySetId":1015754,"Title":"(fout) Percentage of solved questions","Description":null,"QueryBody":"SELECT  DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0) as YEAR, Percentage_Solved_Questions = SUM(CASE WHEN AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) \/ cast(COUNT(id) as float)\nFROM Posts\ngroup by DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\norder BY year","CreationDate":"2019-05-11 15:26:34","validated":true}
{"QuerySetId":1015937,"Title":"Post without image from low rep users","Description":null,"QueryBody":"SELECT  p.id [Post Link], p.body, owneruserid [User Link]\nfrom posts p inner join users u on u.id = p.owneruserid\nwhere\n    p.body not like '%imgur.com%' \n    and p.posttypeid = 1 \n    and u.reputation < 100","CreationDate":"2019-03-26 6:33:13","validated":true}
{"QuerySetId":1016261,"Title":"Top Anaconda Posts on StackExchange","Description":null,"QueryBody":"SELECT  [Year], LastActivityDate, Title, id, [link], ViewCount, Score from\n(\n  SELECT CAST(\n    cast(DATENAME(yyyy, CreationDate) as varchar) as varchar) [Year],\n    LastActivityDate,\n    Title,\n    p.Id, \n    'https:\/\/stackoverflow.com\/questions\/' + CAST(p.Id AS nvarchar) [link],\n    ViewCount,\n    Score\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId \n  where TagName LIKE '%anaconda%' or TagName LIKE '%conda%'\n  group by p.id, p.CreationDate, Title, ViewCount, Score, LastActivityDate\n) as X\norder by [Score] desc","CreationDate":"2019-03-26 21:01:45","validated":true}
{"QuerySetId":1017992,"Title":"Top 2500 SO Users from NC","Description":null,"QueryBody":"SELECT  TOP 2500\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\nLocation LIKE '%NC%' OR LOWER(Location) LIKE '%north carolina%'\n   AND LOWER(Location) NOT LIKE '%france%'\n   AND Location NOT LIKE '%NCR%'\nORDER BY\n   Reputation DESC;","CreationDate":"2019-03-28 17:30:44","validated":true}
{"QuerySetId":1019831,"Title":"Number of questions with a positive score and at least one downvote","Description":null,"QueryBody":"SELECT  COUNT(DISTINCT(p.Id))\n  FROM Posts AS p\n  INNER JOIN Votes AS v ON p.Id = v.PostId AND v.VoteTypeId = 2\n  WHERE p.PostTypeId = 1\n    AND p.Score > 0","CreationDate":"2019-03-30 4:11:10","validated":true}
{"QuerySetId":1020812,"Title":"All my questions with scores and titles","Description":null,"QueryBody":"SELECT  q.Id AS [Post Id], q.Score, q.Title\nFROM Posts q \nwhere q.PostTypeId = 1\nand q.OwnerUserId = ##UserId##","CreationDate":"2019-03-31 22:12:01","validated":true}
{"QuerySetId":1020914,"Title":"Q:A ratio for top users","Description":null,"QueryBody":"SELECT  Id AS [User Link], Reputation,\n  CASE Questions\n    WHEN 0 THEN '1:infinity'\n    ELSE '1:' + CAST(ROUND(Answers \/ CAST(Questions AS FLOAT), 2) AS NVARCHAR)\n  END AS 'Q:A ratio'\n  FROM\n\n(SELECT TOP 50 u.Id, u.Reputation,\nSUM(CASE p.PostTypeId WHEN 1 THEN 1 ELSE 0 END) AS 'Questions',\nSUM(CASE p.PostTypeId WHEN 2 THEN 1 ELSE 0 END) AS 'Answers'\n  FROM Users AS u\n  INNER JOIN Posts AS p ON u.Id = p.OwnerUserId\n  GROUP BY u.Id, u.Reputation\n  ORDER BY u.Reputation DESC) AS temp","CreationDate":"2019-04-01 18:38:29","validated":true}
{"QuerySetId":1021495,"Title":"Number of downvotes and upvotes on posts by a specific user","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], SUM(CASE WHEN v.VoteTypeId=3 THEN 1 ELSE 0 END), SUM(CASE WHEN v.VoteTypeId=2 THEN 1 ELSE 0 END)\nFROM Votes v JOIN Posts p ON v.PostId=p.Id\nWHERE (p.OwnerUserId=##id?210401##) AND (v.VoteTypeId IN (2,3))\nGROUP BY p.Id\nORDER BY p.Id ASC\n--VoteTypeId=3 downvotes\n--VoteTypeId=2 upvotes","CreationDate":"2019-04-02 9:41:47","validated":true}
{"QuerySetId":1021498,"Title":"Scores of questions by a specific user","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link], Title, Score\nFROM Posts\nWHERE OwnerUserId=##id?210401## AND PostTypeId=1\nORDER BY Id ASC","CreationDate":"2019-04-02 9:44:16","validated":true}
{"QuerySetId":1022641,"Title":"Top 10 stackoverflow users from Himachal","Description":null,"QueryBody":"SELECT  TOP 10\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%himachal%'\n    OR UPPER(Location) LIKE '%HIMACHAL%'\n    or Location like '%Himachal%'\n    AND Reputation >= 10000\nORDER BY\n    Reputation DESC;","CreationDate":"2019-04-03 10:41:19","validated":true}
{"QuerySetId":1023411,"Title":"Count of first-posts per week","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    DATEADD(dd,\n      7 * FLOOR(DATEDIFF(day, '1970-01-05', CreationDate) \/ 7),\n      '1970-01-05') AS PostWeek,\n    Id\n  FROM Posts\n  WHERE Id IN (\n    SELECT MIN(Id) FROM Posts GROUP BY OwnerUserId\n  )\n)\nSELECT\n  PostWeek,\n  COUNT(*) AS Count\nFROM Raw\nGROUP BY PostWeek\nORDER BY PostWeek;","CreationDate":"2019-04-04 21:25:55","validated":true}
{"QuerySetId":1024265,"Title":"how many people have earned the bash tag","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY b.Date ASC), b.UserId, b.Date DateReceived, u.DisplayName\nFROM Users u, Badges b\nWHERE b.name='bash' and b.class=3\nand u.Id=b.UserId\nGROUP BY b.Date, b.UserId, u.DisplayName","CreationDate":"2019-07-27 0:33:37","validated":true}
{"QuerySetId":1024504,"Title":"Mean rep gained by answers by count of earlier answers","Description":null,"QueryBody":"WITH  PostNo AS (\n  SELECT\n    Id AS PostId,\n    RANK() OVER (PARTITION BY ParentId ORDER BY Id) AS N\n  FROM Posts\n  WHERE\n    ParentId IS NOT NULL\n),\nVoteRep AS (\n  SELECT 1 AS VoteTypeId, 15 AS Rep\n  UNION\n  SELECT 2, 10\n  UNION\n  SELECT 3, -2\n),\nRaw AS (\n  SELECT\n    PostNo.PostId,\n    SUM(VoteRep.Rep) AS Rep,\n    MIN(PostNo.N) AS N\n  FROM PostNo, Votes, VoteRep\n  WHERE\n    Votes.PostId = PostNo.PostId\n    AND\n    VoteRep.VoteTypeId = Votes.VoteTypeId\n  GROUP BY PostNo.PostId\n)\nSELECT\n  N,\n  COUNT(*) AS Count,\n  AVG(1.0 * Rep) AS Rep\nFROM Raw\nGROUP BY N\nORDER BY N","CreationDate":"2019-04-07 2:21:16","validated":true}
{"QuerySetId":1025720,"Title":"Number of Posts closed as duplicates","Description":null,"QueryBody":"WITH  stub_list AS\n(SELECT p.Id,\n        p.Score,\n        pl.RelatedPostId -- Post Destination (master)\n FROM Posts p\n JOIN PostLinks pl ON pl.PostId = p.Id\n WHERE p.PostTypeId = 1 -- questions.\n       AND EXISTS \n       (\n        SELECT *\n        FROM PostHistory ph\n        WHERE ph.PostId = p.Id\n        AND ph.PostHistoryTypeId IN (10) -- Post Closed (duplicate)     \n      )\n      AND pl.LinkTypeId = 3 -- duplicate.\n)\nSELECT COUNT(s.Id) AS 'closed as duplicate'\nFROM stub_list s\nJOIN Posts p ON p.Id = s.RelatedPostId  -- p is the \"original\" Post of which s is a duplicate","CreationDate":"2019-04-08 23:56:46","validated":true}
{"QuerySetId":1025903,"Title":"Posts by owner's display name","Description":null,"QueryBody":"SELECT  Id AS [Post Link], Score, Body\nFROM Posts\nWHERE PostTypeId <=2 AND OwnerUserId IS NULL AND OwnerDisplayName = '##DisplayName##'\nORDER BY CreationDate ASC","CreationDate":"2019-04-09 11:51:54","validated":true}
{"QuerySetId":1026020,"Title":"All questions after January 1, 2019","Description":null,"QueryBody":"SELECT  TOP 20000 Id, Body, Title, Tags, AnswerCount, Score, ViewCount, CommentCount\nFROM Posts\nWHERE CreationDate >= '2019-01-01'\n      AND PostTypeId = 1","CreationDate":"2019-04-11 8:11:34","validated":true}
{"QuerySetId":1028307,"Title":"Top Warsaw SO Users","Description":"SO users from Warsaw with highest reputation","QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%warsaw%'\n    OR UPPER(Location) LIKE '%WARSAW%'\n    or Location like '%Warsaw%')\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;","CreationDate":"2019-04-12 12:01:40","validated":true}
{"QuerySetId":1029127,"Title":"Most recent 100 HNQ (Hot Network Questions)","Description":null,"QueryBody":"SELECT  top 100 postid as [Post Link], creationdate as [Entering the list on]\n  from posthistory\n  where posthistorytypeid = 52\n  order by creationdate desc","CreationDate":"2019-04-13 20:00:13","validated":true}
{"QuerySetId":1030700,"Title":"Popularity of ML Frameworks Through Time","Description":null,"QueryBody":"SELECT  TagName,  Year(CreationDate), Month(CreationDate) , Count(TagName)\nFROM Posts\n    INNER JOIN PostTags ON PostTags.PostId = Posts.id\n    INNER JOIN Tags ON PostTags.TagId = Tags.id\nwhere Tags.TagName in ('theano', 'tensorflow', 'keras', 'caffe', 'pytorch', 'torch', 'mxnet', 'chainer', 'cntk')\nAND Year(CreationDate) = 2019 AND Month(CreationDate) = 4\nGROUP BY TagName, Year(CreationDate), Month(CreationDate)","CreationDate":"2019-05-09 21:42:57","validated":true}
{"QuerySetId":1031124,"Title":"All questions with exactly two specified tags and no accepted answer","Description":null,"QueryBody":"SELECT  Id AS [Post Link], CreationDate, Score, Tags\n  FROM Posts\n  WHERE Tags IN ('<' + ##tag1:string## + '><' + ##tag2:string## + '>',\n                 '<' + ##tag2:string## + '><' + ##tag1:string## + '>')\n    AND AcceptedAnswerId IS NULL\n  ORDER BY CreationDate DESC","CreationDate":"2019-04-16 16:13:20","validated":true}
{"QuerySetId":1032203,"Title":"Top users by offered bounties in 2017","Description":null,"QueryBody":"SELECT  TOP(100)\n  ROW_NUMBER() OVER (ORDER BY SUM(Votes.BountyAmount) DESC, Users.ID) AS rnSum\n  ,ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC, Users.ID) AS rnCount\n  ,Users.ID\n  ,Users.DisplayName\n  ,Users.Reputation\n  ,SUM(Votes.BountyAmount) AS BountyOfferedTotal\n  ,COUNT(*) AS BountyOfferedCount\nFROM\n  Votes\n  INNER JOIN Posts ON Posts.ID = Votes.PostID\n  INNER JOIN Users ON Users.ID = Posts.OwnerUserID\nWHERE\n  Votes.BountyAmount IS NOT NULL\n  AND Votes.VoteTypeID = 8 -- BountyStart\n  AND Posts.PostTypeID = 1 -- Question\n  AND Votes.CreationDate between '01\/01\/2017' AND '12\/31\/2017'\nGROUP BY\n  Users.ID\n  ,Users.DisplayName\n  ,Users.Reputation\nORDER BY BountyOfferedTotal DESC, Users.ID\n;","CreationDate":"2019-04-18 6:57:17","validated":true}
{"QuerySetId":1032512,"Title":"TOP React users in San Francisco","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%san francisco%'\n     AND  TagName = 'react'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2019-08-27 18:00:30","validated":true}
{"QuerySetId":1032536,"Title":"Tumbleweeds and Scholars over the years","Description":null,"QueryBody":"SELECT  year(Date), \n--       sum(iif(Name = 'Nice Answer', 1, 0)) 'Nice Answers',\n       sum(iif(Name = 'Scholar', 1, 0)) Scholars,\n--       sum(iif(Name = 'Teacher', 1, 0)) Teacher,\n       sum(iif(Name = 'Tumbleweed', 1, 0)) Tumbleweeds,\n       sum(iif(Name = 'Lifejacket', 1, 0)) LJ,\n       sum(iif(Name = 'Lifeboat', 1, 0)) LB\nfrom Badges\nwhere year(Date) < year(getdate())\ngroup by year(Date)","CreationDate":"2019-06-19 13:55:34","validated":true}
{"QuerySetId":1033605,"Title":"Yet another questions per month stat","Description":null,"QueryBody":"SELECT \n  DATEFROMPARTS(\n    DATEPART(yyyy, CreationDate),\n    DATEPART(mm, CreationDate),\n    1) AS Month,\n  COUNT(*) AS Count\nFROM Posts\nWHERE PostTypeId = 1\nGROUP BY DATEFROMPARTS(\n  DATEPART(yyyy, CreationDate),\n  DATEPART(mm, CreationDate),\n  1)\nORDER BY Month;","CreationDate":"2019-04-20 20:14:05","validated":true}
{"QuerySetId":1036156,"Title":"Multiple self answers from asker, sorted by the number of times self-answered","Description":"Multiple self answers from asker, sorted by the number of times self-answered, and filtered to exclude questions prior to Jan 1, 2010. (To avoid questions from 2008 with historical locks.)\n","QueryBody":"SELECT  TOP 1000 question.Id as [Post Link], \n       question.CreationDate,\n       count(selfAnswer.Id) as [Count]\nfrom posts as question\n    inner join posts as selfAnswer\n        on  selfAnswer.owneruserid = question.owneruserid\n        and selfAnswer.parentid = question.id\n        inner join Users as users on users.Id = question.owneruserid\nwhere question.posttypeid = 1\nand selfAnswer.posttypeid = 2\n--and question.CommunityOwnedDate is null\ngroup by question.Id, \n         question.CreationDate\nhaving count(distinct selfAnswer.id) > 0\norder by \n        [Count] DESC,\n        question.CreationDate DESC","CreationDate":"2019-04-22 21:55:38","validated":true}
{"QuerySetId":1037035,"Title":"Count of questions, comments, answers with tag over time","Description":null,"QueryBody":"DECLARE  @tag0 nvarchar(25) = ##tag0:string?bigcommerce##\nDECLARE @tag1 nvarchar(25) = ##tag1:string?shopify##\nDECLARE @tag2 nvarchar(25) = ##tag2:string?magneto2##\n\nSELECT \n  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109') AS [WEEK]\n  , Tags.TagName, COUNT(DISTINCT Posts.Id) as Posts, SUM(Posts.AnswerCount) as Answers, SUM(Posts.CommentCount) as Comments\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName in (@tag0,@tag1,@tag2) AND PostTypeId = 1 AND CreationDate > '2013-01-06'\nGROUP BY  DATEADD(week, DATEDIFF(day, '20000109', CreationDate) \/ 7, '20000109'), Tags.TagName\nORDER BY [WEEK] DESC","CreationDate":"2019-04-24 7:39:03","validated":true}
{"QuerySetId":1037485,"Title":"question for a dask tag","Description":null,"QueryBody":"SELECT  *, Tags,CreationDate,LastActivityDate,AnswerCount,PostTypeId  \nfrom Posts\nwhere Tags like '%dask%'\norder by ParentId,Id","CreationDate":"2019-04-29 0:05:10","validated":true}
{"QuerySetId":1037600,"Title":"Age-normalised score per answer with minimum answer count (ranking; non-CW)","Description":null,"QueryBody":"SELECT  top ##RankedUsers?1000##\n  rank() over (order by R.Ratio desc) as Rank, R.Id as [User Link], R.Ratio\nfrom (\nSELECT U.Id, 100 * sum(cast(A.Score as real) \/ datediff(day, A.CreationDate, getdate())) \/ count(A.Score) as Ratio\n  from Posts A\n  inner join Users U on U.Id = A.OwnerUserId\n  where A.PostTypeId = 2\n    and A.CommunityOwnedDate is null\n  group by U.Id\n  having count(A.Id) >= ##MinimumAnswerCount?400##\n  ) R\norder by R.Ratio desc","CreationDate":"2019-04-26 5:38:41","validated":true}
{"QuerySetId":1038677,"Title":"Top 100 'tensorflow-probability' users, ordered by upvotes.","Description":null,"QueryBody":"SELECT  Top 100 \nROW_NUMBER() OVER(ORDER BY UpVotes DESC) AS [#],userId as [User Link] , UpVotes,siteUrl from \n(SELECT \n    u.Id userId,\n    (SELECT DisplayName from Users udn with (nolock) where udn.Id = u.Id) UserName\n    ,\n    (SELECT WebsiteUrl from Users udn with (nolock) where udn.Id = u.Id) siteUrl,\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = 'tensorflow-probability'\n    GROUP BY u.Id\n) as sss\nORDER BY UpVotes DESC","CreationDate":"2020-07-18 1:51:30","validated":true}
{"QuerySetId":1038904,"Title":"Users with a specified reputation on two sites","Description":null,"QueryBody":"DECLARE  @sql NVARCHAR(MAX) =\n'SELECT ''https:\/\/' + ##site1:string## + '.stackexchange.com\/u\/''\n  + CAST(u1.Id AS NVARCHAR) + ''|'' + u1.DisplayName AS ''User'',\n  u1.Reputation AS ' + ##site1:string## + ',\n  u2.Reputation AS ' + ##site2:string## + '\n  FROM [StackExchange.' + ##site1:string## + '].dbo.Users AS u1\n  INNER JOIN [StackExchange.' + ##site2:string## + '].dbo.Users AS u2\n    ON u1.AccountId = u2.AccountId\n    WHERE u1.Reputation >= ' + CAST(##reputation:int?3000## AS NVARCHAR) + '\n      AND u2.Reputation >= ' + CAST(##reputation:int?3000## AS NVARCHAR) + '\n  ORDER BY u1.Reputation + u2.Reputation DESC';\nEXEC(@sql);","CreationDate":"2019-04-27 20:09:11","validated":true}
{"QuerySetId":1040565,"Title":"Questions with highest amount of bounties","Description":null,"QueryBody":"SELECT  Top(##num?500##)\n  SUM(v.BountyAmount), p.Id AS [Post Link], p.ViewCount\nFROM Posts p JOIN Votes v ON v.PostId=p.Id\nWHERE v.VotetypeId=8\nGROUP BY p.Id, p.ViewCount\nORDER BY SUM(v.BountyAmount) DESC","CreationDate":"2019-05-01 15:43:42","validated":true}
{"QuerySetId":1040580,"Title":"Highest viewcounts for bountied questions","Description":null,"QueryBody":"SELECT \n  SUM(v.BountyAmount) AS [Total Bounties], COUNT(v.BountyAmount) AS [Bounties Count], p.Id AS [Post Link], p.ViewCount\nFROM Posts p JOIN Votes v ON v.PostId=p.Id\nWHERE v.VotetypeId=8\nGROUP BY p.Id, p.ViewCount\nORDER BY p.ViewCount DESC","CreationDate":"2019-05-01 16:44:11","validated":true}
{"QuerySetId":1040585,"Title":"Users with most hot network questions","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  COUNT (DISTINCT p.Id) AS Count, \n  p.OwnerUserId as [User Link], p.OwnerDisplayName\nFROM Posts p JOIN PostHistory ph ON p.Id=ph.PostId\nWHERE (ph.PostHistoryTypeId=52)\nGROUP by p.OwnerUserId, p.OwnerDisplayName\nORDER BY COUNT (DISTINCT p.Id) DESC","CreationDate":"2020-04-17 16:33:11","validated":true}
{"QuerySetId":1040614,"Title":"Top X users with most answers on hot network questions","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  COUNT (DISTINCT a.Id) AS Count, \n  a.OwnerUserId as [User Link], a.OwnerDisplayName\nFROM (Posts q JOIN PostHistory ph ON q.Id=ph.PostId) JOIN Posts a ON q.Id=a.ParentId\nWHERE (ph.PostHistoryTypeId=52)\nGROUP by a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT (DISTINCT a.Id) DESC","CreationDate":"2020-04-17 16:33:24","validated":true}
{"QuerySetId":1040618,"Title":"Answers by a specific user on hot network questions","Description":null,"QueryBody":"SELECT  \n  a.Id AS [Post Link], a.OwnerUserId as [User Link]\nFROM (Posts q JOIN PostHistory ph ON q.Id=ph.PostId) JOIN Posts a ON q.AcceptedAnswerId=a.Id\nWHERE (ph.PostHistoryTypeId=52) AND (a.OwnerUserId=##userid##)","CreationDate":"2020-04-24 15:24:09","validated":true}
{"QuerySetId":1041065,"Title":"Get all \"Unclear What You're Asking\" with <5 answers","Description":null,"QueryBody":"SELECT  \n  p.Id AS [Post ID],\n  CONCAT('stackoverflow.com\/q\/', p.Id) AS [SO Link],\n  p.Title as [Question Title]\nFROM Posts p\n  JOIN PostHistory ph ON ph.PostId = p.Id\nWHERE \n  p.PostTypeId = 1 --1 = question, 2 = answer\n  AND ph.PostHistoryTypeId = 10 --Closed\n  AND ph.Comment = 103 --\"Unclear what you're asking\" close reason\n  AND p.AnswerCount <= 5 --Less than 5 answers","CreationDate":"2019-05-02 19:31:06","validated":true}
{"QuerySetId":1041428,"Title":"Votes before and after entry on the HNQ list","Description":null,"QueryBody":"SELECT  iif(v.CreationDate < ph.CreationDate, 'pre', 'post') epoch,\n       vt.Name, \n       --PostTypeId,\n       count(*) votes\nfrom PostHistory ph\n     join Posts p on ph.PostId = isnull(p.ParentId, p.Id)\n     join Votes v on v.PostId = p.Id\n     join VoteTypes vt on VoteTypeId = vt.Id\nwhere PostHistoryTypeId in (52) -- HNQ add\ngroup by iif(v.CreationDate < ph.CreationDate, 'pre', 'post'), \n         vt.Name, \n         --PostTypeId,\n         vt.Id\norder by vt.Id, epoch desc","CreationDate":"2019-05-05 1:56:19","validated":true}
{"QuerySetId":1042843,"Title":"Users of one-time badges awarded multiple times","Description":null,"QueryBody":"SELECT  name as [Badge Name], badge_count as [Badge Count], userid as [User Link]\nfrom (\n  SELECT name, userid, count(*) badge_count\n  from badges\n  where tagbased = 0\n  and name not in ('Yearling','Caucus','Constituent','Reviewer','Custodian','Reversal','Steward','Not a Robot','Census','Favorite Question','Stellar Question','Nice Question','Good Question','Great Question','Announcer','Populist','Revival','Necromancer','Popular Question','Notable Question','Famous Question','Guru','Booster','Publicist','Enlightened','Nice Answer','Good Answer','Great Answer')\n  and name not in ('Autobiographer', 'Curious', 'Inquisitive', 'Socratic', 'Supporter', 'Benefactor')\n  group by name, userid\n) b inner join users u\non b.userid = u.id\nwhere b.badge_count > 1\norder by b.badge_count desc","CreationDate":"2019-05-08 18:26:04","validated":true}
{"QuerySetId":1042980,"Title":"5 YEAR TREND FOR NON-EXPERTS","Description":null,"QueryBody":"SELECT  * from posts where owneruserid in \n(SELECT id from users where creationdate >= '20130101'and creationdate < '20130201'\nand lastaccessdate >= '20190101'\nand reputation >= 551\n)\nand posttypeid = 1\nand creationdate >= '20180101'and creationdate < '20190101'\norder by owneruserid, creationdate","CreationDate":"2019-05-28 20:41:24","validated":true}
{"QuerySetId":1042996,"Title":"User post activity history by year of registration","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    DATEFROMPARTS(\n      DATEPART(yyyy, Posts.CreationDate),\n      DATEPART(m, Posts.CreationDate),\n      1) AS PostMonth,\n    DATEPART(yyyy, Users.CreationDate) AS UserYear,\n    COUNT(*) AS Count\n  FROM Posts, Users\n  WHERE\n    Posts.OwnerUserId = Users.Id\n    AND\n    Users.Id > 0\n  GROUP BY\n    DATEFROMPARTS(\n      DATEPART(yyyy, Posts.CreationDate),\n      DATEPART(m, Posts.CreationDate),\n      1),\n    DATEPART(yyyy, Users.CreationDate)\n)\nSELECT PostMonth, CAST(UserYear AS VARCHAR(MAX)), Count\nFROM Raw\nORDER BY PostMonth, UserYear","CreationDate":"2019-05-08 5:32:36","validated":true}
{"QuerySetId":1045791,"Title":"Questions which had given tag (included the editor who added it)","Description":null,"QueryBody":"WITH  firstrev_cte AS \n(\nSELECT\np.Id AS pid, MIN(ph.Id) as MinId\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE\n  ph.PostHistoryTypeId in (3,6,9)\n  AND ph.Text Like '%<##tagName##>%'\nGROUP BY p.Id\n)\n\nSELECT pid AS [Post Link],\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions',\n  UserId AS [User Link], UserDisplayName\nFROM PostHistory INNER JOIN firstrev_cte ON PostHistory.Id=MinId","CreationDate":"2019-05-10 15:40:38","validated":true}
{"QuerySetId":1047919,"Title":"Questions filtered by tag, sorted by # of answers","Description":null,"QueryBody":"SELECT  TOP 100 q.Id AS [Post Link],\n  q.CreationDate, q.AnswerCount, q.Score\n  FROM Posts AS q\n  INNER JOIN PostTags AS pt ON q.Id = pt.PostId\n  INNER JOIN Tags AS t ON t.Id = pt.TagId\n  WHERE t.TagName = ##tagName:string##\n  ORDER BY AnswerCount DESC","CreationDate":"2019-05-12 17:13:04","validated":true}
{"QuerySetId":1048579,"Title":"Most viewed posts with tags became synonyms","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT TagName\n  FROM Tags\n  \n  INTERSECT\n  \n  SELECT SourceTagName AS TagName\n  FROM TagSynonyms\n  WHERE ApprovalDate IS NOT NULL\n)\nSELECT TOP 20000\n  DENSE_RANK() OVER (ORDER BY Posts.ViewCount DESC) AS N,\n  Posts.Id AS [Post Link],\n  Posts.ViewCount,\n  'site:\/\/tags\/' + TagSynonyms.SourceTagName + '|' + TagSynonyms.SourceTagName\n    AS SourceTag,\n  'site:\/\/tags\/' + TagSynonyms.TargetTagName + '|' + TagSynonyms.TargetTagName\n    AS TargetTag\nFROM Raw, Tags, PostTags, TagSynonyms, Posts\nWHERE\n  Raw.TagName = Tags.TagName\n  AND\n  Tags.Id = PostTags.TagId\n  AND\n  PostTags.PostId = Posts.Id\n  AND\n  Raw.TagName = TagSynonyms.SourceTagName\nORDER BY\n  Posts.ViewCount DESC, Posts.Id","CreationDate":"2019-05-12 20:51:42","validated":true}
{"QuerySetId":1050819,"Title":"Produces a histogram of the number of users involved in closing questions as a duplicate (ruling out OP-accepted duplicates and gold-badge closures) over the past three years","Description":"Produces a histogram of the number of users involved in closing questions as a duplicate (ruling out OP-accepted duplicates and gold-badge closures) over the past three years","QueryBody":"SELECT \nNumberOfUsersClosing,\nCOUNT(*)\nFROM \n(\nSELECT\n  LEN(Text)-LEN(REPLACE(Text,'\"Id\"','\"d\"')) AS NumberOfUsersClosing\nFROM PostHistory\nWHERE Comment = '101'\n  AND CreationDate > DATEADD(year,-3,GETDATE())\n  AND Text NOT LIKE '%GoldTagBadge%'\n  AND Text NOT LIKE '%DuplicateApprovedByAsker%'\n) AS counts\nGROUP BY NumberOfUsersClosing\nORDER BY NumberOfUsersClosing","CreationDate":"2019-05-14 2:53:54","validated":true}
{"QuerySetId":1051624,"Title":"Top 10 users with most rep, that never accepted anything","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    OwnerUserId AS UserId,\n    COUNT(*) AS Questions\n  FROM Posts\n  WHERE\n    PostTypeId = 1\n    AND\n    OwnerUserId > 0\n  GROUP BY OwnerUserId\n  HAVING COUNT(AcceptedAnswerId)=0\n)\nSELECT TOP 100\n  Users.Id,\n  Users.Id AS [User Link],\n  Users.Reputation,\n  Raw.Questions\nFROM Raw, Users\nWHERE Raw.UserId = Users.Id\nORDER BY Users.Reputation DESC, Users.Id","CreationDate":"2019-05-15 5:53:46","validated":true}
{"QuerySetId":1051997,"Title":"Breakdown of questions by a user by score","Description":null,"QueryBody":"SELECT \n  Score, COUNT(Id)\n FROM Posts\n WHERE PostTypeId=1 AND OwnerUserId=##uid?28111##\n GROUP BY Score\n ORDER BY Score DESC","CreationDate":"2019-05-15 19:44:28","validated":true}
{"QuerySetId":1052242,"Title":"Active users with a reputation cutoff","Description":null,"QueryBody":"SELECT  \n  Users.Id AS [User Link],\n  Users.Reputation,\n  COUNT(*) AS postnumber\nFROM Users\nJOIN Posts ON Users.Id = Posts.OwnerUserId\nWHERE DATEDIFF(MONTH, Posts.CreationDate, GetDate()) <= ##AgeCutoffInMonths##\n  AND Users.Reputation >= ##ReputationCutoff##\nGROUP BY Users.Id, Users.Reputation\nORDER BY Users.Reputation DESC","CreationDate":"2019-05-16 14:43:37","validated":true}
{"QuerySetId":1053212,"Title":"Users with the highest average question score","Description":null,"QueryBody":"SELECT  MAX(U.DisplayName), COUNT(P.Id) AS NumPosts, AVG(P.Score) AS AvgScore FROM Users U\nINNER JOIN Posts P\nON P.OwnerUserId = U.Id\nWHERE P.PostTypeId = 1\nGROUP BY U.Id\nORDER BY AvgScore DESC","CreationDate":"2019-05-18 20:23:47","validated":true}
{"QuerySetId":1053699,"Title":"Top Docker Contributors - Sri Lanka","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('docker')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%lanka%'\nORDER BY Score DESC;","CreationDate":"2019-05-20 18:36:49","validated":true}
{"QuerySetId":1054209,"Title":"Number of posts with \"API\" in their title","Description":null,"QueryBody":"SELECT  count(distinct Id)\nfrom Posts p\nwhere p.PostTypeId = 1\nand Title like '% API %'","CreationDate":"2019-05-22 2:34:47","validated":true}
{"QuerySetId":1060212,"Title":"Posts with the longest close\/reopen\/delete\/undelete history","Description":null,"QueryBody":"SELECT  TOP 1000 PostId AS [Post Link], COUNT(*) AS Count\nFROM PostHistory\nWHERE PostHistoryTypeId BETWEEN 10 AND 13\nGROUP BY PostId\nORDER BY Count DESC, PostId","CreationDate":"2019-06-03 18:33:52","validated":true}
{"QuerySetId":1061632,"Title":"Active people from Greece before 2019","Description":null,"QueryBody":"SELECT  count(*) from users where LastAccessDate >= '2018-01-01' and CreationDate <= '2019-01-01' and Location like '%greece%' COLLATE Latin1_General_CI_AI_KS_WS;","CreationDate":"2019-06-07 1:53:18","validated":true}
{"QuerySetId":1065552,"Title":"Short comments containing a given string","Description":null,"QueryBody":"SELECT  \n  PostId As [Post Link],\n  Text,\n  Score,\n  Comments.CreationDate,\n  Users.DisplayName,\n  Users.Reputation\nFROM \n  Comments inner join \n  Users on Comments.UserId = Users.Id\nWHERE Text LIKE '%##tstring?bro##%' AND LEN(Text) < 20 \nORDER BY CreationDate DESC","CreationDate":"2019-06-15 12:16:03","validated":true}
{"QuerySetId":1066284,"Title":"Bounties by users from the given list","Description":null,"QueryBody":"SELECT  DISTINCT p.Id AS [Post Link],\n  concat('site:\/\/posts\/',\n          p.Id,\n          '\/revisions'\n          ) [Revisions Link],\n  n.OwnerUserId, p.OwnerUserId AS [User Link], p.OwnerDisplayName, p.CreationDate, p.Score, p.Tags\nFROM Posts p INNER JOIN PostNotices n ON p.Id=n.PostId\nWHERE n.OwnerUserId IN (##list##)\nORDER BY p.Id DESC","CreationDate":"2019-06-16 14:02:42","validated":true}
{"QuerySetId":1066746,"Title":"Questions which have the given tag (including the editor who added it)","Description":null,"QueryBody":"WITH  firstrev_cte AS\n(\nSELECT MIN(ph.Id) AS MinId, p.Id \nFROM Posts p JOIN PostHistory ph ON ph.PostId=p.Id\nWHERE ph.Text LIKE '%<##tagName##>%' AND p.Tags LIKE '%<##tagName##>%'\nGROUP BY p.Id\n)\n\nSELECT PostId AS [Post Link],\n  url = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions',\n  UserId AS [User Link], UserDisplayName, CreationDate\nFROM PostHistory INNER JOIN firstrev_cte ON PostHistory.Id=MinId\nORDER BY CreationDate DESC","CreationDate":"2019-06-17 16:27:21","validated":true}
{"QuerySetId":1067077,"Title":"Most popular StackOverflow tags in May 2019","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as MayRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInMay,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2019-05-01'\nand Posts.CreationDate > '2019-04-01'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2019-06-18 9:33:41","validated":true}
{"QuerySetId":1067120,"Title":"Percentage of first posts which get closed (per month) - between two dates","Description":null,"QueryBody":"WITH  firstpostids_cte as (\nSELECT MIN(Id) AS MinId, OwnerUserId\nFROM Posts\nWHERE PostTypeId=1\nGROUP BY OwnerUserId\n)\n, firstpostsclosed_cte as (\nSELECT\np.Id, p.CreationDate AS cre, p.ClosedDate AS clo\nFROM firstpostids_cte fp JOIN Posts p ON fp.MinId=p.Id\n)\n\nSELECT \neomonth(cre), \n----COUNT(clo), COUNT(*),\nROUND((COUNT(clo))*100.0\/(COUNT(*)),2) AS percentage\nFROM firstpostsclosed_cte\nWHERE cre >= '##Date1?2014-10-01##' AND cre <= '##Date2?2015-11-30##'\nGROUP BY eomonth(cre)\nORDER BY eomonth(cre)","CreationDate":"2019-06-18 11:37:53","validated":true}
{"QuerySetId":1068407,"Title":"Gold, SIlver and Bronze Badges for Node.js Worldwide Chronological","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Date ASC) AS [Badge #],\n    Users.Id AS [User Link],\n    Reputation,\n       case \n         when Class = 1 then 'Gold' \n         when Class = 2 then 'Silver' \n         when Class = 3 then 'Bronze' \n         else 'Unknown' \n       end as \"Badge\",\n    Name as \"Badge for\",\n    Date as \"Badge earned\",\n    Location\nFROM\n    Users, Badges\nWHERE\n    Users.Id = Badges.UserId\n    AND Badges.Class = 3\n    AND Badges.TagBased = 1\n    AND Badges.name = 'node.js'\nORDER BY\n    \"Badge earned\" ASC;","CreationDate":"2019-06-21 14:53:14","validated":true}
{"QuerySetId":1069449,"Title":"Users where location = melbourne","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    Location,\n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('melbourne')\nORDER BY\n    Reputation DESC;","CreationDate":"2019-08-14 14:39:08","validated":true}
{"QuerySetId":1070774,"Title":"Upvotes on question - distribution over vote age","Description":null,"QueryBody":"SELECT  Age, [2010], [2011], [2012], [2013], [2014], [2015], [2016], [2017], [2018], [2019]\nFROM\n\n(SELECT YEAR(p.CreationDate) AS [Year],\n  DATEDIFF(YEAR, p.CreationDate, v.CreationDate) AS Age,\n  CAST(COUNT(*) AS FLOAT) \/ COUNT(DISTINCT(p.Id)) AS Upvotes\n  FROM Votes AS v\n  INNER JOIN Posts AS p\n    ON v.PostId = p.Id\n  WHERE v.VoteTypeId = 2\n    AND p.PostTypeId = 1\n  GROUP BY YEAR(p.CreationDate),\n  DATEDIFF(YEAR, p.CreationDate, v.CreationDate)\n  ) AS temp\n\nPIVOT (\nAVG(Upvotes)\n  FOR Year IN ([2010], [2011], [2012], [2013], [2014], [2015], [2016], [2017], [2018], [2019])\n) AS pivotTable\n\nORDER BY Age","CreationDate":"2019-06-27 15:10:03","validated":true}
{"QuerySetId":1073345,"Title":"Top 200 users in Uruguay","Description":null,"QueryBody":"SELECT  TOP 200\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    AboutMe,\n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%uruguay%'\n    OR UPPER(Location) LIKE '%URU'\nORDER BY\n    Reputation DESC;","CreationDate":"2019-07-03 21:56:46","validated":true}
{"QuerySetId":1074636,"Title":"What is the intraday activity profile like for CV","Description":"https:\/\/stats.meta.stackexchange.com\/questions\/1561\/what-is-the-intraday-activity-profile-like-for-cv\/5706#5706","QueryBody":"SELECT  datepart(hh, creationdate) [hour]\n     , count(*) [#all]\n     , sum(case when posttypeid = 1 then 1 else 0 end) [#questions]\n     , sum(case when posttypeid = 2 then 1 else 0 end) [#answers]\nfrom posts\nwhere posttypeid in (1,2)\ngroup by datepart(hh, creationdate)\norder by [hour]","CreationDate":"2019-07-07 15:40:44","validated":true}
{"QuerySetId":1075252,"Title":"Top SO users from Turkey","Description":null,"QueryBody":"SELECT  TOP 1500\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id as [User_ID], \n    (case when DisplayName LIKE '%arbar%zha%' then \n      '[| '+DisplayName+' |]'\n     else\n       DisplayName\n     end\n     ) as\n    DisplayName,\n    Reputation,\n    Location\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%turke%' OR\n     LOWER(Location) LIKE '%t\u00fcrki%' OR\n     LOWER(Location) LIKE '%turki%'  \n    )\nORDER BY\n    Reputation DESC;","CreationDate":"2020-10-19 16:56:44","validated":true}
{"QuerySetId":1075294,"Title":"Days to Close a Question by Creation Month","Description":null,"QueryBody":"SELECT  date1, AVG(diff1) as cnt\nFROM (\n\n  SELECT \n    DATEDIFF(day, d.CreationDate, d.ClosedDate) as [diff1],\n    FORMAT (d.CreationDate, 'yy-MM') as [date1],\n    FORMAT (d.ClosedDate, 'yy-MM') as [date2],\n    (d.Id) as id\n  FROM Posts d  -- d=duplicate\n    LEFT JOIN PostHistory ph ON ph.PostId = d.Id\n    LEFT JOIN PostLinks pl ON pl.PostId = d.Id\n    LEFT JOIN Posts o ON o.Id = pl.RelatedPostId  -- o=original\n  WHERE\n    d.PostTypeId = 1  -- 1=Question\n    AND ph.PostHistoryTypeId = 10  -- 10=Post Closed\n    \n  ) as t1\ngroup by date1\norder by date1","CreationDate":"2019-07-09 15:23:21","validated":true}
{"QuerySetId":1075311,"Title":"Posts with links to files with particular extension (by CreationDate, only body)","Description":null,"QueryBody":"SELECT  Body\nFROM Posts\nWHERE Body LIKE '%http%##ext?jpg##%'\n  AND CreationDate >= '##Date1?2019-01-01##' AND CreationDate <= '##Date2?2020-01-01##'\nORDER BY Id ASC","CreationDate":"2019-07-09 15:41:06","validated":true}
{"QuerySetId":1076651,"Title":"Distribution of Flagged Posts by Time (Hours) to first flag","Description":null,"QueryBody":"SELECT  diff1, count(*)\nfrom\n(\n    SELECT d1,d2,\n      FORMAT (d1, 'yy-MM') as [d1f],\n      (12+DATEDIFF(hour, d1, d2)) as [diff1]\n    from\n    (\n      SELECT p.id, MIN(p.CreationDate) as d1, MIN(r.CreationDate) as d2\n        from posts as p\n        inner join [ReviewTasks] as r on r.PostId = p.id\n        where p.posttypeid = 1 or p.posttypeid = 2\n        group by p.id\n    ) as t1\n) as t2\nwhere diff1>=0\ngroup by diff1\norder by diff1 asc","CreationDate":"2019-07-14 15:31:59","validated":true}
{"QuerySetId":1076765,"Title":"Well-Received Question Rank by User","Description":null,"QueryBody":"WITH  RankedUsers AS (\n  SELECT RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank,\n         p.OwnerUserId AS UserId,\n         COUNT(*) AS QuestionCount\n  FROM Posts p\n  WHERE PostTypeId = 1 -- (Question)\n    AND p.Score > 0\n  GROUP BY p.OwnerUserId\n)\nSELECT Rank,\n       UserID AS [User Link],\n       QuestionCount\nFROM RankedUsers\nWHERE Rank < 100\n   OR UserID = ##UserId##\nORDER BY Rank","CreationDate":"2019-07-14 22:00:00","validated":true}
{"QuerySetId":1076883,"Title":"Posts by a single user and the number of links\/images, sorted by content length","Description":null,"QueryBody":"SELECT  Id AS [Post Link], LEN(Body) AS 'Length', Score, CreationDate,\n  -- count the # of occurrences of ':\/\/' in the body \n  (LEN(Body) - LEN(REPLACE(Body, ':\/\/', ''))) \/ 3 AS 'Number of links\/images'\n  FROM Posts\n  WHERE OwnerUserId = ##UserId:int##\n    AND PostTypeId = 2 -- Answers only\n  ORDER BY LEN(Body) DESC","CreationDate":"2019-07-15 15:51:07","validated":true}
{"QuerySetId":1077142,"Title":"How Unsung am I? (Search by Display Name)","Description":null,"QueryBody":"SELECT \n    count(a.Id) as [Accepted Answers],\n    sum(case when a.Score = 0 then 0 else 1 end) as [Scored Answers],  \n    sum(case when a.Score = 0 then 1 else 0 end) as [Unscored Answers],\n    sum(CASE WHEN a.Score = 0 then 1 else 0 end)*1000 \/ count(a.Id) \/ 10.0 as [Percentage Unscored]\nfrom\n    Posts q\n  inner join Posts a on a.Id = q.AcceptedAnswerId\n  inner join Users u on u.Id = a.OwnerUserId\n  \nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = u.Id\n  and q.OwnerUserId != u.Id\n  and a.postTypeId = 2\n  and u.DisplayName = '##DisplayName##'","CreationDate":"2019-07-16 13:23:31","validated":true}
{"QuerySetId":1077335,"Title":"top users in el salvador","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%##country##%')\nORDER BY\n    Reputation DESC;","CreationDate":"2019-07-17 1:39:51","validated":true}
{"QuerySetId":1077511,"Title":"Average Votes Count based on Comments Count on Question","Description":null,"QueryBody":"SELECT  p.CommentCount, AVG(CAST(p.Score as Float)) as AvgScore\nFrom posts p\ngroup by CommentCount\norder by CommentCount ASC","CreationDate":"2019-07-17 18:33:18","validated":true}
{"QuerySetId":1078135,"Title":"Questions under a tag per month","Description":null,"QueryBody":"SELECT  P.Mon, count(P.Id)\nfrom (\n  SELECT P.Id\n  , cast(datepart(month, P.CreationDate) - 1 as real)\/12 + datepart (year, P.CreationDate) as Mon\n  from Posts P\n  ) P\ninner join PostTags PT on PT.PostId = P.Id\ninner join Tags T on T.Id = PT.TagId\nwhere T.TagName = '##TagName##'\ngroup by P.Mon\norder by P.Mon","CreationDate":"2019-07-19 5:45:00","validated":true}
{"QuerySetId":1079713,"Title":"Questions with the most answers by a single user","Description":null,"QueryBody":"SELECT  TOP 100 ParentId AS [Post Link], OwnerUserId AS [User Link],\n  CreationDate, COUNT(*)\n  FROM Posts AS a\n  WHERE PostTypeId = 2 AND OwnerUserId != -1\n  GROUP BY ParentId, OwnerUserId, CreationDate\n  ORDER BY COUNT(*) DESC","CreationDate":"2019-07-23 19:29:41","validated":true}
{"QuerySetId":1081271,"Title":"Number of post history changes in the last year","Description":null,"QueryBody":"SELECT  count(*) FROM PostHistory\nWHERE CreationDate > DATEADD(year,-1,GETDATE())\n-- Ignore Community user\nAND UserId > -1","CreationDate":"2019-07-27 8:40:28","validated":true}
{"QuerySetId":1082169,"Title":"Users got the most downs","Description":null,"QueryBody":"SELECT  TOP 100 Posts.OwnerUserId AS [User Link], COUNT(*) AS Count\nFROM Posts, Votes\nWHERE\n  Posts.Id = Votes.PostId\n  AND\n  Votes.VoteTypeId = 3\n  AND\n  Posts.OwnerUserId > 0\nGROUP BY Posts.OwnerUserId\nORDER BY Count DESC, Posts.OwnerUserId","CreationDate":"2019-07-29 13:31:27","validated":true}
{"QuerySetId":1083024,"Title":"Tags from posts thats have devops or cloud tag","Description":null,"QueryBody":"SELECT \n  Posts.Id, Tags.TagName\nFROM Posts, PostTags, Tags\nWHERE Posts.Id IN (\n\tSELECT Posts.Id\n\tFROM Posts, PostTags, Tags\n\tWHERE Posts.Id=PostTags.PostId AND PostTags.TagId=Tags.Id AND (Tags.TagName LIKE '%devops%' OR Tags.TagName LIKE '%cloud%')\n) AND Posts.Id=PostTags.PostId AND PostTags.TagId=Tags.Id\nORDER BY\n\tPosts.Id, Tags.TagName","CreationDate":"2019-07-30 16:33:01","validated":true}
{"QuerySetId":1083126,"Title":"get question bodies and tags in specific period","Description":null,"QueryBody":"SELECT  \n   TOP 1000000                        -- adjust!\n   Body, Tags  \nFROM Posts \nWHERE \n   CreationDate>'2018-08-01' and      -- adjust!\n   CreationDate<'2019-08-01' and      -- adjust!\n   Tags <> ''","CreationDate":"2019-07-30 18:12:56","validated":true}
{"QuerySetId":1084142,"Title":"Top 100 users with most CW posts","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE (CommunityOwnedDate IS NOT NULL)\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-07-31 12:36:48","validated":true}
{"QuerySetId":1084168,"Title":"Top Android Users in Malaysia","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n    SELECT \n        ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n        u.Id AS [User Link], \n        COUNT(*) AS UpVotes\n    FROM Tags t\n        INNER JOIN PostTags pt ON pt.TagId = t.id\n        INNER JOIN Posts     p ON p.ParentId = pt.PostId\n        INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n        INNER JOIN Users     u ON u.Id = p.OwnerUserId\n        WHERE \n            LOWER(Location) LIKE '%malaysia%'\n            AND  TagName = 'android'\n        GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2019-07-31 13:16:31","validated":true}
{"QuerySetId":1084211,"Title":"Users with most posts between two dates","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE CreationDate >= '##Date1?2019-01-01##' AND CreationDate <= '##Date2?2020-01-01##'\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-07-31 14:30:56","validated":true}
{"QuerySetId":1084214,"Title":"Users with most comments between two dates","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  UserId AS [User Link], UserDisplayName, COUNT(Id)\nFROM Comments\nWHERE CreationDate >= '##Date1?2019-01-01##' AND CreationDate <= '##Date2?2020-01-01##'\nGROUP BY UserId, UserDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-07-31 14:32:20","validated":true}
{"QuerySetId":1084376,"Title":"Distribution of question age when answered","Description":null,"QueryBody":"SELECT  DATEDIFF(day, Question.CreationDate, Answer.CreationDate) as delay, COUNT(*)\n  FROM (SELECT * FROM Posts WHERE PostTypeId = 2) as Answer\n  JOIN Posts AS Question\n    ON Answer.ParentId = Question.Id\n  WHERE Answer.OwnerUserId = ##UserId##\n  GROUP BY DATEDIFF(day, Question.CreationDate, Answer.CreationDate)","CreationDate":"2020-05-22 22:17:56","validated":true}
{"QuerySetId":1084525,"Title":"Average gained rep by questions and answers","Description":"It counts only accept\/up\/down votes on not deleted posts. PostTypeId = 1 means a question. PostTypeId = 2 means an answer.","QueryBody":"SELECT \n  AVG(1.0 *\n    CASE\n      WHEN Votes.VoteTypeId = 1 THEN 15\n      WHEN Votes.VoteTypeId = 3 THEN -2\n      WHEN Posts.PostTypeId = 1 THEN 5\n      ELSE 10\n    END) AS Rep,\n  Posts.PostTypeId\nFROM Posts, Votes\nWHERE\n  Votes.PostId = Posts.Id\n  AND\n  Votes.VoteTypeId <= 3\n  AND\n  Posts.PostTypeId <= 2\nGROUP BY Posts.PostTypeId","CreationDate":"2019-07-31 23:28:01","validated":true}
{"QuerySetId":1085471,"Title":"Find Incorrect usage of Python-N tags.","Description":null,"QueryBody":"SELECT TOP 200 p.Title,\n               'https:\/\/codereview.stackexchange.com\/questions\/' + CAST(p.id AS VARCHAR) as URL,\n               p.Tags,\n               p.CreationDate\nFROM   posts p\nCROSS APPLY (\n       SELECT t.TagName\n       FROM tags t\n       INNER JOIN posttags pt on pt.tagid = t.id\n       WHERE pt.postid = p.id\n       AND t.TagName like 'python-2.%'\n) t_python_v\nCROSS APPLY (\n       SELECT t.TagName\n       FROM tags t\n       INNER JOIN posttags pt on pt.tagid = t.id\n       WHERE pt.postid = p.id\n       AND t.TagName like 'python-3.%'\n) t_python\nWHERE  1 = 1\nAND    p.DeletionDate is NULL\nAND    p.Body is NOT NULL\nAND    p.ClosedDate is NULL\nORDER  BY p.CreationDate DESC\n;","CreationDate":"2019-08-04 0:22:52","validated":true}
{"QuerySetId":1085709,"Title":"Find posts with specific text","Description":null,"QueryBody":"SELECT  \n  p.CreationDate AS \"Date\", \n  u.Id AS \"User ID\", \n  u.DisplayName AS \"User Name\", \n  p.Id AS [Post Link]\nFROM Posts p\n  JOIN Users u ON u.Id = p.OwnerUserId\nWHERE p.Body LIKE '%##SpecifiedText##%'","CreationDate":"2019-08-05 0:57:55","validated":true}
{"QuerySetId":1086385,"Title":"Users with most CW answers","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE PostTypeId=2 AND CommunityOwnedDate is not null\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-08-07 11:48:52","validated":true}
{"QuerySetId":1086386,"Title":"Users with most non-CW answers","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  OwnerUserId AS [User Link], OwnerDisplayName, COUNT(Id)\nFROM Posts\nWHERE PostTypeId=2 AND CommunityOwnedDate is null\nGROUP BY OwnerUserId, OwnerDisplayName\nORDER BY COUNT(Id) DESC","CreationDate":"2019-08-07 11:48:39","validated":true}
{"QuerySetId":1086998,"Title":"Count of first-posts by month","Description":null,"QueryBody":"SELECT \n  DATEFROMPARTS(\n    DATEPART(yyyy, CreationDate),\n    DATEPART(mm, CreationDate),\n    1) AS Month,\n    COUNT(*) AS Count\nFROM Posts\nWHERE Id IN (\n  SELECT MIN(Id) AS Id\n  FROM Posts\n  WHERE OwnerUserId > 0\n  GROUP BY OwnerUserId\n)\nGROUP BY DATEFROMPARTS(\n  DATEPART(yyyy, CreationDate),\n  DATEPART(mm, CreationDate),\n  1)\nORDER BY Month DESC;","CreationDate":"2019-08-08 1:47:28","validated":true}
{"QuerySetId":1087081,"Title":"All Posts and answers with less then 300 characters after 5\/10\/2015","Description":null,"QueryBody":"SELECT  Id, CreationDate, ParentId, PostTypeId, Body from Posts p WHERE len(Body) <= 300 and p.CreationDate > '2015-05-10'","CreationDate":"2019-08-08 13:26:23","validated":true}
{"QuerySetId":1088555,"Title":"All answers with specific tag","Description":null,"QueryBody":"SELECT  q.title as Question, a.body as Answer\nFROM posts q INNER JOIN posts a ON q.id = a.parentid\nWHERE q.tags LIKE '%<##TagName##>%' \nORDER BY a.score DESC","CreationDate":"2020-07-08 22:40:33","validated":true}
{"QuerySetId":1089892,"Title":"All answers with links to indianscriptures.com","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link],\n  CreationDate,\n  Body\nFROM \n  Posts\nWHERE \n  lower(Body) LIKE '%www.indianscriptures.com%pdf%'      -- Link to PDF\n  OR\n  lower(Body) LIKE '%www.indianscriptures.com%chapter%'  -- Link to Chapter\/Topic\n\nORDER BY CreationDate ASC","CreationDate":"2019-08-13 4:59:29","validated":true}
{"QuerySetId":1090624,"Title":"Total number of users on the database for each year since 2000","Description":null,"QueryBody":"WITH  rs as (\nSELECT YEAR(CreationDate) CreationYear,\n       id\nFROM Users\n)\nSELECT CreationYear, \n       COUNT(id) User_Count\nFROM rs\nWHERE CreationYear >= 2000\nGROUP BY CreationYear","CreationDate":"2019-09-09 8:46:57","validated":true}
{"QuerySetId":1090745,"Title":"Most Favorite'd Posts (for specified tag)","Description":"Lists accepted answers for the questions that are the most 'favorited' for the specified tag. (Group by 100's of fav's, when sorting.)","QueryBody":"SELECT  \n  case when min(p.acceptedanswerid) is null then postid else min(p.acceptedanswerid) end as [Post Link],\n  format(count(*),'#,##0') [# Fav's],\n  format(score,'#,##0') Score,\n  format(datediff(month,min(p.creationdate),getdate())\/12.0,'#,##0.0') [Years Old]  \nfrom votes v left join posts p on v.postid=p.id\nwhere votetypeid=5   --favorites = 5\n  and p.posttypeid=1\n  and p.tags like '%<' + ##tag:string?php## + '>%'\ngroup by postid, p.title, score\nhaving count(*) > ##minfav:int?100## \norder by (round(count(*)\/100,0)*100.0)+(score\/10000.0) desc \n\n-- tag: Enter a single, complete tag:\n-- minfav: Minimum # of favorite's:","CreationDate":"2019-11-17 17:25:16","validated":true}
{"QuerySetId":1090943,"Title":"List of all moderator election nominations, network-wide","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    LAG(CreationDate) OVER (ORDER BY CreationDate) AS PrevCrDate,\n    Id,\n    CreationDate\n  FROM Posts\n  WHERE PostTypeId = 6\n)\nSELECT\n  SUM(\n    CASE\n      WHEN\n        PrevCrDate IS NULL\n        OR\n        DATEDIFF(day, PrevCrDate, CreationDate) > 30\n      THEN\n        1\n      ELSE 0\n    END\n  ) OVER (\n    ORDER BY CreationDate ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n  ) AS ElectionId,\n  Raw.Id AS PostId,\n  CreationDate\nFROM Raw\nORDER BY CreationDate","CreationDate":"2019-08-14 21:22:24","validated":true}
{"QuerySetId":1091707,"Title":"Questions in need of a friendly\/helpful comment","Description":null,"QueryBody":"SELECT  \n      q.Title  \n    , q.Tags\n    , 'https:\/\/codereview.stackexchange.com\/questions\/' + CAST(q.Id AS VARCHAR) as URL\nfrom Posts q\nwhere \n    (   SELECT count(*) \n        from Posts a \n        where a.ParentId = q.Id and a.Score > 0\n    ) = 0\n    and \n    (   SELECT count(*) \n        from Comments c \n        where c.PostId = q.Id\n    ) = 0\n    and q.Score <= 0\n    and q.CommunityOwnedDate is null \n    and q.ClosedDate is null \n    and q.ParentId is null \n    and q.AcceptedAnswerId is null\n    and q.LastActivityDate <= DATEADD(mm, -1, GETDATE())\n    and q.LastActivityDate >= DATEADD(mm, -2, GETDATE())\norder by CreationDate desc\n;","CreationDate":"2019-08-16 1:02:14","validated":true}
{"QuerySetId":1093251,"Title":"Number of questions and answers per user","Description":null,"QueryBody":"SELECT  COUNT(CASE WHEN p.PostTypeId=1 THEN 1 END) as [Questions],\n       COUNT(CASE WHEN p.PostTypeId=2 THEN 1 END) as [Answers]\nFROM Posts p\nWHERE p.PostTypeId = 1 OR p.PostTypeId = 2\nGROUP BY p.OWNERUSERID","CreationDate":"2019-08-19 18:35:28","validated":true}
{"QuerySetId":1094695,"Title":"Was the user active in the last 12 months","Description":"If we define active as writing a question or an answer. Was the given user active for the last 12 months?","QueryBody":"DECLARE  @user INT = ##uid:INT##\n\nIF ( (SELECT TOP 1 DATEDIFF(MONTH,GETDATE(),p.CreationDate) AS 'Date'\n      FROM Posts p WHERE p.OwnerUserId = @user ORDER BY 'Date' DESC) < -12)\n    SELECT 'No';\nELSE\n    SELECT 'Yes';","CreationDate":"2019-08-22 12:17:44","validated":true}
{"QuerySetId":1094697,"Title":"Question score vs. highest voted Answer score","Description":null,"QueryBody":"SELECT  q.Score AS [Q-Score], a.Score as [A-Score]\nFROM Posts q\nINNER JOIN\n (SELECT DISTINCT a.ParentId, MAX(a.Score) AS [Score]\n FROM Posts a\n WHERE a.PostTypeId = 2 -- answers\n GROUP BY a.ParentId) a\nON q.Id = a.ParentId\nWHERE q.PostTypeId = 1 -- questions\n AND q.ClosedDate is null -- not closed","CreationDate":"2019-08-22 12:33:23","validated":true}
{"QuerySetId":1094698,"Title":"Was a given user active in the last N months. Active is here defined by creating a post (question, answer, etc.)","Description":"Active is here defined by creating a post (question, answer, etc.)","QueryBody":"DECLARE  @user INT = ##uid:INT##\nDECLARE @N INT = ##NbMonth:INT##\n-- \n\nIF ( (SELECT TOP 1 DATEDIFF(MONTH,GETDATE(),p.CreationDate) AS 'Date'\n      FROM Posts p WHERE p.OwnerUserId = @user ORDER BY 'Date' DESC) < -@N)\n    SELECT 'No';\nELSE\n    SELECT 'Yes';","CreationDate":"2019-08-22 12:37:38","validated":true}
{"QuerySetId":1094704,"Title":"Last votes by a given user","Description":null,"QueryBody":"DECLARE  @user INT = ##uid:INT##\n\nSELECT\n  v.CreationDate AS 'Date',\n  t.Name\nFROM \n  Votes v \n  INNER JOIN VoteTypes t ON v.VoteTypeId = t.Id\n  WHERE v.UserId = @user \n  ORDER BY 'Date' DESC","CreationDate":"2019-08-22 13:38:27","validated":true}
{"QuerySetId":1095972,"Title":"Watson Studio questions - July 2019","Description":null,"QueryBody":"SELECT  Id, Body, CreationDate, ViewCount, Tags from Posts\nwhere Tags like '%watson-studio%' \nand ParentId is null\nand CreationDate > '2019-07-01'\nand CreationDate <= '2019-07-31'\norder by CreationDate desc","CreationDate":"2019-08-25 1:01:49","validated":true}
{"QuerySetId":1097140,"Title":"eclipse vs. intellij-idea by quarter","Description":null,"QueryBody":"SELECT  t.TagName AS Tag,\nDATEPART(Q,p.CreationDate) AS q, YEAR(p.CreationDate) AS y,\nCOUNT(p.Id) AS NumPosts\nFROM Tags t \n  JOIN PostTags pt ON pt.TagID = t.Id\n  JOIN Posts p ON p.Id = pt.PostId\n  WHERE (t.TagName = 'eclipse' OR t.TagName = 'intellij-idea')\n  AND YEAR(p.CreationDate) >= 2012\nGROUP BY t.TagName, DATEPART(Q, p.CreationDate), YEAR(p.CreationDate)\nORDER BY y, q, Tag DESC\n;","CreationDate":"2019-08-27 15:54:09","validated":true}
{"QuerySetId":1098597,"Title":"Number of tag additions by per user","Description":null,"QueryBody":"WITH  firstrev_cte AS\n(\nSELECT MIN(ph.Id) AS MinId, p.Id\nFROM Posts p JOIN PostHistory ph ON ph.PostId=p.Id\nWHERE ph.Text LIKE '%<##tagName##>%'\nGROUP BY p.Id\n)\n, users_cte AS\n(SELECT PostId AS pid, UserId AS uid, UserDisplayName AS udn\nFROM PostHistory INNER JOIN firstrev_cte ON PostHistory.Id=MinId)\n\nSELECT\n  COUNT(pid), uid AS [User Link], udn\n  FROM users_cte\nGROUP BY uid, udn\nORDER BY COUNT(pid) DESC","CreationDate":"2019-09-01 12:41:24","validated":true}
{"QuerySetId":1100682,"Title":"Most common mutual questioner - answerer pairs","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Q.OwnerUserId AS QId,\n    A.OwnerUserId AS AId,\n    COUNT(*) AS Count\n  FROM Posts Q, Posts A\n  WHERE\n    A.ParentId = Q.Id\n    AND\n    A.OwnerUserId > 0\n    AND\n    Q.OwnerUserId > 0\n    AND\n    A.OwnerUserId <> Q.OwnerUserId\n    AND\n    Q.CommunityOwnedDate IS NULL\n    AND\n    A.CommunityOwnedDate IS NULL\n  GROUP BY Q.OwnerUserId, A.OwnerUserId\n)\nSELECT\n  Hin.QId AS [User Link],\n  Hin.AId AS [User Link],\n  Hin.Count AS HinCount,\n  Her.Count AS HerCount\nFROM Raw Hin, Raw Her\nWHERE\n  Hin.AId = Her.QId\n  AND\n  Hin.QId = Her.AId\n  AND\n  Hin.QId > Hin.AId\nORDER BY\n  CASE\n    WHEN Hin.Count > Her.Count THEN Her.Count\n    ELSE Hin.Count\n  END DESC, Hin.QId, Hin.AId","CreationDate":"2019-09-05 23:42:02","validated":true}
{"QuerySetId":1102232,"Title":"Score and Frequency for posts within the tag \"fefactoring\"","Description":null,"QueryBody":"SELECT \n    Score, COUNT(Score) AS Frequency\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE\n    TagName = 'refactoring'\nGROUP BY Score \nORDER BY Score DESC","CreationDate":"2019-09-09 12:48:26","validated":true}
{"QuerySetId":1102871,"Title":"Selects all posts where the number of upvotes is greater than the number of downvotes, but where the number of downvotes is at least half the number of upvotes. The result is ordered by the number of upvotes (the highest on top).","Description":"Selects all posts where the number of upvotes is greater than the number of downvotes, but where the number of downvotes is at least half the number of upvotes. The result is ordered by the number of upvotes (the highest on top).","QueryBody":"SELECT  concat('https:\/\/stackoverflow.com\/a\/', PostId), Upvotes, Downvotes\nfrom (\n    SELECT PostId, Upvotes, Downvotes, 2 * Downvotes \/ nullif(Upvotes, 0) as Ratio\n    from (\n        SELECT\n            PostId, \n            Upvotes = sum(case when VoteTypeId = 2 then 1 else 0 end),\n            Downvotes = sum(case when VoteTypeId = 3 then 1 else 0 end)\n        from Votes\n        where VoteTypeId in (2,3)\n        group by PostId\n    ) as VoteCounts inner join Posts on Posts.Id = VoteCounts.PostId\n    where Upvotes > 0 and Downvotes > 0\n) as Scores\nwhere Ratio >= 1\norder by Upvotes desc","CreationDate":"2019-09-10 17:55:42","validated":true}
{"QuerySetId":1104368,"Title":"Search User \"About Me\" Sections for an Exact Word or Phrase","Description":null,"QueryBody":"SELECT  * \nFROM Users\nWHERE \nLOWER(AboutMe) LIKE '%' + ##keyword:string## + '%' \nAND reputation >1\nAND NOT LOWER(AboutMe) LIKE '%' + ##keyword:string## + 's%'\nORDER BY reputation DESC","CreationDate":"2019-09-12 22:33:45","validated":true}
{"QuerySetId":1106653,"Title":"To whom do I answer","Description":null,"QueryBody":"SELECT  \nQuestions.Score as Q_score,\nQuestions.Id as [Post Link],\nQuestions.Body as Q_text,\nAnswers.Score as A_score,\nAnswers.Body as A_text,\nQuestions.Tags as [Tags],\nQuestions.OwnerUserId as [User Link]\nFROM\nPosts as Questions,\nPosts as Answers \nWHERE\nQuestions.PostTypeId  = 1 AND\nAnswers.PostTypeId  = 2 AND\nAnswers.ParentId = Questions.Id AND\nAnswers.OwnerUserId = ##UserId1##","CreationDate":"2019-09-15 19:58:10","validated":true}
{"QuerySetId":1112645,"Title":"Search something in my answers under a specific tag","Description":null,"QueryBody":"DECLARE  @SearchTerm nvarchar(max) = '##SearchTerm##'\nDECLARE @Tag nvarchar(max) = '##Tag##'\n\nSELECT TOP 100 Id as [Post Link], Body\nFROM Posts P\nWHERE\n  ParentId is NOT NULL\n  AND OwnerUserId = 3889449\n  AND (SELECT Tags FROM Posts WHERE Id = P.ParentId) LIKE CONCAT('%<', @Tag, '>%')\n  AND LOWER(Body) LIKE CONCAT('%', LOWER(@SearchTerm), '%')\nORDER BY CreationDate DESC","CreationDate":"2020-10-10 15:36:21","validated":true}
{"QuerySetId":1113065,"Title":"Distribution of my questions and answers by their score","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nPosts.Score,\nCOUNT(*) AS Number,\n(CASE WHEN MIN(Posts.PostTypeId) = 1 THEN 'Question' ELSE 'Answer' END) AS Type\nFROM Posts\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.PostTypeId IN (1, 2)\nGROUP BY Posts.Score, Posts.PostTypeId\nORDER BY Type, Score DESC","CreationDate":"2019-09-23 20:36:35","validated":true}
{"QuerySetId":1113079,"Title":"Total number of questions and net score by tags in the past 30 days","Description":null,"QueryBody":"SELECT  Tags.TagName,\n       SUM(Posts.Score) AS 'Net Score',\n       COUNT(*) AS Number\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Posts.CreationDate >= DATEADD(DAY, -30, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\nGROUP BY Tags.TagName,\n         Posts.PostTypeId\nHAVING (COUNT(*) > 50)\nORDER BY 'Net Score' DESC","CreationDate":"2019-09-23 21:35:18","validated":true}
{"QuerySetId":1113107,"Title":"High reputation users who've been inactive for at least 12 months","Description":null,"QueryBody":"SELECT \nId AS [User Link],\nReputation,\nCAST(LastAccessDate AS DATE) AS LastActive\nFROM Users\nWHERE Reputation > 25000\nAND DATEDIFF(month, LastAccessDate, GETDATE()) > 12\nORDER BY LastAccessDate DESC","CreationDate":"2019-09-23 22:22:18","validated":true}
{"QuerySetId":1113942,"Title":"Average Number of Seconds until Approved Response for 2017 Questions","Description":null,"QueryBody":"SELECT  avg(datediff(SECOND,p.CreationDate, sed.ApprovalDate)*1.0) as seconds_to_approved_answer\nfrom SuggestedEdits sed\nleft join Posts p\non p.Id = sed.PostId\nwhere YEAR(p.CreationDate) = '2017'","CreationDate":"2019-09-25 8:09:50","validated":true}
{"QuerySetId":1115525,"Title":"Answers to Duplicate Questions by User","Description":null,"QueryBody":"SELECT     [Post Link] = p.Id\n  , a.Score\n  , Answer    = case when p.AcceptedAnswerId = a.Id then 1 else 0 end\nfrom Posts p\n  inner join Posts a\n    on a.ParentId = p.Id\nwhere exists (\n  SELECT 1\n  from PostLinks pl\n  where pl.PostId = p.Id\n    and pl.LinkTypeId = 3\n  )","CreationDate":"2019-09-26 23:44:09","validated":true}
{"QuerySetId":1115877,"Title":"Most upvoted answers of the past 6 months in a tag","Description":null,"QueryBody":"DECLARE  @TagName nvarchar(255) = '##TagName##'\n\nSELECT Posts.Id AS [Post Link], Posts.Score\nFROM Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE Posts.PostTypeId = 1\n  AND Posts.CreationDate >= DATEADD(MONTH, -6, GETDATE())\n  AND Posts.CreationDate <= GETDATE()\n  AND Tags.TagName = @TagName\nORDER BY Score DESC","CreationDate":"2019-09-28 7:40:21","validated":true}
{"QuerySetId":1117714,"Title":"Comments on a post by a user","Description":null,"QueryBody":"SELECT  c.Id As [Comment Link], c.Text\nFROM Comments c JOIN Posts p ON p.Id=c.PostId\nWHERE (p.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##))","CreationDate":"2019-09-30 20:41:56","validated":true}
{"QuerySetId":1117790,"Title":"Usernames used in possible comment replies to posts by a deleted user","Description":null,"QueryBody":"WITH  texts_cte as\n(\nSELECT DISTINCT c.Text AS Text\nFROM Comments c JOIN Posts p ON (c.PostId=p.Id)\n  AND (p.OwnerDisplayName='user' + Convert(nvarchar(20), ##UserId##)) \nWHERE (c.Text LIKE '%@%')\n)\n, substrings_cte AS\n(\nSELECT substring(Text,charindex('@',Text), len(Text)) AS TextFrom\nFROM texts_cte\n),\nnames AS\n(\nSELECT substring(TextFrom,1,patindex('%[ :,.]%',TextFrom+' ')-1) AS Reply\nFROM substrings_cte\n)\n\nSELECT Reply, Count(*) AS Count\nFROM Names\nGROUP BY Reply\nORDER BY Count(*) DESC","CreationDate":"2020-01-09 1:19:14","validated":true}
{"QuerySetId":1118527,"Title":"closed edited and reopened questions","Description":null,"QueryBody":"WITH  closed_and_edited AS (\nSELECT c.PostId, MIN(e.CreationDate) AS EditDate\n  FROM PostHistory AS c\n  INNER JOIN PostHistory AS e\n    ON c.PostId = e.PostId\n   AND c.PostHistoryTypeId = 10 -- Post Closed\n   AND e.PostHistoryTypeId = 5 -- Edit Body\n   WHERE c.CreationDate < e.CreationDate\n  GROUP BY c.PostId\n)\nSELECT COUNT(*) AS 'Closed and edited',\n  COUNT(oa.PostId) AS 'Closed, edited and reopened',\n  ROUND(COUNT(oa.PostId) * 100.0 \/ COUNT(*), 2) AS '%'\n  FROM closed_and_edited AS q\n  OUTER APPLY (\n    SELECT PostId\n      FROM PostHistory\n      WHERE PostId = q.PostId\n        AND PostHistoryTypeId = 11 -- Post Reopened\n        AND CreationDate >= q.EditDate\n  ) oa","CreationDate":"2019-10-02 0:24:09","validated":true}
{"QuerySetId":1119328,"Title":"Users with most accepted answers","Description":null,"QueryBody":"SELECT Posts.OwnerUserId AS [User Link],\n       COUNT(*) AS Num\nFROM Posts\nINNER JOIN Votes ON Votes.PostId = Posts.Id\nINNER JOIN Users ON Users.Id = Posts.OwnerUserId\nWHERE Votes.VoteTypeId = 1\n  AND Posts.PostTypeId = 2\nGROUP BY Posts.OwnerUserId\nORDER BY Num DESC","CreationDate":"2019-10-03 3:59:36","validated":true}
{"QuerySetId":1120813,"Title":"Shortest time to Famous Badge","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  p.Id AS [Post Link],\n  p.OwnerUserId AS [User Link],\n  p.CreationDate, b.Date,\n  DATEDIFF(month, p.CreationDate, b.Date) AS Months,\n  DATEDIFF(day, p.CreationDate, b.Date) AS Days,\n  DATEDIFF(hour, p.CreationDate, b.Date) AS Hours,\n  DATEDIFF(minute, p.CreationDate, b.Date) AS Minutes,\n  p.ViewCount, p.Score, p.AnswerCount, p.Tags\nFROM Posts p JOIN Badges b ON (p.OwnerUserId=b.UserId)\nWHERE (p.PostTypeId=1) and (p.ViewCount>=10000)\n  and (b.Name='Famous Question') and (p.CreationDate<=b.Date)\nORDER BY DATEDIFF(minute, CreationDate, b.Date) ASC","CreationDate":"2019-10-05 14:20:23","validated":true}
{"QuerySetId":1121195,"Title":"Questions with no upvoted answers","Description":null,"QueryBody":"SELECT  q.ID AS [Post Link]\nFROM Posts q \nWHERE PostTypeId = 1 \nAND Score > 0 \nAND ClosedDate is null \nAND (SELECT count(*) from Posts a where a.ParentId = q.Id and a.Score > -1) = 0\nAND AcceptedAnswerId is null \nORDER BY CreationDate asc","CreationDate":"2019-10-06 20:49:17","validated":true}
{"QuerySetId":1122254,"Title":"Top 100 Lowest Rated Posts","Description":null,"QueryBody":"SELECT  top(100) Posts.id as [Post Link], Posts.score as [Score] from [Posts]\nwhere [PostTypeId] = 1 and [Score] < 0\norder by [Score]","CreationDate":"2019-10-09 3:08:54","validated":true}
{"QuerySetId":1122552,"Title":"Number of Queries in 2017","Description":null,"QueryBody":"SELECT Count(Id) AS 'COUNT_ID' FROM Posts \nWHERE Year(CreationDate) = 2017\nGROUP BY Tags\nORDER BY COUNT_ID DESC","CreationDate":"2019-10-10 8:35:56","validated":true}
{"QuerySetId":1122854,"Title":"posts up and down votes","Description":null,"QueryBody":"SELECT \n    PostId, \n    up = sum(case when VoteTypeId = 2 then 1 else 0 end), \n    down = sum(case when VoteTypeId = 3 then 1 else 0 end)\nfrom Votes\nwhere VoteTypeId in (2,3)\ngroup by PostId","CreationDate":"2019-10-09 22:38:30","validated":true}
{"QuerySetId":1123289,"Title":"Top 10 shortest questions with non-negative score","Description":null,"QueryBody":"SELECT  TOP 10 LEN(p.body) as len, p.body, p.id\nfrom Posts as p\nwhere p.score>-1 AND PostTypeId=1 AND LEN(p.body)>0\nORDER BY len asc","CreationDate":"2019-10-10 14:37:58","validated":true}
{"QuerySetId":1123888,"Title":"User's Favorited Posts. Ordered by Date Favorited (DESC).","Description":null,"QueryBody":"SELECT  postid as [Post Link] \n     , v.creationdate as [Favorited on]\nfrom votes v \ninner join posts p on p.id = v.postid\nwhere userid = 25197\nand votetypeid = 5 \norder by v.creationdate desc","CreationDate":"2019-10-11 9:03:35","validated":true}
{"QuerySetId":1125068,"Title":"Answers that are linked by their parent post","Description":null,"QueryBody":"SELECT  p.id as [Post Link]\n     , p.creationdate\n     , pl.relatedpostid as [Post Link]\n     , case pl.linktypeid \n       when 1 then 'Mentioned'\n       when 3 then 'Duplicate'\n       else ''\n       end [Link type]\n     \nfrom posts p\nleft outer join postlinks pl on pl.postid = coalesce(p.parentid, p.id)\nand posttypeid = 2 -- A","CreationDate":"2019-10-14 13:50:16","validated":true}
{"QuerySetId":1125135,"Title":"Questions and answers per year","Description":null,"QueryBody":"SELECT \n  Date AS [Dates],\n  SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) AS [Questions],\n  SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) AS [Answers]\nFROM\n(\n  SELECT\n    YEAR(CreationDate) AS [Date],\n    PostTypeId\n  FROM\n    Posts\n  WHERE\n    PostTypeId = 1 or PostTypeId = 2\n) AS Sel\nGROUP BY\n  Date\nORDER BY\n  Date DESC","CreationDate":"2019-10-14 16:16:35","validated":true}
{"QuerySetId":1125353,"Title":"Search for \"grimble\" in user profiles","Description":null,"QueryBody":"SELECT  aboutme, id as [User Link] from users \nwhere aboutme like '%grimble%'","CreationDate":"2019-10-21 17:12:30","validated":true}
{"QuerySetId":1125373,"Title":"TOP 50 StackOverflow user in Bangladesh","Description":null,"QueryBody":"SELECT  TOP(50) ROW_NUMBER() OVER (ORDER BY Reputation Desc) as PositionNumber, Id [User Link], DisplayName, Reputation, WebsiteUrl, Location\nFrom Users\nWhere LOWER(Location) LIKE LOWER('%Bangladesh%')\nORDER BY\nReputation DESC;","CreationDate":"2019-10-14 23:20:27","validated":true}
{"QuerySetId":1126489,"Title":"Most upvoted questions tagged with \"tensorflow\"","Description":null,"QueryBody":"SELECT  TOP 100 count(v.postid) AS 'Vote count', v.postid AS [Post Link],p.body\nFROM votes v \nINNER JOIN posts p on p.id=v.postid\nWHERE p.tags LIKE '%tensorflow%'\nGROUP BY v.postid,p.body\nORDER BY 'Vote count' DESC","CreationDate":"2020-08-11 9:26:28","validated":true}
{"QuerySetId":1128256,"Title":"All posts by user","Description":null,"QueryBody":"SELECT \n  Post.Id as [Post Link],\n  Type.Name as [Type],\n  Post.Score as [Score],\n  Post.CreationDate as [CreationDate],\n  coalesce(Post.Tags, Parent.Tags) as [Tags]\nfrom Posts as Post\n  left join PostTypes as Type on Type.Id = Post.PostTypeId\n  left join Posts as Parent on Parent.Id = Post.ParentId\nwhere Post.OwnerDisplayName = ##UserName:string##\norder by Post.Id ASC","CreationDate":"2019-10-19 22:23:50","validated":true}
{"QuerySetId":1131594,"Title":"Number of up- and downvotes per day","Description":null,"QueryBody":"SELECT  LEFT(CONVERT(varchar, CreationDate,112),6) as 'CreationDate',\n  SUM(CASE VoteTypeId WHEN 2 THEN 1 ELSE 0 END) AS 'Upvotes',\n  SUM(CASE VoteTypeId WHEN 3 THEN 1 ELSE 0 END) AS 'Downvotes'\n  FROM Votes\n  WHERE VoteTypeId IN (2, 3)\n  GROUP BY LEFT(CONVERT(varchar, CreationDate,112),6)\n  ORDER BY LEFT(CONVERT(varchar, CreationDate,112),6)","CreationDate":"2019-10-23 19:22:09","validated":true}
{"QuerySetId":1134826,"Title":"Number of users which made their last post in a given month","Description":null,"QueryBody":"WITH  last_cte as\n(\nSELECT\n    OwnerUserId,\n    MAX(Id) AS MaxId\nFROM Posts\nGROUP BY OwnerUserId\n), dates_cte as\n(\nSELECT\n  p.OwnerUserId AS odn, p.Id AS pid, p.CreationDate AS CDate\n  FROM Posts p INNER JOIN last_cte ON p.Id=maxid\n)\n\nSELECT eomonth(CDate),\n  COUNT(odn)\nFROM dates_cte\nGROUP BY eomonth(CDate)\nORDER BY eomonth(CDate)","CreationDate":"2019-10-26 10:02:29","validated":true}
{"QuerySetId":1137076,"Title":"(fork) Post Count by Tag","Description":null,"QueryBody":"SELECT  T.TagName,\nCOUNT(*) as [Total],\nSUM(CASE WHEN P.AcceptedAnswerId is not null THEN 1 ELSE 0 END) AS [Answered],\nSUM(CASE WHEN p.ClosedDate IS NOT NULL THEN 1 ELSE 0 END) AS [Closed],\navg(cast(p.Score as float)) as [Average Score],\nstdev(cast(p.Score as float)) as [Std. Dev]\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nWHERE P.PostTypeId = 1\nGROUP BY T.TagName\nORDER BY Count(*) DESC","CreationDate":"2019-11-08 9:55:19","validated":true}
{"QuerySetId":1137469,"Title":"Extract questions and answers","Description":null,"QueryBody":"SELECT  TOP 2 q.id, \n             q.title, \n             q.body           q_body, \n             q.parentid       qpid, \n             q.acceptedanswerid, \n             q.score          q_score, \n             q.answercount, \n             q.tags, \n             q.viewcount, \n             answers.parentid aa_pid, \n             answers.id       aa_id, \n             answers.body     aa_body, \n             answers.score    AS aa_score, \n             answers.posttypeid \nFROM posts answers \n  INNER JOIN posts q \n    ON answers.parentid = q.id \nWHERE  (answers.id = q.acceptedanswerid) ","CreationDate":"2019-11-08 19:57:51","validated":true}
{"QuerySetId":1138308,"Title":"Votes per post by month","Description":null,"QueryBody":"WITH  posts_by_month as (\nselect cast (dateadd(month, DATEDIFF(month, getdate(), p.CreationDate), \n       getdate()) as DATE) Month, \n       count(*) post_count\nfrom Posts p\ngroup by DATEDIFF(month, getdate(), p.CreationDate)\n),\n\nvotes_by_month as(\nselect cast (dateadd(month, DATEDIFF(month, getdate(), v.CreationDate), getdate()) as DATE) Month, \n       vt.Name,\n       count(*) vote_count\nfrom Votes v \n     join VoteTypes vt on vt.Id = VoteTypeId\nwhere VoteTypeId in (1,2,3)\ngroup by DATEDIFF(month, getdate(), v.CreationDate),\n         vt.Name\n)\n\nselect v.Month, \n       cast(vote_count as float)\/post_count\n       Name\nfrom posts_by_month p\n     join votes_by_month v on p.Month = v.Month\norder by v.Month","CreationDate":"2019-10-30 19:54:19","validated":true}
{"QuerySetId":1139362,"Title":"Get score by post type for UserName","Description":null,"QueryBody":"DECLARE  @UserId as int\nselect @UserId = Id From Users where DisplayName = '##UserName##'\nSelect (Select SUM(Score) From Posts where OwnerUserId = @UserId AND PostTypeId = 2) AS AnswerScore,\n(Select SUM(Score) From Posts where OwnerUserId = @UserId AND PostTypeId = 1) AS QuestionScore,\n(Select SUM(Score) From Comments where UserId = @UserId) AS CommentScore,\n(Select TOP(1) Id From Users where Id = @UserId) As UserId","CreationDate":"2019-10-31 20:03:21","validated":true}
{"QuerySetId":1145990,"Title":"Percentage of the total rep of users with \"monica\" substring","Description":null,"QueryBody":"WITH  Monica AS (\n  SELECT SUM(Reputation) AS Monica\n  FROM Users\n  WHERE LOWER(DisplayName) LIKE '%monica%'\n),\nSumRep AS (\n  SELECT SUM(Reputation) AS SumRep\n  FROM Users\n)\nSELECT Monica.Monica, SumRep.SumRep, 100.0 * Monica.Monica \/ SumRep.SumRep AS Pct\nFROM Monica, SumRep;","CreationDate":"2019-11-10 4:49:59","validated":true}
{"QuerySetId":1146040,"Title":"TOP 200 users from BANGLADESH","Description":null,"QueryBody":"SELECT  TOP 200\n   ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n   Id,\n   CreationDate,\n   Id AS [User Link],\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Bangladesh%' \nORDER BY\n   reputation DESC","CreationDate":"2019-11-10 12:53:53","validated":true}
{"QuerySetId":1148206,"Title":"StackOverflow users from Nova Scotia","Description":"List of StackOverflow users from Turkey.\n","QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position\n        ,DisplayName\n        ,Reputation\n        ,WebsiteUrl\n        ,AboutMe\n        ,'http:\/\/stackoverflow.com\/users\/' + CONVERT(VARCHAR(10), Id) AS ProfileUrl\n    FROM Users(NOLOCK)\n   WHERE UPPER(Location) like N'%NOVA SCOTIA%'\n      OR Location like N'%, NS'\n      OR Location like N'%,NS'\n     -- OR UPPER(Location) like N'%HALIFAX%'\n     -- OR Location like N'%HALIFAX%'\n\nORDER BY Reputation DESC","CreationDate":"2019-11-14 1:32:57","validated":true}
{"QuerySetId":1148217,"Title":"Estimated Rep Bump from Question Upvote Change","Description":null,"QueryBody":"SELECT  p.OwnerUserId AS [User Link], COUNT(1) AS 'Total Upvotes On Questions', COUNT(1) * 5 AS 'Estimated Rep Gain'\n  FROM Posts p \n    INNER JOIN Votes v ON p.Id = v.PostId\n  WHERE p.PostTypeId = 1 -- Question\n    AND v.VoteTypeId = 2 -- UpMod aka upvotes\n    GROUP BY p.OwnerUserId\n    ORDER BY 3 DESC","CreationDate":"2019-11-14 4:01:02","validated":true}
{"QuerySetId":1148451,"Title":"Top 500 tagged with tidyverse","Description":null,"QueryBody":"SELECT  top 500 Id as [Post Link], Score, ViewCount, Tags from Posts \nwhere Tags like '%<##tag?tidyverse##>%'\norder by ViewCount desc","CreationDate":"2019-11-14 18:59:42","validated":true}
{"QuerySetId":1148581,"Title":"Cape Town developers asking questions with NODE Tag","Description":null,"QueryBody":"SELECT  distinct\nU.*\nfrom Users U\njoin Posts P on P.OwnerUserId = U.id\njoin PostTypes PT on PT.id = P.PostTypeId\n\nwhere\nupper(U.location) like '%CAPE TOWN%'\nand (\n U.WebsiteUrl != ''\n or U.AboutMe != ''\n)\nand PT.Name in ('Question', 'Answer')\nand upper(P.Tags) like '%NODE%'\n\norder by U.Reputation desc","CreationDate":"2019-11-14 23:46:13","validated":true}
{"QuerySetId":1148839,"Title":"TOP 100 Bosnians on StackOverflow","Description":null,"QueryBody":"SELECT  TOP 100\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],     \n    Reputation,\n    UpVotes,\n    DownVotes,\n    Views,\n    Location,\n    AboutMe,\n    WebsiteUrl\nFROM\n    Users\nWHERE\n    LOWER(Location) like '%bosnia%' \n    OR LOWER(Location) like '%bosna%'\n    OR Location like '% BiH%'\nORDER BY\n    Reputation DESC;","CreationDate":"2019-11-15 14:26:51","validated":true}
{"QuerySetId":1156404,"Title":"mean score in 30 days for questions and answers","Description":null,"QueryBody":"WITH  a as\n(\n   select [Month], PostTypeId, Score,\n           SUM(case when VoteTypeId = 2 then 1.00 when VoteTypeId = 3 then -1.00 else 0.00 end) quickVotes\n   from Votes v \n   join\n   (   Select CAST(cast(DATEPART(YYYY, CreationDate) as float) + cast(DATEPART(MM, CreationDate) as float)\/12 as float) [Month], \n          Score, Id, CreationDate, AnswerCount, PostTypeId from Posts\n   ) p \n       on p.Id = v.PostId \n       where DATEDIFF(day, p.CreationDate, v.CreationDate)\n             BETWEEN 0 AND 30\n       and p.PostTypeId in (1)\n   group by [postId], [Month], PostTypeId, Score\n) \n\nselect [Month],\n       sum(quickVotes) SumAfterMonth, \n       avg(quickVotes) ScoreAfterMonth,\n       avg(Score*1.00) ScoreTotal\nfrom a\ngroup by [Month], PostTypeId\norder by PostTypeId,[Month]","CreationDate":"2019-11-20 2:29:18","validated":true}
{"QuerySetId":1157669,"Title":"Posts containing two given words","Description":null,"QueryBody":"SELECT  TOP ##num?100##\n  Id As [Post Link], OwnerUserId AS [User Link], CreationDate, LastActivityDate,  Score, ViewCount, Body\n  FROM Posts WHERE\n    (CONCAT(LOWER(Title),' ',LOWER(Body)) LIKE '%##text1?cauchy##%') AND (CONCAT(LOWER(Title),' ',LOWER(Body)) Like '%##text2?swartz##%')\n  ORDER BY CreationDate DESC","CreationDate":"2019-11-24 1:44:03","validated":true}
{"QuerySetId":1158204,"Title":"Percentage of the total rep of users with \"monica\" substring (only active in the last 2 months)","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT OwnerUserId AS UserId\n  FROM Posts\n  WHERE\n    CreationDate > DATEADD(d, -60, CURRENT_TIMESTAMP)\n    AND\n    OwnerUserId > 0\n\n  UNION\n\n  SELECT UserId\n  FROM Comments\n  WHERE\n    CreationDate > DATEADD(d, -60, CURRENT_TIMESTAMP)\n    AND\n    UserId > 0\n),\nRaw2 AS (\n  SELECT UserId\n  FROM Raw\n  GROUP BY UserId\n),\nRaw3 AS (\n  SELECT\n    SUM(Users.Reputation) AS AllRep,\n    SUM(\n      CASE\n        WHEN LOWER(Users.DisplayName) LIKE '%monica%'\n        THEN Users.Reputation\n        ELSE 0\n      END) AS MonicaRep\n  FROM Users, Raw2\n  WHERE Raw2.UserId = Users.Id\n)\nSELECT AllRep, MonicaRep, 100.0 * MonicaRep \/ AllRep AS MonicaPct FROM Raw3;","CreationDate":"2019-11-23 20:21:08","validated":true}
{"QuerySetId":1158570,"Title":"Answers with the most downs","Description":null,"QueryBody":"SELECT  TOP 100\n  Posts.Id AS [Post Link],\n  Posts.Id AS Id,\n  MIN(Posts.Score) AS Score,\n  COUNT(*) AS Downs\nFROM Posts, Votes\nWHERE\n  Posts.PostTypeId = 2\n  AND\n  Votes.VoteTypeId = 3\n  AND\n  Votes.PostId = Posts.Id\nGROUP BY Posts.Id\nORDER BY Downs DESC, Posts.Id","CreationDate":"2019-11-25 8:56:19","validated":true}
{"QuerySetId":1159016,"Title":"Returns, for each user, the total amount of reputation offered as bounty, the number of bounties offered, and current reputation, ordered by the total reputation offered.","Description":"Returns, for each user, the total amount of reputation offered as bounty, the number of bounties offered, and current reputation, ordered by the total reputation offered.","QueryBody":"SELECT  TOP 100\nRANK() OVER (ORDER BY SUM(Votes.BountyAmount) DESC) AS Rank,\n  SUM(Votes.BountyAmount) AS BountyTotal\nFROM\n  Votes\n  INNER JOIN Users ON Votes.UserId = Users.Id\n  LEFT JOIN Posts questions ON Votes.PostId = questions.Id\nWHERE\n  Votes.VoteTypeId = 8\n  AND Votes.UserId > -1\n  AND Users.Reputation > ##MinReputation?1##\nGROUP BY\n  Votes.UserId,\n  Users.Id\nHAVING \n  COUNT(Votes.BountyAmount) >= ##MinBountyNo?1##\nORDER BY\n  SUM(Votes.BountyAmount) DESC","CreationDate":"2020-05-27 0:12:54","validated":true}
{"QuerySetId":1159238,"Title":"questions by 1 or more people","Description":null,"QueryBody":"SELECT  \n  owneruserid as [User Link],\n  id as [Post Link],\n  format(creationdate,'yyyy-MM-dd') as Asked,\n  len(body) as length,\n  ViewCount as Views,\n  AnswerCount as Answers,\n  FavoriteCount as Favs,\n  Score,\n  Tags\ninto #tmp\nfrom posts\nwhere posttypeid=1\nand owneruserid in ( ##UserID## )\n\n\nSELECT * from #tmp\norder by score desc, views desc\n\n--UserID: Enter one or more (comma separated) numeric UserID's:","CreationDate":"2019-11-26 18:09:03","validated":true}
{"QuerySetId":1159374,"Title":"Max and average reputation per month 2019","Description":null,"QueryBody":"SELECT  year(p.creationdate) as y\n, month(p.creationdate) as m\n, count_big(1) as num_answers\n, avg(cast(u.reputation as bigint)) as avg_rep\n, max(u.reputation) as max_rep\nfrom posts p\njoin users u\n  on p.owneruserid = u.id\nwhere p.posttypeid = 2\n  and p.creationdate >= '2019-01-01'\ngroup by year(p.creationdate)\n, month(p.creationdate)\norder by 1,2,3;","CreationDate":"2019-11-27 2:20:52","validated":true}
{"QuerySetId":1159501,"Title":"Number of upvotes for posts by a certain user in a certain tag","Description":null,"QueryBody":"SELECT  COUNT(*) AS 'Number of upvotes'\n  FROM Posts AS p\n  INNER JOIN PostTags AS pt\n    ON COALESCE(p.ParentId, p.Id) = pt.PostId\n  INNER JOIN Tags AS t\n    ON t.Id = pt.TagId\n  INNER JOIN Votes AS v\n    ON v.PostId = p.Id\n  WHERE v.VoteTypeId = 2 -- Upvote\n    AND p.OwnerUserId = ##UserId:int##\n    AND t.TagName = ##TagName:string##","CreationDate":"2019-11-27 17:36:36","validated":true}
{"QuerySetId":1159686,"Title":"Deleted user's answers (w. scores & attributed questions)","Description":null,"QueryBody":"SELECT \n    a.Id as link,\n    q.Title as title,\n    q.Body as question,\n    q.OwnerUserId as asker,\n    q.OwnerDisplayName as asker_name,\n    a.Body as answer,\n    q.Tags as tags,\n    a.Score as score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerDisplayName = '##UserName##'\n  and a.OwnerUserId is null\norder by a.Score desc","CreationDate":"2019-11-28 0:22:35","validated":true}
{"QuerySetId":1159859,"Title":"All tags with no body","Description":null,"QueryBody":"SELECT  t.TagName, p.Body, t.Count, t.WikiPostId\nFrom Tags t Inner Join Posts p On t.ExcerptPostId=p.Id\nWhere p.Body Like ''\nOrder By t.[Count] Desc","CreationDate":"2020-02-04 14:34:52","validated":true}
{"QuerySetId":1159967,"Title":"Users with username containing the given string","Description":null,"QueryBody":"SELECT \n  Id AS [User Link],\n  Reputation,\n  LastAccessDate,\n  Location, UpVotes, DownVotes, Views,\n  DisplayName\nFROM Users\nWHERE DisplayName LIKE '%##text?Monica##%'\nORDER BY Reputation DESC","CreationDate":"2019-11-28 20:18:48","validated":true}
{"QuerySetId":1160377,"Title":"top omments by a user within a length limit, sorted by creation date","Description":"See also sorted by score https:\/\/data.stackexchange.com\/stackoverflow\/query\/1291565","QueryBody":"SELECT  TOP ##Limit:int?50000##\n  c.Score,\n  c.Text AS [Text],\n  c.CreationDate,\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),c.Id) AS [Comment Permalink]\nFROM Comments c\nWHERE\n  LEN(c.Text) >= ##MinCommentLength:int?0## AND\n  LEN(c.Text) <= ##MaxCommentLength:int?500## AND\n  (\n    c.UserId = ##UserId:int##\n  ) AND\n  c.CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?0##, GETDATE())\nORDER BY c.CreationDate DESC","CreationDate":"2020-09-06 14:36:00","validated":true}
{"QuerySetId":1162360,"Title":"Most popular StackOverflow tags in 2019","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as YearRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInYear,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate <= '2019-12-31'\nand Posts.CreationDate >= '2019-01-01'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 10)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2019-12-04 21:08:51","validated":true}
{"QuerySetId":1162837,"Title":"Ratio between downvoted and commented posts","Description":null,"QueryBody":"SELECT  \n  u.Id AS [User Link],\n  u.Downvotes,\n  COUNT(DISTINCT c.PostId) AS CommentedPosts,\n  CAST(u.Downvotes as decimal)\/CAST(COUNT(DISTINCT c.PostId) as decimal) AS Ratio\nFROM Users u INNER JOIN Comments c ON c.UserId=u.Id\nWHERE u.Downvotes>##min?100##\nGROUP BY u.Id, u.Downvotes\nORDER BY CAST(u.Downvotes as decimal)\/CAST(COUNT(DISTINCT c.PostId) as decimal) DESC","CreationDate":"2019-12-05 22:02:15","validated":true}
{"QuerySetId":1162854,"Title":"Total number of downvotes and commented posts and their ratio","Description":null,"QueryBody":"WITH  counts_cte AS\n(\nSELECT\n  u.Id AS uid,\n  u.Downvotes AS down,\n  COUNT(DISTINCT c.PostId) AS CommentedPosts\n  FROM Users u LEFT OUTER JOIN Comments c ON c.UserId=u.Id\nGROUP BY u.Id, u.Downvotes\n)\n\nSELECT\n  SUM(down) AS [Total Downvotes],\n  SUM(CommentedPosts) AS [Total Comments],\n  CAST(SUM(down) AS decimal)\/CAST(SUM(CommentedPosts) AS decimal)\nFROM counts_cte","CreationDate":"2019-12-05 22:18:32","validated":true}
{"QuerySetId":1163637,"Title":"Top 10 questions with worst score from users from Monterrey","Description":null,"QueryBody":"SELECT  #, DisplayName AS 'Owner', Location, Title AS 'Question', Tags, Body, T.Score, Text AS 'Answer' FROM \n(\n\u00a0 SELECT TOP 10\n\u00a0 row_number() OVER (ORDER BY Score) AS '#',\n\u00a0 A.*,\n\u00a0 B.DisplayName,\n\u00a0 B.Location\n\u00a0 FROM Posts A \n\u00a0 INNER JOIN Users B ON A.OwnerUserId = B.Id\n\u00a0 WHERE (A.PostTypeId = 1 AND B.Location LIKE 'Monterrey%')\n\u00a0 ORDER BY Score\n) T\nINNER JOIN Comments C ON C.PostId = T.Id\nORDER BY T.#","CreationDate":"2020-12-06 9:40:34","validated":true}
{"QuerySetId":1163670,"Title":"Comments Search with Score, Length, Age Filters","Description":null,"QueryBody":"SELECT  TOP ##Limit:int?100##\n  Id AS [Id],\n  Score,\n  LOWER(Text) AS [Text],\n  'site:\/\/posts\/comments\/' + CONVERT(nvarchar(20),Id) AS [Comment Permalink]\nFROM Comments c\nWHERE\n  Score <= ##MaxCommentScore:int?5## AND\n  LEN(Text) >= ##MinCommentLength:int?15## AND\n  LEN(Text) <= ##MaxCommentLength:int?15## AND\n  Id >= ##MinCommentId:int?0## AND\n  CreationDate < DATEADD(dd, -##MinCommentAgeDays:int?30##, GETDATE())\nORDER BY Id ASC","CreationDate":"2019-12-11 8:15:38","validated":true}
{"QuerySetId":1165483,"Title":"Highest Scoring Solo Question Askers With Reputation above 10K","Description":null,"QueryBody":"SELECT   *\n  FROM  Users u\n    INNER JOIN  (\n                SELECT  u.Id\n                  FROM  Users u\n                    INNER JOIN (\n                                SELECT  p.OwnerUserId\n                                  FROM  Posts p\n                                  GROUP BY p.OwnerUserId\n                                  HAVING COUNT(*) = 1\n                               ) a ON a.OwnerUserId = u.Id\n                  WHERE Reputation > 10000\n                ) a ON a.Id = u.Id\n    INNER JOIN Posts p ON p.OwnerUserId = u.Id AND p.PostTypeId = 1","CreationDate":"2019-12-10 20:36:52","validated":true}
{"QuerySetId":1166054,"Title":"Posts honored by VoteType 4","Description":null,"QueryBody":"SELECT \n  Id,\n  CreationDate,\n  PostId AS [Post Link],\n  'site:\/\/q\/' + CAST(PostId AS VARCHAR(MAX)) + '|Link' AS\n    [Working link]\nFROM Votes\nWHERE VoteTypeId = 4\nORDER BY Id","CreationDate":"2019-12-11 21:08:15","validated":true}
{"QuerySetId":1166505,"Title":"Find top community wiki-locked questions","Description":null,"QueryBody":"SELECT  TOP 10 \n  p.Id AS [Post Link], \n  p.Tags, \n  p.CreationDate, \n  p.Score\nFROM Posts AS p\ninner join posthistory phl on phl.postid = p.id\nleft outer join posthistory phu on phu.postid = p.id\nWHERE\n    p.PostTypeId = 1 -- Questions\n    AND p.CommunityOwnedDate is not null\n    AND phl.posthistorytypeid = 14\n    AND (phu.posthistorytypeid = null \n    or (phu.posthistorytypeid = 15 and phu.creationdate > phl.creationdate))\nORDER BY p.Score DESC","CreationDate":"2019-12-12 17:01:54","validated":true}
{"QuerySetId":1166779,"Title":"Get Top Users for Snowflake-datawarehouse","Description":null,"QueryBody":"DECLARE  @limit int = 100;\nDECLARE @tag_name nvarchar(35) = 'snowflake-datawarehouse';\nDECLARE @tag_id int = (select id from tags where tagname = @tag_name);\nSELECT\n  users.id \"User Link\",\n    Count(*) AS AnswerCount1\n    \nFROM \n    Posts\n    join users on (users.id = Posts.OwnerUserid)\n    \nWHERE PostTypeId = 2\nGROUP BY \n    users.id\nORDER BY \n    AnswerCount1 DESC","CreationDate":"2019-12-13 6:05:10","validated":true}
{"QuerySetId":1168002,"Title":"Top android users from dominican","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%dominican%'\n     AND  TagName = 'android'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2020-08-20 20:22:00","validated":true}
{"QuerySetId":1168041,"Title":"Search for answers of a specific user to questions in my favorites","Description":null,"QueryBody":"SELECT  a.id AS [Post Link], a.body\n  FROM Posts AS a\n  INNER JOIN Votes AS v\n    ON v.PostId = a.ParentId\n  WHERE v.UserId = ##UserId:int##\n    AND v.VoteTypeId = 5 -- Favorite\n    AND a.OwnerUserId = ##AnotherUserId:int##","CreationDate":"2019-12-16 2:05:19","validated":true}
{"QuerySetId":1168562,"Title":"Top Android Dev in Malaysia Based on UpVote","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%malaysia%'\n     AND  TagName = 'android'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2019-12-17 11:55:59","validated":true}
{"QuerySetId":1168819,"Title":"Users with most answers in a given tag","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  a.OwnerUserId AS [User Link], a.OwnerDisplayName,\n  COUNT (a.Id) AS [Question Count],\n  SUM (a.Score) AS [Total Score]\nFROM Posts a INNER JOIN Posts q ON a.ParentId=q.Id\nWHERE (a.PostTypeId=2) AND (q.PostTypeId=1) AND (q.Tags LIKE '%<##tagName?data-explorer##>%')\n---PostTypeId=2 means answer\nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY COUNT (a.Id) DESC","CreationDate":"2019-12-17 20:09:36","validated":true}
{"QuerySetId":1172409,"Title":"Top C# Contributors From India","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,us.Location,us.Reputation,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('c#')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%india%'\nORDER BY Score DESC;","CreationDate":"2019-12-27 13:43:00","validated":true}
{"QuerySetId":1173323,"Title":"Quickest new contributor answers to new contributor questions","Description":null,"QueryBody":"WITH  FirstPosts AS (\n  SELECT MIN(Id) AS PostId\n  FROM Posts\n  WHERE OwnerUserId > 0\n  GROUP BY OwnerUserId\n)\nSELECT TOP 100\n  A.Id AS [Post Link],\n  Q.OwnerUserId AS [User Link],\n  A.OwnerUserId AS [User Link],\n  DATEDIFF(s, Q.CreationDate, A.CreationDate) AS Seconds\nFROM Posts Q, Posts A\nWHERE\n  A.ParentId = Q.Id\n  AND\n  Q.Id IN (SELECT PostId FROM FirstPosts)\n  AND\n  A.Id IN (SELECT PostId FROM FirstPosts)\n  AND\n  Q.OwnerUserId <> A.OwnerUserId\n  AND\n  Q.CreationDate < A.CreationDate\nORDER BY Seconds, A.Id","CreationDate":"2020-01-01 7:31:05","validated":true}
{"QuerySetId":1173606,"Title":"Find posts by history event type","Description":null,"QueryBody":"DECLARE  @HistoryEventType int = ##HistoryEventType##\n\nSELECT ph.PostId as [Post Link], pht.Name\nFROM PostHistory ph JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id\nWHERE ph.PostHistoryTypeId=@HistoryEventType","CreationDate":"2020-01-02 2:51:50","validated":true}
{"QuerySetId":1174277,"Title":"Best time for an answer","Description":null,"QueryBody":"WITH tmp AS(\n  SELECT TimeDiff = DATEDIFF(minute, q.CreationDate, a.CreationDate),\n         Period = ROUND((CAST(DATEPART(\"weekday\", q.CreationDate) AS numeric) +\n                         CAST(DATEPART(\"hour\", q.CreationDate) AS numeric) \/ 24), 2)\n  FROM Posts q\n     LEFT OUTER JOIN Posts a ON q.AcceptedAnswerId = a.Id\n     WHERE q.AcceptedAnswerId > 0 AND \n           q.CreationDate > DATEADD(\"year\", -@YearsBack, CURRENT_TIMESTAMP)\n  )\n  SELECT Period,\n         ROUND(AVG(CAST(TimeDiff AS FLOAT)), 2) AS [Average time-to-answer, minutes, UTC (GMT)]\nFROM tmp\n   WHERE ABS(TimeDiff) < @MaxTimeDiff\n   GROUP BY Period\n   ORDER BY Period","CreationDate":"2020-01-03 22:00:46","validated":true}
{"QuerySetId":1175759,"Title":"Find Posts edited after a Leave Closed result of a Reopen Votes review queue","Description":null,"QueryBody":"SELECT \n P.Id P_Id,\n P.LastEditDate P_LastEditDate,\n RT.Id RT_Id,\n RTT.Name RTT_Name,\n RT.CreationDate RT_CreationDate,\n RTS.Name RTS_Name,\n RTR.Id RTR_Id,\n RTRT.Name RTTR_Name,\n RTR.CreationDate RTR_CreationDate\nFROM ReviewTasks RT\nINNER JOIN ReviewTaskTypes RTT\n ON RT.ReviewTaskTypeId = RTT.Id\nINNER JOIN ReviewTaskStates RTS\n ON RT.ReviewTaskStateId = RTS.Id\nINNER JOIN ReviewTaskResults RTR\n ON RT.CompletedByReviewTaskId = RTR.Id\nINNER JOIN ReviewTaskResultTypes RTRT\n ON RTR.ReviewTaskResultTypeId = RTRT.Id\nINNER JOIN Posts P\n ON RT.PostId = P.Id\nWHERE\n (RT.ReviewTaskTypeId = 6 \n  AND \n RTR.ReviewTaskResultTypeId = 13\n  AND\n P.LastEditDate > RTR.CreationDate)\n ORDER BY P.LastEditDate DESC;","CreationDate":"2020-08-08 4:57:54","validated":true}
{"QuerySetId":1177074,"Title":"Questions Using Popular Tags In January 2019","Description":"Questions Using Popular Tags In January 2019\nTags with rate of use over 4 times on this site.","QueryBody":"SELECT  \n      id  as [Post Link],\n      Id, CreationDate, AnswerCount, CommentCount,\n      rate.TagId\nfrom\n Posts,PostTags, (\n  SELECT count(PostId) as Rate, TagId\n  from\n    Tags, PostTags, Posts\n  where Tags.Id = PostTags.TagId and Posts.Id = PostId\n  and Posts.CreationDate < '2019-03-01'\n  and Posts.CreationDate > '2019-01-01'\n  group by TagId, TagName\n  having count(PostId) > 4 --(brings it down to 11580 rows)\n) as rate\nwhere \n  rate.TagId = PostTags.TagId and Posts.Id = PostId\n  and CreationDate > '2019-01-01'\n  and CreationDate < '2019-01-03'\n  and DeletionDate IS NULL\n  and AnswerCount > 0 \n  and CommentCount > 0\n;\n-- without inner having: 9983 rows returned in <1 ms\n-- with inner having 9760 rows returned in <1 ms","CreationDate":"2020-01-09 7:04:57","validated":true}
{"QuerySetId":1178204,"Title":"Everyone with a Marshall badge and reputation > 10000","Description":null,"QueryBody":"SELECT  DisplayName\nFROM Badges b\nLEFT JOIN Users u ON b.UserId = u.Id\nWHERE b.Name = 'Marshal' and u.Reputation > 10000","CreationDate":"2020-01-11 0:20:16","validated":true}
{"QuerySetId":1180120,"Title":"Top users of Java in England","Description":null,"QueryBody":"WITH  posts_WITH_java_tags AS(SELECT postid\nFROM posttags pt \nLEFT JOIN tags t ON pt.tagid = t.id\nwhere lower(t.tagname)='java'\n)\n\n\nSELECT  \n    u.Id AS [User Link], \n    u.Reputation,\n    COUNT(*) as number_of_answers\nFROM posts p\nINNER JOIN posts_WITH_java_tags pt ON pt.postid = p.id\nINNER join posts a ON a.parentid = p.id\nLEFT JOIN Users u ON a.OwnerUserId = U.id\nWHERE (LOWER(Location) LIKE '%uk%' or lower(location) like '%england%') \nGROUP BY u.ID,u.reputation\nORDER BY number_of_answers desc","CreationDate":"2020-02-18 22:52:08","validated":true}
{"QuerySetId":1180130,"Title":"Top Users - Country\/ Tag","Description":null,"QueryBody":"SELECT \nROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], u.Id AS [User Link],\nu.Reputation,\ncount(p.id)\nFROM Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id inner join tags t on t.id = pt.tagid WHERE\nLOWER(Location) LIKE LOWER('%##countryname##%')\nand t.tagname='##tagname##' group by u.reputation, u.id ORDER BY\nReputation DESC;","CreationDate":"2020-01-14 20:22:04","validated":true}
{"QuerySetId":1182894,"Title":"Top langs vs C, Python, JavaScript, Java & Rust average question score","Description":null,"QueryBody":"SELECT \n  CASE\n    WHEN Tags LIKE '%<c>%'          THEN 'C'\n    WHEN Tags LIKE '%<python>%'     THEN 'Python'\n    WHEN Tags LIKE '%<javascript>%' THEN 'JavaScript'\n    WHEN Tags LIKE '%<java>%'       THEN 'Java'\n    WHEN Tags LIKE '%<rust>%'       THEN 'Rust'\n    ELSE 'Anything else'    \n  END AS Language,\n  AVG(CAST(Score as float)) as [Average score],\n  COUNT(*) as [N questions]\n  \n  FROM Posts\n  WHERE\n    PostTypeId = 1\n  \nGROUP BY\n\n  CASE\n    WHEN Tags LIKE '%<c>%'          THEN 'C'\n    WHEN Tags LIKE '%<python>%'     THEN 'Python'\n    WHEN Tags LIKE '%<javascript>%' THEN 'JavaScript'\n    WHEN Tags LIKE '%<java>%'       THEN 'Java'\n    WHEN Tags LIKE '%<rust>%'       THEN 'Rust'\n    ELSE 'Anything else'\n  END","CreationDate":"2020-01-19 20:24:00","validated":true}
{"QuerySetId":1183135,"Title":"Users with highest percentage of approved edits","Description":null,"QueryBody":"WITH  perc_cte as\n(\nSELECT \n  OwnerUserId AS uid,\n  COUNT(Id) AS Total,\n  COUNT(ApprovalDate) AS Approved,\n  COUNT(RejectionDate) AS Rejected,\n  ROUND((COUNT(ApprovalDate))*100.0\/(COUNT(Id)),2) AS PercApproved,\n  ROUND((COUNT(RejectionDate))*100.0\/(COUNT(Id)),2) AS PercRejected\nFROM SuggestedEdits\nGROUP BY OwnerUserId\n)\n\nSELECT TOP(##num?100##)\n  uid AS [User Link],\n  PercApproved, PercRejected,\n  Approved, Rejected, Total\nFROM perc_cte\nORDER BY PercApproved DESC","CreationDate":"2020-01-20 0:34:04","validated":true}
{"QuerySetId":1183455,"Title":"Top Users by Country and Tag","Description":null,"QueryBody":"SELECT \nROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], u.Id AS [User Link],\nu.Reputation,\ncount(p.id)\nFROM Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id inner join tags t on t.id = pt.tagid WHERE\nLOWER(Location) LIKE LOWER('%##countryname##%')\nand t.tagname='##tagname##' group by u.reputation, u.id ORDER BY\nReputation DESC;","CreationDate":"2020-01-20 15:35:06","validated":true}
{"QuerySetId":1183586,"Title":"Most often visited questions with a score in a certain range","Description":null,"QueryBody":"SELECT Id as [Post Link], Score, ViewCount, CreationDate, Tags\nFROM Posts\nWHERE PostTypeId = 1 -- questions\n  and ClosedDate is null -- not closed\n  and Score >= ##S1:int?0## and Score <= ##S2:int?0##\nORDER BY ViewCount DESC","CreationDate":"2020-01-27 16:09:06","validated":true}
{"QuerySetId":1185959,"Title":"List of Stack Exchange non-meta sites","Description":null,"QueryBody":"SELECT  * FROM sys.databases\nWHERE (name NOT LIKE '%.Meta' OR name = 'StackExchange.Meta')\nAND database_id > 5\n-- database_id <= are internal and this data explorer\nORDER BY name ASC","CreationDate":"2020-07-07 23:47:42","validated":true}
{"QuerySetId":1186350,"Title":"Tags associated with \"data\" posts (2017-onward)","Description":null,"QueryBody":"SELECT  Tags, ViewCount\nfrom Posts\nwhere CreationDate >= '2017-01-01' AND body like '%data%'\norder by ViewCount desc","CreationDate":"2020-01-24 9:44:20","validated":true}
{"QuerySetId":1186390,"Title":"Questions related to the Evolvability Assurance of Microservices","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link],\n  CreationDate,\n  Score,\n  AnswerCount,\n  AcceptedAnswerId AS [Post Link],\n  Body\nFROM Posts\nWHERE PostTypeId = 1\n  AND DATEPART(yy,CreationDate) >= 2014\n  AND Score >= 0\n  AND (\n    CHARINDEX('microservice', Title) > 0\n    OR CHARINDEX('microservice', Body) > 0\n  )","CreationDate":"2020-01-24 15:10:40","validated":true}
{"QuerySetId":1187123,"Title":"Number Upvotes and Downvotes and acceptance ratio for a meta.stackexchange question","Description":null,"QueryBody":"SELECT  Id as [Post Link], Votes, Upvotes, Downvotes, Upvotes * 1.0 \/ Votes\nfrom\n(SELECT p.Id, count(case when VoteTypeId = 2 then 1 end) as [Upvotes],\n  count(case when VoteTypeId = 3 then 1 end) AS [Downvotes],\n  count(case when VoteTypeId = 2 or VoteTypeId = 3 then 1 end) as [Votes]\nfrom Posts p inner join Votes v on p.Id = v.PostId\nwhere p.PostTypeId = 1 and p.ClosedDate is null\ngroup by p.Id) ","CreationDate":"2020-01-26 19:16:42","validated":true}
{"QuerySetId":1193355,"Title":"Get all posts since 2016-01-01","Description":null,"QueryBody":"SELECT  AnswerCount, Body, CommentCount,\n      CreationDate, FavoriteCount, Posts.Id AS Posts_ID,\n      LastActivityDate, OwnerUserId, PostTypeId,\n      Score, Tags, Title, ViewCount \nfrom Posts\nwhere PostTypeId = 1 AND CreationDate >= '2016-01-01'","CreationDate":"2020-02-07 2:05:43","validated":true}
{"QuerySetId":1194098,"Title":"Users with the most amount of Questions and no Accepted Solutions","Description":null,"QueryBody":"SELECT  TOP (50)\n       U.[DisplayName],\n       U.Reputation,\n       COUNT(DISTINCT Q.Id) AS Questions,\n       COUNT(A.Id) AS AnswersReceived\nFROM Users U\n     JOIN Posts Q On U.ID = Q.OwnerUserID\n     JOIN PostTypes QT ON Q.PostTypeID = QT.ID\n     JOIN Posts A ON Q.Id = A.ParentId\n     JOIN PostTypes AT ON A.PostTypeID = AT.ID\nWHERE QT.[Name] = 'Question'\n  AND AT.[Name] = 'Answer'\n  AND Q.DeletionDate IS NULL\n  AND Q.AnswerCount > 0\nGROUP BY U.[DisplayName],\n         U.Reputation\nHAVING Count(Q.AcceptedAnswerId) = 0\nORDER BY Questions DESC;","CreationDate":"2020-02-08 18:43:49","validated":true}
{"QuerySetId":1194155,"Title":"Top 10 users from united arab emirates","Description":null,"QueryBody":"SELECT  TOP 10\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%united arab emirates%'\nORDER BY\n    Reputation DESC;","CreationDate":"2020-02-08 21:28:44","validated":true}
{"QuerySetId":1195304,"Title":"Posts with accepted answer answered after a week","Description":null,"QueryBody":"SELECT  count(*) from posts as a left join posts as b on a.AcceptedAnswerId = b.Id  \nwhere a.AcceptedAnswerId is not null and datediff(day,a.CreationDate,b.CreationDate) > 6","CreationDate":"2020-02-11 22:30:55","validated":true}
{"QuerySetId":1196119,"Title":"Top users with same name","Description":null,"QueryBody":"WITH  topusers_cte AS (\nSELECT TOP(##num?100##)\n  Id AS uid, DisplayName as udn\nFROM Users\nORDER BY Reputation DESC\n)\n\nSELECT \n  udn AS Name, COUNT(udn) AS Count\nFROM topusers_cte\nGROUP BY udn\nHAVING COUNT(udn)>1","CreationDate":"2020-02-13 13:02:21","validated":true}
{"QuerySetId":1196694,"Title":"Top 100 Java coders from Pakistan","Description":null,"QueryBody":"SELECT  TOP 100\n    u.Id AS [User Link], \n    SUM(p.Score) AS ReactScore,\n    u.Reputation,\n    u.Location\nFROM\n    Users u\nINNER JOIN Posts p ON p.OwnerUserId = u.Id\nWHERE\n    (LOWER(Location) LIKE '%pakistan%'\n    OR UPPER(Location) LIKE '%PK')\n    AND p.Tags LIKE '%java%'\nGROUP BY\n  u.Id, u.Reputation, u.Location\nORDER BY\n    ReactScore DESC;","CreationDate":"2020-09-20 22:10:16","validated":true}
{"QuerySetId":1197252,"Title":"Number of answerers in a period of time","Description":null,"QueryBody":"SELECT  count(distinct OwnerUserId) from Posts \nwhere PostTypeId = 2\nand CreationDate >= '##start##'\nand CreationDate < '##end##'","CreationDate":"2020-02-17 0:47:21","validated":true}
{"QuerySetId":1197527,"Title":"Top contributors in Jogannesburg for angular","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName like '%angular%'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%johannesburg%'\nORDER BY Score DESC;","CreationDate":"2020-08-28 13:00:42","validated":true}
{"QuerySetId":1197855,"Title":"Top Mapbox Stack Overflow Answerers","Description":null,"QueryBody":"SELECT  au.DisplayName as \"Display name\", \n       CAST('https:\/\/stackoverflow.com\/users\/' AS varchar(32)) + CAST(au.Id as varchar(8)) as \"Profile page\",\n       COUNT(*) as \"Number of accepted answers\"\nFROM PostTags as pt \n  JOIN Tags as t ON pt.TagId = t.Id\n  JOIN Posts as p ON pt.PostId = p.Id\n  JOIN Posts as a ON p.AcceptedAnswerId = a.id\n  JOIN Users au ON a.OwnerUserId = au.Id\nWHERE (t.TagName like '%mapbox%') \nGROUP BY au.DisplayName, au.Id\nORDER BY COUNT(*) DESC","CreationDate":"2020-02-19 5:23:13","validated":true}
{"QuerySetId":1198009,"Title":"Top 50 posts by total votes within specific tag from the last 6 months","Description":null,"QueryBody":"SELECT  top 50 count(v.postid) as 'Total Votes', v.postid AS [Post Link]\nFROM Votes v\n\tINNER JOIN Posts p ON p.id = v.postid\nWHERE \nPostTypeId = 1 \nAND v.VoteTypeId=2 \nAND p.tags like LOWER('%<' + ##tagname:string## + '>%')\nAND p.CreationDate >= DATEADD(month, -6, GETDATE())\ngroup by v.postid\norder by 'Total Votes' desc","CreationDate":"2020-03-03 7:04:18","validated":true}
{"QuerySetId":1199148,"Title":"total sql questions and AcceptedAnswers my month","Description":null,"QueryBody":"WITH  t1 as (\n  SELECT \n    datepart(year, p.CreationDate) Year\n    ,datepart(month, p.CreationDate) Month\n    ,count(*) as total\n    ,count(AcceptedAnswerId) as AcceptedAnswers\n  from Posts p\n  where\n    tags like '%<sql>%'\n  group by datepart(year, p.CreationDate), datepart(month, p.CreationDate)\n)\n\nselect \n  cast(concat(Year,'-',Month,'-01') as date)\n  ,total\n  ,AcceptedAnswers\nfrom t1\norder by 1","CreationDate":"2020-02-20 17:43:39","validated":true}
{"QuerySetId":1199300,"Title":"Top 100K users by hit rate (accepted answer percentage rate)","Description":"100 users having the highest accepted answer percentage rate (among users with >100 answers)","QueryBody":"SELECT TOP 100000\n    u.Id AS [User Link], COUNT(a.Id),\n    (CAST(SUM(CASE WHEN a.Id=q.AcceptedAnswerId THEN 1 ELSE 0 END) AS float) \/ COUNT(a.Id)) * 100 AS HitRate \nFROM Users u\n    JOIN Posts a ON a.OwnerUserId = u.Id and a.PostTypeId = 2\n    JOIN Posts q ON a.ParentId = q.Id\nGROUP BY u.Id\nHAVING COUNT(a.Id) > 25\nORDER BY HitRate DESC","CreationDate":"2020-07-03 19:06:46","validated":true}
{"QuerySetId":1199995,"Title":"Most viewed questions with a tag converted to a synonym since then","Description":null,"QueryBody":"SELECT  TOP 100\n  Posts.Id AS [Post Link],\n  Posts.ViewCount,\n  TagSynonyms.SourceTagName AS 'Its tag...',\n  TagSynonyms.TargetTagName AS '...is a synonym of'\nFROM TagSynonyms, Tags, PostTags, Posts\nWHERE\n  Tags.TagName = TagSynonyms.SourceTagName\n  AND\n  PostTags.TagId = Tags.Id\n  AND\n  Posts.Id = PostTags.PostId\nORDER BY Posts.ViewCount DESC, Posts.Id DESC","CreationDate":"2020-02-21 21:37:24","validated":true}
{"QuerySetId":1200781,"Title":"Questions answered by two users","Description":null,"QueryBody":"SELECT  p.ParentId as [Post Link] from Posts p \ninner join Posts q on q.ParentId = p.ParentId\nwhere p.OwnerUserId = ##id1## and q.OwnerUserId = ##id2##","CreationDate":"2020-02-24 0:51:32","validated":true}
{"QuerySetId":1200793,"Title":"Questions Answers Without Votes by Year","Description":null,"QueryBody":"SELECT  'Questions' as [Type], year(p.CreationDate) as [Post Year], count(*) as [Total Count]\nfrom Posts p left join Votes v on p.Id = v.PostId\nwhere p.DeletionDate is null and v.PostId is null and p.PostTypeId = 1\ngroup by year(p.CreationDate)\n)\nUNION\n(\nSELECT 'Answers' as [Type], year(p.CreationDate) as [Post Year], count(*) as [Total Count]\nfrom Posts p left join Votes v on p.Id = v.PostId\nwhere p.DeletionDate is null and v.PostId is null and p.PostTypeId = 2\ngroup by year(p.CreationDate)\n\n)\norder by year(p.CreationDate);","CreationDate":"2020-02-24 6:53:41","validated":true}
{"QuerySetId":1200820,"Title":"UpVote DownVote Year Voted Year Posted Total Count - Questions","Description":null,"QueryBody":"SELECT  'Questions' as [Post Type], vt.Name, year(p.CreationDate) as [Post Year], year(v.CreationDate) as [Vote Year], count(v.Id) as [Total Count]\nfrom Votes v inner join VoteTypes vt on v.VoteTypeId = vt.Id\n     inner join Posts p on v.PostId = p.Id\n     where p.PostTypeId = 1 and p.DeletionDate is null and vt.Name in ('UpMod', 'DownMod') and p.AcceptedAnswerId is null and p.AnswerCount > 0\ngroup by vt.Name, year(p.CreationDate), year(v.CreationDate)","CreationDate":"2020-02-24 6:28:11","validated":true}
{"QuerySetId":1201603,"Title":"Most related, correlated or anticorrelated tags","Description":"Calculates the correlation coefficient between all tag pairs. 0 correlation means that the tags are independent from each other. Negative correlation means that having a tag makes unlikely to have the other tag. Positive correlation means that a question tagged with one of them, makes likely to be tagged by the other.","QueryBody":"DECLARE  @TotalQ INT;\n\nSELECT @TotalQ = COUNT(*) FROM Posts WHERE PostTypeId = 1;\n\nWITH Raw AS (\n  SELECT\n    A.TagId AS TagA,\n    B.TagId AS TagB,\n    COUNT(*) AS Count\n  FROM PostTags A, PostTags B\n  WHERE\n    A.PostId = B.PostId\n    AND\n    A.TagId <> B.TagId\n  GROUP BY A.TagId, B.TagId\n)\nSELECT TOP 100\n  A.TagName AS TagNameA,\n  A.Count AS CountA,\n  B.TagName AS TagNameB,\n  B.Count AS CountB,\n  Raw.Count AS BothCount,\n  (1.0 * Raw.Count * @TotalQ - 1.0 * A.Count * B.Count)\n    \/\n    SQRT(1.0\n      * A.Count * (@TotalQ - A.Count)\n      * B.Count * (@TotalQ - B.Count))\n    AS Corr\nFROM Tags A, Tags B, Raw\nWHERE\n  Raw.TagA = A.Id\n  AND\n  Raw.TagB = B.Id\n  AND\n  A.Count > 5\n  AND\n  B.Count > 5\n  AND\n  A.TagName < B.TagName\nORDER BY Corr DESC;","CreationDate":"2020-02-24 19:54:57","validated":true}
{"QuerySetId":1201700,"Title":"Tag trios by maximal average question score","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT TOP 100\n    A.TagId AS TagA,\n    B.TagId AS TagB,\n    C.TagId AS TagC,\n    AVG(1.0 * Posts.Score) AS Score,\n    COUNT(*) AS Count\n  FROM PostTags A, PostTags B, PostTags C, Posts\n  WHERE\n    Posts.Id = A.PostId\n    AND\n    Posts.Id = B.PostId\n    AND\n    Posts.Id = C.PostId\n    AND\n    A.TagId < B.TagId\n    AND\n    B.TagId < C.TagId\n  GROUP BY\n    A.TagId,\n    B.TagId,\n    C.TagId\n  HAVING COUNT(*) > 1000\n  ORDER BY Score DESC\n)\nSELECT\n  A.TagName,\n  B.TagName,\n  C.TagName,\n  Raw.Score,\n  Raw.Count\nFROM Raw, Tags A, Tags B, Tags C\nWHERE\n  Raw.TagA = A.Id\n  AND\n  Raw.TagB = B.Id\n  AND\n  Raw.TagC = C.Id\nORDER BY Score DESC, A.Id, B.Id, C.Id","CreationDate":"2020-02-26 5:08:28","validated":true}
{"QuerySetId":1203595,"Title":"Finding all post IDs for each tag","Description":null,"QueryBody":"SELECT  Id, Tags\nFROM POSTS\nWhere PostTypeId = 1 AND\n  Tags IS NOT NULL\nORDER BY CreationDate DESC","CreationDate":"2020-02-27 10:03:24","validated":true}
{"QuerySetId":1204843,"Title":"Longest time between consecutive edits by days","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    MIN(Id) AS Id,\n    MIN(PostId) AS PostId,\n    RevisionGUID,\n    MIN(CreationDate) AS CreationDate\n  FROM PostHistory\n  WHERE PostHistoryTypeId <= 6\n  GROUP BY RevisionGUID\n),\nRaw2 AS (\n  SELECT\n    *,\n    RANK() OVER (PARTITION BY PostId ORDER BY Id) AS No\n  FROM Raw\n)\nSELECT TOP 100\n  Prv.PostId AS [Post Link],\n  Prv.CreationDate AS Edit1,\n  Nxt.CreationDate AS Edit2,\n  1.0 * DATEDIFF(s, Prv.CreationDate, Nxt.CreationDate) \/ 86400 AS DayDiff\nFROM Raw2 Prv, Raw2 Nxt\nWHERE\n  Prv.PostId = Nxt.PostId\n  AND\n  Prv.No + 1 = Nxt.No\n  AND\n  Prv.CreationDate < Nxt.CreationDate\nORDER BY DayDiff DESC, Prv.Id","CreationDate":"2020-03-04 0:27:17","validated":true}
{"QuerySetId":1205329,"Title":"Number of views on questions by users with up to a specified reputation","Description":null,"QueryBody":"select    @MaxRep, SUM(convert(bigint,p.viewcount)) \"No. views\"\n  from    Posts p\nLEFT JOIN Users u ON u.id = p.OwnerUserId\n  where   p.posttypeid = 1\n  and     u.Reputation <= @MaxRep","CreationDate":"2020-03-04 12:10:44","validated":true}
{"QuerySetId":1206756,"Title":"list all posts for a given user by user id","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT id, PostTypeId, posts.Title, Body, CreationDate\nFROM posts\nWHERE Posts.OwnerUserId = @UserId","CreationDate":"2020-03-07 16:55:07","validated":true}
{"QuerySetId":1208266,"Title":"Answered questions - Windows Phone","Description":null,"QueryBody":"SELECT  Id, LastActivityDate, CreationDate, Score, ViewCount, Body, OwnerUserId, Title, Tags, AnswerCount\nFROM Posts\nWHERE Tags like '%<windows-phone%'\nand PostTypeId = 1 \nORDER BY LastActivityDate DESC","CreationDate":"2020-03-09 21:30:56","validated":true}
{"QuerySetId":1209476,"Title":"Ratio of reputation estimated by votes got, vs. real reputation","Description":"We calculate the rep of the users by counting only the up\/down\/accept votes (so: no bounty, edits, -100 for rudeness, 1 rep limit, community owned posts, -1 for answer downs, no rep for most deleted posts, and no rep for self-answer accepts). Then we see the distribution, how this estimated reputation relates to the real reputation of the users.","QueryBody":"WITH  VoteRep AS (\n  SELECT 1 AS VoteTypeId, 15 AS Rep\n  UNION\n  SELECT 2, 10\n  UNION\n  SELECT 3, -2\n),\nRaw AS (\n  SELECT\n    Users.Id,\n    1.0 * SUM(VoteRep.Rep) \/ MIN(Users.Reputation) AS EstRep,\n    MIN(Users.Reputation) AS Reputation\n  FROM Users, Posts, Votes, VoteRep\n  WHERE\n    Posts.OwnerUserId = Users.Id\n    AND\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId = VoteRep.VoteTypeId\n  GROUP BY Users.Id\n),\nRaw2 AS (\n  SELECT Id, 1.0 * EstRep\/Reputation AS RatioRaw\n  FROM Raw\n)\nSELECT\n  FLOOR(RatioRaw\/0.01)*0.01 AS Ratio,\n  COUNT(*) AS Count\nFROM Raw2\nGROUP BY RatioRaw\/0.01\nORDER BY Ratio","CreationDate":"2020-03-11 20:20:22","validated":true}
{"QuerySetId":1211040,"Title":"Logarithmic vote distribution by month","Description":null,"QueryBody":"DECLARE  @Ts DATETIME;\n\nSELECT @Ts = DATEFROMPARTS(\n  YEAR(MAX(Votes.CreationDate)),\n  MONTH(MAX(Votes.CreationDate)),\n  1)\nFROM Votes;\n\nSELECT\n  DATEFROMPARTS(\n    YEAR(Votes.CreationDate),\n    MONTH(Votes.CreationDate),\n    1) AS Month,\n  MIN(VoteTypes.Name) AS VoteType,\n  LOG(COUNT(*))\/LOG(2) AS Log2Count\nFROM Votes, VoteTypes\nWHERE\n  Votes.VoteTypeId = VoteTypes.Id\n  AND\n  Votes.CreationDate < @Ts\nGROUP BY\n  DATEFROMPARTS(\n    YEAR(Votes.CreationDate),\n    MONTH(Votes.CreationDate),\n    1),\n  Votes.VoteTypeId\nORDER BY Month DESC, Log2Count DESC","CreationDate":"2020-03-16 21:29:21","validated":true}
{"QuerySetId":1213618,"Title":"AWS Answers by Year for a given user","Description":null,"QueryBody":"SELECT \n  CONVERT(nvarchar(4), Question.CreationDate, 23) AS Year,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Question\nJOIN Posts as Answer ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY CONVERT(nvarchar(4), Question.CreationDate, 23)\nORDER BY CONVERT(nvarchar(4), Question.CreationDate, 23)","CreationDate":"2020-03-24 14:21:23","validated":true}
{"QuerySetId":1215993,"Title":"Search posts by user and partial title","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], p.CreationDate, p.Score\n  FROM Posts AS p\n  LEFT OUTER JOIN Posts AS q\n    ON p.ParentId = q.Id\n  WHERE p.OwnerUserId = ##UserId:int##\n    AND COALESCE(p.Title, q.Title) LIKE '%##Query##%'\n  ORDER BY p.CreationDate DESC","CreationDate":"2020-03-30 16:46:49","validated":true}
{"QuerySetId":1217041,"Title":"Retrieve count of total no of answers corresponding to each tag at user level","Description":null,"QueryBody":"SELECT  t.TagName, COUNT(q.Id) as countofAnsweredQuestions\nfrom Posts q\ninner join PostTags AS pt\nON pt.PostId = q.Id\ninner join Posts a\non a.parentId = q.Id\ninner join Tags as t\non pt.tagId = t.Id\nwhere q.CommunityOwnedDate is null and q.ClosedDate is null \n  and a.OwnerUserId = ##UserId##\n  and q.OwnerUserId != ##UserId##\n  and a.postTypeId = 2\n  and t.tagname = ##tagname##\n  and q.creationdate between ##start## and ##end##\nGROUP BY t.TagName\nORDER BY countofAnsweredQuestions desc","CreationDate":"2020-05-17 7:03:58","validated":true}
{"QuerySetId":1217087,"Title":"Questions that define new LaTeX commands","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link],\n  CreationDate\nFROM Posts\nWHERE PostTypeId = 1\n  AND Body LIKE '%newcommand%'\nORDER BY CreationDate DESC","CreationDate":"2020-04-01 15:01:43","validated":true}
{"QuerySetId":1217621,"Title":"AWS Answers by Month for a given User","Description":null,"QueryBody":"SELECT \n  CONVERT(nvarchar(7), Answer.CreationDate, 23) AS Month,\n  COUNT(Answer.Id) AS Answers\n\nFROM Posts as Answer\nJOIN Posts as Question ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Answer.PostTypeId = 2 -- Answer\n  --AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Answer.OwnerUserId = ##UserId##\n\nGROUP BY CONVERT(nvarchar(7), Answer.CreationDate, 23)\nORDER BY CONVERT(nvarchar(7), Answer.CreationDate, 23)","CreationDate":"2020-06-12 14:00:21","validated":true}
{"QuerySetId":1217720,"Title":"number of question per month after 2019","Description":null,"QueryBody":"SELECT  count(*), Month(CreationDate)\nfrom Posts\nwhere PostTypeId=1 and CreationDate > '2019'\ngroup by Month(CreationDate);","CreationDate":"2020-04-03 22:11:02","validated":true}
{"QuerySetId":1222162,"Title":"Users by the amount of bounties won on their first week of activities","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    Votes.CreationDate AS VoteDay,\n    Votes.Id AS VoteId,\n    Votes.PostId,\n    Votes.VoteTypeId,\n    Votes.BountyAmount\n  FROM Posts, Votes\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Posts.OwnerUserId > 0\n),\nRaw2 AS (\n  SELECT UserId, MIN(VoteDay) AS FirstVoteDay\n  FROM Raw\n  GROUP BY UserId\n),\nRaw3 AS (\n  SELECT\n    Raw.UserId,\n    Raw.VoteDay,\n    Raw.PostId,\n    Raw.VoteId,\n    Raw.BountyAmount,\n    SUM(BountyAmount) OVER (PARTITION BY Raw.UserId) AS StartBounty\n  FROM Raw, Raw2\n  WHERE\n    Raw.UserId = Raw2.UserId\n    AND\n    DATEDIFF(day, Raw2.FirstVoteDay, Raw.VoteDay) < ##FirstDays:int?7##\n    AND\n    Raw.VoteTypeId = 9\n)\nSELECT TOP 100 *\nFROM Raw3\nORDER BY StartBounty DESC, UserId, VoteId","CreationDate":"2020-04-08 12:35:55","validated":true}
{"QuerySetId":1222539,"Title":"Number of questions and their answers per month","Description":null,"QueryBody":"SELECT  eomonth(p.CreationDate) [month],\n  COUNT(p.Id) AS [Questions],\n  SUM(p.AnswerCount) AS [Answers]\nFROM Posts p\nWHERE p.CreationDate >= '##Date1?2015-01-01##' AND p.CreationDate <= '##Date2?2021-01-01##'\n  and (p.PostTypeId=1)\n----  and (p.ClosedDate IS NULL) \n---- counting all questions\nGROUP BY eomonth(p.CreationDate)\nORDER BY eomonth(p.CreationDate)","CreationDate":"2020-04-08 8:09:40","validated":true}
{"QuerySetId":1222725,"Title":"Users from Moscow with QPosts with mscrm Tags *better performance*","Description":null,"QueryBody":"SELECT  DISTINCT\n  u.DisplayName\n  ,CONCAT('https:\/\/stackoverflow.com\/users\/',p.OwnerUserId) AS profile_link\n  --,t.TagName\nFROM Tags AS t\nINNER JOIN\n  PostTags AS pt\n  ON pt.TagId = t.Id\nINNER JOIN\n  Posts AS p\n  ON pt.PostId = p.Id\nINNER JOIN\n  Users AS u\n  ON p.OwnerUserId = u.Id\n  AND LOWER(u.Location) LIKE '%moscow%'\n    \/*AND (LOWER(u.Location) LIKE '%russia%'\n    OR LOWER(u.Location) LIKE '%\u0440\u043e\u0441\u0441\u0438\u044f%')*\/\nWHERE\n  t.TagName IN\n  ('dynamics-crm',\n   'microsoft-dynamics',\n   'dynamics-crm-2011',\n   'dynamics-crm-4')\n  \n  \/*(t.TagName LIKE '%dynamics-crm-2011%'\n  OR t.TagName LIKE '%dynamics-crm%'\n  OR t.TagName LIKE '%microsoft-dynamics%')*\/","CreationDate":"2020-06-15 10:35:36","validated":true}
{"QuerySetId":1223755,"Title":"Number of views and answers by month of CreationDate","Description":null,"QueryBody":"SELECT  eomonth(p.CreationDate) [month],\n  SUM(p.ViewCount) AS [Total Views],\n  SUM(p.AnswerCount) AS [Total Answers]\nFROM Posts p\nWHERE p.PostTypeId=1\nGROUP BY eomonth(p.CreationDate)\nORDER BY eomonth(p.CreationDate)","CreationDate":"2020-04-10 15:18:09","validated":true}
{"QuerySetId":1223759,"Title":"Average score of all answers (depending on month of questions' creationdate)","Description":null,"QueryBody":"WITH  ascore_cte AS\n(\nSELECT \n  q.Id AS qid,\n  q.CreationDate AS cre,\n  SUM(a.Score) AS ascore\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE q.PostTypeId=1\nGROUP BY q.Id, q.CreationDate\n)\n\nSELECT\n  eomonth(cre),\n  AVG(CAST(ascore AS decimal)) AS 'Average sum of answer-scores'\nFROM ascore_cte\nGROUP BY eomonth(cre)\nORDER BY eomonth(cre)","CreationDate":"2020-04-11 10:26:26","validated":true}
{"QuerySetId":1224173,"Title":"JPA and Hibernate Questions by Year","Description":null,"QueryBody":"SELECT  \n    count(*) as QuestionCount, \n    CAST(DATEPART (yyyy , Posts.CreationDate) AS INT) as Year\nfrom Posts\njoin PostTags on Posts.Id = PostTags.PostId\njoin Tags on Tags.Id = PostTags.TagId\nwhere Tags.TagName = 'hibernate' or Tags.TagName = 'jpa'\ngroup by DATEPART (yyyy , Posts.CreationDate)\norder by Year Desc","CreationDate":"2020-04-12 17:32:29","validated":true}
{"QuerySetId":1224755,"Title":"This query shows all answer posts which are relevant for the \"Unsung Hero\" badge sorted by the creation date. In addition it shows if a post is already counting (older than 10 days) or not.","Description":"This query shows all answer posts which are relevant for the \"Unsung Hero\" badge sorted by the creation date. In addition it shows if a post is already counting (older than 10 days) or not.","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    a.Id AS [Post Link],\n    a.CreationDate AS [Answer Creation Date],\n    (case when datediff(dd, a.CreationDate, getdate()) < 10 then 0 else 1 end) AS [10 days criterion met]\nFROM\n    Posts q\n  INNER JOIN\n    Posts a\n  ON a.Id = q.AcceptedAnswerId\nWHERE\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = @UserId\n  and q.OwnerUserId != @UserId\n  and a.postTypeId = 2\n  and a.Score = 0\nORDER BY a.CreationDate DESC","CreationDate":"2020-04-13 4:28:30","validated":true}
{"QuerySetId":1225028,"Title":"Number of questions\/answers\/posts per month - only CW","Description":null,"QueryBody":"SELECT  month(p.CreationDate) [month],\n  COUNT(p.Id) AS [Total Posts],\n  SUM(case when p.PostTypeId = 1 then 1 else 0 end) AS [Total Questions],\n  SUM(case when p.PostTypeId = 2 then 1 else 0 end) AS [Total Answers]\nFROM Posts p\n  WHERE (CommunityOwnedDate IS NOT NULL)\nGROUP BY month(p.CreationDate)\nORDER BY month(p.CreationDate)","CreationDate":"2020-04-13 16:09:13","validated":true}
{"QuerySetId":1225062,"Title":"Number of votes on answers and votes on questions per month (with some tags excluded)","Description":null,"QueryBody":"SELECT \n  eomonth(v.CreationDate),\n  COUNT(v.Id) AS [Total Upvotes],\n  SUM(CASE WHEN p.PostTypeId=1 THEN 1 ELSE 0 END) AS [Question Upvotes],\n  SUM(CASE WHEN p.PostTypeId=2 THEN 1 ELSE 0 END) AS [Answer Upvotes]\nFROM Posts p INNER JOIN Votes v ON v.PostId = p.Id\nWHERE v.VoteTypeId=2\n---VoteTypeId=2 Upvotes\n---VoteTypeId=3 Downvotes\n  AND NOT((p.Tags Like '%<##tag1?big-list##>%') OR (p.Tags Like '%<##tag2?soft-question##>%'))\n  AND NOT(p.PostTypeId=2 AND (p.ParentId IN (SELECT Id FROM Posts WHERE ((Tags Like '%<##tag1##>%') OR (Tags Like '%<##tag2##>%')))))\n---exclude the given two tags\nGROUP BY eomonth(v.CreationDate)\nORDER BY eomonth(v.CreationDate)","CreationDate":"2020-04-13 17:20:04","validated":true}
{"QuerySetId":1225566,"Title":"Lonsgest time - answer after question closed","Description":null,"QueryBody":"SELECT  Top(##num?1000##)\n  a.Id AS [Post Link],\n  a.CreationDate, q.ClosedDate,\n  DATEDIFF(month, q.ClosedDate, a.CreationDate) AS Months,\n  DATEDIFF(day, q.ClosedDate, a.CreationDate) AS Days,\n  DATEDIFF(hour, q.ClosedDate, a.CreationDate) AS Hours,\n  DATEDIFF(minute, q.ClosedDate, a.CreationDate) AS Minutes\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.ClosedDate IS NOT NULL) and (q.ClosedDate<a.CreationDate)\nORDER BY DATEDIFF(minute, q.ClosedDate, a.CreationDate) DESC","CreationDate":"2020-04-14 15:31:19","validated":true}
{"QuerySetId":1228053,"Title":"Daily Activity Posts Comments Users","Description":null,"QueryBody":"SELECT  *\nFROM\n\n(\nSELECT   CAST (CreationDate AS Date)Date_Posted\n\t,SUM(CASE WHEN PostTypeID=1 THEN 1 ELSE 0 END) As Questions\n    ,SUM(CASE WHEN PostTypeID=2 THEN 1 ELSE 0 END) As Answers\nFROM Posts\n WHERE YEAR(CreationDate)=2020 and DeletionDate is null\n GROUP BY CAST(CreationDate as Date)\n )a\n\n FULL OUTER JOIN\n \n (\n SELECT CAST (CreationDate AS Date)Date_Joined\n     ,COUNT(*) AS Users\n FROM Users\n  WHERE YEAR(CreationDate)=2020\n GROUP BY CAST(CreationDate as Date)\n )b\n \n on a.Date_Posted = b.Date_Joined\n \nFULL OUTER JOIN\n(\n SELECT CAST (CreationDate AS Date)Date_Commented\n     ,COUNT(*) AS Comments\n FROM Comments\n  WHERE YEAR(CreationDate)=2020\n GROUP BY CAST(CreationDate as Date)\n )c\n \n ON c.Date_Commented = a.Date_Posted","CreationDate":"2020-04-17 17:31:10","validated":true}
{"QuerySetId":1228096,"Title":"Percentage of closed question per month","Description":null,"QueryBody":"SELECT \n  eomonth(p.creationdate),\n  ROUND((COUNT(p.ClosedDate))*100.0\/(COUNT(p.Id)),2) AS percentage\nFROM Posts p\nWHERE (p.PostTypeId=1)\n   AND (p.CreationDate >= '##Date1?2010-01-01##') AND (p.CreationDate <= '##Date2?2021-01-01##')\nGROUP BY eomonth(p.creationdate)\nORDER BY eomonth(p.creationdate)","CreationDate":"2020-04-17 20:15:24","validated":true}
{"QuerySetId":1229412,"Title":"Users with 10 or more meta posts with score of 2 or more (Convention badge)","Description":null,"QueryBody":"SELECT \n  u.Id AS [User Link],\n  count(*) AS NumPosts\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId\nWHERE \n  p.Score >= 2\nGROUP BY u.Id\nHAVING\n  count(*) >= 10\nORDER BY NumPosts DESC","CreationDate":"2020-04-20 14:35:52","validated":true}
{"QuerySetId":1232894,"Title":"Find answers to HNQ by a specific user that were posted before the question became HNQ, between dates","Description":null,"QueryBody":"SELECT answers.Id [Post Link], answers.CreationDate as 'Answer Posted', ph.CreationDate as 'Became HNQ'\nFROM PostHistory ph\nINNER JOIN Posts answers ON answers.ParentId=ph.PostId\nWHERE answers.OwnerUserId= ##userId##\n  AND answers.CreationDate between @StartDate and @EndDate\n  AND ph.PostHistoryTypeId=52\n  AND answers.CreationDate < ph.CreationDate","CreationDate":"2020-04-29 2:51:12","validated":true}
{"QuerySetId":1233457,"Title":"Top 100 users with very similar tag score distribution to you","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Posts.OwnerUserId AS UserId,\n    PostTags.TagId,\n    SUM(5 - 2 * Votes.VoteTypeId) AS Score\n  FROM Posts, Votes, PostTags\n  WHERE\n    Votes.PostId = Posts.Id\n    AND\n    Votes.VoteTypeId BETWEEN 2 AND 3\n    AND\n    Posts.PostTypeId = 2\n    AND\n    Posts.ParentId = PostTags.PostId\n    AND\n    Posts.OwnerUserId > 0\n  GROUP BY Posts.OwnerUserId, PostTags.TagId\n)\nSELECT TOP 100 *\nFROM Raw You\nFULL JOIN Raw Other ON Other.TagId = You.TagId\nWHERE\n  You.UserId = ##SiteAccountId:int##\n  AND\n  Other.UserId <> You.UserId\nORDER BY Other.UserId, COALESCE(You.TagId, Other.TagId)","CreationDate":"2020-04-30 17:05:46","validated":true}
{"QuerySetId":1234442,"Title":"All answers by a specific user (title and body)","Description":null,"QueryBody":"SELECT \n  a.Id AS [Post Link],\n  q.Title,\n  a.Score,\n  q.ViewCount, q.AnswerCount,\n  a.body\nFROM Posts a INNER JOIN Posts q ON q.Id=a.ParentId\nWHERE (a.OwnerUserId=##userid##)\nORDER BY a.Id","CreationDate":"2020-05-03 12:39:48","validated":true}
{"QuerySetId":1236736,"Title":"PostNotices for the given post","Description":null,"QueryBody":"SELECT  \n  PostId AS [Post Link],\n  revisions = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions',\n  revisions = 'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/timeline',\n  *\n  FROM PostNotices\n  WHERE PostId = ##id##","CreationDate":"2020-05-09 20:15:34","validated":true}
{"QuerySetId":1236797,"Title":"Votes on which day after posting (only questions)","Description":null,"QueryBody":"SELECT \nDATEDIFF(day, p.CreationDate, v.CreationDate) AS Days,\n  COUNT(v.Id) AS Count\nFROM Votes v INNER JOIN Posts p ON v.PostId=p.Id\nWHERE p.PostTypeId=1\n---only questions\nGROUP BY DATEDIFF(day, p.CreationDate, v.CreationDate) \nORDER BY DATEDIFF(day, p.CreationDate, v.CreationDate)","CreationDate":"2020-05-10 0:12:05","validated":true}
{"QuerySetId":1236801,"Title":"Percentage of votes - depending on day after posting (only questions)","Description":null,"QueryBody":"SELECT \n  DATEDIFF(day, p.CreationDate, v.CreationDate) AS Days,\n  COUNT(v.Id) AS Count,\n  COUNT(v.Id) * 100.0 \/ SUM(COUNT(v.Id)) OVER () AS Percentage\n---see: https:\/\/stackoverflow.com\/questions\/46909494\/percentage-from-total-sum-after-group-by-sql-server\nFROM Votes v INNER JOIN Posts p ON v.PostId=p.Id\nWHERE p.PostTypeId=1\n----only questions\nGROUP BY DATEDIFF(day, p.CreationDate, v.CreationDate)\nORDER BY DATEDIFF(day, p.CreationDate, v.CreationDate)","CreationDate":"2020-05-10 0:48:55","validated":true}
{"QuerySetId":1236806,"Title":"Average score of questions per month","Description":null,"QueryBody":"SELECT \n  p.Tags,\n  AVG(CAST(p.Score AS decimal))\nFROM Posts p\nWHERE (p.PostTypeId=1)\n  AND (p.CreationDate >= '##Date1?2010-01-01##') AND (p.CreationDate <= '##Date2?2021-01-01##')\nGROUP BY p.Tags","CreationDate":"2020-05-10 3:29:03","validated":true}
{"QuerySetId":1236853,"Title":"Users with largest number of \"trackable\" badges","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  u.Id AS [User Link],\n  COUNT(DISTINCT b.Name) AS BadgeCount\nFROM Users u INNER JOIN Badges b ON b.UserId = u.Id\nWHERE b.Name in (\n'Altruist',\n'Benefactor',\n'Curious',\n'Inquisitive',\n'Socratic',\n'Investor',\n'Explainer',\n'Promoter',\n'Scholar',\n'Student',\n'Explainer'\n)\nGROUP BY u.Id\nORDER BY COUNT(DISTINCT b.Name) DESC","CreationDate":"2020-05-10 12:23:54","validated":true}
{"QuerySetId":1236864,"Title":"Most common tags with missing wiki\/excerpt","Description":"Lists the most commonly used tags with empty\/missing tag wikis (wiki or excerpt).","QueryBody":"SELECT  Count,\n       ('site:\/\/tags\/' + TagName + '|' + TagName) AS TagName,\n       ExcerptPostId                              AS [Post Link],\n       WikiPostId                                 AS [Post Link]\nFROM   Tags t\n       LEFT JOIN Posts pe\n         ON pe.Id = t.ExcerptPostId\n       LEFT JOIN Posts pw\n         ON pw.Id = t.WikiPostId\nWHERE  ExcerptPostId IS NULL -- no excerpt post\n       OR WikiPostId IS NULL -- no wiki post\n       OR LEN(pe.Body) = 0   -- excerpt empty\n       OR LEN(pw.Body) = 0   -- wiki empty\nORDER  BY Count DESC","CreationDate":"2020-05-10 14:03:22","validated":true}
{"QuerySetId":1237032,"Title":"Longest time until entering the HNQ","Description":null,"QueryBody":"SELECT  TOP (##num?1000##)\np.Id AS [Post Link],\np.CreationDate,\nph.CreationDate,\nDATEDIFF(day, p.CreationDate, ph.CreationDate) AS Days,\nDATEDIFF(hour, p.CreationDate, ph.CreationDate) AS Hours,\nDATEDIFF(minute, p.CreationDate, ph.CreationDate) AS Minutes\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE ph.PostHistoryTypeId=52\n---52 = Question became hot network question\nORDER BY DATEDIFF(minute, p.CreationDate, ph.CreationDate) DESC","CreationDate":"2020-05-11 10:57:45","validated":true}
{"QuerySetId":1237844,"Title":"Get the tags that are used frequently together for a given tag","Description":"With inputs from this questions : https:\/\/meta.stackoverflow.com\/questions\/397374\/query-the-tags-that-appear-together-frequently","QueryBody":"SELECT  tt.tagname, count(*) [count] \nfrom posttags pt -- tags on posts\ninner join tags st on st.id = pt.tagid -- SELECTion tag\ninner join posttags ptt on ptt.postid = pt.postid -- other tags\ninner join tags tt on tt.id =  ptt.tagid -- other tag names\nwhere st.tagname = ##tagname:string?teradata##\nand tt.tagname <> ##tagname:string?teradata##\ngroup by tt.tagname\norder by count(*) desc","CreationDate":"2020-05-13 9:45:40","validated":true}
{"QuerySetId":1238071,"Title":"Most popular StackOverflow tags in April 2020","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as PeriodRank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInPeriod,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2020-05-01'\nand Posts.CreationDate > '2020-04-01'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc","CreationDate":"2020-05-14 3:17:38","validated":true}
{"QuerySetId":1238881,"Title":"Top 5000 users from guajrat","Description":null,"QueryBody":"SELECT  TOP 5000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%gujarat%'\n    OR UPPER(Location) LIKE '%GUJARAT'\nORDER BY\n    Reputation DESC;","CreationDate":"2020-06-23 8:03:05","validated":true}
{"QuerySetId":1239553,"Title":"Top 500 Posts with accepted answers between dates for a tag","Description":null,"QueryBody":"SELECT  TOP(500)  p.Id, p.Title, p.Body\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId = t.Id\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nWHERE (t.TagName = ##TagName:string##) AND\n(p.AcceptedAnswerId IS NOT NULL) AND\n(p.CreationDate >= '##Date1?2016-01-01##') AND\n(p.CreationDate <= '##Date2?2019-12-31##')","CreationDate":"2020-05-17 18:16:09","validated":true}
{"QuerySetId":1239858,"Title":"Questions by the given user with the given phrase in the title (case, accent insensitive)","Description":null,"QueryBody":"SELECT \n  Id AS [Post Link],\n  Score\nFROM Posts\nWHERE (PostTypeId=1) AND (OwnerUserId=##userid?25510##)\n  AND (Title Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI)\nORDER BY Id","CreationDate":"2020-05-18 12:25:34","validated":true}
{"QuerySetId":1240746,"Title":"Questions with a specific word in the initial body (length limit, case insensitive)","Description":null,"QueryBody":"SELECT p.Id AS [Post Link], ph.Text AS [Initial Title], concat('site:\/\/posts\/', p.Id, '\/revisions' ) [Revisions Link], p.OwnerUserId AS [User Link], p.Score, p.Tags, p.CreationDate FROM Posts p INNER JOIN PostHistory ph ON ph.PostId=p.Id WHERE (ph.PostHistoryTypeId=2) AND (p.PostTypeId=1) AND (len(ph.Text)<=##len?150##) AND (ph.Text Like '%##word?urgent##%' COLLATE Latin1_General_CI_AI) ORDER BY p.Id DESC","CreationDate":"2020-06-06 6:33:06","validated":true}
{"QuerySetId":1240763,"Title":"Questions with tag1 and tag2, without tag3","Description":null,"QueryBody":"SELECT  q.Id as [Post Link], q.Tags, q.CreationDate, q.LastActivityDate\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\nWHERE t.TagName=##tag1:string?discrete-mathematics##\n  AND (q.Tags LIKE '%<##tag2?graph-theory##>%')\n  AND NOT(q.Tags LIKE '%<##tag3?co.combinatorics##>%')\nORDER BY q.CreationDate DESC","CreationDate":"2020-05-20 10:05:32","validated":true}
{"QuerySetId":1241265,"Title":"Count of self-answers on a specific tag, record holders","Description":null,"QueryBody":"SELECT\n  MIN(Tags.TagName) AS TagName,\n  Q.OwnerUserId AS [User Link],\n  COUNT(*) AS Count\nFROM Posts Q, Posts A, PostTags, Tags\nWHERE\n  A.ParentId = Q.Id\n  AND\n  PostTags.PostId = Q.Id\n  AND\n  Q.OwnerUserId > 0\n  AND\n  Q.OwnerUserId = A.OwnerUserId\n  AND\n  Tags.Id = PostTags.TagId\nGROUP BY\n  PostTags.TagId, Q.OwnerUserId\nORDER BY Count DESC, Q.OwnerUserId","CreationDate":"2020-05-21 20:06:23","validated":true}
{"QuerySetId":1241380,"Title":"TOP 200 HAMMER JUGGLERS: Users with many gold tag badges","Description":null,"QueryBody":"SELECT  TOP 200 UserId AS [User Link], COUNT(*) as Hammers\nFROM Badges b\nWHERE b.TagBased=1 and b.class=1\nGROUP BY UserId\nORDER BY COUNT(*) DESC","CreationDate":"2020-05-21 23:27:12","validated":true}
{"QuerySetId":1242376,"Title":"elasticsearch answers in data range.","Description":null,"QueryBody":"SELECT \n    YEAR(p.creationdate),\n    MONTH(p.creationdate),\n    count(distinct p.id) [# Answers]\nfrom posts p\ninner join posttags pt on pt.postid = p.parentid\ninner join tags t on t.id = pt.tagid\nwhere t.tagname = 'elasticsearch'\ngroup by YEAR(p.creationdate), MONTH(p.creationdate)\norder by YEAR(p.creationdate), MONTH(p.creationdate)","CreationDate":"2020-11-16 6:47:51","validated":true}
{"QuerySetId":1243888,"Title":"Comments with \"Infinity is not a number\"","Description":null,"QueryBody":"SELECT  parent.score, postid as [Post Link], comments.creationdate, text from comments\njoin posts parent on (comments.postid = parent.id)\nwhere  text like '%infinity%not a number%'\norder by parent.score desc, creationdate desc","CreationDate":"2020-05-27 20:24:05","validated":true}
{"QuerySetId":1247208,"Title":"Top 10 Stackoverflow Users in Saudi Arabia","Description":null,"QueryBody":"SELECT  top 10 DisplayName, \n       Location,\n       'https:\/\/stackoverflow.com\/users\/'+cast(id as varchar),\n       Reputation\nfrom Users \nwhere  lower(Location) LIKE '%saudi%' or \n       lower(Location) LIKE '%saudi arabia%' order by 4 desc","CreationDate":"2020-06-04 17:16:02","validated":true}
{"QuerySetId":1250266,"Title":"AWS Questions: Time until Answer","Description":null,"QueryBody":"SELECT  TOP 10\n  Question.Id,\n  MIN(Question.creationdate) as Question_date,\n  MIN(Answer.creationdate) as Answer_date\nFROM Posts as Question\nLEFT OUTER JOIN Posts as Answer ON Question.Id = Answer.ParentId\n\nWHERE Question.PostTypeId = 1 -- Question\n  AND Question.ClosedDate IS NULL -- Exclude Closed questions\n  AND (Question.Tags LIKE '%<amazon-%' OR Question.Tags LIKE '%<aws-%')\n  AND Question.CreationDate >= '2020-01-01'\n  AND Question.creationdate <> Answer.creationdate -- Many are the same!\n  AND (Answer.OwnerUserId IS NULL OR Question.OwnerUserId <> Answer.OwnerUserId)\n  AND Answer.creationdate IS NULL\nGROUP BY Question.Id","CreationDate":"2020-06-11 17:07:34","validated":true}
{"QuerySetId":1250681,"Title":"Bounties (with users) between two dates","Description":null,"QueryBody":"SELECT  bs.PostId AS [Post Link], u.Id AS [User Link], u.Reputation, bs.CreationDate, bs.BountyAmount\nFROM Users u INNER JOIN Votes bs ON u.Id = bs.UserId\nWHERE\n bs.VoteTypeId = 8  -- BountyStart\nAND bs.CreationDate >= '##Date1?2020-06-01##' AND bs.CreationDate <= '##Date2?2020-07-01##'\nORDER BY bs.CreationDate DESC","CreationDate":"2020-06-12 11:28:12","validated":true}
{"QuerySetId":1250705,"Title":"Number of posts per month by the given users","Description":null,"QueryBody":"SELECT \n  eomonth(p.creationdate) AS Month,\n  u.Id AS [User Link],\n  Count(p.Id) AS Count\nFROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\nWHERE u.Id IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY eomonth(p.creationdate), u.Id\nORDER BY eomonth(p.creationdate)","CreationDate":"2020-06-12 13:45:40","validated":true}
{"QuerySetId":1251944,"Title":"Posts where last event was CW-ification","Description":null,"QueryBody":"SELECT \n ph.PostId AS [Post Link],\n revisions = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions'\nFROM PostHistory ph\n WHERE (ph.PostHistoryTypeId=16)\n---16 = CW\nAND ph.Id IN (\n   SELECT\n     MAX(Id) as last\n    FROM PostHistory\n    GROUP BY PostId\n)\n---only look at the last event for the given post\nORDER BY ph.PostId DESC","CreationDate":"2020-06-16 16:33:31","validated":true}
{"QuerySetId":1252003,"Title":"Posthistory for a specific post","Description":null,"QueryBody":"SELECT \n  Id,\n  PostHistoryTypeId,\n  CASE PostHistoryTypeId \n   WHEN 1 THEN 'Initial Title'\n   WHEN 2 THEN 'Initial Body'\n   WHEN 3 THEN 'Initial Tags'\n   WHEN 4 THEN 'Edit Title'\n   WHEN 5 THEN 'Edit Body'\n   WHEN 6 THEN 'Edit Tags'   \n   WHEN 7 THEN 'Rollback Title'\n   WHEN 8 THEN 'Rollback Body'\n   WHEN 9 THEN 'Rollback Tags'\n  END, \n  CreationDate,\n  UserId AS [User Link], UserDisplayName,\n  Comment, Text\nFROM PostHistory\nWHERE PostId=##id?1##","CreationDate":"2020-06-16 18:41:56","validated":true}
{"QuerySetId":1252021,"Title":"Questions answered by more than 3 \"Top N\" users","Description":"Thanks to https:\/\/codereview.stackexchange.com\/a\/244191\/103675 for the improvements!","QueryBody":"SELECT  Q.Id AS [Post Link], Q.AnswerCount\nFROM Posts Q\nWHERE Q.AnswerCount >= 3\nAND\n(\n  SELECT COUNT( DISTINCT A.OwnerUserId)\n  FROM Posts A\n  WHERE A.ParentId = Q.Id\n  AND A.OwnerUserId IN\n  (\n    SELECT TOP ##TopN## Id\n    FROM Users\n    ORDER BY Reputation DESC\n  )\n) = 3","CreationDate":"2020-06-23 16:59:34","validated":true}
{"QuerySetId":1252270,"Title":"Posts where last event was CW-ification and it wasn't done by the OP","Description":null,"QueryBody":"SELECT \n ph.PostId AS [Post Link],\n revisions = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions'\nFROM PostHistory ph INNER JOIN Posts p ON p.Id=ph.PostId\n WHERE (ph.PostHistoryTypeId=16)\n---16 = CW\nAND (ph.UserId!=p.OwnerUserId)\n---turned to CW by a user other than the OP\nAND ph.Id IN (\n   SELECT\n     MAX(Id) as last\n    FROM PostHistory\n    GROUP BY PostId\n)\n---only look at the last event for the given post\nORDER BY ph.PostId DESC","CreationDate":"2020-06-17 4:53:27","validated":true}
{"QuerySetId":1252482,"Title":"Number of edits before and after CW","Description":null,"QueryBody":"WITH  cw_cte as\n(SELECT\n  ph.Id AS cwid,\n  ph.PostId AS pid\nFROM PostHistory ph INNER JOIN Posts p ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=16)\n---16 = Community Owned - post now community owned\n)\n\nSELECT TOP(##num?100##)\n  COUNT (DISTINCT RevisionGUID) AS [All edits],\n  SUM(CASE WHEN (ph.Id<c.cwid) THEN 1 ELSE 0 END) AS [Edits before CW],\n  SUM(CASE WHEN (ph.Id>c.cwid) THEN 1 ELSE 0 END) AS [Edits after CW],\n  ph.PostId AS [Post Link],\n  revisions = 'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions'\nFROM cw_cte c INNER JOIN PostHistory ph ON (ph.PostId=c.pid) \nWHERE (ph.PostHistoryTypeId in (1,2,3,4,5,6,7,8,9))\n---only edits\nGROUP BY ph.PostId\nORDER BY ph.PostId DESC","CreationDate":"2020-06-17 17:14:51","validated":true}
{"QuerySetId":1253112,"Title":"Suggested edit votes on a specific posts","Description":null,"QueryBody":"SELECT \n  sv.Id,\n  sv.CreationDate,\n  CASE sv.VoteTypeId\n    WHEN 2 THEN 'Approve'\n    WHEN 3 THEN 'Reject'\n  END AS Vote,\n  sv.UserId AS [User Link],\n  sv.TargetUserId AS [User Link],\n  sv.TargetRepChange,\n  sv.SuggestedEditId AS [Suggested Edit Link]\nFROM SuggestedEdits se INNER JOIN SuggestedEditVotes sv ON se.Id=sv.SuggestedEditId\nWHERE se.PostId=##postid?3376##\nORDER BY sv.Id","CreationDate":"2020-06-18 21:21:06","validated":true}
{"QuerySetId":1253323,"Title":"Combined PostHistory (question and all the answers)","Description":null,"QueryBody":"SELECT \n  p.Id, \n  CASE \n    WHEN (p.ParentId IS NULL) \n    THEN 'Question'\n    ELSE 'Answer'\n  END,\n  ---ph.Id, \n  ---ph.CreationDate\n  ph.PostHistoryTypeId,\n  CASE ph.PostHistoryTypeId\n    WHEN 1 THEN 'Initial Title'\n    WHEN 2 THEN 'Initial Body'\n    WHEN 3 THEN 'Initial Tags'\n    WHEN 4 THEN 'Edit Title'\n    WHEN 5 THEN 'Edit Body'\n    WHEN 6 THEN 'Edit Tags'\n    WHEN 7 THEN 'Initial Title'\n    WHEN 8 THEN 'Initial Body'\n    WHEN 9 THEN 'Initial Tags'\n  END,\n  ph.UserId AS [User Link],\n  ph.Comment\nFROM PostHistory ph INNER JOIN Posts p ON p.Id=ph.PostId\nWHERE coalesce(p.parentid, p.id)=##qid?85211##\n---either the post or the parent has this id\nORDER BY ph.Id DESC","CreationDate":"2020-06-19 6:39:36","validated":true}
{"QuerySetId":1255205,"Title":"Answers posted by users within specific creation date","Description":null,"QueryBody":"SELECT  *\nFROM Posts p\nINNER JOIN Users u ON u.Id = p.OwnerUserId \nWHERE convert(date, p.CreationDate) >= convert(date, ##Start:string##)\nAND convert(date, p.CreationDate) <= convert(date, ##End:string##)\nAND p.PostTypeId = 2\nORDER BY u.Id, convert(date, p.CreationDate)","CreationDate":"2020-06-24 11:23:54","validated":true}
{"QuerySetId":1256324,"Title":"Get user information for users who first posted a question during specific time period","Description":null,"QueryBody":"SELECT  u.Id, u.Reputation, u.CreationDate, u.DisplayName, u.LastAccessDate, p.Id\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Users as u on u.Id = p.OwnerUserId\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 1","CreationDate":"2020-06-27 16:05:57","validated":true}
{"QuerySetId":1256326,"Title":"Review tasks for your posts","Description":null,"QueryBody":"SELECT \n  p.Id as [Post Link],\n  t.*\nFROM ReviewTasks as t\nINNER JOIN Posts as p\nON \n  t.PostId = p.Id\n  AND p.OwnerUserId = ##UserId##","CreationDate":"2020-06-27 15:28:24","validated":true}
{"QuerySetId":1257269,"Title":"Get comments to users' first answer posts between dates","Description":null,"QueryBody":"SELECT  c.PostId, c.Score, c.Text, c.CreationDate\nfrom (\n  SELECT OwnerUserId, MIN(CreationDate) as firstdate\n  from Posts\n  group by OwnerUserID ) as latest\n  inner join Posts as p on p.OwnerUserId = latest.OwnerUserId and p.CreationDate = latest.firstdate\n  inner join Comments as c on c.PostId = p.Id\nwhere\n  convert(date, p.CreationDate) >= convert(date, ##Start:string##)\n  AND convert(date, p.CreationDate) <= convert(date, ##End:string##)\n  AND p.PostTypeId = 2","CreationDate":"2020-06-30 12:13:38","validated":true}
{"QuerySetId":1258220,"Title":"Distribution of post frequency by users","Description":null,"QueryBody":"SELECT \n   c.post_count\n  ,c.cum_posts\n  ,100.0* c.cum_posts \/ max(c.cum_posts) \n     over (order by c.post_count desc) cum_posts_pctg\n  ,c.cum_users\n  ,100.0* c.cum_users \/ max(c.cum_users) \n     over (order by c.post_count desc) cum_users_pctg\nfrom(\n  SELECT\n    b.post_count\n   ,1.0*sum(b.post_count) over (order by b.post_count desc) \n      as cum_posts\n   ,1.0*sum(b.users_having_post_count) over (order by b.post_count desc) \n      as cum_users\n  from (\n    SELECT \n       a.post_count\n      ,count(a.user_id) as users_having_post_count\n    from (\n      SELECT\n         OwnerUserId as user_id\n        ,count(Id) as post_count\n      from Posts\n      where OwnerUserId is not null\n      group by OwnerUserId\n    ) as a\n    group by a.post_count\n  ) as b\n) as c\norder by 1 desc\n;","CreationDate":"2020-07-03 4:16:36","validated":true}
{"QuerySetId":1258473,"Title":"Stack Overflow number of GPU tags","Description":null,"QueryBody":"SELECT  \n        t.TagName,Count(*)\n    FROM \n        Posts p\n    JOIN PostTags pt on p.Id = pt.PostId\n    JOIN Tags t on pt.TagId = t.Id\n    WHERE\n      (t.TagName = 'opencl'\n      or t.TagName = 'cuda'\n      or t.TagName = 'openacc'\n      or t.TagName = 'openmp'\n      or t.TagName = 'cuda'\n      or t.TagName = 'accelerate-haskell'\n      or t.TagName = 'halide'\n      or t.TagName = 'futhark'\n      )\n    GROUP BY t.TagName;","CreationDate":"2020-07-03 20:19:52","validated":true}
{"QuerySetId":1259149,"Title":"after how many hours after the first nomination of that election was in","Description":"after how many hours after the first nomination of that election was in","QueryBody":"WITH  nominations as \n(select row_number() over(order by creationdate asc) num\n      , creationdate\nfrom posts\nwhere posttypeid = 6\n)\n\nselect *\ninto #nominations\nfrom nominations\n\nselect f.num\n     , f.creationdate\n     , datediff(\n         d\n       , coalesce(\n          (select creationdate \n           from #nominations\n           where num = f.num -1)\n          , f.creationdate)\n       , f.creationdate) [diff]\ninto #nom_diff\nfrom #nominations f\norder by f.num\n\nselect row_number() over(order by num) [election]\n     , *\ninto #elections\nfrom (\nselect *\nfrom #nom_diff\nwhere num = 1\nunion\nselect *\nfrom #nom_diff\nwhere diff > 7\n) data\n\nselect *\nfrom #elections","CreationDate":"2020-07-05 23:59:03","validated":true}
{"QuerySetId":1259424,"Title":"Top users by average answer score","Description":null,"QueryBody":"SELECT  TOP 100\na.OwnerUserId AS [User Link], a.OwnerDisplayName, AVG(CAST(a.Score AS decimal)) AS [Average Score], SUM(a.Score) AS [Total Score], COUNT(a.Id) AS [Num Answers]\nFROM Posts a\nWHERE a.PostTypeId=2 \nGROUP BY a.OwnerUserId, a.OwnerDisplayName\nORDER BY AVG(a.Score) DESC","CreationDate":"2020-07-06 18:56:20","validated":true}
{"QuerySetId":1259600,"Title":"Average total score of users depending on number of posts","Description":null,"QueryBody":"WITH postgroups_cte AS (\nSELECT\n  u.Id AS uid,\n  SUM(p.Score) AS sco,\n  CAST(COUNT(p.Id)\/##mult?100## AS int) AS pgroup\n  FROM Users u INNER JOIN Posts p ON p.OwnerUserId=u.Id\n  GROUP BY u.Id\n)\n\nSELECT\n  pgroup,\n  AVG(CAST(sco AS decimal)) AS Average\nFROM postgroups_cte\nGROUP BY pgroup\nORDER BY pgroup DESC","CreationDate":"2020-07-07 5:24:39","validated":true}
{"QuerySetId":1259738,"Title":"Comments containing the given two keywords","Description":null,"QueryBody":"SELECT  Id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE (Text LIKE '%##Word1?student##%') AND (Text LIKE '%##Word2?homework##%')\nORDER BY CreationDate","CreationDate":"2020-07-07 15:42:58","validated":true}
{"QuerySetId":1260806,"Title":"find posts and the revisions of \"moderator only\" content","Description":"like the election page, the on-topic help page, tour (payoff, do, don't)","QueryBody":"SELECT  p.id\n     , body\n     -- , p.creationdate\n     , ph.userid as [User Link]\n     , concat('site:\/\/posts\/', postid, '\/revisions|Revision') [revision]\n     , ph.creationdate\n     , ph.comment\n     , ph.text\nfrom posts p\ninner join posthistory ph on ph.postid = p.id\nwhere posttypeid = 7 \norder by postid, ph.creationdate","CreationDate":"2020-07-09 14:39:34","validated":true}
{"QuerySetId":1260950,"Title":"Number of questions for a moon tag","Description":null,"QueryBody":"SELECT  COUNT(*) FROM Posts\nWHERE Id in (\n             SELECT DISTINCT(PostId) FROM PostTags WHERE TagId in (\n                                                                   SELECT Id FROM Tags WHERE TagName like '%moon%'));","CreationDate":"2020-07-09 18:36:40","validated":true}
{"QuerySetId":1260991,"Title":"Questions with the highest number of bounties","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\nRANK() OVER(ORDER BY Count(bs.Id) DESC) AS Rank,\nCOUNT(bs.Id) AS [Number of bounties],\nSUM(bs.BountyAmount) AS [Total amount],\np.Id AS [Post Link],\np.Score, p.AnswerCount, \np.OwnerUserId AS [User Link],\np.Tags\nFROM Posts p INNER JOIN Votes bs ON p.Id = bs.PostId\nWHERE bs.VoteTypeId = 8  -- BountyStart\nGROUP BY p.Id, p.Score, p.AnswerCount, p.OwnerUserId, p.Tags \nORDER BY COUNT(bs.Id) DESC","CreationDate":"2020-07-09 19:37:07","validated":true}
{"QuerySetId":1261570,"Title":"Number of gold, silver, bronze badges for users from a list","Description":null,"QueryBody":"SELECT \n  UserId AS [User Link],\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nWHERE UserId IN (##list?2,3,66,121,1409,2000,2926##)\nGROUP BY UserId\nORDER BY gold DESC, silver DESC, bronze DESC, total DESC","CreationDate":"2020-07-11 7:11:53","validated":true}
{"QuerySetId":1261627,"Title":"Get the SO users from China created after 2017-01-01","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%china%'\n    OR UPPER(Location) LIKE '%China%'\n    AND CreationDate >= '2017-01-01'\nORDER BY\n    Reputation DESC;","CreationDate":"2020-07-11 19:06:08","validated":true}
{"QuerySetId":1261831,"Title":"Questions with short initial body","Description":null,"QueryBody":"SELECT  TOP(##num?100##)\n  p.Id AS [Post Link], \n  ph.Text AS [Initial Title], \n  concat('site:\/\/posts\/',\n        p.Id,\n        '\/revisions'\n        ) [Revisions Link],\n  p.OwnerUserId AS [User Link], p.Score, p.Tags, p.CreationDate\nFROM Posts p INNER JOIN PostHistory ph ON ph.PostId=p.Id\nWHERE (ph.PostHistoryTypeId=2) AND (p.PostTypeId=1) \n  AND (len(ph.Text)<=##len?150##)\nORDER BY p.Id DESC\n---PostHistoryTypeId (listed in the PostHistoryTypes table)\n---1 = Initial Title - initial title (questions only)\n---2 = Initial Body - initial post raw body text","CreationDate":"2020-07-12 12:46:25","validated":true}
{"QuerySetId":1261861,"Title":"Top 5 users of asp.net core in Morocco","Description":null,"QueryBody":"SELECT  TOP 5 ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('asp.net-core')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%morocco%'\nORDER BY Score DESC;","CreationDate":"2020-07-12 15:45:06","validated":true}
{"QuerySetId":1261938,"Title":"Find all users above given reputation (just names)","Description":null,"QueryBody":"SELECT \n  Id AS [User Link], DisplayName\nFROM Users   \nWHERE Reputation > ##rep?1000##\nORDER BY Id","CreationDate":"2020-07-12 18:52:07","validated":true}
{"QuerySetId":1262279,"Title":"Questions that have been unprotected at some point","Description":null,"QueryBody":"SELECT ph.PostId,\n       p.Id AS [Post Link],\n       ph.CreationDate AS [Unprotected At]\nFROM PostHistory ph\nINNER JOIN Posts p ON ph.PostId = p.Id\nWHERE ph.PostHistoryTypeId = 20\nORDER BY [Unprotected At] DESC;","CreationDate":"2020-07-13 7:36:34","validated":true}
{"QuerySetId":1262581,"Title":"users assigned caucus badge between dates","Description":null,"QueryBody":"SELECT  b.name,\n    CONVERT(VARCHAR(10), b.Date, 111) [date],\n    CONVERT(VARCHAR(10), u.Reputation \/ 1000) + 'k' reputation,\n    count(*) [number of users]\nfrom users u\ninner join badges b on b.userid = u.id\nwhere b.name = ##badgename:string?Caucus## collate SQL_Latin1_General_Cp1_ci_ai\nand b.Date >= CONVERT(DATETIME, ##begindate:string?2020-07-06##,102)\nand  b.Date <= CONVERT(DATETIME, ##enddate:string?2020-07-13##,102)\nand tagbased = 0\ngroup by b.name, b.class, CONVERT(VARCHAR(10),b.Date, 111), u.Reputation \/ 1000\norder by  CONVERT(VARCHAR(10),b.Date, 111), u.Reputation \/ 1000, count(*)","CreationDate":"2020-07-13 17:59:08","validated":true}
{"QuerySetId":1263093,"Title":"How many questions tagged with [tag] in retag\u2039","Description":null,"QueryBody":"DECLARE  @question int = 1;\nDECLARE @reTag int = 3;\nDECLARE @tagToSearch nvarchar(35) = ##tag:string?google-apps-script-web-application##;\n\n\nselect\ncast(Posts.CreationDate as date),\nPosts.Tags,\nPosts.Id as [Post Link]\nfrom\nPosts\nwhere\nPosts.PostTypeId = @question\nand\n  Posts.Tags = ('<' + @tagToSearch + '>' )\n\ngroup by\nPosts.Tags,Posts.Id, cast(Posts.CreationDate as date)\norder by\ncast(Posts.CreationDate as date) desc","CreationDate":"2020-08-10 9:37:20","validated":true}
{"QuerySetId":1264264,"Title":"Number of questions asked by a group of users in 30 days","Description":null,"QueryBody":"WITH  Questions AS (\n  SELECT Id, OwnerUserId, Score, CreationDate\n    FROM Posts  \n    WHERE OwnerUserId IN (SELECT VALUE FROM STRING_SPLIT(##UserIDs:string##, ','))\n)\nSELECT q.Id AS [Post Link], q.OwnerUserId AS [User Link], q.Score, q.CreationDate,\n  COUNT(*) AS '# of Qs in 30 days'\n  FROM Questions AS q\n  INNER JOIN Questions AS q2\n    ON DATEDIFF(DAY, q2.CreationDate, q.CreationDate) BETWEEN 0 AND 30\n  GROUP BY q.Id, q.OwnerUserId, q.Score, q.CreationDate\n  ORDER BY q.CreationDate DESC","CreationDate":"2020-07-18 14:25:35","validated":true}
{"QuerySetId":1266063,"Title":"Distribution of the owners of the Epic badge by their estimated rep at the time of getting the badge","Description":null,"QueryBody":"WITH  Raw AS (\n  SELECT\n    Posts.OwnerUserId AS [User Link],\n    SUM(\n      CASE\n        WHEN Votes.VoteTypeId = 1 THEN 15\n        WHEN Votes.VoteTypeId = 2 THEN 10\n        ELSE -2\n      END\n    ) AS EstRep\n  FROM Posts, Votes, Users, Badges\n  WHERE\n    Badges.Name = 'Epic'\n    AND\n    Badges.TagBased = 0\n    AND\n    Badges.UserId = Users.Id\n    AND\n    Posts.OwnerUserId = Users.Id\n    AND\n    Posts.PostTypeId BETWEEN 1 AND 2\n    AND\n    Posts.CommunityOwnedDate IS NULL\n    AND\n    Posts.Id = Votes.PostId\n    AND\n    Votes.VoteTypeId BETWEEN 1 AND 3\n    AND\n    Votes.CreationDate < Badges.Date\n  GROUP BY Posts.OwnerUserId\n)\nSELECT\n  1000 * FLOOR(0.001 * EstRep) AS EstRepK,\n  COUNT(*) AS Count\nFROM Raw\nGROUP BY 1000 * FLOOR(0.001 * EstRep)\nORDER BY EstRepK","CreationDate":"2020-09-02 17:55:13","validated":true}
{"QuerySetId":1266413,"Title":"Questions and Answers per Day since some date","Description":null,"QueryBody":"SELECT \n    CAST(CreationDate AS DATE),\n    SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,\n    SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers\nFROM\n    Posts\nWHERE\n    convert(varchar(10),CreationDate, 120) >= '##Date##'\nGROUP BY\n    CAST(CreationDate AS DATE)\nORDER BY\n    CAST(CreationDate AS DATE) Desc","CreationDate":"2020-07-24 23:36:34","validated":true}
{"QuerySetId":1266778,"Title":"TOP Java users in Austin","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%texas%'\n     AND  TagName = 'java'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2020-07-27 17:50:32","validated":true}
{"QuerySetId":1266858,"Title":"posts with more than 2 comments before the first period","Description":null,"QueryBody":"SELECT SUBSTRING(Body, 0, (CHARINDEX('.', Body)+1)), CHARINDEX('.', BODY)+1, Body FROM Posts WHERE CommentCount > 2 ;","CreationDate":"2020-07-25 2:07:05","validated":true}
{"QuerySetId":1267286,"Title":"Posts tagged with tag that contain the tag as title prefix","Description":null,"QueryBody":"DECLARE  @tag nvarchar(35) = ##tag:string##\n\nselect\n  Id as [Post Link],\n  Tags,\n  Score,\n  AnswerCount as Answers\nfrom\n  Posts\nwhere\n  charindex(@tag,Tags) > 0\n  and\n  lower(Title) like replace(@tag,'-',' ') + '%'\n  and\n  ClosedDate is null\norder by\n  Score\ndesc","CreationDate":"2020-08-23 1:13:06","validated":true}
{"QuerySetId":1267821,"Title":"Find number of comment with the given  search text","Description":null,"QueryBody":"SELECT  c.text, \n         c.id AS [Comment Link], \n         creationdate \nFROM     comments c \nWHERE    c.text LIKE '%##keyword1##%' \nORDER BY creationdate desc","CreationDate":"2020-07-28 14:33:01","validated":true}
{"QuerySetId":1268684,"Title":"Lowest reputation users with a specific badge","Description":null,"QueryBody":"SELECT  TOP(##num?500##)\n  RANK() OVER(ORDER BY u.Reputation ASC) AS Rank,\n  u.Id AS [User Link],\n  u.Reputation,\n  COUNT (b.Id) AS [Count]\nFROM Badges b INNER JOIN Users u ON b.UserId=u.Id\n  WHERE (b.Name = '##name?Famous Question##')\nGROUP BY u.Id, u.Reputation\nORDER BY u.Reputation ASC","CreationDate":"2020-07-29 11:00:13","validated":true}
{"QuerySetId":1273464,"Title":"Users with at least n gold badges","Description":null,"QueryBody":"WITH  tagbadges_cte AS (\nSELECT\n  b.UserId AS uid,\n  sum(case when b.class = 1 then 1 else 0 end) AS gold,\n  sum(case when b.class = 2 then 1 else 0 end) AS silver,\n  sum(case when b.class = 3 then 1 else 0 end) AS bronze,\n  count(b.Id) AS total\nFROM Badges b INNER JOIN Tags t on t.TagName = Name\nGROUP BY UserId\n)\n\nSELECT TOP(##num?100##)\n  u.Id As [User Link],\n  u.Reputation,\n  b.gold, b.silver, b.bronze\nFROM tagbadges_cte b INNER JOIN Users u ON b.uid=u.Id\nWHERE (gold>=##min?5##)\nORDER BY gold DESC,silver DESC,bronze DESC","CreationDate":"2020-08-08 11:46:44","validated":true}
{"QuerySetId":1273820,"Title":"Shows the tag scores and per-tag post counts for a given user, with the top 9 tags _by non-CW post count_ selected for showing on the profile page, then ordered by tag score.","Description":"Shows the tag scores and per-tag post counts for a given user, with the top 9 tags _by non-CW post count_ selected for showing on the profile page, then ordered by tag score.\n\nThe top six of these actually make it to the profile page.\n\nThere are parameters to alter the post-count cutoff point and a flag to enable counting Community Wiki posts in the per-tag post counts. The defaults for these are what is actually used, but playing with these settings can help understanding the algorithm better.","QueryBody":"WITH  by_post_count AS (\n  SELECT\n    t.TagName AS Tag\n  , COUNT(a.Id) AS [Post Count]\n  , SUM(\n      CASE\n        WHEN (a.CommunityOwnedDate IS NULL) THEN 1\n        ELSE 0\n      END\n    ) AS Score\n  , RANK() OVER (ORDER BY COUNT(a.Id) DESC) AS post_count_rank\n  FROM Posts a\n  INNER JOIN Posts q     ON q.Id = a.ParentId\n  INNER JOIN PostTags pt ON pt.PostId = q.Id\n  INNER JOIN Tags t      ON t.Id = pt.TagId\n  WHERE\n      a.OwnerUserId = ##userid##\n  GROUP BY t.TagName\n)\nSELECT\n  RANK() OVER (ORDER BY Score DESC)\n, Tag\n, Score\n, [Post Count]\nFROM by_post_count\nWHERE post_count_rank <= 9\nORDER BY Score DESC;","CreationDate":"2020-08-10 15:05:58","validated":true}
{"QuerySetId":1274670,"Title":"Percent of users who added this [tag]?","Description":null,"QueryBody":"SELECT\nFIRST_USER as [User Link],\nCOUNT(PostId) AS 'COUNT',\nCOUNT(PostId)*100\/SUM(COUNT(PostId)) OVER () AS '%'\nFROM\n(select\nMAX(CreationDate) AS CDATE,\nPostId,\nFIRST_USER\nfrom\n(SELECT\nFIRST_VALUE(PH.UserId) OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate) AS FIRST_USER,\n*\nFROM \nPostHistory as PH\nWHERE\nPH.Text like '%<' + @tagToSearch + '>%'\n) AS P\ngroup by\nPostId,FIRST_USER\n) AS FULL_DATA\n\nGROUP BY\n\nFIRST_USER\n\nORDER BY\n\nCOUNT(PostId) desc","CreationDate":"2020-08-12 8:47:31","validated":true}
{"QuerySetId":1274714,"Title":"Score vs. Number of bookmarks","Description":null,"QueryBody":"SELECT  COUNT(*) AS 'Total questions',\n  SUM(IIF(Score > COALESCE(FavoriteCount, 0), 1, 0)) AS 'Score > Bookmarks',\n  SUM(IIF(Score = COALESCE(FavoriteCount, 0), 1, 0)) AS 'Score = Bookmarks',\n  SUM(IIF(Score < COALESCE(FavoriteCount, 0), 1, 0)) AS 'Score < Bookmarks'\n  FROM Posts\n  WHERE PostTypeId = 1 -- Questions","CreationDate":"2020-08-12 10:38:26","validated":true}
{"QuerySetId":1275759,"Title":"Accepted answers after closing a question","Description":null,"QueryBody":"SELECT  q.Id AS [Post Link],\n  q.ClosedDate AS 'Closed on',\n  v.CreationDate AS 'Accepted on'\n  FROM Posts AS q\n  INNER JOIN Posts AS a\n    ON q.Id = a.ParentId\n  INNER JOIN Votes AS v\n    ON a.Id = v.PostId\n  WHERE v.VoteTypeId = 1 -- Accept\n    AND v.CreationDate > q.ClosedDate\n  ORDER BY q.CreationDate DESC","CreationDate":"2020-08-13 0:34:48","validated":true}
{"QuerySetId":1279722,"Title":"Top score in answer between two dates","Description":null,"QueryBody":"SELECT  TOP (500)\n  RANK() OVER(ORDER BY SUM(Score) DESC) AS [Rank],\n  OwnerUserId AS [User Link],\n  SUM(Score) AS [Total Score],\n  COUNT(Id) AS [Count]\nFROM Posts\nWHERE (CreationDate >= '##Date1?2020-01-01##') AND (CreationDate <= '##Date2?2021-01-01##')\n  AND (PostTypeId=2) ---answers\nGROUP BY OwnerUserId\nORDER BY SUM(Score) DESC","CreationDate":"2020-08-17 11:42:45","validated":true}
{"QuerySetId":1287006,"Title":"posts with link IBM Cloud query for August 2020","Description":null,"QueryBody":"SELECT  distinct\nPosts.Id AS [Post Link],\nPosts.CreationDate,\nPosts.ViewCount,\nPosts.AnswerCount,\nPosts.CommentCount,\nPosts.Tags\nfrom Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nINNER JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nleft JOIN Users ON Users.Id = Posts.OwnerUserId\n\nWHERE\nTags.TagName IN ('ibm-cloud')\nAND Posts.CreationDate BETWEEN 08\/01\/2020 AND 09\/01\/2020\nOrder by Posts.Id Asc","CreationDate":"2020-11-17 3:55:25","validated":true}
{"QuerySetId":1287791,"Title":"Year Answer Count and Number of Posts","Description":null,"QueryBody":"SELECT  DATEPART(YEAR, p.CreationDate) as [Year], p.AnswerCount as [Number of Answers], convert(BigInt, count(p.Id)) as [Number of Posts]\nfrom Posts p\nwhere p.DeletionDate is null and p.PostTypeId = 1\ngroup by DATEPART(YEAR, p.CreationDate), p.AnswerCount\norder by p.AnswerCount, DATEPART(YEAR, p.CreationDate)","CreationDate":"2020-08-28 20:42:11","validated":true}
{"QuerySetId":1287922,"Title":"Posts by Day of Week since Jan. 2020","Description":"Number of posts by day of week, since Jan. 1, 2020","QueryBody":"SELECT  DATENAME(dw, CreationDate) AS dow, pt.name, COUNT(*) AS cnt\n\nFROM Posts p\nINNER JOIN posttypes pt ON p.posttypeid=pt.id\n\nWHERE CreationDate >= '2020-01-01T00:00:00'\n\nGROUP BY DATENAME(dw, CreationDate), name\nORDER BY name, cnt","CreationDate":"2020-08-29 16:34:43","validated":true}
{"QuerySetId":1288424,"Title":"How can I find all the self-answers available on Stack Overflow? How popular are self-answers? How often has the answer been split up due to the 30000 character space constraint and because the user has a lot more to talk about? Do self-answers often attract additional answers from other users?","Description":"https:\/\/meta.stackoverflow.com\/questions\/400772\n\nHow popular are self-answers?\nHow often has the answer been split up due to the 30000 character space constraint and because the user has a lot more to talk about?\nDo self-answers often attract additional answers from other users?","QueryBody":"WITH  self_q as\n(\nselect q.id\n     , max(len(a.body)) [max len]\n     , (select count(*) \n        from posts p\n        where p.parentid = q.id\n        and p.owneruserid = q.owneruserid) [num_self]\nfrom posts q \ninner join posts a on a.parentid = q.id\nwhere q.owneruserid = a.owneruserid  \nand q.posttypeid = 1 \nand q.owneruserid is not null\nand q.owneruserid > -1\ngroup by q.id, q.owneruserid\n)\n\nselect count( q.id) [self answer]\n     , sum(q.answercount) [# answers]\n     , sum(case when q.answercount = 1 then 1 else 0 end) [only OP answered]\n     , sum(case when [max len] > 29000 then 1 else 0 end) [large answers]\n     , sum(case when [num_self]>1 then 1 else 0 end) [OP more then one answer]\nfrom posts q \ninner join self_q on self_q.id = q.id","CreationDate":"2020-08-31 1:14:01","validated":true}
{"QuerySetId":1289247,"Title":"Number of gold badge holders for each tag","Description":null,"QueryBody":"SELECT  b.name tag, count(*) holders\nFROM Badges b, Users u\nWHERE b.class=1 and b.tagBased = 1 and u.Id=b.UserId \nGROUP BY b.name\nORDER BY holders DESC","CreationDate":"2020-09-02 0:35:36","validated":true}
{"QuerySetId":1291750,"Title":"Questions which were bumped by community user many times","Description":null,"QueryBody":"SELECT \n  RANK() OVER (ORDER BY COUNT(ph.Id) DESC) AS [Rank],\n  COUNT(ph.Id) AS [Count],\n  ph.PostId AS [Post Link], \n  'site:\/\/posts\/' + CAST(ph.PostId AS varchar)+'\/revisions' AS [Revision History]\nFROM PostHistory ph\nWHERE ph.PostHistoryTypeId=50\n---50 = Bumped by Community User\nGROUP BY ph.PostId\nORDER BY COUNT(ph.Id) DESC","CreationDate":"2020-09-07 18:01:24","validated":true}
{"QuerySetId":1293945,"Title":"Search comments by user ID and search term, by length of text","Description":null,"QueryBody":"SELECT  TOP 500\n  PostId AS [Post Link],\n  CreationDate,\n  Id AS [Comment Link]\nFROM\n  comments\nWHERE\n  UserId = '##UserId:int##'\n  AND LOWER(text) LIKE '%' + LOWER(##SearchString:string##) + '%'\nORDER BY LEN(text) ASC","CreationDate":"2020-09-13 16:01:31","validated":true}
{"QuerySetId":1295307,"Title":"Comments containing the given two keywords (case insensitive) 2","Description":null,"QueryBody":"SELECT  PostID AS [Post Link], id AS [Comment Link], text, UserId AS [User Link], CreationDate\nFROM Comments\nWHERE (Text LIKE '%##Word1?student##%' COLLATE Latin1_General_CI_AI) AND (Text LIKE '%##Word2?homework##%' COLLATE Latin1_General_CI_AI)\nORDER BY CreationDate","CreationDate":"2020-09-17 11:39:28","validated":true}
{"QuerySetId":1297289,"Title":"Top users from Bia\u0142ystok, Poland","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Pos,\n  Id As [User Link],\n  Reputation\nFROM Users \nWHERE LOWER(Location) Like '%bia_ystok%'\nORDER BY Reputation DESC","CreationDate":"2020-12-08 16:43:49","validated":true}
{"QuerySetId":1304813,"Title":"User with highest average comment score","Description":null,"QueryBody":"SELECT  TOP ##num?100##\nc.UserId AS [User Link], c.UserDisplayName,\nAVG(CAST(c.Score AS decimal)) AS [Average Score], SUM(c.Score) AS [Total Score], COUNT(c.Id) AS [Total Count],\n'site:\/\/users\/' + CAST(c.UserId AS varchar) + '?tab=activity&sort=comments' AS [Link to comments]\nFROM Comments c\nGROUP BY c.UserId, c.UserDisplayName\nHAVING COUNT(c.Score)>=##min?5##\nORDER BY AVG(CAST(c.Score AS decimal)) DESC","CreationDate":"2020-10-13 16:20:31","validated":true}
{"QuerySetId":1307455,"Title":"Tag edits by a specific user between two dates","Description":null,"QueryBody":"SELECT \n  Text AS [Tags],\n  PostId AS [Post Link],\n  'site:\/\/posts\/' + CAST(PostId AS varchar)+'\/revisions' AS [Revision History],\n  CreationDate,\n  UserId AS [User Link]\nFROM PostHistory  \nWHERE (PostHistoryTypeId=6) AND \n  (UserId=##userid?14094##) AND \n  (CreationDate >= '##Date1?2020-01-01##') AND (CreationDate <= '##Date2?2021-01-01##')","CreationDate":"2020-10-09 13:59:54","validated":true}
{"QuerySetId":1307881,"Title":"Top 100 AWS (amazon-web-services) users from Pakistan","Description":null,"QueryBody":"SELECT  TOP 100 ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('amazon-web-services')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%pakistan%'\nOR lower(us.Location) like '%pak%'\nORDER BY Score DESC;","CreationDate":"2020-10-10 8:13:55","validated":true}
{"QuerySetId":1307996,"Title":"Top users for a tag","Description":null,"QueryBody":"DECLARE  @tagName nvarchar(35) = '##tagName##'\n\nSELECT TOP 200\n    ROW_NUMBER() OVER (ORDER BY TagName) AS [Rank],\n    Users.Id AS [User Link],\n    SUM(CASE votes.votetypeid \n            WHEN 2 THEN 1  -- upvote\n            WHEN 3 THEN -1  -- downvote\n            END) as [Tag score],\n    COUNT(DISTINCT(Posts.Id)) AS [Number of answers]\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id                \n    LEFT OUTER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE Tags.TagName = @tagName\n    AND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName, Users.Id\nORDER BY 3 DESC","CreationDate":"2020-10-11 19:11:51","validated":true}
{"QuerySetId":1308442,"Title":"Newer Users with More Reputation Than Me","Description":"Find useres that have been members for a shorter time than me\nbut have more reputation points.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect u.id as [User Link], u.Reputation, u.Reputation - me.Reputation as Difference\nfrom users u cross join users me\nwhere me.id = @UserId\nand u.CreationDate > me.CreationDate\nand u.Reputation > me.Reputation\norder by Difference desc, u.CreationDate Desc","CreationDate":"2020-10-11 19:35:43","validated":true}
{"QuerySetId":1308513,"Title":"other tags on Excel questions","Description":null,"QueryBody":"SELECT  tagname, tagid, count(*) cnt\nfrom posttags pt left join tags t on pt.tagid=t.id \nwhere postid in (\n  SELECT pt2.postid from posttags pt2 \n  left join tags t2 on pt2.tagid=t2.id \n  where t2.tagname like '%excel%' )\ngroup by tagid, tagname\nhaving count(*)>1\norder by cnt desc","CreationDate":"2020-10-11 21:44:57","validated":true}
{"QuerySetId":1309162,"Title":"Answers on Closed Question by a User","Description":"shows all closed answers for the specified user","QueryBody":"SELECT p.id as [Post Link] FROM Posts p LEFT JOIN Posts Q ON Q.Id = P.ParentId WHERE p.OwnerUserId = ##USERID## AND p.PostTypeId = 2 AND Q.ClosedDate IS NOT NULL ORDER BY p.CreationDate","CreationDate":"2020-10-21 3:56:09","validated":true}
{"QuerySetId":1310900,"Title":"Since when I upvoted this answer?","Description":"I find myself frequently looking for answer in StackExchange websites and found that I've already upvoted the useful answers, but I don't know since when I upvoted this answer.\n\n\nThis query can tell me since when I upvote this answer\/post?\n\n\nanswers\/question -> Posts table","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @PostId int = ##PostId##\n\n\nSELECT *\nFROM Votes\nWHERE PostId = @PostId\nAND UserId = @UserId","CreationDate":"2020-10-17 20:32:03","validated":true}
{"QuerySetId":1311362,"Title":"User with most famous\/notable\/popular badges","Description":null,"QueryBody":"SELECT  TOP(##num?200##)\n  UserId AS [User Link],\n  sum(case when class = 1 then 1 else 0 end) AS gold,\n  sum(case when class = 2 then 1 else 0 end) AS silver,\n  sum(case when class = 3 then 1 else 0 end) AS bronze,\n  count(Id) AS total\nFROM Badges\nWHERE (Name = '##name1?Famous Question##') OR (Name = '##name2?Notable Question##') OR  (Name = '##name3?Popular Question##')\nGROUP BY UserId\nORDER BY gold DESC, silver DESC, bronze DESC, total DESC","CreationDate":"2020-10-18 18:43:50","validated":true}
{"QuerySetId":1311738,"Title":"User rank in the world","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nORDER BY\n    Reputation DESC;","CreationDate":"2020-10-19 15:17:43","validated":true}
{"QuerySetId":1312484,"Title":"Posts-Answers Change For a Single Month","Description":null,"QueryBody":"SELECT  \n  MonthIndex, SUM(PostsAnswersCount) AS TotalPosts\nFROM (\n  SELECT \n    Posts.Id AS CurrentId, \n    Posts.Title AS CurrentTitle, \n    1 + Posts.AnswerCount AS PostsAnswersCount, \n    MONTH(Posts.CreationDate) AS CreationMonthCurrent, \n    YEAR(Posts.CreationDate) AS CreationYearCurrent,\n    DATEDIFF(month, '2008-07-01', CreationDate) AS MonthIndex\n  FROM Posts\n  WHERE Posts.PostTypeId = 1\n) AS PostsAnswersCounts\nGROUP BY MonthIndex\nORDER BY MonthIndex","CreationDate":"2020-10-22 4:46:36","validated":true}
{"QuerySetId":1313321,"Title":"Count of Users who can Downvote (have reputation above 125)","Description":null,"QueryBody":"SELECT \nCOUNT(u.Id) AS 'Total Users',\nCOUNT(CASE WHEN u.Reputation >= 125 THEN 1 ELSE NULL END) AS 'Total Can DV',\nCAST(\nROUND(\n  COUNT(\n    CASE WHEN u.Reputation >= 125 THEN 1 ELSE NULL END\n    ) \/ CAST(COUNT(u.Id) AS Float) * 100\n, 4)\nAS nvarchar) + '%' AS '% Can DV'\nFROM Users u\n\n-- 125 pulled from https:\/\/stackoverflow.com\/help\/privileges\/vote-down","CreationDate":"2020-10-22 3:26:38","validated":true}
{"QuerySetId":1313326,"Title":"Comments are like an encylopedia","Description":null,"QueryBody":"SELECT  p.PostId AS [Post Link],\n       p.Comment,\n       p.UserId AS [User Link]\nFROM PostHistory p\nWHERE p.UserId = ##UserId##\n  AND p.PostHistoryTypeId = 5 -- Edit Body\n  AND p.Comment LIKE '%encyclopedia%'","CreationDate":"2020-10-22 4:44:13","validated":true}
{"QuerySetId":1314234,"Title":"Questions with any of the tags in the title or body","Description":null,"QueryBody":"SELECT  TOP 10 p.Id AS [Post Link], p.Tags\n  FROM Posts AS p\n  INNER JOIN PostTags AS pt\n    ON p.Id = pt.PostId\n  INNER JOIN Tags AS t\n    ON t.Id = pt.TagId\n  WHERE ' ' + p.Title + ' ' LIKE ' %' + t.TagName + ' %'\n     OR ' ' + p.Body + ' ' LIKE ' %' + t.TagName + ' %'","CreationDate":"2020-10-23 19:37:43","validated":true}
{"QuerySetId":1315590,"Title":"Average Score in Top 5 Tags","Description":null,"QueryBody":"SELECT TOP (5)\n  Tags.tagName,\n  SUM(CASE WHEN Posts.PostTypeId = 1 THEN Posts.Score ELSE 0 END)\n    AS [Total Question Score],\n  COUNT(*) AS [Post Count],\n  SUM(Posts.Score) AS [Total Score],\n  COUNT(*) AS [Post Count],\n  ROUND(AVG(CAST(Posts.Score AS FLOAT)), 1, 1) AS [Average Score]\nFROM Posts\nJOIN PostTags\n  ON Posts.Id = PostTags.PostId OR Posts.ParentId = PostTags.PostId\nJOIN Tags\n  ON PostTags.TagId = Tags.Id\nGROUP BY Tags.tagName\nORDER BY [Average Score] DESC","CreationDate":"2020-10-26 20:37:39","validated":true}
{"QuerySetId":1316407,"Title":"Posts starting with upper case vs. lower case","Description":null,"QueryBody":"SELECT \n  SUM(CASE WHEN Text LIKE '[ABCDEFGHIJKLMNOPQRSTUVWXYZ]%' THEN 1 ELSE 0 END) AS 'Upper',\n  SUM(CASE WHEN Text LIKE '[abcdefghijklmnopqrstuvwxyz]%' THEN 1 ELSE 0 END) AS 'Lower'\n  FROM PostHistory\n  WHERE PostHistoryTypeId = 2","CreationDate":"2020-10-27 22:32:00","validated":true}
{"QuerySetId":1319897,"Title":"Closed questions that have answers for year 2020","Description":null,"QueryBody":"SELECT  AnswerCount, count(1)\nfrom\n(SELECT PostID \n from PostHistory\n where PostHistoryTypeID=10\n ) Hist\n inner join \n (SELECT ID, AnswerCount\n  from Posts\n  where PostTypeID=1\n  and year(CreationDate)=2020\n  ) Post\n on Hist.PostID=Post.ID\n group by  AnswerCount\n order by  AnswerCount","CreationDate":"2020-11-02 7:06:46","validated":true}
{"QuerySetId":1329907,"Title":"Q&As with the most comments","Description":null,"QueryBody":"SELECT  TOP 100 q.Id AS [Post Link],\n   q.CommentCount + COALESCE(SUM(a.CommentCount), 0)\n   FROM Posts AS q\n   LEFT OUTER JOIN Posts AS a\n     ON q.Id = a.ParentId\n   GROUP BY q.Id, q.CommentCount\n   ORDER BY q.CommentCount + COALESCE(SUM(a.CommentCount), 0) DESC","CreationDate":"2020-11-13 1:01:13","validated":true}
{"QuerySetId":1336717,"Title":"Best julia-lang questions in the past month","Description":null,"QueryBody":"SELECT \n         P.Id AS [Post Link], P.Tags, P.Score, P.AnswerCount, P.CreationDate\nFROM     Posts P, PostTags PT, Tags T\nWHERE    P.Id = PT.PostId\nAND      PT.TagId = T.Id\nAND      T.TagName = 'julia'\nAND      P.CreationDate > '2020-10-01'\nORDER BY P.Score DESC, P.CreationDate DESC","CreationDate":"2020-11-25 18:47:48","validated":true}
{"QuerySetId":1337082,"Title":"Users from Moldova and Romania","Description":null,"QueryBody":"SELECT  *\nfrom users\nwhere users.location like '%Moldova%' or users.location like '%Romania%'","CreationDate":"2020-11-26 6:19:52","validated":true}
{"QuerySetId":1337178,"Title":"Answers to the given question ordered by last activity","Description":null,"QueryBody":"SELECT \n  a.Id AS [Post Link],\n  a.LastActivityDate,\n  a.OwnerUserId AS [User Link],\n  a.OwnerDisplayName,\n  a.Score\nFROM Posts q INNER JOIN Posts a ON a.ParentId=q.Id\nWHERE (q.Id=##id?17209##)\nORDER BY a.LastActivityDate DESC","CreationDate":"2020-11-26 13:10:33","validated":true}
{"QuerySetId":1337687,"Title":"Most viewed questions by Python or Regex tags","Description":null,"QueryBody":"SELECT  Id as [Post Link], CreationDate, LastActivityDate, viewCount, Score\nfrom Posts\nwhere Tags like '%regex%' and Tags like '%python%'\norder by viewCount desc","CreationDate":"2020-12-09 20:41:37","validated":true}
{"QuerySetId":1339590,"Title":"Suggested edits with review time","Description":null,"QueryBody":"SELECT  TOP 1000 pt.Name, p.Id AS [Post Link],\n  'site:\/\/suggested-edits\/' + CAST(se.Id AS NVARCHAR) AS 'Suggested edit',\n  ROUND(DATEDIFF(SECOND, se.CreationDate, COALESCE(ApprovalDate, RejectionDate)) \/ 86400., 2)\n    AS 'Review time (days)'\n  FROM SuggestedEdits AS se\n  INNER JOIN Posts AS p\n    ON se.PostId = p.Id\n  INNER JOIN PostTypes AS pt\n    ON p.PostTypeId = pt.Id\n  WHERE COALESCE(ApprovalDate, RejectionDate) IS NOT NULL\n  ORDER BY COALESCE(ApprovalDate, RejectionDate) DESC","CreationDate":"2020-12-02 19:09:19","validated":true}
{"QuerySetId":1339618,"Title":"Questions closed as 'Needs details or clarity'","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link]\n  FROM Posts AS p\n  INNER JOIN PostHistory AS ph\n    ON p.Id = ph.PostId\n   AND ph.PostHistoryTypeId = 10 -- Post Closed\n   AND ph.Comment = '103' -- Needs details or clarity\n  WHERE p.ClosedDate IS NOT NULL\n  ORDER BY p.CreationDate DESC","CreationDate":"2020-12-02 21:15:23","validated":true}
{"QuerySetId":1340757,"Title":"Time to first answer by minutes (self-answers excluded)","Description":null,"QueryBody":"SELECT  DATEDIFF(MINUTE, q.CreationDate, a.CreationDate),\n  COUNT(*) AS 'Number of questions answered within x minutes'\n  FROM Posts AS q\n  CROSS APPLY (\n    SELECT TOP 1 OwnerUserId, CreationDate\n      FROM Posts\n      WHERE ParentId = q.Id\n        AND CreationDate >= q.CreationDate\n      ORDER BY CreationDate\n  ) a\n  WHERE q.OwnerUserId != a.OwnerUserId\n  GROUP BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)\n  ORDER BY DATEDIFF(MINUTE, q.CreationDate, a.CreationDate)","CreationDate":"2020-12-05 0:28:45","validated":true}
{"QuerySetId":1344248,"Title":"Number of Posts by Tag","Description":null,"QueryBody":"SELECT \n  TAG.id,\n  TAG.TagName,\n  count(*) AS numPosts\nFROM Posts\nINNER JOIN PostTags AS PT ON PT.PostId = Posts.Id\nINNER JOIN Tags AS TAG ON TAG.id = PT.TagId\nWHERE PostTypeId = 1\nGROUP BY TAG.id, TAG.TagName\nORDER BY numPosts DESC","CreationDate":"2020-12-09 19:43:28","validated":true}
{"QuerySetId":1344640,"Title":"Tags ordered by average question score (non CW)","Description":null,"QueryBody":"SELECT \n  RANK() OVER(ORDER BY AVG(CAST(q.SCORE AS decimal)) DESC) AS Rank,\n  t.Tagname,\n  AVG(CAST(q.Score AS decimal)) AS [Average Score],\n  COUNT(q.Id) AS Count,\n  SUM(q.Score) AS [Total Score]\nFROM Posts q INNER JOIN PostTags pt ON q.Id=pt.PostId\n  INNER JOIN Tags t ON t.id = pt.TagId\nWHERE (q.CommunityOwnedDate IS NULL)\nGROUP BY t.Tagname\nORDER BY AVG(CAST(q.SCORE AS decimal)) DESC","CreationDate":"2020-12-10 4:10:13","validated":true}
{"QuerySetId":1344742,"Title":"Recent 250 suggested edits on tag-infos","Description":null,"QueryBody":"SELECT  TOP(##num?250##)\n  s.Id AS [Suggested Edit Link],  \n  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|',\n          t.tagname,\n          ' ',\n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link],\n   s.OwnerUserId AS [User Link], s.CreationDate\nFROM SuggestedEdits s LEFT OUTER JOIN Posts p ON s.PostId=p.Id\n  left outer join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE p.PostTypeId IN (4,5)  \nORDER BY s.Id DESC","CreationDate":"2020-12-10 11:56:11","validated":true}
{"QuerySetId":1344748,"Title":"Recent 250 suggested edits on tag-infos (only pending)","Description":null,"QueryBody":"SELECT  TOP(##num?250##)\n  s.Id AS [Suggested Edit Link],  \n  concat(\n          'site:\/\/tags\/',\n          t.tagname,\n          '\/info|',\n          t.tagname,\n          ' ',\n          case when p.posttypeid = 4 then 'excerpt' else 'wiki' end\n          ) [Tag Link],\n   s.OwnerUserId AS [User Link], s.CreationDate\nFROM SuggestedEdits s LEFT OUTER JOIN Posts p ON s.PostId=p.Id\n  left outer join tags t on (t.wikipostid = p.id or t.excerptpostid = p.id)\nWHERE p.PostTypeId IN (4,5)  \n  AND ApprovalDate IS NULL\n  AND RejectionDate IS NULL\nORDER BY s.Id DESC","CreationDate":"2020-12-10 14:42:00","validated":true}
