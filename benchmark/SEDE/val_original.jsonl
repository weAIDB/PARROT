{"QuerySetId":1233,"Title":"Top 500 Askers on the site","Description":"A list of the top 500 askers of questions\nordered by average answer score excluding\ncommunity wiki \/ closed posts.\n","QueryBody":"SELECT  * FROM (\nSELECT \n    TOP 500\n    OwnerUserId as [User Link],\n    Count(Posts.Id) AS Questions,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Question Score]\nFROM\n    Posts\nWHERE \n    PostTypeId = 1 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    OwnerUserId\nORDER BY\n    Count(Posts.Id) DESC\n)ORDER BY\n    [Average Question Score] DESC","CreationDate":"2010-05-27 20:08:16","validated":true}
{"QuerySetId":1308,"Title":"Average rep gain per post per tag","Description":null,"QueryBody":"SELECT   t.tagName \n,       COUNT(*) as NrOfQuestions \n,       AVG(RepGain) as AvgRepGain\nFROM    tags t\nJOIN    posttags pt\nON      pt.tagid = t.id\nJOIN    (\n        SELECT  pp.id\n        ,       SUM(case when v.votetypeid = 2 then 10\n                         when v.votetypeid = 2 then -2\n                         else null \n                    end) As RepGain\n        FROM    posts pp\n        JOIN    posts pa\n        ON      pa.parentid = pp.id\n        JOIN    votes v\n        ON      v.postid = pa.id\n        GROUP BY\n                pp.id\n        ) as pv\nON      pv.id = pt.postid\nGROUP BY\n        t.tagName\nHAVING\n        COUNT(*) > 1000\nORDER BY\n        AVG(RepGain) DESC","CreationDate":"2010-05-27 23:04:48","validated":true}
{"QuerySetId":1704,"Title":"Up vs Down votes by hour of day","Description":"Doesn't currently work, but that's just because the data isn't currently there.","QueryBody":"SELECT \n    DATEPART(HOUR, p.CreationDate) AS Hour,\n    --Count(*) AS Amount,\n    --SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    --SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    (CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)) AS UpVoteDownVoteRatio\nFROM\n    Votes v\n    join Posts p on p.Id = PostId \nwhere p.Score >= 0\nGROUP BY\n    DATEPART(HOUR, p.CreationDate)\nORDER BY\n    DATEPART(HOUR, p.CreationDate)","CreationDate":"2020-06-16 4:01:50","validated":true}
{"QuerySetId":2304,"Title":"Posts containing tr.im shortened URLs","Description":"Posts containing tr.im shortened URLs, which will cease to work at the end of 2010;\nSee http:\/\/meta.stackoverflow.com\/questions\/29518\/can-and-should-stack-overflow-automatically-rewrite-bit-ly-links\nSee http:\/\/stackapps.com\/questions\/121\/what-ideas-do-you-have-for-the-api\/546#546\n","QueryBody":"SELECT  Id as [Post Link], Body\nfrom Posts \nwhere Body like '%http:\/\/tr.im%'","CreationDate":"2010-06-05 16:34:19","validated":true}
{"QuerySetId":3055,"Title":"Users with 10+ Accounts Including Reputation","Description":"A copy of http:\/\/odata.stackexchange.com\/stackoverflow\/s\/88\/users-with-more-than-10-duplicate-accounts with reputation included. I thought it would be interesting to see if the multiple accounts were being used to  boost one.\n","QueryBody":"WITH  10+ Accounts Including Reputation\n-- A copy of http:\/\/odata.stackexchange.com\/stackoverflow\/s\/88\/users-WITH-more-than-10-duplicate-accounts WITH reputation included. I thought it would be interesting to see if the multiple accounts were being used to  boost one.\n\n\n\nSELECT\n    sum(u1.Reputation) AS TotalRep,\n    max(u1.Reputation) AS RepMaxID,\n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n(SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + ' (' + Cast(u2.Reputation AS varchar) + ')), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash ORDER BY u2.Reputation DESC FOR XML PATH ('') ) AS IdsNameRep\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\nGROUP BY\n    u1.EmailHash\nHAVING\n    Count(u1.Id) > 10\nORDER BY\n    TotalRep DESC","CreationDate":"2010-06-13 21:30:53","validated":true}
{"QuerySetId":3525,"Title":"Top Answerers for a Given Tag","Description":"The Stats of a Tag only gives the Top-20 answerers. This query can list more of them and give other info as well.\n","QueryBody":"SELECT  TOP ##n##\n  Users.Id as [User Link],\n  COUNT(Answers.Id) as Answers\nFROM Tags    \n  JOIN PostTags ON PostTags.TagId = Tags.Id\n  JOIN Posts ON Posts.Id = PostTags.PostId \n  JOIN Posts as Answers ON Answers.ParentId = Posts.Id\n  JOIN Users ON Users.Id = Answers.OwnerUserId\nWHERE    \n  Tags.TagName = '##TagName##'\nGROUP BY \n  Users.Id\nORDER BY \n  Answers DESC","CreationDate":"2020-09-19 13:25:14","validated":true}
{"QuerySetId":3557,"Title":"Number of Qs, As in Database","Description":"How many questions and answers exist in the Database?\n","QueryBody":"SELECT  (SELECT count(*) from posts where PostTypeId=1) as questions, \n(SELECT count(*) from posts where PostTypeId=2) as answers","CreationDate":"2010-06-15 4:07:28","validated":true}
{"QuerySetId":3930,"Title":"How close is a site to awarding the Generalist Badge","Description":"There needs to be 200 questions on each of the top 40 tags for the badge to be awarded\n","QueryBody":"WITH  topTags As (\n  Select Top 40 t.tagId\n  From postTags t\n  Group By t.tagId\n  Order By Count(*) Desc\n)\n\nselect t.TagName, count(*) as Count from Posts q\njoin PostTags pt on q.id = pt.PostId\njoin Tags t on t.id = pt.TagId\n\nwhere pt.TagId in (select * from topTags)\nand q.CommunityOwnedDate is null\n\ngroup by t.TagName\norder by Count desc","CreationDate":"2010-06-16 18:27:37","validated":true}
{"QuerySetId":4617,"Title":"Question I answered with no accepted answer","Description":"Question I answered with no accepted answer\n","QueryBody":"WITH  no accepted answer\n-- Question I answered WITH no accepted answer\n\nSELECT p2.Id as QuestionId, P2.Title as QuestionTitle, Count(p3.Id) as NumberOfAnswer\nFROM Posts p1, Posts p2, Posts p3\nWHERE p1.PostTypeId=2 \n  AND p1.OwnerUserId=##UserId## \n  AND p1.ParentId=p2.Id \n  AND P2.AcceptedAnswerId is null\n  AND p3.ParentId=p2.id\nGROUP BY p2.Id, P2.Title\nORDER BY NumberOfAnswer DESC","CreationDate":"2010-06-20 17:31:29","validated":true}
{"QuerySetId":6029,"Title":"Displays number of questions with high answer count.","Description":"Anything with over 30 answers will not fit on a single page and could benefit from an \"in question search\" button\n","QueryBody":"WITH  high answer count.\n-- Anything WITH over 30 answers will not fit on a single page and could benefit from an \"in question search\" button\n\nselect AnswerCount, count(*) as Questions, sum(ViewCount) as [Aggregate Total Views], max(id) as [Post Link] from Posts where PostTypeId=1 and ClosedDate is null group by AnswerCount order by AnswerCount desc","CreationDate":"2010-07-03 2:42:09","validated":true}
{"QuerySetId":7753,"Title":"Does a user have any flagged posts?","Description":null,"QueryBody":"SELECT  id as id from Users\n\nSELECT\n p.Id as [Post Link],\n (\n  SELECT count(v.Id) from Votes v\n  where v.PostId = p.Id and (v.VoteTypeId = 4 or v.VoteTypeId = 12 or v.VoteTypeId = 13)\n ) as Flags\nfrom Posts p\nwhere p.OwnerUserId = id","CreationDate":"2015-07-26 6:34:43","validated":true}
{"QuerySetId":8383,"Title":"Answer and Question Up and Down Votes","Description":"Find the total number of question and answer up and down votes on SO.","QueryBody":"SELECT \n (case \n  when p.posttypeid = 1 then 'Question'\n  when p.posttypeid = 2 then 'Answer'\nend) as [Post Type],\n(case\n  when v.votetypeid = 2 then 'Up Vote'\n  when v.votetypeid = 3 then 'Down Vote'\nend) as [Vote Type], \ncount(*) As Votes\nfrom votes v join posts p on v.postid = p.id\nwhere v.votetypeid in (2,3)\ngroup by p.posttypeid, v.votetypeid","CreationDate":"2010-07-28 2:42:47","validated":true}
{"QuerySetId":11917,"Title":"Top users with recent questions","Description":"Shows the number of questions and most recent question for the top X users since a given date.","QueryBody":"WITH  TopUsers AS\n(\n  SELECT TOP 500 Id\n  FROM Users\n  ORDER BY Reputation DESC\n)\nSELECT\n  u.Id AS [User Link],\n  COUNT(*) AS QuestionCount,\n  MAX(CreationDate) AS LastQuestionDate\nFROM TopUsers u\nINNER JOIN Posts p\n    ON p.OwnerUserId = u.Id\nWHERE p.PostTypeId = 1\nAND p.CreationDate >= '##BeginDate##'\nGROUP BY u.Id","CreationDate":"2010-10-01 0:56:38","validated":true}
{"QuerySetId":12878,"Title":"Celebrities (top 500 users ordered by profile views to rep points)","Description":null,"QueryBody":"SELECT   TOP 500\n        ROW_NUMBER() OVER (ORDER BY [Views to Rep] DESC) AS [#], *\nFROM    (\n        SELECT  u.Id AS [User Link], u.Views, u.Reputation, 1. * u.Views \/ u.Reputation AS [Views to Rep]\n        FROM    Users u\n        WHERE   u.Reputation >= 2000 AND u.Location LIKE '%Ukraine%'\n        ) q\nORDER BY\n        [Views to Rep] DESC","CreationDate":"2017-08-27 20:05:18","validated":true}
{"QuerySetId":13033,"Title":"Posts with Score of More Than 500 and with Answers Accepted by Originators","Description":"Enter Query Description\n","QueryBody":"WITH  Score of More Than 500 and WITH Answers Accepted by Originators\n-- Enter Query Description\n\nselect p.Id as [Post Link] from Posts p, Votes v \nwhere v.PostId = p.Id \n  and v.VoteTypeId = 1\n  and p.Score > 500\norder by p.Score desc","CreationDate":"2010-10-20 8:00:07","validated":true}
{"QuerySetId":13710,"Title":"Compare Answers To Common Question Vs. Another User","Description":"And updated query to the query \"Jon Skeet comparison\" that allows for comparison against any user.","QueryBody":"DECLARE  @UserId int = ##UserId##;\nDECLARE @OpponentUserId int = ##OpponentUserId##;\n\nwith fights as (\n  select myAnswer.ParentId as Question,\n   myAnswer.Score as MyScore,\n   opponentAnswer.Score as OpponentScore\n  from Posts as myAnswer\n  inner join Posts as opponentAnswer\n   on opponentAnswer.OwnerUserId = @OpponentUserId and myAnswer.ParentId = opponentAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2\n)\n\nselect\n  case\n   when myScore > OpponentScore then 'You win'\n   when myScore < OpponentScore then 'You lose'\n   else 'Tie'\n  end as 'Winner',\n  Question as [Post Link],\n  myScore as 'My score',\n  OpponentScore as \"Opponent's score\"\nfrom fights;","CreationDate":"2010-11-04 20:25:36","validated":true}
{"QuerySetId":15605,"Title":"My Keystrokes per rep point","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSelect u.Id As [User Link], \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0))) As keystrokes, \n   u.Reputation, \n   (sum(coalesce(datalength(p.Body),0)) + sum(coalesce(datalength(p.Title),0)))\/u.Reputation As rate \nFrom users u inner join posts p  on p.OwnerUserId = u.Id\nWhere  u.id = @UserId \nGroup By u.Id, u.Reputation\nOrder By rate Asc","CreationDate":"2010-12-03 0:10:46","validated":true}
{"QuerySetId":15691,"Title":"Top scored answers for a given question","Description":"\n","QueryBody":"WITH  x as(\n\nSELECT Posts.ParentId,Posts.body, Posts.Score, ROW_NUMBER()\nOVER(PARTITION BY Posts.ParentId ORDER BY Posts.Score desc) num\nFROM Posts where posts.PostTypeId =2\n)\n\nSelect  x.num as [rank], x.Score,x.body from X \nwhere num <##NumberofAnswers:int##+1 and x.ParentId = ##QuestionID:int##","CreationDate":"2010-12-03 21:17:54","validated":true}
{"QuerySetId":15758,"Title":"Order users by accepted ratio","Description":"Show the users in a specified reputation range, with ratio of answers accepted.\n","QueryBody":"DECLARE  @RepMin int = ##RepMin##\nDECLARE @RepMax int = ##RepMax##\n\nSELECT\n    u.DisplayName, u.Reputation,\n    u.Id,\n    Count(a.ID) as AcceptCount,\n    (SELECT Count(*) FROM Posts WHERE OwnerUserId = u.Id AND PostTypeId = 2) as AnswerCount,\n    (CAST(Count(a.Id) AS float) \/ (SELECT Count(*) FROM Posts WHERE OwnerUserId = u.Id AND PostTypeId = 2) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\n  INNER JOIN\n    Users u on u.Id = a.OwnerUserId\nWHERE\n    (u.Reputation >= @RepMin and u.Reputation <= @RepMax)\n  AND\n    a.PostTypeId = 2\nGROUP BY u.Id, u.DisplayName, u.Reputation\nORDER BY AcceptedPercentage DESC","CreationDate":"2010-12-05 2:16:01","validated":true}
{"QuerySetId":15762,"Title":"Questions with more than two required tags (Meta sites only)","Description":"Finds all questions with more than two of: [support], [discussion], [feature-request], [bug].\n","QueryBody":"WITH  more than two required tags (Meta sites only)\n-- Finds all questions WITH more than two of: [support], [discussion], [feature-request], [bug].\n\nWITH RequiredTagIds AS\n(\n    SELECT Id\n        FROM Tags\n        WHERE TagName IN ('support', 'discussion', 'feature-request', 'bug')\n)\nSELECT\n    Id AS [Post Link],\n    RequiredTagCount\n    FROM\n    (\n        SELECT\n            p.Id,\n            (\n                SELECT COUNT(*) FROM PostTags pt\n                    WHERE\n                        (pt.PostId = p.Id) AND\n                        (pt.TagId IN (SELECT Id FROM RequiredTagIds))\n            ) AS RequiredTagCount\n            FROM Posts p\n            WHERE p.PostTypeId = 1\n    ) a\n    WHERE RequiredTagCount > 2","CreationDate":"2010-12-05 21:37:05","validated":true}
{"QuerySetId":16529,"Title":"Look for suspicious upvote patterns in a particular tag","Description":"Helps find people benefiting from sock puppet or \"Admirer\" upvotes.\nFor a particular tag get the Avg and StDev of score - suspicious scores\nare likely to have * BOTH HIGH AVERAGE AND LOW STD DEV * of\nscore (e.g. they routinely upvote each of their own posts x times).\nTo filter out noise look for > 10 posts and high average\nas persistent cheaters are likely to be... persistent!\n*** NOT AN ABSOLUTE TEST *** - human needs to read some posts and verify.\n","QueryBody":"SELECT \n  owneruserid,\n \n   COUNT(Posts.Id) As NumPosts,\n   SUM(Posts.Score) As SumScore,\n   AVG(CAST(Posts.Score as FLOAT)) As AvgScore,\n   STDEV(Posts.Score) As StdDevScore,\nAVG(CAST(Posts.Score as FLOAT)) - STDEV(Posts.Score) As [Avg-StDev]\nFROM Posts\nwhere posts.owneruserid in (3123370,3605516,3915549,4831567)\nand posttypeid=2\ngroup by owneruserid","CreationDate":"2015-09-12 16:41:53","validated":true}
{"QuerySetId":25089,"Title":"Ration of Question Score to Question Views","Description":"Ratio of votes to views and vote type information\nfor questions posted since Jan 1, 2011;\nsorted primarily by the votes to views ratio.\n(I'll try to edit it later to sum up the different vote types,\nso that there's only one entry per question.)\n","QueryBody":"SELECT \n  [Post Link] = p.Id, -- duh, make it magic!\n  SVRatio = round(cast(p.Score as float)\/cast(p.ViewCount as float),4),\n  p.Score,\n  Views = p.ViewCount,\n  \"V Type\" = vt.Name,\n  p.CreationDate \n\nFROM Posts p\nJOIN Votes v\nON p.Id = v.PostID\nJOIN VoteTypes vt\nON v.VoteTypeID = vt.Id\n\nWHERE \n  p.PostTypeId = 1\nAND\n  ViewCount > 0\nAND\n   p.CreationDate > '2011-01-01'\n\nORDER BY \nSVRatio DESC,\np.CreationDate,\nvt.Name","CreationDate":"2011-01-25 7:50:38","validated":true}
{"QuerySetId":25441,"Title":"Which of my posts have been downvoted?","Description":"Lets you see where you went wrong.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT p.Id as [Post Link],\n       (SELECT COUNT(1)\n        FROM Votes v\n        JOIN VoteTypes t ON v.VoteTypeId = t.Id\n        WHERE v.PostId = p.Id\n        AND t.Name = 'UpMod') as Upvotes,\n       (SELECT COUNT(1)\n        FROM Votes v\n        JOIN VoteTypes t ON v.VoteTypeId = t.Id\n        WHERE v.PostId = p.Id\n        AND t.Name = 'DownMod') as Downvotes\nFROM Posts p\nWHERE p.OwnerUserId = @UserId\nORDER BY Downvotes DESC, Upvotes DESC","CreationDate":"2011-01-26 22:27:27","validated":true}
{"QuerySetId":26209,"Title":"Answers awarded bounties by tag","Description":"Shows answers for a tag that have been awarded bounties, most recent answers first.\n","QueryBody":"SELECT  post.Id AS [Post Link], \n       vote.BountyAmount AS Bounty,\n       post.CreationDate AS Date,\n       parent.Tags\nFROM Posts post\n     JOIN Votes vote ON vote.PostId = post.Id\n     JOIN Posts parent ON post.ParentId = parent.Id\nWHERE     \n      vote.VoteTypeId = 9  AND\n      vote.BountyAmount <> 0 AND \n      parent.Tags LIKE '%<##Tag##>%'            \nORDER BY post.CreationDate DESC","CreationDate":"2011-02-05 20:26:35","validated":true}
{"QuerySetId":26416,"Title":"Old unloved questions eligible for auto-deletion","Description":"Questions asked over a year ago with score <= 0, no answers, low views proportional to age, one or less comments\n","QueryBody":"WITH  a last activity date over a year ago, score <= 0, low views, no comments, no answers\n\nSELECT TOP 20000\np.Score, p.Id AS [Post Link], p.ViewCount, p.Tags, DATEDIFF(day, p.CreationDate, GETUTCDATE()) as DaysOld\nFROM Posts p\nWHERE \np.PostTypeId = 1 AND \np.ViewCount < DATEDIFF(day, p.CreationDate, GETUTCDATE()) * 1.5 AND \np.Score < 1 AND \nISNULL(p.AnswerCount,0) = 0 AND\nISNULL(p.CommentCount,0) <= 1 AND \nDATEDIFF(day, p.CreationDate, GETUTCDATE()) > 365\nORDER BY p.Score, p.ViewCount","CreationDate":"2019-10-19 4:36:27","validated":true}
{"QuerySetId":26447,"Title":"Old unloved questions with comments that the OP did not see","Description":"Questions with a last activity date over a year ago, score <= 0, low views, no answers, and comments that were posted after the last activity date of the OP\n","QueryBody":"WITH  a last activity date over a year ago, score <= 0, low views, no comments, no answers\n\nSELECT TOP 20000\np.Score, p.Id AS [Post Link], p.ViewCount, p.CommentCount, c.CreationDate, u.LastAccessDate, c.Text, DATEDIFF(day, p.CreationDate, GETUTCDATE()) as DaysOld\nFROM Posts p\nJOIN Comments c ON c.PostId = p.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nWHERE \np.PostTypeId = 1 AND \np.ViewCount < DATEDIFF(day, p.CreationDate, GETUTCDATE()) * 1.5 AND \np.Score < 1 AND \nISNULL(p.AnswerCount,0) = 0 AND\nDATEDIFF(day, p.CreationDate, GETUTCDATE()) > 365\nAND c.CreationDate > u.LastAccessDate\nORDER BY p.Score, p.ViewCount","CreationDate":"2011-02-07 16:43:42","validated":true}
{"QuerySetId":27372,"Title":"Trying to find an answer about `hg pull --force`","Description":"I know I've read an answer about `hg pull --force`,\nlet me see if I can find it...\nFound it!\nThank you for having this Data Explorer site!\n","QueryBody":"SELECT  --TOP 20\n  q.Id,\n  q.score,\n  q.ViewCount,\n  q.AnswerCount,\n  q.Title,\n  q.Tags,\n  q.Body,\n  a.Id,\n  a.Score,\n  a.Body\nFROM\n  Posts as q\n  INNER JOIN Posts as a ON a.ParentId = q.Id\n  INNER JOIN PostTags ON PostTags.PostId = q.Id\n  INNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE\n  q.PostTypeId = 1\n  AND a.PostTypeId = 2\n  AND Tags.TagName = 'mercurial'\n  AND a.Body LIKE '%pull%'\n  AND a.Body LIKE '%force%'","CreationDate":"2011-02-13 21:34:38","validated":true}
{"QuerySetId":27379,"Title":"Most active users (total actions)","Description":"Users who spend A LOT of time posting, editing, commenting and voting.\n","QueryBody":"SELECT  TOP 20 UserId AS [User Link], SUM(c) as s\nFROM (\n    SELECT UserId, count(*) AS c\n    FROM PostHistory\n    WHERE UserId > 0\n    GROUP BY UserId\n    UNION ALL\n    SELECT UserId, count(*) AS c\n    FROM Comments\n    WHERE UserId > 0\n    GROUP BY UserId\n    UNION ALL\n    SELECT UserId, count(*) AS c\n    FROM Votes\n    WHERE UserId > 0\n    GROUP BY UserId\n) Actions\nGROUP BY UserId\nORDER BY s DESC","CreationDate":"2011-02-13 21:57:49","validated":true}
{"QuerySetId":27668,"Title":"Users with most nice\/good\/great answers","Description":"Users with counts of nice\/good\/great answer badges and sorted by total\n","QueryBody":"WITH  most nice\/good\/great answers\n-- Users WITH counts of nice\/good\/great answer badges and sorted by total\n\nWITH AnswerBadges AS (\n  SELECT\n    UserId,\n    SUM((CASE WHEN Name='Nice Answer' THEN 1 ELSE 0 END)) AS NiceAnswers,\n    SUM((CASE WHEN Name='Good Answer' THEN 1 ELSE 0 END)) AS GoodAnswers,\n    SUM((CASE WHEN Name='Great Answer' THEN 1 ELSE 0 END)) AS GreatAnswers,\n    SUM((CASE WHEN Name='Guru' THEN 1 ELSE 0 END)) AS Guru,\n    COUNT(*) AS Total\n  FROM\n    Badges\n  WHERE\n    Name LIKE '%Answer'\n  GROUP BY\n    UserId\n)\n\nSELECT TOP 50\n  UserId AS [User Link],\n  NiceAnswers,\n  GoodAnswers,\n  GreatAnswers,\n  Guru,\n  Total\nFROM AnswerBadges\nORDER BY Total DESC","CreationDate":"2016-01-02 14:14:50","validated":true}
{"QuerySetId":28012,"Title":"Number of questions that would be automatically protected","Description":"Enter Query Description\n","QueryBody":"SELECT  count(ID) from posts q\n\nwhere posttypeid=1 and datediff(m, q.creationdate, getdate()) >= 6 and answercount >= 1 and viewcount >= 1000","CreationDate":"2011-02-18 23:41:30","validated":true}
{"QuerySetId":29548,"Title":"List users and their details by tag and location","Description":null,"QueryBody":"SELECT  us.DisplayName, \nus.Id as [User Link],\n  us.Reputation,\n  us.WebsiteUrl,\n  us.Age,\n  us.LastAccessDate,\n  us.Location,\ntuser.Score\nFROM Users us\nJOIN\n(SELECT TOP 1000 Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags\n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id\n   WHERE Tags.TagName = '##TagName##'\n  GROUP BY Answers.OwnerUserId\nORDER BY SUM(Posts.Score) DESC\n) tuser ON tuser.UserId = us.Id\nWHERE Location LIKE '%##Location##%'\nORDER BY tuser.Score DESC","CreationDate":"2011-03-09 13:32:48","validated":true}
{"QuerySetId":29657,"Title":"Average score of questions by user (with min question filter)","Description":null,"QueryBody":"SELECT  OwnerUserId AS [User Link], COUNT(*) AS [Number of Questions], AVG(Score) AS [Average Score]\nFROM Posts\nWHERE Posts.PostTypeId = 1\nGROUP BY OwnerUserId\nHAVING COUNT(*) >= 10\nORDER BY [Average Score] DESC;","CreationDate":"2011-03-11 3:03:43","validated":true}
{"QuerySetId":31062,"Title":"Bounty award \/\/ disconnect from acceptance \/\/ rep handling","Description":null,"QueryBody":"SELECT \n  p.owneruserid,\n  v.*,\n  case votetypeid\n      when 1 then 15\n      end accepted,\n  case votetypeid\n      when 8 then -bountyamount\n      when 9 then bountyamount\n      end bounty,\n  case votetypeid\n      when 2 then 10\n      when 3 then -2\n      else 0\n      end rep\nfrom votes v\ninner join posts p on p.id = v.postid\ninner join users u on u.id = p.owneruserid\nwhere v.votetypeid in (1,2,3,8,9)\n  and p.communityowneddate is null\n  and\n  (\n    (u.id = 13249 and v.creationdate = '20101115')\n    or\n    (u.id = 315935 and v.creationdate = '20100505')\n  )\n\norder by p.owneruserid, v.id","CreationDate":"2011-03-29 14:05:49","validated":true}
{"QuerySetId":31346,"Title":"Top 500 users from the Netherlands","Description":"Lists the top 500 users (ranked by reputation) that are located in the Netherlands based on their profile info\n","QueryBody":"SELECT  TOP 500\n   RANK() OVER \n   (ORDER BY Reputation DESC) AS 'Rank',\n   Id as [User Link],\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Netherlands%' OR\n   Location like N'%Holland%' OR\n   Location like N'%Amsterdam%' OR\n   (Location like N'%NL%' AND Location not like N'%finland%')\nORDER BY\n   reputation DESC","CreationDate":"2011-04-01 13:32:44","validated":true}
{"QuerySetId":31506,"Title":"Active Users with Low Participation in Voting","Description":"Users active in the last two months with reputation over 500 and less than one vote per day since joining the site.\n","QueryBody":"WITH  Low Participation in Voting\n-- Users active in the last two months WITH reputation over 500 and less than one vote per day since joining the site.\n\nselect\n  id as [User Link],\n  Reputation as Rep,\n  UpVotes + DownVotes as \"Votes\",\n  UpVotes as \"Up\",\n  DownVotes as \"Down\",\n  round((UpVotes + DownVotes + 0.0) \/ datediff(day,CreationDate,(SELECT MAX(LastActivityDate) FROM Posts)),3) as \"Per Day\"\nfrom Users\nwhere Reputation > 500\n  and datediff(month,LastAccessDate,(SELECT MAX(LastActivityDate) FROM Posts)) < 2\n  and (UpVotes + DownVotes) \/ datediff(day,CreationDate,(SELECT MAX(LastActivityDate) FROM Posts)) < 1\norder by \"Per Day\" asc","CreationDate":"2012-03-29 0:46:19","validated":true}
{"QuerySetId":31930,"Title":"The average score across all questions","Description":null,"QueryBody":"SELECT \n    AVG( CAST( p.Score AS FLOAT ) )\nfrom\n    Posts p\nwhere\n    p.PostTypeId = 1","CreationDate":"2011-04-07 3:29:10","validated":true}
{"QuerySetId":32821,"Title":"Search user by email hash","Description":null,"QueryBody":"SELECT  \n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n    (SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + '), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash FOR XML PATH ('')) AS IdsAndNames,\n    u1.Id as [User Link]\nFROM\n    Users u1\nWHERE\n    u1.EmailHash = '##EmailHash##'\nGROUP BY\n    u1.EmailHash,u1.Id\nHAVING\n    Count(u1.Id) >= 1\nORDER BY \n    Accounts DESC","CreationDate":"2011-04-18 9:03:09","validated":true}
{"QuerySetId":34064,"Title":"Find YouTube Videos in answers","Description":"Lists all answers which are containing a link against YouTube-Videos.","QueryBody":"SELECT \n  Score AS \"Score\",\n  Id AS [Post Link]\nFROM\n  Posts\nWHERE\n  PostTypeId = 2 AND\n  (Body LIKE '%http:\/\/www.youtube.com\/watch%' OR\n  Body Like '%http:\/\/www.youtube.com\/v\/%')\nORDER BY\n  Score DESC","CreationDate":"2011-05-03 14:53:23","validated":true}
{"QuerySetId":34723,"Title":"Question score against number of answers","Description":"The distribution of scores on questions, by answer count\n","QueryBody":"SELECT  \n    AnswerCount As [Answers],\n    Count(*) AS [#Questions],\n    Round(100.0 * Count(CASE WHEN Score < 0 THEN 1 END) \/ Count(*), 2) AS [% score<0],\n    Round(100.0 * Count(CASE WHEN Score = 0 THEN 1 END) \/ Count(*), 1) AS [% score=0],\n    Round(100.0 * Count(CASE WHEN Score = 1 THEN 1 END) \/ Count(*), 1) AS [% score=1],\n    Round(100.0 * Count(CASE WHEN Score = 2 THEN 1 END) \/ Count(*), 1) AS [% score=2],\n    Round(100.0 * Count(CASE WHEN Score = 3 THEN 1 END) \/ Count(*), 1) AS [% score=3],\n    Round(100.0 * Count(CASE WHEN Score > 3 THEN 1 END) \/ Count(*), 1) AS [% score>3]\nFROM Posts\nWHERE PostTypeId = 1 AND AnswerCount >= 0\nGROUP BY AnswerCount\nORDER BY AnswerCount","CreationDate":"2011-05-09 3:29:38","validated":true}
{"QuerySetId":35545,"Title":"Top Users by Reputation Per Day","Description":"The top 100 users based on the amount of reputation they have earnt per day\n","QueryBody":"SELECT  TOP 50000\n       Id as [User Link],\n       DisplayName, \n       Reputation, \n       DATEDIFF(dd, CreationDate, getdate()) as DaysActive, \n       (Reputation \/ DATEDIFF(dd, CreationDate, getdate())) as RepPerDay \nFROM Users\nWHERE DATEDIFF(dd, CreationDate, getdate()) > 0\nORDER BY RepPerDay DESC","CreationDate":"2020-06-12 15:01:52","validated":true}
{"QuerySetId":36166,"Title":"Who has the most Community Wiki posts?","Description":"Dirty query to find out who's the most community minded :)","QueryBody":"SELECT  \n    Users.Id as [User Link],\n    COUNT(OwnerUserId) as num\nFROM Posts\n\nINNER JOIN\n    Users ON Users.Id = OwnerUserId\n\nWHERE\n    CommunityOwnedDate is not null and\n    ClosedDate is null and\n    OwnerUserId is not null\n\nGROUP BY Users.Id\n\nORDER BY\n    num desc","CreationDate":"2011-05-27 17:27:23","validated":true}
{"QuerySetId":36495,"Title":"Migrated and Closed - Turnaround Time\/counts","Description":"Turnaround time & number of questions in group for Questions that are migrated between different sites and subsequently closed at their destination\n","QueryBody":"SELECT  turnaround AS turnaround_hours, count(turnaround) as qty FROM (\n   SELECT datediff(hh, ph.CreationDate, p.closeddate) as Turnaround\n      FROM Posts p\n      INNER JOIN PostHistory ph ON ph.PostId = p.Id\n                 WHERE ph.PostHistoryTypeId = 17 AND ClosedDate IS NOT NULL\n) T GROUP BY turnaround","CreationDate":"2011-06-02 0:23:08","validated":true}
{"QuerySetId":36539,"Title":"What users have visited asking or answering only once posting links?","Description":"Helps identify H&R's, possibly spammers?\n","QueryBody":"SELECT  TOP 2500\n    OwnerUserId AS [User Link],\n    Score,\n    Id AS [Post Link]\nFROM\n    Posts\nWHERE\n    OwnerUserId IN (SELECT OwnerUserId\n                    FROM Posts\n                    GROUP BY OwnerUserId\n                    HAVING COUNT(*) = 1)\nAND\n    PostTypeId = 2\nAND\n    Score <= 0\nAND\n    Body LIKE '%http%'\nORDER BY\n    Score ASC","CreationDate":"2011-06-02 6:44:41","validated":true}
{"QuerySetId":36939,"Title":"Orphan questions that were migrated from another site and may be self-answered","Description":"Questions that were migrated and have no owner,\nand that have an answer from a registered user with the same name.\n","QueryBody":"WITH  the same name.\n\nSELECT TOP 1000\n  q.Id As [Post Link],\n  q.CreationDate As [Date],\n--  ph.UserId As [User Link], -- always Community\n--  ph.UserDisplayName As [History user name], -- always null\n  q.OwnerDisplayName As [User name],\n  a.OwnerUserId As [User Link],\n  ph.Comment As [Comment]\nFROM Posts q\nINNER JOIN PostHistory ph ON ph.PostId = q.Id\nINNER JOIN Posts a ON a.ParentId = q.Id AND a.OwnerDisplayName = q.OwnerDisplayName\nWHERE ph.PostHistoryTypeId = 17\n  AND q.PostTypeId = 1\n  AND q.OwnerUserId IS NULL\n  AND a.OwnerUserId IS NOT NULL\nORDER BY q.Id DESC","CreationDate":"2011-06-06 2:39:49","validated":true}
{"QuerySetId":38284,"Title":"The longest answers by an user.","Description":"To find those that required a lot of work. :-)\nOr a copy\/paste. :-(\n","QueryBody":"SELECT  TOP 1000 Id AS [Post Link], LEN(Body) AS Length, LastActivityDate AS [Last Activity Date]  FROM Posts WHERE PostTypeId = 2 AND OwnerUserId = ##UserId## ORDER BY Length DESC","CreationDate":"2011-06-20 5:14:09","validated":true}
{"QuerySetId":41506,"Title":"Number of authors per answer (non-CW)","Description":"Distribution of the number of co-authors per answer\n(excluding community wiki)\n","QueryBody":"WITH  TotalAnswers AS (\n    SELECT Cast(Count(*) AS FLOAT) AS Count\n    FROM Posts\n    WHERE PostTypeId = 2\n      AND CommunityOwnedDate IS NULL\n)\nSELECT\n  a.Authors AS [Authors],\n  Count(*) AS [Answers],\n  Round(Count(*) \/ (SELECT Count FROM TotalAnswers) * 100, 1) As [Percent]\nFROM (\n    SELECT\n      PostId, Count(DISTINCT UserId) As [Authors]\n    FROM PostHistory\n    WHERE PostHistoryTypeId = 5\n       OR PostHistoryTypeId = 2\n    GROUP BY PostId\n  ) AS a\nINNER JOIN Posts p ON p.Id = a.PostId\nWHERE p.PostTypeId = 2\n  AND p.CommunityOwnedDate IS NULL\nGROUP BY a.Authors\nORDER BY Authors","CreationDate":"2011-07-24 4:27:42","validated":true}
{"QuerySetId":42260,"Title":"Questions with a very short body.","Description":"This retrieves all questions (and questions only) with a\nvery short amount of characters (less then 30 in total).\n","QueryBody":"WITH  a very short body.\n-- This retrieves all questions (and questions only) WITH a\n-- very short amount of characters (less then 30 in total).\n\nSELECT Id                                             AS [Post Link],\n       Replace(Replace(Body, '<p>', ' '), '<\/p>', '') AS [Question Body],\n       Score                                          As [Total Score]\nFROM   Posts    \nWHERE  ( (PostTypeID = 1) And (Len(Body) < 30) )","CreationDate":"2011-07-27 21:08:34","validated":true}
{"QuerySetId":42433,"Title":"Answers by Time of Day","Description":"Designed to consider whether \"night\" questions have more visibility than \"day\" questions\n","QueryBody":"SELECT  datepart(hour, Posts.CreationDate) Hour, count(Posts.Id) Questions\n  from Posts\n  where PostTypeid = 2 -- 2 = answer\n  group by datepart(hour, Posts.CreationDate)\n  order by datepart(hour, Posts.CreationDate)\n--order by count(posts.id) desc","CreationDate":"2015-02-08 22:34:47","validated":true}
{"QuerySetId":44233,"Title":"Top100 Ranked Users by Location","Description":"Top 100 users by reputation from a location\n","QueryBody":"SELECT  top 100 \n   id as [User Link],\n   reputation,\n   row_number() over(order by reputation desc) as 'Rank'\nfrom Users with (nolock)\nwhere lower(location) like '%' + lower(##Location:string##) + '%'\norder by reputation desc","CreationDate":"2011-08-14 7:43:53","validated":true}
{"QuerySetId":44811,"Title":"Which of my edits to other people's posts where edited later by someone else?","Description":"These are edits which seem to have been not quite as good as possible.\n(This query takes quite some time - 53 seconds for me on sunday morning)\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT Distinct\n    my.PostId AS [Post Link], my.Id, type.Name, other.UserId\n    FROM Posts p\n    JOIN PostHistory my ON p.Id = my.PostId\n    JOIN PostHistory other ON p.Id = other.PostId \n    JOIN PostHistoryTypes type ON my.PostHistoryTypeId = type.Id\n    ORDER BY my.Id DESC","CreationDate":"2013-03-01 22:55:24","validated":true}
{"QuerySetId":44963,"Title":"Find questions that have a tag in front of the title","Description":"Finds questions that have one of their tags in front of the title, seperated by hyphen or colon.  This query is case sensitive.\n","QueryBody":"SELECT  p.id as [Post Link], p.tags as Tags, p.CreationDate as CDate\nFrom Posts p\nWhere p.Title Like '##Tag##[, ][:,-]%' \n  And p.Tags Like '%<' + LOWER('##Tag##') + '>%'\nOrder By p.CreationDate DESC;","CreationDate":"2014-06-21 0:30:55","validated":true}
{"QuerySetId":45319,"Title":"Average Answer Score by Content Length","Description":"Investigating the effects of tl;dr","QueryBody":"SELECT \n  (len(body)\/##ChunkSize:int##) * ##ChunkSize## AS size,\n  avg(CAST(score AS float)) AS \"average answer score\",\n  (SELECT MAX(score) \n     FROM (SELECT TOP 50 percent score\n           FROM Posts as PU\n           WHERE PostTypeId=2\n           ORDER BY Score\n           ) as t\n     ) AS \"median answer score\",\n  count(*) AS answers\nFROM posts\nWHERE posttypeid=2\nGROUP BY len(body)\/##ChunkSize##\nORDER BY size;","CreationDate":"2019-09-04 6:43:24","validated":true}
{"QuerySetId":45578,"Title":"Top 100 Users In A Given Tag","Description":"\nWhat better way to learn interesting things about tags you are interested in than to check out the top 100 users in that tag?\n\nInspired by this query:\n\nhttp:\/\/data.stackexchange.com\/stackoverflow\/s\/1688\/c-top100-users\n","QueryBody":"DECLARE  @TagName nvarchar(25) = ##Tag:string##\n\nSELECT TOP 100\n    u.Id as [User Link],\n    COUNT(*) AS UpVotes \nFROM Tags t with (nolock)\n    INNER JOIN PostTags pt with (nolock)ON pt.TagId = t.id\n    INNER JOIN Posts p with (nolock) ON p.ParentId = pt.PostId\n    INNER JOIN Votes v with (nolock) ON v.PostId = p.Id and v.VoteTypeId = 2\n    inner join Users u with (nolock) on u.Id = p.OwnerUserId\nWHERE \n    p.CommunityOwnedDate IS NULL\n    and t.TagName = @TagName\nGROUP BY u.Id\nORDER BY UpVotes DESC","CreationDate":"2019-08-07 10:58:47","validated":true}
{"QuerySetId":45713,"Title":"Average accept rate percentage, less 0%","Description":"Calculate the average percent of each user's questions that have been accepted, excluding those with 0% accept rate.\n","QueryBody":"WITH  0% accept rate.\n\nSELECT \n    AVG(Round(t.Accepted * 100.0 \/ t.Total, 1)) AS [Percent],\n    STDEVP(Round(t.Accepted * 100.0 \/ t.Total, 1)) AS [std dev]\n  FROM\n    (SELECT\n         Count(a.Id) AS [Total],\n         Sum(CASE q.AcceptedAnswerId WHEN a.Id THEN 1 ELSE 0 END) AS [Accepted]\n       FROM Posts AS a\n         JOIN Posts AS q\n           ON a.ParentId = q.Id\n       WHERE q.postTypeId = 1 AND a.postTypeId = 2 AND a.OwnerUserId <> q.OwnerUserId\n       GROUP BY a.OwnerUserId\n   ) AS t \n  WHERE t.[Accepted] > 0","CreationDate":"2011-08-31 15:20:05","validated":true}
{"QuerySetId":46342,"Title":"Find out if two users have ever answered the same question.","Description":"Find out if two users have ever answered the same question.\n","QueryBody":"DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\nDECLARE @OtherUserId int = ##OtherUserId##; -- 179573;\n\n  select myAnswer.ParentId as QuestionId,\n   question.Title as QuestionTitle,\n   myAnswer.Score as MyScore,\n   otherAnswer.Score as otherScore\n  from Posts as myAnswer\n  inner join Posts as otherAnswer\n   on otherAnswer.OwnerUserId = @OtherUserId \n  inner join Posts as question\n   on question.id = myAnswer.ParentId\n  and myAnswer.ParentId = otherAnswer.ParentId\n  where myAnswer.ownerUserId = @MyUserId \n  and myAnswer.postTypeId = 2","CreationDate":"2011-09-04 19:07:45","validated":true}
{"QuerySetId":46351,"Title":"Who are answering the same questions as me?","Description":"List those users that have answered at least two questions which I have also answered\n","QueryBody":"DECLARE  @MyUserId int = ##MyUserId##; -- 176569;\n\nselect count(distinct myAnswer.ParentId) as QuestionCount,\n otherAnswer.OwnerUserId as [User Link]\nfrom Posts as myAnswer, Posts as otherAnswer\nwhere otherAnswer.OwnerUserId != @MyUserId \n and myAnswer.ownerUserId = @MyUserId   \n and myAnswer.ParentId = otherAnswer.ParentId\n and otherAnswer.postTypeId = 2\n and myAnswer.postTypeId = 2\ngroup by otherAnswer.OwnerUserId\nhaving count(distinct myAnswer.ParentId) > 1\norder by QuestionCount desc ","CreationDate":"2011-09-04 19:28:10","validated":true}
{"QuerySetId":47154,"Title":"People that use their name in their post.","Description":null,"QueryBody":"SELECT  TOP 1000 p.Id AS [Post Link] FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.Body LIKE '%' + u.DisplayName + '%' ORDER BY p.ViewCount DESC","CreationDate":"2012-03-10 22:32:02","validated":true}
{"QuerySetId":49042,"Title":"People with <text> in their About Me","Description":"Quickly search and see who's got what in their About Me section. Use % for wildcard.\n","QueryBody":"select  Id as [User Link], location, reputation \nfrom users\nwhere aboutme like '%##SearchText##%'\norder by reputation desc","CreationDate":"2011-10-05 3:14:04","validated":true}
{"QuerySetId":50151,"Title":"A user's questions not voted by a Voter","Description":"Select all posts (questions and answers) from 'Owner' that have not\nbeen voted by 'Voter'\n","QueryBody":"SELECT  Type, Title FROM (\n(SELECT Id, 'Question' Type, Title FROM Posts\nWHERE PostTypeID=1)\nUNION ALL\n(SELECT A.Id, 'Answer' Type, Q.Title FROM Posts A\nINNER JOIN Posts Q ON Q.Id=A.ParentID)\n)O\nLEFT JOIN (SELECT PostId FROM Votes WHERE UserId=##Voter##)V\n ON V.PostId=O.Id\nWHERE V.PostId IS NULL","CreationDate":"2015-05-01 15:38:25","validated":true}
{"QuerySetId":50166,"Title":"Where have we met before?","Description":"Look for all questions where two users have contributed with any of question, answer or comment\n","QueryBody":"SELECT  coalesce(parentid,id)  \nfrom posts \nwhere owneruserid=##UserA## --1396\n intersect\nSELECT coalesce(parentid,id) \nfrom posts \nwhere owneruserid=##UserB## --807\n order by coalesce(parentid,id) desc","CreationDate":"2013-10-27 16:35:07","validated":true}
{"QuerySetId":50381,"Title":"How Rich Are The 1%?","Description":"Occupy Stack overflow!\n","QueryBody":"WITH  percentile AS (\nSELECT NTILE(100) OVER (ORDER BY Reputation DESC) as p, Reputation, DisplayName\nFROM Users\n)\nSELECT 'The ' + CASE p WHEN 1 THEN '1' ELSE '99' END + '%' AS Who, SUM(Reputation) AS Rep \nFROM percentile\nGROUP BY CASE p WHEN 1 THEN '1' ELSE '99' END","CreationDate":"2011-10-23 21:10:41","validated":true}
{"QuerySetId":50588,"Title":"Minimum, Maximum, and Average Number of Answers Per Post","Description":"The minimum, maximum, and average number of answers per post on Stack Overflow.\n","QueryBody":"SELECT  \n  min(Posts.AnswerCount) as [Minimum # of Answers],\n  avg(cast(Posts.AnswerCount as decimal)) as [Average # of Answers],\n  max(Posts.AnswerCount) as [Maximum # of Answers]\nfrom Posts\nwhere Posts.PostTypeId=1","CreationDate":"2020-04-23 12:16:57","validated":true}
{"QuerySetId":51239,"Title":"Find the magical ping markup","Description":"This query will find instances of the @user auto-link functionality that once existed.\n","QueryBody":"SELECT \n  Id as [Post Link],\n  LastEditDate,\n  CreationDate\nFROM Posts\nWHERE\n  PostTypeId = 2\n  AND Body LIKE '<p>@<a href=\"#%'\nORDER BY\n  LastEditDate DESC,\n  CreationDate DESC","CreationDate":"2011-11-03 19:09:39","validated":true}
{"QuerySetId":51680,"Title":"Questions that have an answer of jQuery ready","Description":"All of the questions that have the same answer of using jQuery ready to solve the issue\n","QueryBody":"SELECT  a.Id AS [Post Link], count(a.Id) as 'Number Answers'\nFROM Posts a, Posts b\nWHERE  a.posttypeid = 1 AND b.posttypeid = 2 \n AND  (b.Body LIKE '%$(document).ready()%' OR b.Body LIKE '%dom ready%')\n AND  a.Tags LIKE '%<jquery>%'\n AND  a.id = b.parentid\nGROUP BY a.id -- Group by question (only one row per question)","CreationDate":"2011-11-08 21:14:03","validated":true}
{"QuerySetId":54259,"Title":"Amount of Posts per Post Length","Description":null,"QueryBody":"SELECT \n  FLOOR(LEN(Body)\/500) * 500 AS [Post Length],\n  COUNT(Id) AS [Amount of Posts]\nFROM\n  Posts\nWHERE\n  PostTypeId = 2\nGROUP BY\n  FLOOR(LEN(Body)\/500) * 500\nORDER BY [Amount of Posts] DESC","CreationDate":"2011-11-30 0:49:19","validated":true}
{"QuerySetId":54489,"Title":"Accuracy : people who you should take seriously","Description":"This query shows the ratio between the number of posts and the number of accepted posts AKA accuracy\n","QueryBody":"SELECT  TOP 100 posts.NumberOfPost, answers.NumberOfAccepted, answers.NumberOfAccepted \/ (CAST (posts.NumberOfPost AS FLOAT) \/100) AS accuracy, u.id as [User Link]\nFROM Users u CROSS APPLY \n(\n SELECT count(p.OwnerUserId) AS NumberOfPost\n FROM Posts p\n WHERE u.id = p.OwnerUserId \n--AND NumberOfPost > 100\n GROUP BY p.OwnerUserId ) AS posts CROSS APPLY\n(\n SELECT count(answers.OwnerUserId) AS NumberOfAccepted\n FROM Posts posts, Posts answers\n WHERE u.id = answers.OwnerUserId AND\n posts.id = answers.ParentId AND\n posts.AcceptedAnswerId = answers.id \n GROUP BY answers.OwnerUserId ) AS answers\n\nWHERE NumberOfAccepted > 1 AND NumberOfPost > 50\nORDER BY accuracy DESC","CreationDate":"2011-12-01 19:55:01","validated":true}
{"QuerySetId":54574,"Title":"List of random's edit summaries","Description":"not sure what to make of all this\n","QueryBody":"SELECT \ncomment as 'Edit summary',\nmax(creationdate) as 'Date',\navg(postid) as [Post Link]\nfrom posthistory as ph, posthistorytypes as pht\nwhere userid = 9314\nand posthistorytypeid = pht.id\nand pht.id <> 2\nand pht.id <> 6\nand comment is not null\ngroup by comment\norder by max(creationdate)","CreationDate":"2011-12-02 0:50:11","validated":true}
{"QuerySetId":54951,"Title":"Closed Questions with -2 score or less.","Description":null,"QueryBody":"SELECT   \n  q.Score AS Score,\n  q.Id AS [Post Link],\n  CASE h.Comment\n    WHEN '1' THEN 'Exact Duplicate'\n    WHEN '2' THEN 'Off-topic'\n    WHEN '3' THEN 'Subjective and argumentative'\n    WHEN '4' THEN 'Not a real question'\n    WHEN '7' THEN 'Too localized'\n    WHEN '10' THEN 'General reference'\n    WHEN '20' THEN 'Noise or pointless (Meta sites only)'\n    WHEN '101' THEN 'Duplicate'\n    WHEN '102' THEN 'Off-topic'\n    WHEN '103' THEN 'Unclear what you''re asking'\n    WHEN '104' THEN 'Too broad'\n    WHEN '105' THEN 'Primarily opinion-based'\n  END AS [Close Reason],\n  q.ClosedDate\nFROM Posts q\nINNER JOIN PostHistory h ON q.Id = h.PostId\nWHERE q.Score < -2\n  AND q.ClosedDate IS NOT NULL\nORDER BY q.Score DESC","CreationDate":"2014-02-01 2:46:48","validated":true}
{"QuerySetId":55367,"Title":"Tags that aren't synonyms and have at most N occurrences","Description":null,"QueryBody":"SELECT  Tags.TagName\nFROM Tags\nWHERE Tags.Count <= ##MaxOccurences##\nAND NOT EXISTS(SELECT Id FROM TagSynonyms WHERE SourceTagName = Tags.TagName);","CreationDate":"2011-12-06 20:28:43","validated":true}
{"QuerySetId":55509,"Title":"Questions per day for a specific tag","Description":"all time count of questions of a specific tag per day, with rollup\n","QueryBody":"DECLARE  @tagName varchar(255) = ##TagName:string##\n\nselect \n  year(p.CreationDate) as [Year],\n  month(p.CreationDate) as [Month],\n  day(p.CreationDate) as [Day],\n  count(*) as [QuestionsAskedToday]\nfrom Posts p \n  inner join PostTags pt on p.id = pt.postid\n  inner join Tags t on t.id = pt.tagid\nwhere \n  t.tagname = @tagName \n  --and p.CreationDate > '2011-01-01 00:00:00'\ngroup by year(p.CreationDate), month(p.CreationDate),day(p.CreationDate)\nwith rollup\norder by year(p.CreationDate) desc, month(p.CreationDate) desc,day(p.CreationDate) desc","CreationDate":"2011-12-07 22:55:29","validated":true}
{"QuerySetId":56156,"Title":"Search UserId's Favorites for Tags with <TagName> (Wildcard)","Description":"Search UserId's Favorites for a Tag string.  Tag searches use a % wildcard by default.\n","QueryBody":"WITH  <TagName> (Wildcard)\n-- Search UserId's Favorites for a Tag string.  Tag searches use a % wildcard by default.\n\nSELECT Posts.id as [Post Link], Posts.Score as [Score], Posts.Tags as [Tagged WITH]\n\nFROM Votes, Posts\n\nWHERE\n     (Votes.PostId=Posts.Id) AND\n     (Votes.VoteTypeId = 5) AND\n     (Posts.Tags LIKE '%dynamic%crm%')\n\nORDER BY Posts.Score DESC","CreationDate":"2018-04-05 17:11:03","validated":true}
{"QuerySetId":56243,"Title":"Search Python Guru's Questions & Answers for a Text string","Description":"Search Raymond Hettinger \/ Alex Martelli's Questions & Answers for a Text string.  Text searches use a % wildcard by default; searches are case-insensitive\n","QueryBody":"SELECT  Posts.id as [Post Link], Posts.OwnerUserId as [Author], Posts.PostTypeId as [Post Type], Posts.Score as [Score], Posts.Tags as [Tagged With]\n\nFROM Posts\n\nWHERE\n     ((Posts.OwnerUserId=1001643) OR (Posts.OwnerUserId=95810)) AND\n     ((lower(Posts.Tags) LIKE lower('%<##Text##>%')) OR\n     (lower(Posts.Title) LIKE lower('%##Text##%')) OR\n     (lower(Posts.Body) LIKE lower('%##Text##%')))\n\nGROUP BY Posts.id,  Posts.OwnerUserId, Posts.PostTypeId, Posts.Score, Posts.Tags\n\nORDER BY Posts.PostTypeId ASC, Posts.Score DESC","CreationDate":"2011-12-13 19:41:58","validated":true}
{"QuerySetId":56683,"Title":"Recent Tags in Android posts by Popularity","Description":"All tags in posts tagged with android (or android-*), ordered by number of posts, by posts within last 7 days.\n","QueryBody":"WITH  android (or android-*), ordered by number of posts, by posts WITHin last 7 days.\n\nselect t2.TagName, count(p.Id)\nfrom Tags t\n--Get all rows of PostTags relation table related to an Android tag\nINNER JOIN PostTags pt on pt.TagId = t.Id and t.TagName like '%android%'\n\n--Get all posts in last 5 days WITH an id in PostTag\nINNER JOIN Posts p on pt.PostId = p.Id and DATEDIFF(d, GETDATE(), p.CreationDate) >= -45\n\n--Get all PostTag rows WITH a postID from the list of posts\nINNER JOIN PostTags pt2 on p.Id = pt2.PostID\n\n--get all tags in those postIDs\ninner join Tags t2 on pt2.TagId = t2.Id\ngroup by t2.TagName\norder by count(t2.TagName) DESC","CreationDate":"2012-01-27 1:13:36","validated":true}
{"QuerySetId":57999,"Title":"Proportion of posts with imgur images","Description":"Count posts that have imgur images (probably false positives)\n","QueryBody":"WITH  imgur images\n-- Count posts that have imgur images (probably false positives)\n\nSELECT COUNT(*)\nFROM Posts\nWHERE Body LIKE '%imgur%';","CreationDate":"2012-01-05 13:40:26","validated":true}
{"QuerySetId":59300,"Title":"Finding answers with lmgtfy in them","Description":"A lexical search method\n","QueryBody":"SELECT  TOP 1000 P.Score, p.Id AS [Post Link], YEAR(p.CreationDate) AS Year, Month(p.CreationDate) AS Month, p.Body AS Body, U.DisplayName AS UserName\nFROM Posts P, Users U\nWhere (\n  P.PostTypeID = 2 AND \n  P.Score = 0 AND \n  P.Body LIKE '%lmgtfy%' AND\n  P.OwnerUserID = U.ID AND\n  U.Reputation < 100 AND\n  P.ClosedDate IS NULL)\nOrder By Year, Month","CreationDate":"2019-07-07 10:14:42","validated":true}
{"QuerySetId":59366,"Title":"My most viewed answers (based on question view count)","Description":"Your answers which were viewed the most times.","QueryBody":"SELECT  Answers.Id as [Post Link], Question.ViewCount \nFROM Posts as Answers, Posts as Question \nWHERE Answers.PostTypeId = 2 \nAND Answers.OwnerUserId = 3111870\nAND Question.Id = Answers.ParentId\nAND Answers.Score > 0\nORDER BY Question.ViewCount DESC;","CreationDate":"2020-08-10 17:33:13","validated":true}
{"QuerySetId":59521,"Title":"Which votes did I gave?","Description":"Give me a list of votes I casted.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    Votes.PostID,\n    Posts.Title\nFROM \n    Votes\n    INNER JOIN Posts ON Posts.ID = Votes.postID\nWHERE \n    Votes.UserId = @UserId","CreationDate":"2013-02-20 22:13:53","validated":true}
{"QuerySetId":59548,"Title":"Late votes by time period","Description":null,"QueryBody":"SELECT \n  Convert(datetime, v.CreationDate, 112) AS [Day],\n  Count(*) AS [Late Votes]\nFROM Votes v, Posts p\nWHERE v.PostId = p.Id\n  AND DateDiff(second, p.CreationDate, v.CreationDate) > 7*24*3600\n  AND p.OwnerUserId = ##User##\nGROUP BY Convert(datetime, v.CreationDate, 112)\nORDER BY Convert(datetime, v.CreationDate, 112) ASC","CreationDate":"2012-01-18 3:35:40","validated":true}
{"QuerySetId":59589,"Title":"Top 20 most viewed posts","Description":null,"QueryBody":"SELECT  top 20 Id as [Post Link],ViewCount,Score,Tags \nfrom Posts\nwhere lower(Tags) like '%<mathematica>%'\norder by ViewCount desc,Score desc","CreationDate":"2012-01-18 21:54:17","validated":true}
{"QuerySetId":59918,"Title":"Questions where a given tag was added not by its author","Description":null,"QueryBody":"SELECT  TOP 100\n  q.Id AS [Post Link],\n  h.Text AS [Edited Tags],\n  q.OwnerUserId AS [User Link],\n  q.CreationDate AS [Post Date],\n  h.UserId AS [User Link],\n  h.CreationDate AS [Edit Date]\nFROM PostHistory h, Posts q\nWHERE h.PostId = q.Id\n  AND h.PostHistoryTypeId = 6 -- tag edit\n  AND h.Text LIKE '%<' + '##Tag##' + '>%'\n  AND h.UserId <> q.OwnerUserId\n  AND NOT EXISTS (SELECT Id FROM PostHistory g\n                  WHERE g.PostId = h.PostId\n                    AND (g.PostHistoryTypeId = 3 OR g.PostHistoryTypeId = 6)\n                    AND g.CreationDate < h.CreationDate\n                    AND g.Text LIKE '%<' + '##Tag##' + '>%')","CreationDate":"2012-01-22 23:46:04","validated":true}
{"QuerySetId":59959,"Title":"Just how badly are W3Schools answers treated?","Description":null,"QueryBody":"SELECT  TOP(50)\n  Posts.Id AS [Post Link],\n  COUNT(Upvotes.Id) AS UpvoteCount,\n  COUNT(Downvotes.Id) AS DownvoteCount\nFROM Posts\nLEFT JOIN Votes AS Upvotes ON Upvotes.PostId = Posts.Id\nLEFT JOIN Votes AS Downvotes ON Downvotes.PostId = Posts.Id\n  WHERE Upvotes.VoteTypeId = 2\n    AND Downvotes.VoteTypeId = 3\n    AND Posts.PostTypeId = 2\n    AND Posts.Body LIKE '%w3schools%'\nGROUP BY Posts.Id\nORDER BY DownvoteCount DESC;","CreationDate":"2014-03-26 19:49:48","validated":true}
{"QuerySetId":60949,"Title":"See all the votes on all my different posts grouped by vote type","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##;\n\nwith vote_results as (\n  select votetypeid, count(*) as \"number of votes\"\n  from posts \n  inner join votes\n  on posts.id = votes.postid\n  where posts.owneruserid = @Userid\n  group by votetypeid\n)\n\nselect *\nfrom vote_results\ninner join\nvotetypes\non vote_results.votetypeid = votetypes.id\norder by id","CreationDate":"2012-02-06 20:29:15","validated":true}
{"QuerySetId":60951,"Title":"Show stupid posts (Freeze, Crash, Bug)","Description":null,"QueryBody":"SELECT  pt.PostId as [Post Link], p.Score, p.ViewCount \nFROM Tags as t, PostTags as pt, Posts as p\nWHERE pt.TagId = t.Id\nAND p.Id = pt.PostId\nAND t.TagName IN ('freeze', 'crash', 'bug')\nAND p.AcceptedAnswerId IS NULL\nAND p.ClosedDate IS NULL\nAND p.Id NOT IN\n(\n  SELECT ps.ParentId\n  FROM Posts as ps\n  WHERE ps.PostTypeId = 2\n  AND ps.Score > 1\n)\nORDER BY ViewCount DESC","CreationDate":"2012-02-06 20:39:08","validated":true}
{"QuerySetId":61164,"Title":"Top questions by tag in time range by view and score","Description":null,"QueryBody":"SELECT  * FROM\n(\n  SELECT TOP 5\n    'By View' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?language-agnostic## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) < ##Weeks?10##\n  ORDER BY ViewCount DESC\n) Q\nUNION ALL\nSELECT * FROM (\n  SELECT TOP 5\n    'By Score' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?language-agnostic## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) < ##Weeks?10##\n  ORDER BY Score DESC\n) R","CreationDate":"2012-08-09 20:01:37","validated":true}
{"QuerySetId":61182,"Title":"Questions that you participated in closing","Description":"List of all questions that were closed after you voted on them, in chronological order. Doesn't list flags, deleted questions, or questions that are still pending (or rather, were when the data dump occurred).","QueryBody":"SELECT  PostId       AS [Post Link],\n       CASE Comment\n         WHEN '1'  THEN 'exact duplicate'\n         WHEN '2'  THEN 'off topic'\n         WHEN '3'  THEN 'not constructive'\n         WHEN '4'  THEN 'not a real question'\n         WHEN '7'  THEN 'too localized'\n         WHEN '10' THEN 'general reference'\n         WHEN '20' THEN 'noise'\n         ELSE Comment\n       END          AS Reason,\n       CreationDate AS Date\nFROM   PostHistory\nWHERE  PostHistoryTypeId = 10\n       AND Text LIKE '%{\"Id\":##UserId:int##,%'\nORDER  BY Date ASC","CreationDate":"2012-04-13 18:21:33","validated":true}
{"QuerySetId":61295,"Title":"Closed Questions asked by user with the Trusted Privledge","Description":null,"QueryBody":"SELECT  \n       u.DisplayName,\n       p.id [Post Link], \n       p.CreationDate,\n       score, \n       CASE \n         WHEN communityowneddate IS NOT NULL THEN '*' \n         ELSE NULL \n       END  iscommunity ,\n       p.ViewCount\n       \nFROM   posts p \n       INNER JOIN users u \n         ON p.owneruserid = u.id \nWHERE  p.posttypeid = 1 \n       AND p.closeddate IS NOT NULL \n       AND u.reputation > 20000 \nORDER BY\n      u.DisplayName,\n      p.Title","CreationDate":"2012-02-10 22:24:24","validated":true}
{"QuerySetId":61335,"Title":"Popular Tags by Algerian Stack Overflow Users","Description":null,"QueryBody":"SELECT  TagName as [Tag] , \nCOUNT(TagName) AS [Total]\nFROM PostTags\nINNER JOIN Tags ON PostTags.TagId = Tags.Id\nINNER JOIN Posts ON PostTags.PostId = Posts.Id\nINNER JOIN Users ON Posts.OwnerUserId = Users.Id\n\nWHERE \nUsers.Location LIKE '%Algeria%'\nOR \nUsers.Location LIKE '%Algiers%'\n\nGROUP BY TagName\nORDER BY TOTAL DESC","CreationDate":"2012-02-12 0:01:29","validated":true}
{"QuerySetId":61442,"Title":"Average tag count per question","Description":"Returns average number of tags per question on a site.\nAdditionally it also returns tag count breakdown with question counts.\n\nBest viewed as \"Text-only results\"","QueryBody":"WITH  Counts as (\n  select\n    len(Tags) - len(replace(Tags, '<', '')) as Tags,\n    count(*) as QuestionCount\n  from Posts\n  where PostTypeId = 1\n  group by len(Tags) - len(replace(Tags, '<', ''))\n  )\nselect\n  cast(Tags as varchar) as [Tags per question],\n  replace(convert(varchar, cast(QuestionCount as money), 1), '.00', '') as [Number of questions],\n  convert (varchar, floor((QuestionCount * 100.0 \/ (select sum(QuestionCount) from Counts)))) as PercentOfQuestions\nfrom Counts\nunion all\nselect\n  'Avg = ' + cast((cast(sum(Tags * QuestionCount) as decimal) \/ sum(QuestionCount)) as varchar),\n  'All = ' + replace(convert(varchar, cast(sum(QuestionCount) as money), 1), '.00', ''),\n  null\nfrom Counts\n\norder by [Tags per question]","CreationDate":"2016-02-02 1:40:52","validated":true}
{"QuerySetId":61848,"Title":"Unanswered questions migrated to dba.se","Description":null,"QueryBody":"SELECT  count (p.id) \n  from Posts p\n  join PostTypes pt\n    on p.PostTypeID = pt.ID\n   and pt.Name = 'Question'\n  join PostHistory ph\n    on ph.PostID = p.ID\n  join PostHistoryTypes pht\n    on pht.id = ph.PostHistoryTypeID\n   and pht.Name = 'Post Migrated Here'\n where exists\n       (SELECT 1\n          from Posts ap\n          join PostTypes apt\n            on apt.Id = ap.PostTypeID\n           and apt.Name = 'Answer'\n         where ap.ParentID = p.Id)\n   and not exists\n       (SELECT 1\n          from Posts ap\n          join PostTypes apt\n            on apt.Id = ap.PostTypeID\n           and apt.Name = 'Answer'\n         where ap.ParentID = p.Id\n           and ap.CreationDate >= ph.CreationDate)","CreationDate":"2012-02-20 0:15:11","validated":true}
{"QuerySetId":62086,"Title":"Number of posts with bounty start and finish","Description":null,"QueryBody":"SELECT  * from votetypes\n\nwith opened as (\n  SELECT postid\n  from votes \n  where votetypeid = 8 -- for opened\n),\n\nclosed as (\n  SELECT postid\n  from votes\n  where votetypeid = 9 -- for closed\n)\n\n\nSELECT count(*) \nfrom (\n  SELECT * from opened \n  intersect\n  SELECT * from closed\n) q","CreationDate":"2012-02-20 23:54:37","validated":true}
{"QuerySetId":62118,"Title":"Long question title is long","Description":"This query fetches questions sorted by the title length.\n","QueryBody":"SELECT  len(title) as [Length], title, id as [Post Link]\nfrom Posts\nwhere postTypeId = 1 and len(title) <= 10\norder by len(title) asc","CreationDate":"2012-12-30 19:58:45","validated":true}
{"QuerySetId":62567,"Title":"Closed questions that won't be auto-deleted within a month","Description":"Closed questions that either have answers or haven't been downvoted. These won't go away unless you make them.\n\n(This only checks for the 30-days rule; see http:\/\/meta.stackoverflow.com\/a\/92006 for the full criteria.)","QueryBody":"SELECT  Score,\n       Id                                                                AS [Post Link],\n       CASE WHEN AnswerCount = 0 THEN NULL ELSE AnswerCount END          AS Answers,\n       CASE WHEN AcceptedAnswerId IS NOT NULL THEN 'Yes' ELSE NULL END   AS Accepted,\n       CASE WHEN CommunityOwnedDate IS NOT NULL THEN 'Yes' ELSE NULL END AS Wiki,\n       ViewCount                                                         AS Views,\n       OwnerUserId                                                       AS [User Link]\nFROM   Posts\nWHERE  ClosedDate IS NOT NULL -- closed\n       AND (Score >= 0 OR (AnswerCount IS NOT NULL AND AnswerCount > 0)) -- either not downvoted, or has answers\nORDER  BY Score ASC, CreationDate DESC","CreationDate":"2012-03-01 22:22:13","validated":true}
{"QuerySetId":62734,"Title":"How \"Favorited\" are questions of a certain minimum quality?","Description":null,"QueryBody":"SELECT  TOP 200\n            p.Id            AS [Post Link],\n            p.Score,\n            p.ViewCount,\n            p.FavoriteCount,\n            ROUND (\n                p.FavoriteCount * 100.0 \/ p.ViewCount, 2\n            ) AS [Favorites per view (%)]\nFROM        Posts           p\nWHERE       p.PostTypeId    = 1 -- Question\nAND         p.Score         > 10\nAND         p.ViewCount     > 200\nORDER BY    ROUND (p.FavoriteCount * 100.0 \/ p.ViewCount, 2)  DESC,\n            p.ViewCount DESC","CreationDate":"2012-02-29 8:08:01","validated":true}
{"QuerySetId":62881,"Title":"What are the most viewed questions for a given tag?","Description":null,"QueryBody":"DECLARE  @TagString nvarchar(25) = ##tagName:string##\n\nselect TOP ##ResultSize## ViewCount, Id AS [Post Link]\nfrom Posts \nwhere Id in\n  (\n    select PostId \n    from PostTags \n    where TagId =\n    (\n      select Id \n      from Tags \n      where TagName = @TagString\n     )\n  )\n  AND CreationDate > GETDATE() - ##Days##\n  AND CreationDate < GETDATE() - ##Olddays##\nGroup by ViewCount, Id\nORDER by ViewCount DESC","CreationDate":"2020-06-27 16:52:08","validated":true}
{"QuerySetId":62883,"Title":"Number of views for a Tag","Description":"Provides a number of views for a tag you provide.","QueryBody":"DECLARE  @TagString nvarchar(25) = ##tagName:string##\n\nselect t.tagName,(sum(p.ViewCount)\/count(*)) as [Average Views] \nfrom Posts p\ninner join PostTags pt on p.Id = pt.PostId\ninner join Tags t on pt.TagId = t.Id\nGroup By t.tagName\nOrder by [Average Views] Desc","CreationDate":"2012-03-02 8:20:11","validated":true}
{"QuerySetId":62886,"Title":"Average Number of Views per Tag","Description":"Shows which tags bring in the most viewers","QueryBody":"SELECT  t.tagName, avg(p.ViewCount) as [Average Views], Count(*) AS [Question Count]\nfrom Posts p\ninner join PostTags pt on p.Id = pt.PostId\ninner join Tags t on pt.TagId = t.Id\nGroup By t.tagName\nOrder by [Average Views] Desc","CreationDate":"2012-03-02 17:53:32","validated":true}
{"QuerySetId":62919,"Title":"Total Number of Views per Tag","Description":"Shows which tags bring in the most viewers","QueryBody":"SELECT  t.tagName,(sum(p.ViewCount)\/count(*)) as [Average Views], Count(*) AS [Question Count]\nfrom Posts p\ninner join PostTags pt on p.Id = pt.PostId\ninner join Tags t on pt.TagId = t.Id\nGroup By t.tagName\nOrder by [Average Views] Desc","CreationDate":"2015-03-07 20:47:54","validated":true}
{"QuerySetId":63007,"Title":"Users from India with more than 200 rep","Description":"Users from India with more than 200 rep","QueryBody":"SELECT  \n Id as [User Link]\n ,Reputation\n ,Age\n ,Location\n ,WebsiteUrl\nfrom \n Users \nwhere \n Location like '%India%' \n and NOT location like '%Indiana%' -- ;)\n and Reputation > 200\norder by Reputation desc","CreationDate":"2012-03-04 9:19:56","validated":true}
{"QuerySetId":64594,"Title":"Posts closed for reasons other than exact duplicate","Description":null,"QueryBody":"SELECT  Id AS [Post Link], Body\nFROM Posts\nWHERE ClosedDate IS NOT NULL\nAND Body NOT LIKE '<blockquote>' + CHAR(10) + '  <p><strong>Possible Duplicate%';","CreationDate":"2012-03-21 19:08:22","validated":true}
{"QuerySetId":64663,"Title":"How many upvotes and downvotes have I received?","Description":null,"QueryBody":"SELECT  \n  SUM(CASE WHEN a.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n  SUM(CASE WHEN a.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n  (CAST(SUM(CASE WHEN a.VoteTypeId = 2 THEN 1 ELSE 0 END) AS FLOAT) \/ COUNT(*)) * 100 AS UpVotePercentage,\n  (CAST(SUM(CASE WHEN a.VoteTypeId = 3 THEN 1 ELSE 0 END) AS FLOAT) \/ COUNT(*)) * 100 AS DownVotePercentage\nFROM Votes a\n  INNER JOIN Posts b\n    ON \n      a.PostId = b.Id\n      AND b.PostTypeId IN (1,2) -- Only questions and answers\nWHERE \n  b.OwnerUserId = ##UserId##\n  AND a.VoteTypeId IN (2,3) -- Only up and down votes","CreationDate":"2012-03-22 8:03:19","validated":true}
{"QuerySetId":64723,"Title":"People that ask a lot of questions.","Description":null,"QueryBody":"SELECT \n  TOP 100\n  u.ID AS [User Link], COUNT(p.ID) AS [Posts]\nFROM Users u\nJOIN Posts p ON u.Id = p.OwnerUserID\nWHERE p.PostTypeId = 1\nGROUP BY u.ID\nORDER BY COUNT(p.ID) DESC","CreationDate":"2012-03-22 17:52:16","validated":true}
{"QuerySetId":64855,"Title":"\"Bad\" answers to questions that include code.","Description":null,"QueryBody":"SELECT  case when q.body like '%<code>%' then 'yes'\n            else 'no' end as IncludesCode\n     , count(*) as Count\n  from posts q\n where q.posttypeid = 1\n   and q.viewcount > 10\n   and ( q.score < 0\n         or q.closeddate is not null )\n   and q.answercount > 0\n   and q.creationdate > ( SELECT max(creationdate)\n                           from posts ) - 30\n   and not exists ( SELECT 1\n                      from posts\n                     where parentid = q.id\n                       and posttypeid = 2\n                       and ( score > 0\n                            or id = q.acceptedanswerid )\n                            )\n group by case when q.body like '%<code>%' then 'yes'\n               else 'no' end","CreationDate":"2012-03-23 19:55:10","validated":true}
{"QuerySetId":65334,"Title":"ASP.NET thread volume, page views, unique OPs by month","Description":null,"QueryBody":"SELECT  COUNT(*) as Volume, \nSUM(ViewCount) as PageViews,\nCOUNT(DISTINCT OwnerUserId) as UniqueOPs,\nDATEPART(year, P.CreationDate) as [Year], \nDATEPART(month, P.CreationDate) as Month\nFROM [Posts] as P\nWHERE (Tags like '%<activedirectorymembership>%' \nor Tags like '%<custom-server-controls>%' \nor Tags like '%<dynamicdata>%' \nor Tags like '%<dynamic-data>%' \nor Tags like '%<spring-mvc>%' \nor Tags like '%<mvcscaffolding>%' \nor Tags like '%<temporary-asp.net-files>%'\nor Tags like '%<asp.net%') \nand PostTypeId = 1 \nand CommunityOwnedDate is null and ClosedDate is null\nGROUP by DATEPART(YEAR, P.CreationDate), DATEPART(MONTH, P.CreationDate)\nORDER by [Year], Month","CreationDate":"2012-03-28 11:45:11","validated":true}
{"QuerySetId":65344,"Title":"iOS thread volume, page views, unique OPs by month","Description":null,"QueryBody":"SELECT  COUNT(*) as Volume, \nSUM(ViewCount) as PageViews,\nCOUNT(DISTINCT OwnerUserId) as UniqueOPs,\nDATEPART(year, P.CreationDate) as [Year], \nDATEPART(month, P.CreationDate) as Month\nFROM [Posts] as P \nWHERE Tags like '%<tridion%'\nand PostTypeId = 1 \nand CommunityOwnedDate is null and ClosedDate is null\nGROUP by DATEPART(YEAR, P.CreationDate), DATEPART(MONTH, P.CreationDate)\nORDER by [Year], Month","CreationDate":"2012-04-11 23:19:05","validated":true}
{"QuerySetId":65345,"Title":"Winphone thread volume with accepted answers by month","Description":null,"QueryBody":"SELECT \n  DATEADD(m, DATEDIFF(m, 0, Posts.CreationDate), 0) AS Month,\n  Count(*) AS AcceptedAnswers\nFROM\n  Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nWHERE\n  Tags.TagName = 'meteor'\n  and PostTypeId = 1 \n  and CommunityOwnedDate is null and ClosedDate is null\n  and AcceptedAnswerId > 0\n  AND CreationDate >= DATEADD(m, DATEDIFF(m, 0, GETDATE())-48, 0)\nGROUP BY\n  DATEADD(m, DATEDIFF(m, 0, Posts.CreationDate), 0), Tags.TagName\nORDER BY\n  DATEADD(m, DATEDIFF(m, 0, Posts.CreationDate), 0), Tags.TagName;","CreationDate":"2016-08-03 2:24:37","validated":true}
{"QuerySetId":65350,"Title":"PHP thread volume with accepted answers by month","Description":null,"QueryBody":"SELECT  COUNT(*) as AnsweredVolume,\nDATEPART(year, P.CreationDate) as [Year], \nDATEPART(month, P.CreationDate) as Month\nFROM [Posts] as P\nWHERE (Tags like '%<php%'\nor Tags like '%<cakephp%'\nor Tags like '%<amfphp>%'\nor Tags like '%<jqgrid-php>%'\nor Tags like '%<easyphp>%'\nor Tags like '%<fuelphp>%'\nor Tags like '%<ffmpeg-php>%'\nor Tags like '%<firephp>%'\nor Tags like '%<suphp>%'\nor Tags like '%<mod-php>%') \nand PostTypeId = 1 \nand CommunityOwnedDate is null and ClosedDate is null\nand AcceptedAnswerId > 0\nGROUP by DATEPART(YEAR, P.CreationDate), DATEPART(MONTH, P.CreationDate)\nORDER by [Year], Month","CreationDate":"2012-03-28 12:19:46","validated":true}
{"QuerySetId":65354,"Title":"Flash thread volume with accepted answers by month","Description":null,"QueryBody":"SELECT  COUNT(*) as AnsweredVolume,\nDATEPART(year, P.CreationDate) as [Year], \nDATEPART(month, P.CreationDate) as Month\nFROM [Posts] as P\nWHERE (Tags like '%<flash%'\nor Tags like '%<open-flash-chart>%'\nor Tags like '%<usb-flash-drive>%'\nor Tags like '%<adobe-flash-cs3>%'\nor Tags like '%<openflashchart2>%'\nor Tags like '%<embedded-flashplayer>%'\nor Tags like '%<axshockwaveflash>%'\nor Tags like '%<openflashchart>%'\nor Tags like '%<rails-flash>%') \nand PostTypeId = 1 \nand CommunityOwnedDate is null and ClosedDate is null\nand AcceptedAnswerId > 0\nGROUP by DATEPART(YEAR, P.CreationDate), DATEPART(MONTH, P.CreationDate)\nORDER by [Year], Month","CreationDate":"2012-03-28 12:23:58","validated":true}
{"QuerySetId":65355,"Title":"iPhone thread volume with accepted answers by month","Description":null,"QueryBody":"SELECT  COUNT(*) as AnsweredVolume,\nDATEPART(year, P.CreationDate) as [Year], \nDATEPART(month, P.CreationDate) as Month\nFROM [Posts] as P\nWHERE ([Tags] like '%<iphone%' ) \nand PostTypeId = 1 \nand CommunityOwnedDate is null and ClosedDate is null\nand AcceptedAnswerId > 0\nGROUP by DATEPART(YEAR, P.CreationDate), DATEPART(MONTH, P.CreationDate)\nORDER by [Year], Month","CreationDate":"2012-03-28 12:24:34","validated":true}
{"QuerySetId":65541,"Title":"Maximum number of badges (all kinds)","Description":null,"QueryBody":"SELECT  TOP 100\n    Users.Id as [User Link], COUNT(*) as [NumBadges]\n  FROM\n    Users INNER JOIN Badges\n    ON Users.Id = Badges.UserId\n  GROUP BY\n    Users.Id\n  ORDER BY\n  NumBadges DESC","CreationDate":"2012-03-30 11:05:18","validated":true}
{"QuerySetId":66091,"Title":"Badges and Activity per Month","Description":null,"QueryBody":"SELECT  (CAST(cast(DATEPART(YYYY, b.Date) as varchar) + '-' + cast(DATEPART(MM, b.Date) as varchar) + '-01' as datetime)) as Month,\ncount(b.Id) as BadgesAwarded,\ncount(p.Id) as PostsMade\nfrom Badges b, Users u, Posts p\nwhere b.UserId = u.Id\nand p.OwnerUserId = u.Id\nand u.DisplayName = 'Lewisham'\ngroup by (CAST(cast(DATEPART(YYYY, b.Date) as varchar) + '-' + cast(DATEPART(MM, b.Date) as varchar) + '-01' as datetime))","CreationDate":"2014-10-29 22:46:38","validated":true}
{"QuerySetId":66267,"Title":"How many characters has user X typed?","Description":null,"QueryBody":"SELECT \n  SUM(LEN(p.Body))\nFROM\n  Users u\nJOIN\n  Posts p on u.Id = p.OwnerUserId\nWHERE\n  u.Id = ##User##","CreationDate":"2012-04-09 15:53:54","validated":true}
{"QuerySetId":66424,"Title":"Users with most tag-specific badges","Description":null,"QueryBody":"SELECT  TOP 1000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%india%'\n    OR UPPER(Location) LIKE '%INDIA%'\n    or Location like '%india%'   AND Reputation >= 10000\nORDER BY\n    Reputation DESC;","CreationDate":"2016-04-10 12:23:06","validated":true}
{"QuerySetId":66505,"Title":"acceptance rate for each user","Description":null,"QueryBody":"SELECT \n    U.Id,\n    COUNT(*) AS [Accepted answers],\n    (\n        SELECT COUNT(*)\n        FROM Posts P2\n        WHERE\n          U.Id = P2.OwnerUserId\n          AND P2.PostTypeId = 1\n    ) AS [Total Questions]\nFROM\n    Posts P1\n  INNER JOIN\n    Users U ON U.Id = P1.OwnerUserId\n  \nWHERE \n    P1.PostTypeId = 1\n    AND P1.CommunityOwnedDate is null\n    AND P1.ClosedDate is null\n    AND P1.AcceptedAnswerId IS NOT NULL\n\nGROUP BY U.Id","CreationDate":"2012-04-12 1:14:35","validated":true}
{"QuerySetId":66766,"Title":"StackOverflow Rank with current reputation stored on data.SE","Description":null,"QueryBody":"WITH  Rankings AS (\nSELECT Id, Ranking = ROW_NUMBER() OVER(ORDER BY Reputation DESC)\nFROM Users\n)\n,Counts AS (\nSELECT Count = COUNT(*)\nFROM Users\nWHERE Reputation > 100\n)\nSELECT Id, Ranking, (\nSELECT Reputation\nFROM Users\nWHERE Id = ##UserId##\n)as Reputation, CAST(Ranking AS decimal(10, 5)) \/ (SELECT Count FROM Counts) AS Percentile\nFROM Rankings\nWHERE Id = ##UserId##","CreationDate":"2012-04-14 10:20:19","validated":true}
{"QuerySetId":66843,"Title":"No Answer, No Comment, No Duplicate, No Merge","Description":"Posts with No Answer, No Comment, No Duplicate","QueryBody":"SELECT  p.Id AS [Post Link],p.Score,p.viewcount,p.commentcount , p.creationdate, p.tags from Posts p\nwhere answercount=0 and commentcount=0 and p.closeddate is null\nand p.id NOT IN (SELECT postid \n                      FROM   posthistory \n                      WHERE  (posthistorytypeid = 10 \n                      AND COMMENT in ( 1 )) \n                      or posthistorytypeid in (17,18,35,37,38))\norder by p.creationdate","CreationDate":"2014-03-31 13:35:10","validated":true}
{"QuerySetId":67514,"Title":"Questions per month, Scala Web Frameworks","Description":"How do Scala web frameworks compare to each other?\n\nI'm restricting the questions to those tagged Scala, to avoid polluting Playframework's result. It might be unfair, but I can't think of any other way to do it. At least all frameworks are being equally discriminated against.","QueryBody":"SELECT  *, count(*) as 'Count' from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as date) Month, \n    t.TagName\n  from (\n    SELECT p.Id, p.CreationDate from Posts p\n    join PostTags pt on pt.PostId = p.Id\n    join Tags t on t.Id = pt.TagId\n    where t.TagName = 'scala'\n    ) pp\n  join PostTags pt on pt.PostId = pp.Id\n  join Tags t on t.Id = pt.TagId\n  where t.TagName in ( \n  'playframework', 'playframework-1.x',\n  'playframework-2.0', 'playframework-2.x', \n  'lift', 'liftweb',\n  'scalatra', 'vaadin', 'finagle', 'scalate',\n  'pinky', 'xitrum', 'blueeyes', 'circumflex', 'bowler',\n  'scala' )\n) as X\ngroup by TagName, Month\norder by Month desc, Count","CreationDate":"2017-10-06 2:48:48","validated":true}
{"QuerySetId":67945,"Title":"My answers to questions with no accepted answer","Description":null,"QueryBody":"SELECT  a.Score,\n       a.Id           AS [Post Link],\n       q.AnswerCount  AS Answers,\n       q.OwnerUserId  AS [User Link],\n       a.CreationDate AS [Answered On],\n       a.PostTypeId\nFROM   Posts a\n       INNER JOIN Posts q\n         ON q.Id = a.ParentId\nWHERE  q.AcceptedAnswerId IS NULL\n       AND a.OwnerUserId = 861716\nORDER BY a.CreationDate DESC","CreationDate":"2012-04-27 15:23:43","validated":true}
{"QuerySetId":70603,"Title":"Top users:  Hong Kong","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%china%'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-06-19 9:44:36","validated":true}
{"QuerySetId":70682,"Title":"Close votes cast by a user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT CreationDate AS Date, PostId AS [Post Link] \nFROM Votes\nWHERE UserId = @UserId AND VoteTypeId = 6\nORDER BY CreationDate DESC","CreationDate":"2012-05-20 19:30:37","validated":true}
{"QuerySetId":71040,"Title":"Find Questions Migrated Without the User","Description":"Use this query to find where users have their post migrated but they never followed the question to the target site.","QueryBody":"SELECT \n    OwnerDisplayName\n  , Posts.Id AS [Post Link]\n  , PostHistory.CreationDate AS [Migration Date]\n  , Posts.CreationDate AS [Original Post Date]\n  , SUBSTRING(\n        PostHistory.Comment\n      , 13\n      , CHARINDEX(\n            '.'\n          , SUBSTRING(\n                PostHistory.Comment\n              , 13\n              , LEN(PostHistory.Comment)\n            )\n        ) -1\n    ) AS [Source Site]\nFROM\n  Posts\nJOIN\n  PostHistory ON Posts.Id = PostHistory.PostId\nWHERE\n  PostHistory.PostHistoryTypeId = 36 AND\n  Posts.PostTypeId = 1 AND\n  OwnerUserId IS NULL \nORDER BY 5 ASC, OwnerDisplayName ASC, Posts.CreationDate DESC","CreationDate":"2012-05-24 18:43:21","validated":true}
{"QuerySetId":71854,"Title":"Average current reputation of users on site","Description":null,"QueryBody":"SELECT  AVG(u1.Reputation) FROM Users u1 WHERE u1.Id IN\n(SELECT DISTINCT u.Id\nFROM Posts p\nLEFT JOIN Users u ON (p.OwnerUserId = u.Id)\nWHERE\np.PostTypeId = 1)","CreationDate":"2012-06-06 16:54:42","validated":true}
{"QuerySetId":72370,"Title":"Accept rate by count, users greater than 200 reputation.","Description":null,"QueryBody":"WITH  ByUser as (\n select OwnerUserId\n      , cast(count(AcceptedAnswerId) as float) \n        \/ cast(count(*) as float) as AcceptRate\n   from posts p\n   join users u\n     on p.OwnerUserId = u.id\n  where u.Reputation > 200\n    and p.PostTypeId = 1\n  group by OwnerUserId\n having count(*) >= 4\n        )\n select cast(100 * AcceptRate as int) as AcceptRate\n      , count(*) as Count\n   from ByUser\n  group by cast(100 * AcceptRate as int)\n  order by cast(100 * AcceptRate as int) asc","CreationDate":"2012-06-09 17:12:04","validated":true}
{"QuerySetId":72826,"Title":"Interactions with a specific user","Description":"Have I interacted with this user before? (I.e., answered their question or commented on a post.)","QueryBody":"SELECT  'Answer'       AS Type,\n       q.Id           AS [Post Link],\n       NULL           AS [Comment Link],\n       a.CreationDate AS Date,\n       a.OwnerUserId    AS [UserIDf]\nFROM   Posts a, Posts q\nWHERE  a.ParentId = q.Id\n       AND a.PostTypeId = 2\n\nUNION ALL\n\nSELECT 'Comment'      AS Type,\n       c.PostId       AS [Post Link],\n       c.Id           AS [Comment Link],\n       c.CreationDate AS Date,\n       c.UserId         AS UserIDC\nFROM   Comments c, Posts p\nWHERE  c.PostId = p.Id\nORDER BY Date ASC","CreationDate":"2014-11-28 4:47:29","validated":true}
{"QuerySetId":72893,"Title":"How Many Edits Have I made?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT \nCOUNT(PostHistoryTypeId)\nFROM PostHistory \nWHERE \n  UserId = @UserId AND\n  PostHistoryTypeId > 3 AND\n  PostHistoryTypeId < 6","CreationDate":"2012-06-13 18:55:30","validated":true}
{"QuerySetId":73658,"Title":"Percentage of posts by top 10 %","Description":null,"QueryBody":"DECLARE  @allPosts decimal(15,5) \nSELECT @allPosts = cast(COUNT(*) as decimal(15,5) ) FROM posts\n\nSELECT  CAST(SUM(k) as decimal (15,5)) \/ @allPosts * 100\nFROM (\nSELECT TOP 10 PERCENT OwnerUserID , count(id) k\nFROM Posts p\nWHERE OwnerUserID > 0\nGROUP BY OwnerUserID\nORDER BY count(id) desc ) T","CreationDate":"2012-06-22 2:52:17","validated":true}
{"QuerySetId":73868,"Title":"Top 50000 users by mean answer score","Description":"- Each answer's score is log normalized and truncated at 0 (no negatives)\n- Results are smoothed by adding 5 fake answers with score 0 (there's a bayesian justification for this involving conjugate priors).\n","QueryBody":"SELECT  TOP 50000\n    Users.Id,\n    DisplayName,\n    Reputation,\n    Count(Posts.Id) AS Answers,\n    AVG(Log(0.5 * (\n      ((CAST(Score AS float) + 1.0) + 1.0) + \n      ABS((CAST(Score AS float) + 1.0) - 1.0)\n    ))) * Count(Score) \/ (Count(Score) + 5) AS LogAverageAnswerScore\nFROM Posts\n    INNER JOIN Users ON Users.Id = OwnerUserId\nWHERE PostTypeId = 2\nGROUP BY Users.Id, DisplayName, Reputation\nORDER BY LogAverageAnswerScore DESC","CreationDate":"2012-07-04 5:00:07","validated":true}
{"QuerySetId":74669,"Title":"Top Android Italian Answers writers","Description":null,"QueryBody":"SELECT  u.Id, u.DisplayName, u.Reputation, count(*) as AndroidAnswers from Users u, Posts p, Posts pp where u.Id in (\n    SELECT Id\n    from Users \n    where Location like ('%Russia')\n  )\n  and p.OwnerUserId = u.Id\n  and pp.Id = p.ParentId\n  and pp.Tags like ('%android%')\n  group by u.Id,u.DisplayName, u.Reputation\n  order by AndroidAnswers desc","CreationDate":"2017-03-27 18:20:50","validated":true}
{"QuerySetId":75098,"Title":"My Total Posts View Count","Description":null,"QueryBody":"DECLARE  @UserId INT = ##UserId##;\n\nselect sum(ViewCount) from Posts\nwhere owneruserid = ##UserId##","CreationDate":"2012-07-11 12:45:15","validated":true}
{"QuerySetId":75142,"Title":"Find images not on imgur","Description":"Finds all posts that have embedded images, but do not contain \"imgur.com\". Useful for finding old posts with images that may need uploading to imgur or are already broken. Sorted by last activity because of the Archaeologist badge.","QueryBody":"SELECT  P.Id as [Post Link]\nfrom Posts P\ninner join Users U on P.OwnerUserId = U.Id\nwhere U.Id = 745\nand P.Body like '%img src%'\nand P.Body not like '%imgur%'","CreationDate":"2012-10-23 16:40:50","validated":true}
{"QuerySetId":75276,"Title":"Unanswered Questions per Top 5 Tags (Per Month)","Description":null,"QueryBody":"SELECT  *, COUNT(*) AS Count FROM\n(\n  SELECT CAST(\n      CAST(DATEPART(YYYY, CreationDate) AS varchar) + '-' + CAST(DATEPART(MM, CreationDate) AS varchar) + '-01'\n    AS DATETIME) [Month], \n    t.TagName,\n    (SELECT count(*) FROM Posts pp where pp.ParentId = p.id) AS [Answers]\n  FROM Posts p \n  JOIN PostTags pt ON pt.PostId = p.Id\n  JOIN Tags t ON t.Id = pt.TagId\n  AND TagId IN \n  (\n    SELECT TOP 500 Id FROM Tags \n    ORDER BY Count DESC\n  )\n) AS X\nWHERE [Month] >= CAST('2012-01-01' as datetime)\nAND [Month] < CAST('2013-01-01' as datetime)\nAND [Answers] = 0\nGROUP BY TagName, Answers, [Month]\nORDER BY [Month] ASC, TagName ASC","CreationDate":"2012-12-18 21:47:31","validated":true}
{"QuerySetId":75337,"Title":"Bizarre question stats by Tag","Description":null,"QueryBody":"WITH  tag\n\nWITH TaggedPosts(PostId)\nAS (\n  SELECT pt.PostId as PostId\n  FROM PostTags pt INNER JOIN Tags t ON t.Id=pt.TagId\n  WHERE t.TagName LIKE '%' + ##tag:string## + '%'\n  GROUP BY pt.PostId\n)\n\n-- find bizarre questions\n\nSELECT Id as [Post Link], * FROM Posts\nWHERE Id IN (SELECT PostId FROM TaggedPosts)\nAND PostTypeId = 1\nAND AnswerCount = 0\nAND AcceptedAnswerId IS NOT NULL","CreationDate":"2019-06-25 18:34:33","validated":true}
{"QuerySetId":75972,"Title":"Finding Posts tagged only homework, which are not closed","Description":null,"QueryBody":"SELECT  Posts.Id, Posts.Id  AS [Post Link]\nFROM Posts\nWHERE Tags='<homework>' AND ClosedDate IS NULL\nORDER BY Posts.LastEditDate","CreationDate":"2012-07-31 14:47:29","validated":true}
{"QuerySetId":76024,"Title":"Top SO Users from KZ","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%kazakhstan%'\n    OR UPPER(Location) LIKE '%KZ'\nORDER BY\n    Reputation DESC;","CreationDate":"2017-07-26 21:46:13","validated":true}
{"QuerySetId":76240,"Title":"Reputation vs. Number of Views","Description":null,"QueryBody":"SELECT \n    Id AS [User Link], \n    Reputation,\n    Views\nFROM\n    Users\nWHERE\n    Reputation > 1000\nORDER BY\n    Reputation DESC;","CreationDate":"2012-07-31 17:44:01","validated":true}
{"QuerySetId":76692,"Title":"Stats For Rep Per Post","Description":null,"QueryBody":"WITH  repPerPostUser as\n(\n  SELECT \n      u.id,\n      CAST (u.Reputation as decimal(15,5)) \/ \n        CAST (CASE \n                WHEN COUNT(p.id) = 0 THEN 1 \n                ELSE COUNT(p.id) \n                END AS decimal(15,5)) RepPerPost\n              \n          \n\n  FROM\n    users u\n    INNER JOIN posts p\n    ON u.id = p.OwnerUserId\n  GROUP BY\n    u.id, u.reputation\n)\nSELECT\n  AVG(RepPerPost) Mean_RepPerPost,\n  MAX(RepPerPost) Max_RepPerPost,\n  MIN(RepPerPost) Min_RepPerPost,\n  STDEV(RepPerPost) Std_Dev_RepPerPost\nFROM\n  repPerPostUser","CreationDate":"2012-08-08 18:28:14","validated":true}
{"QuerySetId":76847,"Title":"Top questions asked less than N weeks ago, by tag by view and score","Description":null,"QueryBody":"SELECT  * FROM\n(\n  SELECT TOP 5\n    'By View' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?java## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) > ##WeeksOld?100##\n  ORDER BY ViewCount DESC\n) Q\nUNION ALL\nSELECT * FROM (\n  SELECT TOP 5\n    'By Score' AS Label,\n    OwnerUserId AS [User Link],\n    po.Id AS [Post Link],\n    Score, \n    ViewCount\n  FROM Posts po\n  JOIN PostTags pt\n  ON po.Id = pt.PostId\n  JOIN Tags t\n  ON pt.TagId = t.Id\n  WHERE t.TagName = ##Tag:string?java## AND\n    DATEDIFF(WEEK, po.CreationDate, GetDate()) > ##WeeksOld?100##\n  ORDER BY Score DESC\n) R","CreationDate":"2013-12-02 7:54:01","validated":true}
{"QuerySetId":77444,"Title":"Popularity of \"Nice try, robot.\" comments","Description":null,"QueryBody":"SELECT \n   PostId as [Post Link],\n   Id,\n   Score\nfrom Comments\nwhere (Text like '%ice try, robo%')\n;","CreationDate":"2012-08-17 1:19:21","validated":true}
{"QuerySetId":78134,"Title":"Distribution of reputation: % of Reputation Held by X Top Users","Description":null,"QueryBody":"DECLARE  @totalRep float\n\nSELECT @totalRep = SUM(Users.Reputation) FROM Users\n\nSELECT SUM(tmp.Reputation) \/ @totalRep \nFROM (SELECT TOP ##howMany##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nORDER BY\nReputation DESC) as tmp;","CreationDate":"2012-08-25 17:05:22","validated":true}
{"QuerySetId":78172,"Title":"Top users in specified age group","Description":null,"QueryBody":"DECLARE  @minAge int = ##UserMinimumAge##\nDECLARE @maxAge int = ##UserMaximumAge##\n\nSELECT\n  Id\n  , Reputation\n  , Age\n  , CreationDate\n  , DisplayName\n  , LastAccessDate\n  \nFROM\n  Users\n  \nWHERE\n    Age>@minAge\n  AND\n    Age<@maxAge\n    \nORDER BY\n  Reputation DESC","CreationDate":"2012-08-26 17:50:44","validated":true}
{"QuerySetId":79356,"Title":"Number of User's Posts Downvoted per Day per User","Description":null,"QueryBody":"SELECT  Users.Id as [User Link], Votes.CreationDate, COUNT(*) Downvotes\n   FROM (\n      SELECT DISTINCT Votes.PostId, Votes.CreationDate FROM Votes \n         WHERE Votes.VoteTypeId = 3\n   ) Votes\n   INNER JOIN Posts ON Votes.PostId = Posts.Id\n   INNER JOIN Users ON Posts.OwnerUserId = Users.Id\n   GROUP BY Users.Id, Votes.CreationDate\n   ORDER BY Downvotes DESC","CreationDate":"2012-09-09 6:05:58","validated":true}
{"QuerySetId":80869,"Title":"What is my average post length?","Description":null,"QueryBody":"SELECT  AVG(LEN(Body)) As Length FROM Posts\nWHERE PostTypeId = 2\nAND OwnerUserId = ##UserId##","CreationDate":"2012-09-25 23:10:16","validated":true}
{"QuerySetId":81340,"Title":"Length of post vs. Answered","Description":null,"QueryBody":"SELECT  \n    Id,\n    PostTypeId,\n    AcceptedAnswerId,\n    AnswerCount,\n    CreationDate,\n    Score,\n    LEN(Body) AS QLength\nfrom Posts\nwhere PostTypeId = 2\norder by CreationDate DESC","CreationDate":"2019-09-13 19:15:43","validated":true}
{"QuerySetId":82268,"Title":"[draft] list answers and score for a given tag","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##; \nDECLARE @Tag nvarchar(25) = ##TagName:string##;\n\n--DECLARE @UserId int = 428236;\n--DECLARE @Tag nvarchar(25) = 'tkinter';\n\nselect Posts.Id As [Post Link], Score, Posts.creationDate\nfrom Posts \n  INNER JOIN PostTags on Posts.ParentId = PostTags.PostId\n  INNER JOIN Tags on  PostTags.TagId = Tags.id\nwhere\n    Posts.OwnerUserId = @UserId\nand Tags.Tagname = @Tag\n\nORDER by Posts.creationDate","CreationDate":"2012-10-11 19:37:28","validated":true}
{"QuerySetId":82274,"Title":"What tag generates most reputation?","Description":null,"QueryBody":"SELECT \n    TagName,\n    CAST(SUM(Posts.Score) AS FLOAT)\/COUNT(*) AS Reputation\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nGROUP BY TagName\nHAVING COUNT(*) > 5000\nORDER BY Reputation DESC","CreationDate":"2013-05-10 13:17:07","validated":true}
{"QuerySetId":83178,"Title":"Average Score for Questions and Answers by Month","Description":null,"QueryBody":"SELECT \n    datepart(year, Posts.CreationDate) AS Year,\n    datepart(month, Posts.CreationDate) AS Month,\n    SUM (Score) AS SUM_SCORE,\n    COUNT(*) AS COUNT_SCORE,\n    AVG(CAST(Score AS DECIMAL(12,2))) AS AVG_SCORE,\n    sum(case when PostTypeID < 3 then 1 else 0 end) QnA\nFROM \n    Posts\nWHERE\n    PostTypeID < 3\nGROUP BY\n    datepart(year, Posts.CreationDate), datepart(month, Posts.CreationDate)    \nHAVING  datepart(year, Posts.CreationDate) >= 2008\nORDER BY Year, Month","CreationDate":"2012-10-26 14:33:34","validated":true}
{"QuerySetId":83392,"Title":"Questions per month specific tags compared","Description":"How many questions per month does each tag in a specific tags get","QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where t.TagName in ('dm-script' )\n) as X\ngroup by TagName, [Month]\norder by [Month] asc, TagName asc","CreationDate":"2020-01-08 16:33:52","validated":true}
{"QuerySetId":83443,"Title":"Questions By High Rep Users","Description":null,"QueryBody":"DECLARE  @RepFilter int = 1000\n\nSELECT      ParentId as [Link To Question]\nFROM        Posts\n            INNER JOIN Users\n            ON Posts.OwnerUserId = Users.Id\nWHERE       Users.Reputation > @RepFilter","CreationDate":"2018-05-17 6:03:12","validated":true}
{"QuerySetId":83956,"Title":"Users with the most closed questions","Description":null,"QueryBody":"SELECT  top(100) owneruserid [User Link], count(*) total\nfrom posts\nwhere closeddate is not null\n  and posttypeid = 1 -- questions\ngroup by owneruserid\norder by total desc;","CreationDate":"2012-11-01 2:26:35","validated":true}
{"QuerySetId":84131,"Title":"How many posts share ruby_on_rails and ruby_on_rails3 tags","Description":null,"QueryBody":"SELECT  p.id\n, p.Title\n, p.Tags\n--, t.TagName\nfrom Posts p left outer join PostTags pt on p.id = pt.PostId\n--left outer join  Tags t   \n-- on t.Id = pt.TagId\nwhere 1=1\nand PostTypeId = 1 \n--and (t.TagName = 'ruby_on_rails'\n--or t.TagName = 'ruby_on_rails3')\n--and p.Title like '%paypal%'","CreationDate":"2012-11-02 19:58:38","validated":true}
{"QuerySetId":84270,"Title":"Comments with a score of 5 or more","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\nPostId as [Post Link],\nScore,\nText\nFROM\n    Comments\nWHERE \n    UserId = @UserId\nAND\n    Score >= 5\nORDER BY \n    Score DESC","CreationDate":"2012-11-05 8:18:37","validated":true}
{"QuerySetId":84423,"Title":"Whose questions have you answered","Description":null,"QueryBody":"SELECT \n  answer.owneruserid as [User Link],\n  count(*) as number\nFROM \n    posts as question\n INNER JOIN\n    posts as answer\n  ON\n    question.posttypeid = 1\n   AND\n    answer.posttypeid = 2\n   AND\n    question.owneruserid = ##userid##\n   AND\n    answer.parentid = question.id\nGROUP BY\n    answer.owneruserid\nORDER BY\n    number DESC","CreationDate":"2012-11-08 5:34:14","validated":true}
{"QuerySetId":84593,"Title":"My Comments with fixed score","Description":"How many comments do I have for each score.\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    PostId, Text \nFROM \n    Comments\nWHERE \n    UserId = @UserId AND\n    Score = @Score","CreationDate":"2012-11-09 15:02:29","validated":true}
{"QuerySetId":84692,"Title":"Top posts (Q&A) on the site.","Description":null,"QueryBody":"SELECT  TOP 100\n  Id as [Post Link],\n  Score,\n  case\n    when PostTypeId = 1 then 'Question'\n    when PostTypeId = 2 then 'Answer'\n  end AS 'Post Type',\n  OwnerUserId as [User Link]\nFROM\n  Posts\nORDER BY\n  Score DESC\n ;","CreationDate":"2012-11-10 15:13:44","validated":true}
{"QuerySetId":84740,"Title":"Answer tag stats per year","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##;\n\nSELECT \n  Tags.TagName,\n  YEAR(Answers.CreationDate) AS Year,\n  MONTH(Answers.CreationDate) AS Month,\n  COUNT(*) as Total\nFROM \n  Posts AS Answers\n  INNER JOIN Posts Questions ON (Answers.ParentId = Questions.Id)\n  INNER JOIN PostTags ON (Questions.Id = PostTags.PostId)\n  INNER JOIN Tags ON (PostTags.TagId = Tags.Id)\nWHERE \n  Answers.OwnerUserId = @UserId AND \n  Answers.PostTypeId = 2\nGROUP BY\n  Tags.TagName,\n  YEAR(Answers.CreationDate),\n  MONTH(Answers.CreationDate)","CreationDate":"2012-11-11 23:57:26","validated":true}
{"QuerySetId":85869,"Title":"Comment - to - post ratio","Description":null,"QueryBody":"SELECT  COUNT(distinct p.id) as 'Posts',\nCOUNT(distinct c.id) as 'Comments',\n(COUNT(distinct c.id)*1.00)\/COUNT(distinct p.id) as 'Comments\/Post'\nFROM Posts p\nLEFT JOIN Comments c\non c.postid = p.id","CreationDate":"2012-11-14 2:40:21","validated":true}
{"QuerySetId":86177,"Title":"highly viewed or highly voted posts that were asked in 2011 and got closed","Description":null,"QueryBody":"SELECT  count (*)\nfrom posts\nwhere (score >= 250 or viewcount >= 150000)\nand closeddate is not null\nand creationdate between '2011-01-01' and '2011-12-31'","CreationDate":"2012-11-17 2:30:52","validated":true}
{"QuerySetId":87006,"Title":"Average Posting Stats per Posting Type","Description":null,"QueryBody":"SELECT \n  PostTypes.Name AS PostType,\n  AVG(Posts.Score) AS AvgScore\nFROM\n  Posts,\n  PostTypes \nWHERE\n  PostTypes.Id = 1\n    AND\n  Posts.ClosedDate IS NULL\n    AND\n  PostTypes.Id = Posts.PostTypeId \nGROUP BY PostTypes.Name","CreationDate":"2012-12-12 20:40:35","validated":true}
{"QuerySetId":87931,"Title":"calculate upvote of the user","Description":null,"QueryBody":"SELECT  v.UserId, vt.Name, COUNT(*)\n   FROM \n     Posts p\n       INNER JOIN Votes v\n         ON v.PostId = p.Id\n       INNER JOIN VoteTypes vt\n         ON v.VoteTypeId = vt.Id\n  WHERE\n     p.OwnerUserId =1553563\n  GROUP BY \n    vt.Name, v.UserId\n  ORDER BY 1,3","CreationDate":"2012-12-05 16:25:36","validated":true}
{"QuerySetId":87944,"Title":"Who are the 1%? (Active Users)","Description":"-- Who are the the 1% (Active Users)","QueryBody":"SELECT  DisplayName, Reputation\nfrom\n  (SELECT NTILE(100) OVER (ORDER BY Reputation DESC) as percentile, \n          DisplayName, Reputation\n    FROM Users\n    WHERE Reputation >= 200) as q\n    where percentile <= ##SELECTTopPercentile?1##","CreationDate":"2012-12-05 18:56:41","validated":true}
{"QuerySetId":87969,"Title":"Reputation of users with 1 question and at least 1 comment","Description":null,"QueryBody":"WITH  singlePostUsers as \n(SELECT \n   owneruserid\nFROM \n      posts p\nGROUP BY\n     owneruserid\nHAVING COUNT(ID) = 1)\n, AndAComment as (\nSELECT DISTINCT\n     u.id,\n     u.reputation\nFROM \n    singlePostUsers spu \n    INNER JOIN posts p\n    on spu.owneruserid = p.owneruserid\n    INNER JOIN users u\n    on spu.owneruserid = u.id\n    INNER JOIN posts a \n    on p.id = a.parentid\n    INNER JOIN Comments c\n    On (c.postID = p.id \n    or c.postID = a.id)\n    and u.id = c.UserID\n       \nWHERE \np.postTypeID = 1)\nSELECT AVG(Reputation) average_rep,\n     SUM(CASE WHEN Reputation < 15 THEN 1 ELSE 0 END) Under15,\n     SUM(CASE WHEN Reputation < 15 THEN 0 ELSE 1 END) Over15\nFROM \n     AndAComment","CreationDate":"2012-12-06 3:20:42","validated":true}
{"QuerySetId":88670,"Title":"Questions that had the Raw tag","Description":null,"QueryBody":"SELECT  * from tags where tagname = 'raw'\nSELECT p.* \nfrom Posts p\nleft join PostTags pt on p.Id = pt.PostId\nleft join Tags t on pt.TagId = t.Id","CreationDate":"2012-12-11 18:30:13","validated":true}
{"QuerySetId":88687,"Title":"Average reputation for users asking questions with java tag","Description":null,"QueryBody":"SELECT  avg(usr.Reputation) from Posts post\njoin Users usr on usr.id=post.OwnerUserId\njoin PostTags pt on pt.PostId=post.id\njoin Tags tag on tag.id=pt.TagId\nwhere {fn NOW()} - post.CreationDate < 30 \n  and post.PostTypeId=1 \n  and post.AnswerCount > 3\n  and tag.TagName='homework'","CreationDate":"2013-02-01 0:32:19","validated":true}
{"QuerySetId":89069,"Title":"Answers for Tridion (Scores and Numbers)","Description":null,"QueryBody":"DECLARE  @tag_id int = (select id from tags where tagname = 'tridion');\n\nselect \n  users.id \"User Link\"\n  ,count(answers.id) as \"Nr\"\n  ,sum(answers.score) as \"Score\"\n  \nfrom users\njoin posts answers on (users.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\nand answers.posttypeid = 2  -- answers only\nand answers.creationDate >  DATEADD(Month, -12, DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) )\ngroup by users.id\norder by Nr desc","CreationDate":"2012-12-15 2:26:45","validated":true}
{"QuerySetId":90001,"Title":"Off Topic Posts By tag","Description":null,"QueryBody":"SELECT  t.tagname, \n       Count(pt.postid)      TagQuestionCount, \n       Count(ph.postid) AS OffTopicCount, \n       CASE Count(ph.postid)\n        WHEN 0 then Null\n        ELSE Cast(Count(ph.postid) AS DECIMAL)  \/ Cast(Count(pt.postid) AS DECIMAL) * 100\n       END ratioClosedOffTopic \nFROM   posttags pt \n       INNER JOIN tags t \n               ON pt.tagid = t.id \n       LEFT JOIN posthistory ph\n              ON ph.postid = pt.postid \n                 AND ph.posthistorytypeid = 10 \n                 AND Cast(ph.comment AS INT) = 2 \nGROUP  BY t.tagname \nHAVING \n      Count(pt.postid)  > 999\nORDER  BY \n       CASE Count(ph.postid)\n        WHEN 0 then Null\n        ELSE Cast(Count(ph.postid) AS DECIMAL) \/ Cast(Count(pt.postid) AS DECIMAL)\n       END \n       DESC","CreationDate":"2012-12-28 3:06:05","validated":true}
{"QuerySetId":90598,"Title":"My answers to questions tagged [r]","Description":"My answers to questions tagged [r]\n","QueryBody":"SELECT \n    q.Id as [Post Link],q.Title, q.Tags, a.Score\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\n   \/*join PostTags on q.Id = PostTags.PostId\n   join Tags on Tags.Id = PostTags.TagId and ... *\/\nwhere\n      a.CommunityOwnedDate is null\n  and a.OwnerUserId = ##UserId##\n  and q.Tags like '%jquery%'\n  and q.Tags NOT like '%javascript%'\norder by a.Score desc","CreationDate":"2015-05-03 11:02:57","validated":true}
{"QuerySetId":91294,"Title":"Accepted answers average score per user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect cast(avg(cast(a.Score as float)) as decimal(20,3)) as average,\ncount(a.Score) as acceptedanswers,\na.OwnerUserId as [User Link],\n(select Reputation from Users where Id=a.OwnerUserId) as rep\nfrom Posts a\ngroup by a.OwnerUserId\nhaving (count(a.Score)>5 or a.OwnerUserId=@UserId)\norder by average desc","CreationDate":"2014-11-13 12:44:15","validated":true}
{"QuerySetId":92171,"Title":"Top Viewed Tags on a Site","Description":null,"QueryBody":"SELECT  TOP 100 t.tagname Tagname, AVG(t.Count) Count, SUM(p.ViewCount) Views\nFROM TAGS t\n  JOIN POSTTAGS pt on pt.TagId=t.Id\n  JOIN Posts p on p.id=pt.PostId\nGROUP BY t.tagname\nORDER BY SUM(p.ViewCount) DESC","CreationDate":"2013-01-22 2:17:39","validated":true}
{"QuerySetId":92788,"Title":"last 100 Python question (gis stack exchange)","Description":null,"QueryBody":"SELECT  TOP 100 p.CreationDate,  p.id as [Post Link]\nFROM Posts p\nJOIN PostTypes ty ON ty.Id = p.PostTypeId\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON t.Id = pt.TagId\nWHERE t.TagName = 'python'\n  AND ty.Name = 'Question'\nORDER BY p.CreationDate DESC","CreationDate":"2013-01-19 16:12:45","validated":true}
{"QuerySetId":93526,"Title":"top ten users in georgia\/tbilisi","Description":null,"QueryBody":"SELECT \nTOP (20) ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%georgia%'\n    OR UPPER(Location) LIKE '%GE'\n    OR UPPER(Location) LIKE 'TBILISI'\n    OR LOWER(Location) LIKE 'tbilisi'\nORDER BY\n    Reputation DESC;","CreationDate":"2013-01-24 18:20:36","validated":true}
{"QuerySetId":93738,"Title":"count of posts closed with reasons, since 2013, by month","Description":null,"QueryBody":"SELECT  year(Posts.ClosedDate) as y, month(Posts.ClosedDate) as m,  cast (year(Posts.ClosedDate) as  varchar(10)) + '\/' + cast(month(Posts.ClosedDate) as varchar(19)) as ym,  count(CONCAT ('http:\/\/programmers.stackexchange.com\/q\/', Posts.Id)) as Questions\nFROM PostHistory\nJOIN Posts ON Posts.Id = PostHistory.PostId\nWHERE Posts.ClosedDate >= '2013-01-01' \n--AND Posts.ClosedDate < '2013-12-01'\nAND PostHistoryTypeId = 10\nAND PostHistory.Comment != 1\ngroup by year(Posts.ClosedDate), month(Posts.ClosedDate)\nORDER BY 1 desc, 2 desc","CreationDate":"2014-01-06 15:26:45","validated":true}
{"QuerySetId":93817,"Title":"Post count, view count, view\/post ratio per day","Description":null,"QueryBody":"DECLARE  @TagName nvarchar (25) = '##TagName##'\n\nSELECT TOP 365 \n   CAST(p.CreationDate AS date) AS pdate,\n   COUNT(*) AS nposts_per_day,\n   SUM(p.ViewCount) AS nviews_per_day,\n   SUM(p.ViewCount)\/COUNT(*) AS view_post_ratio\n   FROM Tags \n   JOIN PostTags AS pt ON Tags.Id = pt.TagId \n   JOIN Posts AS p ON pt.PostId = p.Id\n   WHERE Tags.TagName = @TagName\n   GROUP BY CAST(p.CreationDate AS date)\n   ORDER BY pdate DESC","CreationDate":"2017-02-06 22:43:19","validated":true}
{"QuerySetId":94348,"Title":"Count of suggested edits with a word in the revision comment","Description":null,"QueryBody":"SELECT  *\nFROM SuggestedEdits s, SuggestedEditVotes v\nWHERE s.Comment LIKE '%##pattern##%'\n  AND v.UserId = ##user##\n  AND s.Id = v.SuggestedEditId\nORDER BY s.CreationDate\n\/*\n(\nSELECT\n  'All',\n  COUNT(*)\nFROM SuggestedEdits s\nWHERE s.Comment LIKE '%##pattern##%'\n) UNION (\nSELECT\n  'Voted by me',\n  COUNT(*)\nFROM SuggestedEdits s, SuggestedEditVotes v\nWHERE s.Comment LIKE '%##pattern##%'\n  AND v.UserId = ##user##\n  AND s.Id = v.SuggestedEditId\n)\n*\/","CreationDate":"2013-01-31 6:15:45","validated":true}
{"QuerySetId":95176,"Title":"Users scoring lower than the questions they answer","Description":"Does not count self-answers.\nShows users with at least @MinAnswers answers.\n","QueryBody":"DECLARE  @MinAnswers int = ##MinAnswers##\n\n\nSELECT TOP 100\n  u.Id AS [User Link],\n  count(*) AS NumAnswers,\n  cast(avg(cast((q.Score - a.Score) as float)) as numeric(6,2)) AS AvgVoteDelta\nFROM Posts a\nINNER JOIN Users u ON u.Id = a.OwnerUserId\nINNER JOIN Posts q ON a.ParentId = q.Id\nWHERE \n  (q.OwnerUserId <> u.Id OR q.OwnerUserId IS NULL)   --no self answers\nGROUP BY u.Id\nHAVING count(*) >= @MinAnswers\nORDER BY AvgVoteDelta DESC, NumAnswers DESC","CreationDate":"2013-02-04 11:54:27","validated":true}
{"QuerySetId":95333,"Title":"First Time Posts that are on bounty questions","Description":null,"QueryBody":"SELECT  \n   COUNT( DISTINCT p.id) QuestionWithBounty,\n   COUNT( DISTINCT Answer.id)  BountyAnswers,\n   SUM(CASE WHEN PostsBeforeBounty.Id is null THEN 1 ELSE 0 END) FirstTimePosts\n\nFROM posts P\n  INNER JOIN Votes bStart\n  ON p.id = bStart.PostID\n    AND bStart.VoteTypeID = 8 \n  INNER JOIN Posts Answer\n  ON Answer.ParentID = p.ID\n    and Answer.CreationDate > bStart.CreationDate --Answers after bount\n  LEFT JOIN Posts PostsBeforeBounty\n    ON Answer.OwnerUserId = PostsBeforeBounty.OwnerUserID \n      and Answer.CreationDate > PostsBeforeBounty.CreationDate","CreationDate":"2013-02-04 21:44:58","validated":true}
{"QuerySetId":95335,"Title":"Anonymous feedback to your posts","Description":null,"QueryBody":"SELECT  COUNT(P.Id) VoteCount,\n  VT.Name VoteType,\n  P.Id as [Post Link],\n  P.Score,\n  P.CreationDate,\n  P.LastActivityDate\nFROM PostFeedback PF\nJOIN Posts P ON P.Id = PF.PostId\nJOIN PostHistory PH ON PF.Id = PH.PostID\nJOIN VoteTypes VT ON PF.VoteTypeId = VT.Id\nWHERE PF.IsAnonymous = 1\nAND PH.Id = 15\nGROUP BY P.Id, VT.Id, P.LastActivityDate, P.Score, P.CreationDate, VT.Name\nORDER BY VoteCount DESC, VT.Id DESC","CreationDate":"2015-08-18 20:44:55","validated":true}
{"QuerySetId":95383,"Title":"Anonymous feedback for a certain question and its answers","Description":null,"QueryBody":"SELECT  COUNT(P.Id) VoteCount, VT.Name VoteType, P.Id as [Post Link], P.Id, U.DisplayName, P.Score,\nP.CreationDate, P.LastActivityDate\nFROM PostFeedback PF\nJOIN Posts P ON P.Id = PF.PostId\nJOIN Users U ON U.Id = P.OwnerUserId\nJOIN VoteTypes VT ON PF.VoteTypeId = VT.Id\nWHERE PF.IsAnonymous = 1 AND\n(\nP.Id = ##PostId## OR P.ParentId = ##PostId##\n)\nGROUP BY P.Id, VT.Id, P.LastActivityDate, P.Score, P.CreationDate, VT.Name, U.DisplayName\nORDER BY VoteCount DESC, VT.Id DESC","CreationDate":"2013-02-05 13:26:17","validated":true}
{"QuerySetId":96700,"Title":"Highest Quality Posts: Votes * Post Length","Description":"Top 1000 \"quality\" posts as defined by (votes * post length). Idea taken from: http:\/\/data.stackexchange.com\/stackoverflow\/query\/36092\/","QueryBody":"SELECT  TOP 1000\n    (CASE p.PostTypeId\n        WHEN 1 THEN 'Q'\n        WHEN 2 THEN 'A'\n    END) as [T],\n    p.Id as [Post Link],\n    p.OwnerUserId as [User Link],\n    p.Score as [Score],\n    LEN(p.Body) as [Post Length],\n    (p.Score * LEN(p.Body)) as [Weighted Score]\nFROM\n    Posts p\nWHERE p.PostTypeId = 1 OR p.PostTypeId = 2\nORDER BY\n    [Weighted Score] DESC","CreationDate":"2013-02-10 14:44:08","validated":true}
{"QuerySetId":96927,"Title":"percentage of questions with code","Description":null,"QueryBody":"SELECT  TOP 5000\nBody as bodyWithJava\nFROM POSTS postsWithJava\nINNER JOIN (\nSELECT PostID as PostIDofJava\nFROM PostTags postTags\nWHERE postTags.TagID=(\nSELECT ID as TagIDofJava\nFROM Tags as TagData\nWHERE TagName='java'\n)) PostTagsJava\nON postsWithJava.Id=PostTagsJava.PostIDofJava","CreationDate":"2013-02-11 13:02:16","validated":true}
{"QuerySetId":97471,"Title":"Self answers with high score on bad questions","Description":null,"QueryBody":"SELECT  q.id [Post Link] from posts q\nINNER JOIN posts a\nON q.id =  a.parentid\n   and q.ownerUserId = a.owneruserid\nWHERE\n    q.score < 0\n   and a.score > 5","CreationDate":"2013-02-13 10:46:35","validated":true}
{"QuerySetId":97651,"Title":"Questions with both [android] and [arduino] tags","Description":"Grab all questions with both Android and Arduino tags asked on or after the specified date.","QueryBody":"DECLARE  @AndroidTagId INT = (SELECT Id FROM Tags WHERE TagName = 'android')\nDECLARE @ArduinoTagId INT = (SELECT Id FROM Tags WHERE TagName = 'arduino')\n\nSELECT Id as [Post Link], CreationDate\nFROM Posts\nWHERE \nPostTypeId = 1\nAND EXISTS (SELECT 1 FROM PostTags WHERE PostId = Posts.Id AND TagId = @AndroidTagId)\nAND EXISTS (SELECT 1 FROM PostTags WHERE PostId = Posts.Id AND TagId = @ArduinoTagId)\nAND CreationDate >= '##date##'\nORDER BY CreationDate DESC","CreationDate":"2013-02-14 3:49:33","validated":true}
{"QuerySetId":97777,"Title":"Popular tags with highest average answer score","Description":null,"QueryBody":"SELECT  Tags.TagName AS [Tag Link],\n  COUNT(A.Score) AS answerCount,\n  EXP(SUM(LOG(A.Score+0.00001))\/COUNT(A.Score))*100 AS avg100\nFROM Tags, PostTags, Posts AS Q, Posts AS A\nWHERE Tags.Count >= 1000\n  AND Tags.Id = PostTags.TagId\n  AND PostTags.PostId = Q.Id\n  AND A.ParentId = Q.Id\n  AND A.Score >= 0\nGROUP BY Tags.Id, Tags.TagName\nORDER BY avg100 DESC;","CreationDate":"2015-10-15 14:53:36","validated":true}
{"QuerySetId":98005,"Title":"Tags with highest average answer scores (among tags with at least 1000 questions)","Description":null,"QueryBody":"SELECT \nt.TagName,\nCOUNT(a.Id) AS NumAnswers,\nSUM(a.Score) AS TotalScore,\nAVG(a.Score + 0.0) AS AvgScore\nFROM Posts a\nJOIN Posts q ON a.ParentId = q.Id\nJOIN PostTags pt ON pt.PostId = q.Id\nJOIN Tags t ON t.Id = pt.TagId\nWHERE a.PostTypeId = 2\nGROUP BY t.tagName, t.Id\nHAVING COUNT(a.Id) >= 1000\nORDER BY AvgScore DESC","CreationDate":"2013-02-16 6:13:55","validated":true}
{"QuerySetId":98827,"Title":"Find out how many edits I've made","Description":"including rollbacks","QueryBody":"SELECT  count(Id)\nFROM PostHistory\nWHERE PostHistoryTypeId IN (4,5,6,7,8,9)\n  AND UserId = ##UserID##","CreationDate":"2013-02-21 19:04:39","validated":true}
{"QuerySetId":99348,"Title":"500 lowest scored accepted answers","Description":null,"QueryBody":"SELECT  top 500 q.Id as [Post Link], q.Score\n  from Posts as q\n  where q.ParentId is not null\n  order by q.Score asc","CreationDate":"2013-06-08 21:49:43","validated":true}
{"QuerySetId":101200,"Title":"Find people in the Waterloo area","Description":null,"QueryBody":"SELECT  TOP 150\n   Id as [User Link],\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Kitchener%'\n   OR Location like N'%Waterloo%'\n   \nORDER BY\n   reputation DESC","CreationDate":"2013-03-05 8:44:27","validated":true}
{"QuerySetId":102206,"Title":"Accepted answers that have the lowest score","Description":null,"QueryBody":"SELECT  q.pid as [Post Link], q.max_score, q.min_score, q.n_answers from\n(SELECT p.id  as pid,\n       min(a.score) as min_score,\n       max(a.score) as max_score,\n       max(c.score) as acc_score,\n       count(a.id) as n_answers\nfrom posts p\njoin posts a on a.parentid = p.id\njoin posts c on p.acceptedanswerid = c.id\nwhere c.owneruserid = ##userid:int##\ngroup by p.id\n) as q\nwhere q.acc_score = q.min_score\nand q.acc_score < q.max_score\norder by q.max_score - q.acc_score desc","CreationDate":"2013-03-09 8:10:22","validated":true}
{"QuerySetId":103675,"Title":"Total post score (useful for metas)","Description":null,"QueryBody":"SELECT  (\n  SELECT SUM(p.score * p.PostTypeId * 5)\n  from Posts p\n  where p.OwnerUserId = u.Id\n) as computed_rep, u.Reputation as real_rep, u.DisplayName as alias\nfrom Users u order by computed_rep desc","CreationDate":"2013-06-29 3:25:06","validated":true}
{"QuerySetId":104035,"Title":"Average Score for non-Bounty Questions asked since First Bounty","Description":null,"QueryBody":"SELECT  AVG(p.Score * 1.0) Score\nfrom Posts p\nLEFT JOIN Votes v ON v.PostID = p.ID AND v.VoteTypeID = 8\nWHERE p.PostTypeID=1 AND v.CreationDate IS NULL\n  AND p.CreationDate >= '2009-01-27' and p.CreationDate < '2009-11-08'","CreationDate":"2013-03-20 4:03:57","validated":true}
{"QuerySetId":104121,"Title":"Number of questions for PHP and cURL","Description":null,"QueryBody":"SELECT  Id, Title from Posts where Title like '%php%curl%' or Title like '%php%post%'","CreationDate":"2013-03-20 13:51:59","validated":true}
{"QuerySetId":104435,"Title":"Number of members based on their ages","Description":null,"QueryBody":"SELECT  Age, count(Age) as [Number of members]\nfrom Users\ngroup by Age\norder by count(Age) desc","CreationDate":"2013-03-22 1:25:43","validated":true}
{"QuerySetId":104765,"Title":"what have you tried cleanup - specific user links","Description":null,"QueryBody":"SELECT  TOP 100\n  C.PostID as [Post Link],\n  *\n  \nfrom\n  Comments as C\nwhere\n  C.text like '%what have you tried%'\n  AND LEN( C.text ) < 40\norder by\n  CreationDate DESC","CreationDate":"2013-03-25 2:54:45","validated":true}
{"QuerySetId":105006,"Title":"Tags with the highest percentage of closed questions","Description":null,"QueryBody":"SELECT  TOP 10\n  tag.TagName as [Tag Name],\n  tag.Count as [Deletion Percentage],\n  p.Id as [Post Link]\nFROM Tags tag\n  INNER JOIN Posts p \n  ON \n    p.Tags Like CONCAT(CONCAT('%<', tag.TagName collate SQL_Latin1_General_CP1_CI_AS), '>%') AND\n    p.ClosedDate IS NOT NULL\nGROUP BY p.Id, tag.TagName, tag.Count\nORDER by tag.Count DESC","CreationDate":"2013-03-26 21:28:00","validated":true}
{"QuerySetId":105322,"Title":"Users with most Necromancer Badges","Description":null,"QueryBody":"SELECT  TOP 100 UserId AS [User Link], count(*) AS Badges\nFROM Badges\nWHERE Badges.Name = 'Necromancer'\nGROUP BY UserId\nORDER BY Badges DESC","CreationDate":"2013-09-08 11:53:10","validated":true}
{"QuerySetId":106229,"Title":"cstheory questions per month, top areas compared","Description":"How many questions per month does each area tag get","QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where TagId in \n  (\n    SELECT top ##num## Id from Tags\n    where TagName like '%.%' or \n          TagName='computability' or \n          TagName='Quantum computation'\n    order by Count desc\n  ) and\n  (DATEPART(YYYY, CreationDate) >= ##YYYY## or\n  (DATEPART(YYYY, CreationDate) = ##YYYY## and DATEPART(MM, CreationDate) >= ##MM##))\n) as X\ngroup by TagName, [Month]\norder by [Month] asc, TagName asc","CreationDate":"2013-04-04 23:38:59","validated":true}
{"QuerySetId":106695,"Title":"Answered questions that have at least two zero-score answers","Description":"Questions that can be marked as answered by upvoting one of the available zero-score answers.","QueryBody":"SELECT  q.Id AS [Post Link]\nFROM Posts q \nWHERE q.PostTypeId = 1 \n      AND q.ClosedDate IS NULL\n      AND q.AcceptedAnswerId > 0\n      AND q.AnswerCount > 2\n      AND EXISTS (SELECT a.Id\n                  FROM Posts a\n                  WHERE a.Score = 0\n                        AND a.ParentId = q.Id)\nORDER BY q.CreationDate DESC","CreationDate":"2013-04-05 18:11:52","validated":true}
{"QuerySetId":108188,"Title":"Upvotes per post and per day","Description":"Show the posts that received the most upvotes in one day","QueryBody":"SELECT  TOP 100\n  (CASE p.PostTypeId\n        WHEN 1 THEN 'Q'\n        WHEN 2 THEN 'A'\n    END),\n  v.PostId AS [Post Link],\n  p.OwnerUserId AS \"User Link\",\n  v.CreationDate AS [Date],\n  (DateDiff(second, Min(p.CreationDate), v.CreationDate) + 86400) \/ 86400 AS [Age],\n  Count(*) AS [Upvotes]\nFROM Votes v\nLEFT JOIN Posts p ON p.Id = v.PostId\nWHERE v.VoteTypeId = 2 and p.PostTypeId is not null\nGROUP BY\n    v.PostId,\n    v.CreationDate,\n    p.OwnerUserId,\n    p.PostTypeId\nORDER BY [date] DESC","CreationDate":"2015-03-27 2:19:46","validated":true}
{"QuerySetId":108463,"Title":"Graph of answer quality and number","Description":null,"QueryBody":"SELECT  \n   *,\n   count(*)\nfrom (\n  SELECT \n    p.OwnerUserId as userl, \n    u.Reputation,\n    round(avg(cast(p.Score as real)),2) as [Avg Score], \n    count(*) as [# Questions]\n  from Posts p\n  join Users u on u.Id = p.OwnerUserId\n  where p.posttypeid = 2 and\n    p.communityowneddate is null and\n    p.closeddate is null\n  group by u.Reputation, p.OwnerUserId\n) as X\ngroup by [# Questions] , [Avg Score], Reputation, userl\norder by [Avg Score] desc, [# Questions] desc","CreationDate":"2013-04-17 2:22:46","validated":true}
{"QuerySetId":108575,"Title":"number of posts by tagname","Description":null,"QueryBody":"SELECT  COUNT(Posts.Id),\n  MONTH(Posts.CreationDate),\n  YEAR(Posts.CreationDate),\n  Tags.TagName\nFROM Posts \n  JOIN PostTags ON Posts.id = PostTags.PostId \n  JOIN Tags ON Tags.Id = PostTags.TagId\n  WHERE Tags.TagName = 'mongodb' or Tags.TagName = 'couchbase' or Tags.TagName = 'cassandra' or Tags.TagName = 'hadoop'\n  GROUP BY YEAR(Posts.CreationDate), MONTH(Posts.CreationDate), Tags.TagName","CreationDate":"2013-07-31 0:59:10","validated":true}
{"QuerySetId":108813,"Title":"Do good questions have question marks?","Description":null,"QueryBody":"SELECT  COUNT(*) AS [Count],\n       SUM(Score) as [Sum],\n       SUM(FavoriteCount) as FavoriteCount,\n       CAST(SUM(Score) AS decimal) \/ COUNT(*) AS AverageScore,\n       CAST(SUM(FavoriteCount) AS decimal) \/ COUNT(*) AS AverageFavoriteCount,\n       CASE WHEN BODY LIKE '%?%' OR Title Like '%?%' THEN 1 ELSE 0 END AS QuestionMark\nFROM Posts\nWHERE PostTypeId = 1\nGROUP BY CASE WHEN BODY LIKE '%?%' OR Title Like '%?%' THEN 1 ELSE 0 END","CreationDate":"2013-04-17 14:13:18","validated":true}
{"QuerySetId":109089,"Title":"Top 100 users from Italy","Description":"Lists the top 100 users (ranked by reputation) that are located in Italy according to their profile information.\n\nBased on http:\/\/data.stackexchange.com\/stackoverflow\/s\/1166\/top-100-users-from-vancouver","QueryBody":"SELECT  TOP 1000\n   Id as [User Link],\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like 'india' \nORDER BY\n   reputation DESC","CreationDate":"2013-04-18 21:46:31","validated":true}
{"QuerySetId":110013,"Title":"Posts (Questions and Answers) based on a given tag WITH Answer count and Comment Count","Description":null,"QueryBody":"SELECT  DATENAME(yyyy, p.LastActivityDate) AS YEAR,\n       DATENAME(mm, p.LastActivityDate) AS MONTH,\n       MONTH(p.LastActivityDate) AS ACTIVE_MONTH_DAY,\n       count(*) AS TOTAL_POSTS,\n       p.AnswerCount as ANSWER_COUNT,\n       p.CommentCOunt as COMMENT_COUNT\nfrom Posts p, PostTags ptags, Tags t, PostTypes ptypes \nwhere p.posttypeid = ptypes.id\n  and ptypes.id in (1,2)\n  and p.id = ptags.postid \n  and ptags.tagid = t.id \n  and t.tagname = '##TagName##'\ngroup by DATENAME(yyyy, p.LastActivityDate), MONTH(p.LastActivityDate), DATENAME(mm, p.LastActivityDate), p.AnswerCount, p.CommentCount\norder by DATENAME(yyyy, p.LastActivityDate) ASC, MONTH(p.LastActivityDate) ASC, DATENAME(mm, p.LastActivityDate) ASC","CreationDate":"2013-04-24 17:40:05","validated":true}
{"QuerySetId":110166,"Title":"Most Common Tags with Node.js","Description":null,"QueryBody":"SELECT \n   ot.TagName,\n   Count(*) c\n      \nFROM postTags pt  \n     INNER JOIN tags t\n     ON pt.TagId = t.Id\n     INNER JOIN PostTags opt\n     ON pt.PostID = opt.PostID\n        and pt.TagID <> opt.TagId\n     INNER JOIN Tags ot\n     ON opt.TagID = ot.ID\n     \nWHERE \n  t.tagName = 'node.js'\nGROUP BY\n  ot.TagName\nORDER BY \ncount(*) desc","CreationDate":"2013-04-25 18:40:31","validated":true}
{"QuerySetId":111126,"Title":"Answers who's question is tagged 'regex' and is likely just a new regex","Description":null,"QueryBody":"SELECT \n  a.Id as [Post Link],\n  a.Score as [Answer Score],\n  LEN(a.Body) as [Answer Length],\n  a.Body as [Answer Body]\nFROM Posts a\nINNER JOIN Posts q \n  ON q.Id = a.ParentId\nWHERE\n  a.PostTypeId = 2 AND\n  q.Tags LIKE '%<regex>%' AND\n  (\n    a.Body LIKE '<pre><code>%' OR\n    a.Body LIKE '<p><code>%'\n  ) AND\n  LEN(a.Body) <= 100\nGROUP BY\n  a.Id, a.Score, a.Body\nORDER BY\n  a.Score DESC,\n  LEN(a.Body) ASC","CreationDate":"2013-05-01 20:32:20","validated":true}
{"QuerySetId":111181,"Title":"Questions posted with top 10 most answer counts given a tag and the questions' duration","Description":null,"QueryBody":"SELECT   TOP 10 p1.title AS \"Question Title\",\n          'http:\/\/www.stackoverflow.com\/questions\/' + CAST(p1.id AS VARCHAR) AS \"URL\",\n          p1.AnswerCount AS \"Number of Answers\"\n    from  Posts p1, PostTags ptags1, Tags t1, PostTypes ptypes1 \n   where  p1.posttypeid = ptypes1.id\n     and  ptypes1.id = 1\n     and  p1.id = ptags1.postid \n     and  ptags1.tagid = t1.id \n     and  t1.tagname = '##TagName##'\n     and  p1.CreationDate >= '##startdate##'\n     and  p1.CreationDate <= '##enddate##'\norder by  \"Number of Answers\" DESC","CreationDate":"2013-05-02 1:17:17","validated":true}
{"QuerySetId":111447,"Title":"Highest Voted Comments on Questions","Description":null,"QueryBody":"SELECT  TOP 100\n  c.Score, c.Text, c.Id as [Comment Link] \nFROM Comments c\nINNER JOIN Posts q ON\n  q.Id = c.PostId\nWHERE\n  q.PostTypeId = 1\nGROUP BY\n  c.Score, c.Text, c.Id\nORDER BY c.Score DESC","CreationDate":"2013-05-03 4:28:53","validated":true}
{"QuerySetId":112219,"Title":"Pundit badge: How many of my comments have a score of 5 or more?","Description":"Shows the number of comments with a score of 5 or more and the percentages of all comments.","QueryBody":"DECLARE  @UserId int = ##UserId##\n DECLARE @MinScore int = 5\n\n  SELECT COUNT(CASE WHEN\n                 Score >= @MinScore THEN 1\n                                    ELSE 0\n               END) [Count],\n         (COUNT(CASE WHEN\n                  Score >= @MinScore THEN 1\n                                     ELSE 0\n                END) * 100 \/ COUNT(*)) [Percentage of all]\n    FROM Comments\n   WHERE UserId = @UserId","CreationDate":"2013-05-05 14:24:02","validated":true}
{"QuerySetId":112437,"Title":"Individual user who answered the most of all question posts given the tag and answer post duration","Description":null,"QueryBody":"SELECT    Top 1 u2.displayname,\n         count(*) AS \"ANSWERS\"\n  from   Posts p2, Users u2,\n         (SELECT  p1.id\n            from  Posts p1, PostTypes ptypes1, PostTags ptags1, Tags t1\n           where  p1.posttypeid = ptypes1.id\n             and  ptypes1.id = 1\n             and  p1.id = ptags1.postid\n             and  ptags1.tagid = t1.id\n             and  t1.tagname = '##TagName##'\n         ) AS q2\nwhere    p2.parentid = q2.id\n  and    p2.owneruserid = u2.id\n  and    p2.CreationDate >= '##startdate##'\n  and    p2.CreationDate <= '##enddate##'\ngroup by u2.displayname\norder by ANSWERS DESC","CreationDate":"2013-05-06 18:13:12","validated":true}
{"QuerySetId":112457,"Title":"Top 10 users who answered the most of all question posts given a specific tag and answer duration","Description":null,"QueryBody":"SELECT    Top 10 u2.displayname,\n         count(*) AS \"ANSWERS\"\n  from   Posts p2, Users u2,\n         (SELECT  p1.id\n            from  Posts p1, PostTypes ptypes1, PostTags ptags1, Tags t1\n           where  p1.posttypeid = ptypes1.id\n             and  ptypes1.id = 1\n             and  p1.id = ptags1.postid\n             and  ptags1.tagid = t1.id\n             and  t1.tagname = '##TagName##'\n         ) AS q2\nwhere    p2.parentid = q2.id\n  and    p2.owneruserid = u2.id\n  and    p2.CreationDate >= '##startdate##'\n  and    p2.CreationDate <= '##enddate##'\ngroup by u2.displayname\norder by ANSWERS DESC","CreationDate":"2013-05-06 19:50:18","validated":true}
{"QuerySetId":112755,"Title":"Top 100 posts of the last 2 weeks by FavoriteCount","Description":null,"QueryBody":"SELECT  TOP 100 p.id [Post Link], p.Tags, p.CreationDate, p.Score, p.ViewCount,p.FavoriteCount, v.UpVote, v.DownVote, p.AnswerCount FROM\n(SELECT Votes.PostID, UpVote = sum(case when VoteTypeId = 2 then 1 else 0 end), DownVote = sum(case when VoteTypeId = 3 then 1 else 0 end) FROM Votes WHERE VoteTypeId in (2,3) GROUP BY PostId) v\nJOIN Posts p on v.PostID = p.id\nWHERE p.PostTypeId = 1 AND p.CreationDate >= DATEADD(day, -14, GETDATE())\nORDER BY v.UpVote DESC","CreationDate":"2013-05-07 20:00:00","validated":true}
{"QuerySetId":113234,"Title":"Collelation of niche topics and good unanswered questions","Description":"In this case, a \"useful, unanswered question\" refers to an unanswered question with a score of 1 or more, at least one favorite, and that is not closed.  This query looks at the least common tags of each of those questions.  The point is to examine the correlation between niche topics (determined by the least common tags) and unanswered questions which seems to be helpful.  In the results, \"Count\" refers to the number of times the specified tag is the least common tag in a useful, unanswered question; \"TagCount\" refers to the total number of all questions which reference the tag; \"%\" is the percentage of times the tag occurs as the least common tag of a useful, unanswered question.","QueryBody":"WITH  GUA as (  \n  select\n    p.Id as PostId,\n    min(t.count) as MinTagCount,\n    t.Id as TagId\n  from Posts as p\n  join PostTags as pt on p.Id = pt.PostId\n  join Tags as t on pt.TagId = t.id\n  where\n    p.PostTypeId = 1\n    and p.ClosedDate is null\n    and p.Score > 0\n    and p.AnswerCount = 0\n    and FavoriteCount > 0\n    \n    group by p.id, t.id),\n\nASDF as (\n  select\n    PostId,\n    TagId,\n    t.TagName,\n    Count\n  from GUA\n\njoin Tags as t on GUA.TagId = t.id and GUA.MinTagCount = t.Count\n)\n\nselect\n  TagId,\n  TagName,\n  Count(TagId) as [Count],\n  Min(Count) as TagCount,\n  round(convert(decimal,Count(TagId)) \/ convert(decimal,Min(Count)),3) as [%]\nfrom ASDF\n\ngroup by TagId, TagName, Count\n\norder by [%] desc, [count] desc, TagName asc","CreationDate":"2013-05-09 20:47:33","validated":true}
{"QuerySetId":113603,"Title":"Posts edited after your comment","Description":null,"QueryBody":"SELECT  p.LastEditDate as [Edit Date], p.Id AS [Post Link], c.Text AS Comment FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE c.UserId=##UserId## AND c.CreationDate < p.LastEditDate \nORDER BY p.LastEditDate DESC","CreationDate":"2013-05-19 4:21:50","validated":true}
{"QuerySetId":113960,"Title":"Top 100 users by min(questions, answers)","Description":null,"QueryBody":"WITH  q_and_as as (\n  select \n    *,\n    case when posttypeid = 1 then 1 else null end as isq,\n    case when posttypeid = 2 then 1 else null end as isa\n  from posts\n  where posttypeid = 1 or posttypeid = 2\n),\n\nuser_posts as (select \n  owneruserid,\n  owneruserid as [User Link],\n  sum(isq) as questions,\n  sum(isa) as answers\nfrom q_and_as\ngroup by owneruserid\n)\n\nselect top 100 \n[User Link], questions, answers, (questions+answers-abs(answers-questions))\/2 as minimum\nfrom user_posts\norder by minimum desc","CreationDate":"2013-05-13 8:35:00","validated":true}
{"QuerySetId":114416,"Title":"Number of Posts with Greater than 10 comments","Description":null,"QueryBody":"SELECT  p.id, p.creationdate, Count(*) as CommentCount from posts p inner join Comments c on c.PostId = p.Id group by p.id, p.title, p.creationdate, CommentCount having CommentCount > 10 order by commentcount desc","CreationDate":"2019-03-11 21:52:22","validated":true}
{"QuerySetId":114521,"Title":"Search comments on unanswered posts","Description":null,"QueryBody":"SELECT  TOP 500 p.Id AS [Post Link], p.CreationDate, c.Text FROM Posts p\nINNER JOIN Comments c \nON c.PostId = p.Id\nWHERE c.Text LIKE '%homework%' AND p.AnswerCount=0 AND p.Score=0\nORDER BY CreationDate ASC","CreationDate":"2013-05-16 6:44:49","validated":true}
{"QuerySetId":114578,"Title":"Posts applying for tag badges","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 20 TagName, COUNT(*) AS Posts \nFROM Tags\nINNER JOIN PostTags ON PostTags.TagId = Tags.id\nINNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE Posts.OwnerUserId = @UserId\nAND Posts.CommunityOwnedDate IS NULL\nGROUP BY TagName ORDER BY Posts DESC","CreationDate":"2013-05-16 14:32:56","validated":true}
{"QuerySetId":116329,"Title":"Users with Location by Reputation","Description":null,"QueryBody":"SELECT  * FROM Users WHERE Location != '' ORDER BY Reputation DESC","CreationDate":"2013-05-27 0:19:10","validated":true}
{"QuerySetId":116702,"Title":"attempting to measure votiness over time","Description":null,"QueryBody":"SELECT \n    cast(floor(cast(p.creationdate as float)\/7.0)*7 as datetime) as postweek\n    ,sum(case when v.votetypeid = 2 then 1 else 0 end) * 1.0\n    \/ count(distinct postid) as upvotes_per_question\nfrom votes v\ninner join posts p\non\n      p.id = v.postid\n  and floor(cast(v.creationdate as float)\/7.0)\n    = floor(cast(p.creationdate as float)\/7.0) -- vote during first week of post\nwhere p.posttypeid = 1\ngroup by cast(floor(cast(p.creationdate as float)\/7.0)*7 as datetime)\norder by postweek","CreationDate":"2013-05-29 9:58:26","validated":true}
{"QuerySetId":117890,"Title":"Questions of past 30 days that got an accepted answer with negative score","Description":"Excludes self-provided accepts.","QueryBody":"SELECT  q.Id as [Post Link], q.Score as QuestionScore,\n       a.Score as AcceptedAnswerScore\nfrom Posts q\njoin Posts a on a.Id = q.AcceptedAnswerId\nwhere q.PostTypeId = 1\n  and a.Score < 0\n  and q.OwnerUserId <> a.OwnerUserId\n  and datediff(d, q.CreationDate, getdate()) < 30\norder by AcceptedAnswerScore asc","CreationDate":"2013-06-05 3:20:03","validated":true}
{"QuerySetId":119749,"Title":"How many questions are posted with this tag over time?","Description":null,"QueryBody":"SELECT \n  convert(date,\n    convert(varchar, datepart(year, P.CreationDate)) + '-' +\n    convert(varchar, datepart(month, P.CreationDate)) + '-' +\n    '01')  monthYear,\n  count(*) n\nfrom Posts P\n  join PostTags PT on P.Id = PT.PostId\n  join Tags T on PT.TagId = T.Id\nwhere T.TagName = 'java'\ngroup by convert(date,\n    convert(varchar, datepart(year, P.CreationDate)) + '-' +\n    convert(varchar, datepart(month, P.CreationDate)) + '-' +\n    '01')","CreationDate":"2013-06-27 21:35:56","validated":true}
{"QuerySetId":119943,"Title":"Users with most upvotes\/day recently","Description":"Top 20 Users with most upvotes\/day to their answers to\nnon-CW posts in the last 30 days","QueryBody":"SELECT  TOP 30\n  SUM(UpVotes) as upv,\n  SUM(DownVotes) as downv\nFROM Users\nORDER BY upv DESC;","CreationDate":"2017-05-04 16:45:43","validated":true}
{"QuerySetId":120018,"Title":"Days users have been members for","Description":null,"QueryBody":"SELECT \n  Convert(int, LastAccessDate - CreationDate) as days,\n  count(*)\nfrom users\nwhere Convert(int, LastAccessDate - CreationDate) > 5\ngroup by Convert(int, LastAccessDate - CreationDate)\norder by 1","CreationDate":"2013-06-13 21:29:29","validated":true}
{"QuerySetId":120562,"Title":"Questions that were initially tagged \"books\"","Description":null,"QueryBody":"SELECT  distinct Score, PostId as [Post Link] from PostHistory\ninner join Posts on Posts.Id = PostId\nwhere PostHistoryTypeId IN (3, 6) and Text like '%<books>%'\norder by Score desc","CreationDate":"2013-06-17 0:17:16","validated":true}
{"QuerySetId":120564,"Title":"Questions that were once tagged \"books\"","Description":null,"QueryBody":"SELECT  distinct Score, PostId as [Post Link] from PostHistory\ninner join Posts on Posts.Id = PostId\nwhere PostHistoryTypeId IN (3, 6) and Text like '%<##TagName##>%'\norder by Score desc","CreationDate":"2013-06-17 12:13:42","validated":true}
{"QuerySetId":120934,"Title":"Users with lots and lots of answers","Description":null,"QueryBody":"SELECT  a.OwnerUserId as [User Link],\ncount(*) as answer_count\nfrom Posts a\ninner join Posts q on q.Id = a.ParentId\nwhere a.PostTypeId = 2\ngroup by a.OwnerUserId\nhaving count(*) > 5000\norder by answer_count desc","CreationDate":"2013-06-19 23:55:30","validated":true}
{"QuerySetId":121221,"Title":"People who have favorited your posts.","Description":null,"QueryBody":"DECLARE  @UID int = ##UserID##\n\nselect UserId as [User Link], PostId as [Post Link]\nfrom (select PostId, UserId\n      from Votes\n      where VoteTypeId = 5) as lclVotes\ninner join (select Score, Id\n            from Posts\n            where PostTypeId = 1 \n            and OwnerUserId = @UID) as lclPosts\non lclVotes.PostId = lclPosts.Id\norder by lclPosts.Score desc","CreationDate":"2013-08-21 11:27:26","validated":true}
{"QuerySetId":121893,"Title":"users eligible to nominate themselves for moderator elections.","Description":null,"QueryBody":"SELECT  DisplayName, Reputation\n FROM Users\n WHERE Reputation > 300\nORDER BY Reputation DESC","CreationDate":"2013-06-25 21:56:11","validated":true}
{"QuerySetId":122414,"Title":"Search the comments on posts by a user","Description":null,"QueryBody":"SELECT  p.Id as [Post Link], c.Text AS Comment, c.CreationDate FROM Posts p\nINNER JOIN Comments c\nON c.PostId=p.Id\nWHERE p.OwnerUserId=##Id## AND c.Text LIKE '%'+##SearchQuery:string##+'%'\nORDER BY c.CreationDate DESC","CreationDate":"2013-07-01 16:13:34","validated":true}
{"QuerySetId":122940,"Title":"Questions tagged with iOS development related tags","Description":null,"QueryBody":"SELECT  TagName, count(*) frequency\nfrom Posts \njoin PostTags pt on pt.PostId = Posts.Id\njoin Tags t on t.Id = pt.TagId\nWhere upper(TagName) like '%LDAP%'\nor upper(TagName) like '%UNBOUNDID%'\ngroup by tagName\norder  by frequency desc","CreationDate":"2013-08-13 20:12:41","validated":true}
{"QuerySetId":123298,"Title":"My Top-ranked comments > 1 <= 5","Description":"The 50 highest ranked comments with post links\n","QueryBody":"DECLARE  @UserId int = 17034\n\nSELECT TOP 2500\nPostId as [Post Link],\nScore,\nText\nFROM\n    Comments\nWHERE \n    UserId = @UserId and Score >=5 and CreationDate > '1\/1\/2019'\nORDER BY Score","CreationDate":"2020-09-13 17:52:45","validated":true}
{"QuerySetId":123493,"Title":"Top Users From The Philippines","Description":null,"QueryBody":"SELECT  TOP 200\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n      LOWER(Location) LIKE '%philippines%'\n    \nORDER BY\n    Reputation DESC;","CreationDate":"2013-07-09 12:07:37","validated":true}
{"QuerySetId":123944,"Title":"Four major RDBMS systems, ranked by popularity","Description":null,"QueryBody":"SELECT   TagName AS Tags,\n        cnt AS [Questions Tagged],\n        ROUND(100.0 * cnt \/ SUM(cnt) OVER (), 2) AS [Ratio, %]\nFROM    Tags t\nCROSS APPLY\n        (\n        SELECT  COUNT(*) AS cnt\n        FROM    PostTags pt\n        WHERE   pt.TagId = t.id\n        ) q\nWHERE   t.TagName IN ('adminer', 'phpmyadmin', 'navicat', 'sqlyog'\n        , 'sqlbuddy', 'toad', 'dbninja', 'sqlwave', 'chive', 'visualizer'\n        , 'squirrelsql', 'razorsql', 'aqua', 'forge', 'orbaga', 'pgadmin', 'oracle enterprise')\nORDER BY\n        cnt DESC\n       \n\n\n\/*\nDbNinja\nSQLWave\nchive\nDbVisualizer\nSQL Maestro\nSQuirrel SQL\nRazorSQL\nAqua\ndbForge Studio*\/","CreationDate":"2018-08-07 21:41:15","validated":true}
{"QuerySetId":124534,"Title":"Who is the most active in questions of a particular tag?","Description":null,"QueryBody":"SELECT  COUNT(DISTINCT PH.ID)\nFROM POSTS P\n  JOIN POSTTAGS PT ON P.ID = PT.PostId\n  JOIN TAGS T ON PT.TagID = T.ID\n  JOIN POSTHISTORY PH ON P.ID = PH.PostID\n  JOIN USERS U ON PH.UserID = U.ID\nWHERE \n  1 = 1\n  AND T.TagName = ':tag'\nGROUP BY U.ID","CreationDate":"2014-05-05 21:53:24","validated":true}
{"QuerySetId":124882,"Title":"Unanswered zero-score questions by low-rep users","Description":null,"QueryBody":"SELECT  TOP 1000 p.CreationDate, p.Id AS [Post Link], p.Body \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation <= ##ReputationLimit## AND \n      p.PostTypeId = 1 AND \n      p.Score=0 AND\n      DATEDIFF(DAY,p.CreationDate, GETDATE())>25 AND\n      ISNULL(p.AnswerCount,0) = 0 AND \n      ClosedDate IS NULL\nORDER BY p.CreationDate DESC","CreationDate":"2013-12-19 11:28:38","validated":true}
{"QuerySetId":126439,"Title":"Highest bounties on other answers","Description":null,"QueryBody":"SELECT  TOP(50)\n  Votes.UserId AS [User Link], SUM(BountyAmount) AS TotalBounty FROM Votes\n  RIGHT JOIN Posts ON Posts.Id = Votes.PostId\n  WHERE Posts.OwnerUserId != Votes.UserId\n  GROUP BY Votes.UserId\n  ORDER BY TotalBounty DESC;","CreationDate":"2013-07-30 2:06:13","validated":true}
{"QuerySetId":127167,"Title":"Who voted for my question?","Description":null,"QueryBody":"SELECT  u.DisplayName, vt.Name\nFrom\n   Users u inner join \n   (\n    Posts p inner join\n     (\n      Votes v inner join VoteTypes vt on v.VoteTypeId = vt.Id\n     ) \n     on p.Id = v.PostId\n    )\n    on u.Id = v.UserId\nWhere\n   --p.OwnerUserId = 2556654\n   p.Id = 240106\n   \n*\/\n\n\/*SELECT *\nFrom\nPosts p inner join\n(Votes v inner join VoteTypes vt on v.VoteTypeId = vt.Id)\n on p.Id = v.PostId\nWhere\n  p.Id = 10809063\n   --p.OwnerUserId = 2556654 *\/\n   \n   SELECT Name, \n       Count(*) TotalVotes, \n       SUM(CASE WHEN UserId IS NULL THEN 0 ELSE 1 END) TotalWithUserId\nFROM Votes Inner Join VoteTypes ON VoteTypeId = VoteTypes.Id\nGROUP BY Name","CreationDate":"2013-08-03 11:17:15","validated":true}
{"QuerySetId":127561,"Title":"The number of users eligible to review suggested edits vs users eligible to review close votes","Description":null,"QueryBody":"SELECT  \n(SELECT count(*)\n from users\n where reputation >= 2000\n) as se_reviewer,\n(SELECT count(*) as cv_count\n from users\n where reputation >= 3000\n) as cv_reviewer","CreationDate":"2013-08-07 12:47:12","validated":true}
{"QuerySetId":127651,"Title":"Who has favourited my questions","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect a.UserId AS [User Link],\n       b.Id AS [Post Link]\n  from Votes a\n inner join Posts b on a.PostId = b.Id\n where a.VoteTypeId = 5\n   and b.PostTypeId = 1\n   and b.OwnerUserId = @UserId;","CreationDate":"2013-08-07 20:48:26","validated":true}
{"QuerySetId":128440,"Title":"List a user's rejected suggested edits","Description":"List all the rejected suggested edits proposed by a given user.","QueryBody":"SELECT \n  'site:\/\/suggested-edits\/' + Cast(s.Id AS VarChar(20)) + '|' + CASE Len(LTrim(s.Comment)) WHEN 0 THEN '[none]' ELSE s.Comment END AS [Suggested edit],\n  s.PostId AS [Post Link],\n  s.CreationDate AS [Creation date],\n  s.RejectionDate AS [Rejection date]\nFROM SuggestedEdits s\nWHERE s.OwnerUserId = ##UserId##\n  AND s.RejectionDate IS NOT NULL\nORDER BY s.RejectionDate DESC","CreationDate":"2013-08-11 0:12:18","validated":true}
{"QuerySetId":129799,"Title":"Questions with answers that received lots of votes quickly","Description":null,"QueryBody":"SELECT  distinct p3.parentId  [Post Link]\nFROM posts p3, (\n  SELECT COUNT(*) [Limited Score],\n         p.score  [Answer Score],\n         p2.score [Question Score],\n         p.id, -- [Post Link], \n         p.owneruserid -- [User Link]\n  FROM votes v, posts p, posts p2\n  WHERE v.voteTypeId = 2 -- only look at upvotes\n  AND v.postid = p.id\n  AND p.parentid = p2.id\n  AND v.creationDate - p2.creationDate \n      < ##DaysThreshhold:int?14## --only count votes within two weeks of post\n  AND p.parentid NOT IN \n    (1337 -- jokes\n    ,726  -- quotes\n    ,423  -- cartoons\n    ,5115 -- statisticians\n    )\n  GROUP BY p.id, p.owneruserid, p.score, p2.score\n  HAVING COUNT(*) > ##ScoreThreshhold:int?8## -- \"immediate\" score threshhold  \n  --ORDER BY COUNT(*) desc\n  ) z\nWHERE z.id = p3.id","CreationDate":"2013-08-14 7:57:02","validated":true}
{"QuerySetId":130540,"Title":"Possible answers that will fetch you Sportsmanship badge","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect \na.ID as [Post Link], --my answer\na.Score, --my score\n'site:\/\/questions\/' + CAST(b.Id AS nvarchar) as [Other Answer Link], --other answer with atleast one upvote\nb.Score --other answers's sore\n  from Posts a inner join Posts b\n       on a.ParentId = b.ParentId and a.Id <> b.Id\n where a.OwnerUserId = @UserId\n   and a.PostTypeId = 2\n   and a.Score > 0\n   and b.ParentId <> @UserId\n   and b.PostTypeId = 2\n   and exists (select 1 from Votes c\n                where c.PostId = b.Id\n                and c.VoteTypeId = 2)\n order by a.ParentId;","CreationDate":"2013-08-16 15:40:50","validated":true}
{"QuerySetId":133094,"Title":"Top Stack Overflow users from Belgium","Description":null,"QueryBody":"SELECT  Top 100 Id, DisplayName, Reputation, Location From Users Where Location Like '%Belgium%' Order By Reputation Desc","CreationDate":"2014-11-25 23:24:39","validated":true}
{"QuerySetId":133278,"Title":"Feedback on my Posts from Anonymous users","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect b.Id as [Post Link],\n       c.Name PostType, \n       b.Score PostScore,\n       count(case when a. VoteTypeId = 2 then 1 end) Helpful,\n       count(case when a. VoteTypeId = 3 then 1 end) Unhelpful\n  from PostFeedback a inner join Posts b on a.PostId = b.Id\n                      inner join PostTypes c on b.PostTypeId = c.Id\n where b.OwnerUserId = @UserId\n group by b.Id , b.Score, c.Name ;","CreationDate":"2013-08-29 10:18:01","validated":true}
{"QuerySetId":134163,"Title":"Top 200 Users with highest Reputation per Day","Description":null,"QueryBody":"WITH  x(Rep, CreationDate, LastPostedDate, Id) as(\n select a.Reputation,\n        a.CreationDate,\n        max(b.CreationDate),\n        a.Id\n  from Users a, Posts b\n where b.OwnerUserId = a.Id\n group by a.Reputation,a.CreationDate,a.Id\n )\nselect top 200 Rep,\n       round(cast(Rep as float)\/DATEDIFF(dd,CreationDate,LastPostedDate),1) RepPerDay,\n       DATEDIFF(dd,CreationDate,LastPostedDate) Days_Active,\n       Id as [User Link]\n  from x\n where DATEDIFF(dd,CreationDate,LastPostedDate) > 30\n order by RepPerDay desc;","CreationDate":"2014-12-09 10:55:01","validated":true}
{"QuerySetId":134491,"Title":"Posts grouped by time of the day","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect cast(DATEPART(HOUR,CreationDate) as varchar)\n      +'-'\n      +cast(DATEPART(HOUR,CreationDate) + 1 as varchar)\n      +' UTC' time_of_the_day,\n      cast(DATEPART(HOUR,CreationDate) + 5.5 as varchar)\n      +'-'\n      +cast(DATEPART(HOUR,CreationDate) + 6.5 as varchar)\n      +' IST' time_of_the_day_ist,\n      count(1) no_of_posts\n  from Posts\n where OwnerUserId = @UserId\n group by DATEPART(HOUR,CreationDate);","CreationDate":"2013-09-16 9:06:09","validated":true}
{"QuerySetId":136377,"Title":"Top posts in a week","Description":null,"QueryBody":"SELECT  TOP 20 \n    Id as [Post Link],\n    Title, Score\nFROM Posts\nWHERE \n    Posts.CreationDate > GETDATE() - 7\nORDER BY Score DESC;","CreationDate":"2013-09-09 20:57:52","validated":true}
{"QuerySetId":137129,"Title":"Time between a User Registeration and First Post","Description":null,"QueryBody":"SELECT  min(a.UserId) as UserId,min(a.RegisterdDate) as RegisteredDate\n,min(a.FirstQuestion) as FirstQuestion from \n(SELECT a.Id as UserId,a.CreationDate as RegisterdDate, b.CreationDate\nas FirstQuestion from Users a Join Posts b on a.Id=b.OwnerUserId \nwhere b.PostTypeId=1) a group by a.UserId order by a.UserId","CreationDate":"2013-09-13 11:08:29","validated":true}
{"QuerySetId":137542,"Title":"Most viewed question in a given tag per year","Description":null,"QueryBody":"SELECT  top ##NumberOfYears## Year(p.CreationDate) as Year, \n       p.Id as [Post Link], \n       p.ViewCount\nfrom Posts p\ninner join PostTags pt ON p.Id = pt.PostId\ninner join Tags t ON t.Id = pt.TagId\nwhere p.PostTypeId = 1\nand t.TagName = '##TagName##'\ngroup by Year(p.CreationDate), p.Id, p.ViewCount\norder by row_number() over (\n  partition by Year(p.CreationDate)\n  order by p.ViewCount desc\n)","CreationDate":"2013-09-17 2:48:42","validated":true}
{"QuerySetId":138270,"Title":"What is the view count of my questions?","Description":null,"QueryBody":"SELECT  * FROM PostTypes\n\nSELECT\np2.ViewCount,\np.Score\nFROM Posts p JOIN Posts p2 ON p.Id = p2.Id \nWHERE p.PostTypeId = 2 AND p.OwnerUserId = ##userid##\nORDER BY ViewCount DESC","CreationDate":"2013-10-03 19:45:27","validated":true}
{"QuerySetId":139267,"Title":"Top Android Users in Bulgaria","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%barcelona%'\n       AND  TagName = 'android'\n  GROUP BY u.id, TagName\n\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2013-09-30 20:37:07","validated":true}
{"QuerySetId":139329,"Title":"Percentage of Answers that have been accepted","Description":null,"QueryBody":"WITH  0 accepted answers as blanks\n\nSELECT\nu.Displayname AS Name, \nCOUNT(*) AS TotalAns,\nAccAns,\nROUND(((AccAns+0.0) \/ COUNT(*)+0.0),2) AS PercAcc,\nu.Reputation AS Rep,\na.OwnerUserId\nFROM Posts AS a \n  JOIN Users AS u ON a.OwnerUserId = u.Id\n  LEFT JOIN \n      (\n       SELECT COUNT(*) AS AccAns, t.OwnerUserId\n       FROM Posts AS t\n       WHERE t.Id IN (SELECT AcceptedAnswerId FROM Posts)\n       GROUP BY t.OwnerUserId\n      ) AS t2 ON t2.OwnerUserId=a.OwnerUserId\nWHERE PostTypeID = 2\nGROUP BY a.OwnerUserID, u.Displayname, u.Reputation, AccAns\nORDER BY Rep DESC","CreationDate":"2013-09-27 20:32:13","validated":true}
{"QuerySetId":141761,"Title":"Top 100 most economical posts (votes \/ characters)","Description":null,"QueryBody":"SELECT  TOP 100\nId as [Post Link],\nlen(body) AS Length,\nScore,\n(Score \/ CAST(len(body) AS DECIMAL (9,2))) AS Economy\nFROM posts p\nWHERE p.OwnerUserId = ##UserId##\nORDER BY Economy DESC","CreationDate":"2013-10-09 12:41:20","validated":true}
{"QuerySetId":143257,"Title":"The most valued post by tag","Description":"Enter the tag which you are interested in\n","QueryBody":"SELECT  TOP 50 p.id as [Title], [Body], Tags, score\nSELECT count(*)\nFROM posts p\nWHERE tags LIKE '<' + ##tag:string## + '>'\n--ORDER by p.score DESC","CreationDate":"2014-05-12 21:14:03","validated":true}
{"QuerySetId":144564,"Title":"How many comments are hidden","Description":null,"QueryBody":"WITH  hidden_comments as(\n     select case \n              when count(*) < 5 then 0\n              else Count(*) - 5\n            end as hidden\n     from comments\n     group by PostId\n)\n\nselect sum(hidden) from hidden_comments;","CreationDate":"2013-10-26 7:44:57","validated":true}
{"QuerySetId":144580,"Title":"find tags with tag dot tag not dot","Description":null,"QueryBody":"SELECT  t.tagname , t2.tagname\nfrom tags t\n, tags t2\nwhere t.tagname = replace(t2.tagname, '.', '')\nand t.id <> t2.id","CreationDate":"2013-10-26 14:53:48","validated":true}
{"QuerySetId":144638,"Title":"Posts by @userId since @startDate","Description":null,"QueryBody":"DECLARE  @userId int = ##userId##;\nDECLARE @startDate datetime = ##startDate##;\n\nselect t.Name, count(*)\nfrom Posts p join PostTypes t on p.PostTypeId = t.Id\nwhere OwnerUserId = @userId\nand CreationDate >= @startDate\ngroup by t.Name;","CreationDate":"2013-10-27 3:42:29","validated":true}
{"QuerySetId":144706,"Title":"my questions with an answer but none accepted","Description":null,"QueryBody":"WITH out an accepted answer WITH at least one answer that meets the minimum answer score\n\n\n\nWITH Questions as (\n\nSelect \n      a.id ,\n      a.Score,\n      RANK() OVER(PARTITION BY q.id ORDER BY a.score desc) rk\nFrom \n       posts q\n       INNER JOIN posts a\n       ON q.id = a.ParentId\n\nWhere q.OwnerUserID = ##UserId##\n      And q.acceptedanswerid is null\n      And a.Score >= ##MinAnswerScore:Int?0##\n  )\nSelect \n  id [Post Link],\n  Score\nFrom Questions\nWhere\n   rk = 1","CreationDate":"2013-10-30 1:10:36","validated":true}
{"QuerySetId":144725,"Title":"Number of users posting in homework","Description":null,"QueryBody":"SELECT  [Month], \n       sum(1) ActiveUsers\n   \nfrom\n(\n\nSELECT Z.[Month], count(Z.ouid) cnt, Z.ouid as [User Link] \nfrom(\nSELECT CAST(\n      cast(DATEPART(YYYY, Y.CreationDate) as varchar) + '-' + cast(DATEPART(MM, Y.CreationDate) as varchar) + '-01'\n      as datetime) [Month], ouid\n     \n  from (\n   SELECT p1.creationdate  CreationDate ,p1.owneruserid  ouid from posts p1\n      inner join posts p2  on p1.parentid=p2.id \n      where p1.posttypeid=2 and \n      (p2.tags LIKE '%homework%') and\n      p1.closeddate is null\ngroup by p1.owneruserid, p1.creationdate\n  ) Y group by ouid, CreationDate\n  \n) Z group by Z.ouid,Z.[Month]\n\n) as X where X.cnt>##Threshhold?2##\ngroup by [Month]\norder by [Month] asc","CreationDate":"2013-10-27 22:54:20","validated":true}
{"QuerySetId":146671,"Title":"Most popular questions one has answered to.","Description":"This is to know what are the most popular questions you have answered to. It also computes the percentage of people who has viewed the question that have upvoted your answer.","QueryBody":"DECLARE  @UserId int = ##UserId##;\n\n\nselect \n  answer.ParentID as [Post Link],\n  answer.Score as Score,\n  question.Score as \"Question score\",\n  question.ViewCount as \"Question views\",\n  SUBSTRING(\n    CONVERT(\n      varchar(10), \n      convert(int,100000.0 * answer.Score \/ question.ViewCount)\/1000.0\n      ),\n    0, 6) + '%' as Perct,\n  question.FavoriteCount as \"Favorite count\",\n  (case\n    when answer.Id = question.AcceptedAnswerId Then 1\n    else 0\n    end) as Accepted\nfrom\n  Posts as answer\ninner\n  join \n    Posts as question\n  on\n    question.Id = answer.ParentID\nwhere\n  answer.ownerUserId = @UserId\nOrder by\n  question.ViewCount DESC","CreationDate":"2013-11-08 0:25:30","validated":true}
{"QuerySetId":147065,"Title":"Number of answers a user has for a specific tag","Description":"Load all posts a certain user upvoted and filter by tag (tag1)","QueryBody":"SELECT  Count(*)\nFROM Users u\n   JOIN Posts p ON p.owneruserid = u.id\n   JOIN Posts q ON q.Id = p.ParentId\n   JOIN PostTags pt ON pt.PostId = q.Id\n   JOIN Tags t  ON t.Id = pt.TagId\nWHERE u.Id = ##UserId## AND p.postTypeId = 2 AND\n    t.TagName IN (##Tag1:string##)","CreationDate":"2013-11-09 0:59:57","validated":true}
{"QuerySetId":148091,"Title":"Average comment weight for posts.","Description":null,"QueryBody":"DECLARE  @weight_threshold int = 10;\nDECLARE @score_cap int = 10;\nDECLARE @min_len int = 15;\nDECLARE @len_step int = 15;\nDECLARE @len_cap int = 9;\nDECLARE @age_cap int = 10;\n\nwith comment_weight as (\nselect Score, Id, UserId, Creationdate, \n       case \n           when score is null then 0\n           when score < @score_cap then score\n           else @score_cap\n       end score_weight,\n       case\n           when (len(Text) - @min_len)\/@len_step < @len_cap \n                then (len(Text) - @min_len)\/@len_step\n           else @len_cap\n       end length_weight\nfrom Comments\nwhere PostId in (##PostIds##)\n)\n\nselect avg(score_weight + length_weight + 0.0)\nfrom comment_weight;","CreationDate":"2013-11-15 22:08:33","validated":true}
{"QuerySetId":148238,"Title":"View questions sorted by answers count","Description":null,"QueryBody":"SELECT  Top 100 p1.Id As [Post Link], Count(p2.Id) As AnswerCount\nFrom Posts p1 Inner Join Posts p2 On p2.ParentId=p1.Id\nGroup By p1.Id\nOrder By AnswerCount Desc","CreationDate":"2013-11-17 18:09:17","validated":true}
{"QuerySetId":149968,"Title":"See the CreationDate of the most recent Vote record per VoteTypeId.","Description":null,"QueryBody":"WITH  summary AS (\n  SELECT\n    VoteTypeId,\n    CreationDate,\n    ROW_NUMBER() OVER(PARTITION BY VoteTypeId ORDER BY CreationDate DESC) AS r\n  from\n    votes\n)\nselect\n  VoteTypeId,\n  CreationDate\nfrom summary\nwhere r = 1\norder by VoteTypeId","CreationDate":"2013-11-25 4:22:58","validated":true}
{"QuerySetId":150892,"Title":"Display all questions of a given user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT Q.Title AS Title, Q.Score AS QScore, Q.Body AS Question, A.Score AS AScore, A.Body AS Answer\nFROM Posts Q, Posts A\nWHERE A.OwnerUserId = @UserId AND Q.Id=A.ParentId","CreationDate":"2020-01-17 15:31:19","validated":true}
{"QuerySetId":151573,"Title":"Posts with Favorites and 4 Delete Votes this Month","Description":null,"QueryBody":"SELECT  V.PostId, P.OwnerUserId as [User Link], P.Title, P.Body\nFROM VOTES V, Posts P\nWHERE V.VoteTypeId = 10\nAND DATEDIFF(month, V.CreationDate, GETDATE() ) < 1\nAND P.Id = V.PostId\nAND P.FavoriteCount is not NULL\nAND (SELECT Count(V2.PostId) FROM VOTES V2 WHERE V.VoteTypeId = 10 AND V2.PostId = P.Id) = 4 \nGROUP BY V.PostId, P.OwnerUserId, P.Title, P.Body","CreationDate":"2017-12-08 7:23:27","validated":true}
{"QuerySetId":151943,"Title":"Top users based on the number of 0-score answers","Description":null,"QueryBody":"SELECT  DISTINCT OwnerUserId AS [User Link], COUNT (Id) AS [Answers Count] FROM Posts\nWHERE PostTypeId = 1 AND Score = 0\nGROUP BY OwnerUserId\nORDER BY 2 DESC","CreationDate":"2013-12-05 21:25:52","validated":true}
{"QuerySetId":152453,"Title":"Questions views over the years","Description":null,"QueryBody":"SELECT  year(creationdate) as [year], \nsum(cast(viewcount as bigint)) \/ count(id) as [average views]\nfrom posts\ngroup by year(creationdate)","CreationDate":"2018-06-20 21:06:17","validated":true}
{"QuerySetId":152555,"Title":"Top Stackoverflow tags related to Java and SSH","Description":null,"QueryBody":"SELECT  t.TagName, COUNT(*) AS count\nFROM PostTags AS pt, Tags AS t,\n  PostTags AS ptjava, PostTags AS ptssh\nWHERE pt.TagId = t.Id\nAND pt.PostId = ptjava.PostId\nAND ptjava.PostId = ptssh.PostId\nAND ptjava.TagId = (\n  SELECT Id FROM Tags\n  WHERE lower(TagName) = 'java')\nAND ptssh.TagId = (\n  SELECT Id FROM Tags\n  WHERE lower(TagName) = 'ssh')\nGROUP BY t.TagName\nORDER BY count DESC;","CreationDate":"2013-12-09 11:17:18","validated":true}
{"QuerySetId":152569,"Title":"List of Users in a given location fragment sorted location","Description":"This query lists all users in a given location sorted by location.\n","QueryBody":"DECLARE  @location varchar = ##location##\n-- select  Id as [User Link], location, reputation\n\nselect Id as [User Link], location, reputation\n\nfrom users\n\n--where UPPER(LEFT(location,5)) LIKE UPPER('%##location##%') and \nWHERE UPPER(LEFT(location,5)) = 'INDIA' \n      and Reputation >= ##minimumReputation##\n\n--order by reputation desc\norder by location asc","CreationDate":"2013-12-13 4:58:53","validated":true}
{"QuerySetId":152697,"Title":"Reputation List: Choose a location","Description":"List of users by reputation score by location.","QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    Location,\n    Reputation,\n    LastAccessDate,\n    --WebsiteUrl as \"Website URL\",\n    Age\n    \nFROM\n    Users\n    \nWHERE\n\n  LEN(Location) > 1  and\n  \n  -- for a case-sensitive search\n  --Location LIKE '%##Location##%' and\n  \n  -- for a looser search\n  LOWER(Location) LIKE lower('%##Location##%')\n  \n--  and  Reputation >= ##minimumReputation##\n    \n--ORDER BY Reputation DESC\n--ORDER BY LastAccessDate DESC\nORDER BY Location ASC","CreationDate":"2013-12-13 16:59:29","validated":true}
{"QuerySetId":153001,"Title":"Questioner Never Returned To See","Description":null,"QueryBody":"SELECT  top(100) Posts.Id, Posts.CreationDate, Users.Id, Users.LastAccessDate,  Posts.CreationDate - Users.LastAccessDate as TimeUnits\nFROM Posts JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE Posts.PostTypeId = 1 and Posts.CreationDate - Users.LastAccessDate < 60\nORDER BY Users.LastAccessDate","CreationDate":"2013-12-11 19:54:33","validated":true}
{"QuerySetId":153568,"Title":"User List: Top N - Philippines - with false positive exclusion","Description":"List of users in the Philippines.","QueryBody":"SELECT    RankNo, \n         [User Link], \n         Reputation, \n         Location\n\nFROM\n         (\n            SELECT Id [User Link], Reputation, Location,\n                   DENSE_RANK() OVER (ORDER BY Reputation DESC) RankNo\n            FROM   Users\n            WHERE \n              (\n               lower(Location) LIKE '%philippines%'\n               \n               --Location LIKE '%##Location##%'\n               \n               --\n               OR lower(Location) LIKE 'baguio city'\n              \n               )   \n                  \n            ) derivedtable\n\nWHERE   LEN(Location) > 1  and  RankNo <= ##MaximumRankNo## \n\n--ORDER    BY RankNo\nORDER    BY location","CreationDate":"2013-12-14 5:14:20","validated":true}
{"QuerySetId":153635,"Title":"Posts that link to other sites","Description":null,"QueryBody":"SELECT  p.ID, p.PostTypeId, p.Score from Posts p where p.Score > 1 and p.PostTypeId = 1 and  p.Body LIKE '%judaism%' ;","CreationDate":"2015-02-10 11:05:01","validated":true}
{"QuerySetId":153870,"Title":"User List: Highest downvotes per day ratio","Description":"from http:\/\/data.stackexchange.com\/stackoverflow\/query\/13007\/top-100-users-having-highest-votes-per-day-ratio\nExcludes community user.","QueryBody":"SELECT  top ##Top##\n     id [User Link]\n     , datediff(dd, creationdate, GETDATE() )\"Days\"\n     , downvotes\n     , round(cast(nullif(downvotes, 0)as float) \/ datediff(dd, creationdate, GETDATE()),2)  \"DownVotes\/Day Ratio\"\nfrom users\nwhere  id <> -1\nand  downvotes > ##MinDownVotes:int?100##\norder by \"DownVotes\/Day Ratio\" desc","CreationDate":"2014-01-12 23:16:53","validated":true}
{"QuerySetId":153874,"Title":"User List: UpVotes and percentage","Description":null,"QueryBody":"SELECT  TOP ##MaxNumUsers##\n  \n  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [# by Rep],\n  Id as [User Link],\n  ROW_NUMBER() OVER(ORDER BY UpVotes DESC) AS [# by Up Votes], \n  \n  UpVotes as [Up Votes],\n  DownVotes [Down Votes], -- AS is optional\n  UpVotes - DownVotes as [Net Votes],\n  \n  ROUND((100.0 * UpVotes \/ (UpVotes + DownVotes) ), 2) as [Up Votes PCT]\n    \n  FROM Users\n  WHERE  UpVotes > ##UpVotesGreaterThan:int?3999##\n   and DownVotes >= ##MinDownVotes:int?0##\n  \n  ORDER BY [Up Votes PCT] DESC, [Net Votes] DESC\n  \n  -- Alternate ordering\n  --ORDER BY [Net Votes] DESC, [Up Votes PCT] DESC","CreationDate":"2014-01-07 9:36:03","validated":true}
{"QuerySetId":153876,"Title":"User List: UpVotes by percentage","Description":null,"QueryBody":"SELECT  Top 300\n    Id as [User Link],\n    Reputation,\n    UpVotes,\n    DownVotes,\n    ROUND(CAST(UpVotes AS float) \/ (UpVotes + DownVotes) * 100, 2) as UpVotesPCT\n\nFROM Users\n\nWHERE  UpVotes > ##MinUpVotes## -- Suppress lower vote counts\n   and DownVotes >= ##MinDownVotes##\n\nORDER BY UpVotesPCT DESC, Reputation DESC","CreationDate":"2013-12-19 11:16:47","validated":true}
{"QuerySetId":154136,"Title":"Synonym stats for a given tag","Description":null,"QueryBody":"SELECT  * from TagSynonyms\nwhere TargetTagName = '##MasterTagName##'\norder by ApprovalDate, AutoRenameCount DESC","CreationDate":"2013-12-17 7:30:51","validated":true}
{"QuerySetId":154622,"Title":"Not very recent, unanswered zero-score questions by low-rep users","Description":null,"QueryBody":"SELECT  TOP 100 p.CreationDate, p.Id AS [Post Link], p.Body \nFROM Posts p INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation <= ##ReputationLimit## AND \n      p.PostTypeId = 1 AND \n      p.Score=0 AND\n      DATEDIFF(DAY,p.CreationDate, GETDATE())>29 AND\n      ISNULL(p.AnswerCount,0) = 0 AND \n      ClosedDate IS NULL AND\n      Body like '%##keyword##%'\nORDER BY p.CreationDate DESC","CreationDate":"2015-03-02 1:34:44","validated":true}
{"QuerySetId":154799,"Title":"UpVote ratio per tag for all users","Description":null,"QueryBody":"SELECT  A.TagName, A.Answers, B.UpVotes, (1.0*B.UpVotes\/A.Answers) as [Ratio]\nfrom (\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS Answers \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nGROUP BY TagName \n\n) A\ninner join (\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nGROUP BY TagName \n) B on A.TagName = B.TagName\nwhere A.Answers > 20\norder by Ratio desc","CreationDate":"2013-12-20 21:41:10","validated":true}
{"QuerySetId":154995,"Title":"Comments asking for the age of the house","Description":null,"QueryBody":"SELECT  \n    postid as [Post Link], text from comments\nwhere\n    lower(text) like '%what%age%house%?%' or\n    lower(text) like '%how%old%house%?%'","CreationDate":"2013-12-21 11:53:59","validated":true}
{"QuerySetId":155428,"Title":"Site Info: Score - Post Count","Description":null,"QueryBody":"SELECT  Score, COUNT(Score) AS count\n\nFROM Posts\n\nWHERE Score > '##MinimumScore:int?10##'  GROUP BY Score ORDER BY Score","CreationDate":"2013-12-22 22:59:14","validated":true}
{"QuerySetId":155639,"Title":"User List: Top N - by Tag","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link],\n    DisplayName,\n    Location,    \n    --TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n     TagName = ##tagName:string##\n     \n  GROUP BY u.id, DisplayName, Location\n  --, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000\n\nORDER BY upvotes DESC ;\n\n--ORDER BY DisplayName ASC ;","CreationDate":"2013-12-23 4:24:20","validated":true}
{"QuerySetId":155679,"Title":"Time interval from question being posted to appearance of the accepted answer","Description":null,"QueryBody":"SELECT  q.Id, \n       min(datediff(minute, q.CreationDate, a.CreationDate))\n       as [TimeInterval] \n       from Posts q\n  inner join Posts a on a.ParentId=q.Id and a.Id = q.AcceptedAnswerID\ngroup by q.Id\norder by q.Id asc","CreationDate":"2013-12-23 13:32:55","validated":true}
{"QuerySetId":156014,"Title":"List of posts with edits from same user rejected in a row","Description":null,"QueryBody":"SELECT  Top 100 PostId As [Post Link], OwnerUserId As [User Link], \n    Count(Id) As SuggestionCount\nFrom SuggestedEdits \nWhere RejectionDate Is Not Null \n    And OwnerUserId Is Not Null\nGroup By PostId, OwnerUserId\nOrder By SuggestionCount Desc","CreationDate":"2013-12-26 4:01:59","validated":true}
{"QuerySetId":157085,"Title":"Average length to close a question in 2013","Description":null,"QueryBody":"SELECT       CEILING( DATEDIFF( HOUR, CreationDate, ClosedDate ) \/ 24 ) AS DaysToClose\n        ,   COUNT(*) AS QuestionCount\nFROM        Posts\nWHERE       PostTypeId = 1\n        AND CreationDate BETWEEN '2013-01-01' AND '2013-12-31'\n        AND NOT ClosedDate IS NULL\nGROUP BY    CEILING( DATEDIFF( HOUR, CreationDate, ClosedDate ) \/ 24 )","CreationDate":"2013-12-31 20:45:25","validated":true}
{"QuerySetId":157208,"Title":"Some Migration target data (WebApps)","Description":null,"QueryBody":"WITH  migrations as (\n  select postID, comment target, year(creationdate) yr, month(creationDate) m\n\n  from   postHistory\n  where  posthistoryTypeid = 35\n)\n\nSelect count(postID) M_Count, target, yr\nFROM migrations\nwhere target is not null\ngroup by yr, target\norder by yr, target, count(postID)","CreationDate":"2016-05-04 21:42:11","validated":true}
{"QuerySetId":157405,"Title":"How many did each user asked questions and gave answers","Description":null,"QueryBody":"WITH  UsersSample AS\n(\n  SELECT u.Id\n  FROM Users u tablesample(1 percent)\n  )\n  SELECT p.PostTypeId, p.OwnerUserId, p.OwnerUserId AS [User Link],\n  COUNT(*) as n\nFROM Posts p\nRIGHT OUTER JOIN UsersSample u ON u.Id = p.OwnerUserId\nWHERE p.OwnerUserId > 0\nGROUP BY p.OwnerUserId, p.PostTypeId\nORDER BY p.OwnerUserId, p.PostTypeId","CreationDate":"2014-01-02 17:18:08","validated":true}
{"QuerySetId":157427,"Title":"Recent top answerers in the 'algorithm' tag","Description":null,"QueryBody":"SELECT  TOP 20 \n    Users.DisplayName,\n    SUM(Score) AS Score \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE Posts.CommunityOwnedDate IS NULL \n    AND Tags.TagName = 'algorithm'\n    AND Posts.CreationDate > '2014\/01\/01'\n    AND Posts.CreationDate < '2014\/01\/20'\nGROUP BY Users.DisplayName\nORDER BY Score DESC","CreationDate":"2014-01-20 0:09:49","validated":true}
{"QuerySetId":157678,"Title":"My answers in POPULAR QUESTIONS","Description":null,"QueryBody":"SELECT \nSUM(q.ViewCount) AS views, q.id AS [Post Link] ,a.score\nFROM Posts q\nINNER JOIN Posts a ON a.ParentId = q.Id\nWHERE a.OwnerUserId = ##userid##\nAND a.CreationDate > ##date?01-01-2013##\nGROUP BY q.id,a.score having SUM(q.ViewCount) > 1000\nORDER BY views desc","CreationDate":"2014-01-03 18:16:35","validated":true}
{"QuerySetId":157834,"Title":"User List: Top N - Argentina - with false positive exclusions","Description":"List of Users in Argentina","QueryBody":"SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n\nWHERE\n    (\n    lower(location) like lower('%Argentina%')\n\n    -- AR is State in the US - do not use\n      or location like ('%ARG')\n     )\n  \n  -- exclusions\n     and not\n     (\n     -- Enter dummy if not required\n     lower(location) LIKE lower('%##Exclusion##%')\n     \n     --or lower(location) LIKE lower('%##ExclusionRightSide##')     \n     --or lower(location) like lower('dummy')\n     )\n order by location asc -- to pick out incorrect results","CreationDate":"2014-01-05 2:27:21","validated":true}
{"QuerySetId":158240,"Title":"User List: Downvoters by Percentage","Description":null,"QueryBody":"SELECT  TOP ##NumOfUsers:Int?100##\n  id as [User Link],\n  UpVotes as [Up Votes],\n  DownVotes [Down Votes],\n  UpVotes - DownVotes as [Net Votes],\n  ROUND((100.0 * DownVotes \/ (UpVotes + DownVotes) ), 1) as [DownVotes Percent]\nFROM Users\nWHERE\n  DownVotes > ##DownVotesGreaterThan:Int?9##\norder by [DownVotes Percent] desc, DownVotes desc","CreationDate":"2014-01-07 6:01:31","validated":true}
{"QuerySetId":158544,"Title":"Number of answers for questions with an accepted answer","Description":null,"QueryBody":"WITH  an accepted answer\n-- Shows questions WITH an accepted answer,\n-- and the number of views and answers on each\n\nSELECT TOP 10000\n  Posts.Id as [Post Link],\n  Posts.ViewCount as [Views],\n  Posts.AnswerCount as [# Answers]\nFROM\n  Posts\nWHERE\n  PostTypeID = 1  -- questions\n  AND Posts.AcceptedAnswerId is not NULL -- has accepted answer\n  AND Posts.CreationDate >= '2013-1-01'\n  AND Posts.CreationDate <= '2013-12-31' -- All of 2013 for some fairness\nORDER BY\n  Posts.AnswerCount DESC","CreationDate":"2014-01-08 9:58:37","validated":true}
{"QuerySetId":158758,"Title":"Answers of mine that are voted higher than the accepted answer","Description":"Inverse query of http:\/\/data.stackexchange.com\/stackoverflow\/query\/158759\/accepted-answers-of-mine-that-are-not-the-highest-voted-answer","QueryBody":"SELECT \n  q.Id AS [Post Link],\n  p.Score AS [Your Score],\n  a.Score AS [Accepted Answer Score]\nFROM Posts p\n  JOIN Posts q ON p.ParentId = q.Id\n  JOIN Posts a ON q.AcceptedAnswerId = a.Id  -- accepted answer\nWHERE p.OwnerUserId = ##UserId##\n  AND p.PostTypeId = 2\n  AND p.Score > a.Score\nORDER BY p.Score DESC","CreationDate":"2014-01-09 12:42:02","validated":true}
{"QuerySetId":158759,"Title":"Accepted answers of mine that are not the highest voted answer","Description":"Inverse query of http:\/\/data.stackexchange.com\/stackoverflow\/query\/158758\/answers-of-mine-that-are-voted-higher-than-the-accepted-answer","QueryBody":"SELECT \n  q.Id AS [Post Link],\n  a.Score AS [Your Score],\n  MAX(p.Score) AS [Highest Score]\nFROM Posts a  -- accepted answers\n  JOIN Posts q ON q.AcceptedAnswerId = a.Id\n  JOIN Posts p ON p.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##\n  AND a.PostTypeId = 2\n  AND a.Score < p.Score\nGROUP BY q.Id, a.Score\nORDER BY a.Score DESC","CreationDate":"2014-01-09 12:42:07","validated":true}
{"QuerySetId":159055,"Title":"which posts have a flag","Description":null,"QueryBody":"SELECT  p.id as [Post Link]\n       , case when vt.id=15 then 'moderator review'\n              when vt.id=4  then 'offenisive' \n              when vt.id=12 then 'spam' end\n \nfrom votes v\ninner join votetypes vt on v.votetypeid = vt.id\ninner join posts p on p.id = v.postid\nwhere vt.id in (15,4,12) -- moderatorreview, offensive, spam\nand p.owneruserid = ##userid##","CreationDate":"2014-01-16 1:18:54","validated":true}
{"QuerySetId":159260,"Title":"User List: Top N - Austria - with false positive exclusions","Description":null,"QueryBody":"SELECT \n    Top ##Top##\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    --CreationDate,\n    LastAccessDate,\n    UpVotes,\n    DownVotes\n    \nFROM\n    Users\n\nWHERE\n     (\n      lower(Location) LIKE '%austria%' \n      -- http:\/\/sustainablesources.com\/resources\/country-abbreviations\/\n      OR Location LIKE '%AT' \n              \n      OR lower(Location) LIKE 'dummy'  \n      )\n    \n       -- exclusions\n       and not\n       (   \n       lower(Location) LIKE '%dummy%'\n       )   \n                  \n    --Temporarily sort by location to more easily pick out false positive entries\n    ORDER BY Location ASC;","CreationDate":"2014-01-11 19:14:31","validated":true}
{"QuerySetId":159325,"Title":"Count: New Users per Month","Description":null,"QueryBody":"SELECT \nmonth(CreationDate), Count(Id)\nfrom Users\nwhere year(CreationDate) = ##Year## and Reputation >= ##MinRep:int?1##\ngroup by month(CreationDate)\norder by month(CreationDate) asc","CreationDate":"2014-01-15 17:49:20","validated":true}
{"QuerySetId":159336,"Title":"Average answer length per user < 10K rep.","Description":null,"QueryBody":"SELECT \n  u.Id AS [User Link],\n  Count(*) AS [Answer count],\n  Min(Len(p.Body)) AS [Min],\n  Avg(Len(p.Body)) AS [Average],\n  Max(Len(p.Body)) AS [Max],\n  Var(Len(p.Body)) AS [Variance],\n  Stdev(Len(p.Body)) AS [StDev]\nFROM Users u, Posts p\nWHERE p.OwnerUserId = u.Id\n  AND p.PostTypeId = 2\n  AND u.Reputation < 10000\nGROUP BY u.Id\nORDER BY [Average]","CreationDate":"2014-01-12 8:23:01","validated":true}
{"QuerySetId":159366,"Title":"Positive score answers per month","Description":null,"QueryBody":"SELECT \nmonth(CreationDate), count(Id)\nfrom Posts\nwhere year(CreationDate) = ##Year## and Score > 0\ngroup by month(CreationDate)\norder by month(CreationDate) asc","CreationDate":"2014-01-12 9:56:42","validated":true}
{"QuerySetId":160064,"Title":"Top Active Answerers on site","Description":"Returns top answerers from a pool of people Active on the site.","QueryBody":"SELECT  \n    TOP 100\n    Users.Id AS [User Link],\n    Users.DisplayName AS UserName,\n    COUNT(Posts.Id) AS [Total Posts],\n    RANK() OVER (ORDER BY (COUNT(Posts.Id)) DESC) AS [Total Rank],\n    CAST(AVG(CAST(Score AS float)) AS NUMERIC(6,2)) AS [Average Score]    \nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId in (1,2)\nGROUP BY\n    Users.Id, Users.DisplayName\nHAVING\n    COUNT(Posts.Id) > 100\nORDER BY\n    [Average Score] DESC","CreationDate":"2018-12-06 7:05:54","validated":true}
{"QuerySetId":160221,"Title":"Top Android Users in Munich && Barcelona","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    u.Location,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n  LOWER(Location) LIKE '%barcelona%' \n       AND  TagName = 'android'\n  GROUP BY u.id, TagName, Location\n\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2014-01-16 23:17:52","validated":true}
{"QuerySetId":160592,"Title":"Non answered questions for a tag","Description":null,"QueryBody":"SELECT  Id AS [Post Link],\n       Tags AS [Tags],\n       Score,\n       ViewCount AS Views,\n       CreationDate AS [Date Asked]\n    FROM Posts\n    WHERE\n    Tags LIKE '%<' + ##TagName:string## + '>%' AND\n    ClosedDate IS NULL AND\n    (AnswerCount = 1)","CreationDate":"2016-01-05 17:24:31","validated":true}
{"QuerySetId":160757,"Title":"All my answers for a given year","Description":"All my answers on the site\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Year int = ##Year##\n\nSELECT \n    a.Id AS [Post Link],\n    CASE WHEN q.AcceptedAnswerId=a.Id THEN 'Accepted' END AS Accepted,\n    CASE WHEN q.OwnerUserId=a.OwnerUserId THEN 'Self' END AS Self,\n    a.Score,\n    a.CreationDate,\n    CASE WHEN q.CommunityOwnedDate IS NOT NULL THEN 'Q'\n         WHEN a.CommunityOwnedDate IS NOT NULL THEN 'A' END AS CW   \nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.Id = a.ParentId\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND \n    Year(q.CreationDate) = @Year\nORDER BY\n    a.Score DESC, a.CreationDate DESC","CreationDate":"2014-01-18 0:33:08","validated":true}
{"QuerySetId":161624,"Title":"Who Hated on My Answer?","Description":null,"QueryBody":"SELECT  V.Id, V.PostId as [Post Link], V.UserId as [User Link], \nCAST(DateDiff(day, P.CreationDate, V.CreationDate) as nvarchar) + ' days later' \nAS [Hater ETA]\nFROM Votes V, VoteTypes Vt, Posts P, PostTypes Pt\nWHERE \nP.Id = V.PostId\nAND Pt.Id = P.PostTypeId\nAND Vt.Id = V.VoteTypeId\nAND Pt.Id = 2\nAND Vt.Id = 3\nAND P.Id = ##postid##","CreationDate":"2014-06-14 11:05:23","validated":true}
{"QuerySetId":162190,"Title":"Unanswered questions from users with reputation >= 100","Description":null,"QueryBody":"SELECT  top 100 p.lastactivitydate as [Post Link], p.creationdate, p.title, p.id, p.score, p.viewcount, p.answercount, p.tags,\n  u.reputation\nfrom posts p, users u \nwhere p.owneruserid = u.id\n  \/* and p.answercount = 0 *\/\n  and u.reputation >= 100\n  and p.deletiondate is null\norder by p.creationdate desc\n--limit 1000","CreationDate":"2020-10-08 19:52:42","validated":true}
{"QuerySetId":162722,"Title":"Users with the most posts above a score of N.","Description":null,"QueryBody":"DECLARE  @minScore numeric = ##MinScore?100##\n\nSELECT TOP 50\n    Posts.OwnerUserId AS [User Link],\n    Count(Posts.Score) AS [Count],\n    Sum(Posts.Score) AS [Total Score]\nFROM Posts\nWHERE\n    Posts.Score >= @minScore and\n    Posts.PostTypeId <= 2 and\n    Posts.OwnerUserId is not null\nGROUP BY Posts.OwnerUserId\nORDER BY [Count] DESC, [Total Score] DESC","CreationDate":"2017-08-01 17:07:39","validated":true}
{"QuerySetId":162872,"Title":"My answer count since Feb 1","Description":null,"QueryBody":"DECLARE  @UserId int = 103167;\n\nselect COUNT(myAnswer.ParentId) as NumQuestionsAnswerOffered\n  from Posts as myAnswer\n  left join Posts as theQuestion on theQuestion.Id = myAnswer.ParentId\n  where myAnswer.ownerUserId = @UserId and myAnswer.postTypeId = 2 and myAnswer.CreationDate > {d '2013-02-01'}\n  and myAnswer.Id = theQuestion.AcceptedAnswerId\n;","CreationDate":"2014-01-25 10:38:49","validated":true}
{"QuerySetId":163527,"Title":"person's comments on foreign posts","Description":null,"QueryBody":"SELECT  TOP(100) \n       comment.Id AS [Comment Link],\n       commenter.DisplayName AS commenter,\n       CASE\n         WHEN pop.DisplayName IS NULL THEN NULL \n         ELSE op.DisplayName END\n       AS answerer, CASE \n         WHEN pop.DisplayName IS NULL THEN op.DisplayName \n         ELSE pop.DisplayName END\n       AS asker\n\nFROM Comments AS comment\n     JOIN Users AS commenter ON commenter.Id = comment.UserId\n     JOIN (Posts AS opPost JOIN Users AS op ON op.Id = opPost.OwnerUserId)\n  ON opPost.Id = comment.PostId\nLEFT JOIN (Posts AS popPost JOIN Users AS pop ON pop.Id = popPost.OwnerUserId)\n       ON popPost.Id = opPost.ParentId\n       \nWHERE commenter.Id  = ##UserID##\n  AND op.Id        != ##UserID##\n  AND (pop.Id       != ##UserID## OR pop.Id IS NULL)\n\nORDER BY comment.Id DESC","CreationDate":"2014-01-28 13:01:18","validated":true}
{"QuerySetId":163670,"Title":"How many downvotes do I have for each question?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS DownVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY DownVotes DESC","CreationDate":"2014-01-28 22:15:29","validated":true}
{"QuerySetId":166950,"Title":"Site-wide average score per post","Description":null,"QueryBody":"SELECT \n  Year(CreationDate) AS 'Year',\n  Month(CreationDate) AS 'Month',\n  PostTypeId AS 'Post Type',\n  AVG(CAST(Score  AS float)) AS 'Average',\n  SUM(Score) AS 'Sum Score',\n  Count(Id) AS 'Post Count'\nFROM Posts\nWHERE\n  CreationDate > (Convert(datetime, ##date:string?2013-01-01##)) AND\n  ClosedDate IS NULL AND\n  CommunityOwnedDate IS NULL AND\n  PostTypeId < 3\nGROUP BY\n  PostTypeId,\n  Year(CreationDate),\n  Month(CreationDate)\nORDER BY\n  Year ASC,\n  Month ASC,\n  PostTypeId ASC","CreationDate":"2014-02-12 21:11:31","validated":true}
{"QuerySetId":167217,"Title":"Number of approved suggested edits","Description":null,"QueryBody":"SELECT \n  count(*)\nFROM\n  SuggestedEdits\nWHERE\n  OwnerUserId = ##userid##\n  AND ApprovalDate IS NOT NULL","CreationDate":"2014-02-13 18:09:46","validated":true}
{"QuerySetId":167634,"Title":"Questions with close votes by tag (multiple tags same question)","Description":null,"QueryBody":"SELECT  row_number() over (order by p.id),\n  p.id AS [Post Link], \n  p.tags\nfrom posts p\ninner join votes v\n  on p.id = v.postid\ninner join posttags pt\n  on p.id = pt.postid\ninner join tags t\n  on pt.tagid = t.id\nwhere v.votetypeid = 6\n  and p.closeddate is null\n  and t.tagname IN (##Tag1:string?tagname##, ##Tag2:string?tagname##)\n  and p.viewcount < 100\ngroup by p.id, p.tags\nhaving count(distinct t.tagname) >= 2","CreationDate":"2014-02-15 0:39:19","validated":true}
{"QuerySetId":167731,"Title":"Stackoverflow Top 100 users from Banglore","Description":null,"QueryBody":"SELECT \nTOP (100) ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%kolkata%'\nORDER BY\n    Reputation DESC;","CreationDate":"2014-02-15 21:34:03","validated":true}
{"QuerySetId":168352,"Title":"Find +1 comments of given length","Description":null,"QueryBody":"SELECT  TOP (100) Id AS [Comment Link]\nFROM Comments\nWHERE Text LIKE '+1%'\nORDER BY LEN(Text)","CreationDate":"2017-06-25 3:29:24","validated":true}
{"QuerySetId":168412,"Title":"Search for obsolete \"please accept\" comments on my answers","Description":"Search your own comments for a string. Results show the comment, its score, the date, and a link to the post, newest comments first.","QueryBody":"DECLARE  @MyUserID INT = ##UserID:int##\n\nSELECT\n    Comments.Id AS [Comment Link],\n    Comments.CreationDate,\n    Comments.PostId AS [Post Link]\nFROM Comments, Posts Answer\nLEFT JOIN Posts Question ON Answer.ParentId = Question.id\nWHERE\n    Comments.PostId in (Answer.Id, Question.Id) AND\n    Answer.Id = Question.AcceptedAnswerId  AND\n    Answer.PostTypeId = 2 AND\n    Answer.OwnerUserId = @MyUserID AND\n    Comments.UserId = ##UserID## AND\n    Comments.Text LIKE '%\/questions\/5234\/how-does-accepting-an-answer-work%'\nORDER BY Comments.CreationDate DESC","CreationDate":"2014-08-03 14:41:36","validated":true}
{"QuerySetId":168925,"Title":"Top 100 users from Colombia","Description":null,"QueryBody":"SELECT  TOP 1000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%colombia%'  \nORDER BY\n    Reputation DESC;","CreationDate":"2016-03-04 2:32:43","validated":true}
{"QuerySetId":169693,"Title":"Normalized Reputation Frequency Distribution with parameters","Description":"From http:\/\/data.stackexchange.com\/stackoverflow\/query\/90233\/reputation-frequency-distribution","QueryBody":"SELECT  FLOOR(0.5 + reputation \/ ##step:float?1000## \/ DATEDIFF(day, CreationDate, LastAccessDate+1)) * ##step## AS [UserReputationPerDayActive],\n       Count(id)         AS [UserCount],\n       MAX(DisplayName)\nFROM   users \nGROUP  BY FLOOR(0.5 + reputation \/ ##step:float?1000## \/ DATEDIFF(day, CreationDate, LastAccessDate+1)) * ##step##\nORDER  BY [UserReputationPerDayActive] ASC","CreationDate":"2014-02-21 13:13:11","validated":true}
{"QuerySetId":169694,"Title":"Currently open questions with \"possible duplicate\" comments.","Description":null,"QueryBody":"SELECT  TOP 10000\n  Comments.PostId as [Post Link],\n  COUNT(*) as [Duplicate Count]\nFROM\n  Comments\nWHERE\n  Comments.Text LIKE 'possible duplicate of%' AND\n  (\n    SELECT Posts.ClosedDate FROM Posts\n    WHERE Id = Comments.PostId\n  ) IS NULL\nGROUP BY Comments.PostId\nORDER BY [Duplicate Count] DESC","CreationDate":"2014-02-21 2:41:48","validated":true}
{"QuerySetId":169981,"Title":"Zero-answer zero-upvote unclosed questions with no recent updates","Description":null,"QueryBody":"SELECT  p.Title, p.CreationDate, p.LastActivityDate, p.Tags,\n'http:\/\/stackoverflow.com\/questions\/' + cast(p.Id as varchar(50)) as Link\nfrom Posts p\nleft join PostLinks l on l.PostId = p.Id\nleft join Votes v on p.Id = v.PostId\nwhere\n  p.PostTypeId = 1 -- Question\n  and p.AnswerCount = 0\n  and p.Score <= 0\n  and l.Id is null\n  and v.Id is null\n  and p.ClosedDate is null\n  and p.LastActivityDate <= '##NoActivitySince##'","CreationDate":"2014-02-24 12:22:55","validated":true}
{"QuerySetId":170479,"Title":"Answers that confess they should be comments","Description":null,"QueryBody":"SELECT \nid [Post Link], body\nfrom posts\nwhere posttypeid = 2\nand creationdate between '##StartDate?2015-01-01## 00:00:00'\nand CONVERT(DATETIME, DATEADD(day, ##Days?30##, '##StartDate##')) \nand (\n  body like '%my rep%'\n  or\n  body like '%not enough rep%'\n  or\n  body like '%I don''t have enough rep%'\n  or\n  body like '%should be a comment%'\n  or\n  body like '%should have been a comment%'\n  )","CreationDate":"2015-09-30 18:17:38","validated":true}
{"QuerySetId":170823,"Title":"Show suggested edits on my posts","Description":null,"QueryBody":"SELECT  Posts.Id, SuggestedEdits.Id as [Suggested Edit Link],\n       SuggestedEdits.OwnerUserId as [User Link],\n       SuggestedEdits.Title, SuggestedEdits.Text\nFROM SuggestedEdits\n  JOIN Posts ON Posts.Id = SuggestedEdits.PostId\nWHERE Posts.OwnerUserId = ##UserId##","CreationDate":"2014-02-26 12:07:09","validated":true}
{"QuerySetId":172450,"Title":"Users with the Most Bounty Offers","Description":null,"QueryBody":"SELECT  TOP ##topn:int?100##\nu.Id as [User Link], MIN(u.Reputation) AS rep,SUM(v.BountyAmount) AS totalamount,COUNT(*) AS bountycount\nFROM Users u INNER JOIN Votes v ON u.Id=v.UserId INNER JOIN Posts p ON v.PostId=p.Id\nWHERE v.VoteTypeId=8 AND p.PostTypeId=1 AND p.OwnerUserId!=u.Id\nGROUP BY u.Id\nORDER BY totalamount DESC","CreationDate":"2015-12-05 17:58:19","validated":true}
{"QuerySetId":172492,"Title":"Downvoted -> edited -> upvoted","Description":null,"QueryBody":"SELECT  count(distinct down.PostId) from Votes as down\njoin PostHistory on\n  down.PostId = PostHistory.PostId\nwhere\n  down.VoteTypeId = 3 and\n  PostHistory.CreationDate > '2014-1-1'\n\n-- Downvoted -> Edited -> Upvoted in 2014\n\nSELECT count(distinct down.PostId) from Votes as down\njoin PostHistory on\n  down.PostId = PostHistory.PostId and\n  PostHistory.CreationDate > down.CreationDate\njoin Votes as up on\n  up.PostId = down.PostId and\n  up.CreationDate > PostHistory.CreationDate\nwhere\n  up.VoteTypeId = 2 and\n  down.VoteTypeId = 3 and\n  PostHistory.PostHistoryTypeId IN (4, 5, 6) and\n  PostHistory.CreationDate > '2014-1-1'","CreationDate":"2014-03-06 4:43:22","validated":true}
{"QuerySetId":172705,"Title":"Open, answered, closed questions in a tag","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(25) = ##Tag:string##\n\nSELECT\n  COUNT(*) AS numQ\nFROM\n  Posts\nWHERE\n  Tags=@Tag","CreationDate":"2014-03-05 14:33:06","validated":true}
{"QuerySetId":173136,"Title":"Recently Active Users (within last 30 days) and Activity Level","Description":null,"QueryBody":"SELECT  U.DisplayName, \n-- U.Reputation, U.LastAccessDate,\nCOUNT(P.Id) As PostCount\n     from Users as U\ninner join \n        Posts as P\nOn P.OwnerUserID=U.Id\n     \n        where P.CreationDate > GETUTCDATE()-30 and\n      U.LastAccessDate > GETUTCDATE()-30 and P.PostTypeId = 2 --answers\n\nGROUP BY U.DisplayName order by PostCount DESC;","CreationDate":"2015-06-03 14:36:11","validated":true}
{"QuerySetId":173146,"Title":"Duplicate questions of deleted questions","Description":null,"QueryBody":"SELECT  PostLinks.PostId as [Post Link] FROM PostLinks\nWHERE\n  PostLinks.LinkTypeId = 3 AND\n  (SELECT Posts.ID FROM Posts WHERE Posts.Id = PostLinks.PostId) IS NOT NULL AND\n  (SELECT Posts.Id FROM Posts WHERE Posts.Id = PostLinks.RelatedPostId) IS NULL\nGROUP BY PostLinks.PostId\nORDER BY PostLinks.PostId","CreationDate":"2014-03-06 23:55:11","validated":true}
{"QuerySetId":173779,"Title":"All questions marked as duplicates of your own questions","Description":null,"QueryBody":"SELECT  count(*) from\n(SELECT id from posts where PostTypeId <> 1) T\ninner join (SELECT relatedpostid from postlinks where postlinks.linktypeid = 1) T2\non T.id = T2.RelatedPostId;","CreationDate":"2016-04-18 4:44:05","validated":true}
{"QuerySetId":173862,"Title":"Difference in score by delay between answers","Description":null,"QueryBody":"WITH  two_answers as (\n  select min(a.Id) first, max(a.Id) last\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n  where q.AnswerCount = 2\n  group by q.Id\n  having getdate() - max(a.CreationDate) > 30\n)\n\nselect min(datediff(hour, f.CreationDate, l.CreationDate)),\n       avg(cast(isnull(f.Score, 0) as float)\n            - cast(isnull(l.Score, 0) as float)) delta\nfrom two_answers\n     join Posts f on f.Id = first\n     join Posts l on l.Id = last\nwhere isnull(f.Score, 0) >= 0\n      and isnull(l.Score, 0) >= 0\n      and f.CreationDate < l.CreationDate\n      and datediff(month, f.CreationDate, l.CreationDate) < 1\ngroup by datediff(hour, f.CreationDate, l.CreationDate)\norder by datediff(hour, f.CreationDate, l.CreationDate)","CreationDate":"2014-03-11 11:15:56","validated":true}
{"QuerySetId":173935,"Title":"Top stackoverflow users Sri lanka","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n     LOWER(Id) LIKE '%ajee%'\nORDER BY\n    Reputation DESC;","CreationDate":"2014-03-11 15:51:00","validated":true}
{"QuerySetId":174125,"Title":"Top 50 Posts by score","Description":null,"QueryBody":"SELECT  top 50 Id as [Post Link], Score from posts where posttypeid = 2 order by score desc","CreationDate":"2014-03-12 22:18:47","validated":true}
{"QuerySetId":174143,"Title":"What are my non-voted comments?","Description":null,"QueryBody":"SELECT \n  c.CreationDate,\n  c.Id AS [Comment Link]\nFROM\n  Comments c\nWHERE\n  c.UserId = ##UserId## AND c.Score = 0\nORDER BY\n  c.CreationDate DESC","CreationDate":"2014-05-18 12:54:04","validated":true}
{"QuerySetId":174334,"Title":"Top users by tag overall","Description":null,"QueryBody":"SELECT  us.*,tuser.Score\nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName = '##TagName##'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\nORDER BY Score DESC;","CreationDate":"2014-06-26 23:09:58","validated":true}
{"QuerySetId":174344,"Title":"First answer bias by number of answers","Description":null,"QueryBody":"WITH  two_answers as (\n  select q.Id question, min(a.Id) first, max(a.Id) last\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n  where q.AnswerCount >= 2\n--        and q.ViewCount <= 100\n  group by q.Id\n  having getdate() - max(a.CreationDate) > 30\n)\n\nselect isnull(q.AnswerCount, 0) answers,\n       round(avg(cast(isnull(f.Score, 0) as float) \n                 - cast(isnull(l.Score, 0) as float)), 2) FGITW,\n       log(count(*)) log_N          \nfrom two_answers\n     join Posts f on f.Id = first\n     join Posts l on l.Id = last\n     join Posts q on q.Id = question\nwhere f.CreationDate < l.CreationDate\ngroup by isnull(q.AnswerCount, 0)\norder by isnull(q.AnswerCount, 0)","CreationDate":"2014-03-13 22:49:04","validated":true}
{"QuerySetId":174671,"Title":"Top 200 Voted Answers by Tag","Description":null,"QueryBody":"SELECT  TOP 200 a.Score, q.Title, a.ID As [Post Link],\n    a.OwnerUserID [User Link], COALESCE(a.LastEditDate, a.CreationDate) LastChange \nFROM Tags t\nINNER JOIN PostTags pt ON pt.TagID = t.ID\nINNER JOIN Posts q ON q.ID = pt.PostID\nINNER JOIN Posts a ON a.ParentID = q.ID\nWHERE TagName = '##Tag##'\n\nORDER BY a.Score DESC","CreationDate":"2014-03-16 20:11:37","validated":true}
{"QuerySetId":174851,"Title":"Accepted answers with score of 4 by <100 rep users","Description":null,"QueryBody":"SELECT  Top 100  p.Id As [Post Link]\nFrom Posts p Inner Join Votes v On p.Id=v.PostId And v.VoteTypeId=1\n  Inner Join Users u On p.OwnerUserId=u.Id And u.Reputation<100\nWhere p.Score=4\n--Order By p.CreationDate Desc","CreationDate":"2014-03-17 16:32:11","validated":true}
{"QuerySetId":178626,"Title":"which tags are use in combination with tag merge","Description":null,"QueryBody":"SELECT  neighbour.tagname, count(*)\nfrom posttags pt\ninner join tags main \n   on main.id = pt.tagid\ninner join posttags nt \n   on nt.postid = pt.postid\ninner join tags neighbour \n   on nt.tagid = neighbour.id and neighbour.id <> main.id\nwhere main.tagname = 'google-sheets'\ngroup by neighbour.tagname\norder by 2 desc","CreationDate":"2018-01-27 7:13:21","validated":true}
{"QuerySetId":179026,"Title":"Up and downvotes for site users","Description":null,"QueryBody":"SELECT  DisplayName, Reputation, UpVotes, DownVotes, UpVotes+DownVotes as TotalVotes, \nROUND(UpVotes*1.0\/(DownVotes+UpVotes)*100.0,1) as UpvotePercentage\nFROM Users\nWHERE UpVotes+DownVotes >0 and Reputation > 200\nand DisplayName in ('Shog9','jmort253','NickC','enderland','Jim','Monica Cellio','CMW','Chad','gnat','RhysW','jmac')\nORDER BY ROUND(UpVotes*1.0\/(DownVotes+UpVotes)*100.0,1) asc","CreationDate":"2014-03-28 2:50:42","validated":true}
{"QuerySetId":179779,"Title":"Pending close flags by close reason","Description":"List the number of questions flagged (\/voted) according to each close reason. Will double-count questions if two different reasons are selected.","QueryBody":"SELECT  cr.Name, count(distinct PostId)\nfrom PendingFlags f\njoin CloseReasonTypes cr on cr.Id=f.CloseReasonTypeId\nwhere FlagTypeId in (14,13)\ngroup by cr.Name\norder by count(distinct PostId) desc","CreationDate":"2014-04-01 9:36:08","validated":true}
{"QuerySetId":180163,"Title":"Posts which have at least one close flag\/vote for recommend a tool","Description":null,"QueryBody":"SELECT  Posts.Body, Posts.Id AS [Post Link],\n Posts.Score AS Votes\nFrom PendingFlags\nINNER JOIN Posts on Posts.Id = PendingFlags.PostId\nWhere Posts.ClosedDate IS NULL\n  AND PendingFlags.CloseAsOffTopicReasonTypeId = ##Id##","CreationDate":"2014-04-16 6:29:21","validated":true}
{"QuerySetId":180327,"Title":"How many posts have I edited?","Description":null,"QueryBody":"SELECT  Posts.LastEditorUserId AS [UserId]\n    , COUNT(DISTINCT Posts.Id) AS [Edited Posts]\nFROM Posts\nWHERE Posts.LastEditorUserId = ##UserId## \nand Posts.PostTypeId = 1\nand Posts.OwnerUserId != ##UserId## \nand Posts.ClosedDate is null\nand Posts.CommunityOwnedDate is null\nGROUP BY Posts.LastEditorUserId","CreationDate":"2014-08-01 20:52:13","validated":true}
{"QuerySetId":181546,"Title":"Comment Count to Score Ratio (Identifying Problematic Questions)","Description":null,"QueryBody":"SELECT  TOP 100 Id As [Post Link], CommentCount \/ Score AS [Comment to Score Ratio], PostTypeId\nFROM Posts\nWHERE CommentCount > Score AND CommentCount > 3 AND Score > 0 AND PostTypeId = 1\nORDER BY [Comment to Score Ratio] Desc","CreationDate":"2014-04-08 4:04:48","validated":true}
{"QuerySetId":181921,"Title":"Question score by number asked","Description":null,"QueryBody":"WITH  user_questions as (\n  select OwnerUserId, \n         count(*) number_asked, \n         avg(Score*1.0) score\n  from Posts\n  where PostTypeId = 1\n        and OwnerUserId is not null\n  group by OwnerUserId\n)\n\nselect number_asked, \n       --min(score) min_score, \n       --max(score),\n       --count(*),\n       avg(score) avg_score\nfrom user_questions\nwhere number_asked <= ##limit?50##\n      --and score > 0\ngroup by number_asked","CreationDate":"2014-04-09 23:17:13","validated":true}
{"QuerySetId":182270,"Title":"Top 10 answerers by score for a tag","Description":null,"QueryBody":"SELECT  TOP 10\n  Users.Id AS [User Link],\n  sum(Posts.Score) AS Score\nFROM Users\n  JOIN Posts ON Users.Id = Posts.OwnerUserId\n  JOIN PostTags ON PostTags.PostId = Posts.Id\n--FROM Tags    \n--    JOIN PostTags ON PostTags.TagId = Tags.Id\n--    JOIN Posts ON Posts.Id = PostTags.PostId \n--    JOIN Posts as Answers ON Answers.ParentId = Posts.Id\n--    JOIN Users ON Users.Id = Answers.OwnerUserId\n--WHERE\n--  Tags.TagName = '##TagName##'\nGROUP BY\n  Users.Id, DisplayName\nORDER BY\n  sum(Posts.Score)","CreationDate":"2014-04-10 23:35:30","validated":true}
{"QuerySetId":183621,"Title":"Filter Unanswered Questions by Two Tags","Description":null,"QueryBody":"SELECT  P.title\nFROM Posts P, PostTags Pt, Tags T\nWHERE P.Id = Pt.PostId\nAND T.Id = Pt.TagId\nAND T.TagName = '##tags##'\nAND P.Tags LIKE '<%##tag2##%>'\nAND P.PostTypeId = 1\nAND P.ClosedDate IS NULL\n--GROUP BY P.Id\n--HAVING (SELECT Count(Pt.TagId) FROM PostTags Pt WHERE Pt.PostId = P.Id) = 2","CreationDate":"2016-12-22 5:18:08","validated":true}
{"QuerySetId":183790,"Title":"Who rolls the most backs?","Description":"Lists users in descending order of number of rollback edits they've done.","QueryBody":"SELECT \n  r.UserId AS [User Link],\n  COUNT(*) AS 'Count'\nFROM (\n  SELECT\n    h.UserId\n  FROM\n    PostHistory h\n  WHERE\n    h.PostHistoryTypeId IN (7, 8, 9) AND\n    h.UserId IS NOT NULL\n  GROUP BY\n    h.UserId, h.RevisionGUID\n  ) r\nGROUP BY\n  r.UserId\nORDER BY\n  'Count' DESC","CreationDate":"2014-04-16 12:23:00","validated":true}
{"QuerySetId":184008,"Title":"Analyse Number of Users Joining SO Over Time","Description":null,"QueryBody":"SELECT    COUNT(*) AS 'Number of Users'\n        ,DATEPART(MONTH, [CreationDate]) AS 'Month'\n        ,DATEPART(YEAR, [CreationDate]) AS 'Year'\nFROM    USERS\nGROUP BY DATEPART(YEAR, [CreationDate]), DATEPART(MONTH, [CreationDate])\nORDER BY DATEPART(YEAR, [CreationDate]), DATEPART(MONTH, [CreationDate])","CreationDate":"2014-04-17 12:24:04","validated":true}
{"QuerySetId":184010,"Title":"Activity of SO Users with Time (Advanced)","Description":null,"QueryBody":"SELECT    COUNT(*) As 'Users Joined'\n        ,(\n              SELECT COUNT(ID) AS 'UsersStillActive'\n              FROM    USERS\n              WHERE   [LastAccessDate] > DATEADD(MONTH, -1, GETDATE())\n        )\n        ,DATEPART(MONTH, [CreationDate]) AS 'Month'\n        ,DATEPART(YEAR, [CreationDate]) AS 'Year'\nFROM    USERS \nGROUP BY DATEPART(YEAR, [CreationDate]), DATEPART(MONTH, [CreationDate])\nORDER BY DATEPART(YEAR, [CreationDate]), DATEPART(MONTH, [CreationDate])","CreationDate":"2014-04-17 12:59:21","validated":true}
{"QuerySetId":184405,"Title":"Set of Answerers and Answer Id","Description":null,"QueryBody":"SELECT  p.parentId as Question, p.OwnerUserId as Answerer, COUNT(*) as Upvotes\nfrom Posts as p\n        INNER JOIN Votes as v ON  v.PostId = p.Id and \n                                  v.VoteTypeId = 1\nwhere\n      p.ParentId is not null and\n      p.PostTypeId = 2 and\n      p.ParentId in\n      (\n      SELECT p.Id as Post from Posts as p\n        where p.viewCount > 0 and p.PostTypeId=1) \ngroup by p.parentId, p.OwnerUserId","CreationDate":"2015-05-15 10:23:44","validated":true}
{"QuerySetId":184521,"Title":"Number of questions with ViewCount > nviews","Description":null,"QueryBody":"WITH  TaggedPosts AS (\nSELECT ViewCount\nFROM Posts\nWHERE PostTypeId = 1 and Tags LIKE '%##tagSubstring?python##%'\n),MostViewedQuestions AS (\n  SELECT Count = Count(*) \n  FROM TaggedPosts \n  WHERE ViewCount > ##nviews:int?10000##\n)\nSELECT Count, CAST(Count AS decimal(20, 5)) * 100.0 \/ (SELECT Count(*) FROM TaggedPosts) as Percentile\nFROM MostViewedQuestions","CreationDate":"2014-04-20 2:41:38","validated":true}
{"QuerySetId":184820,"Title":"Greece 1000 with Row Number","Description":null,"QueryBody":"WITH  Row Number\n-- Lists the top 1000 users (ranked by reputation) that are located in Greece according to their profile information.\n-- A range of options is used to pinpoint members from Greece based on popular locations used.\n\nSELECT TOP 1000\n   row_number() OVER (ORDER BY reputation DESC) Place ,\n   Id as [User Link],\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n   Location like N'%Thess%'\n   OR Location like N'%Greece%'\n   OR Location like N'%Gr'\n   OR (Location like N'%Athens%' AND Location NOT like N'%GA%')\nORDER BY\n   reputation DESC","CreationDate":"2014-04-21 18:54:47","validated":true}
{"QuerySetId":185027,"Title":"Percentage of unanswered questions for a tag","Description":null,"QueryBody":"SELECT  \n  count(p.Id) as [Total Questions],\n  sum(case when p.AcceptedAnswerId > 0 then 1 else 0 end) as [Answered Questions],\n  sum(case when p.AcceptedAnswerId > 0 then 0 else 1 end)*1000 \/ count(p.Id) \/ 10.0 as [Percentage Unanaswered]\nfrom \n  Posts as p, \n  PostTags as pt, \n  Tags as t\nwhere p.PostTypeId = 1\n  and p.Id = pt.PostId\n  and pt.TagId = t.id\n  and t.TagName = '##TagName##'","CreationDate":"2014-04-22 12:32:29","validated":true}
{"QuerySetId":185070,"Title":"Users with similar name to Super*","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id, Location,\n    Id AS [User Link],\n    CreationDate AS [Creation Date],\n    DisplayName AS [Name],\n    Reputation\nFROM\n    Users\nWHERE\n    DisplayName like 'Super%' and Id < 22000 and Id > 21600","CreationDate":"2014-04-22 18:47:12","validated":true}
{"QuerySetId":185132,"Title":"Closed questions by question score","Description":"Shows all closed questions by their score. View as graph.","QueryBody":"WITH  Base as \n(\n  select p.Score\n  from Posts p\n  where p.ClosedDate is not null\n    and p.Score between -10 and 10\n)\nselect\n  b.Score,\n  count(b.Score) [count]\nfrom Base b\ngroup by b.Score\norder by b.Score asc","CreationDate":"2014-04-22 23:14:16","validated":true}
{"QuerySetId":185843,"Title":"Answer length and character rentability","Description":null,"QueryBody":"SELECT \n  p.id as [Post Link],\n  Len(p.Body) AS Length,\n  p.Score,\n  CAST(p.Score AS FLOAT)\/ Len(p.Body) AS rentability\n  , v.BountyAmount, v.VoteTypeId\nFROM Posts p\n  JOIN Users u on u.Id = p.OwnerUserId\n  JOIN Votes v on v.PostId = p.Id\nWHERE p.OwnerUserId = ##UserId##\n  --AND u.Id = p.OwnerUserId\n  AND p.PostTypeId = 2\nORDER BY rentability DESC, Length ASC","CreationDate":"2014-06-04 10:28:03","validated":true}
{"QuerySetId":187146,"Title":"How many users provide all accepted answers in the last year in the given tag","Description":null,"QueryBody":"SELECT  \n  count(distinct a.OwnerUserId) as [distinct users], \n  count(distinct a.OwnerUserId) * 1.0 \/ count(distinct a.Id) as [ratio],\n  count(a.Id) as [accepted answers],\n  t.TagName,\n  GETDATE() - 366 as [year ago]\nfrom Posts q\n  inner join Posts a on q.AcceptedAnswerId = a.Id -- accepted answer\n  join PostTags pt on pt.PostId = q.Id\n  join Tags t on t.Id = pt.TagId \nwhere \n    q.PostTypeId = 1 -- question\n    and a.PostTypeId = 2 -- answer\n    and a.CreationDate > GETDATE() - 366\n    and t.TagName = '##tagname?python##'\ngroup by t.TagName","CreationDate":"2014-04-29 16:59:16","validated":true}
{"QuerySetId":189571,"Title":"Highest Upvoted Comments (with links)","Description":"\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT\n    Id [Comment Link],\n    Score\nFROM \n    Comments\nWHERE \n    UserId = @UserId\n    AND Score > 0\nORDER BY \n    Score DESC","CreationDate":"2014-05-03 0:27:48","validated":true}
{"QuerySetId":189839,"Title":"Top editors in the past n days","Description":null,"QueryBody":"DECLARE  @days_diff int = ##DaysBack:int?30##\nDECLARE @num_users int = ##HowManyUsers:int?100##\n\nSELECT TOP (@num_users)\n  ph.UserId AS [User Link],\n  COUNT(*) AS [Count]\nFROM\n  PostHistory ph\nWHERE\n  ph.PostHistoryTypeId IN (4, 5, 6) -- edit title\/body\/tags\n  AND ph.CreationDate >= DATEADD(DAY, -@days_diff, GETDATE())\nGROUP BY\n  ph.UserId\nORDER BY\n  [Count] DESC","CreationDate":"2016-12-26 20:56:10","validated":true}
{"QuerySetId":190360,"Title":"Find posts with HTML links in them","Description":null,"QueryBody":"SELECT  Id AS [Post Link],\n       PostTypeId,\n       CreationDate\n  FROM Posts\n  WHERE (\n    SELECT Text\n      FROM PostHistory\n      WHERE Id IN (\n        SELECT MAX(Id)\n          FROM PostHistory\n        WHERE PostId = Posts.Id\n          AND PostHistoryTypeId IN (2, 5, 8)\n      )\n  ) LIKE '%<a href=%'\n  ORDER BY CreationDate DESC","CreationDate":"2014-05-06 17:10:11","validated":true}
{"QuerySetId":190364,"Title":"My comments, ordered by score (Pundit badge progress)","Description":"My Comments, ordered by Score 2\n","QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n    Comments.Score,\n    Comments.Id as [Comment Link],\n    -- PostId as [Post Link],\n    \/*CASE \n    WHEN Q.Id is not NULL THEN CONCAT(\"<a href=\\\"http:\/\/stackoverflow.com\/a\/\", Posts.Id, \"\\\">\", Q.Title, \"<\/a>\")\n          ELSE CONCAT(\"<a href=\\\"http:\/\/stackoverflow.com\/q\/\", Posts.Id, \"\\\">\", Posts.Title, \"<\/a>\") \n    END as QTitle,*\/\n    -- PostId,\n    -- Posts.ParentId,\n    Comments.CreationDate\nFROM \n    Comments \/*join Posts on Comments.PostId = Posts.Id\n        left join Posts as Q on Posts.ParentId = Q.Id*\/\nWHERE \n    UserId = @UserId\nORDER BY \n    Comments.Score DESC","CreationDate":"2020-12-03 5:03:27","validated":true}
{"QuerySetId":190611,"Title":"most \"linked from\" posts for a user","Description":null,"QueryBody":"SELECT \n  pl.PostId as [Post Link],\n  count(pl.PostId) as [Number of Links]\nfrom PostLinks pl\njoin Posts p on p.ParentId = pl.PostId\nwhere p.OwnerUserId = ##UserId##\ngroup by pl.PostId\norder by [Number of Links] desc","CreationDate":"2014-05-06 12:23:16","validated":true}
{"QuerySetId":190620,"Title":"enumerate links for a post","Description":null,"QueryBody":"SELECT \n  PostId as [Post Link],\n  LinkTypeId,\n  CreationDate,\n  RelatedPostId\nfrom PostLinks\nwhere PostId = ##PostId:int##\norder by PostId","CreationDate":"2014-05-06 12:08:33","validated":true}
{"QuerySetId":190636,"Title":"Most \"linked to\" user posts with tags","Description":null,"QueryBody":"SELECT \n  pl.RelatedPostId as [Post Link],\n  count(pl.RelatedPostId) as [Number of Links]\nfrom PostLinks pl\njoin Posts p on p.ParentId = pl.RelatedPostId\njoin Posts q on q.Id = p.ParentId\nwhere p.OwnerUserId = ##UserId:int##  and q.Tags like '%##Tags##%'\ngroup by pl.RelatedPostId\norder by [Number of Links] desc","CreationDate":"2014-05-07 18:38:35","validated":true}
{"QuerySetId":191966,"Title":"Most \"linked to\" posts with the tag","Description":null,"QueryBody":"SELECT \n  pl.RelatedPostId as [Post Link],\n  count(pl.RelatedPostId) as [Number of Links],\n  p.Title, p.Score, p.ViewCount, p.Tags, p.AnswerCount\nfrom PostLinks pl\njoin Posts p on p.Id = pl.RelatedPostId\njoin PostTags pt on pt.PostId = pl.RelatedPostId\njoin Tags t on t.Id = pt.TagId\nwhere t.TagName = '##TagName##'\ngroup by pl.RelatedPostId, p.ViewCount, p.Score, p.AnswerCount, p.Title, p.Tags\norder by [Number of Links] desc","CreationDate":"2014-05-07 18:30:59","validated":true}
{"QuerySetId":193428,"Title":"Top users per tag by country","Description":null,"QueryBody":"DECLARE  @limit int = ##Limit##;\nDECLARE @tag_id int = (select id from tags where tagname = '##TagName##');\n\n--select rank() over (order by score desc) \"Rank\", * from (\nselect top (@limit)\n  rank() over (order by sum(answers.score) desc) \"Rank\",\n  users.id \"User Link\",\n  sum(answers.score) as \"Score\"\nfrom users\n  join posts answers on (users.id = answers.owneruserid)\n  join posts parent on (answers.parentid = parent.id)\n  join posttags on (parent.id = posttags.postid)\nwhere posttags.tagid = @tag_id\n  and answers.posttypeid = 2  -- answers only\n  and LOWER(users.location) LIKE LOWER('%##CountryName##%')\ngroup by users.id\norder by sum(answers.score) desc;","CreationDate":"2014-05-12 4:02:21","validated":true}
{"QuerySetId":193928,"Title":"Top 50 Highest Rep Users","Description":null,"QueryBody":"SELECT  TOP 50\n   [Reputation]\n  ,[DisplayName]\n  ,[UpVotes]\n  ,[DownVotes]\nFROM [Users]\nORDER BY [Reputation] DESC","CreationDate":"2014-05-13 15:46:55","validated":true}
{"QuerySetId":194561,"Title":"Number of closed questions per day for the last month","Description":null,"QueryBody":"SELECT \n  datepart(dayofyear, ClosedDate) as [Day], \n  count(*) as [Number of Closed Questions]\nfrom Posts\nwhere PostTypeId = 1 -- question\n  and ClosedDate is not null\n  and datediff(day, ClosedDate, getdate()) < 30\ngroup by datepart(dayofyear, ClosedDate)\norder by datepart(dayofyear, ClosedDate)","CreationDate":"2014-06-12 12:58:05","validated":true}
{"QuerySetId":194663,"Title":"User Ratio of Upvotes to Downvotes received.","Description":"Displays the number of upvotes and downvotes received on questions and answers and their ratio.","QueryBody":"SELECT \n    SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,\n    SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,\n    (CAST(SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS float) \/ CAST(SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS float)) AS Ratio\nfrom\n    Votes v inner join Posts p on v.PostId=p.Id\nwhere\n    p.OwnerUserId=##UserId##","CreationDate":"2014-05-17 0:01:19","validated":true}
{"QuerySetId":194924,"Title":"Questions per month by tag names","Description":null,"QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where TagName IN ( '##TagName1##', '##TagName2##', '##TagName3##', '##TagName4##', \n  '##TagName5##', '##TagName6##' )\n) as X\ngroup by TagName, [Month]\norder by [Month] asc, TagName asc","CreationDate":"2014-05-18 4:11:02","validated":true}
{"QuerySetId":195056,"Title":"Get all questions which have (at least) an answer by a specified user and with no accepted answer","Description":null,"QueryBody":"SELECT  Count(q.Id) as count\nFROM Posts a\nJOIN Posts q on a.ParentId = q.Id\nWHERE a.OwnerUserId = ##UserId##\nand a.PostTypeId = 2\nand q.AcceptedAnswerId is null","CreationDate":"2017-08-19 5:26:12","validated":true}
{"QuerySetId":195487,"Title":"Number of users that fall within a certain reputation level that have the Marshal Badge","Description":null,"QueryBody":"SELECT  count(U.Id) as 'Number of users'\nFROM  users U\nJOIN badges B ON U.id = B.userid and B.name='Marshal'\nWHERE u.reputation > 1\nAND U.reputation < 2999","CreationDate":"2014-05-19 19:57:48","validated":true}
{"QuerySetId":196033,"Title":"Low post content with accepted answer","Description":null,"QueryBody":"SELECT  Posts1.id AS [Post Link], Posts1.CreationDate AS CreationDate, Posts1.Score AS Score\nFROM Posts Posts1, Posts Posts2\nWHERE Posts1.id = Posts2.AcceptedAnswerId\nAND Posts1.CreationDate > '2014-03-01 00:00:00'\nAND LEN(Posts1.BODY) < 300\nAND Posts1.BODY like '%http:\/\/stackoverflow.com\/questions\/%'\nORDER BY Posts1.CreationDate DESC","CreationDate":"2014-05-21 2:38:58","validated":true}
{"QuerySetId":197113,"Title":"Duplicates of \"Unfortunately MyApp has stopped\"","Description":null,"QueryBody":"SELECT \n  p.title, p.id\nfrom\n  posts p\n  inner join pendingflags pf on p.id = pf.postid\nwhere pf.duplicateofquestionid = 4660142","CreationDate":"2014-05-28 7:32:09","validated":true}
{"QuerySetId":198335,"Title":"Number of Post per Day for one Tag","Description":null,"QueryBody":"SELECT  --TOP 20 \n    CAST(FLOOR(CAST(CreationDate AS float)) AS DATETIME),\n    COUNT(*) AS questions\n FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\nWHERE \n    Tags.tagname = '##TagName##'\nGROUP BY CAST(FLOOR(CAST(CreationDate AS float)) AS DATETIME)\nORDER BY CAST(FLOOR(CAST(CreationDate AS float)) AS DATETIME) ASC","CreationDate":"2014-06-02 13:00:15","validated":true}
{"QuerySetId":198545,"Title":"Find unanswered tag questions with score\/rep constraints","Description":null,"QueryBody":"DECLARE  @InterestingTag nvarchar = ##InterestingTag:string?php##\nDECLARE @MinScore int = ##MinScore:int?2##\n\nSELECT TOP 100 p.id AS [Post Link], \ntc.c AS TagCount\nFROM Posts p\nJOIN PostTags pt ON p.Id = pt.PostId\nJOIN Tags t ON pt.TagId=t.Id\n\nLEFT JOIN (SELECT COUNT(*) AS c, PostId FROM PostTags GROUP By PostId) AS tc ON p.Id = tc.PostId\n\nWHERE \np.AcceptedAnswerId IS NULL\nAND p.CommunityOwnedDate is null \nAND p.ClosedDate is null \nAND p.ParentId is null \nAND p.Score >= ##MinScore##\nAND t.TagName = ##InterestingTag##","CreationDate":"2014-06-05 12:42:58","validated":true}
{"QuerySetId":198581,"Title":"Users by type of first post","Description":null,"QueryBody":"SELECT  Posts.OwnerUserId, Posts.Id, Posts.PostTypeId, Posts.ParentId, Posts.CreationDate, Users.Reputation, users.LastAccessDate\nfrom   Posts, Users\nwhere  Posts.CreationDate = (SELECT min(CreationDate) from Posts p where p.OwnerUserId = Posts.OwnerUserId) and Posts.OwnerUserId = Users.Id\norder by Users.Reputation desc","CreationDate":"2014-06-03 3:13:00","validated":true}
{"QuerySetId":198637,"Title":"Search my answer posts by tag...","Description":null,"QueryBody":"DECLARE  @MyUserID INT = ##UserID:int##\nDECLARE @Tag nvarchar(25) = ##Tag:string##\nDECLARE @PostText nvarchar(600) = ##PostText:string##\n\nSELECT @PostText = UPPER(@PostText)\n\nSELECT\n    Answer.Id AS [Post Link],\n    Answer.Score AS [Score],\n    Answer.CreationDate AS [Creation Date]\nFROM\n    Posts Question\nLEFT JOIN Posts Answer ON Question.ID = Answer.ParentId\nWHERE\n    Answer.OwnerUserId = @MyUserID AND\n    Answer.PostTypeId IN (2, 3) AND\n    Question.Tags NOT LIKE '%' + @Tag + '%' AND\n    UPPER(Question.Body) LIKE '%' + @PostText + '%'    \nORDER BY\n    Answer.Score\nASC","CreationDate":"2017-09-23 17:50:18","validated":true}
{"QuerySetId":199800,"Title":"Show all review rejection reasons","Description":null,"QueryBody":"SELECT  ReviewTaskId AS [ReviewTaskId Link]\nFROM ReviewTaskResults\nJOIN ReviewTasks ON ReviewTaskResults.ReviewTaskId = ReviewTasks.Id\nWHERE RejectionReasonId  IN (1,104)","CreationDate":"2017-09-09 6:15:21","validated":true}
{"QuerySetId":199825,"Title":"View recent edits to tag wikis and excerpts","Description":null,"QueryBody":"DECLARE  @max_days_ago int = 180\n\nSELECT\n  u.Count,\n  u.TagName,\n  u.LastEditDate,\n  u.LastEditorUserId AS [User Link],\n  'site:\/\/edit-tag-wiki\/'+CAST(u.Id AS varchar)+'|(edit)' AS [Edit],\n  'site:\/\/posts\/'+CAST(u.WikiPartId AS varchar)+'\/revisions|('+u.Type+' hist)' AS [Hist]\nFROM\n  (SELECT t.Count, t.TagName, p.LastEditDate, p.LastEditorUserId, t.Id, \n          t.ExcerptPostId AS [WikiPartId], 'excerpt' AS [Type]\n   FROM Tags AS t LEFT OUTER JOIN Posts p ON t.ExcerptPostId = p.Id\n   UNION ALL\n   SELECT t.Count, t.TagName, p.LastEditDate, p.LastEditorUserId, t.Id, \n          t.WikiPostId AS [WikiPartId], 'wiki' AS [Type]\n   FROM Tags AS t LEFT OUTER JOIN Posts p ON t.WikiPostId = p.Id) AS u\nWHERE\n  DATEDIFF(DAY, u.LastEditDate, GETDATE()) < @max_days_ago\nORDER BY\n  [LastEditDate] DESC","CreationDate":"2015-04-14 19:31:54","validated":true}
{"QuerySetId":200150,"Title":"Comment Count by User Since May 1st, 2014","Description":null,"QueryBody":"SELECT  UserId AS [User Link], COUNT(*) AS [Comments]\nFROM Comments\nWHERE CreationDate >= '2014-05-01'\nGROUP BY UserId\nORDER By COUNT(*) Desc","CreationDate":"2014-06-10 8:06:22","validated":true}
{"QuerySetId":200761,"Title":"Active users here with High SO Rep","Description":null,"QueryBody":"DECLARE  @epoch as DateTime = DateAdd(Week, - ##Weeks:int?8##, CURRENT_TIMESTAMP)\n;\nwith UserData as (\nselect here.Id as Id,\n       here.Reputation,\n       so.Reputation as SORep\nfrom Users here, [stackoverflow]..Users so\nwhere here.AccountId = so.AccountId\n  and so.Reputation >= ##SORep:int?50000##\n  and here.LastAccessDate >= @epoch\n  \n  )\n\nselect Id as [User Link],\n       (select max(Posts.Id)\n        from Posts\n        where CreationDate > @epoch\n          and OwnerUserId = UserData.Id) as [Post Link],\n       Reputation,\n       SORep\nfrom UserData","CreationDate":"2014-06-12 9:22:10","validated":true}
{"QuerySetId":201463,"Title":"Unclosed, negative voted questions with no answers upvoted","Description":null,"QueryBody":"SELECT  p.Id AS [Post ID], p.Id AS [Post Link]\nFROM Posts as p \nWHERE\n(\n  p.AcceptedAnswerID IS NULL AND\n  NOT ( p.ClosedDate IS NULL ) AND\n  p.Score < 0 \n  AND\n  not exists ( SELECT 1 from Posts as aa where aa.ParentId = p.Id and aa.Score > 0)\n)\nORDER BY p.Id ASC","CreationDate":"2014-06-16 0:23:38","validated":true}
{"QuerySetId":202499,"Title":"Which abandoned tags only have a single tagged post?","Description":null,"QueryBody":"SELECT  TagName\nFROM Tags\nWHERE Count = 1\n  and ExcerptpostId is null\n  and WikiPostId is null\n  and TagName LIKE '%py%'\nORDER BY Id","CreationDate":"2014-06-19 8:35:52","validated":true}
{"QuerySetId":202553,"Title":"fraction of nonpositively-scored Qs per tag","Description":null,"QueryBody":"SELECT  tags.tagname,\n  cast(sum(case when posts.score<1 then 1 else 0 end) as real)\/cast(count(*) as real) as fraction_of_nonpositive_Qs\nfrom (posttags inner join tags on posttags.tagid=tags.id)\n  inner join posts on posts.id=posttags.postid\nwhere tags.count>9\ngroup by tags.tagname\norder by fraction_of_nonpositive_Qs desc,tagname","CreationDate":"2014-06-19 19:27:47","validated":true}
{"QuerySetId":203016,"Title":"Questions per month, Config Mgmt Frameworks","Description":"How do Scala web frameworks compare to each other?\n\nI'm restricting the questions to those tagged Scala, to avoid polluting Playframework's result. It might be unfair, but I can't think of any other way to do it. At least all frameworks are being equally discriminated against.","QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as date) Month, \n    t.TagName\n  from (\n    SELECT p.Id, p.CreationDate from Posts p\n    join PostTags pt on pt.PostId = p.Id\n    join Tags t on t.Id = pt.TagId\n    ) pp\n  join PostTags pt on pt.PostId = pp.Id\n  join Tags t on t.Id = pt.TagId\n  where t.TagName in ( \n  'ansible-ssh', 'ansible',\n  'ansible-playbook', 'puppet', \n  'cfengine', 'chef',\n  'chef-recipe', 'salt-stack')\n) as X\ngroup by TagName, Month\norder by Month asc, count(*) desc","CreationDate":"2016-01-14 23:43:25","validated":true}
{"QuerySetId":203461,"Title":"per user: list of answers that are top-voted for their respective questions","Description":null,"QueryBody":"SELECT  id as [Post Link],score from posts as p\nwhere posttypeid=2\nand score=(SELECT max(score) from posts\n  where posttypeid=2\n  and p.parentid=parentid)\nand owneruserid=##userID##\nand score > 0\norder by score desc","CreationDate":"2014-06-24 22:34:14","validated":true}
{"QuerySetId":203713,"Title":"Average Reputation by Join Date (Month)","Description":null,"QueryBody":"SELECT  YEAR(CreationDate) as cYear, Month(CreationDate) cMonth, AVG(Reputation) as avgRep\nFROM Users\nGROUP BY YEAR(CreationDate), Month(CreationDate)\nORDER BY 1,2","CreationDate":"2014-06-23 17:32:03","validated":true}
{"QuerySetId":203743,"Title":"Probability of having answers accepted in 2013 by Reputation (in Hundreds)","Description":null,"QueryBody":"SELECT  Tot.Rep, Tot.TotalAnswers, Acc.AcceptedAnswers, (1.0 * Acc.AcceptedAnswers \/ Tot.TotalAnswers)\nFROM \n(SELECT Users.Reputation \/ 100 as Rep, COUNT(Users.Id) as TotalAnswers\nFROM Posts JOIN Users \n     ON Posts.OwnerUserId = Users.Id\nWHERE Posts.PostTypeId = 2 AND YEAR(Posts.CreationDate) = 2013\nGROUP BY Users.Reputation \/ 100) as Tot\nJOIN\n(SELECT Users.Reputation \/ 100 as Rep, COUNT(Users.Id) as AcceptedAnswers\nFROM Posts as A \n     JOIN \n     Posts as B\n     on A.AcceptedAnswerId = B.Id AND YEAR(B.CreationDate) = 2013\n     JOIN \n     Users \n     on Users.Id = B.OwnerUserId \n     GROUP BY Users.Reputation \/ 100) as Acc\nOn Tot.Rep = Acc.Rep\nORDER BY 1","CreationDate":"2014-06-24 17:05:24","validated":true}
{"QuerySetId":203911,"Title":"Probability of having an answer accepted by Join Date","Description":null,"QueryBody":"SELECT  (ACC.cYear - 2011) * 12 +  ACC.cMonth as Monthy, (1.0 * ACC.AccAnswers \/ TOT.TotAnswers) as Percentage\nFROM\n(SELECT YEAR(Users.CreationDate) as cYear, Month(Users.CreationDate) cMonth, COUNT(Users.Id) as AccAnswers\nFROM Posts as A \n     JOIN \n     Posts as B\n     on A.AcceptedAnswerId = B.Id \n     JOIN \n     Users \n     on Users.Id = B.OwnerUserId \n     GROUP BY YEAR(Users.CreationDate), Month(Users.CreationDate)) AS ACC\nJOIN \n(SELECT YEAR(Users.CreationDate) as cYear, Month(Users.CreationDate) cMonth, COUNT(Users.Id) as TotAnswers\nFROM Posts as A \n     JOIN \n     Users \n     on Users.Id = A.OwnerUserId \n     WHERE A.PostTypeId = 2\n     GROUP BY YEAR(Users.CreationDate), Month(Users.CreationDate)) AS TOT\nON ACC.cYear = TOT.cYear AND ACC.cMonth = TOT.cMonth\nORDER BY 1,2","CreationDate":"2014-06-24 22:05:12","validated":true}
{"QuerySetId":204368,"Title":"All questions with a *single* tag","Description":null,"QueryBody":"SELECT  Id as [Post Link], AnswerCount\nFROM Posts\nWHERE PostTypeId = 1\n  AND Tags = CONCAT('<', ##Tag:string##, '>')\n  AND ClosedDate IS NULL\nORDER BY CreationDate DESC","CreationDate":"2019-08-29 1:10:47","validated":true}
{"QuerySetId":204585,"Title":"Number of unique users with accept answers for tagslike","Description":null,"QueryBody":"SELECT   count(DISTINCT Posts.OwnerUserId)\n    from  Posts, PostTags, Tags \n   where  Posts.PostTypeId = 2\n     and  Posts.Id IN\n          ( SELECT Posts.AcceptedAnswerId\n             from Posts, PostTags, Tags\n            where Posts.PostTypeId = 1\n              and Posts.Id = PostTags.PostId \n              and PostTags.TagId = Tags.Id \n              and Tags.TagName like '%##TagName##%')","CreationDate":"2014-06-27 19:08:35","validated":true}
{"QuerySetId":204641,"Title":"Most prolific downvoters: Weighted downvote ratio","Description":"Corrected and improved version of \nhttp:\/\/data.stackexchange.com\/travel%20answers\/query\/153885\/votes-upvote-to-downvote-ratio","QueryBody":"SELECT  TOP 50\n  \n  Id as [User Link],\n  Reputation,\n  UpVotes,\n  DownVotes,\n  ROUND(CAST(DownVotes AS float) \/ (UpVotes + Downvotes) , 1) * Downvotes as Weighted\n  \n  FROM Users\n  WHERE DownVotes > 0 AND Id > -1\n  ORDER BY Weighted DESC","CreationDate":"2014-06-27 21:54:20","validated":true}
{"QuerySetId":205253,"Title":"All tables with column information.","Description":"Simple but useful. Returns all tables in ASC order, along with all their columns in order, their data type name, character limit and whether it is nullable. ","QueryBody":"SELECT \n  sys.tables.name AS [Table Name],\n  sys.columns.name AS [Column Name],\n  sys.columns.column_id AS [Column ID],\n  sys.types.name AS [Data Type],\n  sys.columns.max_length AS [Max Length],\n  sys.columns.is_nullable AS [Nullable?]\nFROM sys.columns \n  INNER JOIN sys.tables\n    ON sys.columns.object_id = sys.tables.object_id\n  INNER JOIN sys.types\n    ON sys.types.user_type_id = sys.columns.user_type_id\nORDER BY sys.tables.name ASC, sys.columns.column_id ASC;","CreationDate":"2014-07-01 0:46:12","validated":true}
{"QuerySetId":206242,"Title":"Users who have python + ios tags","Description":null,"QueryBody":"SELECT \n  DISTINCT(DisplayName),\n  Location,\n  CONCAT(AboutMe,WebsiteUrl),\n  Reputation,\n  CONCAT('http:\/\/stackoverflow.com\/users\/', Users.id)\nFROM Users\nINNER JOIN Posts ON Posts.OwnerUserId = Users.Id\nINNER JOIN PostTags ON (Posts.Id = PostTags.PostId)\nWHERE PostTags.TagId IN (SELECT Id from Tags WHERE TagName = 'ios')\nAND Users.id in (\n  SELECT Users.id\n  FROM Users\n  INNER JOIN Posts ON Posts.OwnerUserId = Users.Id\n  INNER JOIN PostTags ON (Posts.Id = PostTags.PostId)\n  WHERE PostTags.TagId IN (SELECT Id from Tags WHERE TagName = 'python')\n)\nAND age < 20\nORDER BY Reputation DESC","CreationDate":"2014-08-02 10:28:07","validated":true}
{"QuerySetId":206289,"Title":"My approved edit votes, that were approved","Description":null,"QueryBody":"SELECT  \ncount(*) as approvedandapproved\nFROM\n  suggestededitvotes \n  INNER JOIN votetypes \n    ON votetypeid = votetypes.id \n  INNER JOIN suggestededits \n    ON suggestededits.id = suggestededitvotes.suggestededitid\n\nWHERE \n  suggestedEdits.approvalDate IS NOT NULL\n  AND votetypes.name = 'UpMod'\n  AND suggestededitvotes.userid = ##UserId##;\n  \nSELECT \ncount(*) as approvedandrejected\nFROM\n  suggestededitvotes \n  INNER JOIN votetypes \n    ON votetypeid = votetypes.id \n  INNER JOIN suggestededits \n    ON suggestededits.id = suggestededitvotes.suggestededitid\n\nWHERE \n  suggestedEdits.approvalDate IS NOT NULL\n  AND votetypes.name = 'DownMod'\n  AND suggestededitvotes.userid = ##UserId##;","CreationDate":"2014-07-04 17:16:56","validated":true}
{"QuerySetId":206384,"Title":"users with large number of questions without accepted answer","Description":null,"QueryBody":"SELECT  TOP 500\n    p.OwnerUserId AS [User Link],\n    COUNT(p.OwnerUserId) AS numberOfQuestionsWithoutAcceptedAnswer\nFROM\n    Posts AS p\nWHERE\n    AcceptedAnswerId IS NULL\n    AND PostTypeId = 1\nGROUP BY\n    p.OwnerUserId\nORDER BY\n    numberOfQuestionsWithoutAcceptedAnswer DESC","CreationDate":"2014-07-05 0:04:54","validated":true}
{"QuerySetId":206553,"Title":"viewcounts for posts with a hihg score","Description":null,"QueryBody":"SELECT  p.viewcount\n, case p.posttypeid when 1 then 'Q' when 2 then 'A' end as QA\n, p.id as [Post Link]\nfrom posts p\nwhere p.score > 100\norder by  p.viewcount desc","CreationDate":"2014-07-05 19:34:49","validated":true}
{"QuerySetId":206983,"Title":"Mean Expertise Contribution (MEC) in a tag","Description":null,"QueryBody":"DECLARE  @tag_debate float = 2.22;\n\nwith answers as (\n  select a.OwnerUserId UserId,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) utility,\n         1.0*q.AnswerCount debatableness,\n         1.0\/rank() over (partition by q.Id order by a.Score desc) *\n         q.AnswerCount\/@tag_debate EC\n  from Posts q\n       join Posts a on q.Id = a.ParentId\n       join PostTags on q.Id = PostId\n       join Tags t on TagId = t.Id\n  where TagName = '##tag##' --and q.Id = 9929585\n),\n\nuser_MEC as (\n  select UserId as [User Link],\n         sum(EC)\/count(*) MEC,\n         avg(utility) AU, \n         avg(debatableness) D,\n         @tag_debate D_avg_t,\n         count(*) Q_u_t\n  from answers\n  group by UserId  \n)\n\nselect count(*)\nfrom user_MEC","CreationDate":"2014-07-11 0:31:41","validated":true}
{"QuerySetId":207274,"Title":"Which of your answers should you delete?","Description":"Returns links to answers that have a negative overall score, what the overall score is and if the answer was accepted.","QueryBody":"SELECT \n  a.id [Post Link],\n  sum(case v.votetypeid when 1 then 15 when 2 then 10 when 3 then -2 end) [Net reputation]\nfrom Posts a\nleft join Votes v on v.postid = a.id and v.votetypeid in (1, 2, 3)\nwhere a.owneruserId = ##UserId## and a.posttypeid = 2\ngroup by a.id\nhaving sum(case v.votetypeid when 1 then 15 when 2 then 10 when 3 then -2 else 1 end) < 0\norder by 2","CreationDate":"2014-07-10 5:01:48","validated":true}
{"QuerySetId":207858,"Title":"Users with quite a few low scoring Questions and Answers","Description":"This query gets a list of user links who have at least 5 Posts with a score of -5 or lower ordered by the amount of Posts that meet the above criteria.","QueryBody":"DECLARE  @PostCount int\nDECLARE @AmountOfBadPosts int = ##AmountOfBadPosts##\nDECLARE @AmountOfVotesConsideredBad int = ##AmountOfVotesConsideredBad##\n\nSELECT\n  CONCAT('http:\/\/stackoverflow.com\/users\/' , p.OwnerUserId) AS 'User Link', \n  COUNT(p.Id) as PostCount\nFROM Posts p\nJOIN PostTypes pt on pt.Id = p.PostTypeId\nWHERE \n  p.Score <  @AmountOfVotesConsideredBad \n  AND pt.Name in('Answer', 'Question')\n  AND p.OwnerUserId is not null -- I think the empty Id are orphan posts\nGROUP BY p.OwnerUserId\nHAVING COUNT(p.Id) > @AmountOfBadPosts\nORDER BY PostCount desc","CreationDate":"2014-07-11 21:07:55","validated":true}
{"QuerySetId":208548,"Title":"Downvote percentages for users within a specific rep range","Description":null,"QueryBody":"WITH in a specified reputation range.\n\nSelect\nId as [User Link], Reputation, UpVotes, Downvotes, Round(((Cast((Downvotes*100) AS float))\/(Cast ((Upvotes+Downvotes) as float))),2) as PercentDownvotes \nFrom Users\nWhere Reputation >= ##MinReputation## and Reputation<= ##MaxReputation## and (UpVotes + Downvotes > 0)\nOrder by PercentDownvotes Desc","CreationDate":"2014-07-15 15:57:01","validated":true}
{"QuerySetId":209922,"Title":"Closed questions grouped by reputation of the asking user","Description":null,"QueryBody":"SELECT  u.Reputation, COUNT(*)\nFROM\n  Posts p\nINNER JOIN Users u ON u.Id = 1387233\nWHERE\n  ClosedDate IS NOT NULL\nGROUP BY u.Reputation\nORDER BY u.Reputation","CreationDate":"2015-11-21 19:54:29","validated":true}
{"QuerySetId":210058,"Title":"Answer score as a function of length and acceptance","Description":"Plots average answer score, +\/- 1 standard deviation, as a function of binned answer length. Splits data into accepted vs. not accepted answers before doing so.","QueryBody":"SELECT  AVG(LEN(A.Body)) as AverageLength,\n       AVG(A.Score) AS AnswerScore,\n       AVG(A.Score) + STDEV(A.Score) AS PlusOneSigma,\n       AVG(A.Score) - STDEV(A.Score) AS MinusOneSigma\nFROM Posts A INNER JOIN Posts Q ON A.ParentID = Q.Id\nWHERE A.PostTypeId = 2 AND\n      LEN(A.Body) <= 20000 AND\n      A.Id = Q.AcceptedAnswerID\nGROUP BY ROUND(LEN(A.Body), -3) ORDER BY ROUND(LEN(A.Body), -3)","CreationDate":"2014-07-24 9:42:29","validated":true}
{"QuerySetId":210069,"Title":"Answer score as a function of question score","Description":"Plots average answer score, +\/- 1 standard deviation, as a function of binned question score. Increase the Q.Score cutoff to see more exaggerated but noisier trends.","QueryBody":"SELECT  AVG(Q.Score) AS QuestionScore,\n       AVG(A.Score) AS AnswerScore,\n       AVG(A.Score) + STDEV(A.Score) AS PlusOneSigma,\n       AVG(A.Score) - STDEV(A.Score) AS MinusOneSigma\nFROM Posts A INNER JOIN Posts Q ON A.ParentId = Q.Id\nWHERE A.PostTypeId = 2 AND\n      Q.Score <= 100\nGROUP BY SIGN(Q.Score)*ROUND(SQRT(ABS(Q.Score)*10), 0) ORDER BY SIGN(Q.Score)*ROUND(SQRT(ABS(Q.Score)*10), 0)","CreationDate":"2014-07-24 10:18:52","validated":true}
{"QuerySetId":210255,"Title":"Users from a given place ranked by Rep","Description":null,"QueryBody":"SELECT \n  U.Id as [User Link], \n  U.Location,\n  U.Age,\n  U.Reputation,\n  SUM(U.[Reputation])\/P.[Number of Posts] AS [Average Reputation per Post]\nFROM\n  Users AS U\nJOIN\n  (\n    SELECT\n      OwnerUserId,\n      COUNT(*) AS [Number of Posts]\n    FROM\n      Posts\n    GROUP BY\n      OwnerUserId\n  ) AS P\nON\n  U.Id = P.OwnerUserId\nWHERE\n  U.Location LIKE '%##Location##'\nGROUP BY\n  U.Id, \n  U.Location,\n  U.Age,\n  U.Reputation,\n  P.[Number of Posts]\nORDER BY\n  U.Reputation DESC","CreationDate":"2014-09-23 15:52:12","validated":true}
{"QuerySetId":210595,"Title":"Questions with (likely) uninformative titles answered by a user","Description":null,"QueryBody":"SELECT  q.Id as [Post Link], q.Tags from Posts q\ninner join Posts a \non a.ParentId = q.Id \nwhere a.OwnerUserId = ##UserId## and \n(q.Title like  '%anyone%' \nor q.Title like '%difficult%' \nor q.Title like '%doubt%'\nor q.Title like '%easy%'\nor q.Title like '%exercise%'\nor q.Title like '%hard%'\nor q.Title like '%help%'\nor q.Title like '%homework%'\nor q.Title like '%interesting%'\nor q.Title like '% math%'\nor q.Title like '%please%'\nor q.Title like '%problem%'\nor q.Title like '%question%'\nor q.Title like '%someone%'\nor q.Title like '%struggl%'\nor q.Title like '%stuck%'\nor q.Title like '% very%'\nor q.Title like '%wrong%'\n)\norder by a.CreationDate desc","CreationDate":"2014-07-27 19:29:31","validated":true}
{"QuerySetId":210813,"Title":"Post Status by Subjective Title","Description":null,"QueryBody":"SELECT  count(*)\nfrom posts\nwhere PostTypeId = 1\nand title like '%How do you%' and score < 0","CreationDate":"2014-07-28 12:32:31","validated":true}
{"QuerySetId":211122,"Title":"Average answer length of a user","Description":"Queries for statistics related to the length of a given user's answers","QueryBody":"SELECT  TOP 250\n  u.DisplayName,\n  u.Reputation, \n  Count(*) AS [AnswerCount],\n  (SUM(p.Score) * 10 + COUNT(p.Id) * 15) \/ COUNT(p.Id) \n    AS 'AvgRepPerAnswer',\n  Min(Len(p.Body)) AS [MinCharPerAns],\n  Avg(Len(p.Body)) AS [AvgCharPerAns],\n  Max(Len(p.Body)) AS [MaxCharPerAns]\n   \nFROM Users u INNER JOIN Posts p ON (u.Id = P.OwnerUserId)\nWHERE \n  p.PostTypeId = 2\nGROUP BY \n  u.DisplayName, u.Reputation\nORDER BY \n  Avg(Len(p.Body)) DESC","CreationDate":"2014-08-11 14:17:05","validated":true}
{"QuerySetId":211179,"Title":"Count of posts scored between (10,100), grouped by score (from help page)","Description":null,"QueryBody":"SELECT  Score, COUNT(Score)\nFROM Posts\nWHERE 10 < Score AND Score < 100\nGROUP BY Score\nORDER BY Score","CreationDate":"2014-07-30 4:33:04","validated":true}
{"QuerySetId":211467,"Title":"Average Time to (in seconds) to answer a question by language tag","Description":null,"QueryBody":"DECLARE  @Language nvarchar(25) = ##LanguageTag:string##;\nDECLARE @tagid int;\n\nselect @tagid = Id\nfrom Tags\nwhere TagName = @Language\n\nprint @Language + Convert(NVarchar(max), @tagid);","CreationDate":"2014-07-31 21:03:53","validated":true}
{"QuerySetId":211745,"Title":"The top-250 most popular questions about concurrency","Description":null,"QueryBody":"SELECT  top 250\n    Posts.Id, \n    Posts.Body, \n    Posts.CreationDate,\n    Posts.Score,\n    Posts.AnswerCount,\n    Posts.CommentCount,\n    Posts.FavoriteCount,\n    Posts.ViewCount,\n    Posts.AcceptedAnswerId,\n    Posts.Tags [Tags]\nFROM Tags    \n    JOIN PostTags ON PostTags.TagId = Tags.Id\n    JOIN Posts ON Posts.Id = PostTags.PostId \nWHERE    \nPosts.PostTypeId=1\nand\n(Tags.TagName = 'C#'\nor Tags.TagName = '.net'\nor Tags.TagName = 'asp.net'\nor Tags.TagName = 'asp.net-mvc'\nor Tags.TagName = 'asp.net-core'\nor Tags.TagName = 'asp.net-core-mvc'\nor Tags.TagName = 'entity-framework')\n\nGroup By Posts.Id, Posts.Body, Posts.CreationDate, Posts.Score, Posts.AnswerCount, Posts.CommentCount, Posts.FavoriteCount, Posts.ViewCount, Posts.AcceptedAnswerId, Posts.tags\n\nOrder By [ViewCount] Desc","CreationDate":"2016-11-29 2:07:24","validated":true}
{"QuerySetId":213154,"Title":"Get All Tags for All Questions with LIKE term in Title","Description":null,"QueryBody":"DECLARE  @SearchTerm VARCHAR(30) = ##SearchTerm:string##\n\nSELECT Id AS [Post Link], Tags\nFROM Posts\nWHERE PostTypeId = 1 \n  AND LOWER(Title) LIKE '%'+@SearchTerm+'%'\n  AND LOWER(Tags) NOT LIKE '%marvel%'","CreationDate":"2014-08-02 5:41:58","validated":true}
{"QuerySetId":213738,"Title":"Average upvotes over time for a post","Description":null,"QueryBody":"SELECT \n  SUM([Count]) AS [Upvotes],\n  COUNT(*) AS [Months],\n  AVG([Count]) AS [Upvotes\/Month] \nFROM (\n  SELECT\n    DATEPART(year, CreationDate) AS [Year],\n    DATEPART(month, CreationDate) AS [Month],\n    COUNT(*) AS [Count]\n  FROM Votes\n  WHERE PostId = ##PostId:int##\n    AND VoteTypeId = 2 -- upvote\n  GROUP BY DATEPART(month, CreationDate), DATEPART(year, CreationDate)\n) AS X\n\nSELECT\n  SUM([Count]) AS [Upvotes],\n  COUNT(*) AS [Months],\n  AVG([Count]) AS [Upvotes\/Month] \nFROM (\n  SELECT\n    DATEPART(year, CreationDate) AS [Year],\n    DATEPART(month, CreationDate) AS [Month],\n    COUNT(*) AS [Count]\n  FROM Votes\n  WHERE PostId = 23961231\n    AND VoteTypeId = 2 -- upvote\n  GROUP BY DATEPART(month, CreationDate), DATEPART(year, CreationDate)\n) AS X","CreationDate":"2014-08-02 21:09:59","validated":true}
{"QuerySetId":214024,"Title":"Identify-this-x questions with unaccepted answers","Description":null,"QueryBody":"SELECT  p.Id AS [Post Link], Score, DisplayName, Reputation\nFROM Posts p\nINNER JOIN Users u\nON p.OwnerUserId = u.Id\nWHERE PostTypeId = 1\nAND AcceptedAnswerId IS NULL\nAND AnswerCount != 0\nAND Tags LIKE '%identification-%'","CreationDate":"2014-08-22 10:27:13","validated":true}
{"QuerySetId":215057,"Title":"Posts edited after a \"Whilst this may theoretically answer the question...\" comment","Description":null,"QueryBody":"SELECT  TOP 200 \n  Id\nFROM Posts \nWHERE EXISTS (\n  SELECT * FROM Comments \n  WHERE Comments.Text LIKE 'While this link may answer the question, it is better to include the essential parts of the answer here%' \n  AND Comments.PostId = Posts.Id \n  AND Posts.LastEditDate > Comments.CreationDate\n) ORDER BY Posts.CreationDate DESC","CreationDate":"2015-03-12 23:50:37","validated":true}
{"QuerySetId":215152,"Title":"Percentage of AngularJS question without vote in the last year","Description":null,"QueryBody":"SELECT \n  CASE WHEN Votes.Id IS NULL THEN 1 ELSE 0 END AS Unvoted,\n  VoteTypes.Name,\n  Posts.Score,\n  Posts.Title\n  --DAY(Posts.CreationDate) AS DayOfCreation,\n  --(100 * CAST(SUM(CASE WHEN Votes.Id IS NULL THEN 1 ELSE 0 END) AS float) \/ CAST(COUNT(*) AS float)) AS PercentageOfUnvotedQuestions,\n  --COUNT(*) AS NumberOfQuestions\nFROM Posts\n  LEFT JOIN Votes ON Posts.Id = Votes.PostId\n  JOIN PostTags ON Posts.Id = PostTags.PostId\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  JOIN VoteTypes ON VoteTypes.Id = Votes.VoteTypeId\nWHERE Posts.PostTypeId = 1 \n  AND Posts.CreationDate > GETDATE() - 5\n  AND Tags.TagName = ##TagName:string?angularjs##\n--GROUP BY DAY(Posts.CreationDate)\nORDER BY DAY(Posts.CreationDate)","CreationDate":"2014-08-06 0:19:03","validated":true}
{"QuerySetId":215843,"Title":"Find my answers for user X","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link], a.CreationDate\nFROM Posts q\n  INNER JOIN Users u ON q.OwnerUserId = u.Id\n  INNER JOIN Posts a ON q.Id = a.ParentID\nWHERE u.Id = 1164789\n  AND a.OwnerUserId = 2610249\nORDER BY a.CreationDate DESC","CreationDate":"2017-08-09 17:04:12","validated":true}
{"QuerySetId":215919,"Title":"Virtual Meta Reputation for User X","Description":null,"QueryBody":"SELECT \n  -- p.Id AS [Post Link],\n  -- v.VoteTypeId,\n  SUM(CASE\n    WHEN v.VoteTypeId = 1 THEN 15\n    WHEN v.VoteTypeId = 2 AND p.PostTypeId = 1 THEN 5\n    WHEN v.VoteTypeId = 2 AND p.PostTypeId = 2 THEN 10\n    WHEN v.VoteTypeId = 3 THEN -2\n  END) AS Reputation,\n  COUNT(CASE v.VoteTypeId WHEN 1 THEN 1 END) AS Accepts,\n  COUNT(CASE WHEN v.VoteTypeId = 2 AND p.PostTypeId = 1 THEN 1 END) AS QuestionsUpVotes,\n  COUNT(CASE WHEN v.VoteTypeId = 2 AND p.PostTypeId = 2 THEN 1 END) AS AnswerUpVotes,\n  COUNT(CASE v.VoteTypeId WHEN 3 THEN 1 END) AS DownVotes\nFROM Posts p\n  INNER JOIN Votes v ON p.Id = v.PostId\n  INNER JOIN Users u ON p.OwnerUserId = u.Id\nWHERE v.VoteTypeId IN (1,2,3) -- accepts,ups,downs\n  AND p.OwnerUserId = ##UserId:int?456814##","CreationDate":"2020-01-12 21:05:29","validated":true}
{"QuerySetId":216269,"Title":"questions that seem to contain part or all of a sudoers file","Description":null,"QueryBody":"SELECT  Id as [Post Link], Score, ViewCount as Views\nFROM Posts\nWHERE PostTypeId = 1 AND Body LIKE '%ALL=(ALL:ALL)%'\nORDER BY Views DESC","CreationDate":"2015-04-20 20:04:45","validated":true}
{"QuerySetId":216672,"Title":"Unspectacular posts with a tag","Description":null,"QueryBody":"SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link], p.Body\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  p.AcceptedAnswerID IS NULL AND\n  p.ClosedDate IS NULL AND\n  p.Score <= 0 AND\n  p.Tags LIKE '%##Tag##%' AND\n  1 >= ALL (\n    SELECT a.Score FROM Posts a WHERE a.ParentId = p.Id\n  )\n)\nORDER BY p.CreationDate DESC","CreationDate":"2014-08-11 1:32:35","validated":true}
{"QuerySetId":217611,"Title":"Find users by display name","Description":null,"QueryBody":"SELECT  Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere DisplayName like '%##DisplayName##%'\norder by Reputation desc","CreationDate":"2014-08-14 6:26:27","validated":true}
{"QuerySetId":218216,"Title":"Questions about Records (Movies & TV)","Description":null,"QueryBody":"SELECT  DISTINCT Id as [Post Link], Tags\nFROM Posts\nWHERE PostTypeId = 1\nAND\n(\n     Title LIKE 'What is the%'\n  OR Title LIKE 'What was the%'\n  OR Title LIKE 'Which%'\n  OR Title LIKE 'Who was%'\n  OR Title LIKE 'When did the%'\n)\nAND\n(\n     Title LIKE '%most%'\n  OR Title LIKE '%longest%'\n  OR Title Like '%first%'\n  OR Title LIKE '%biggest%'\n  OR Title LIKE '%latest%'\n  OR Title LIKE '%earliest%'\n)\nAND NOT\n(\n     Tags LIKE '%-appearance%'\n  OR Tags LIKE '%cinema-history%'\n  OR Tags LIKE '%identify-this-%'\n  OR Tags LIKE '%analysis%'\n  OR Tags LIKE '%breaking-bad%'\n  OR Tags LIKE '%the-other-woman%'\n  OR Tags LIKE '%friends%'\n  OR Tags LIKE '%sleepy-hollow%'\n  OR Tags LIKE '%soundtrack%'\n)","CreationDate":"2014-08-16 8:33:49","validated":true}
{"QuerySetId":218381,"Title":"All Answers for User X","Description":null,"QueryBody":"SELECT \n  a.Id,\n  q.Title,\n  a.Score,\n  FORMAT(a.CreationDate, 'yyyy-MM-dd') AS [Date]\nFROM Users u\n  INNER JOIN Posts a ON u.Id = a.OwnerUserId\n  INNER JOIN Posts q ON a.ParentID = q.Id\nWHERE u.Id = ##UserId:int##\nORDER BY a.Score DESC, [Date] DESC","CreationDate":"2014-08-18 10:11:34","validated":true}
{"QuerySetId":218561,"Title":"Number of distinct users who posted a question, in the last year (365 days)","Description":"Number of distinct users who posted a Q or an A, in the last 30 days","QueryBody":"SELECT  \n  COUNT(DISTINCT Users.id)\nFROM \n  Users\nJOIN \n  Posts ON \n    Posts.OwnerUserId = Users.Id \n    AND (Posts.PostTypeId =2)\nWHERE \n  DATEDIFF(day, Posts.CreationDate, GETDATE()) < 365","CreationDate":"2014-08-18 1:24:22","validated":true}
{"QuerySetId":218583,"Title":"High-rep Users with only one post","Description":null,"QueryBody":"SELECT  \n  u.Id as [User Link], \n  u.Reputation\nfrom Users as u, Posts as p\nwhere u.Reputation > ##RepThreshold:int?10000## \n  and u.Id = p.OwnerUserId\n  and p.PostTypeId in (1, 2) -- question, answer\ngroup by u.Id, u.Reputation\nhaving count(p.Id) = 1 and not count(p.Id) > 1\norder by u.Reputation desc","CreationDate":"2014-08-18 11:49:14","validated":true}
{"QuerySetId":219008,"Title":"What is the tag new users use the most when they first come to the site?","Description":null,"QueryBody":"SELECT  p.OwnerDisplayName, COUNT(p.Title)\n  FROM Posts p\n WHERE p.Tags = '<identification-request>'\nGROUP BY p.OwnerDisplayName\nHAVING COUNT(*) = 1","CreationDate":"2014-08-19 21:16:17","validated":true}
{"QuerySetId":219404,"Title":"Get questions where title is same as body","Description":null,"QueryBody":"SELECT  TOP 10 p.Id AS [Post Link], p.Body, p.CreationDate\nFROM (\n  SELECT * FROM Posts\n  WHERE PostTypeId = 1\n    AND LEN(Body) < LEN(Title) + 30\n    AND LEN(Body) > LEN(Title)\n) p\nINNER JOIN (\n  SELECT ph1.* FROM PostHistory ph1\n  INNER JOIN (\n    SELECT PostId, MAX(CreationDate) AS CreationDate\n    FROM PostHistory\n    WHERE PostHistoryTypeId IN (2,5,8)\n    GROUP BY PostId\n  ) ph2\n  ON ph1.PostId = ph2.PostId AND ph1.CreationDate = ph2.CreationDate\n  WHERE PostHistoryTypeId IN (2,5,8)\n) ph\nON p.Id = ph.PostId\nWHERE LOWER(p.Title) = LOWER(ph.Text)\nORDER BY CreationDate DESC","CreationDate":"2020-12-08 2:23:01","validated":true}
{"QuerySetId":219734,"Title":"data.table tagged questions in R","Description":null,"QueryBody":"SELECT  * from Posts p\njoin PostTags pt on pt.PostId = p.Id\njoin Tags t on t.Id = pt.TagId\nwhere t.TagName = 'data.table' and p.CreationDate >= '2012-01-01'","CreationDate":"2014-08-21 23:05:21","validated":true}
{"QuerySetId":219972,"Title":"Users with close-vote privileges ordered by last access date.","Description":null,"QueryBody":"SELECT  \n  ROW_NUMBER() OVER (ORDER BY LastAccessDate DESC) AS ' ',\n  Id As [User Link],\n  LastAccessDate\nFROM\n  Users\nWHERE\n  Reputation >3000\nORDER BY\n  LastAccessDate \n  DESC","CreationDate":"2014-08-22 17:16:40","validated":true}
{"QuerySetId":220047,"Title":"Accepted answers without accept vote","Description":null,"QueryBody":"SELECT  p.AcceptedAnswerId as [Post Link] from Posts p \nwhere p.AcceptedAnswerId not in (\nSELECT v.PostId from Votes v \nwhere v.VoteTypeId = 1 )","CreationDate":"2014-08-22 23:42:36","validated":true}
{"QuerySetId":220464,"Title":"Reputation < X in % of Total Users","Description":null,"QueryBody":"WITH  total_users AS (\nSELECT\n  tu_count = Count(*)\nFROM\n  Users\n)\n, users_rep_x AS (\nSELECT\n  ru_count = COUNT(*) \nFROM\n  Users u\nWHERE\n  u.Reputation < ##RepMax##\n)\nSELECT\n  DISTINCT \n    (SELECT tu_count FROM total_users) AS [Total Users],\n    (SELECT ru_count FROM users_rep_x) AS [Users Rep > X],\n    CAST( ( CAST( ( SELECT ru_count FROM users_rep_x ) AS decimal(10,5) ) \/ CAST( ( ( SELECT tu_count FROM total_users ) \/ 100 ) AS decimal(10,5) ) ) AS decimal(10,5) ) AS [RepU of TotU in %]\nFROM\n  Users u\nWHERE\n  u.Reputation < ##RepMax##","CreationDate":"2014-08-24 15:17:56","validated":true}
{"QuerySetId":220703,"Title":"Where are my questions answered with more votes than accepted answer","Description":null,"QueryBody":"SELECT \n  A.id as [Post Link],\n  A.score,\n  max(OA.score) as \"other max score\",\n  CASE\n      WHEN max(OA.score) - A.score > 0 THEN '***'\n  END as \"look here\"\nfrom\n  Posts Q\n  join Posts A on (A.id = Q.AcceptedAnswerId)\n  left join Posts OA on (Q.id = OA.ParentId and OA.id != Q.AcceptedAnswerId)\nwhere\n  Q.OwnerUserId = ##UserId##\ngroup by\n  A.id, A.score\norder by\n  A.score ASC","CreationDate":"2014-08-26 4:28:33","validated":true}
{"QuerySetId":220746,"Title":"Top 500 Favorited Posts Islam","Description":null,"QueryBody":"SELECT  top 500 id as [Post Link], FavoriteCount, CreationDate\nfrom posts\norder by FavoriteCount desc","CreationDate":"2014-08-26 13:31:16","validated":true}
{"QuerySetId":220758,"Title":"Tor Top 100 Favorited Posts","Description":null,"QueryBody":"SELECT  top 100 id as [Post Link], FavoriteCount\nfrom posts\norder by FavoriteCount desc","CreationDate":"2014-08-26 14:17:17","validated":true}
{"QuerySetId":221243,"Title":"Number of posts in past 30 days","Description":null,"QueryBody":"SELECT  COUNT(*) FROM Posts \nWHERE PostTypeId in (1,2) AND CreationDate >= DATEADD(DAY, -30, GETDATE())","CreationDate":"2014-08-28 17:55:32","validated":true}
{"QuerySetId":221665,"Title":"Post Links by PostId ascending","Description":null,"QueryBody":"SELECT   PostId, RelatedPostId from PostLinks\nwhere LinkTypeId = 1\norder by PostId asc","CreationDate":"2014-08-31 7:01:26","validated":true}
{"QuerySetId":222041,"Title":"Top Ranking by Tag and Country","Description":null,"QueryBody":"SELECT  TOP 500\n    ROW_NUMBER() OVER(ORDER BY\n    \n    sum(case when VoteTypeId = 2 then 1 else\n    (case when VoteTypeId = 3 then -1 else 0 end)\n    end)\n    \n    DESC) AS [#],\n    \n    Users.Id AS [User Link],\n     \n    sum(case when VoteTypeId = 2 then 1 else\n    (case when VoteTypeId = 3 then -1 else 0 end)\n    end) AS CalcRep\n    \nFROM\n    Users, Tags\n          INNER JOIN PostTags ON PostTags.TagId = Tags.id\n          INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n          INNER JOIN Votes ON Votes.PostId = Posts.Id\nWHERE\n    LOWER(Location) LIKE LOWER('%##FullCountryName##%')\n    AND Posts.OwnerUserId = Users.Id\n    AND LOWER(Tags.TagName) = LOWER('##TagName##')\nGROUP BY\n    Users.Id\nORDER BY\n    CalcRep DESC;","CreationDate":"2015-09-08 14:00:14","validated":true}
{"QuerySetId":223240,"Title":"Top SO users in South Carolina area","Description":null,"QueryBody":"SELECT  Id AS [User Link],Reputation,Location\nFROM Users\nWHERE lower(Location) LIKE '%washington, d.c.%'\n   OR lower(Location) LIKE '%washington, dc%'\n   OR lower(Location) LIKE '%washington dc%'\n   OR lower(Location) LIKE '%dc%'\n   OR lower(Location) LIKE '%district of columbia%'\nORDER BY Reputation DESC","CreationDate":"2020-02-14 0:20:53","validated":true}
{"QuerySetId":225097,"Title":"Within a tag, percentage of questions with no other tag","Description":null,"QueryBody":"SELECT  count(p.Id), count(q.Id), count(p.Id)\/count(q.Id) from Posts p, Posts q\nwhere p.Tags like '%##TagName##%' \nand q.Tags like '<##TagName##>'","CreationDate":"2014-09-14 3:22:40","validated":true}
{"QuerySetId":227165,"Title":"JavaScript Trends (# of Questions per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'angularjs', 'backbone.js', 'ember.js', 'meteor', 'reactjs'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2016-01-12 18:38:38","validated":true}
{"QuerySetId":227343,"Title":"users whose first question was closed but still had multiple posts","Description":null,"QueryBody":"SELECT  sq.count, count(distinct sq.[user])\nfrom (SELECT sq.[user], case when count(distinct posts.id) = 1 then '1' else '>1' end as count\nfrom (SELECT sq.[user]\nfrom (SELECT users.id as [user], posts.id as first_post, posts.closeddate,\nrow_number() over(partition by users.id order by posts.creationdate) as rn\nfrom users\ninner join posts on posts.owneruserid = users.id\nwhere posts.posttypeid = 1) sq inner join\nposthistory on sq.first_post = posthistory.postid\nwhere posthistory.PostHistoryTypeId = 10 and sq.rn = 1) sq inner join\nposts on posts.owneruserid = sq.[user]\ngroup by sq.[user]) sq\ngroup by sq.count\norder by sq.count","CreationDate":"2014-09-25 7:11:16","validated":true}
{"QuerySetId":227439,"Title":"Top Android users in Canada","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%canada%'\n     AND  TagName = 'android'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2014-09-24 18:07:56","validated":true}
{"QuerySetId":227753,"Title":"Question age distribution and average views","Description":null,"QueryBody":"WITH \n  post_age_and_views as (\n    select\n      id,\n      cast(viewcount as float) as viewcount,\n      datediff(minute, creationdate, GetDate()) \/ 1440.0 as age_in_days\n    from posts\n    where posttypeid = 1\n  ),\n  stats as (\n    select\n      cast(max(age_in_days) as float) as max_age,\n      cast(count(1) as float) as num_posts,\n      cast(max(viewcount) as float) as max_views\n    from\n      post_age_and_views\n  ),\n  binned as (\n    select\n      ceiling((age_in_days \/ s.max_age) \/ 0.05) as bin,\n      viewcount\n    from\n      post_age_and_views\n        join\n      stats s on 1=1\n  )\nselect\n  bin,\n  avg(viewcount) \/ max(max_views) as [Average view count (% of max)],\n  count(*) \/ max(num_posts) as [Posts in bin (% of total)]\nfrom\n  binned\n    join\n  stats on 1=1\ngroup by bin\norder by bin asc","CreationDate":"2014-09-25 3:18:02","validated":true}
{"QuerySetId":228334,"Title":"The average score of my answers","Description":null,"QueryBody":"SELECT  sum(Score), count(Score), cast(sum(Score) as float)\/count(Score) from Posts where PostTypeId = 2 and OwnerUserId = ##UserId##","CreationDate":"2014-09-27 2:45:51","validated":true}
{"QuerySetId":228346,"Title":"JavaScript MVC Framework Trends (from TodoMVC) (# of Questions per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(2017) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'backbone.js', 'ember.js', 'knockout.js', 'dojo', 'polymer', 'reactjs', 'kendo-ui', 'extjs', 'angularjs'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2017-04-19 21:11:46","validated":true}
{"QuerySetId":228359,"Title":"Interesting Ubuntu trends (# of Questions per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'server', 'windows', 'upgrade', 'application-development', 'package-management', 'juju', 'eclipse'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2014-09-27 8:14:59","validated":true}
{"QuerySetId":228375,"Title":"NewSQL database trends (# of Questions per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'nuodb', 'voltdb', 'monetdb', 'memsql', 'foundationdb', 'tokudb', 'exasolution'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2014-09-27 9:27:37","validated":true}
{"QuerySetId":228509,"Title":"comment length less than 15 chars","Description":null,"QueryBody":"SELECT  \n  Id as [Comment Link],\n  len(Text) as Length,\n  Score,\n  CreationDate\nFROM\n  Comments\nWHERE\n  len(Text) < 15\nORDER BY\n  Length desc","CreationDate":"2014-09-29 5:06:59","validated":true}
{"QuerySetId":229345,"Title":"People in turkey who writes emberjs","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS Position\n        ,DisplayName\n        ,Reputation\n        ,Age\n        ,WebsiteUrl\n        ,AboutMe\n        ,'http:\/\/stackoverflow.com\/users\/' + CONVERT(VARCHAR(10), Id) AS ProfileUrl\n    FROM Users(NOLOCK)\n   WHERE UPPER(AboutMe) like N'%EMBERJS%'\nORDER BY Reputation DESC","CreationDate":"2014-10-01 0:57:54","validated":true}
{"QuerySetId":230091,"Title":"Number of questions by close votes count","Description":null,"QueryBody":"SELECT \n  b.Votes,\n  COUNT(*)\nFROM\n  (\n    SELECT\n      a.PostId,\n      COUNT(*) AS Votes\n    FROM\n      PendingFlags AS a\n    WHERE\n      a.FlagTypeId IN (13, 14)\n    GROUP BY\n      a.PostId\n  ) AS b\nGROUP BY\n  b.Votes\nORDER BY\n  b.Votes ASC","CreationDate":"2014-10-03 1:20:13","validated":true}
{"QuerySetId":230107,"Title":"How many questions per month for webgl?","Description":null,"QueryBody":"SELECT  *, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + \n      cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as date) Month, \n    t.TagName\n  from (\n    SELECT p.Id, p.CreationDate from Posts p\n    join PostTags pt on pt.PostId = p.Id\n    join Tags t on t.Id = pt.TagId\n    where t.TagName = 'webgl'\n    ) pp\n  join PostTags pt on pt.PostId = pp.Id\n  join Tags t on t.Id = pt.TagId\n  where t.TagName in ( \n  'webgl' )\n) as X\ngroup by TagName, Month\norder by Month asc, count(*) desc","CreationDate":"2014-10-03 4:15:54","validated":true}
{"QuerySetId":234713,"Title":"Number of questions per day for given tag name(s) between dates","Description":null,"QueryBody":"SELECT  datepart(year,posts.CreationDate) as 'Year', datepart(month,posts.CreationDate) as 'Month', datepart(day,posts.CreationDate)as 'Day' , tags.TagName , COUNT(*) as 'Total' FROM \nPostTags as pt\n  JOIN POSTS as posts ON pt.PostId = posts.Id\n  JOIN Tags as tags ON pt.TagId = tags.Id\n  WHERE tags.TagName in ('angularjs', 'polymer','dart-polymer')\nGROUP BY datepart(year,posts.CreationDate), datepart(month,posts.CreationDate), \ndatepart(day,posts.CreationDate), tags.TagName\nORDER BY datepart(year,posts.CreationDate) DESC, datepart(month,posts.CreationDate) DESC, datepart(day,posts.CreationDate) DESC","CreationDate":"2014-10-15 3:57:31","validated":true}
{"QuerySetId":235221,"Title":"Newest users with reputation > 10k","Description":null,"QueryBody":"SELECT  \n    TOP 30\n    Users.Id as [User Link],\n    Users.Reputation,\n    Users.CreationDate\nFROM\n    Users\nWHERE\n    Reputation > 10000\nORDER BY\n    CreationDate DESC","CreationDate":"2014-10-16 13:45:07","validated":true}
{"QuerySetId":235353,"Title":"How many answer upvotes will I get in average for each tag?","Description":null,"QueryBody":"SELECT \n    TagName,\n    CAST(COUNT(Votes.Id) AS DECIMAL)\/COUNT(DISTINCT Posts.Id) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.PostTypeId = 2\nGROUP BY TagName \nHAVING COUNT (Votes.Id) >= 200\nAND CAST (COUNT (VotEs.Id) As DECIMAL)\/COUNT (DISTINCT Posts.Id) > 1\nORDER BY UpVotes DESC","CreationDate":"2014-10-20 1:27:40","validated":true}
{"QuerySetId":235493,"Title":"Most effective Illuminators with accept rate","Description":"Illuminator badge holders ranked by their effectiveness; percentage of their answers that qualify for the badge times the number of qualifying answers. This gives a better ranking for how effectively people have improved the original question (how often they edited the question compared to the number of answers they gave).","QueryBody":"SELECT  ct AS [Total answers]\n     , accept AS [Accepted answers]\n     , accept * 100 \/ ct AS [Accept rate]\nFROM (\n   SELECT count(*) AS ct\n         ,sum(CASE WHEN q.AcceptedAnswerId = a.Id THEN 1 ELSE 0 END) AS accept\n   FROM   Posts q \n   JOIN   Posts a on a.ParentId = q.Id\n   WHERE  q.PostTypeId = 1 \n   AND    a.ClosedDate IS NULL\n   AND    q.ClosedDate IS NULL\n   -- AND    a.CommunityOwnedDate IS NULL\n   AND    a.PostTypeId = 2 \n   AND    a.OwnerUserId = ##UserId##\n   ) AS sub;","CreationDate":"2014-10-18 15:00:55","validated":true}
{"QuerySetId":235958,"Title":"Top users by location and tag","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#],\n    u.Id AS [User Link],\n    u.DisplayName,\n    u.Age,\n    tuser.Answers,\n    tuser.Score,\n    u.Reputation\nFROM\n    Users u\n    JOIN (SELECT\n    Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score, COUNT(*) AS Answers\n          FROM\n              Tags t\n              JOIN PostTags pt ON t.Id = pt.TagId\n              JOIN Posts p ON p.Id = pt.PostId\n              JOIN Posts Answers ON Answers.ParentId = p.Id \n           WHERE\n               t.TagName = '##TagName##'\n          GROUP BY\n              Answers.OwnerUserId\n    ) tuser ON tuser.UserId = u.Id\nWHERE\n    LOWER(u.Location) LIKE LOWER('%##Location##%')\nORDER BY\n    Score DESC;","CreationDate":"2014-11-04 16:24:29","validated":true}
{"QuerySetId":235960,"Title":"Top 500 users by tag","Description":null,"QueryBody":"SELECT  TOP 500\n    ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#],\n    u.Id AS [User Link],\n    u.DisplayName,\n    tuser.Answers,\n    tuser.Score,\n    u.Reputation\nFROM\n    Users u\n    JOIN (SELECT\n    Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score, COUNT(*) AS Answers\n          FROM\n              Tags t\n              JOIN PostTags pt ON t.Id = pt.TagId\n              JOIN Posts p ON p.Id = pt.PostId\n              JOIN Posts Answers ON Answers.ParentId = p.Id \n           WHERE\n               t.TagName = '##TagName##'\n          GROUP BY\n              Answers.OwnerUserId\n    ) tuser ON tuser.UserId = u.Id\nORDER BY\n    Score DESC;","CreationDate":"2014-10-18 11:35:20","validated":true}
{"QuerySetId":236747,"Title":"Speed of answers in JS depending on fiddle.","Description":null,"QueryBody":"SELECT  datediff(minute, p.creationdate, max(a.creationdate))\n     , count(distinct p.id) as [wo\/fiddle]\n     , count(distinct case when patindex('%http:\/\/jsfiddle.net\/%', p.body) is not null\n                                then p.id\n                           else null\n                      end ) as [w\/fiddle]\n  from posttags pt\n  join posts p\n    on pt.postid = p.id\n  join posts a\n    on p.id = a.owneruserid\n where pt.tagid = 3\n   and p.posttypeid = 1\n   and p.closeddate is null\n group by p.creationdate","CreationDate":"2014-10-20 0:29:19","validated":true}
{"QuerySetId":237700,"Title":"Posts with [ibm] that don't have any product-specific tags","Description":null,"QueryBody":"SELECT \n    p.Id AS [Post Link],\n    p.CreationDate AS [Creation Date],\n    p.Tags\nFROM\n    Posts p \n    LEFT JOIN PostTags pt ON p.id = pt.PostId\n    LEFT JOIN Tags t ON pt.TagId = t.Id\nWHERE\n    t.TagName = 'ibm'\n    AND NOT EXISTS (\n        SELECT t2.Id FROM\n            PostTags pt2\n            LEFT JOIN Tags t2 ON pt2.TagId = t2.Id\n            WHERE\n                p.Id = pt2.PostId AND\n                t2.tagName IN (\n                    'clearcase',\n                    'dxl',\n                    'ibm-bpm',\n                    'ibm-midrange',\n                    'rad',\n                    'rational',\n                    'rational-rose',\n                    'websphere',\n                    'websphere-mq',\n                    'worklight') )","CreationDate":"2014-10-21 11:51:58","validated":true}
{"QuerySetId":238529,"Title":"Users by reputation in a country","Description":null,"QueryBody":"SELECT  *\n  from Users\n where lower(location) like '%##country##%'\n order by Reputation desc","CreationDate":"2014-10-25 10:40:23","validated":true}
{"QuerySetId":238846,"Title":"total score of a tag","Description":"http:\/\/meta.stackexchange.com\/questions\/242611\/how-can-i-calculate-the-total-score-of-a-tag#242611","QueryBody":"SELECT  sum(upvote) as totup\n, sum(downvote) as totdown\n,  sum(upvote) *5 - sum(downvote)*2 as [score]\nfrom (\n   SELECT p.id\n   , sum(case when v.votetypeid = 2 then 1 else 0 end) as upvote\n   , sum(case when v.votetypeid = 3 then 1 else 0 end) as downvote\n   from posts p\n   inner join posttags pt on pt.postid = p.id\n   inner join tags t on t.id = pt.tagid\n   inner join votes v on v.postid = p.id\n   where t.tagname= ##tag:String##\n   and v.votetypeid in (2,3) -- upvote, downvote\n   and p.posttypeid = 1 -- Q \n   group by p.id\n) as basedata","CreationDate":"2014-10-27 2:00:19","validated":true}
{"QuerySetId":238863,"Title":"All user edits that isn't on their post","Description":null,"QueryBody":"SELECT  ph.PostId as [Post Link], * FROM PostHistory ph\nJOIN Posts p on ph.PostId = p.Id\nWHERE p.OwnerUserId != ##UserId## AND ph.UserId = ##UserId##","CreationDate":"2014-10-27 3:23:06","validated":true}
{"QuerySetId":239739,"Title":"Post breakdown by number posted","Description":null,"QueryBody":"WITH  user_sample as(\nselect count(*) N, \n       sum(case when PostTypeId = 1 then 1.0 end) questions,\n       sum(case when PostTypeId = 2 then 1.0 end) answers\nfrom Posts\nwhere PostTypeId in (1,2)\ngroup by OwnerUserId\n)\n\nselect N,\n       sum(questions) questions,\n       sum(answers) answers,\n       sum(answers) + sum(questions) posts\nfrom user_sample\ngroup by N\nhaving N < 100","CreationDate":"2014-10-30 2:40:48","validated":true}
{"QuerySetId":239843,"Title":"Top 20 users from provided location (country) and their most voted tags","Description":null,"QueryBody":"DECLARE  @Country nvarchar(100) = ##Location:string##\n\nSELECT TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Users.Id AS [User Link], \n    Reputation,\n    (\n      SELECT TOP 1 TagName \n      FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n      Posts.OwnerUserId = Users.Id\n      GROUP BY TagName \n      ORDER BY COUNT(*) DESC\n    ) AS Tag\nFROM Users\nWHERE LOWER(Location) LIKE CONCAT('%', LOWER(@Country), '%')\nORDER BY\n    Reputation DESC;","CreationDate":"2014-11-05 21:38:15","validated":true}
{"QuerySetId":241239,"Title":"find top 100 unaccapted c# good questions","Description":"Looks at unanswered questions in your top 20 tags and sorts them by\na combined weight which takes into account: score, askers reputation and how\nwell you do on that particular tag\n","QueryBody":"SELECT  top 100\n\tid as [Post Link], tags, creationdate\nfrom \n\tposts\nwhere \n\t\tParentId is null\n\tand \n\t\tCommunityOwnedDate is null \n\tand \n\t\tClosedDate is null \n\tand \n\t\tAcceptedAnswerId is null\n\tand        \n\t\tcharindex('c#', tags)>0\n\tand\n\t\tscore>10\norder by creationdate desc","CreationDate":"2014-11-01 22:10:27","validated":true}
{"QuerySetId":242021,"Title":"Find number of Unanswered Questions on SO (questions with no answers at all)","Description":"Counts the number of unanswered questions on SO, that are not community-wiki, not closed and have no accepted answer.\n","QueryBody":"SELECT  q.Id,q.ViewCount,q.Title  from Posts q\nwhere (SELECT count(*) from Posts a where a.ParentId = q.Id) = 0\nand CommunityOwnedDate is null and ClosedDate is null and q.ParentId is null \nand AcceptedAnswerId is null order by ViewCount desc","CreationDate":"2014-11-03 19:45:12","validated":true}
{"QuerySetId":242505,"Title":"Find questions titles that are not phrased as questions","Description":"Find question titles that do not contain the Five Ws (Who, What, When, Where and why), interrogative words, and question marks.\n\nThis query MAY be useful for identifying titles that aren't phrased as a question or low quality questions.\n\nSpecial thanks: s.tk\/users\/398665","QueryBody":"SELECT  Id\nas [Post Link]\nfrom Posts \nwhere Title not like '%Who%'\nAND Title not like '%What%'\nAND Title not like '%When%'\nAND Title not like '%Where%'\nAND Title not like '%Why%'\nAND Title not like '%How%'\nAND Title not like '%Can%'\nAND Title not like '%Is%'\nAND Title not like '%Which%'\nAND Title not like '%Was%'\nAND Title not like '%Are%'\nAND Title not like '%Has%'\nAND Title not like '%Will%'\nAND Title not like '%Do%'\nAND Title not like '%?%'\nAND ClosedDate is null\norder by CreationDate desc","CreationDate":"2016-06-22 12:21:02","validated":true}
{"QuerySetId":242834,"Title":"Anonymous votes and views (log view)","Description":null,"QueryBody":"WITH  anon_votes as (\n  select count(case VoteTypeId when 2 then 1 end) upvotes,\n         count(case VoteTypeId when 3 then 1 end) downvotes,\n         isnull(ParentId, PostId) PostId\n  from PostFeedback pf\n       join Posts p on PostId = p.Id\n  group by isnull(ParentId, PostId)\n)\n  \n  select log(upvotes+downvotes) anon_feedback, log(avg(ViewCount)) views\nfrom anon_votes\n     join Posts p on PostId = p.Id\nwhere upvotes+downvotes <= 1000\ngroup by upvotes+downvotes\norder by upvotes+downvotes","CreationDate":"2014-12-10 23:08:36","validated":true}
{"QuerySetId":244019,"Title":"Questions with a tag favorited by users with matching tag badge","Description":null,"QueryBody":"SELECT  p.CreationDate, p.Id as [Post Link], p.Score, count(b.UserId) as [Users] from Posts p, Badges b, Votes v  \nwhere b.Name='##tag##' \n  and v.VoteTypeId=5 \n  and v.PostId=p.Id \n  and v.UserId=b.UserId \n  and p.Tags like '%##tag##%' \n  and p.AnswerCount = 0 \n  and p.ClosedDate is Null\ngroup by p.Id, p.Score, p.CreationDate\norder by Users desc","CreationDate":"2014-11-08 4:29:56","validated":true}
{"QuerySetId":244431,"Title":"Users with a given number of downvotes on a site","Description":null,"QueryBody":"SELECT  Id as [User Link], Downvotes from Users where Downvotes>=##minvotes## and Id>-1\norder by Downvotes desc","CreationDate":"2014-11-24 1:14:57","validated":true}
{"QuerySetId":244507,"Title":"Relation between user's reputations and their votes on a post","Description":null,"QueryBody":"DECLARE  @PostId int = ##PostId?18018493## -- PostId: ID of the post, you can find it in its URL\nDECLARE @RepLevelStart int = ##ReputationLevelStart?0## -- ReputationLevelStart: The start of the reputations level interval\nDECLARE @RepLevelEnd int = ##ReputationLevelEnd?1000## -- ReputationLevelEnd: The  end  of the reputations level interval  \n\nSelect Votes.VoteTypeId\nFrom Votes\nWhere PostId = @PostId\n\nSelect  Max(Votes.PostId) as [Post Link], Max(Votes.UserId),\n(Select Name from VoteTypes where VoteTypes.Id=Votes.VoteTypeId) As VoteType,\nCount(Votes.Id) As VoteCount \nFROM Votes\nwhere \n      Votes.PostId = @PostId AND\n      Votes.UserId IN (Select Id from Users)\ngroup by VoteTypeId","CreationDate":"2014-11-10 17:33:34","validated":true}
{"QuerySetId":244672,"Title":"find questions you answered which have no accepted answer","Description":null,"QueryBody":"SELECT \n  a.Id AS [Post Link],\n  a.Score,\n  u2.LastAccessDate,\n  u2.UpVotes\nFROM\n  Posts as a\nINNER JOIN\n  Posts as q\nON\n  a.ParentId = q.Id\nINNER JOIN\n  Users as u\nON\n  a.OwnerUserId = u.Id\nINNER JOIN\n  Users as u2\nON\n  q.OwnerUserId = u2.Id\nWHERE\n  u.Id = '##userId##'\n and\n  q.AcceptedAnswerId IS NULL\nORDER BY\n  u2.LastAccessDate DESC","CreationDate":"2014-11-13 14:07:01","validated":true}
{"QuerySetId":245093,"Title":"Ram G Athreya: Reputation and Percentile Rank","Description":null,"QueryBody":"WITH  Rankings AS (\nSELECT Id, DisplayName, Reputation, Ranking = ROW_NUMBER() OVER(ORDER BY Reputation DESC)\nFROM Users\n)\n,Counts AS (\nSELECT Count = COUNT(*)\nFROM Users\nWHERE Reputation > 100\n)\nSELECT Id, DisplayName, Reputation, CAST(Ranking AS decimal(20, 5)) \/ (SELECT Count FROM Counts) AS Percentile\nFROM Rankings\nWHERE Id = 614285","CreationDate":"2014-12-11 11:46:12","validated":true}
{"QuerySetId":246695,"Title":"Search for comments that prevent roomba deletion","Description":null,"QueryBody":"SELECT \n    c.Id as [Comment Link] \nfrom\n    Comments C\ninner join Posts p on p.Id = c.PostId \nwhere p.AnswerCount=0 \n  and p.Score=0 \n  and p.CommentCount=3 \n  and p.CreationDate < (DateAdd(d, -365, GetDate())) \n  and lower(c.Text) like lower('##search##%')  \norder by len(Text) asc","CreationDate":"2015-04-09 7:04:30","validated":true}
{"QuerySetId":247293,"Title":"Questions with close votes in a specific tag","Description":null,"QueryBody":"SELECT \n    pf.PostId as [Post Link],\n    COUNT(*) as CVs,\n    p.ViewCount as Views,\n    p.Score,\n    p.AnswerCount as Answers,\n    p.CreationDate as Date\nFROM\n    PendingFlags pf\nINNER JOIN\n    Posts p\nON\n    p.Id = pf.PostId\nWHERE\n    FlagTypeId = 14\nAND\n    p.Tags LIKE '%<##tag##>%'\nGROUP BY\npf.PostId, p.Score, p.ViewCount, p.AnswerCount, p.CreationDate\nORDER BY\n    p.CreationDate DESC","CreationDate":"2014-11-25 23:23:22","validated":true}
{"QuerySetId":248102,"Title":"Top 75 users from [Country]","Description":null,"QueryBody":"DECLARE  @Country nvarchar(100) = ##Location:string##\n\nSELECT TOP 75\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Users.Id AS [User Link], \n    Reputation,\n    (\n      SELECT TOP 1 TagName \n      FROM Tags\n      INNER JOIN PostTags ON PostTags.TagId = Tags.id\n      INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n      INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\n      WHERE \n      Posts.OwnerUserId = Users.Id\n      GROUP BY TagName \n      ORDER BY COUNT(*) DESC\n    ) AS Tag\nFROM Users\nWHERE\nLOWER(Location) LIKE CONCAT('%', LOWER(@Country), '%')\nORDER BY\n    Reputation DESC;","CreationDate":"2014-11-17 20:42:08","validated":true}
{"QuerySetId":249753,"Title":"Marshal badge with no posts.","Description":null,"QueryBody":"SELECT  \n  b.UserId AS [User Link]\nFROM\n  Badges b\n  LEFT JOIN Posts p ON p.OwnerUserId = b.UserId\nWHERE\n  b.Name = 'Marshal'\n  AND p.Id IS NULL","CreationDate":"2014-11-22 5:57:35","validated":true}
{"QuerySetId":249839,"Title":"Me as a review task","Description":null,"QueryBody":"SELECT  t.Id AS [PostLink], \n   'site:\/\/review\/' + \n  CASE t.ReviewTaskTypeId\n    WHEN 1 THEN 'suggested-edits'\n    WHEN 2 THEN 'close'\n    WHEN 3 THEN 'low-quality-posts'\n    WHEN 4 THEN 'first-posts'\n    WHEN 5 THEN 'late-answers'\n    WHEN 6 THEN 'reopen'\n    WHEN 10 THEN 'triage'\n    WHEN 11 THEN 'helper'\n  END + '\/' + CAST(t.Id AS nvarchar) \n  + '|'+ c.Name\n  , p.id as [Post Link] \nFROM ReviewTasks t\n  JOIN Posts p\n    ON t.PostId = p.Id\n  JOIN ReviewTaskTypes c\n    ON t.ReviewTaskTypeId = c.Id\nWHERE p.OwnerUserId = ##UserId##\nORDER BY c.Name DESC, t.Id ASC","CreationDate":"2015-04-25 19:58:26","validated":true}
{"QuerySetId":250020,"Title":"Posts with an image and no TeX","Description":null,"QueryBody":"SELECT  CreationDate, Id as [Post Link], Score from Posts\nwhere Body not like '%$%' and Body like '%img%'\nand ClosedDate is null\norder by CreationDate desc","CreationDate":"2014-11-23 7:27:45","validated":true}
{"QuerySetId":250494,"Title":"Search words \/ strings in comments","Description":null,"QueryBody":"SELECT \n   CreationDate,\n   Id [Comment Link],\n   postID [Post Link],\n   Score\nFROM \n   Comments\nWHERE\n   Text LIKE '%##String##%'\n   and UserId = ##UserId##\nORDER BY\n   CreationDate DESC;","CreationDate":"2020-03-13 6:18:01","validated":true}
{"QuerySetId":251052,"Title":"UserByCityAndPoints (city input in lowercase)","Description":null,"QueryBody":"SELECT  * from Users where Reputation > '##Points##' and  WebsiteUrl <> '' and\n    LOWER(Location) LIKE '%##Location##%'\n    ORDER BY Reputation;","CreationDate":"2014-11-26 11:14:16","validated":true}
{"QuerySetId":251228,"Title":"*Some* of the cases where LastEditor is blank and not the same as OP","Description":"This query probably misses the scenario where both the OP and the last editor are deleted, but are different deleted users.  That hypothetical edge-case is not important to the *current* issue under discussion.","QueryBody":"SELECT \n        p.Id AS [Post Link]\n        , LastEditDate\nFROM\n        Posts p\nWHERE\n        p.LastEditDate      IS NOT NULL\nAND     p.LastEditorUserId  IS NULL\nAND     p.OwnerUserId       IS NOT NULL\nORDER BY\n        p.LastEditDate DESC","CreationDate":"2014-11-27 6:05:24","validated":true}
{"QuerySetId":252030,"Title":"Total score of answers within 100 days of joining the site","Description":null,"QueryBody":"SELECT  top 100 u.Id as [User Link], sum(p.Score) as [Total score] from Users u\ninner join Posts p\non p.OwnerUserId = u.Id\nwhere datediff(day, u.CreationDate, p.CreationDate) <= 100\ngroup by u.Id\norder by [Total score] desc","CreationDate":"2014-11-30 18:06:27","validated":true}
{"QuerySetId":252759,"Title":"Which questions has a user favourited?","Description":null,"QueryBody":"SELECT  CreationDate AS [Voted On],\n       Votes.PostId AS [Post Link]\nFROM VoteTypes\nJOIN Votes\n  ON Votes.VoteTypeId = 5\nWHERE Votes.UserId = ##UserID##\nORDER BY CreationDate DESC","CreationDate":"2016-03-21 12:06:44","validated":true}
{"QuerySetId":252834,"Title":"Number of Distinct Dart Answerers with Score > 0 by Month","Description":null,"QueryBody":"SELECT \n  COUNT(DISTINCT OwnerUserId) as Qty,\n  MONTH(CreationDate) as Month,\n  YEAR(CreationDate) as Year\nFROM\n  Posts\nWHERE\n  Posts.ParentId IN\n    (SELECT PostTags.PostId from PostTags WHERE PostTags.TagId = 73780) AND\n  Posts.PostTypeId = 2 AND -- 2: Answer\n  Posts.Score > 0\nGROUP BY\n  MONTH(CreationDate),\n  YEAR(CreationDate)","CreationDate":"2015-01-14 23:39:20","validated":true}
{"QuerySetId":254071,"Title":"Graph: Total questions by date","Description":null,"QueryBody":"SELECT \n cast(CreationDate as date), \n count(cast(CreationDate as date))\nfrom Posts\nwhere PostTypeId=1\ngroup by cast(CreationDate as date)\norder by cast(CreationDate as date);","CreationDate":"2014-12-04 17:48:06","validated":true}
{"QuerySetId":254127,"Title":"Graph: Unanswered Q's by Month","Description":null,"QueryBody":"SELECT \n datefromparts(year(q.CreationDate), month(q.CreationDate), 1),\n count(datefromparts(year(q.CreationDate), month(q.CreationDate), 1))\nfrom Posts q\nwhere q.PostTypeId=1 and q.AcceptedAnswerId is null\n  and q.ClosedDate is null\n  and isnull((\n      SELECT max(a.Score) from Posts a\n      where a.ParentId = q.Id and a.PostTypeId=2\n    ),0) <= 0\ngroup by datefromparts(year(q.CreationDate), month(q.CreationDate), 1)\norder by datefromparts(year(q.CreationDate), month(q.CreationDate), 1);","CreationDate":"2014-12-04 18:37:12","validated":true}
{"QuerySetId":255568,"Title":"see questions that has or had bounties this month","Description":null,"QueryBody":"SELECT  P.id As [Post Link], V.BountyAmount, V.CreationDate As [Bounty Start], P.Score, \n  P.ViewCount, P.Title, P.Tags, P.Body, P.AnswerCount \nFROM Posts P INNER JOIN Votes V ON P.Id = V.PostId\nWHERE DATEPART(m, V.CreationDate) = DATEPART(m, getdate())\n  AND DATEPART(yyyy, V.CreationDate) = DATEPART(yyyy, getdate())\n  AND V.BountyAmount > 0\n  AND P.ParentId IS NULL\nORDER BY V.BountyAmount DESC, V.CreationDate DESC","CreationDate":"2014-12-08 20:33:13","validated":true}
{"QuerySetId":255746,"Title":"Get User Info and Tags (Total answers and Accepted Answers)","Description":"Returns the URL with the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted and stats for supplied tags. \n\nFor https:\/\/www.codersclan.net\/ticket\/671","QueryBody":"WITH  the user's original inputted URL, the users reputation, number of answers posted, number of answers accepted.\n-- For https:\/\/www.codersclan.net\/ticket\/659\n\nSELECT\n  answer.OwnerUserId As [User Link],\n  'http:\/\/stackoverflow.com\/users\/' + Cast(answer.OwnerUserId as nvarchar(10)) As [Permalink],\n  Users.Reputation,\n  question.tags,\n  count(answer.id) AS [Total Answers],\n  count(question.id) AS [Accepted Answers]\nFROM\n  Posts answer\n  LEFT OUTER JOIN Posts question ON question.AcceptedAnswerId = answer.id\n  INNER JOIN Users ON answer.OwnerUserId = Users.id\nWHERE\n  answer.OwnerUserId in (##UserId##)\n  AND\n  answer.postTypeId = 2 -- 2 means that post is an answer\nGROUP BY \n  answer.OwnerUserId, \n  Users.Reputation, question.tags","CreationDate":"2014-12-09 2:46:08","validated":true}
{"QuerySetId":255901,"Title":"Question score vs number of comments on that question","Description":null,"QueryBody":"SELECT  CommentCount, avg(Score) as AverageScore\n    FROM Posts\n\n    GROUP BY CommentCount\n    ORDER BY CommentCount","CreationDate":"2014-12-09 8:56:27","validated":true}
{"QuerySetId":256118,"Title":"Users with 1K and two badges","Description":null,"QueryBody":"SELECT  Id as [User Link], Reputation, LastAccessDate\n from Users\n where Reputation >= 1000\n   and exists (SELECT Id from Badges b where b.UserId = Users.Id and b.Name = 'Civic Duty')\n   and exists (SELECT Id from Badges b where b.UserId = Users.Id and b.Name = 'Deputy')\n   and exists (SELECT Id from Badges b where b.UserId = Users.Id and b.Name = 'Sheriff')\norder by LastAccessDate desc","CreationDate":"2014-12-10 0:47:25","validated":true}
{"QuerySetId":257711,"Title":"Average votes per post per month over time","Description":null,"QueryBody":"SELECT \ncast(CONCAT(y, '-', m, '-', '01') as date), (upvotes-downvotes)\/numposts\nfrom (\n  SELECT year(CreationDate) as py, month(CreationDate) as pm, count(*) as numposts\n  from Posts\n  group by year(CreationDate), month(CreationDate)\n) as p\njoin (\n  SELECT\n  y, m, SUM(upvote) as upvotes, SUM(downvote) as downvotes\n  from (\n    SELECT\n    year(CreationDate) as y, month(CreationDate) as m, 0 as upvote, 1 as downvote\n    from Votes\n    where VoteTypeId=3\n    union all\n    SELECT\n    year(CreationDate) as y, month(CreationDate) as m, 1 as upvote, 0 as downvote\n    from Votes\n    where VoteTypeId=2\n  ) as allvotes\n  group by y, m\n) as v on p.py = v.y and p.pm = v.m\norder by y, m","CreationDate":"2014-12-13 10:57:30","validated":true}
{"QuerySetId":257908,"Title":"Questions (total, answered, unanswered, users) by Date","Description":null,"QueryBody":"SELECT \n  cast(p.CreationDate as date) as date,\n  count(distinct p.OwnerUserId) as users,\n  sum(1) as total,\n  sum(case when isnull(p.AcceptedAnswerId,0) = 0 then 1 else 0 end) as unanswered,\n  sum(case when isnull(p.AcceptedAnswerId,0) = 0 then 0 else 1 end) as answered\nfrom Posts p\ngroup by cast(p.CreationDate as date)\norder by cast(p.CreationDate as date)","CreationDate":"2014-12-16 14:45:13","validated":true}
{"QuerySetId":258627,"Title":"Questions (total, answered, unanswered, users) by Year and Month","Description":null,"QueryBody":"SELECT \n  datefromparts(Year(p.CreationDate),Month(p.CreationDate),1) as ym,\n  count(distinct p.OwnerUserId) as users,\n  sum(1) as total,\n  sum(case when isnull(p.AcceptedAnswerId,0) = 0 then 1 else 0 end) as unanswered,\n  sum(case when isnull(p.AcceptedAnswerId,0) = 0 then 0 else 1 end) as answered\nfrom Posts p\ngroup by datefromparts(Year(p.CreationDate),Month(p.CreationDate),1)\norder by datefromparts(Year(p.CreationDate),Month(p.CreationDate),1)","CreationDate":"2014-12-16 18:36:17","validated":true}
{"QuerySetId":259466,"Title":"Short answers with a question mark","Description":null,"QueryBody":"SELECT  Posts.Id AS [Post Link], Score\nFROM Posts \nWHERE PostTypeId = 2 \n  AND Score > 0\n  AND DATALENGTH(Body) < 200\n  AND DATALENGTH(Body) - DATALENGTH(REPLACE(Body, '?', '')) >= 2\nORDER BY Score DESC","CreationDate":"2014-12-19 15:42:50","validated":true}
{"QuerySetId":259614,"Title":"Answerers per Questioners by month for tag","Description":null,"QueryBody":"SELECT \n  datefromparts(Year(pq.CreationDate),Month(pq.CreationDate),1) as ym,\n  cast(count(distinct case when pa.PostTypeId = 2 and pa.Score > 0 then pa.OwnerUserId else NULL end) as float) \/\n  count(distinct case when pq.PostTypeId = 1 and pq.Score > 0 then pq.OwnerUserId else NULL end) as a_per_q\nfrom Posts pq\nleft join Posts pa\n  on pq.Id = pa.ParentId\njoin PostTags pt\n  on pq.Id = pt.PostId\njoin Tags t\n  on t.Id = pt.TagId\nwhere\n  t.TagName = '##Parameter##'\n  and year(pq.CreationDate) >= 2010\ngroup by datefromparts(Year(pq.CreationDate),Month(pq.CreationDate),1)\norder by datefromparts(Year(pq.CreationDate),Month(pq.CreationDate),1)","CreationDate":"2014-12-20 2:49:54","validated":true}
{"QuerySetId":259619,"Title":"Most popular StackOverflow tags in a time period","Description":null,"QueryBody":"SELECT  \n       num.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as Rank,\n       row_number() over (order by num.Num desc) as TotalRank,\n       rate.Rate as QuestionsInTimePeriod,\n       num.Num as QuestionsTotal\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate < '2013-1-18'\nand Posts.CreationDate > '2012-1-18'\ngroup by TagName) as rate\n\nINNER JOIN\n\n(SELECT count(PostId) as Num, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\ngroup by TagName\nhaving count(PostId) > 800)\nas num ON rate.TagName = num.TagName\norder by rate.rate desc\n;","CreationDate":"2018-01-19 22:01:17","validated":true}
{"QuerySetId":259651,"Title":"How many questions got reopened in the last 60 days?","Description":null,"QueryBody":"SELECT  Count(PostId)\nFROM PostHistory \nWHERE PostHistoryTypeId = 11\nAND DATEDIFF(day, CreationDate, GETDATE() ) < 60","CreationDate":"2014-12-20 9:12:22","validated":true}
{"QuerySetId":259881,"Title":"all questions with a particular tag","Description":"how long before I get tag badges?\n","QueryBody":"DECLARE  @MyTag nvarchar(25) = ##Tag:string##;\n\nSELECT --TOP 20\n    Posts.Id AS [Post Link]\n    , Posts.Id\n    , Posts.Score\n    , Tags.TagName AS [TagName]\nFROM Posts\n   INNER JOIN PostTags ON PostTags.PostId=Posts.Id\n   INNER JOIN Tags ON Tags.Id=PostTags.TagId\nWHERE \n   Posts.PostTypeId = 1 AND \n   Tags.TagName = @MyTag\nORDER BY Posts.Score DESC;","CreationDate":"2014-12-23 4:31:49","validated":true}
{"QuerySetId":259951,"Title":"Badge holders with minimal reputation","Description":null,"QueryBody":"SELECT  count(u.Id) from Users u\ninner join Badges b on b.UserId=u.Id\nwhere b.Name='##Badge##'\nand u.Reputation >= ##MinRep##","CreationDate":"2014-12-22 3:17:38","validated":true}
{"QuerySetId":259958,"Title":"Voters in moderator elections per year","Description":null,"QueryBody":"SELECT  Year(b.Date) as Election, Count(*) as [Number of voters] from Badges b\nwhere b.Name='Constituent'\ngroup by Year(b.Date) \norder by Year(b.Date) asc","CreationDate":"2014-12-22 22:53:43","validated":true}
{"QuerySetId":261059,"Title":"Average reputation of users given by Stack Overflow's Total Reputation boundaries","Description":null,"QueryBody":"SELECT \n  1,\n  avg(reputation)                     average,\n  ((avg(reputation) - 1) \/ 1.0) * 100 percentage\nFROM users u1\nWHERE u1.reputation >= 1\nUNION SELECT\n        200,\n        avg(u200.reputation)                         average,\n        ((avg(u200.reputation) - 1) \/ 200.0) * 100 percentage\n        FROM users u200","CreationDate":"2019-10-30 10:50:27","validated":true}
{"QuerySetId":262132,"Title":"Posts with the longest initial revision","Description":null,"QueryBody":"SELECT  TOP 100\n  p.Id AS [Post Link],\n  Len(ph.Text) AS [Initial Length],\n  Len(p.Body) AS [Current Length],\n  IIF(p.PostTypeId = 1, Cast(p.AnswerCount AS VarChar(8)), '-') AS [Answers],\n  p.Score AS [Score],\n  p.CommentCount AS [Comments],\n  p.ViewCount AS [Views],\n  p.OwnerUserId AS [User Link],\n  p.CreationDate AS [Date]\nFROM Posts p\nINNER JOIN PostHistory ph\nON ph.PostId = p.Id\nWHERE ph.PostHistoryTypeId = 2 -- Initial Body\n  AND (PostTypeId = 1 OR PostTypeId = 2)\nORDER BY Len(ph.Text) DESC","CreationDate":"2015-01-02 7:05:47","validated":true}
{"QuerySetId":262417,"Title":"suggested edits that are rejected or on a now deleted post","Description":null,"QueryBody":"SELECT  *\nfrom SuggestedEdits se\nleft outer join posts p on p.id = se.postid\nwhere se.owneruserid = 1807667\nand (p.id is null or rejectiondate is not null)","CreationDate":"2015-01-03 20:21:31","validated":true}
{"QuerySetId":263123,"Title":"Past Bountied Questions for a Given Tag","Description":null,"QueryBody":"SELECT  v.PostId as [Post Link],\n       v.CreationDate as [Bounty Date],\n       v.BountyAmount as [Bounty Amount],\n       v.UserId as [Bounty Giver],\n       p.Tags as [Tags],\n       p.CreationDate as [Question Date]\nfrom Votes v\n    inner join PostTags pt\n        on pt.PostId = v.PostId\n    inner join Tags t\n        on pt.TagId = t.Id\n       and t.TagName = ##TagName:string## \n    inner join Posts p\n        on p.Id = pt.PostId\n       and p.PostTypeId = 1\nwhere v.VoteTypeId = 8\norder by v.CreationDate desc","CreationDate":"2015-01-07 0:53:12","validated":true}
{"QuerySetId":263848,"Title":"Soft [self-learning] questions without MathJax","Description":null,"QueryBody":"SELECT  \n  Score,\n  Id As [Post Link],\n  CreationDate,\n  Tags\nFROM Posts\nWHERE\n  PostTypeId=1 --Question\n  and Tags like '%<self-learning>%'\n  and (\n    Tags like '%<advice>%'\n    or Tags like '%<soft-question>%'\n    or Tags like '%<big-list>%'\n    or Tags like '%<education>%'\n    or Tags like '%<teaching>%'\n    or Tags='<self-learning>' --it's the only tag\n    or (not Body like '%$%' and not Body like '\\begin')\n  )\n  and not Tags like '%<learning>%'\nORDER BY CreationDate ASC","CreationDate":"2015-01-09 7:11:48","validated":true}
{"QuerySetId":264335,"Title":"Who has asked unanswered questions?","Description":null,"QueryBody":"SELECT  OwnerUserId as [User Link], count(Id) as unanswereds from Posts\nwhere PostTypeId=1 -- question\nand AnswerCount=0\nand ClosedDate is null\ngroup by OwnerUserId having count(Id)>0 order by unanswereds desc","CreationDate":"2015-01-12 14:38:03","validated":true}
{"QuerySetId":264337,"Title":"Who has asked nonupvoted questions?","Description":null,"QueryBody":"WITH  at least 20 questions\n\nselect OwnerUserId as [User Link],\n       Convert(Decimal(10,2), 100.0 * sum(case when PostTypeId=1 and Score<=0 then 1 else 0 end) \n                                    \/ sum(case when PostTypeId=1 then 1 else 0 end)) as Percentage\nfrom Posts\ngroup by OwnerUserId \nhaving count(case when PostTypeId=1 then 1 else null end)>20\norder by Percentage desc","CreationDate":"2015-10-23 20:10:24","validated":true}
{"QuerySetId":264528,"Title":"What is my accepted answer percentage rate for well-received answers","Description":"On avg how often are answers I give, accepted\n","QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @Score int = ##Score##\n\nSELECT \n    (CAST(Count(a.Id) AS float) \/\n    (\n      SELECT\n          Count(*)\n      FROM\n          Posts q\n      WHERE\n          OwnerUserId = @UserId\n        AND\n          PostTypeId = 2\n        AND\n          q.Score >= @Score\n    ) * 100) AS AcceptedPercentage\nFROM\n    Posts q\n  INNER JOIN\n    Posts a ON q.AcceptedAnswerId = a.Id\nWHERE\n    a.OwnerUserId = @UserId\n  AND\n    a.PostTypeId = 2\n  AND\n    a.Score >= @Score","CreationDate":"2015-01-13 18:32:33","validated":true}
{"QuerySetId":264590,"Title":"Getting most recent 100 users with non empty email hash","Description":null,"QueryBody":"SELECT  Top 100 Id As [User Link], CreationDate, ProfileImageUrl, EmailHash\nFrom Users\nWhere EmailHash Is Not Null\nOrder By CreationDate Desc","CreationDate":"2015-01-14 13:13:25","validated":true}
{"QuerySetId":264652,"Title":"Get average answer score by user","Description":null,"QueryBody":"DECLARE  @UserId int = 8972915\n\nSELECT AVG(CAST(Score as float)) AS VOTE\nFROM Posts \nWHERE Posts.OwnerUserId = @UserId AND Posts.PostTypeId = 2","CreationDate":"2020-09-23 16:28:32","validated":true}
{"QuerySetId":264731,"Title":"Find comments by user and text","Description":"You can enter a user id and some text to search for in their comments. Result contains links to the post, the comment and displays the text.","QueryBody":"SELECT \n    Id [Comment Link],\n    Postid [Post Link],\n    convert(char(10), CreationDate, 102) Date,\n    Text\nfrom Comments\nwhere Text like '%##Text##%'","CreationDate":"2015-07-30 2:37:04","validated":true}
{"QuerySetId":267129,"Title":"Top tags by closed question ratio","Description":null,"QueryBody":"SELECT  TOP 700\nTagName, COUNT(ClosedPost.Id) \/ CONVERT(FLOAT,COUNT(*)) AS ClosedRatio, COUNT(*) AS QuestionCount\nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON PostTags.PostId = Posts.Id\n    LEFT JOIN Posts ClosedPost ON Posts.Id = ClosedPost.Id AND ClosedPost.ClosedDate != ''\nWHERE Posts.PostTypeId = 1\nGROUP BY TagName\nORDER BY COUNT(ClosedPost.Id) \/ CONVERT(FLOAT,COUNT(*)) DESC","CreationDate":"2015-02-24 5:42:50","validated":true}
{"QuerySetId":269009,"Title":"5 answers containing inline `code` markup","Description":null,"QueryBody":"SELECT  top 5 \n  *\nfrom posts\nwhere\n  posttypeid = 2\n  and\n  (\n    body like '%`_`%'\n    or body like '%`__`%'\n    or body like '%`___`%'\n    or body like '%`____`%'\n    or body like '%`_____`%'\n  )\n  and\n  (\n    left(body, 50) like '%`_`%'\n    or left(body, 50) like '%`__`%'\n    or left(body, 50) like '%`___`%'\n    or left(body, 50) like '%`____`%'\n    or left(body, 50) like '%`_____`%'\n  )","CreationDate":"2015-01-30 6:16:47","validated":true}
{"QuerySetId":269029,"Title":"Count total number of Questions","Description":null,"QueryBody":"SELECT  count(*)\nfrom Posts as P, PostTypes as PT where P.PostTypeId= PT.Id\nand PT.Name='Question'\n\nSELECT count(*)\nfrom Posts as P, PostTypes as PT where P.PostTypeId= PT.Id\nand PT.Name='Answer'","CreationDate":"2015-01-30 8:36:00","validated":true}
{"QuerySetId":270120,"Title":"graph of distribution of question view counts","Description":null,"QueryBody":"SELECT \n    ViewCount\/100 AS Hundred_Views -- integer math automatically floors\n  , count(*) AS Nquestions\nFrom Posts \nwhere posttypeid = 1 -- only questions\ngroup by ViewCount\/100\norder by ViewCount\/100","CreationDate":"2015-02-03 21:28:58","validated":true}
{"QuerySetId":270397,"Title":"Accepted answer rate per tag","Description":null,"QueryBody":"DECLARE  @TagName nvarchar(25) = ##TagName:string##\n\nselect \nCount(*) as Total, count(p.AcceptedAnswerId) as Answered, (cast(Count(p.AcceptedAnswerId) as float) \/ count(*) * 100) as Percentage\nfrom Posts p\njoin PostTags pt on p.Id = pt.PostId\njoin Tags t on pt.TagId = t.Id\nwhere t.TagName = @TagName\nand p.PostTypeId=1","CreationDate":"2015-02-04 18:17:48","validated":true}
{"QuerySetId":271223,"Title":"Downvotes on posts containing 'Maple' for a user","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nselect\n COUNT(*) AS NumPosts\nfrom Posts\nwhere Posts.PostTypeId=2 and Posts.OwnerUserId = @UserId and \n      Posts.body like '%aple%'\n--Order By DownVotes Desc","CreationDate":"2015-02-07 7:28:54","validated":true}
{"QuerySetId":271666,"Title":"Longest time (in days) to accept answer, global with user links","Description":null,"QueryBody":"SELECT \np.creationdate as Questioned, a.creationdate as Answered\nfrom\nposts p,\nposts a,\nvotes v\nwhere a.parentid = p.id\nand p.acceptedanswerid = v.postid\nand v.postid = a.id\nand v.votetypeid = 1\nand p.body like '%<code>%'","CreationDate":"2015-02-10 0:08:42","validated":true}
{"QuerySetId":272459,"Title":"The total number of questions asked so far vs. time?","Description":"http:\/\/meta.stackexchange.com\/questions\/248396\/how-can-i-get-stats-for-the-total-number-of-questions-asked-so-far-vs-time","QueryBody":"DECLARE  @Increments int = ##Increments?30##\n-- Increments: Number of days per group \"Default is 30\"\nDECLARE @Results int = ##Results?12##\n-- Results: Number of groups to pull \"Default is 12\"\n\nDECLARE @lowest datetime\nselect @lowest =  dateadd(d, - (@Increments * @Results), max(creationdate)) \n                 from posts;\n\nselect dateadd(d, days, @lowest) as [date]\n     , sum(qcnt) over ( order by days) as Questions\n     , sum(acnt) over ( order by days) as Answers\nfrom (\n    select\n           datediff(m,  @lowest, creationdate) as days\n         , sum(case when posttypeid=1 then 1 else 0 end) as qcnt\n         , sum(case when posttypeid=2 then 1 else 0 end) as acnt\n    from posts\n    where creationdate >= @lowest\n    group by datediff(m,  @lowest, creationdate)\n   \n    ) as counts","CreationDate":"2015-02-11 15:15:48","validated":true}
{"QuerySetId":273689,"Title":"users who got a welcome comment within 24 hours","Description":null,"QueryBody":"SELECT  udfp.owneruserid, count(c.id) as numwelcomes\nfrom (\n  SELECT p.owneruserid, min(p.creationdate) as dfp -- Datetime of First Post\n  from posts p\n  where p.posttypeid < 3 -- Q\/A\n  group by p.owneruserid\n  ) udfp\nleft outer join posts p on\n      p.owneruserid = udfp.owneruserid\n  and p.posttypeid < 3 -- Q\/A\nleft outer join comments c on\n      upper(c.text) like '%WELCOME%'\n  and c.postid = p.id\n  and datediff(hh, udfp.dfp, c.creationdate) < 24\ngroup by udfp.owneruserid\n\nhaving count(c.id) > 0\norder by count(c.id) desc","CreationDate":"2015-02-15 12:37:17","validated":true}
{"QuerySetId":273807,"Title":"Questions that I've answered and closed as duplicate","Description":null,"QueryBody":"WITH  ClosedQuestions as (\nselect Q.Id \nfrom Posts Q\ninner join PostHistory PH\non Q.Id = PH.PostId\nwhere PH.PostHistoryTypeId = 10 -- Post Closed\n)\n, ClosedByMeQuestions as (\nselect Q.Id\nfrom ClosedQuestions Q\ninner join Votes V\non Q.Id = V.PostId\nwhere V.UserId = ##UserId##\n  and V.VoteTypeId = 6 -- Close\n)\n\nselect Q.Id as [Post Link]\nfrom Posts A\ninner join ClosedByMeQuestions Q\non A.ParentId = Q.Id\nwhere A.OwnerUserId = ##UserId##\n  and A.PostTypeId = 2 -- Answer","CreationDate":"2015-02-16 9:47:17","validated":true}
{"QuerySetId":273814,"Title":"Questions that I've reopened and answered","Description":null,"QueryBody":"WITH  ReopenedByMeQuestions as (\nselect Q.Id\nfrom Posts Q\ninner join Votes V\non Q.Id = V.PostId\nwhere V.UserId = ##UserId##\n  and V.VoteTypeId = 7 -- Reopen\n  and Q.PostTypeId = 1 -- Question\n)\n\nselect Q.Id as [Post Link]\nfrom Posts A\ninner join ReopenedByMeQuestions Q\non A.ParentId = Q.Id\nwhere A.OwnerUserId = ##UserId##\n  and A.PostTypeId = 2 -- Answer","CreationDate":"2015-02-16 9:51:01","validated":true}
{"QuerySetId":274946,"Title":"SO XPages - Question users","Description":"Users asking XPages questions","QueryBody":"SELECT  \nDISTINCT Posts.OwnerUserId,\nUsers.DisplayName,\nReputation,\nProfileImageUrl,\nAccountId\nFROM Posts\nINNER JOIN PostTags ON Posts.Id = PostTags.PostId\nINNER JOIN Users ON Posts.OwnerUserId = Users.Id\nWHERE \n  Posts.PostTypeId = 1\n  AND\n  PostTags.TagId in (66326, 80737, 80738)","CreationDate":"2015-02-19 3:35:55","validated":true}
{"QuerySetId":277206,"Title":"user tag age is not null","Description":null,"QueryBody":"SELECT  count(Users.Id)\nFROM Users\n   INNER JOIN Posts ON  Posts.OwnerUserId = Users.Id\n   INNER JOIN PostTags ON PostTags.PostId = Posts.Id or PostTags.PostId = Posts.ParentId\n   --INNER JOIN Tags ON PostTags.TagId = Tags.id\nWHERE Users.age is not null","CreationDate":"2015-02-23 2:04:32","validated":true}
{"QuerySetId":280187,"Title":"Top users by median score","Description":null,"QueryBody":"SELECT  Id, DisplayName, (\n (SELECT MAX(Score) FROM\n   (SELECT TOP 50 PERCENT Score FROM Posts WHERE OwnerUserId = Users.Id ORDER BY Score) AS BottomHalf)\n +\n (SELECT MIN(Score) FROM\n   (SELECT TOP 50 PERCENT Score FROM Posts WHERE OwnerUserId = Users.Id ORDER BY Score DESC) AS TopHalf)\n) \/ 2 AS MedianScore\nFROM Users\nWHERE (\n  SELECT COUNT(*)\n  FROM Posts\n  WHERE OwnerUserId = Users.Id\n) > 10\nORDER BY MedianScore desc","CreationDate":"2015-03-04 19:13:22","validated":true}
{"QuerySetId":280873,"Title":"comments like acceptance rate","Description":null,"QueryBody":"SELECT \n    c.Id AS [Comment Link],\n    c.Score,\n    c.CreationDate\nFROM\n    Comments c\nINNER JOIN\n    Posts q\nON\n    q.Id = c.PostId\nWHERE\n    q.PostTypeId = 1\n  and\n    c.Text LIKE '%acceptance rate%'\nORDER BY\n  LEN(c.Text) DESC, c.Score DESC, q.ViewCount DESC","CreationDate":"2015-03-02 7:43:13","validated":true}
{"QuerySetId":281370,"Title":"Interesting recent questions by users with high accept rates","Description":null,"QueryBody":"DECLARE  @start date = dateadd(week, -1, getdate())\n\nselect\n  p.Id as [Post Link], p.Score, p.AnswerCount, p.LastActivityDate, u.Id as [User Link], u.Reputation\nfrom Posts as p\n  join Users as u\n    left join Posts as q\n    on q.OwnerUserId = u.Id\n  on u.Id = p.OwnerUserId\nwhere p.PostTypeId = 1 -- question\nand p.CreationDate >= @start\nand p.Score > 2\nand p.AcceptedAnswerId is null\nand p.ClosedDate is null\n\ngroup by\n p.Id\n,p.Score\n,p.AnswerCount\n,p.LastActivityDate\n,p.Title\n,u.Id\n,u.Reputation\nhaving sum(iif(q.AcceptedAnswerId is null, 0.0, 1.0)) > 2\nand sum(iif(q.AcceptedAnswerId is null, 0.0, 1.0)) \/ nullif(count(q.Id),0) > .5","CreationDate":"2018-04-03 1:29:37","validated":true}
{"QuerySetId":281772,"Title":"Top 20 stackoverflow Moroccan users","Description":null,"QueryBody":"SELECT  TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%morocco%'\nORDER BY\n    Reputation DESC;","CreationDate":"2020-11-19 2:05:57","validated":true}
{"QuerySetId":281877,"Title":"Total Answers\/Month & ~Answers\/Day for a User","Description":null,"QueryBody":"SELECT  [Month], \n       COUNT(*) AS [Answers\/Month],\n       CAST(CAST(COUNT(*) AS FLOAT)\/DAY(EOMONTH(Month)) AS NUMERIC(10,3)) AS [Answers\/Day],\n       SUM(Score) AS [Score\/Month],\n       CAST(SUM(Score)\/CAST(COUNT(*) AS FLOAT) AS NUMERIC(10,3)) AS [Score\/Answer]\n\nFROM(\n  SELECT CAST( CAST(DATEPART(YYYY, CreationDate) AS varchar) + '-' \n             + CAST(DATEPART(MM, CreationDate) AS varchar) + '-01' AS DateTime) [Month], \n         Score\n  FROM Posts p \n  WHERE p.OwnerUserId = ##UserId:int## AND\n        P.PostTypeId = 2\n) AS X\n\n\nGROUP BY [Month]\nORDER BY [Month] DESC","CreationDate":"2015-08-19 23:37:12","validated":true}
{"QuerySetId":282074,"Title":"Tags with most closed question (percentage)","Description":null,"QueryBody":"WITH  myTags as (\n  select \n    t.TagName as Name,\n    count(pt.TagId) as Total,\n    (select count (p.Id) from Posts p\n     inner join PostTags pt2 on pt2.TagId = t.Id\n     where p.Id = pt2.PostId and p.ClosedDate is not null)\n    as ClosedTotal\n  from Tags t\n  inner join PostTags pt on pt.TagId = t.Id\n  group by t.TagName, t.Id\n)\n\nselect\n  t.Name as TagName,\n  t.Total as Total,\n  t.ClosedTotal as Closed,\n  (100. * t.closedTotal \/ t.Total) as [%]\nfrom myTags t\nwhere ClosedTotal >= ##MinClosed:int?5##\norder by [%] desc","CreationDate":"2015-03-21 16:20:52","validated":true}
{"QuerySetId":282998,"Title":"Getting all users from a given location sorted by reputation 'desc'","Description":null,"QueryBody":"DECLARE  @location varchar = ##location##\nselect  Id as [User Link], location, reputation from users where location like '%##location##%'\norder by reputation desc","CreationDate":"2015-03-05 12:03:11","validated":true}
{"QuerySetId":283714,"Title":"Get all review tasks for a specific post ID","Description":null,"QueryBody":"SELECT  \n  'site:\/\/review\/' + \n  CASE ReviewTaskTypes.Id\n    WHEN 1 THEN 'suggested-edits'\n    WHEN 2 THEN 'close'\n    WHEN 3 THEN 'low-quality-posts'\n    WHEN 4 THEN 'first-posts'\n    WHEN 5 THEN 'late-answers'\n    WHEN 6 THEN 'reopen'\n  END + '\/' +\n  CAST(ReviewTasks.Id AS nvarchar) +\n  '| ' + \n  ReviewTaskTypes.Name\nFROM ReviewTasks\nINNER JOIN ReviewTaskTypes on ReviewTaskTypes.Id = ReviewTasks.ReviewTaskTypeId\nWHERE ReviewTasks.PostId = ##PostId##\n--  AND ReviewTaskTypes.Id = ReviewTasks.ReviewTaskTypeId\nORDER BY ReviewTasks.CreationDate","CreationDate":"2016-04-03 10:02:12","validated":true}
{"QuerySetId":284807,"Title":"First Question -> Good Question; How soon?","Description":null,"QueryBody":"SELECT  fp.owneruserid as [User Link], p1.id as [Post Link], p1.score\n  , datediff(d, p1.creationdate, b.date) as DaysToGoodBadge\nfrom\n(\n  SELECT p.owneruserid, min(p.creationdate) as dateFirstPost\n  from posts p\n  where p.posttypeid = 1\n  group by  p.owneruserid\n) fp\ninner join posts p1\non p1.creationdate = fp.dateFirstPost\nand p1.owneruserid = fp.owneruserid\nand p1.score >= 25\ninner join badges b\non b.userid = p1.owneruserid\nand b.Name = 'Good Question'\norder by datediff(d, p1.creationdate, b.date) asc","CreationDate":"2015-03-10 23:16:00","validated":true}
{"QuerySetId":285305,"Title":"Illuminator badge qualifying answer count by year-month","Description":"This is a list of all answers for a user that count for the Explainer, Refiner and Illuminator badges, sorted by newest answer first.","QueryBody":"SELECT  YEAR(a.CreationDate) AS [Year],\n       MONTH(a.CreationDate) AS [Month],\n       COUNT(a.Id) AS [Count]\nFROM Posts q\nINNER JOIN Posts a ON q.Id = a.ParentId\nWHERE q.PostTypeId = 1\n  AND q.ClosedDate IS NULL\n  AND a.PostTypeId = 2\n  AND a.Score >= 1\n  AND a.OwnerUserId = ##userid##\n  AND (q.OwnerUserId IS NULL\n       OR q.OwnerUserId <> a.OwnerUserId)\n  AND EXISTS\n    (SELECT 1\n     FROM PostHistory ph\n     WHERE ph.PostHistoryTypeId IN (4,5)\n       AND ph.PostId = a.ParentId\n       AND ph.UserId = a.OwnerUserId\n       AND ABS(DATEDIFF(hh, ph.CreationDate, a.CreationDate)) < 12)\nGROUP BY YEAR(a.CreationDate), MONTH(a.CreationDate)\nORDER BY YEAR(a.CreationDate) DESC, MONTH(a.CreationDate) DESC","CreationDate":"2015-03-16 0:05:13","validated":true}
{"QuerySetId":285564,"Title":"Inactive unanswered questions for specific tag","Description":null,"QueryBody":"DECLARE  @Time DATETIME = dateadd(dd, -##Days:int?28##, getutcdate())\nDECLARE @Pattern VARCHAR(25) = ##Tag:string?identify-this-%##\n\nSELECT Q.Id AS [Post Link] FROM\n  Posts Q\n  INNER JOIN PostTags ON PostTags.PostId = Q.Id\n  INNER JOIN Tags ON Tags.Id = PostTags.TagId\nWHERE\n  patindex(@Pattern, Tags.TagName) != 0 AND\n  Q.LastActivityDate < @Time AND\n  Q.AcceptedAnswerId IS NULL AND\n  Q.AnswerCount = (SELECT count(*) FROM Posts A WHERE \n    A.ParentId = Q.Id AND\n    A.Score < 1 AND\n    Q.LastActivityDate < @Time AND\n    (SELECT count(*) FROM Comments WHERE\n      Comments.PostId = A.Id AND Comments.CreationDate > @Time) = 0)\nGROUP BY Q.Id, Q.LastActivityDate\nORDER BY Q.LastActivityDate DESC","CreationDate":"2015-03-11 19:55:59","validated":true}
{"QuerySetId":286813,"Title":"Users with reputation at least 15 by date","Description":null,"QueryBody":"SELECT  \n    Id, DisplayName, Reputation, CreationDate\n    -- COUNT(*) AS ReppedUsers\nFROM Users\nWHERE \n    Reputation >= 15\nORDER BY CreationDate DESC","CreationDate":"2015-03-14 21:38:27","validated":true}
{"QuerySetId":286911,"Title":"Total Posts by Programming Languages Per Month - Functional Languages","Description":null,"QueryBody":"SELECT  COUNT(*) as PostCount, T.TagName, year(P.CreationDate), month(P.CreationDate)\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nWHERE T.TagName in ('r','%lisp%','scala','haskell','clojure','erlang','ocaml',\n                    'scheme','f#','haxe','racket','xquery','xslt')\nGROUP BY year(P.CreationDate), month(P.CreationDate), T.TagName\nORDER BY 3 DESC, 4 DESC, 1 DESC","CreationDate":"2015-03-15 3:35:47","validated":true}
{"QuerySetId":287068,"Title":"Answer Score MIN MAX AVG","Description":null,"QueryBody":"SELECT  \n MIN(Score) as min,\n MAX(Score) as max,\n AVG(Score) as avg\nFROM Posts\nWHERE PostTypeId = 2","CreationDate":"2015-03-16 1:59:33","validated":true}
{"QuerySetId":290041,"Title":"DBA - Total Posts by Database Server Per Month - DB2","Description":null,"QueryBody":"SELECT  CONCAT(year(P.CreationDate), '-', month(P.CreationDate)) as YearMonth, 'DB2' as TagName, COUNT(*) as PostCount\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nWHERE T.TagName LIKE 'db2%'\nGROUP BY year(P.CreationDate), month(P.CreationDate)\nORDER BY year(P.CreationDate) DESC, month(P.CreationDate) DESC","CreationDate":"2015-03-18 20:02:49","validated":true}
{"QuerySetId":290061,"Title":"DBA - Total Posts by Database Server Per Month - MsAccess","Description":null,"QueryBody":"SELECT  CONCAT(year(P.CreationDate), '-', month(P.CreationDate)) as YearMonth, 'MsAccess' as TagName, COUNT(*) as PostCount\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nWHERE T.TagName LIKE 'ms-access%'\nGROUP BY year(P.CreationDate), month(P.CreationDate)\nORDER BY year(P.CreationDate) DESC, month(P.CreationDate) DESC","CreationDate":"2015-03-18 20:09:12","validated":true}
{"QuerySetId":290080,"Title":"DBA - Total Posts per Month","Description":null,"QueryBody":"SELECT  CONCAT(year(P.CreationDate), '-', month(P.CreationDate)) as YearMonth, COUNT(*) as PostCount\nFROM POSTS P\nGROUP BY year(P.CreationDate), month(P.CreationDate)\nORDER BY year(P.CreationDate) DESC, month(P.CreationDate) DESC","CreationDate":"2015-03-18 20:26:42","validated":true}
{"QuerySetId":290225,"Title":"SO - Total Posts by Database Server Per Month - PostgreSQL","Description":null,"QueryBody":"SELECT  CONCAT(year(P.CreationDate), '-', month(P.CreationDate)) as YearMonth, 'PostgreSQL' as TagName, COUNT(*) as PostCount\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nWHERE T.TagName LIKE 'postgresql%'\nGROUP BY year(P.CreationDate), month(P.CreationDate)\nORDER BY year(P.CreationDate) DESC, month(P.CreationDate) DESC","CreationDate":"2015-03-18 21:54:02","validated":true}
{"QuerySetId":290344,"Title":"SO - Total Posts by Could Service Providers Per Month - Google","Description":null,"QueryBody":"SELECT  CONCAT(year(P.CreationDate), '-', month(P.CreationDate)) as YearMonth, 'Google' as TagName, COUNT(*) as PostCount\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nWHERE T.TagName LIKE 'google-app-engine'\n   OR T.TagName LIKE 'google-bigquery'\n   OR T.TagName LIKE 'google-cloud%'\n   OR T.TagName LIKE 'google-compute-engine'\nGROUP BY year(P.CreationDate), month(P.CreationDate)\nORDER BY year(P.CreationDate) DESC, month(P.CreationDate) DESC","CreationDate":"2015-03-18 22:26:37","validated":true}
{"QuerySetId":290585,"Title":"List UI5 related questions for a user","Description":null,"QueryBody":"SELECT \n  Title,\n  Posts.CreationDate,\n  AcceptedAnswerId,\n  Tags,\n  Posts.Id as [Post Link]\n  from Posts\n  inner join PostTags on PostTags.PostId = Posts.Id\n  inner join Tags on Tags.Id = PostTags.TagId\n  inner join Users on Users.Id = Posts.OwnerUserId\n  where PostTypeId = 1 \n  and DisplayName = ##Username:string##\n  and TagName = ##Tagname:string?sapui5##\n  order by Posts.CreationDate desc","CreationDate":"2015-03-19 12:02:27","validated":true}
{"QuerySetId":290690,"Title":"Question and answer counts vs reputation","Description":null,"QueryBody":"SELECT \n  Users.Reputation,10,\n  CONVERT(DECIMAL(10,1),COUNT(DISTINCT questions.Id))\/CONVERT(DECIMAL(10,1),COUNT(DISTINCT answers.Id)),10 AS QuestionsPerAnswer\nFROM\n  Users\nINNER JOIN\n  Posts questions\n  ON Users.Id = questions.OwnerUserId AND questions.PostTypeId = 1\nINNER JOIN\n  Posts answers\n  ON Users.Id = answers.OwnerUserId AND answers.PostTypeId = 2\nGROUP BY \n  Users.Id, Users.Reputation\nORDER BY\n  Users.Reputation DESC","CreationDate":"2015-03-20 0:01:57","validated":true}
{"QuerySetId":290786,"Title":"Questions with two answers from the same user","Description":"List questions that have two or more answers posted by the same user.\nCommunity wiki answers are excluded.\n\nFIXME: if a user has posted 3 or more answers, each answer pair is listed, resulting in \u0398(n\u00b2) output. Fortunately this is rare.","QueryBody":"SELECT \n  a.ParentId as [Post Link],\n  'site:\/\/a\/' + cast(a.Id as varchar(9)) + '|' + cast(a.CreationDate as varchar(19)) [Answer 1],\n  a.Score AS [Score],\n  'site:\/\/a\/' + cast(b.Id as varchar(9)) + '|' + cast(b.CreationDate as varchar(19)) [Answer 2],\n  b.Score AS [Score],\n  a.OwnerUserId AS [User Link]\nfrom Posts a, Posts b\nwhere a.ParentId = b.ParentId\n  and a.Id < b.Id\n  and a.OwnerUserId = b.OwnerUserId\n  and a.CommunityOwnedDate is null\n  and b.CommunityOwnedDate is null\norder by a.ParentId ASC","CreationDate":"2015-03-20 2:39:58","validated":true}
{"QuerySetId":291105,"Title":"user info with top 10 tags","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\nDECLARE @LinkPrefix varchar(255) = 'http:\/\/stackoverflow.com\/users\/';\n\n\nWITH tagList AS (\nSELECT TOP 10\n  t.TagName,\n  COUNT(t.TagName) AS tagCount\nFROM\n  Tags t\nINNER JOIN \n  PostTags pt ON pt.TagId=t.Id\nINNER JOIN\n  Posts q ON pt.PostId=q.Id\nINNER JOIN\n  Posts a ON q.AcceptedAnswerId=a.Id \nWHERE\n  a.OwnerUserId=@UserId AND a.PostTypeId=2\nGroup By\n  t.TagName\nORDER BY tagCount DESC\n)\n\nSELECT\n  u.Id,\n  u.DisplayName,\n  u.Reputation,\n  CONCAT(@LinkPrefix,u.Id) Link,\n  (SELECT COUNT(*) FROM Posts WHERE PostTypeId=2 AND OwnerUserId=@UserId) Answers,\n  (SELECT COUNT(*) FROM Posts q INNER JOIN Posts a ON q.AcceptedAnswerId=a.Id WHERE a.OwnerUserId=@UserId) Accepted\nFROM\n  Users u\nWHERE\n  u.Id = @UserId","CreationDate":"2015-03-20 19:46:57","validated":true}
{"QuerySetId":293054,"Title":"Get number of questions per quarter for a tag","Description":null,"QueryBody":"DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT dateadd(quarter, datediff(quarter, 0, CreationDate),0), COUNT(*)\nFROM Posts p\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nWHERE\n  pt.PostId = p.Id AND\n  p.PostTypeId = 1\nGROUP BY dateadd(quarter, datediff(quarter, 0, CreationDate),0);","CreationDate":"2015-04-03 9:44:13","validated":true}
{"QuerySetId":295467,"Title":"Questions and answers in certain time period","Description":null,"QueryBody":"DECLARE  @From DATETIME = convert(DATETIME, '##StartDate?2015-01-01##')\nDECLARE @To DATETIME = convert(DATETIME, '##EndDate?2015-04-01##')\nDECLARE @Pattern VARCHAR(25) = ##Exclude:string?identify-this-%##\nDECLARE @Closed BIT = ##Closed:int?1##\n\nSELECT Q.Id AS [Post Link] FROM\n  Posts Q\n  INNER JOIN PostTags ON PostTags.PostId = Q.Id\n  INNER JOIN Tags ON Tags.Id = PostTags.TagId\n  INNER JOIN Users ON Users.Id = Q.OwnerUserId\nWHERE\n  Tags.TagName NOT LIKE @Pattern AND\n  (@Closed = 1 OR Q.ClosedDate IS NULL) AND\n  (Q.CreationDate BETWEEN @From AND @To OR\n  EXISTS (SELECT * FROM Posts A WHERE \n    A.ParentId = Q.Id AND A.CreationDate BETWEEN @From AND @To))\nGROUP BY Q.Id, Q.CreationDate\nORDER BY Q.CreationDate ASC","CreationDate":"2015-04-01 23:23:30","validated":true}
{"QuerySetId":295957,"Title":"Answers with competing answers to consider voting on to get Sportsmanship","Description":null,"QueryBody":"SELECT  p.Id as [Post Link]\nfrom Posts p\nwhere p.Score > 0\nand p.OwnerUserId = ##UserId:Int##\nand p.ParentId in \n(SELECT ParentId\nfrom Posts\ngroup by ParentId\nhaving COUNT(*)>=2)","CreationDate":"2015-04-06 4:43:15","validated":true}
{"QuerySetId":295994,"Title":"How many answers are there for a tag?","Description":null,"QueryBody":"DECLARE  @TagId int;\n\nSELECT @TagId = t.Id\nFROM Tags t\nWHERE t.TagName = ##TagName:string##;  \n\nSELECT COUNT(p1.Id)\nFROM Posts p1\nINNER JOIN PostTags pt ON\n  pt.TagId = @TagId\nINNER JOIN Posts p2 ON\n  p1.ParentId = p2.Id\nWHERE\n  p1.PostTypeId = 2 AND\n  pt.PostId = p2.Id;","CreationDate":"2015-04-03 9:19:48","validated":true}
{"QuerySetId":296069,"Title":"Top 20 stackoverflow Tunisian users","Description":"This query returns the list of Top 20 Tunisian Stackoverflow Users","QueryBody":"SELECT  TOP 200\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%tunisia%' OR LOWER(Location) LIKE '%tunisie%'\nORDER BY\n    Reputation DESC;","CreationDate":"2020-07-24 17:51:53","validated":true}
{"QuerySetId":296671,"Title":"Suspended users with Yearling badge","Description":null,"QueryBody":"SELECT  u.CreationDate, u.Id, u.Id as [User Link] from Users u\ninner join Badges b on b.UserId=u.Id\nwhere b.Name='Yearling'\nand u.Reputation = 1\ngroup by u.Id, u.CreationDate\norder by u.Id asc","CreationDate":"2015-04-06 6:13:14","validated":true}
{"QuerySetId":297131,"Title":"Comments that consist of the same thing twice.","Description":null,"QueryBody":"SELECT \n  Id AS [Comment Link],\n  *\nFROM\n  Comments\nWHERE \n  --LEN(Text) % 2 = 0 AND  -- technically correct wrt \"same thing twice\", but doesn't really matter\n  LEFT(Text, LEN(Text) \/ 2) = RIGHT(Text, LEN(Text) \/ 2)","CreationDate":"2015-04-08 2:42:41","validated":true}
{"QuerySetId":298621,"Title":"Most viewed questions between date X and date Y","Description":null,"QueryBody":"SELECT  TOP ##Number## Id AS [Post Link], ViewCount, CreationDate\nFROM Posts\nWHERE PostTypeId = 1 AND CreationDate BETWEEN ##FromCreationDate:string## AND ##ToCreationDate:string##\nORDER BY ViewCount DESC;\n\n-- Number: Number of posts to show:\n-- FromCreationDate: From YYYY-MM-DD\n-- ToCreationDate: To YYYY-MM-DD","CreationDate":"2015-04-09 18:38:26","validated":true}
{"QuerySetId":298954,"Title":"deleteme - Egypt Top 200","Description":null,"QueryBody":"SELECT  TOP 200 Id AS ID,DisplayName AS Name,Reputation,LastAccessDate AS Seen FROM Users WHERE Location LIKE '%Egypt%' ORDER BY Reputation DESC","CreationDate":"2015-11-19 17:45:14","validated":true}
{"QuerySetId":300923,"Title":"Distribution of Votes on Questions","Description":null,"QueryBody":"SELECT \n  Score,\n  COUNT(Score)\nFROM Posts\nWHERE\n  PostTypeId = 1\nGROUP BY Score\nORDER BY Score","CreationDate":"2015-04-14 21:54:09","validated":true}
{"QuerySetId":301169,"Title":"My Answer Count Per Language","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserID##;\n\n\n\nwith EndIndex as (\n  select \n      Id, ParentId as QuestionId, Body,\n      charindex('|', \n      replace(replace(replace(replace(body, ' ', '|'), '<', '|'), ':', '|'), ',', '|')\n        , 5) as LanguageNameEndIndex\n  from\n      Posts\n  where \n      OwnerUserId = @UserId\n      and PostTypeId = 2 --answer\n      and Body like '<h[1-3]>%'\n), AnswerLanguages as (\n  select \n    Id, QuestionId, Body, \n    'http:\/\/codegolf.stackexchange.com\/a\/' + convert(varchar(99), Id) as Link,\n    lower(substring(Body, 5, LanguageNameEndIndex-5)) as Language\n  from EndIndex\n)\nselect * from AnswerLanguages where Language like 'javascript%'\n\/*select Language, count(1) as AnswerCount\nfrom AnswerLanguages\ngroup by Language\norder by count(1) desc*\/\n;","CreationDate":"2016-01-25 7:19:08","validated":true}
{"QuerySetId":301316,"Title":"View for Habib Ahmed Post 2014-2015","Description":null,"QueryBody":"SELECT  DISTINCT(p1.id) as [Post Link], p2.ViewCount \nFROM Posts as p1\nJOIN Posts p2 ON p1.ParentId = p2.Id\nwhere p1.OwnerUserId = 961113\nAND  p1.CreationDate > '2015-07-01' --AND p1.CreationDate <= '2014-12-31'","CreationDate":"2016-04-07 20:44:18","validated":true}
{"QuerySetId":301674,"Title":"Posts in danger of automatic deletion","Description":null,"QueryBody":"SELECT  Title, Id AS [Post Link], DATEDIFF(day, CreationDate, GETDATE()) AS Age, Score, CommentCount\nFROM Posts p\nWHERE\n  PostTypeId = 1 AND\n  DATEDIFF(day, CreationDate, GETDATE()) > 300 AND\n  ((Score <= 0) OR (Score <= 1 AND OwnerUserId IS NULL)) AND\n  NOT EXISTS (\n    SELECT 1 FROM Posts q\n    WHERE p.Id = q.ParentId)\nORDER BY DATEDIFF(day, CreationDate, GETDATE())","CreationDate":"2015-04-20 20:27:11","validated":true}
{"QuerySetId":301745,"Title":"Top 100 Users by location","Description":null,"QueryBody":"SELECT  TOP 100\n    DisplayName,\n    Reputation,\n    Location\nFROM\n    Users\n-- WHERE\n --   LOWER(Location) LIKE '%india%'\n--    OR UPPER(Location) LIKE '%IND'\nORDER BY\n    Reputation DESC;","CreationDate":"2015-04-16 14:34:58","validated":true}
{"QuerySetId":301819,"Title":"Questions per month specific frameworks","Description":"How many questions per month does each tag in the top 10 tags get","QueryBody":"SELECT  datetext, TagName, count(*) from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n      as datetime) [Month], (cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar)) as datetext,\n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where t.TagName LIKE 'reactjs' \n) as X\ngroup by TagName, [Month], datetext\norder by [Month] asc, TagName asc","CreationDate":"2015-05-01 17:08:51","validated":true}
{"QuerySetId":302827,"Title":"Find first question of users","Description":null,"QueryBody":"SELECT  MIN(OwnerUserId), MIN(Id) as QuestionId\nFROM POSTS\nWHERE PostTypeId = 1\nGROUP BY OwnerUserId\n;","CreationDate":"2015-04-17 18:28:25","validated":true}
{"QuerySetId":303000,"Title":"Highest Reputation Holder from Nepal.","Description":null,"QueryBody":"SELECT  *\nFROM\n    Users\nWHERE\n    Reputation >= 100000\nORDER BY\n    Reputation DESC;","CreationDate":"2015-05-07 7:03:43","validated":true}
{"QuerySetId":303622,"Title":"Find tags with no excerpts (\"definitions\")","Description":null,"QueryBody":"SELECT  Count,\n       ('site:\/\/tags\/' + TagName + '|' + TagName) AS TagName,\n       ExcerptPostId                              AS [Post Link],\n       WikiPostId                                 AS [Post Link]\nFROM   Tags t\n       LEFT JOIN Posts p\n         ON p.Id = t.ExcerptPostId\nWHERE  NOT(ExcerptPostId IS NULL) -- no tag excerpt\n       AND LEN(Body) > 0   -- tag excerpt empty\nORDER  BY Count DESC","CreationDate":"2016-05-20 22:22:57","validated":true}
{"QuerySetId":303988,"Title":"Get answered questions per Tag","Description":null,"QueryBody":"DECLARE  @TagName varchar(128) = '%##TagName##%'\n SELECT COUNT(*) from Posts P\n    WHERE P.Id IN (\n      SELECT DISTINCT(PostId) from PostTags \n      WHERE PostTags.TagId In (\n        SELECT Id From Tags Where TagName LIKE @TagName\n      )\n    ) AND P.AcceptedAnswerId IS NOT NULL","CreationDate":"2015-04-20 22:35:52","validated":true}
{"QuerySetId":304326,"Title":"Find 2nd postdate of top 3 users","Description":null,"QueryBody":"SELECT  TOP 3 ph2.UserId, MIN( ph2.CreationDate) as SecondPostTime\n  FROM PostHistory ph2\n WHERE ph2.CreationDate > ( SELECT MIN( ph1.CreationDate ) \n                 FROM PostHistory ph1 )\n                 \n GROUP BY ph2.UserID\n;","CreationDate":"2015-04-21 19:11:29","validated":true}
{"QuerySetId":305228,"Title":"How much rep would I have without Rep Cap?","Description":null,"QueryBody":"DECLARE  @UserId int = 2765\n\n\nSELECT SUM(Case When VoteTypeID = 1 Then 15 WHEN VoteTypeID=2 THEN 10 WHEN VoteTypeID=3 THEN -2 ELSE 0 END)\nFROM Votes v\nINNER JOIN Posts p ON p.ID = v.PostID\nWHERE p.OwnerUserID = @UserID AND p.CommunityOwnedDate IS NULL","CreationDate":"2015-04-23 2:55:02","validated":true}
{"QuerySetId":305369,"Title":"Find posts in last month with a keyword in title, body or tags","Description":null,"QueryBody":"SELECT  Posts.Id AS [Post Link], title,Posts.CreationDate,PostTypeId,AnswerCount,tags,ViewCount,Score, \n  OwnerUserId AS [User Link] , DisplayName, LastActivityDate, LastEditDate, ClosedDate, body\nfrom Posts, Users where Posts.OwnerUserId = Users.Id and Posts.CreationDate>=getdate()-60\nand (title like '%coreclr%' or body like '%coreclr%' or tags like '%<coreclr>%')","CreationDate":"2015-07-01 20:16:50","validated":true}
{"QuerySetId":306020,"Title":"Show posts about Jon Skeet","Description":null,"QueryBody":"SELECT  Title, ViewCount, Id\nFROM Posts\nWHERE PostTypeId = 1 AND\n      Title LIKE '%Jon Skeet%' OR Title LIKE '%Jon-Skeet%'","CreationDate":"2015-04-24 16:47:43","validated":true}
{"QuerySetId":306050,"Title":"Search comments by pattern and order by votes","Description":null,"QueryBody":"SELECT  top ##topn:int?50## CreationDate, Score, Id as [Comment Link], PostId as [Post Link], userId as [User Link]\nfrom Comments\nwhere lower(Text) like lower(##pattern:string?%%##) and len(Text)>=##minlen:int?0## and len(Text)<##maxlen:int?99999##\norder by Score asc","CreationDate":"2015-11-30 19:26:44","validated":true}
{"QuerySetId":306852,"Title":"All users who voted on a post","Description":null,"QueryBody":"DECLARE  @PostId int = ##PostId##\n\nSELECT\n  UserId AS [User Link],\n  CreationDate,\n  Name AS VoteType\nFROM Votes\nJOIN VoteTypes ON Votes.VoteTypeId = VoteTypes.Id\nWHERE PostId = @PostId\nORDER BY CreationDate","CreationDate":"2015-04-26 17:28:45","validated":true}
{"QuerySetId":307607,"Title":"Percentage of magic the gathering questions","Description":null,"QueryBody":"DECLARE  @total int\nDECLARE @target int\nselect @total = count(1) from Posts where PostTypeId = 1\nselect @target = count(1) from Posts where PostTypeId = 1 and Tags like '%magic-the-gathering%'\nselect cast(@target as float) \/ @total * 100","CreationDate":"2015-04-28 10:23:28","validated":true}
{"QuerySetId":308783,"Title":"Top 100 answers for a tag","Description":null,"QueryBody":"WITH  TaggedQuestions AS (\n  SELECT Posts.* FROM Posts\n  JOIN PostTypes ON Posts.PostTypeId = PostTypes.Id\n  JOIN PostTags ON PostTags.PostId = Posts.Id\n  JOIN Tags ON PostTags.TagId = Tags.Id\n  WHERE PostTypes.Name = 'Question'\n  AND   Tags.TagName = '##tag##'\n),\nTaggedAnswers AS (\n  SELECT Posts.* FROM Posts\n  JOIN TaggedQuestions ON Posts.ParentId = TaggedQuestions.Id\n  JOIN PostTypes ON Posts.PostTypeId = PostTypes.Id\n  WHERE PostTypes.Name = 'Answer'\n)\nSELECT TOP 100\n  TaggedAnswers.Id as [Post Link],\n  TaggedAnswers.score as 'Score',\n  Users.DisplayName as 'User'\nFROM TaggedAnswers\nJOIN Users ON TaggedAnswers.OwnerUserId = Users.Id\nORDER BY score DESC;","CreationDate":"2015-04-30 18:35:01","validated":true}
{"QuerySetId":309334,"Title":"Top Stack Overflow Users in New York","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%new york%' OR\n    LOWER(Location) LIKE 'ny' OR\n    UPPER(Location) LIKE 'NY%'\nORDER BY\n    Reputation DESC;","CreationDate":"2015-05-02 5:16:11","validated":true}
{"QuerySetId":309513,"Title":"Tags without a tag wiki","Description":"Identifies tags without a tag wiki, or only a very short one.","QueryBody":"SELECT  t.TagName, p.Body\nfrom Posts p\nleft join Tags t\non t.ExcerptPostId = p.Id\nwhere t.Id > 0\nand p.PostTypeId = 4\nand len(p.Body) < 35\norder by t.TagName asc","CreationDate":"2015-05-03 6:36:22","validated":true}
{"QuerySetId":309530,"Title":"Tags without a tag wiki body","Description":"Identifies tags without a tag wiki, or only a very short one.","QueryBody":"SELECT  t.TagName, p.Body\nfrom Posts p\nleft join Tags t\non t.WikiPostId = p.Id\nwhere t.Id > 0\nand p.PostTypeId = 5\nand len(p.Body) < 5000\norder by t.TagName asc","CreationDate":"2016-06-23 17:34:22","validated":true}
{"QuerySetId":309531,"Title":"Tags without a tag wiki excerpt","Description":"Identifies tags without a tag wiki, or only a very short one.","QueryBody":"SELECT  t.TagName, p.Body\nfrom Posts p\nleft join Tags t\non t.ExcerptPostId = p.Id\nwhere t.Id > 0\nand p.PostTypeId = 4\nand len(p.Body) < 35\norder by t.TagName asc","CreationDate":"2015-05-03 6:40:47","validated":true}
{"QuerySetId":309553,"Title":"Get all related tags by tag","Description":null,"QueryBody":"DECLARE  @tagId int = ##TagID##\n\nSELECT Tags.TagName, COUNT(Posts.Id) as 'Count' FROM Posts\nINNER JOIN PostTags as PT on Posts.Id = PT.PostId\nINNER JOIN Tags on Tags.Id = PT.TagId\nWHERE Posts.Id in (SELECT PT.PostId FROM PostTags as PT\n                       WHERE PT.TagId = @tagId\n                  ) and \n                  Tags.Id <> @tagId\nGROUP BY Tags.TagName\nORDER BY 'Count' desc","CreationDate":"2015-05-03 7:07:42","validated":true}
{"QuerySetId":309836,"Title":"40 random off-topic questions from the past 90 days","Description":null,"QueryBody":"SELECT  top 40 \nx.*\n--p.*,\n--h.*\n--p.*,\n--h.PostId as [Post Link], \n--h.*\n--h.CreationDate \"Closed on\"\nfrom \nPosts p\n--inner join PostHistory h on h.PostId = p.Id\ninner join ReviewTasks x on x.PostId = p.Id\n--left outer join PendingFlags f on f.PostId = p.Id\n--left outer join PostFeedback x on x.PostId = p.Id\n\nwhere\np.ID = 17335689\n\n--PostHistoryTypeId=10\n--and Comment='102' -- off-topic\n--and CreationDate > getdate()-90 \n--order by newid()","CreationDate":"2015-05-04 8:55:06","validated":true}
{"QuerySetId":309888,"Title":"Looking for off topic close reason details","Description":null,"QueryBody":"SELECT \n p.Id as [Post Link],\n pht.Name,\n ph.*,\n pf.*\nfrom Posts p\ninner join PostHistory ph on ph.PostId = p.Id\ninner join PostHistoryTypes pht on ph.PostHistoryTypeId = pht.Id\ninner join PendingFlags pf on pf.postid = p.Id\nwhere p.Id = 17335689\nand ph.comment = 102","CreationDate":"2015-05-06 13:57:19","validated":true}
{"QuerySetId":310405,"Title":"How questions for a given tag have an accepted answer","Description":null,"QueryBody":"SELECT  count(p.id) as 'Questions with an accepted answer'\nfrom Posts p \n  join PostTags pt on p.id = pt.postid\n  join Tags t on t.id = pt.tagid\nwhere t.tagname = 'clojure' and p.acceptedanswerid > 0","CreationDate":"2015-05-06 0:08:44","validated":true}
{"QuerySetId":311692,"Title":"Find answers that have been edited after I comment","Description":"This is hard-coded for gunr2171's SO account. It finds comments I've put on answers asking for more information, but the post has been edited afterwards. I use this list to go and delete those comments because they have served their purpose.","QueryBody":"SELECT \n  p.Id [Post Link],\n  max(ph.CreationDate) [Last Edited]\nfrom Comments c\ninner join Posts p on c.PostId = p.Id and p.PostTypeId = 2\ninner join PostHistory ph on\n  ph.PostId = p.Id and\n  ph.PostHistoryTypeId in (4,5,6) and\n  ph.CreationDate >= c.CreationDate\nwhere\n  c.UserId = ##UserID## and\n  p.OwnerUserId != ##UserID##\ngroup by p.Id\norder by [Last Edited] desc","CreationDate":"2016-07-02 14:55:30","validated":true}
{"QuerySetId":312833,"Title":"No reppers: Lowest Reputation \/ *Answer + Question) Count ratios","Description":null,"QueryBody":"SELECT  TOP 256\n  Users.Id AS [User Link],\n  Users.Reputation,\n  COUNT(*) AS PostCount,\n  Users.Reputation \/ CAST(COUNT(*) AS FLOAT) AS Ratio\nFROM\n  Users\nINNER JOIN\n  Posts\nON\n  Users.id = Posts.OwnerUserId AND\n  Posts.PostTypeId IN(1, 2) AND\n  Users.Reputation > 10000\nGROUP BY\n  Users.Id,\n  Users.Reputation\nORDER BY\n  Ratio ASC","CreationDate":"2015-11-19 16:56:05","validated":true}
{"QuerySetId":313045,"Title":"Top 20 Comments on Your Site","Description":null,"QueryBody":"SELECT  TOP 20\n Score,\n Id as [Comment Link],\n CreationDate as [Post Date]\nFROM\n Comments\nORDER BY\n Score DESC","CreationDate":"2015-05-11 18:39:35","validated":true}
{"QuerySetId":313454,"Title":"Users with more downvotes than upvotes","Description":null,"QueryBody":"SELECT  DisplayName, DownVotes, UpVotes, (DownVotes - UpVotes) as Difference\nFROM Users\nWHERE DownVotes > Upvotes AND DownVotes > 100\nORDER BY Difference DESC","CreationDate":"2015-05-12 19:57:09","validated":true}
{"QuerySetId":313842,"Title":"Questions with version-specific tag lacking the generic tag","Description":"Find questions that lack the generic tag while having a version-specific one.  Suitable for retaggers :)","QueryBody":"SELECT  tags, \n       title, \n       acceptedanswerid, \n       creationdate,\n       'http:\/\/dba.stackexchange.com\/questions\/' + CAST(id AS varchar) AS URL\n  FROM posts \n WHERE tags LIKE '%' + ##mainTag:string## + '-%' \n   AND tags NOT LIKE '%<' + ##mainTag:string## + '>%'\n ORDER BY creationdate DESC","CreationDate":"2015-05-19 17:55:30","validated":true}
{"QuerySetId":314318,"Title":"Number of questions closed by date","Description":null,"QueryBody":"SELECT  cast(closeddate as date) \"date\", count(1) \"questions closed\"\nfrom posts\ngroup by cast(closeddate as date)\norder by cast(closeddate as date) desc","CreationDate":"2015-05-14 17:55:54","validated":true}
{"QuerySetId":318036,"Title":"number of posts per day of week over the years","Description":null,"QueryBody":"SELECT  count(*) as [all]\n, sum( case \nwhen creationdate between dateadd(yy , -1, getdate()) and getdate() then 1\nelse 0\nend) as [year]\n, sum( case \nwhen creationdate between dateadd(m , -1, getdate()) and getdate() then 1\nelse 0\nend) as [month]\n, sum( case \nwhen creationdate between dateadd(wk , -1, getdate()) and getdate() then 1\nelse 0\nend) as [week]\n\n, datepart(dw, creationdate) as [day of week] \nfrom posts\ngroup by datepart(dw, creationdate)","CreationDate":"2015-05-24 18:51:27","validated":true}
{"QuerySetId":319030,"Title":"find closed questions that I voted to close","Description":"Find which posts and how many posts you voted to close as the 5th and final close vote.","QueryBody":"DECLARE  @userid as nvarchar(32)\nDECLARE @uid as int = ##UserId##\nselect @userid='\"Id\":'+cast(@uid as nvarchar)+','\nselect postid as [Post Link], CreationDate as DateClosed\nfrom posthistory\nwhere posthistorytypeid = 10\nand [text] like '%'+@userid+'%'\nORDER BY CreationDate DESC","CreationDate":"2015-05-26 19:03:34","validated":true}
{"QuerySetId":319214,"Title":"Average question size (with word count)","Description":null,"QueryBody":"SELECT  TOP 20 t.TagName, CEILING(AVG(LEN(p.Body)) \/ 5.1) AS average_word_length\nFROM Posts p INNER JOIN PostTags pg\nON pg.PostId = p.Id\nINNER JOIN Tags t ON pg.TagId = t.id\nWHERE p.PostTypeId = 1 --Is a question\nGROUP BY t.TagName, t.Count\nORDER BY t.Count DESC;","CreationDate":"2015-05-27 7:58:26","validated":true}
{"QuerySetId":319512,"Title":"TOP C++ users in Germany","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%chicago%'\n     AND  TagName = 'c++'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2015-05-27 18:56:20","validated":true}
{"QuerySetId":319588,"Title":"TOP C++ users in Chicago","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%new york%'\n     AND  TagName = 'c++'\n  GROUP BY u.id, TagName\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 1000 ORDER BY upvotes DESC ;","CreationDate":"2019-04-18 21:36:32","validated":true}
{"QuerySetId":320870,"Title":"How many tags have issued at least one tag badge?","Description":null,"QueryBody":"SELECT  count(*)\nfrom (\n\tSELECT tagname\n\tfrom badges\n\tinner join tags on TagName = badges.name\n\twhere tagbased = 'true'\n    group by tagname) as tagbadges","CreationDate":"2015-05-30 23:23:46","validated":true}
{"QuerySetId":320902,"Title":"Most voted questions tagged with Ruby","Description":null,"QueryBody":"SELECT  TOP 150 Id,*\nFROM Posts Question\nWHERE \n  --Tags LIKE '%apache-spark%' AND\n  PostTypeId = 2\nORDER BY Score DESC","CreationDate":"2018-09-16 16:13:17","validated":true}
{"QuerySetId":321842,"Title":"Protected Questions by User Id","Description":null,"QueryBody":"SELECT  DISTINCT TOP(50)\n  PostId as [Post Link],\n  UserId as [User Link],\n  CreationDate\nfrom PostHistory\nwhere PostHistoryTypeId = 19\nAND UserId = ##UserId##\norder by Creationdate DESC","CreationDate":"2015-06-03 0:47:22","validated":true}
{"QuerySetId":322983,"Title":"CSS preprocessor trends (# of questions per month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'stylus', 'bourbon', 'neat', 'assemble', 'less', 'sass', 'compass','scss'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2015-06-06 0:15:25","validated":true}
{"QuerySetId":323330,"Title":"High-Scoring Questions with Accepted Answers, Parameterized (Tutorial)","Description":null,"QueryBody":"SELECT  p.Title, p.Id, p.Score, a.Score AS \"Accepted Score\", \nu.DisplayName AS \"Asker\", au.DisplayName AS \"Answerer\"\n  \nFROM Posts p\nJOIN Posts a ON p.AcceptedAnswerId = a.Id\nJOIN Users u ON p.OwnerUserId = u.Id\nJOIN Users au ON a.OwnerUserId = au.Id\n\nWHERE p.PostTypeId = 1\nAND p.Score >= ##MinScore:int##\nand p.AcceptedAnswerId IS NOT NULL\n\n-- MinScore: Minimum question score to include.\n\nORDER BY p.Score DESC","CreationDate":"2020-09-17 7:16:00","validated":true}
{"QuerySetId":324268,"Title":"Find first question from query","Description":null,"QueryBody":"SELECT  OwnerUserId as [User Link], MIN(Id) as [Post Link]\nFROM POSTS\nWHERE PostTypeId = 2 OR PostTypeId = 1\nGROUP BY OwnerUserId","CreationDate":"2015-06-09 23:33:49","validated":true}
{"QuerySetId":324777,"Title":"Find all users answering a given question","Description":null,"QueryBody":"SELECT  Id, Id as [Post Link], ParentId, Title,  OwnerUserId\n  from posts\n  where ParentId = 3368246 and PostTypeId = 2","CreationDate":"2015-06-11 14:15:29","validated":true}
{"QuerySetId":326075,"Title":"Top 100 questions by tags in the last year (sorted by viewcount)","Description":null,"QueryBody":"SELECT  TOP 100 Id,Title,CreationDate,Tags,ClosedDate,FavoriteCount,ViewCount,Score \nFROM Posts \nWHERE PostTypeId = 1 \nAND Tags LIKE '%##TagName1##%' \nAND Tags LIKE '%##TagName2##%' \nAND Tags NOT LIKE '%##ExcludedTag##%'\nAnd Posts.CreationDate > GETDATE() - 365\nORDER BY ViewCount DESC, FavoriteCount DESC, Score DESC","CreationDate":"2015-06-15 11:28:35","validated":true}
{"QuerySetId":326616,"Title":"Who asked most number of questions?","Description":null,"QueryBody":"SELECT  U.Id AS [User Link], COUNT(P.Id) [Number of Questions Asked]\nFROM Posts P\nINNER JOIN Users U ON P.OwnerUserId = U.Id\nWHERE P.PostTypeId = 1\nGROUP BY U.Id\nHAVING COUNT(P.Id) > 75\nORDER BY [Number of Questions Asked] DESC","CreationDate":"2015-11-12 23:48:27","validated":true}
{"QuerySetId":326618,"Title":"Who answered most number of questions?","Description":null,"QueryBody":"SELECT  U.Id AS [User Link], COUNT(A.Id) [Number of Accepted Answers]\nFROM Posts Q\nINNER JOIN Posts A ON Q.AcceptedAnswerId = A.Id\nINNER JOIN Users U ON A.OwnerUserId = U.Id\nWHERE A.PostTypeId = 2\nGROUP BY U.Id\nHAVING COUNT(A.Id) > 500\nORDER BY [Number of Accepted Answers] DESC","CreationDate":"2017-01-12 1:32:45","validated":true}
{"QuerySetId":327455,"Title":"Questions with images from users with less than 10 reputation","Description":null,"QueryBody":"SELECT  p.Id as [Post Link]\nfrom Posts p\ninner join Users u on u.Id = p.OwnerUserId  \nwhere p.Body LIKE '%<img%' and u.reputation<10 and p.PostTypeId = 1\norder by p.CreationDate desc","CreationDate":"2015-06-18 21:58:25","validated":true}
{"QuerySetId":327931,"Title":"How Quick Will My Rank Improve?","Description":"Use this to find out if a small bump in reputation will leapfrog your rank.","QueryBody":"WITH  A(from1, blocksize)\nas \n(\n   select ##reputation##, power(10, floor(log10(##reputation##) - 1)) --from users where displayname = '##UserName##'\n)\nSELECT (reputation \/ blocksize) * blocksize 'Range start', count(*) 'Number of users in this range'\nfrom users\ninner join A on 1 = 1\nwhere reputation > floor(from1 \/ blocksize) * blocksize\nand reputation < (from1 + 100 * blocksize)\ngroup by reputation \/ blocksize, blocksize","CreationDate":"2015-07-19 7:22:45","validated":true}
{"QuerySetId":328212,"Title":"TOP Stackoverflow users from Kerala","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%kerala%'\n    OR UPPER(Location) LIKE '%KERALA%'\n    AND Reputation >= 200\nORDER BY\n    Reputation DESC;","CreationDate":"2015-06-21 20:43:33","validated":true}
{"QuerySetId":328481,"Title":"max number of dupes on a question","Description":null,"QueryBody":"SELECT  pl.postid as [Post Link]\n     , count(*)\nfrom postlinks pl\ninner join posts p on p.id = pl.postid\nwhere linktypeid = 3\ngroup by postid\nhaving count(*)>2\norder by 2 desc","CreationDate":"2015-07-12 22:55:28","validated":true}
{"QuerySetId":328843,"Title":"Comments posted after your comment","Description":null,"QueryBody":"SELECT  c.UserId as [User Link], c.Id as [Comment Link], p.Id as [Post Link] FROM Posts p, Comments c\nINNER JOIN Comments b\nON c.PostId=b.PostId\nWHERE b.UserId=##UserId## AND c.UserId<>##UserId## AND c.CreationDate > b.CreationDate AND p.Id=c.PostId \nORDER BY c.CreationDate DESC","CreationDate":"2015-06-24 4:19:28","validated":true}
{"QuerySetId":330047,"Title":"Users above 1k rep, sorted by highest rep","Description":null,"QueryBody":"SELECT \n  u.DisplayName,\n  u.Reputation,\n  a.AnswersCount,\n  u.Reputation \/ a.AnswersCount as RepPerAnswer\nfrom Users u\njoin\n(\n    SELECT\n      count(1) as AnswersCount,\n      OwnerUserId\n    from Posts\n    where PostTypeId = 2\n    group by OwnerUserId\n) a\n  on u.id = a.OwnerUserId\n  WHERE u.Reputation > 1000\norder by u.Reputation desc","CreationDate":"2015-06-29 5:27:37","validated":true}
{"QuerySetId":330704,"Title":"Number of Bounties each year","Description":null,"QueryBody":"SELECT  count(PostId), YEAR(CreationDate)\n  FROM Votes\n  WHERE BountyAmount IS NOT NULL \n  AND VoteTypeId = 8 -- BountyStart\n  GROUP BY YEAR(CreationDate)","CreationDate":"2015-06-30 17:44:02","validated":true}
{"QuerySetId":333171,"Title":"Number of Users who have acheived each class of badge in 2015","Description":null,"QueryBody":"SELECT  Badges.Class, COUNT(Users.DisplayName) As NumberOfUsers\nFROM Badges INNER JOIN Users ON Badges.UserId = Users.Id\nWHERE Badges.Date LIKE '%2015%'\nGROUP BY Badges.Class","CreationDate":"2015-07-07 18:31:46","validated":true}
{"QuerySetId":334495,"Title":"Posts with activity after your last comment","Description":null,"QueryBody":"SELECT  P.Id as [Post Link], P.LastActivityDate, C.Id as [Comment Link], C.CreationDate, P.OwnerUserId as [User Link], P.LastEditorUserId as [User Link]\n  from Comments as C inner join Posts as P\n  on P.Id = C.PostId\n  where C.UserId = ##UserId:int## \n  and C.CreationDate =\n  (\n    SELECT MAX(a.CreationDate) FROM Comments AS a\n    WHERE a.UserId = C.UserId and a.PostId = C.PostId      \n  )\n  and (C.CreationDate < P.LastActivityDate)\n  and (P.OwnerUserId != C.UserId)\n  and (P.LastEditorUserId != C.UserId)\n  order by P.LastActivityDate DESC","CreationDate":"2016-11-02 6:08:21","validated":true}
{"QuerySetId":334859,"Title":"Posting users and posts by hour of week, GMT","Description":null,"QueryBody":"SELECT \n    (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate) as hour_of_week_GMT\n  , count (distinct owneruserid) as PostingUsers\n  , count (*) as NumPosts\nfrom posts p\nwhere datediff(d, creationdate, getdate()) <= ##DaysOfHistory## \ngroup by (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate)\norder by (datepart(weekday, creationdate)-1) * 24\n    + datepart(hour, creationdate)","CreationDate":"2015-07-10 22:51:00","validated":true}
{"QuerySetId":336069,"Title":"Users with the most Populist Badges","Description":null,"QueryBody":"SELECT  DisplayName AS Name, COUNT(Badges.Name) AS Badges FROM Users,Badges \n WHERE Users.Id = Badges.UserId AND \n  Badges.Name IN \n   ('Populist') \n    GROUP BY DisplayName\nORDER BY Badges DESC","CreationDate":"2015-07-13 20:24:18","validated":true}
{"QuerySetId":336155,"Title":"Questions that have been closed as being Opinion Based","Description":"Questions that have been closed for being Opinion Based.","QueryBody":"SELECT  DISTINCT\n  Q.Id AS [Post Link],\n  IIF(Q.ClosedDate IS NULL, 'open', 'closed') AS [State],\n  Q.Score AS [Score],\n  Q.AnswerCount AS [Answers],\n  Q.CreationDate AS [Asked]\nFROM\n  Posts AS Q\n  INNER JOIN PostHistory PH ON (Q.Id = PH.PostId)\nWHERE \n  Q.PostTypeId = 1 AND\n  PH.PostHistoryTypeId = 10 AND\n  PH.Comment = 105\nORDER BY\n  Q.Score DESC","CreationDate":"2015-07-14 13:16:25","validated":true}
{"QuerySetId":336223,"Title":"The questions with the most answers","Description":null,"QueryBody":"SELECT  \n         TOP 50\n         Id as [Post Link], *\nFROM     Posts p\nORDER BY\n         AnswerCount DESC","CreationDate":"2015-07-14 15:29:36","validated":true}
{"QuerySetId":336366,"Title":"Get all of my questions and answers","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT t1.Tags\nFROM Posts t1\nJOIN Posts t2 ON t2.ParentId = t1.Id AND t2.OwnerUserId = @UserId","CreationDate":"2015-07-14 23:31:27","validated":true}
{"QuerySetId":337184,"Title":"Number of Questions for each year","Description":null,"QueryBody":"SELECT  count(Id), YEAR(CreationDate)\n  FROM Posts\n  WHERE PostTypeId = 1\n  GROUP BY YEAR(CreationDate)","CreationDate":"2015-07-16 22:36:27","validated":true}
{"QuerySetId":337355,"Title":"Reputation I have gained from answers to bad qestions","Description":null,"QueryBody":"SELECT  SUM( iif(q.acceptedanswerid = a.id,15,0) + iif(a.Score > 0, a.Score*10, 0)) [Reputation]\nfrom\n  Posts a\n  inner join posts q on a.parentid = q.id\nwhere\n  q.closeddate is not null\n  and not exists (SELECT 1 from PostHistory where PostId=q.Id and CreationDate=q.ClosedDate and PostHistoryTypeId=10 and Comment in (101,1))","CreationDate":"2015-07-17 20:55:04","validated":true}
{"QuerySetId":337478,"Title":"How many answers to bad questions are there?","Description":null,"QueryBody":"SELECT  SUM(1) [Answers]\nfrom\n  Posts a\n  inner join posts q on a.parentid = q.id\nwhere\n  q.closeddate is not null\n  and not exists (SELECT 1 from PostHistory where PostId=q.Id and CreationDate=q.ClosedDate and PostHistoryTypeId=10 and Comment in (101,1))","CreationDate":"2015-07-17 20:59:30","validated":true}
{"QuerySetId":337575,"Title":"Rough size of MI Yodeya publication projects","Description":null,"QueryBody":"SELECT  t.tagname, count(pa.id) as submissions, sum(len(pa.body)) as total_char_weight\nfrom posts pa\ninner join posts pq\n  on pq.id = pa.parentid\n  and lower(pq.title) like '%call for submissions%'\n  and lower(pq.title) not like '%adjuncts%'\ninner join posttags pt\n  on pq.id = pt.postid\ninner join tags t\n  on t.id = pt.tagid\n  and not tagname = 'discussion'\nwhere pa.posttypeid = 2\ngroup by t.tagname","CreationDate":"2015-07-19 7:27:03","validated":true}
{"QuerySetId":337869,"Title":"How questions get closed since the beginning of 2014","Description":null,"QueryBody":"SELECT  sum(case when userId=-1 then 1 else 0 end) as [Community closed], \nsum(case when userId=-1 then 0 else 1 end) as [Mod or Dupehammer closed],\ncount(Id) as [Total]\nfrom PostHistory \nwhere PostHistoryTypeId = 10\nand CreationDate>='2014-01-01'","CreationDate":"2015-07-19 2:43:21","validated":true}
{"QuerySetId":338198,"Title":"get all code sinppets by language","Description":null,"QueryBody":"DECLARE  @LANG str = ##Language##\n\nSELECT TOP 20 \n  BODY,\n  CHARINDEX('a', 'bcdf') as test\nFROM POSTS\nWHERE\n  POSTTYPEID=2","CreationDate":"2015-07-20 4:12:13","validated":true}
{"QuerySetId":338993,"Title":"R Trends (# Questions per Tag per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n  'python', 'r', 'c++'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2020-09-14 8:03:07","validated":true}
{"QuerySetId":339452,"Title":"answered questions for the last M months excluding closed questions","Description":null,"QueryBody":"DECLARE  @months_ago DATETIME = DateAdd(month, -##months:int##, GETUTCDATE())\n\n-- 1 - question\n-- 2 - answer\nselect 100*cast((select count(distinct Q.Id) from Posts Q, Posts A where A.ParentId = Q.Id and Q.ClosedDate is null and Q.CreationDate > @months_ago and (A.Score > 0 or Q.AcceptedAnswerId = A.Id)) as float) \/ (select count(*) from Posts where PostTypeId = 1 and ClosedDate is null and CreationDate > @months_ago) as [answer ratio]","CreationDate":"2015-07-23 19:48:49","validated":true}
{"QuerySetId":339883,"Title":"Proportion of Bounty Questions with an Accepted Answer","Description":null,"QueryBody":"SELECT \n1.0 * COUNT(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE NULL END) -- only rows meeting criteria to be counted\n          \/ \nCount(p.Id)\nFROM Posts p\nINNER JOIN Votes v\n    ON p.Id = v.PostId\nWHERE v.VoteTypeId = 8  -- BountyStart","CreationDate":"2015-07-24 23:24:48","validated":true}
{"QuerySetId":340525,"Title":"Active israeli users under 18","Description":null,"QueryBody":"SELECT \n  DisplayName, Age, Reputation\nFROM\n  Users\nWHERE\n  LOWER(Location) LIKE '%israel%'\n  AND Reputation > 101\n  AND Age <= 18\nORDER BY\n  Reputation DESC;","CreationDate":"2015-07-28 1:09:24","validated":true}
{"QuerySetId":340545,"Title":"Number of Questions With View Count of Over 500","Description":null,"QueryBody":"SELECT  COUNT(*) as \"Number of Questions\"\nFROM Posts p\nLEFT JOIN PostTags pt ON p.Id = pt.PostId\nLEFT JOIN Tags t ON pt.TagId = t.Id\nWHERE TagName!='identification-request' AND ViewCount > 500","CreationDate":"2015-07-28 2:30:30","validated":true}
{"QuerySetId":341451,"Title":"Top users  (by reputation)  in a location by tag","Description":null,"QueryBody":"SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    u.Id AS [User Link], \n    u.Reputation,\n    count(p.id) AS [questions]\nFROM\n    Users u\ninner join posts p on p.ownerUserid = u.id\ninner join posttags pt on pt.postid = p.id\ninner join tags t on t.id = pt.tagid\nWHERE\n    LOWER(Location) LIKE LOWER('%##countryname##%')\n    and t.tagname='##tagname##'\ngroup by u.id,u.reputation\nORDER BY\n    Reputation DESC;","CreationDate":"2015-08-05 15:48:18","validated":true}
{"QuerySetId":342981,"Title":"Show 10 most viewed posts with links","Description":null,"QueryBody":"WITH  links\n\nselect top(10) ViewCount, Id AS [Post Link]\nfrom Posts\norder by ViewCount desc","CreationDate":"2015-08-04 13:06:58","validated":true}
{"QuerySetId":345127,"Title":"Welcome comments on old posts","Description":null,"QueryBody":"SELECT  c.CreationDate, c.Id as [Comment Link], c.Text from Comments c \ninner join Posts p on p.Id = c.PostId\nwhere Text like 'Welcome to%' or Text like 'welcome to%'\norder by c.CreationDate desc","CreationDate":"2015-08-12 13:09:15","validated":true}
{"QuerySetId":345818,"Title":"Answers which have outscored [user]'s answers","Description":null,"QueryBody":"SELECT \n    ParentId as [Post Link],\n    Id as \"Post Link\",\n    PostTypeId as \"Post Type\",\n    OwnerUserId as \"User Link\",\n    Score as \"Score\",\n    count(*) as Count\nfrom Posts as P\nwhere\n    ParentId in (\n        SELECT\n            ParentId as \"Post Link\"\n        from Posts as TargetP\n        where\n            OwnerUserId = ##TargetUserId##\n            and P.Score > TargetP.Score\n    )\ngroup by OwnerUserId, ParentId, Id, PostTypeId, Score","CreationDate":"2015-08-10 2:37:11","validated":true}
{"QuerySetId":348258,"Title":"Views on pure-id-req vs. pure-non-id-req","Description":null,"QueryBody":"SELECT \n  'Pure [identification-request]' AS \"Type\",\n  SUM(ViewCount) AS \"Views\"\nFROM\n  Posts\nWHERE\n  PostTypeId = 1\n  AND Tags = '<identification-request>'\n\n\nUNION\n\nSELECT\n  'Pure non-[identification-request]' AS \"Type\",\n  SUM(ViewCount) AS \"Views\"\nFROM\n  Posts\nWHERE\n  PostTypeId = 1\n  AND Tags NOT LIKE '%<identification-request>%'","CreationDate":"2015-08-12 2:22:01","validated":true}
{"QuerySetId":349529,"Title":"How many different post Types  [AskDifferent]","Description":null,"QueryBody":"SELECT  PostTypeId, Name, Counts\n  from (SELECT PostTypeId,  count(*) as Counts\n        from Posts \n        group by PostTypeId) p \n        inner join PostTypes pt \n    on p.PostTypeId = pt.Id","CreationDate":"2015-08-13 16:21:36","validated":true}
{"QuerySetId":351538,"Title":"Top Users by Median Score (with Avg score)","Description":null,"QueryBody":"WITH  the highest median answer score\n\nSELECT TOP 100 Users.Id as [User Link],\n               Count(Posts.Id) AS Answers,\n               (SELECT MAX(Score) FROM \n                       (SELECT TOP 50 PERCENT Score FROM Posts AS PU\n                        WHERE PostTypeId = 2 AND \n                              CommunityOwnedDate IS NULL AND\n                              PU.OwnerUserId = Users.Id\n                        ORDER BY Score\n                        ) AS t\n               ) AS MedianAnswerScore\nFROM Posts\n  INNER JOIN Users ON Users.Id = OwnerUserId\nWHERE PostTypeId = 2 AND\n      CommunityOwnedDate IS NULL\nGROUP BY Users.Id, DisplayName\nHAVING COUNT(Posts.Id) > 100\nORDER BY MedianAnswerScore DESC","CreationDate":"2015-08-18 20:12:08","validated":true}
{"QuerySetId":352554,"Title":"Find Probably-Unregistered users and their low-quality posts","Description":null,"QueryBody":"SELECT  u.CreationDate AS \"Account creation\",\nDATEDIFF(hour, u.CreationDate, u.LastAccessDate) AS \"Last access _ hours later\",\nu.Id as [User Link], p.Id as [Post Link], p.Score as \"Post score\"\n\nFROM Users u\nJOIN Posts p ON u.Id = p.OwnerUserId\n\nWHERE u.Reputation = 1\n\/*AND DATEDIFF(hour, u.CreationDate, GETDATE()) > 8760 *\/\nAND DATEDIFF(hour, u.CreationDate, u.LastAccessDate) <= ##MaxHours:int##\nAND p.PostTypeId = 1\n\n-- MaxHours: Maximum number of hours between registration and last access \n\nORDER BY p.Score ASC, u.CreationDate ASC","CreationDate":"2019-04-01 18:19:20","validated":true}
{"QuerySetId":352681,"Title":"How many questions about `Symbol#to_proc` are there in the [tag:ruby] tag?","Description":null,"QueryBody":"SELECT  Id AS [Post Link] FROM Posts WHERE Tags LIKE '%ruby%' AND Title LIKE '%&:%' ORDER BY Id;","CreationDate":"2015-08-20 12:37:49","validated":true}
{"QuerySetId":353449,"Title":"Show Questions With Questions as their Accepted Answer","Description":null,"QueryBody":"SELECT  [A].*\nFROM [Posts] AS [Q]\nINNER JOIN [Posts] AS [A] ON ([Q].[AcceptedAnswerId] = [A].[Id])\nWHERE [A].[PostTypeId] = 1; -- Type 1 = Question","CreationDate":"2015-08-21 21:38:56","validated":true}
{"QuerySetId":353480,"Title":"My posts with the most comments","Description":null,"QueryBody":"SELECT  Top ##TopHowMany##\n  Id as [Post Link], \n  OwnerUserId as [User Link], \n  Case When PostTypeId = 1 then 'Question' When PostTypeId = 2 then 'Answer' End as [Q or A], \n  Cast(LastActivityDate as Date) as [Last Activity Date],\n  len(body) as [Length],\n  CommentCount\nfrom Posts\nwhere PostTypeId in (1,2) and OwnerUserId = ##UserId##\norder by CommentCount*CommentCount*len(body) Desc","CreationDate":"2015-08-22 1:00:27","validated":true}
{"QuerySetId":354339,"Title":"Find text in comments to\/from me","Description":"Finds comments either posted by you, or posted to a Q\/A of yours, that contains (case insensitive) the search text. You may use \"%\" in the search text to mean \"any number of intervening characters\".","QueryBody":"SELECT  commentid [Comment Link], CreationDate, postid [Post Link]\nfrom (\nSELECT c.id commentid, text, c.CreationDate, p.id postid\nfrom comments c\njoin posts p on p.id = c.postid\nwhere userid = ##UserId##\nunion\nSELECT c.id, text, c.CreationDate, p.id postid\nfrom posts p\njoin comments c on c.postid = p.id\nwhere p.owneruserid = ##UserId##\n) x\nwhere lower(text) like lower('%##SearchText##%')\norder by CreationDate desc","CreationDate":"2015-08-25 7:32:50","validated":true}
{"QuerySetId":354849,"Title":"Rep per day (excluding association bonus)","Description":null,"QueryBody":"SELECT  displayname, (reputation - 101.0) \/ datediff(d,creationdate,getdate()) from\nusers\norder by (reputation - 101.0) \/ datediff(d,creationdate,getdate()) desc","CreationDate":"2015-08-26 5:46:11","validated":true}
{"QuerySetId":355197,"Title":"Number of user by country (grouped and sorted)","Description":"Number of users by country\n","QueryBody":"SELECT  u.Location,\n       count(*)as theCount\nFROM Users u\nINNER JOIN Posts p ON p.OwnerUserID = u.Id\nINNER JOIN PostTags pt ON p.ParentId = pt.PostId\nINNER JOIN Tags t ON t.id = pt.TagId\n\nGROUP BY u.Location\nORDER BY theCount DESC","CreationDate":"2018-02-27 14:20:01","validated":true}
{"QuerySetId":355460,"Title":"All posts of a given type","Description":null,"QueryBody":"SELECT  * from Posts \nwhere PostTypeId = ##type##\norder by Id asc","CreationDate":"2015-08-27 1:53:51","validated":true}
{"QuerySetId":355983,"Title":"Top 100 Python Answerers in the last 100 days in Chicago","Description":null,"QueryBody":"SELECT  top 100\n  u.Id AS [User Link], \n  number_of_answers = count(*), \n  total_score = sum(p.score)\nfrom\n  users u\njoin \n  posts p on p.owneruserid = u.id\njoin \n  posts pp on p.parentid = pp.id\njoin \n  posttags pt on pt.postid = pp.id\njoin \n  tags t on t.id = pt.tagid\nwhere \n  t.tagname like '%clojure%' \n and \n  p.creationdate > (getdate()-100)\n and \n  u.location like '%UK%'\ngroup by \n  u.Id\norder by \n  2 desc;","CreationDate":"2016-01-25 17:36:47","validated":true}
{"QuerySetId":356012,"Title":"Cloud Trends (# Questions per Tag per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'azure', 'amazon.ec2', 'openshift', 'heroku', 'cloudfoundry', 'google.app.engine'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2015-08-27 20:51:46","validated":true}
{"QuerySetId":358005,"Title":"Own edits last 30 days","Description":null,"QueryBody":"SELECT  PostHistoryTypeId, PostId, CreationDate, Comment\nFROM PostHistory \nWHERE UserID = ##UserID## AND (DATEDIFF(day, CreationDate, GETDATE() ) ) < 30\nORDER BY CreationDate DESC","CreationDate":"2015-09-01 8:10:47","validated":true}
{"QuerySetId":358074,"Title":"Top 100 most famous (viewed) questions","Description":null,"QueryBody":"SELECT  TOP 100 Id AS [Post Link], OwnerUserId as [User Link], ViewCount\nFROM Posts\nWHERE PostTypeId = 1 AND ViewCount > 1000\nORDER BY ViewCount DESC","CreationDate":"2015-09-02 3:25:57","validated":true}
{"QuerySetId":358297,"Title":"Users under 10k with gold tag badges","Description":null,"QueryBody":"SELECT \n  u.Id [User Link],\n  b.Name\nfrom Users u\ninner join Badges b on u.Id = b.UserId\nwhere\n  b.TagBased = 1 and\n  b.Class = 1 and\n  u.Reputation < 10000","CreationDate":"2015-09-01 19:52:55","validated":true}
{"QuerySetId":358421,"Title":"Top 20 most famous (viewed) questions","Description":null,"QueryBody":"SELECT  TOP 20 Id AS [Post Link], OwnerUserId as [User Link], ViewCount\nFROM Posts\nWHERE PostTypeId = 1 AND ViewCount > 1000\nORDER BY ViewCount DESC","CreationDate":"2015-09-02 3:27:50","validated":true}
{"QuerySetId":359691,"Title":"Median vote on accepted answers","Description":null,"QueryBody":"WITH  AcceptedAnswersScores as (\n  select a.Score from Posts as a\n  inner join Posts q on q.AcceptedAnswerId = a.id\n  where a.PostTypeId = 2\n), Medians as (\n-- median calculations from http:\/\/sqlperformance.com\/2012\/08\/t-sql-queries\/median\nSELECT median = PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Score) OVER ()\nFROM AcceptedAnswersScores\n)\n\nselect avg(cast(median as float)) from Medians","CreationDate":"2015-09-04 21:40:12","validated":true}
{"QuerySetId":359702,"Title":"n-th percentile score on accepted answers","Description":null,"QueryBody":"WITH  AcceptedAnswersScores as (\n  select a.Score from Posts as a\n  inner join Posts q on q.AcceptedAnswerId = a.id\n  where a.PostTypeId = 2\n), Percentiles as (\n-- median calculations from http:\/\/sqlperformance.com\/2012\/08\/t-sql-queries\/median\nSELECT perc = PERCENTILE_CONT(##n:float?0.5##) WITHIN GROUP (ORDER BY Score) OVER ()\nFROM AcceptedAnswersScores\n)\n\nselect avg(cast(perc as float)) from Percentiles","CreationDate":"2015-09-04 21:47:34","validated":true}
{"QuerySetId":360093,"Title":"Usersranked by average answer score","Description":null,"QueryBody":"SELECT\n       Users.Id AS [User Link],\n       SUM(Posts.Score) AS \"Upvotes earned\",\n       COUNT(*) AS \"Answers written\",\n       1.0 * SUM(Posts.Score) \/ COUNT(*) AS \"Average answer score\"\nFROM Posts LEFT JOIN Users\nON Posts.OwnerUserId = Users.Id\nWHERE Posts.PostTypeId = 2\nGROUP BY Users.Id\nORDER BY \"Average answer score\" DESC","CreationDate":"2015-09-05 10:50:55","validated":true}
{"QuerySetId":360094,"Title":"Users ranked by average answer score","Description":null,"QueryBody":"DECLARE  @MinAnswers int = ##MinAnswers##\n\nSELECT\n       TOP 2000\n       Users.Id AS [User Link],\n       SUM(Posts.Score) AS \"Upvotes\",\n       COUNT(*) AS \"Answers\",\n       1.0 * SUM(Posts.Score) \/ COUNT(*) AS \"Ave. score\",\n       MAX(Posts.Score) AS \"Highest score\",\n       1.0 * MAX(Posts.Score) \/ SUM(Posts.Score) AS \"Fraction votes from highest scoring answer\"\nFROM Posts LEFT JOIN Users\nON Posts.OwnerUserId = Users.Id\nWHERE Posts.PostTypeId = 2\nGROUP BY Users.Id\nHAVING COUNT(*) >= @MinAnswers\nORDER BY \"Ave. score\" DESC","CreationDate":"2018-05-06 12:56:31","validated":true}
{"QuerySetId":360291,"Title":"Questions with \"grammatically correct\" in their title","Description":null,"QueryBody":"SELECT  id as [Post Link]\nfrom posts\nwhere title like '% grammatically correct%'\nand posttypeid = 1","CreationDate":"2015-09-05 20:33:36","validated":true}
{"QuerySetId":360792,"Title":"Questions by Tag and Quarter","Description":null,"QueryBody":"SELECT  \n  t.TagName as tag_name,\n  Year(p.CreationDate) as y,\n  datepart(QUARTER, p.CreationDate) as q,\n  count(*) as n,\n  count(distinct p.OwnerUserId) as n_users,\n  sum(p.Score) as score,\n  count(p.AcceptedAnswerId) as n_acc,\n  sum(p.AnswerCount) as n_ans,\n  sum(p.ViewCount) as views\nfrom Posts p\njoin PostTags pt\n  on p.Id = pt.PostId\njoin Tags t\n  on pt.TagId = t.Id\nwhere\n  p.CreationDate between '2010-01-01' and '2015-07-01'\n  and p.PostTypeId = 1\ngroup by \n  t.TagName, \n  Year(p.CreationDate),\n  datepart(QUARTER, p.CreationDate)\nhaving count(*) > 100\norder by n desc","CreationDate":"2015-09-06 21:38:37","validated":true}
{"QuerySetId":360821,"Title":"Find tags where I can vote on tag-synonyms","Description":null,"QueryBody":"SELECT  ts.targettagname [tagname], concat('site:\/\/tags\/', ts.targettagname, '\/synonyms') link\nfrom posts p\njoin posttags pt on p.parentid=postid\njoin tags t on t.id=tagid\nleft join tagsynonyms n on tagname=n.sourcetagname\n  and n.approvaldate is not null\njoin tagsynonyms ts on ts.targettagname=coalesce(n.targettagname, tagname)\n  and ts.approvaldate is null\nwhere p.owneruserid=##userid:int## and p.communityowneddate is null\n  and p.score!=0 and p.posttypeid=2\ngroup by ts.targettagname\nhaving sum(p.score)\/count(distinct ts.sourcetagname)>=5","CreationDate":"2015-09-06 19:49:29","validated":true}
{"QuerySetId":361436,"Title":"High-viewcount posts on specific days","Description":null,"QueryBody":"SELECT  TOP 10\n  Id AS [Post Link], CreationDate, ViewCount,##date:string##\nFROM\n  Posts\nWHERE CreationDate>=DATEADD(day,-1,##date:string##)\n  AND CreationDate<DATEADD(day,1,##date##)\nORDER BY ViewCount DESC","CreationDate":"2015-09-17 0:53:04","validated":true}
{"QuerySetId":361476,"Title":"Average score for accepted answers in Java language - Ghafari","Description":null,"QueryBody":"SELECT  AVG(a.Score) \nfrom Posts as a\nwhere \na.PostTypeId = 2 -- Answer\nAND\na.Tags like '%java%'","CreationDate":"2015-09-09 0:45:50","validated":true}
{"QuerySetId":361606,"Title":"R Trends (# Questions per Tag per Month) nunit vs. xunit","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate), 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'nunit', 'xunit', 'mstest'\n  ) AND\n  \n  \n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2017-04-15 18:04:01","validated":true}
{"QuerySetId":361640,"Title":"ELT Informatica Oracle in Moscow","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    u.Id AS [User Link], \n    u.Reputation\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%moscow%'\n       AND  (\n         TagName = 'elt'\n         OR\n         TagName = 'informatica'\n      )\n       \n  GROUP BY u.id, TagName, u.Reputation\n)\n\nSELECT * FROM USER_BY_TAG ORDER BY Reputation DESC ;","CreationDate":"2015-09-09 15:29:22","validated":true}
{"QuerySetId":362953,"Title":"Most common badges by count","Description":null,"QueryBody":"SELECT  COUNT(UserId) AS Earned, Name, \n  CASE\n    WHEN Class = 1 THEN 'Gold'\n    WHEN Class = 2 THEN 'Silver'\n    WHEN Class = 3 THEN 'Bronze'\n  END AS Class\nFROM Badges\nWHERE TagBased = 0\nGROUP BY Name, Class\nORDER BY Earned DESC","CreationDate":"2017-02-20 23:30:00","validated":true}
{"QuerySetId":363107,"Title":"Number of answers among users with every answer scoring at least \"minScore\"","Description":null,"QueryBody":"SELECT  uu.Id AS [User Link], aCt.aCt AS NumAnswers\nFROM Users uu\nINNER JOIN\n  (SELECT uuu.Id, COUNT(*) AS aCt\n   FROM Posts pp\n   INNER JOIN Users uuu ON pp.OwnerUserId=uuu.Id\n   WHERE pp.PostTypeId=2\n   GROUP BY uuu.Id\n  ) AS aCt ON uu.Id=aCt.Id\nWHERE uu.Id NOT IN \n  (SELECT u.Id\n   FROM Posts p\n   INNER JOIN Users u ON p.OwnerUserId=u.Id\n   WHERE p.Score < ##minScore## AND p.PostTypeId=2) AND\n  aCt.aCt >= ##minAnswers##","CreationDate":"2015-09-12 22:52:12","validated":true}
{"QuerySetId":363132,"Title":"Users with at least \"minAnswers\" answers, all scoring at least \"minScore\"","Description":null,"QueryBody":"SELECT  uu.Id AS [User Link], aCt.aCt AS NumAnswers\nFROM Users uu\nINNER JOIN\n  (SELECT uuu.Id, COUNT(*) AS aCt\n   FROM Posts pp\n   INNER JOIN Users uuu ON pp.OwnerUserId=uuu.Id\n   WHERE pp.PostTypeId=2\n   GROUP BY uuu.Id\n  ) AS aCt ON uu.Id=aCt.Id\nWHERE uu.Id NOT IN \n  (SELECT u.Id\n   FROM Posts p\n   INNER JOIN Users u ON p.OwnerUserId=u.Id\n   WHERE p.Score < ##minScore## AND p.PostTypeId=2) AND\n  aCt.aCt >= ##minAnswers##","CreationDate":"2015-09-13 5:39:19","validated":true}
{"QuerySetId":363499,"Title":"[bit] users with synonym voting privileges","Description":null,"QueryBody":"SELECT  TOP 20 \n  -- TagName,\n  COUNT(*) AS Posts,\n  SUM(Score) AS Score\nFROM Posts\n  INNER JOIN PostTags ON PostTags.PostId = Posts.ParentId\n  INNER JOIN Tags ON PostTags.TagId = Tags.Id\n  inner join Users on Posts.OwnerUserId = Users.Id\n  WHERE Posts.CommunityOwnedDate is null\n  and TagName = 'bit'\n  having SUM(Score) >= 5\n-- GROUP BY TagName\nORDER BY SUM(Score) DESC;","CreationDate":"2015-09-14 12:58:59","validated":true}
{"QuerySetId":364337,"Title":"Questions on a tag by month","Description":null,"QueryBody":"SELECT \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0 \n    as ddd,\n  count(*) as N\nFROM Posts p\nWHERE \n  datepart(year, p.CreationDate) >= ##startYear?2010##\n  AND datepart(year, p.CreationDate) <= ##endYear?2015##\nGROUP BY \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0\nORDER BY \n  datepart(year,p.CreationDate) + (datepart(month,p.CreationDate)-1)\/12.0","CreationDate":"2015-09-17 12:19:42","validated":true}
{"QuerySetId":364600,"Title":"Top Posts - Anonymous Vote Attempts (Anonymous Feedback)","Description":null,"QueryBody":"SELECT  TOP 10 p.Id as [Post Link]\n  , p.Score\n  , sum(CASE WHEN f.VoteTypeId = 2  THEN 1 Else 0 End) AnonUpvotes  \n  , sum(CASE WHEN f.VoteTypeId = 3  THEN 1 Else 0 End) AnonDownvotes\n  , count(f.Id) TotalAnonVotes\n\nFROM Posts p INNER JOIN PostFeedback f ON p.Id = f.PostId\nWHERE p.PostTypeId in (1,2)\nAND p.CreationDate >= '2015-01-01'\ngroup by p.Id, p.Score\norder by 4 desc","CreationDate":"2015-09-16 3:13:31","validated":true}
{"QuerySetId":364926,"Title":"which of my post have been downvoted ?","Description":null,"QueryBody":"SELECT  P.Id as [Post Link], P.LastActivityDate, count(*) As NumberOfDownvotes\nFrom Posts as P\nJOIN Votes as V on P.Id = V.PostID\nWhere P.OwnerUserId = ##UserId## AND V.VoteTypeId = 3 \nGROUP BY P.Id,  P.LastActivityDate","CreationDate":"2015-09-17 12:29:08","validated":true}
{"QuerySetId":365393,"Title":"Users by questions favorited by me","Description":null,"QueryBody":"SELECT  *\nfrom(\n  SELECT p.OwnerUserId as [User Link], count(*) as \"Favorite questions\"\n  from Votes v\n    inner join Posts p on p.Id=v.PostId\n  where UserId = ##UserId##\n    and VoteTypeId = 5\n  group by p.OwnerUserId\n  ) I\norder by \"Favorite questions\" desc","CreationDate":"2015-09-17 17:03:35","validated":true}
{"QuerySetId":365785,"Title":"Top 150 users from Bulgaria","Description":null,"QueryBody":"SELECT  TOP 150 \n  Id\n  ,DisplayName\n  ,Reputation\n  ,WebsiteUrl\n  ,Location\nFROM Users\nWHERE \n  Location LIKE '%Bulgaria%' \n  OR Location LIKE '%Sofia%'\nORDER BY Reputation DESC","CreationDate":"2015-09-18 9:19:17","validated":true}
{"QuerySetId":366317,"Title":"Search for questions that were closed as duplicate to one of your questions","Description":null,"QueryBody":"SELECT  pl.PostId AS [Post Link], pl.RelatedPostId AS [Post Link]\nFROM PostLinks AS pl\nJOIN Posts AS p\nON p.Id = pl.RelatedPostId\nWHERE\n  p.Id = ##questionId##\n  and p.PostTypeId = 1\n  and pl.LinkTypeId = 3","CreationDate":"2015-09-22 21:23:06","validated":true}
{"QuerySetId":367000,"Title":"Comments telling people to migrate to ELL","Description":null,"QueryBody":"SELECT  Id as [Post Link],\nScore,\nClosedDate\nFROM Posts P\nWHERE P.Id in (\n  SELECT PostId \n  FROM Comments\n  WHERE Text LIKE '%on ELL%'\n  OR Text LIKE '%on English Language Learners%'\n)\nAND PostTypeId = 1\nORDER BY Id","CreationDate":"2015-09-21 18:28:22","validated":true}
{"QuerySetId":367001,"Title":"Separate a post in id, title, question and answers for given post Id","Description":"\nExample input: 3006643,2106715,1429318 \n(.csv downloadable for about 200 PostID's)\n","QueryBody":"SELECT \n    p.Id, p.Title, p.Body, k.Body\nFROM\n    Posts AS p inner join\n    Posts AS k ON\n    p.id = k.parentid\nWHERE\np.Id in (##id##) and k.posttypeid=2","CreationDate":"2016-04-12 21:06:00","validated":true}
{"QuerySetId":367275,"Title":"Top User Of a Particular Tag in Israel","Description":null,"QueryBody":"WITH  USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) Rank,\n    u.Id AS [User Link], \n    u.Reputation,\n    TagName,\n    COUNT(*) AS UpVotes\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      TagName = ##tagName:string##\n  GROUP BY u.id, TagName, u.Reputation\n)\n\nSELECT * FROM USER_BY_TAG WHERE rank <= 100 AND LOWER(location) LIKE '%israel%' ORDER BY upvotes DESC ;","CreationDate":"2015-09-22 7:09:11","validated":true}
{"QuerySetId":367956,"Title":"Search for keyword within a tag","Description":null,"QueryBody":"SELECT  p.Id,\n  p.Title, p.ViewCount\nFROM Posts AS p\nINNER JOIN Tags AS t\n  ON t.TagName = '##TagName##'\nINNER JOIN PostTags AS pt\n  ON pt.PostId = p.Id\n  AND pt.TagId = t.Id\nWHERE p.PostTypeId = 1\n  AND p.Body LIKE '%##SearchTerm##%'\n  OR p.Title LIKE '%##SearchTerm##%'\nORDER BY p.CreationDate DESC","CreationDate":"2015-09-26 2:50:15","validated":true}
{"QuerySetId":368751,"Title":"downvoted questions with downvoted self-answer","Description":null,"QueryBody":"SELECT  a.Id AS [Post Link],q.Score AS [Q Score],a.Score AS [A Score],q.ClosedDate,a.CommunityOwnedDate\nFROM Posts q INNER JOIN Posts a\nON a.ParentId=q.Id AND q.OwnerUserId=a.OwnerUserId\nWHERE q.PostTypeId=1 AND a.PostTypeId=2 AND q.Score<=##qscore:int?-3## AND a.Score<=##ascore:int?-3##\nAND DATEDIFF(MINUTE,q.CreationDate,a.CreationDate)<##maxminutes:int?5##","CreationDate":"2015-09-27 13:00:26","validated":true}
{"QuerySetId":369327,"Title":"Popular tags trends over years","Description":null,"QueryBody":"SELECT  year(CreationDate) as y, TagName, count(*)\nFROM Posts p\nJOIN PostTags pt ON p.Id=pt.PostId\nJOIN\n(\nSELECT tb.Id, tb.TagName, count(*) as cnt\nFROM PostTags b \nLEFT OUTER JOIN Tags tb ON b.TagId=tb.Id\nGROUP BY tb.Id, tb.TagName\nHAVING count(*) > 200000\n) t\nON pt.TagId=t.Id\nGROUP BY year(CreationDate), TagName\nORDER BY TagName, y","CreationDate":"2015-09-29 7:33:08","validated":true}
{"QuerySetId":369939,"Title":"When did I get votes on my post","Description":null,"QueryBody":"SELECT  creationdate, name, count(votes.id)\nfrom votes inner join\nvotetypes on votetypes.id = votes.votetypeid\nwhere postid = ##postid:int##\ngroup by creationdate, name\norder by creationdate, name","CreationDate":"2015-10-01 5:01:56","validated":true}
{"QuerySetId":370456,"Title":"What percentage of questions have been edited?","Description":null,"QueryBody":"SELECT \n  count(LastEditDate) AS \"Edited posts\",\n  count(*) AS \"All posts\",\n  count(LastEditDate) * 100.0 \/ count(*) AS \"Percent edited\"\nFROM Posts\nWHERE Posts.PostTypeId=1;","CreationDate":"2015-10-02 18:19:28","validated":true}
{"QuerySetId":370521,"Title":"New Oracle questions and answers per day","Description":null,"QueryBody":"SELECT  CONVERT(date, p.CreationDate,126) as \"Date\", count(1) AS questions, SUM(p.AnswerCount) as Answers\nFROM posts p\n    WHERE p.tags LIKE '%oracle%'\n      GROUP BY CONVERT(date, p.CreationDate,126)\n        ORDER BY 1 DESC;","CreationDate":"2015-10-02 22:17:44","validated":true}
{"QuerySetId":370549,"Title":"Profile views \/ reputation \u2014 With and without a picture","Description":null,"QueryBody":"SELECT  AVG(Reputation\/Views) FROM USERS WHERE ProfileImageUrl IS NOT NULL AND Views != 0","CreationDate":"2015-10-02 21:52:06","validated":true}
{"QuerySetId":370807,"Title":"Revival badge progress for user","Description":null,"QueryBody":"DECLARE  @tag VARCHAR(30) = ##tag:string##\n\nSELECT TOP 1000\n    a.Id AS [Post Link],\n    a.Score,\n    a.CreationDate\nFROM Posts a\nWHERE\n    a.PostTypeId = 2\n    AND EXISTS\n    (\n        SELECT *\n        FROM Posts q\n        WHERE q.Id = a.ParentId\n        AND q.PostTypeId = 1\n        AND a.CreationDate > q.CreationDate + 30\n        AND Tags LIKE '%<' + LOWER(@tag) + '>%'\n    )\n    \nORDER BY a.Score DESC","CreationDate":"2015-11-24 13:10:56","validated":true}
{"QuerySetId":371182,"Title":"Comments by the Community User","Description":null,"QueryBody":"SELECT  TOP ##topn:int?50## Id as [Comment Link],Score,CreationDate,UserDisplayName\nFROM Comments WHERE UserId=-1\nORDER BY ##orderby?Score DESC##","CreationDate":"2015-10-05 14:07:45","validated":true}
{"QuerySetId":371187,"Title":"Top tags by average score of recent questions","Description":null,"QueryBody":"SELECT  TOP ##topn:int?50##\nMIN(t.TagName) AS [TagName],AVG(p.Score) AS avgScore,COUNT(p.Id) AS nposts\nFROM Posts p INNER JOIN PostTags pt ON p.Id=pt.PostId INNER JOIN Tags t ON pt.TagId=t.Id\nWHERE p.PostTypeId=1\nGROUP BY pt.TagId\nORDER BY AVG(p.Score) DESC","CreationDate":"2015-10-05 14:34:33","validated":true}
{"QuerySetId":372209,"Title":"Popularity of JavaScript frameworks for a given time period","Description":"Count and rank of Ember.js, Knockout.js, Backbone.js, and Angular.js tags in the last month.","QueryBody":"SELECT \n       rate.TagName as Tag,\n       rate.Rate as QuestionsTotal\nfrom\n(\nSELECT\n  count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere\n  Tags.Id = PostTags.TagId and Posts.Id = PostId\n  and Posts.CreationDate < DATEADD(month, -29, GetDate())\n  and Posts.CreationDate > DATEADD(month, -30, GetDate())\n  and TagName in (\n    'ember.js'\n    , 'ember'\n    , 'emberjs'\n    , 'angular'\n    , 'angular.js'\n    , 'angularjs'\n    , 'knockout'\n    , 'knockoutjs'\n    , 'knockout.js'\n    , 'backbone'\n    , 'backbonejs'\n    , 'backbone.js'\n    , 'meteor'\n    , 'meteorjs'\n    , 'polymer'\n    , 'polymerjs'\n    , 'react'\n    , 'reactjs'\n    , 'reactjs-flux'\n  )\n  group by TagName\n) as rate\norder by rate.rate desc\n;","CreationDate":"2015-10-22 0:48:05","validated":true}
{"QuerySetId":372594,"Title":"tag answer count (2014 - today)","Description":null,"QueryBody":"SELECT  t.TagName\n, t.Count as tagCount\n     , sum(q.answerCount) answCnt\n  FROM Posts q\n       inner join Posts a on q.AcceptedAnswerId = a.Id\n       INNER JOIN PostTags pt ON pt.PostId = q.id\n       INNER JOIN Tags t on pt.TagId = t.id\n where  q.id <> a.id\n   and q.OwnerUserId <> a.OwnerUserId\n\n   and q.creationDate >= '2014-01-01'\n   and q.PostTypeId = 1 --question\n   and a.PostTypeId = 2 -- answer\n   --and uq.location is not NULL\nGROUP BY t.TagName, t.Count\n ORDER BY answCnt DESC","CreationDate":"2017-04-21 23:35:26","validated":true}
{"QuerySetId":373167,"Title":"Questions which ever had a tag","Description":null,"QueryBody":"SELECT  p.id [Post Link]\n, case when p.tags like concat('%<', ##tag:string##, '>%') then 1 end tagged\n, p.score\n, case when p.acceptedanswerid is not null then 1 end accepted\n, p.answercount\n, p.viewcount\nfrom posts p\njoin posthistory h on p.id=h.postid\nwhere h.posthistorytypeid in (3, 6)\nand h.text like concat('%<', ##tag##, '>%')\ngroup by p.id, p.acceptedanswerid, p.score, p.viewcount, p.tags, p.answercount\norder by p.score desc","CreationDate":"2015-10-08 23:25:19","validated":true}
{"QuerySetId":373702,"Title":"Oldest Questions for a Tag","Description":null,"QueryBody":"SELECT  TOP 100 Id AS [Post Link], CreationDate\nFROM Posts\nWHERE TAGS LIKE '%<##tag##>%'\nORDER BY CreationDate ASC;","CreationDate":"2015-10-10 2:20:59","validated":true}
{"QuerySetId":373965,"Title":"Number of posts in Stack Overflow that are over the 30k soft character limit","Description":null,"QueryBody":"SELECT \n  p.Id AS [Post Link],\n  (CASE WHEN p.PostTypeId = 1 THEN 'Q' ELSE 'A' END) AS Type,\n  p.Id,\n  LEN(p.Body) AS HtmlSize,\n  LEN(ph.Text) AS MarkdownSize,\n  p.CreationDate,\n  -- p.LastEditDate,\n  ph.CreationDate AS LatestRevisionDate\nFROM Posts p\n  INNER JOIN PostHistory ph\n    ON ph.PostId = p.Id\n  LEFT OUTER JOIN PostHistory phb\n    ON phb.PostId = ph.PostId AND ph.CreationDate < phb.CreationDate\nWHERE (LEN(p.Body) > 30000 OR LEN(ph.Text) > 30000)\n  AND ph.PostHistoryTypeId IN (2, 5, 8)\n  AND phb.CreationDate IS NULL\n  AND p.PostTypeId IN (1, 2)\nORDER BY MarkdownSize DESC","CreationDate":"2015-10-11 7:11:23","validated":true}
{"QuerySetId":374628,"Title":"Users with the highest average score per post","Description":null,"QueryBody":"WITH  at least this many posts:\nWITH scoreByPost AS (\n    SELECT\n                p.OwnerUserId,\n                COUNT (p.Id) AS PostCount,\n                AVG (CAST (p.Score AS FLOAT) ) AS AverageScore\n    FROM\n                Posts p\n    GROUP BY    p.OwnerUserId\n)\nSELECT      TOP 1000 -- Full table keeps timing out on SO data.\n            u.Id    AS [User Link],\n            u.Reputation,\n            FORMAT (sbp.AverageScore, '#,###,##0.000') AS [Average Score]\nFROM        scoreByPost sbp\nINNER JOIN  Users u\nON          u.Id = sbp.OwnerUserId\nWHERE       sbp.PostCount >= ##MinPosts:INT?10##\nORDER BY\n            sbp.AverageScore    DESC,\n            sbp.PostCount       DESC","CreationDate":"2015-10-12 9:08:20","validated":true}
{"QuerySetId":374926,"Title":"Find question in the past month that have links to JSFiddle or CodePen but no code","Description":null,"QueryBody":"SELECT  Id [Post Link], Score\nfrom Posts\nwhere CreationDate > DATEADD(MONTH, -1, GETDATE())\nand PostTypeId = 1\nand (Body like '%jsfiddle.net%' or Body like '%codepen.io%')\nand not (Body like '%    %' or Body like '%<pre>%' or Body like '%<code>%')\norder by id desc","CreationDate":"2020-06-16 13:43:27","validated":true}
{"QuerySetId":375279,"Title":"Popular Javascript Framework Questions in Last Months - AngularJS Ember.JS ReactJS Backbone.JS","Description":null,"QueryBody":"SELECT  *, count(*) as cnt from\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    t.TagName\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId\n  where TagName in \n  ('angularjs', 'ember.js', 'backbone.js', 'reactjs')\n) as X\ngroup by TagName, [Month]\norder by [Month] desc, cnt desc, TagName asc","CreationDate":"2015-10-14 2:48:24","validated":true}
{"QuerySetId":375986,"Title":"Get posts with C-c in their body","Description":null,"QueryBody":"SELECT  id [Post Link]\n,      body\nfrom   posts\nwhere  body like '%simple-git%'","CreationDate":"2020-09-17 17:45:35","validated":true}
{"QuerySetId":376049,"Title":"Users sorted by profile views","Description":null,"QueryBody":"SELECT  Id AS [User Link], Views FROM Users ORDER BY Views DESC","CreationDate":"2015-10-15 18:05:28","validated":true}
{"QuerySetId":376556,"Title":"Top Askers By View Count","Description":null,"QueryBody":"SELECT \nsum(ViewCount) as Tot_Score,\nDisplayName\nfrom posts p\ninner join users u\non u.Id = p.OwnerUserID\nwhere posttypeid = 1\nand OwnerUserID is not null\ngroup by DisplayName\norder by sum(ViewCount) desc","CreationDate":"2015-11-02 15:28:14","validated":true}
{"QuerySetId":377110,"Title":"Breakdown of posts by post type and by score, given UID.","Description":null,"QueryBody":"DECLARE  @uid int = ##UserId##\n\nSELECT \nPostTypes.Name as [Type],\nPosts.Score,\nCOUNT(*) as [Count]\nFrom Posts INNER JOIN PostTypes On Posts.PostTypeId=PostTypes.Id\nWhere OwnerUserId=@uid\nGroup By PostTypes.Name, Posts.Score\nORDER BY PostTypes.Name ASC, Posts.Score DESC","CreationDate":"2015-10-18 16:42:47","validated":true}
{"QuerySetId":377635,"Title":"All possible Location entries for Brazil ('%Bra%')","Description":null,"QueryBody":"SELECT  distinct \n  Location \n  \nFROM \n  Users \n\nWHERE \n  Location like '%Bra%'\n\n;","CreationDate":"2018-01-16 2:41:43","validated":true}
{"QuerySetId":377982,"Title":"New answers or questions from specific period","Description":null,"QueryBody":"DECLARE  @From DATETIME = convert(DATETIME, '##From?2015\/07\/01 00:00:00##')\nDECLARE @To DATETIME = convert(DATETIME, '##To?2015\/09\/30 00:00:00##')\nDECLARE @SubFrom DATETIME = convert(DATETIME, '##SubFrom?2015\/07\/01 00:00:00##')\nDECLARE @SubTo DATETIME = convert(DATETIME, '##SubTo?2015\/09\/30 00:00:00##')\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identify-this-%##\n\nSELECT Q.Id AS [Post Link], Q.LastActivityDate FROM Posts Q WHERE\n  Q.PostTypeId = 1 AND \n  Q.Tags NOT LIKE @Pattern AND \n  Q.LastActivityDate BETWEEN @SubFrom AND @SubTo AND \n  (Q.CreationDate BETWEEN @From AND @To OR \n  EXISTS (SELECT * FROM Posts A WHERE \n    A.PostTypeId = 2 AND A.ParentId = Q.Id AND \n    A.CreationDate BETWEEN @From AND @To))\nORDER BY Q.LastActivityDate ASC","CreationDate":"2015-10-21 1:34:58","validated":true}
{"QuerySetId":378497,"Title":"Users from a specific location","Description":null,"QueryBody":"SELECT  \n  Id [User Link], \n  Reputation, \n  Location, \n  WebsiteUrl,\n  REPLACE(REPLACE(AboutMe, CHAR(13), ''), CHAR(10), '') as AboutMe \n\nFROM \n  Users\n\nWHERE \n  Location like '%##Location##%'\n  -- AboutMe LIKE '%_@_%_.__%' -- AboutMe contains something that looks like an email id\n  -- WebsiteUrl > '' -- WebsiteUrl is not blank\n  \nORDER BY \n  Reputation DESC","CreationDate":"2018-01-16 2:44:12","validated":true}
{"QuerySetId":379840,"Title":"Post Count by Tag, answered and unanswered","Description":null,"QueryBody":"SELECT  T.TagName, COUNT(*) as Questions, Answered\nFROM POSTS P\nINNER JOIN PostTags PT on (P.ID=PT.PostID)\nINNER JOIN Tags T on (PT.TagID=T.ID)\nINNER JOIN (\n  SELECT \n    case when AnswerCount > 0 then 1 else 0 end as Answered, \n    ID \n  from POSTS) P2 ON P2.ID = P.ID\n  WHERE T.tagName IN ('twilio')\n  and P.ClosedDate is null\n  and ParentId is null \nGROUP BY T.TagName, Answered\nORDER BY T.TagName asc, count(*),  Answered","CreationDate":"2015-10-23 22:17:07","validated":true}
{"QuerySetId":379876,"Title":"Angular vs Ember vs React in 2015","Description":null,"QueryBody":"SELECT  \n       rate.TagName as Tag,\n       row_number() over (order by rate.Rate desc) as Rank2015,\n       rate.Rate as QuestionsIn2015\n\nfrom\n\n(SELECT count(PostId) as Rate, TagName\nfrom\n  Tags, PostTags, Posts\nwhere Tags.Id = PostTags.TagId and Posts.Id = PostId\nand Posts.CreationDate > DATEADD(Month, -1, getdate())\nand TagName in ('angularjs', 'ember.js', 'reactjs')\ngroup by TagName) as rate\n\norder by rate.rate desc\n;","CreationDate":"2015-10-23 23:04:19","validated":true}
{"QuerySetId":380054,"Title":"Max rep of all days ever","Description":null,"QueryBody":"SELECT  TOP 100 Rep, OwnerDisplayName, OwnerUserId, dt \nFROM (\n    SELECT MAX(Score) Rep, OwnerDisplayName, OwnerUserId, convert(varchar, CreationDate, 101) dt\n        FROM Posts\n        GROUP BY OwnerDisplayName, OwnerUserId, convert(varchar, CreationDate, 101)\n    ) a\n    --WHERE year(dt) = 2013\nORDER BY Rep DESC","CreationDate":"2015-10-24 3:39:21","validated":true}
{"QuerySetId":380071,"Title":"mysql in need of an answer (hop to it)","Description":null,"QueryBody":"SELECT  TOP 100 q.Id as [Post Link], q.Score, DATEDIFF(DAY, q.CreationDate, GETDATE()) AS Age, q.Score\/(SQRT(DATEDIFF(DAY, q.CreationDate, GETDATE())+1)) AS Immediacy \nFROM Posts q\nLEFT OUTER JOIN Posts a on q.Id=a.ParentId\nand q.PostTypeId=1 AND a.Id IS NULL  -- Unanswered question\nAND NOT q.Id IN (SELECT ph.PostId FROM PostHistory ph WHERE ph.PostHistoryTypeId=37) -- Not merged\ninner join posttags pt on pt.postid = q.ParentId\ninner join tags t on pt.tagid = t.id and t.tagname='mysql'\nwhere DATEDIFF(DAY, q.CreationDate, GETDATE())<30\nORDER BY q.Score\/(SQRT(DATEDIFF(DAY, q.CreationDate, GETDATE())+1)) DESC","CreationDate":"2015-10-24 7:49:18","validated":true}
{"QuerySetId":381900,"Title":"Average post score per user with search term","Description":null,"QueryBody":"SELECT \n[u].[DisplayName] [User],\n[pt].[Name] [Post type],\nAVG([p].[Score]) [Average post score]\nFROM [Users] [u] (NOLOCK)\nJOIN [Posts] [p] (NOLOCK) ON [p].[OwnerUserId] = [u].[Id]\nJOIN [PostTypes] [pt] (NOLOCK) ON [pt].[Id] = [p].[PostTypeId]\nWHERE [p].[PostTypeId] < 4 and ([p].[Body] like '%##SearchTerm##%') AND [p].[ClosedDate] IS NULL\nGROUP BY [u].[Id], [u].[DisplayName], [pt].[Name]\nHAVING COUNT(1) > ##MinimumPostCount:int##\nORDER BY [Average post score] DESC","CreationDate":"2015-10-29 1:06:28","validated":true}
{"QuerySetId":382983,"Title":"Go vs Scala by Year","Description":null,"QueryBody":"SELECT  TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4), count(1)\nfrom Posts p, PostTags pt, Tags t\nwhere p.id = pt.PostId and pt.TagId = t.id\nand TagName in( 'go', 'scala')\ngroup by TagName, substring(convert(VARCHAR, p.CreationDate, 126),1,4)\norder by 1","CreationDate":"2016-03-07 11:34:10","validated":true}
{"QuerySetId":386147,"Title":"Collect aggregate results for users","Description":null,"QueryBody":"SELECT  u.id,u.reputation,\n(SELECT count(*) from votes where votetypeid in (2,3) and postid in\n    (SELECT id from posts where posttypeid=1 and OwnerUserId = u.id)) as [aggregate number of votes received on questions]\nfrom users u \nwhere u.id in\n(83,\n2926,\n3289,\n5862,\n6292,\n8705)","CreationDate":"2015-11-06 12:54:18","validated":true}
{"QuerySetId":386363,"Title":"Suggested edits by anonymous users","Description":"Returns the latest suggested edits by anonymous users along with their approval\/rejection dates and comments.","QueryBody":"SELECT  TOP 500\n  PostId AS [Post Link],\n  'site:\/\/suggested-edits\/'+CONVERT(VARCHAR,id)+'|Suggested Edit #'+CONVERT(VARCHAR,id) [Link],\n  ApprovalDate,\n  RejectionDate,\n  Comment\nFROM SuggestedEdits\nWHERE OwnerUserId IS NULL\nORDER BY Id DESC","CreationDate":"2015-11-06 19:17:12","validated":true}
{"QuerySetId":387083,"Title":"Top 20 SO Users from Taiwan","Description":"SO users from Warsaw with highest reputation","QueryBody":"SELECT  TOP 80\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%croatia%'\n    OR UPPER(Location) LIKE '%CROATIA%'\n    or Location like '%Croatia%'\n    AND Reputation >= 2000\nORDER BY\n    Reputation DESC;","CreationDate":"2015-12-16 15:09:21","validated":true}
{"QuerySetId":388828,"Title":"Tag wiki editors who don't link to anything","Description":null,"QueryBody":"SELECT  e.LastEditorUserId as [User Link], COUNT(*), MAX(e.Id) as [Post Link]\nfrom Tags t\ninner join Posts e on e.Id = t.ExcerptPostId\ninner join Posts w on w.Id = t.WikiPostId\nwhere w.Body not like '%href%'\nand e.Body not like '%href%'\nand LEN(e.Body) > 2\nand LEN(w.Body) > 2\nand ((e.LastActivityDate > DATEADD(month, -6, GETDATE())\n  or w.LastActivityDate > DATEADD(month, -6, GETDATE())))\nand ((e.LastActivityDate < DATEADD(month, -4, GETDATE())\n  or w.LastActivityDate < DATEADD(month, -4, GETDATE())))\ngroup by e.LastEditorUserId\norder by COUNT(*) DESC","CreationDate":"2016-01-30 5:05:57","validated":true}
{"QuerySetId":391288,"Title":"Top Users by answer score and Tag from Country","Description":null,"QueryBody":"SELECT  TOP 10000\n    ROW_NUMBER() OVER(ORDER BY sum(Answers.Score) DESC) AS [#],\n    Users.Id as [User Link],\n    max(Age) as Age,\n    max(Location) as Location,\n    max(Reputation) as Rep,\n    Count(Answers.Id) as Answers,\n    sum(Answers.Score) as Score,\n    CAST(AVG(CAST(Answers.Score AS float)) as numeric(6,1)) as [Avg]\nFROM Tags    \n    JOIN PostTags ON PostTags.TagId = Tags.Id\n    JOIN Posts ON Posts.Id = PostTags.PostId \n    JOIN Posts as Answers ON Answers.ParentId = Posts.Id\n    JOIN Users ON Users.Id = Answers.OwnerUserId\nWHERE  \n    LOWER(Location) LIKE LOWER('%##CountryName##%') and\n    Tags.TagName = '##TagName##'\nGROUP BY \n    Users.Id, DisplayName\nORDER BY \n    Score DESC","CreationDate":"2016-08-10 14:14:38","validated":true}
{"QuerySetId":391638,"Title":"up \/ downvote split for a specific question","Description":null,"QueryBody":"SELECT  sum(case when votetypeid = 2 then 1 else 0 end) as upvotes\n    , sum(case when votetypeid = 3 then 1 else 0 end) as downvotes\n    , count(*) as total\nfrom votes\nwhere postid = ##id##\nand votetypeid in (2,3)","CreationDate":"2015-11-14 0:53:33","validated":true}
{"QuerySetId":392180,"Title":"List of questions with bounties","Description":null,"QueryBody":"SELECT  TOP 500 PostId AS [Post Link], CreationDate, BountyAmount\nFROM Votes\nWHERE BountyAmount IS NOT NULL\nOrder By CreationDate Desc, BountyAmount Desc","CreationDate":"2016-09-02 22:15:35","validated":true}
{"QuerySetId":392331,"Title":"Count Reopened Questions Edited By Owner","Description":null,"QueryBody":"SELECT  COUNT(*)\nFROM Posts p\nWHERE \n    p.PostTypeId = 1 -- questions only\n    AND EXISTS (\n      SELECT * FROM PostHistory ph\n          INNER JOIN PostHistory ph2 ON ph2.postId = ph.postId\n          AND ph2.PostHistoryTypeId IN (5) -- edit title(4), body(5), tags(6)\n            AND ph2.CreationDate > ph.CreationDate\n            AND ph2.UserId = p.OwnerUserId\n      WHERE ph.postId = p.Id\n        AND ph.PostHistoryTypeId = 10 -- closed\n        )\n    AND EXISTS (\n      SELECT * FROM PostHistory ph\n      WHERE ph.postId = p.Id\n        AND ph.PostHistoryTypeId = 11 -- reopened\n        )","CreationDate":"2015-11-15 15:09:31","validated":true}
{"QuerySetId":393997,"Title":"The top 100 longest posts on the site","Description":null,"QueryBody":"SELECT  top 100\n    Posts.Id as [Post Link],\n    PostTypes.Name as [Type],\n    len(Body) as Length,\n    OwnerUserId as [UserLink],\n    CreationDate,\n    Score\nfrom Posts\njoin PostTypes on PostTypeId = PostTypes.Id\norder by Length desc","CreationDate":"2015-11-18 3:50:03","validated":true}
{"QuerySetId":394235,"Title":"Top 20 users called Nathan","Description":null,"QueryBody":"SELECT  TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    DisplayName like '%\u2666%'\nORDER BY\n    Reputation DESC;","CreationDate":"2015-11-19 18:08:33","validated":true}
{"QuerySetId":395360,"Title":"Askers by month for tag","Description":null,"QueryBody":"SELECT  mo, Askers\nfrom \n(\n  SELECT dateadd(month, datediff(month, 0, q.CreationDate), 0) mo, count(distinct OwnerUserId) Askers\n  from Posts q\n  join PostTags pt on pt.PostId=q.Id\n  join Tags t on t.Id=pt.TagId\n  where q.PostTypeId=1\n  and t.TagName='##tagname##'\n  and q.CreationDate < dateadd(month, datediff(month, 0, getdate()), 0)\n  group by dateadd(month, datediff(month, 0, q.CreationDate), 0)\n) x\norder by mo","CreationDate":"2015-11-20 1:17:02","validated":true}
{"QuerySetId":396306,"Title":"Top 5 StackOverflow members in Kolkata","Description":null,"QueryBody":"SELECT  TOP 5\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%kolkata%'\n    OR UPPER(Location) LIKE '%KOLKATA%'\n    or Location like '%kolkata%'\n    AND Reputation >= 10000\nORDER BY\n    Reputation DESC;","CreationDate":"2015-11-21 20:49:39","validated":true}
{"QuerySetId":396820,"Title":"Top 50 SO Users from India","Description":null,"QueryBody":"SELECT  TOP 500\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%india'\nORDER BY\n    Reputation DESC;","CreationDate":"2016-09-07 15:07:30","validated":true}
{"QuerySetId":396842,"Title":"Top 50 in New Zealand","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%zealand'\nORDER BY\n    Reputation DESC;","CreationDate":"2015-11-23 9:16:38","validated":true}
{"QuerySetId":397261,"Title":"Number of posts with a tag name grouped by day","Description":null,"QueryBody":"SELECT  CAST(CreationDate AS DATE), count(PostId)\nfrom Tags, PostTags, Posts \nwhere \nTags.Id = PostTags.TagId \nand Posts.Id = PostId\nand Tags.TagName=##TagName:string##\ngroup by CAST(CreationDate AS DATE) order by CAST(CreationDate AS DATE)","CreationDate":"2015-11-26 1:06:08","validated":true}
{"QuerySetId":397276,"Title":"Ten users with most gold badges (fixed to use official list of string gold badge names)","Description":null,"QueryBody":"SELECT  TOP 100 UserId AS [User Link], COUNT(*) \nFROM Badges\nWHERE Name IN ('Socratic', 'Stellar Question', 'Great Question', 'Famous Question', 'Illuminator', 'Great Answer', 'Populist', 'Reversal', 'Unsung Hero', 'Fanatic', 'Legendary', 'Gold Badge', 'Marshal', 'Constable', 'Sheriff', 'Steward', 'Copy Editor', 'Electorate', 'Publicist')\nGROUP BY UserId\nORDER BY COUNT(*) DESC","CreationDate":"2019-03-05 6:00:51","validated":true}
{"QuerySetId":398004,"Title":"How many words have I written all together?","Description":null,"QueryBody":"SELECT  sum(len(Body) - len(replace(Body, ' ', '')) + 1) as NumbofWords\nfrom Posts p\nwhere p.OwnerUserId = ##UserId##","CreationDate":"2015-11-24 22:48:23","validated":true}
{"QuerySetId":398023,"Title":"SFF Top Views and Answer Score for Top ID Category Tags","Description":null,"QueryBody":"WITH  Questions AS\n(\n  SELECT *, \n    (SELECT sum(A.Score) FROM Posts A WHERE A.ParentId = Q.Id) AS [AnswerScore]\n  FROM\n    Posts AS Q\n  WHERE\n    Q.PostTypeId = 1\n)\n\nSELECT\n  'All' AS [Questions], \n  round(avg(cast(ViewCount AS FLOAT)), 0) AS [Views],\n  round(avg(cast(AnswerCount AS FLOAT)), 2) AS [Answers], \n  round(avg(cast(AnswerScore AS FLOAT)\/cast(AnswerCount AS float)), 2) AS [Answer Score]\nFROM Questions\n\nUNION\n\nSELECT\n  'ID' AS [Questions], \n  round(avg(cast(ViewCount AS FLOAT)), 0) AS [Views],\n  round(avg(cast(AnswerCount AS FLOAT)), 2) AS [Answers], \n  round(avg(cast(AnswerScore AS FLOAT)\/cast(AnswerCount AS float)), 2) AS [Answer Score]\nFROM Questions\nWHERE Tags LIKE '%identification%'","CreationDate":"2015-11-24 23:17:50","validated":true}
{"QuerySetId":399512,"Title":"All questions closed as \"Not A Real Question\" - Potential Hidden Gems","Description":null,"QueryBody":"SELECT  TOP 1000\n  p.Id AS [Post Link],\n  p.CreationDate,\n  ph.CreationDate as ClosureDate,\n  p.Score,\n  p.ViewCount\nFROM Posts p\n  LEFT JOIN PostHistory ph ON ph.PostId = p.Id\n  LEFT JOIN PostHistoryTypes pht on ph.PostHistoryTypeId = pht.Id\n  WHERE ph.PostHistoryTypeId = 10\nAND ph.Comment = (SELECT Id from CloseReasonTypes WHERE Name = 'not constructive')\n      AND p.ClosedDate IS NOT NULL\nORDER BY p.ViewCount DESC","CreationDate":"2018-04-26 2:17:50","validated":true}
{"QuerySetId":400278,"Title":"Badge: Scholar, by month (2011)","Description":null,"QueryBody":"SELECT \n  DateAdd(m, Month(Date), '2010-12-01') As [Month],\n  Count(Id) As [Scholar]\nFrom\n  Badges\nWhere\n  Year(Date) = 2011 And\n  Name = 'Scholar'\nGroup By\n  Month(Date)\nOrder By\n  Month(Date);","CreationDate":"2015-11-28 2:44:26","validated":true}
{"QuerySetId":400279,"Title":"Badge: Nice Answer, by month (2011)","Description":null,"QueryBody":"SELECT \n  DateAdd(m, Month(Date), '2010-12-01') As [Month],\n  Count(Id) As [Nice Answer]\nFrom\n  Badges\nWhere\n  Year(Date) = 2011 And\n  Name = 'Nice Answer'\nGroup By\n  Month(Date)\nOrder By\n  Month(Date);","CreationDate":"2015-11-28 2:45:46","validated":true}
{"QuerySetId":400755,"Title":"Answer count by post (2011)","Description":null,"QueryBody":"SELECT \n  Id,\n  CreationDate,\n  CommunityOwnedDate,\n  AnswerCount\nFrom\n  Posts\nWhere\n  Year(CreationDate) = 2011 And\n  PostTypeId = 1\nOrder By\n  CreationDate;","CreationDate":"2015-11-30 0:31:59","validated":true}
{"QuerySetId":401887,"Title":"Demographic solved posts by user","Description":null,"QueryBody":"SELECT  p.Id, p.Title, p.PostTypeId, p.CreationDate, p.ClosedDate,\np.Score, p.ViewCount, p.AnswerCount, p.Tags,\np.OwnerUserId, p.OwnerDisplayName, owner.Location, owner.Reputation,\nc.Id as AnswerId, c.Score AnswerScore, \nresponseOwner.Id as ResponseOwnerId, \nresponseOwner.DisplayName as ResponseOwnerDisplayName,\nresponseOwner.Location as ResponseOwnerLocation,\nresponseOwner.UpVotes, responseOwner.DownVotes\nfrom Posts p\nINNER JOIN Posts c ON c.Id=p.AcceptedAnswerId\nINNER JOIN Users owner ON p.OwnerUserId=owner.Id\nINNER JOIN Users responseOwner ON c.OwnerUserId=responseOwner.Id","CreationDate":"2015-12-08 2:43:26","validated":true}
{"QuerySetId":406026,"Title":"Get counts of post feedback votes","Description":null,"QueryBody":"SELECT  Case IsAnonymous When 1 Then 'Yes' Else 'No' End As [Anonymous?], \n    Case VoteTypeId When 2 Then 'Upvotes' Else 'Downvotes' End As [Votes Type], \n    Count(Id) As [Total Votes]\nFrom PostFeedback\nGroup By IsAnonymous, VoteTypeId","CreationDate":"2015-12-09 16:58:31","validated":true}
{"QuerySetId":406369,"Title":"What is my average question score?","Description":null,"QueryBody":"SELECT  TOP 100\n    OwnerUserId AS [User Link],\n    CAST(SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END * Score) AS FLOAT) \/ SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) AS AverageQuestionScore,\n    CAST(SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END * Score) AS FLOAT) \/ SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) AS AverageAnswerScore\n    \nFROM\n    Posts\nWHERE \n    PostTypeId = 1 OR PostTypeId = 2\n    \nGROUP BY (OwnerUserId)\nHAVING SUM(CASE WHEN PostTypeId = 1 THEN 1 ELSE 0 END) > 0\n    AND SUM(CASE WHEN PostTypeId = 2 THEN 1 ELSE 0 END) > 0\n\nORDER BY AverageQuestionScore DESC","CreationDate":"2016-09-01 23:51:55","validated":true}
{"QuerySetId":407161,"Title":"Most popular posts with tag","Description":null,"QueryBody":"SELECT  TOP 100 Id AS [Post Link], Tags, ViewCount  FROM Posts WHERE Tags LIKE '%##TagName1##%' ORDER BY ViewCount  DESC","CreationDate":"2015-12-11 8:29:06","validated":true}
{"QuerySetId":407633,"Title":"Questions with low score answers (from high rep users)","Description":"Tries locating hidden gems by searching for answers by high rep users which has low score. To help decide score level it also lists max and average score on that question. It does however _not_ list the user, as we don't want to actually focus on the users when looking for hidden gems, but more to revisit and up-vote worthy answers. ","QueryBody":"DECLARE  @reputationLimit AS INT = ##ReputationLimit:int?5000##;\nDECLARE @lowScoreLimit AS INT = ##LowScoreLimit:int?5##;\nDECLARE @tag as NVARCHAR(60) = ##Tag:string? ##;\n\nSELECT TOP ##Limit:int?100##\n  u.Id AS [User Link],\n  a.Id AS [Post Link],\n  a.CreationDate,\n  a.Score,\n  q.MaxAns,\n  q.AvgAns,\n  q.Tags\nFROM Posts a\n  JOIN Users u ON a.OwnerUserId = u.Id\n  JOIN (\n  SELECT q.Id, q.Tags, AVG(a.Score) AvgAns, MAX(a.Score) MaxAns\n    FROM Posts q\n    JOIN Posts a ON a.ParentId = q.Id\n    WHERE q.AcceptedAnswerId IS NULL\n    GROUP BY q.Id, q.Tags\n  ) q\n  ON a.ParentId = q.Id\nWHERE (u.Reputation > @reputationLimit)\n  AND a.Score <= @lowScoreLimit\n  -- AND q.MaxAnswerScore = 0\n  AND (@tag = '' or q.tags like '%'+@tag+'%')\nORDER BY a.CreationDate DESC","CreationDate":"2015-12-15 20:04:22","validated":true}
{"QuerySetId":410452,"Title":"Ratio of questions with specific tag","Description":null,"QueryBody":"DECLARE  @BeginDate DATETIME = (SELECT min(CreationDate) FROM PostHistory);\nDECLARE @EndDate DATETIME = (SELECT max(CreationDate) FROM PostHistory);\nDECLARE @Pattern VARCHAR(25) = ##TagPattern:string?%identification%##;\n\nWITH Dates AS\n(\n  SELECT @BeginDate AS [DateValue]\n  UNION ALL\n  SELECT DateValue + 1 FROM Dates WHERE DateValue + 1 < @EndDate\n)\n\nSELECT D.DateValue AS [Date],\n\n  (CASE WHEN EXISTS (SELECT * FROM Posts P \n    WHERE P.PostTypeId = 1 AND P.CreationDate < D.DateValue)\n   THEN\n    100.0 * (SELECT count(*) FROM Posts P \n      WHERE P.Tags LIKE @Pattern AND P.CreationDate < D.DateValue) \/ \n    (SELECT count(*) FROM Posts P \n      WHERE P.PostTypeId = 1 AND P.CreationDate < D.DateValue)\n   ELSE 0 END) AS [SW %]\nFROM\n  Dates AS D\nORDER BY D.DateValue ASC\nOPTION (MAXRECURSION 0)","CreationDate":"2015-12-17 0:05:33","validated":true}
{"QuerySetId":413714,"Title":"Closed percentage (user vs. the site)","Description":null,"QueryBody":"SELECT  'proportion of questions closed'\n,1.0*count(all p.closeddate)\/count(p.id) as fraction\nfrom posts p\nwhere p.posttypeid = 1\nunion all\nSELECT concat('proportion of questions closed for user ', ##userID##)\n,1.0*count(all p.closeddate)\/count(p.id) as fraction\nfrom posts p\nwhere p.owneruserid = ##userID##\nand p.posttypeid = 1","CreationDate":"2015-12-22 5:04:48","validated":true}
{"QuerySetId":414233,"Title":"Top 150 Hyderabad, India Users","Description":null,"QueryBody":"SELECT  TOP 150\n   Id,\n   DisplayName,\n   Reputation\nFROM\n   Users\nWHERE\n   Location like N'%Hyderabad%'\nORDER BY\n   reputation DESC","CreationDate":"2015-12-22 18:17:00","validated":true}
{"QuerySetId":415372,"Title":"Top Italian users for Laravel-5 tag","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY tuser.Score DESC) AS [Rank#], \n       us.id [User Link],\n       us.DisplayName,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName = 'laravel-5'\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE UPPER(us.Location) like UPPER('%ita%')\nORDER BY Score DESC;","CreationDate":"2016-02-19 12:36:32","validated":true}
{"QuerySetId":417055,"Title":"Get the name of tags used in 2011","Description":"Query for luckydonald\nhttp:\/\/stackoverflow.com\/questions\/34485255\/get-each-tag-in-string-stackexchange-database?noredirect","QueryBody":"SELECT  DISTINCT TagName AS Tag FROM PostHistory \n  JOIN Tags ON PostHistory.Text LIKE ('%<' + Tags.TagName + '>%')\n\n WHERE  year(CreationDate) = 2011\n    AND    PostHistoryTypeId IN (3  -- initial tags\n                           , 6  -- edit tags\n                           , 9) -- rollback tags","CreationDate":"2015-12-29 21:05:54","validated":true}
{"QuerySetId":417253,"Title":"Posts by tag per week","Description":null,"QueryBody":"DECLARE  @Tag nvarchar(25) = 'google-bigquery';\n\nSELECT\n  WeekStart, COUNT(UniqueId)\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId, \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    Tags.TagName = @Tag and\n    Posts.PostTypeId = 1 -- Questions\n) RelevantQuestionsByWeek\nGROUP BY WeekStart;","CreationDate":"2015-12-29 18:17:29","validated":true}
{"QuerySetId":418401,"Title":"All my posts in year","Description":null,"QueryBody":"SELECT  Count(Id), PostTypeId FROM Posts \nWHERE\nCreationDate >= 2017-01-01\nand CreationDate <= 2018-31-12\nGROUP BY PostTypeId","CreationDate":"2018-03-29 18:00:38","validated":true}
{"QuerySetId":421501,"Title":"Posts and comments by anonymous user","Description":null,"QueryBody":"SELECT \n    Posts.Id as [Post Link],\n    PostTypes.Name as [Type],\n    CreationDate,\n    Score\n  from Posts\n    join PostTypes on PostTypes.Id = PostTypeId\n  where OwnerDisplayName = ##UserName:string## )\nunion all\n( SELECT\n    PostId as [Post Link],\n    'Comment' as [Type],\n    CreationDate,\n    Score\n  from Comments\n  where UserDisplayName = ##UserName:string## )\norder by CreationDate desc","CreationDate":"2016-01-10 4:11:13","validated":true}
{"QuerySetId":424037,"Title":"Top users from Pune (on WordPress stackexchnage)","Description":null,"QueryBody":"SELECT  Id [User Link], *\nfrom Users\nwhere UPPER(Location) like '%PUNE%'  \norder by Reputation desc","CreationDate":"2016-01-15 13:09:06","validated":true}
{"QuerySetId":424985,"Title":"Number of accounts per email address","Description":null,"QueryBody":"SELECT  \n    u1.EmailHash,\n    Count(u1.Id) AS Accounts,\n    (SELECT Cast(u2.Id AS varchar) + ' (' + u2.DisplayName + '), ' FROM Users u2 WHERE u2.EmailHash = u1.EmailHash FOR XML PATH ('')) AS IdsAndNames\nFROM\n    Users u1\nWHERE\n    u1.EmailHash IS NOT NULL\nGROUP BY\n    u1.EmailHash\nHAVING\n    Count(u1.Id) > 1\nORDER BY \n    Accounts DESC","CreationDate":"2016-01-18 20:12:38","validated":true}
{"QuerySetId":425098,"Title":"cliffer some closed questions that need cliffering 2","Description":"http:\/\/meta.stackexchange.com\/questions\/78048\/enable-automatic-deletion-of-old-unanswered-zero-score-questions-after-a-year\/92006#92006","QueryBody":"SELECT \n  q.Id AS [Post Link],\n  q.Score AS qScore,\n  a.Score AS aScore,\n  q.ViewCount AS Views,\n  q.CreationDate AS qDate\nFROM\n  Posts AS q\nINNER JOIN\n  Posts AS a\nON\n  a.ParentId = q.Id\nWHERE\n     q.PostTypeId = 1\n and a.PostTypeId = 2\n and q.Score < 1\n and a.Score = 1\n and q.AcceptedAnswerId IS NULL\n and DATEDIFF(DAY, q.ClosedDate, GETDATE()) > 10\n and (DATEDIFF(DAY, q.LastEditDate, GETDATE()) > 10 OR q.LastEditDate IS NULL)\n and q.Id NOT IN (SELECT PostId FROM PostLinks) -- avoids duplicates\n and not exists (SELECT * FROM Posts WHERE ParentId = q.Id AND Score > 1)\n GROUP BY q.Id, q.Score, a.Score, q.ViewCount, q.CreationDate\n  ORDER BY\n   a.Score ASC","CreationDate":"2016-06-28 4:02:55","validated":true}
{"QuerySetId":428305,"Title":"Unique Docker Posts by Month","Description":null,"QueryBody":"SELECT  [Month], Title, id, [link], ViewCount, Score from\n(\n  SELECT CAST(\n    cast(CONVERT(varchar(3),DATENAME(mm, CreationDate)) as varchar) + '-' +\n      cast(DATEPART(YYYY, CreationDate) as varchar) as varchar) [Month],\n    Title,\n    p.Id, \n    'https:\/\/stackoverflow.com\/questions\/' + CAST(p.Id AS nvarchar) [link],\n    ViewCount,\n    Score\n  from Posts p \n  join PostTags pt on pt.PostId = p.Id\n  join Tags t on t.Id = pt.TagId \n  where TagName LIKE '%docker%'\n  group by p.id, p.CreationDate, Title, ViewCount, Score\n) as X\norder by [Month] asc","CreationDate":"2016-01-27 6:38:16","validated":true}
{"QuerySetId":428712,"Title":"Bluemix tag - monthly totals","Description":null,"QueryBody":"SELECT \nDATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\nTags.TagName,\nCOUNT(*) AS Questions\n\nFROM Tags\nLEFT JOIN PostTags ON PostTags.TagId = Tags.Id\nLEFT JOIN Posts ON Posts.Id = PostTags.PostId\nLEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\nTags.TagName IN ('ibm-bluemix') \nAND PostTypes.Name = 'Question' \nAND CreationDate > '1\/01\/2015 12:00AM'  \n\nGROUP BY\nYear(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\nYear(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2016-06-14 19:29:26","validated":true}
{"QuerySetId":429144,"Title":"top 50 tags in recent 50 days","Description":null,"QueryBody":"SELECT  \n  top 50\n  [TagName],\n  count(PostId)\nfrom\n  Tags inner join PostTags on Tags.Id = PostTags.TagId\n  inner join Posts on Posts.Id = PostTags.PostId\nwhere\n  Posts.CreationDate >= getdate() - 50\ngroup by TagName\norder by count(PostId) desc\n;","CreationDate":"2016-01-28 20:58:55","validated":true}
{"QuerySetId":429233,"Title":"What percentage of down votes are users responsible for?","Description":null,"QueryBody":"WITH  DownVoteCount AS (\n  SELECT DownVoteCount = CAST(SUM(DownVotes) AS float)\n  FROM Users\n-- Divides each row's DownVotes WITH the table's total downvote count\n), DownVoteWeight AS (\n  SELECT DisplayName, UpVotes, DownVoteWeight = ROUND(\n            DownVotes \/ (SELECT DownVoteCount from DownVoteCount) * 100, 4\n          ),\n          DownVoteLikelihood = ROUND(\n            DownVotes \/ CAST((DownVotes + UpVotes) AS float) * 100, 4\n          )\n  FROM Users\n  WHERE Users.DownVotes > 0\n)\n\nSELECT DisplayName, DownVoteWeight, DownVoteLikelihood\nFROM DownVoteWeight\n\nORDER BY DownVoteWeight DESC, UpVotes","CreationDate":"2016-01-30 20:17:56","validated":true}
{"QuerySetId":429324,"Title":"Posts with anonymous feedback and vote score juxtaposed (Anon UV DESC)","Description":null,"QueryBody":"SELECT  * FROM\n(SELECT p.Id as [Post Link]\n  , p.Score\n  , SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes\n  , SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes\n\nFROM Posts p\n , Votes v\nWHERE p.PostTypeId in (1,2) \nAND p.Id = v.PostId\nAND p.CreationDate >= '2015-01-01'\ngroup by p.Id, p.Score) AS VoteTally\n\nINNER JOIN\n\n(SELECT p.Id as [Post Link]\n  , p.Score\n , sum(CASE WHEN f.VoteTypeId = 2  THEN 1 Else 0 End) AnonUpvotes  \n , sum(CASE WHEN f.VoteTypeId = 3  THEN 1 Else 0 End) AnonDownvotes\n\nFROM Posts p\n  ,  PostFeedback f\nWHERE p.PostTypeId in (1,2) \n AND p.Id = f.PostId \nAND p.CreationDate >= '2015-01-01'\ngroup by p.Id, p.Score) AS AnonTally\n\nON AnonTally.[Post Link] = VoteTally.[Post Link]","CreationDate":"2016-01-29 13:17:56","validated":true}
{"QuerySetId":429686,"Title":"StackOverflow Users filtered by Location sorted by Reputation","Description":null,"QueryBody":"WITH  user-links)\n-- A simply query to find users in your city or country. Added user links.\n\nselect Id, Reputation, DisplayName, Location, LastAccessDate, Views \nfrom Users\nwhere Location like '%##Location##%'\norder by Reputation desc","CreationDate":"2016-01-30 5:57:10","validated":true}
{"QuerySetId":431143,"Title":"controversial suggested edits - edits with most reviews","Description":null,"QueryBody":"SELECT  TOP ##topn:int?200##\nrt.SuggestedEditId AS [Suggested Edit Link],COUNT(*) AS totalreviews,\nSUM(CASE WHEN rr.ReviewTaskResultTypeId=1 THEN 1 ELSE 0 END) AS skips,\nSUM(CASE WHEN rr.ReviewTaskResultTypeId=3 THEN 1 ELSE 0 END) AS rejects,\nSUM(CASE WHEN rr.ReviewTaskResultTypeId=2 THEN 1 ELSE 0 END) AS approves\nFROM ReviewTasks rt INNER JOIN ReviewTaskResults rr ON rr.ReviewTaskId=rt.Id\nWHERE rt.ReviewTaskTypeId=1\nGROUP BY rt.SuggestedEditId\n\nORDER BY COUNT(*) DESC","CreationDate":"2016-02-02 14:40:24","validated":true}
{"QuerySetId":432081,"Title":"Tags used more than once without a wiki","Description":null,"QueryBody":"SELECT  t.*\nFROM tags t\nWHERE t.count > 1\n  AND (  t.excerptpostid IS NULL\n      OR t.wikipostid IS NULL\n      )\nORDER BY\n  t.count DESC,\n  t.id DESC;","CreationDate":"2016-02-04 15:42:30","validated":true}
{"QuerySetId":432201,"Title":"Number of unique authors for specific tag per year in given period","Description":null,"QueryBody":"SELECT     DATENAME(yyyy, p1.CreationDate),\n          COUNT(DISTINCT p1.OwnerUserId) \"# distinct Authors\"\n                    \n  from    Posts p1, PostTags ptags1, Tags t1\n  \n where    p1.posttypeid = 1\n   and    p1.id = ptags1.postid \n   and    ptags1.tagid = t1.id \n   and    t1.tagname = '##TagName##'\n   and    p1.CreationDate >= '##startdate##'\n   and    p1.CreationDate <= '##enddate##'\n\ngroup by  DATENAME(yyyy, p1.CreationDate) \n--order by  DATENAME(yyyy, p1.CreationDate) DESC","CreationDate":"2016-02-04 22:55:53","validated":true}
{"QuerySetId":432322,"Title":"Unanswered unremarkable posts by low-reputation users","Description":null,"QueryBody":"SELECT  p.CreationDate, p. AnswerCount, p.Id AS [Post Link]\nFROM Posts p \nINNER JOIN Users u \nON p.OwnerUserId =  u.Id\nWHERE (\n  p.PostTypeId = 1 AND\n  u.Reputation <= ##ReputationLimit## AND\n  len(p.Body) <= ##LengthLimit## AND\n  p.ClosedDate IS NULL AND\n  p.Score = 0 AND\n  p.AnswerCount = 0 \n)\nORDER BY p.CreationDate DESC","CreationDate":"2016-02-05 4:55:26","validated":true}
{"QuerySetId":432482,"Title":"Bottom 1,000 questions on Stack Overflow","Description":null,"QueryBody":"SELECT  TOP 1000\n  answer.Score,\n  answer.Id                                                                             [Post Link],\n  (CASE WHEN answer.Id = question.AcceptedAnswerId\n    THEN 'yes'\n   ELSE 'no' END)                                                                    AS 'Accepted?',\n  question.CreationDate                                                              AS 'Asked On',\n  answer.CreationDate                                                                AS 'Answered On'\nFROM Posts answer\n  INNER JOIN Posts question ON answer.ParentId = question.Id\nWHERE answer.PostTypeId = 2 AND answer.Id = question.AcceptedAnswerId\nORDER BY answer.Score ASC;","CreationDate":"2016-02-08 21:08:26","validated":true}
{"QuerySetId":433214,"Title":"Count of answers by user over time","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId?209103##\n\nSELECT \n  DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0) AS [MONTH]\n  , COUNT(*) AS Count\nFROM Posts\nWHERE OwnerUserId = @UserId\nGROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, CreationDate), 0)\nORDER BY [MONTH] DESC","CreationDate":"2018-06-03 18:58:09","validated":true}
{"QuerySetId":433391,"Title":"Bottom 1,000 python answers on Stack Overflow","Description":null,"QueryBody":"SELECT  TOP 1000\n  answer.Score,\n  answer.Id                                                                             [Post Link],\n  (CASE WHEN answer.Id = question.AcceptedAnswerId\n    THEN 'yes'\n   ELSE 'no' END)                                                                    AS 'Accepted?',\n  question.CreationDate                                                              AS 'Asked On',\n  answer.CreationDate                                                                AS 'Answered On',\n  Tags.TagName\nFROM Posts answer\n  INNER JOIN Posts question ON answer.ParentId = question.Id\n  inner join PostTags on PostTags.PostId = question.Id\n  inner join Tags on PostTags.TagId = Tags.Id\nWHERE answer.PostTypeId = 2 and TagName like '%c#%'\nORDER BY answer.Score ASC;","CreationDate":"2016-02-08 22:02:09","validated":true}
{"QuerySetId":433509,"Title":"Bluemix multi-tag query - standard fields","Description":null,"QueryBody":"DECLARE  @tag1 int\nDECLARE @tag2 int\nselect @tag1=Id from Tags where TagName='ibm-bluemix'\nselect @tag2=Id from Tags where TagName='ibm'\n\nselect distinct\nPosts.Id,\nPosts.Title,\nPosts.CreationDate,\nPosts.LastActivityDate,\nPosts.ClosedDate,\nPosts.Score,\nPosts.ViewCount,\nPosts.AnswerCount,\nPosts.AcceptedAnswerId,\nPosts.Tags\n\nfrom Posts\nINNER JOIN PostTags ON PostTags.PostId = Posts.Id\nINNER JOIN Tags ON Tags.Id = PostTags.TagId\nINNER JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\nleft JOIN Users ON Users.Id = Posts.OwnerUserId\n\nWHERE\n\nPosts.Id in (select PostId from PostTags where TagId = @tag1)\nAND\nPosts.Id in (select PostId from PostTags where TagId = @tag2)\n\nORder by Posts.CreationDate Desc","CreationDate":"2016-06-14 19:29:12","validated":true}
{"QuerySetId":434740,"Title":"Find posts with over X duplicate targets linking back","Description":null,"QueryBody":"SELECT  distinct *\nfrom (\n  SELECT count(*) as dups, \n   RelatedPostId as [Post Link]\n   \n  from PostLinks\n   join Posts q on q.Id=RelatedPostId\n\n  where LinkTypeId=3\n  group by RelatedPostId\n\n) d\nwhere dups > ##numdupes##;","CreationDate":"2017-07-21 8:14:51","validated":true}
{"QuerySetId":435037,"Title":"Search single tag with limit","Description":null,"QueryBody":"SELECT  Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\nAND Tags = CONCAT('<', ##Tag:string##, '>')\nORDER BY CreationDate DESC","CreationDate":"2016-02-11 6:05:15","validated":true}
{"QuerySetId":435141,"Title":"My 50 Lowest Rated Answers On Questions With No Accepted Answer","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT TOP 50\n  p.Id AS [Post Link],\n  COALESCE(p.LastEditDate,p.CreationDate) AS MostRecentChange,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='UpMod' AND\n      v.PostId = p.Id\n  ) AS UpVotes,\n  (\n    Select Count(v.Id) \n    FROM Votes v\n    INNER JOIN VoteTypes vt ON v.VoteTypeId = vt.Id\n    WHERE vt.Name='DownMod' AND\n      v.PostId = p.Id\n  ) AS DownVotes,\n  p.Score\nFROM Posts p\nINNER JOIN PostTypes pt ON pt.Id = p.PostTypeId\nINNER JOIN Posts p2 ON p.ParentId = p2.Id\nWHERE \n  pt.Name='Answer' AND\n  p.OwnerUserId=@UserId AND\n  p2.AcceptedAnswerId IS NULL\nORDER BY \n  p.Score, \n  p.LastEditDate DESC","CreationDate":"2016-02-11 12:34:14","validated":true}
{"QuerySetId":435670,"Title":"How old are the best scored posts (ie score>= 101)?","Description":null,"QueryBody":"SELECT  age, [PostTypeId], avg(score) average_score from (\nSELECT cast((DATEDIFF(m, CreationDate, GETDATE())\/12) as varchar) + ' Y' as Age,\n       score, PostTypeId\nfrom posts\nwhere score >=101\n) t\ngroup by age, PostTypeId\norder by PostTypeId asc,  age asc","CreationDate":"2016-02-13 2:20:20","validated":true}
{"QuerySetId":435764,"Title":"Mentions of Visual Studio and Cordova","Description":null,"QueryBody":"SELECT \n  Posts.OwnerUserId as [User Link],\n  COUNT(Posts.OwnerUserId) as mentions\nFROM Posts\nWHERE\n  Posts.CreationDate > '20160601 00:00:00'\n  AND Posts.Body LIKE '%c4.8xlarge%'\nGROUP BY Posts.OwnerUserId\nORDER BY mentions DESC","CreationDate":"2017-05-13 0:09:13","validated":true}
{"QuerySetId":436641,"Title":"Top users on tag within a location","Description":null,"QueryBody":"WITH  tagscores AS (\n    SELECT p.OwnerUserID as UserId,\n    t.TagName,\n    Count(p.Id) as NumAnswers,\n    Sum(p.Score) AS TotalScore\n    FROM Posts p\n      INNER JOIN PostTags pt ON p.ParentID = pt.PostId\n      INNER JOIN Tags t ON pt.TagId = t.Id\n      INNER JOIN PostTypes py ON p.PostTypeId = py.Id\n    WHERE\n      t.TagName LIKE '%##TagName##%' AND\n      py.Name = 'Answer' AND\n      p.CommunityOwnedDate IS NULL\n    GROUP BY t.TagName, p.OwnerUserID\n    HAVING Sum(p.Score) > 0\n    )\nSELECT\nUsers.Id AS [User Link],\nUsers.Location,\nUsers.Reputation,\ntagscores.TagName,\ntagscores.NumAnswers,\ntagscores.TotalScore\nFROM Users\n    INNER JOIN tagscores ON Users.ID = tagscores.UserID\nWHERE Users.Location LIKE '%##Location##%'\nORDER BY tagscores.TotalScore DESC","CreationDate":"2016-02-15 11:18:25","validated":true}
{"QuerySetId":437452,"Title":"[test] What's the Comment field in ReviewTaskResults?","Description":null,"QueryBody":"SELECT  TOP 200 * FROM ReviewTaskResults WHERE Comment IS NOT NULL AND ReviewTaskResultTypeId!=3","CreationDate":"2016-02-16 15:07:09","validated":true}
{"QuerySetId":437469,"Title":"Downvoted questions with many duplicates","Description":null,"QueryBody":"SELECT  TOP ##topn:int?200## t.Id AS [Post Link],t.Score,t.ClosedDate,COUNT(*) AS num\nFROM Posts t INNER JOIN PostLinks l ON t.Id=l.RelatedPostId INNER JOIN Posts s ON s.Id=l.PostId\nWHERE t.Score<=##maxscore:int?-3## AND l.LinkTypeId=3\nGROUP BY t.Id,t.Score,t.ClosedDate\nORDER BY COUNT(*) DESC","CreationDate":"2016-02-16 16:29:36","validated":true}
{"QuerySetId":438985,"Title":"total count of different kinds of votes on different kinds of posts","Description":null,"QueryBody":"SELECT  vt.Name AS votetype,pt.Name AS posttype,COUNT(*) AS num\nFROM Votes v INNER JOIN VoteTypes vt ON v.VoteTypeId=vt.Id INNER JOIN Posts p ON\np.Id=v.PostId INNER JOIN PostTypes pt ON p.PostTypeId=pt.Id\nGROUP BY vt.Name,pt.Name","CreationDate":"2016-02-19 11:22:42","validated":true}
{"QuerySetId":439545,"Title":"Top 500 Android Questions by View Count, Past N Months","Description":null,"QueryBody":"SELECT  TOP 500\n  Id,\n  Title,\n  CreationDate,\n  Score,\n  ViewCount,\n  Tags\nFROM Posts\nWHERE ClosedDate IS NULL\n  AND Tags LIKE '%android%'\n  AND CreationDate > DateAdd(m, -1 * ##Months##, GetDate())\nORDER BY ViewCount DESC","CreationDate":"2016-02-21 20:42:50","validated":true}
{"QuerySetId":441142,"Title":"Individual Tag Statistics For Date","Description":"Views, Score and Answers per Game (with limited blacklist for other tags)\n","QueryBody":"DECLARE  @total float\nDECLARE @TagName nvarchar(max) = ##Tag:string##\n\nSELECT\n     dateadd(mm, datediff(mm, 0, Posts.CreationDate), 0) as PostWeek,\n     COUNT(Posts.Id) as QuestionCount\nFROM Posts\n     JOIN PostTags ON Posts.Id = PostTags.PostId\n     JOIN Tags ON PostTags.TagId = Tags.Id\nWHERE\n     Posts.CreationDate > '2015-01-21'\n     AND Posts.CreationDate < '2017-01-21'\n     AND Tags.TagName = @TagName\nGROUP BY\n     dateadd(mm, datediff(mm, 0, Posts.CreationDate), 0)","CreationDate":"2017-01-25 16:04:53","validated":true}
{"QuerySetId":442690,"Title":"Question Count for Javascript Tags By Week","Description":"Views, Score and Answers per Game (with limited blacklist for other tags)\n","QueryBody":"SELECT \n  dateadd(wk, datediff(wk, 0, Posts.CreationDate), 0) AS PostWeek,\n  Tags.TagName,\n  COUNT(Posts.Id) as QuestionCount\nFROM Posts \nJOIN PostTags ON Posts.Id = PostTags.PostId\nJOIN Tags ON PostTags.TagId = Tags.Id\nWHERE Tags.TagName IN ('clojurescript')\nGROUP BY dateadd(wk, datediff(wk, 0, Posts.CreationDate), 0), Tags.TagName\nORDER BY dateadd(wk, datediff(wk, 0, Posts.CreationDate), 0) ASC","CreationDate":"2016-03-05 1:40:28","validated":true}
{"QuerySetId":444205,"Title":"Tags with TagName like 'git'","Description":null,"QueryBody":"SELECT  * \nFROM Tags t\nLEFT JOIN Posts ep ON ep.Id = t.ExcerptPostId\nLEFT JOIN Posts wp ON wp.Id = t.WikiPostId\nWHERE t.TagName like '%git%' ORDER BY t.TagName","CreationDate":"2016-03-03 19:09:25","validated":true}
{"QuerySetId":444207,"Title":"Tags with empty Excerpts or Wikis","Description":null,"QueryBody":"SELECT  t.Id, t.Count, t.TagName, ep.Body, wp.Body\nFROM Tags t\nLEFT JOIN Posts ep ON ep.Id = t.ExcerptPostId\nLEFT JOIN Posts wp ON wp.Id = t.WikiPostId\nWHERE \nep.Body IS NULL\nOR ep.Body = ''\nOR wp.Body IS NULL \nOR wp.Body = ''\nORDER BY t.Count, t.TagName","CreationDate":"2016-03-03 19:34:07","validated":true}
{"QuerySetId":446441,"Title":"Most common tags with missing excerpt","Description":"Lists the most commonly used tags with empty\/missing tag wiki excerpt.","QueryBody":"SELECT  Count,\n       ('site:\/\/tags\/' + TagName + '|' + TagName) AS TagName,\n       ExcerptPostId                              AS [Post Link],\n       WikiPostId                                 AS [Post Link]\nFROM   Tags t\n       LEFT JOIN Posts pe\n         ON pe.Id = t.ExcerptPostId\n       LEFT JOIN Posts pw\n         ON pw.Id = t.WikiPostId\nWHERE  ExcerptPostId IS NULL -- no excerpt post\n       OR LEN(pe.Body) = 0   -- excerpt empty\nORDER  BY Count DESC","CreationDate":"2016-03-07 2:52:34","validated":true}
{"QuerySetId":446466,"Title":"No comments no answers and title or body contains \"Excel\"","Description":null,"QueryBody":"DECLARE  @phrase nvarchar(200) = 'html'\n\nselect TOP 30\n  p.Id as [Post Link]\n  FROM Posts p\n  WHERE \n  p.PostTypeId = 1 AND \n  p.score >= 0 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  (p.body like '%' + @phrase +'%' \n  or p.title like '%' + @phrase + '%') \n  order by p.score desc","CreationDate":"2016-03-07 17:07:18","validated":true}
{"QuerySetId":446467,"Title":"No comments no answers and title contains \"Excel\"","Description":null,"QueryBody":"DECLARE  @phrase nvarchar(200) = 'Excel'\n\nselect TOP 30\n  p.Id as [Post Link]\n  FROM Posts p\n  WHERE \n  p.PostTypeId = 1 AND \n  p.score >= 0 AND\n  p.closeddate is null AND\n  ISNULL(p.AnswerCount,0) = 0 AND\n  ISNULL(p.CommentCount,0) = 0 AND\n  p.title like '%' + @phrase + '%' \n  order by p.score desc","CreationDate":"2016-03-07 4:21:48","validated":true}
{"QuerySetId":447261,"Title":"Questions asked in previous month","Description":"Retrieves the set of questions asked in the previous month and orders them by score.","QueryBody":"SELECT  p.Id as [Post Link]\n  , p.CreationDate\n  , p.Score\n  , p.ViewCount\n  , p.ClosedDate\nfrom Posts p\nwhere p.PostTypeId = 1\n  and Month(p.CreationDate) = Month(getdate())-1\n  and Year(p.CreationDate) = Year(getDate())\norder by p.Score desc","CreationDate":"2016-03-09 1:22:22","validated":true}
{"QuerySetId":449112,"Title":"Percentage of Closed Questions by Tag","Description":"Get the percentage of closed questions for each tag, excluding duplicates. You can set the minimum tag popularity with a parameter.","QueryBody":"DECLARE  @min_total INT = ##MinTotal:INT?1##;\n\nSELECT *\nFROM\n  (\n    SELECT\n      t.TagName,\n      Count(TagName) as Closed,\n      t.Count as Total,\n      ROUND(100.*Count(TagName)\/t.Count,3) as [% Closed]\n      FROM Posts p\n      INNER JOIN PostTags pt ON p.Id = pt.PostId\n      INNER JOIN Tags t ON pt.TagId = t.Id\n      INNER JOIN PostHistory h ON p.Id = h.PostId\n      WHERE\n        (p.PostTypeId = 1) AND      -- match questions\n        (p.ClosedDate IS NOT NULL)  -- that have been closed at some point\n       AND h.PostHistoryTypeId = 10      -- and have a history entry for it\n       AND h.Comment NOT IN ('1', '101') -- that says it's not a dupe\n      GROUP BY TagName, t.Count\n  ) a\nWHERE a.Total >= @min_total\nORDER BY\n    [% Closed] desc, TagName","CreationDate":"2016-03-12 6:56:50","validated":true}
{"QuerySetId":450070,"Title":"Jason Goemaat upvotes by tag","Description":null,"QueryBody":"DECLARE  @UserId int = 369792\n\nSELECT --TOP 20 \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    Posts.OwnerUserId = @UserId\nGROUP BY TagName \nORDER BY UpVotes DESC","CreationDate":"2016-03-14 3:34:55","validated":true}
{"QuerySetId":450520,"Title":"Comments more popular than their well-scoring post","Description":"Comments (especially for MSO) that greatly outscore their parent post score.  Has a default minimum post score of 20 and a outscoring threshold of 10.","QueryBody":"SELECT  C.id as [Comment Link]\n  , C.score as 'Comment Score'\n  , P.score as 'Post Score'\nfrom comments C\n  join Posts P on C.postId = P.id\nwhere P.score > ##minPostScore:int?20##\n  and C.score > P.score + ##commentOutscoresBy:int?10##","CreationDate":"2016-03-15 0:18:16","validated":true}
{"QuerySetId":450771,"Title":"How to say \u201cthank you\u201d","Description":null,"QueryBody":"SELECT  TOP ##topn:int?1000## Text COLLATE SQL_Latin1_General_CP1_CI_AS,\nCOUNT(*) AS num,MIN(c.Id) AS [Comment Link]\nFROM Comments c INNER JOIN Users u ON c.UserId=u.Id\nWHERE u.Reputation<=##maxrep:int?10## AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like '%than[kx]%'\nGROUP BY Text COLLATE SQL_Latin1_General_CP1_CI_AS\nORDER BY COUNT(*) DESC","CreationDate":"2016-04-09 11:21:55","validated":true}
{"QuerySetId":451377,"Title":"Zero-score answers with at least one \u201cthank you\u201d answer","Description":null,"QueryBody":"SELECT  TOP ##topn:int?1000## p.Id as [Post Link], \nc.Id AS [Comment Link], p.CreationDate as [Answer creation date]\nFROM Comments c \nINNER JOIN Users u ON c.UserId=u.Id\nINNER JOIN Posts p ON p.Id=c.PostId\nWHERE u.Reputation<=##maxrep:int?10## AND\np.PostTypeId = 2 AND\np.Score <= 0 AND\nText COLLATE SQL_Latin1_General_CP1_CI_AS Like '%than[kx]%'\nORDER BY p.CreationDate DESC","CreationDate":"2016-03-16 13:09:19","validated":true}
{"QuerySetId":451727,"Title":"Questions with accepted answer by year","Description":null,"QueryBody":"SELECT  p.CreationDate, p.hasAnswer as [has answer], count(*) as [Count]\nfrom (\n  SELECT \n  YEAR(CreationDate) as CreationDate,\n  case  \n    when AcceptedAnswerid is not null then 'YES'\n    else 'NO' end as hasAnswer\n  from Posts\n  ) p\ngroup by p.CreationDate, p.hasAnswer","CreationDate":"2016-03-17 14:52:07","validated":true}
{"QuerySetId":454020,"Title":"Order posts by number of links","Description":null,"QueryBody":"SELECT \n  pl.RelatedPostId as [Post Link],\n  count(pl.RelatedPostId) as [Number of Links],\n  p.Title, p.Score, p.ViewCount, p.Tags, p.AnswerCount\nfrom PostLinks pl\njoin Posts p on p.Id = pl.RelatedPostId\njoin PostTags pt on pt.PostId = pl.RelatedPostId\njoin Tags t on t.Id = pt.TagId\ngroup by pl.RelatedPostId, p.ViewCount, p.Score, p.AnswerCount, p.Title, p.Tags\norder by [Number of Links] desc","CreationDate":"2016-03-22 21:22:53","validated":true}
{"QuerySetId":454749,"Title":"Histogram of time to first answer mathematica","Description":null,"QueryBody":"SELECT  hours_to_first_answer, count(*) as answer_count from\n(\nSELECT qId, min(hours_to_answer) as hours_to_first_answer from \n(SELECT questions.Id as qId, questions.CreationDate as qCreationDate, answers.Id as aId, answers.CreationDate as aCreationDate, DATEDIFF(hour, questions.CreationDate, answers.CreationDate) as hours_to_answer\nfrom \n(\nSELECT * from Posts where PostTypeId=1 and Id in (SELECT PostId from PostTags)\n) questions\ninner join \n(\nSELECT * from Posts where PostTypeId=2 and ParentId in (SELECT PostId from PostTags)\n) answers on questions.Id = answers.ParentId) qa group by qId\n) latency \ngroup by hours_to_first_answer\norder by hours_to_first_answer","CreationDate":"2016-03-22 22:31:52","validated":true}
{"QuerySetId":459737,"Title":"Number of questions asked per week given a specified tag","Description":null,"QueryBody":"DECLARE  @CreationDate datetime = '##CreationDate?2014-01-01##';\n\nSELECT\n  COUNT(UniqueId) as NrOfQuestions, WeekStart\nFROM \n(\n  SELECT\n    Posts.Id AS UniqueId,     \n    dateadd(week, datediff(day, '20000109', Posts.CreationDate) \/ 7, '20000109') AS WeekStart  \n  FROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.Id\n    INNER JOIN Posts ON Posts.Id = PostTags.PostId\n  WHERE\n    \n    Posts.CreationDate  >= @CreationDate\n    AND Posts.PostTypeId = 1 -- Questions  \n) RelevantQuestionsByWeek\nGROUP BY WeekStart\nOrder by WeekStart desc;","CreationDate":"2016-08-21 4:32:41","validated":true}
{"QuerySetId":461132,"Title":"Questions by someone answered by someone else","Description":null,"QueryBody":"DECLARE  @answerer int = ##answerer##\n\nselect\n  a.Id [Post Link]\nfrom\n  Posts q join\n  Posts a on q.Id = a.ParentId\nwhere\n  a.PostTypeId = 2 and a.OwnerUserId = @answerer","CreationDate":"2020-02-19 11:18:00","validated":true}
{"QuerySetId":463580,"Title":"Users with 200+ rep days","Description":null,"QueryBody":"SELECT  vt.DisplayName\n    , DaysAbove200 = COUNT(vt.VoteDate)\nFROM (\nSELECT VoteNums.DisplayName\n    , VoteNums.VoteDate\nFROM (\nSELECT u.DisplayName\n    , VoteDate = CONVERT(DATE, v.CreationDate)\n    , VoteRep = CASE vt.Name \n        WHEN 'AcceptedByOriginator' THEN 15\n        WHEN 'UpMod' THEN 10\n        WHEN 'DownMod' THEN -2\n        ELSE 0\n      END\nFROM dbo.Users u\n    INNER JOIN dbo.Posts p ON (u.Id = p.OwnerUserId) \n    INNER JOIN dbo.Votes v ON p.Id = v.PostId\n    INNER JOIN dbo.VoteTypes vt ON v.VoteTypeId = vt.Id\n    ) VoteNums\nGROUP BY VoteNums.DisplayName\n    , VoteNums.VoteDate\nHAVING SUM(VoteNums.VoteRep) >= 200\n) vt\nGROUP BY vt.DisplayName\nORDER BY COUNT(vt.VoteDate) DESC;","CreationDate":"2016-04-13 22:43:47","validated":true}
{"QuerySetId":466162,"Title":"Top 1000 Users in India","Description":null,"QueryBody":"SELECT  TOP 1000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%india%'\n    OR UPPER(Location) LIKE '%IND'\nORDER BY\n    Reputation DESC;","CreationDate":"2016-04-04 21:55:25","validated":true}
{"QuerySetId":467693,"Title":"A list of the top 20 users with the highest average answer score excluding\ncommunity wiki \/ closed posts or users with less than 10 answers\n","Description":"A list of the top 500 users with the highest average answer score excluding\ncommunity wiki \/ closed posts or users with less than 10 answers\n","QueryBody":"SELECT  \n    TOP 20\n    Users.Id as [User Link],\n    Count(Posts.Id) AS Answers,\n    CAST(AVG(CAST(Score AS float)) as numeric(6,2)) AS [Average Answer Score]\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2 and CommunityOwnedDate is null and ClosedDate is null\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > 10\nORDER BY\n    [Average Answer Score] DESC","CreationDate":"2019-06-22 12:13:58","validated":true}
{"QuerySetId":469392,"Title":"Java in-memory database popularity by time","Description":null,"QueryBody":"SELECT  \n  d,\n  SUM(h2)     OVER (ORDER BY d) AS h2,\n  SUM(hsqldb) OVER (ORDER BY d) AS hsqldb,\n  SUM(derby)  OVER (ORDER BY d) AS derby,\n  SUM(sqlite)  OVER (ORDER BY d) AS sqlite,\n  SUM(firebird)  OVER (ORDER BY d) AS firebird\nFROM (\n  SELECT \n    CAST(CreationDate AS DATE) AS d, \n    COUNT(CASE WHEN Tags LIKE '%<h2>%'     THEN 1 END) AS h2,\n    COUNT(CASE WHEN Tags LIKE '%<hsqldb>%' THEN 1 END) AS hsqldb,\n    COUNT(CASE WHEN Tags LIKE '%<derby>%'  THEN 1 END) AS derby,\n    COUNT(CASE WHEN Tags LIKE '%<sqlite>%'  THEN 1 END) AS sqlite,\n    COUNT(CASE WHEN Tags LIKE '%<firebird>%'  THEN 1 END) AS firebird\n  FROM Posts\n  GROUP BY CAST(CreationDate AS DATE)\n) AS DailyPosts\nORDER BY d ASC","CreationDate":"2018-02-28 19:30:17","validated":true}
{"QuerySetId":469791,"Title":"Questions for Bumping by Community \u25c6","Description":null,"QueryBody":"WITH  Questions AS (\n  SELECT Id, PostTypeId\n  FROM Posts\n  WHERE PostTypeId = 1\n    AND LastActivityDate <= DATEADD(day, -30, GETDATE())\n    AND AnswerCount <> 0\n),\nAnswerScore AS (\n  SELECT ParentId, MAX(Score) AS MaxScore\n  FROM Posts\n  WHERE PostTypeId = 2\n  GROUP BY ParentId\n),\nTotalQuestions AS (\n  SELECT PostTypeId, COUNT(*) AS Total\n  FROM Posts\n  WHERE PostTypeId = 1\n    AND CreationDate <= DATEADD(day, -30, GETDATE())\n  GROUP BY PostTypeId\n)\n\nSELECT \n  Id AS [Post Link]\nFROM Questions q\n  JOIN AnswerScore a ON q.Id = a.ParentId\n  JOIN TotalQuestions t ON q.PostTypeId = t.PostTypeId\nWHERE a.MaxScore = 0","CreationDate":"2016-09-14 15:09:09","validated":true}
{"QuerySetId":469941,"Title":"Simple data on reputation parity above a given lower bound","Description":null,"QueryBody":"SELECT \n  Count(*) as [Total],\n  Sum(Case When Reputation % 2 = 0 then 1 else 0 end) as [Even],\n  Sum(Case When Reputation % 2 = 1 then 1 else 0 end) as [Odd],\n  Round((Sum(Case When Reputation % 2 = 0 then 1 else 0 end)*100.0)\/Count(*),3) as [%Even],\n  Round((Sum(Case When Reputation % 2 = 1 then 1 else 0 end)*100.0)\/Count(*),3) as [%Odd],\n  Case When Sum(Case When Reputation % 2 = 1 then 1 else 0 end) = 0 then 0 else Round((Sum(Case When Reputation % 2 = 0 then 1 else 0 end)*1.0)\/Sum(Case When Reputation % 2 = 1 then 1 else 0 end),3) end as [Even\/Odd],\n  Round(Avg(Reputation*1.0),3) as [Mean]\nFrom Users\nWhere Reputation >= ##lowerBound##","CreationDate":"2016-04-11 13:25:45","validated":true}
{"QuerySetId":470501,"Title":"Did I mark all my questions as accepted?","Description":null,"QueryBody":"SELECT  Id AS [Post Link], *\nfrom posts\nwhere posttypeid=1\nand acceptedanswerid is NULL\nand ClosedDate is NULL\nand AnswerCount > 0\nand OwnerUserId=##ownerid##","CreationDate":"2016-05-02 19:56:16","validated":true}
{"QuerySetId":471472,"Title":"Upvoted posts containing lower-case \"i\"","Description":"Posts containing a body that is less than 5 chars long\n","QueryBody":"SELECT  Id as [Post Link], Body, Score, CreationDate from Posts where  \nParentId is null\nand Score > 1 and\nBody like '%##text##%'\nCOLLATE SQL_Latin1_General_CP1_CS_AS\nORDER BY CreationDate DESC","CreationDate":"2016-04-21 18:32:07","validated":true}
{"QuerySetId":475655,"Title":"Top users in srilanka for windows-phone","Description":null,"QueryBody":"SELECT  ROW_NUMBER() OVER(ORDER BY Score DESC) AS [#], us.id [User Link],\n       us.DisplayName,\n       us.age,\n       tuser.Score\n       \nFROM Users us\n\nJOIN \n(SELECT Answers.OwnerUserId AS UserId, SUM(Answers.Score) AS Score\n     FROM Tags \n    JOIN PostTags ON Tags.Id = PostTags.TagId\n    JOIN Posts ON Posts.Id = PostTags.PostId  \n    JOIN Posts Answers ON Answers.ParentId = Posts.Id \n   WHERE Tags.TagName IN ('windows-phone-8')\n  GROUP BY Answers.OwnerUserId\n) tuser ON tuser.UserId = us.Id\n\nWHERE lower(us.Location) like '%lanka%'\nORDER BY Score DESC;","CreationDate":"2017-04-12 20:55:29","validated":true}
{"QuerySetId":476040,"Title":"Which questions are the targets of dupe closures most often?","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], count(distinct postlinks.id) as number_of_closures\nfrom posts inner join\npostlinks on postlinks.relatedpostid = posts.id\nwhere linktypeid = 3\ngroup by posts.id\norder by count(distinct postlinks.id) desc","CreationDate":"2016-04-21 5:32:12","validated":true}
{"QuerySetId":476292,"Title":"Top 20 voted CSS answers","Description":null,"QueryBody":"SELECT  top 20 count(v.postid) as 'Vote count', v.postid AS [Post Link],p.body\nfrom votes v inner join Tags t \non v.id = t.id\ninner join posts p on p.id=v.postid\nwhere PostTypeId = 2 and VoteTypeId=2 and\nt.TagName = 'CSS'\ngroup by v.postid,p.body\norder by 'Vote count' desc","CreationDate":"2016-04-21 20:12:17","validated":true}
{"QuerySetId":476659,"Title":"Questions and their average answers score with more than 5 answers","Description":null,"QueryBody":"SELECT  TOP 10 P1.Id as QuestionId, AVG(1.0 * P2.Score) as AverageScore\nFROM Posts as P1 JOIN Posts as P2 ON P1.Id=P2.ParentId\nWHERE P1.PostTypeId=1 GROUP BY P1.Id HAVING Count(P2.Id)>5","CreationDate":"2016-04-22 18:03:40","validated":true}
{"QuerySetId":477627,"Title":"TOP 100 users by up votes vs vote delta","Description":null,"QueryBody":"SELECT  TOP 1000\n  DisplayName, UpVotes, UpVotes-DownVotes AS delta\nFROM \n  Users\n  WHERE Id != -1\nORDER BY UpVotes DESC","CreationDate":"2016-04-25 10:47:04","validated":true}
{"QuerySetId":477837,"Title":"Question Score VS Question Size","Description":null,"QueryBody":"SELECT  TOP 1000 Id, score, LEN(body) AS size\nFROM posts\nWHERE PostTypeId = 1\nORDER BY score DESC","CreationDate":"2016-04-25 19:04:40","validated":true}
{"QuerySetId":477871,"Title":"Number of Users by Locality","Description":null,"QueryBody":"SELECT  location, Count(*) as pop from Users\n  where location like '%##Location##%'\n  group by location\n  order by pop DESC","CreationDate":"2016-04-26 3:31:58","validated":true}
{"QuerySetId":478426,"Title":"Questions per day on Stack Exchange","Description":null,"QueryBody":"SELECT \n    DATEADD(d, 0, DATEDIFF(d, 0, p.CreationDate)),\n    COUNT(*)\nFROM\n        Posts p\n    inner join users u on u.id = p.owneruserid\nWHERE p.PostTypeId = 1\nand  DATEADD(d, 0, DATEDIFF(d, 0, p.CreationDate))> '2015-07-31 00:00:00'\n-- and u.reputation=1\nGROUP BY\n    DATEADD(d, 0, DATEDIFF(d, 0, p.CreationDate))\nORDER BY\n    DATEADD(d, 0, DATEDIFF(d, 0, p.CreationDate))","CreationDate":"2016-05-31 5:15:48","validated":true}
{"QuerySetId":478515,"Title":"My Answers to Negatively Scored Questions","Description":null,"QueryBody":"SELECT  P.Id AS [Post Link], (SELECT P2.Score FROM Posts P2 WHERE P2.Id = P.ParentId) AS [Question Score], (SELECT P2.ClosedDate FROM Posts P2 WHERE P2.Id = P.ParentId) AS [Question Closed Date]\nFROM Posts P\nWHERE P.ParentId in (\n                   SELECT Id FROM Posts P2\n                   WHERE P2.PostTypeId = 1\n                   AND P2.Score < 0\n                  )\n\nAND P.PostTypeId = 2\nAND P.OwnerUserID = ##userid##","CreationDate":"2016-04-27 18:05:39","validated":true}
{"QuerySetId":482447,"Title":"Top 100 Users Under 22","Description":null,"QueryBody":"SELECT  Id AS [User Link], * FROM(SELECT TOP 100 * FROM Users\n  WHERE Age<>'' AND Age > 0 AND Age < 22\n  ORDER BY Reputation DESC) users","CreationDate":"2016-05-04 3:40:48","validated":true}
{"QuerySetId":482743,"Title":"Top 50 users from Turkey","Description":null,"QueryBody":"SELECT  TOP 50\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    Id AS [User Link],\n    Reputation,\n    Location\nFROM\n   Users\nWHERE\n    LOWER(Location) LIKE '%turkey'\nORDER BY\n    Reputation DESC;","CreationDate":"2016-05-04 22:16:04","validated":true}
{"QuerySetId":483475,"Title":"Questions with \"what have you tried comments\" between two dates","Description":null,"QueryBody":"DECLARE  @pStartDate date = '##StartDate##'\nDECLARE @pEndDate date = '##EndDate##'\n\nselect\n  count(*) as QuestionCount,\n  sum(A.TriedComments) as TriedCount\nfrom\n  (\n  select\n    sum(case when C.text like '%have you tried%' or c.text like '%you have tried%' then 1 else 0 end) as TriedComments,\n    P.ID\n  from\n    Posts as P\n    left join Comments as C on C.PostID = P.ID \n  where    \n    P.creationdate between @pStartDate and @pEndDate\n    and P.posttypeid = 1\n  group by\n    P.ID\n    ) as A","CreationDate":"2017-05-14 23:05:00","validated":true}
{"QuerySetId":483997,"Title":"Top 100 C++ Answerers in the last 100 days in Zurich","Description":null,"QueryBody":"SELECT  * \nfrom users u\ninner join posts p \n  on p.owneruserid = u.id\nwhere u.DisplayName = 'Smeeheey'  \n*\/\n\nSELECT top 100\n  u.Id AS [User Link], \n  number_of_answers = count(*), \n  total_score = sum(p.score),\n  u.Location\nfrom\n  users u\njoin \n  posts p on p.owneruserid = u.id\njoin \n  posts pp on p.parentid = pp.id\njoin \n  posttags pt on pt.postid = pp.id\njoin \n  tags t on t.id = pt.tagid\nwhere \n  t.tagname like '%c++%' \n and \n  p.creationdate > (getdate()-30)\n --and \n  --u.location like '%London%'\n --and\n  --u.DisplayName = 'Smeeheey'\ngroup by \n  u.Id, u.Location\norder by \n  3 desc;","CreationDate":"2016-06-02 12:36:20","validated":true}
{"QuerySetId":484396,"Title":"count Votes group by postid, votetypeid","Description":null,"QueryBody":"SELECT  postid, votetypeid, count(1)\nfrom votes\nwhere postid = ##postid##\ngroup by postid, votetypeid","CreationDate":"2016-05-10 17:10:10","validated":true}
{"QuerySetId":484858,"Title":"Ruby, Python, PHP, Scala, Go popularity over time","Description":null,"QueryBody":"SELECT  YEAR(p.CreationDate), TagName, count(1)\nfrom Posts p, PostTags pt, Tags t\nwhere p.id = pt.PostId and pt.TagId = t.id\nand TagName in( 'php', 'zend-framework', 'symfony2', 'wordpress', 'drupal', 'laravel')\nand p.CreationDate < '2016-01-01'\ngroup by YEAR(p.CreationDate), TagName\norder by 1","CreationDate":"2016-07-30 5:42:56","validated":true}
{"QuerySetId":484865,"Title":"Unique Most Recent Post For Each User","Description":null,"QueryBody":"SELECT  Top 20 \n    OwnerUserId, Score FROM Posts\n    inner join (\n      SELECT OwnerUserId id, Max(CreationDate) maxDate\n      FROM Posts\n      Group By OwnerUserId\n    ) p on Posts.OwnerUserId = p.id and Posts.CreationDate = p.maxDate","CreationDate":"2016-05-12 1:54:02","validated":true}
{"QuerySetId":485156,"Title":"Count upvotes on top 10 most common tags","Description":null,"QueryBody":"SELECT  \n    TagName,\n    COUNT(*) AS UpVotes \nFROM Tags\n    INNER JOIN PostTags ON PostTags.TagId = Tags.id\n    INNER JOIN Posts ON Posts.ParentId = PostTags.PostId\n    INNER JOIN Votes ON Votes.PostId = Posts.Id and VoteTypeId = 2\nWHERE \n    TagName in\n        (SELECT \n         TOP 10 t.TagName from Tags t\n         inner join PostTags pt on pt.TagId=t.Id\n         inner join Posts p on pt.PostId=p.Id\n         group by t.TagName\n         order by count(*) desc)    \nGROUP BY TagName","CreationDate":"2016-05-13 1:18:46","validated":true}
{"QuerySetId":485239,"Title":"Migrated questions from ELU with scores less than parameter","Description":null,"QueryBody":"SELECT  p.Score, ph.CreationDate [Migrated], ph.PostId [Post Link], cr.Name \"Closed as\"\nfrom PostHistory ph\njoin Posts p on p.Id=ph.PostId\nleft join PostHistory cph on cph.PostId=ph.PostId and cph.CreationDate=p.ClosedDate and cph.PostHistoryTypeId=10\nleft join CloseReasonTypes cr on cr.Id=cph.Comment\nwhere ph.PostHistoryTypeId=36\nand p.PostTypeId=1\nand ph.Comment like 'from %english.stackexchange.com%'\nand ph.CreationDate > convert(datetime,##StartDate:string?09\/22\/2015##)\nand p.Score <= ##MaximumScore?50##\nand p.Score >= ##MinimumScore?-50##\norder by score","CreationDate":"2017-08-07 2:44:19","validated":true}
{"QuerySetId":485297,"Title":"Number of posts by user from France or India per age and location","Description":null,"QueryBody":"SELECT \n\t\t-- >users (copy) Age (Dimension)\na2.\"age\" AS \"Age\"\n\t,\n\t\t-- >users (copy) Location (Dimension)\na2.\"location\" AS \"Location\"\n\t,\n\t\t-- COUNT posts (Metric)\nCOUNT(*) AS \"count_posts\"\nFROM \n\t\t\"Posts \" a1 \n     LEFT OUTER JOIN \"users\" a2 ON (a2.\"id\"=a1.\"LastEditorUserId \")\n     WHERE\n(a2.\"location\" IN ('France','India'))\nGROUP BY a2.\"age\" , a2.\"location\"\nORDER BY\n\t\t\"Age\" DESC\n\t,\n\t\t\"Location\" DESC","CreationDate":"2016-05-12 20:12:23","validated":true}
{"QuerySetId":485430,"Title":"Top users from Morgantown, WV","Description":null,"QueryBody":"SELECT  TOP 100\n   Id,\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n    Location like N'%Morgantown%' \nORDER BY\n   reputation DESC","CreationDate":"2016-05-13 9:51:19","validated":true}
{"QuerySetId":486094,"Title":"JavaScript MVC Framework Trends (Mid-Tier, from TodoMVC) (# of Questions per Month)","Description":null,"QueryBody":"SELECT \n  DATEADD(mm, (Year(Posts.CreationDate) - 1900) * 12 + Month(Posts.CreationDate) - 1, 0) AS Month,\n  Tags.TagName,\n  COUNT(*) AS Questions\n\nFROM Tags\n  LEFT JOIN PostTags ON PostTags.TagId = Tags.Id\n  LEFT JOIN Posts ON Posts.Id = PostTags.PostId\n  LEFT JOIN PostTypes ON PostTypes.Id = Posts.PostTypeId\n\nWHERE\n  Tags.TagName IN (\n    'backbone.js', 'ember.js', 'knockout.js', 'dojo', 'polymer', 'kendo-ui', 'extjs', 'durandal', 'sapui5', 'vue.js', 'marionette'\n  ) AND\n  \n  PostTypes.Name = 'Question' AND\n  \n  -- Exclude the current month\n  Posts.CreationDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)\n\nGROUP BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName\n\nORDER BY\n  Year(Posts.CreationDate), Month(Posts.CreationDate), Tags.TagName","CreationDate":"2018-04-16 23:20:02","validated":true}
{"QuerySetId":488747,"Title":"What is my average answer score?","Description":null,"QueryBody":"SELECT  \n    AVG(CAST(Score AS float)) AS AverageAnswerScore\nFROM\n    Posts\n  WHERE\n    PostTypeId = 1","CreationDate":"2016-05-20 18:25:26","validated":true}
{"QuerySetId":488861,"Title":"Find tags and their excerpts (\"definitions\")","Description":null,"QueryBody":"SELECT  Count,\n       ('site:\/\/tags\/' + TagName + '|' + TagName) AS TagName,\n       ExcerptPostId                              AS [Post Link]\nFROM   Tags t\n       LEFT JOIN Posts p\n         ON p.Id = t.ExcerptPostId\nWHERE  NOT(ExcerptPostId IS NULL) -- no tag excerpt\n       AND LEN(Body) > 0   -- tag excerpt empty\nORDER  BY Count DESC","CreationDate":"2016-05-20 22:24:46","validated":true}
{"QuerySetId":489021,"Title":"Counts and Scores and Averages for Questions and Answers","Description":null,"QueryBody":"SELECT  ownerUserId as [User Link],\n       question_count,\n       question_score,\n       (case when question_count > 0 then (1.0*question_score\/question_count) else 0 end) as score_per_question,\n       answer_count,\n       answer_score,\n       (case when answer_count > 0 then (1.0*answer_score\/answer_count) else 0 end) as score_per_answer\nfrom\n(SELECT p.ownerUserId, \nsum(case when p.postTypeId=1 then 1 else 0 end) question_count,\nsum(case when p.postTypeId=1 then p.score else 0 end) question_score,\nsum(case when p.postTypeId=2 then 1 else 0 end) answer_count,\nsum(case when p.postTypeId=2 then p.score else 0 end) answer_score\nfrom posts p\njoin users u\non p.ownerUserId = u.Id\nwhere u.reputation > 500 -- to limit the rows (and allow sorting)\ngroup by p.ownerUserId) a","CreationDate":"2016-06-10 0:59:09","validated":true}
{"QuerySetId":489051,"Title":"Users by total comment score","Description":null,"QueryBody":"SELECT  Top 100\n  Users.Id as [User Link],\n  SUM(Comments.Score) AS 'Total comment score'\nFROM Users\nINNER JOIN Comments ON Users.Id = Comments.UserId\nGROUP BY Users.Id\nORDER BY SUM(Comments.Score) DESC","CreationDate":"2016-05-22 0:23:47","validated":true}
{"QuerySetId":490982,"Title":"Top 50 Developers from Roorkee","Description":null,"QueryBody":"SELECT  TOP 5000\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%roorkee%'\n    OR UPPER(Location) LIKE '%ROORKEE'\nORDER BY\n    Reputation DESC;","CreationDate":"2016-05-26 16:28:17","validated":true}
{"QuerySetId":491677,"Title":"users with the most questions.","Description":null,"QueryBody":"SELECT  \n    TOP 10\n    DisplayName as [User],\n    Count(Posts.Id) AS Questions\nFROM\n    Posts\n  INNER JOIN\n    Users ON Users.Id = OwnerUserId\nWHERE \n    PostTypeId = 2\nGROUP BY\n    Users.Id, DisplayName\nHAVING\n    Count(Posts.Id) > 10\nORDER BY\n    [Questions] DESC","CreationDate":"2016-05-28 0:36:09","validated":true}
{"QuerySetId":492143,"Title":"Distinct Askers vs. Distinct Answerers","Description":null,"QueryBody":"WITH  EligiblePosts As (\n    Select OwnerUserId, PostTypeId, Count(*) as [Count] From Posts\n   Where (PostTypeId = 1 OR PostTypeId = 2) Group By OwnerUserId, PostTypeId\n)\n       \n\nSelect \n   (Select Count(Distinct OwnerUserId) \n       From EligiblePosts Where PostTypeId = 1) as DistinctAskers,\n   (Select Count(Distinct OwnerUserId)\n       From EligiblePosts Where PostTypeId = 2) as DistinctAnswerers","CreationDate":"2016-05-29 23:20:41","validated":true}
{"QuerySetId":492298,"Title":"Dump my answers to questions","Description":null,"QueryBody":"SELECT \n    q.Id, q.CreationDate, q.Title, q.Body, a.Id, a.CreationDate, a.Body\nfrom\n    Posts q\n  inner join\n    Posts a\n  on q.Id = a.ParentId and a.postTypeId = 2 and q.postTypeId = 1\nwhere\n  a.OwnerUserId = ##UserId##\norder by a.Id desc","CreationDate":"2016-05-30 18:31:18","validated":true}
{"QuerySetId":492729,"Title":"All questions with a *single* tag and a *word* in Title","Description":null,"QueryBody":"WITH  a *single* tag and a *word* in Title\nSELECT Id as [Post Link] FROM Posts\nWHERE PostTypeId = 1\n   AND Tags = CONCAT('<', ##Tag:string##, '>')\n   AND UPPER(Title) LIKE UPPER('%##word##%')\nORDER BY CreationDate;","CreationDate":"2016-05-31 8:39:46","validated":true}
{"QuerySetId":494321,"Title":"Questions Visit Count per Month","Description":null,"QueryBody":"SELECT  [Month], \n       sum(ViewCount) QueViewCount\nfrom\n(\n  SELECT CAST(\n      cast(DATEPART(YYYY, CreationDate) as varchar) + '-' + cast(DATEPART(MM, CreationDate) as varchar) + '-01'\n    as datetime) [Month], \n    ViewCount\n     \n  from Posts p\n) as X\ngroup by [Month]\norder by [Month] asc","CreationDate":"2016-06-02 23:15:39","validated":true}
{"QuerySetId":495700,"Title":"Top answer reputation by location","Description":"Filter to a location (string), join to answers and filter by tag, then group by user ID and order by sum of scores.","QueryBody":"SELECT  distinct u.Id [User Link]\n,sum(answers.score)\n-- ,Reputation\n,DisplayName\n,Location\n\nfrom Users u\njoin posts answers on (u.id = answers.owneruserid)\njoin posts parent on (answers.parentid = parent.id)\njoin posttags on (parent.id = posttags.postid)\n\nwhere\nposttags.tagid in (SELECT id from tags where tagname like '%##TagName##%') \nand Location like '%##Location##%'\n\ngroup by \nu.Id\n,DisplayName\n,Location\n\norder by \n-- Reputation desc\nsum(answers.score) desc","CreationDate":"2016-06-03 22:39:02","validated":true}
{"QuerySetId":497536,"Title":"Rate of accepted answers for the site","Description":null,"QueryBody":"SELECT  COUNT(q.id), COUNT(q2.id), ROUND(COUNT(q2.id) * 100 \/ COUNT(q.id) , 2)\nfrom Posts q\n LEFT JOIN Posts q2 ON q.id = q2.id\n--   AND q.acceptedanswerid IS NOT NULL\n     AND q.AnswerCount > 0\nwhere q.PostTypeId = 1;","CreationDate":"2016-06-08 20:01:35","validated":true}
{"QuerySetId":498554,"Title":"Tags most associated with another, by year.","Description":"Given a primary tag, and year, list the associated tags by popularity.","QueryBody":"SELECT  \n  Tags.TagName AS [Tag Name], \n  COUNT(*) AS [Number of associated posts]\nFROM PostTags\n  INNER JOIN Tags\n    ON Tags.Id = PostTags.TagId\nWHERE \n  PostTags.PostId IN \n  (\n    --Gets all the PostIds that have this tag\n    SELECT DISTINCT PostId\n    FROM PostTags\n      INNER JOIN Tags\n        ON Tags.Id = PostTags.TagId\n      INNER JOIN Posts\n        ON Posts.Id = PostTags.PostId\n    WHERE Tags.TagName = ##TagName:string##\n    AND YEAR(Posts.CreationDate) = ##Year:int##\n  )\n  AND Tags.TagName <> ##TagName:string##--Remove the tag your looking for from \"related\" search results.\nGROUP BY Tags.TagName\nORDER BY COUNT(*) DESC","CreationDate":"2016-06-10 9:11:28","validated":true}
{"QuerySetId":499932,"Title":"Up Votes vs Down Votes","Description":null,"QueryBody":"SELECT \n  (\n  SELECT CAST(COUNT(Votes.Id) AS FLOAT)\n    FROM Votes\n    WHERE\n    VoteTypeId = 2\n  ) \/\n  (\n  SELECT CAST(COUNT(Votes.Id) AS FLOAT)\n    FROM Votes\n    WHERE\n    VoteTypeId = 3\n  ) AS 'Up Votes \/ Down Votes'","CreationDate":"2016-06-14 21:54:33","validated":true}
{"QuerySetId":501571,"Title":"Users with Peer Pressure Badge by Reputation","Description":null,"QueryBody":"SELECT  u.Id as [User Link],u.Reputation\nfrom Users u\nleft join Badges b On b.UserId = u.Id \nWhere b.Name = 'Peer Pressure'\nAND u.Reputation > 101\nORDER BY Reputation","CreationDate":"2016-06-17 6:59:40","validated":true}
{"QuerySetId":501829,"Title":"Trend of popular tags on stats.SE","Description":null,"QueryBody":"SELECT  year(CreationDate) as y, TagName, count(*)\nFROM Posts p\nJOIN PostTags pt ON p.Id=pt.PostId\nJOIN\n(\nSELECT tb.Id, tb.TagName, count(*) as cnt\nFROM PostTags b \nLEFT OUTER JOIN Tags tb ON b.TagId=tb.Id\nGROUP BY tb.Id, tb.TagName\nHAVING count(*) > 1000\nand tb.tagname in ('dojo', 'jquery', 'java')\n) t\nON pt.TagId=t.Id\nGROUP BY year(CreationDate), TagName\nORDER BY TagName, y","CreationDate":"2016-06-17 21:02:13","validated":true}
{"QuerySetId":505123,"Title":"Most popular Travel tags in June 2016","Description":null,"QueryBody":"SELECT  count(PostId), TagName\nfrom PostTags\ninner join Posts on PostTags.PostId = Posts.Id\ninner join Tags on PostTags.TagId = Tags.Id\nwhere PostTags.PostId = Posts.Id\nand Posts.CreationDate BETWEEN '2016-04-01' AND '2016-07-01'\ngroup by TagName","CreationDate":"2016-06-27 19:43:56","validated":true}
{"QuerySetId":506465,"Title":"Questions with multiple bounties by any users","Description":null,"QueryBody":"SELECT \n  questions.Id AS [Post Link],\n  'site:\/\/posts\/'+CAST(questions.Id AS varchar)+'\/timeline|timeline' AS 'Timeline link',\n  COUNT(*) AS 'Number of bounties',\n  SUM(votes.BountyAmount) AS 'Total bounty amount'\nFROM Posts questions\nLEFT JOIN Votes votes\n  ON votes.PostId = questions.Id\nWHERE Votes.VoteTypeId = 8 --BountyStart\nGROUP BY questions.Id\nHAVING COUNT(*)>1\nORDER BY COUNT(*) DESC","CreationDate":"2016-06-30 18:45:14","validated":true}
{"QuerySetId":506979,"Title":"Questions which attract bad answers","Description":"Search for posts which have attracted significantly more controversial or bad answers than good ones\n","QueryBody":"SELECT  p.Id as [Post Link], p.Score from (\nSELECT p.ParentId, count(*) as ContACnt from (\n    SELECT\n      PostId,\n      up = sum(case when VoteTypeId = 2 then 1 else 0 end),\n      down = sum(case when VoteTypeId = 3 then 1 else 0 end)\n    from Votes v join Posts p on p.Id = v.PostId\n    where VoteTypeId in (2,3) and PostTypeId = 2\n    group by PostId\n  ) as ContA\n  join posts p on ContA.PostId = p.Id\n  where down > (up \/ ##UVDVRatio:int##) and (down + up) > ##MinVotes:int##\n  group by p.ParentId\n) as ContQ\njoin posts p on ContQ.ParentId = p.Id\nwhere ContQ.ContACnt > (p.AnswerCount \/ 2) and p.AnswerCount > 1\norder by Score desc","CreationDate":"2016-07-05 4:02:40","validated":true}
{"QuerySetId":507450,"Title":"Your own answers, sorted by oldest","Description":null,"QueryBody":"SELECT  \n  P.Title AS [Question title],\n  P.Id AS [Question id],\n  P2.Id AS [Answer id]\nFROM Posts AS P\nJOIN Posts AS P2\nON P2.ParentId = P.Id\nWHERE P2.OwnerUserId = ##UserId## AND P2.PostTypeId = 2\nORDER BY P2.CreationDate ASC","CreationDate":"2016-07-03 18:30:20","validated":true}
{"QuerySetId":507938,"Title":"Users with most profile views","Description":null,"QueryBody":"SELECT  TOP 1000\n    ROW_NUMBER() OVER(ORDER BY Views DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Views,\n    LastAccessDate,\n    WebsiteURL\nFROM\n    Users\nORDER BY\n    Views DESC;","CreationDate":"2016-07-05 12:44:53","validated":true}
{"QuerySetId":509675,"Title":"How many stack exchange users?","Description":null,"QueryBody":"SELECT  count(u.Id) as \"total users\", sum(u.UpVotes) as \"total upvotes\", sum(u.DownVotes) as \"total downvotes\"\nFROM Users u","CreationDate":"2016-07-09 9:39:27","validated":true}
{"QuerySetId":509676,"Title":"Average question score this month","Description":null,"QueryBody":"SELECT  sum(Score)\nfrom Posts \nwhere PostTypeId = 1 and CreationDate > dateadd(month, -1, GETDATE());","CreationDate":"2016-07-09 9:58:24","validated":true}
{"QuerySetId":509895,"Title":"Count my answers about JavaScript","Description":null,"QueryBody":"SELECT  COUNT(*)\nFROM   Posts a\nJOIN   Posts q\nON     q.Id = a.ParentId\nWHERE  a.OwnerUserId = ##UserId##\nAND    a.PostTypeId = 2\nAND    (q.Tags LIKE '%<javascript>%' OR q.Tags LIKE '%<jquery>%');","CreationDate":"2016-07-10 16:37:19","validated":true}
{"QuerySetId":510674,"Title":"TOTAL number of SUCCESSFUL questions","Description":null,"QueryBody":"SELECT  COUNT(DISTINCT p.Id)\nFROM POSTS p\nWHERE p.PostTypeId = 1 \nAND p.AcceptedAnswerId IS NOT NULL","CreationDate":"2016-07-12 1:11:26","validated":true}
{"QuerySetId":513068,"Title":"What other questions do Favoriters like?","Description":null,"QueryBody":"DECLARE  @FavoriteType TINYINT = (SELECT Id FROM VoteTypes WHERE Name = 'Favorite');\n\nSELECT\n  TOP 100\n  Posts.Id AS [Post Link],\n  Posts.Score AS [Score],\n  Count(1) AS [Favorited By]\nFROM Votes [Favorited Post]\nJOIN Votes [Other Favorites]\n  On [Favorited Post].UserId = [Other Favorites].UserId\nJOIN Posts\n  On [Other Favorites].PostId = Posts.Id\nWHERE [Favorited Post].PostId = ##PostID##\nAND [Favorited Post].VoteTypeId = @FavoriteType\nAND [Other Favorites].VoteTypeId = @FavoriteType\nGROUP BY \n  Posts.Id, Posts.Score\nOrder by\n  [Favorited By] desc","CreationDate":"2016-07-19 18:36:37","validated":true}
{"QuerySetId":514638,"Title":"Amount of posts per day","Description":null,"QueryBody":"SELECT  CreationDate AS \"date\", count(1) AS \"questions\" FROM Posts WHERE PostTypeId = 1\ngroup by CreationDate order by CreationDate ASC","CreationDate":"2017-02-17 8:37:03","validated":true}
{"QuerySetId":514933,"Title":"Search by Location And AboutMe","Description":null,"QueryBody":"SELECT  Id [User Link], Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%##Location##%' AND AboutMe like '%##AboutMe##%'\norder by Reputation desc","CreationDate":"2016-07-20 17:50:29","validated":true}
{"QuerySetId":519390,"Title":"Ruby, Python, PHP, Rust, Go, Javascript, node.js popularity over time","Description":null,"QueryBody":"SELECT  YEAR(p.CreationDate), TagName, count(1)\nfrom Posts p, PostTags pt, Tags t\nwhere p.id = pt.PostId and pt.TagId = t.id\nand TagName in('rust')\nand p.CreationDate < '2016-01-01'\ngroup by YEAR(p.CreationDate), TagName\norder by 1","CreationDate":"2016-12-06 22:35:28","validated":true}
{"QuerySetId":519591,"Title":"Top 100 Users From Kolkata, India","Description":null,"QueryBody":"SELECT  TOP 100\n   Id,\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users\nWHERE\n    Location like '%Kolkata%' \nORDER BY\n   reputation DESC","CreationDate":"2016-07-31 0:13:08","validated":true}
{"QuerySetId":520253,"Title":"Net votes on questions per month","Description":null,"QueryBody":"SELECT  dateadd(month, datediff(month, 0, Votes.CreationDate), 0), \n  sum(case when VoteTypeId = 2 then 1 when VoteTypeId = 3 then -1 end) NetVotes\nfrom Votes\ninner join Posts on Posts.Id = Votes.PostId\nwhere Posts.PostTypeId=1\ngroup by dateadd(month, datediff(month, 0, Votes.CreationDate), 0)\norder by dateadd(month, datediff(month, 0, Votes.CreationDate), 0)","CreationDate":"2016-08-02 15:09:01","validated":true}
{"QuerySetId":520970,"Title":"Algerian top  stackoverflow users","Description":null,"QueryBody":"SELECT  TOP ##Count:int?500##\n        ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n        u.Id AS [User Link],\n        u.Reputation,\n        u.Age,\n        u.Location,\n        u.WebsiteUrl as Wesbite,\n        u.LastAccessDate AS LastSeen,\n        u.CreationDate   \n        \nFROM Users u\nWHERE \n        Reputation >= ##MinimalReputation:int?11## \n        AND (\n               UPPER(Location) LIKE UPPER('%tunis%')\n               OR UPPER(Location) LIKE UPPER('%\u062a\u0648\u0646\u0633%')\n               )  \n             \nORDER BY Reputation DESC","CreationDate":"2018-02-08 14:21:20","validated":true}
{"QuerySetId":521232,"Title":"Graph of answer quality and number - with minimum reputation threshold","Description":null,"QueryBody":"SELECT  \n   *,\n   count(*)\nfrom (\n  SELECT \n    p.OwnerUserId as [User Link], \n    u.Reputation,\n    round(avg(cast(p.Score as real)),2) as [Avg Score], \n    count(*) as [# Questions]\n  from Posts p\n  join Users u on u.Id = p.OwnerUserId\n  where p.posttypeid = 2 and\n    p.communityowneddate is null and\n    p.closeddate is null and\n    u.Reputation > ##MinimumReputation## and\n    u.Views > ##MinimumUserProfileViewCount##\n  group by u.Reputation, p.OwnerUserId\n) as X\ngroup by [# Questions] , [Avg Score], Reputation, [User Link]\norder by [Avg Score] desc, [# Questions] desc","CreationDate":"2016-08-05 5:11:59","validated":true}
{"QuerySetId":522366,"Title":"How high would my reputation approximately be if there was no cap?","Description":null,"QueryBody":"DECLARE  @UserId int = ##UserId##\n\nSELECT \n    SUM(CASE\n      WHEN VoteTypeId = 1 THEN 15 -- Accepted answer.\n      WHEN VoteTypeId = 2 AND PostTypeId = 1 THEN 5 -- Upvoted question\n      WHEN VoteTypeId = 2 AND PostTypeId = 2 THEN 10 -- Upvoted answer.\n      WHEN VoteTypeId = 3 THEN -2 -- Downvote.\n      WHEN VoteTypeId = 9 THEN BountyAmount -- Earned Bounty\nEND) AS UncappedReputation\nFROM\n    Votes\n  INNER JOIN \n    Posts ON Posts.Id = Votes.PostId\nWHERE\n    Posts.OwnerUserId = @UserId","CreationDate":"2016-08-09 4:49:17","validated":true}
{"QuerySetId":522719,"Title":"Filter Questions by Two Tags","Description":null,"QueryBody":"SELECT  P.Id AS [Post Link]\nFROM Posts P, PostTags Pt, Tags T\nWHERE P.Id = Pt.PostId\nAND T.Id = Pt.TagId\nAND T.TagName = '##tags##'\nAND P.Tags LIKE '<%##tag2##%>'\nGROUP BY P.Id","CreationDate":"2016-08-17 3:08:10","validated":true}
{"QuerySetId":522726,"Title":"All posts with two tags","Description":null,"QueryBody":"WITH  \n  Posts_WITH_Tag1 AS\n  ( SELECT posts.title as title, posts.tags as tags, p.PostId as PostId, (1.*(COUNT(*) OVER (PARTITION BY 1))) as cnt\n       FROM PostTags p\n       JOIN Tags t ON t.Id = p.TagId\n       JOIN Posts posts ON posts.Id = p.PostId \n      WHERE t.TagName = ##FirstTag:string##\n   ),\n   \n  Posts_WITH_Tag2 AS\n  ( SELECT p.PostId as PostId, (1.*(COUNT(*) OVER (PARTITION BY 1))) as cnt\n      FROM PostTags p\n        JOIN Tags t ON t.Id = p.TagId\n      WHERE t.TagName = ##SecondTag:string##\n   ),\n   \n   Posts_WITH_Both AS\n   ( select p1.title as title, p1.tags as tags, p1.PostID as PostID, (1.*(COUNT(*) OVER (PARTITION BY 1))) as cnt\n     from Posts_WITH_Tag1 p1\n       Inner join Posts_WITH_Tag2 p2 ON p1.PostID=p2.PostID\n   )\n Select * from Posts_WITH_Both","CreationDate":"2016-08-10 4:06:06","validated":true}
{"QuerySetId":522812,"Title":"Most downvoted post by user","Description":null,"QueryBody":"SELECT  posts.id as [Post Link], count(votes.id)\nfrom posts inner join\nvotes on votes.postid = posts.id\nwhere votetypeid = 3 and posts.owneruserid = ##User##\ngroup by posts.id\norder by count(votes.id) desc","CreationDate":"2016-08-10 5:13:25","validated":true}
{"QuerySetId":526225,"Title":"Users 'ranking' by sign up date and activity","Description":null,"QueryBody":"SELECT  TOP 100\n  u.Id AS [ID],\n  u.Id AS [User Link],\n  u.Reputation,\n  MIN(u.CreationDate) AS [User Creation Date], \n  MIN(DATEDIFF(dd, u.CreationDate, GETDATE()))-7 AS [Days Passed Since],\n  MIN(p.CreationDate) AS [Last Activity Date],\n  MIN(DATEDIFF(dd, p.CreationDate, GETDATE()))-7 AS [Days Passed Since]\n\nFROM Users u\n  INNER JOIN Posts p ON p.OwnerUserId = u.Id\n\nWHERE \n  u.Id != -1\n  AND DATEDIFF(dd, u.CreationDate, GETDATE()) > 400\n  AND DATEDIFF(dd, p.CreationDate, GETDATE()) < 50\n  AND u.Reputation > 101\n\nGROUP BY \n  u.Id,\n  u.Reputation\n  \nORDER BY Reputation DESC","CreationDate":"2016-09-10 12:39:34","validated":true}
{"QuerySetId":529756,"Title":"Number of active users last month","Description":null,"QueryBody":"SELECT  count(*) ActiveUsersLastMonth\n\nfrom Users\n\nwhere LastAccessDate >= DATEADD(month, -1, \n                                  (SELECT max(LastAccessDate) from Users)\n                                )","CreationDate":"2016-08-27 12:08:43","validated":true}
{"QuerySetId":529759,"Title":"SOes - Number of active posts last month per mod","Description":null,"QueryBody":"SELECT  \n  count(*) PostsLastMonth, \n  1 Moderators, \n  (count(*) \/ 1) PostsLastMonthPerMod\n\nfrom Posts\n\nwhere LastActivityDate >= DATEADD(month, -1, \n                                  (SELECT max(LastActivityDate) from Posts)\n                                )","CreationDate":"2016-08-27 12:34:06","validated":true}
{"QuerySetId":529763,"Title":"SOpt - Number of active posts last month per mod","Description":null,"QueryBody":"SELECT  \n  count(*) PostsLastMonth, \n  6 Moderators, \n  (count(*) \/ 6) PostsLastMonthPerMod\n\nfrom Posts\n\nwhere LastActivityDate >= DATEADD(month, -1, \n                                  (SELECT max(LastActivityDate) from Posts)\n                                )","CreationDate":"2016-08-27 12:35:52","validated":true}
{"QuerySetId":529764,"Title":"SO - Number of active posts last month per mod","Description":null,"QueryBody":"SELECT  \n  count(*) PostsLastMonth, \n  19 Moderators, \n  (count(*) \/ 19) PostsLastMonthPerMod\n\nfrom Posts\n\nwhere LastActivityDate >= DATEADD(month, -1, \n                                  (SELECT max(LastActivityDate) from Posts)\n                                )","CreationDate":"2016-08-27 12:37:15","validated":true}
{"QuerySetId":529767,"Title":"SOja - Number of active posts last month per mod","Description":null,"QueryBody":"SELECT  \n  count(*) PostsLastMonth, \n  3 Moderators, \n  (count(*) \/ 3) PostsLastMonthPerMod\n\nfrom Posts\n\nwhere LastActivityDate >= DATEADD(month, -1, \n                                  (SELECT max(LastActivityDate) from Posts)\n                                )","CreationDate":"2016-08-27 12:40:22","validated":true}
{"QuerySetId":529873,"Title":"Response time for a tag","Description":null,"QueryBody":"WITH  diffs as\n(select cast(a.creationdate - q.creationdate as float) as d from posts q\njoin posts a on a.id = q.acceptedanswerid)\nselect avg(d), stdev(d) from diffs","CreationDate":"2016-08-27 22:55:48","validated":true}
{"QuerySetId":530259,"Title":"Number\/Count of user who have 5000+ reputation.","Description":null,"QueryBody":"SELECT  count(*), (SELECT count(*) from Users), count(*) * 100.0 \/ (SELECT count(*) from Users)\nFROM Users \nWHERE Reputation > 5000","CreationDate":"2016-08-29 8:56:28","validated":true}
