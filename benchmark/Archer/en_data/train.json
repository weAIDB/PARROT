[{"db_id": "bike_1", "query": "SELECT A.dock_count - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "At 12:47:02 on June 2, 2015, how many bike docks are not available at San Jose Citizen Center Station?", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT A.dock_count - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "Give me the sum of unavailable bike docks at San Jose Citizen Center Station on 2 June 2015 at 12:47:02.", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT 20 - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "At 12:47:02 on June 2, 2015, how many bike docks are not available at San Jose Citizen Center Station if there were 20 docks in total?", "reasoning_type": "- C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT 20 - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "If there are usually 20 docks at San Jose Citizen Center Station then how many will be unavailable on 2 June 2015 at 12:47:02 PM.", "reasoning_type": "- C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "How many bike stations are there in total in the City of the Golden Gate, and how many less than in the City of the Golden Gate in Palo Alto?", "reasoning_type": "- C", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "Within the city of the Golden Gate, what is the total number of bike stations and how many fewer here than in Palo Alto?", "reasoning_type": "- C", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) * 2 + 10 FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "How many bike stations does the city of the Golden Gate have in total,  and how many less than in the City of the Golden Gate in Palo Alto if Palo Alto has 10 more bike stations than twice its original number of bike stations?", "reasoning_type": "- + * C H", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) * 2 + 10 FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "Given that Palo Alto has ten more bike stations than two times the original sum, how many bike stations are in the city of the Golden Gate and how much less is this sum than Palo Alto?", "reasoning_type": "- + * C H", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( A.dock_count ) - SUM ( B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "At 12:46:02 on June 2nd, 2015 , how many available docks are there in total in the stations built on August 20th, 2013, and what about the unavailable docks?", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( A.dock_count ) - SUM ( B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "Provide the total number of available docks and the total number of unavailable docks on 2nd June 2015 at 12:46:02 in the stations which are build on 20th August 2013.", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( 2 * ( SELECT dock_count FROM station WHERE name = \"Grant Avenue at Columbus Avenue\" ) + 5 - B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "If the number of docks at each station built on August 20, 2013 is twice more than the number of docks at the \"Grant Avenue at Columbus Avenue\" station by five, how many available docks are there in total in the stations built on August 20, 2013 at the moment of 12:46:02 on June 2nd, 2015, and what about the unavailable docks?", "reasoning_type": "+ * - C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( 2 * ( SELECT dock_count FROM station WHERE name = \"Grant Avenue at Columbus Avenue\" ) + 5 - B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "Considering the stations constructed on 20th August 2013, which each have two times more the number of docks than \"Grant Avenue at Columbus Avenue\" station plus five, how many available and unavailable docks are there at 12:46:02 PM in 2015 on 2nd of June?", "reasoning_type": "+ * - C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= ( SELECT 2 * AVG ( duration ) FROM trip WHERE start_station_name = \"2nd at Folsom\" )", "question": "Find the trip ID whose duration is at least twice the average duration of the trips started from \"2nd at Folsom\" station.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= ( SELECT 2 * AVG ( duration ) FROM trip WHERE start_station_name = \"2nd at Folsom\" )", "question": "Return the trip ID with a duration minimum of twice the average trip duration starting at station \"2nd at Folsom\"?", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= 2 * 666", "question": "Find the trip ID whose duration is at least twice the average duration of the trips that is started from \"2nd at Folsom\" station, if the average duration of the trips started from \"2nd at Folsom\" station is 666.", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= 2 * 666", "question": "Get me the ID of a trip with a duration at least twice as long as 666 which is the average trip duration starting from \"2nd at Folsom\".", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * ( SELECT A.bikes_available FROM status A JOIN station B ON A.station_id = B.id WHERE B.name = \"2nd at Townsend\" AND A.time = \"2015-06-02 13:59:02\" ) AND A.time = \"2015-06-02 13:59:02\"", "question": "At 13:59:02 on June 2nd, 2015, which station has more than twice the available bike at \"2nd at Townsend\" station? Give the names of these stations.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * ( SELECT A.bikes_available FROM status A JOIN station B ON A.station_id = B.id WHERE B.name = \"2nd at Townsend\" AND A.time = \"2015-06-02 13:59:02\" ) AND A.time = \"2015-06-02 13:59:02\"", "question": "Tell me the names of the stations with more than twice available bikes at \"2nd at Townsend\" for the time 1:59:02 PM on 2nd June 2015.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * 5 AND A.time = \"2015-06-02 13:59:02\"", "question": "At 13:59:02 on June 2nd, 2015, which station has more than twice the available bike at \"2nd at Townsend\" station, if \"2nd at Townsend\" station has 5 available bikes? Give the names of these stations.", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * 5 AND A.time = \"2015-06-02 13:59:02\"", "question": "Given that the \"2nd at Townsend\" station has five available bikes at 13:59:02 on June 2 in 2015, tell me the names of the stations with more than twice available bikes at \"2nd at Townsend\" station at that time.", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT end_station_name , MAX ( duration ) AS max_duration , MIN ( duration ) AS min_duration , MAX ( duration ) - MIN ( duration ) AS diff FROM trip GROUP BY end_station_name", "question": "For each station, list the station name, and find the minimum duration, maximum duration of the trips that ended at the station, and the difference between the maximumand and minimum duration.", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT end_station_name , MAX ( duration ) AS max_duration , MIN ( duration ) AS min_duration , MAX ( duration ) - MIN ( duration ) AS diff FROM trip GROUP BY end_station_name", "question": "List the names of all stations, and calculate the minimum duration, maximum duration and difference between the two for trips ending at each respective station.", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code = \"94107\" AND max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather WHERE zip_code = \"94107\" )", "question": "In the place with zip code 94107, which day has the largest temperature difference?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code = \"94107\" AND max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather WHERE zip_code = \"94107\" )", "question": "Which day of the year has the largest temperature difference for the 94107 zip code?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - min_temperature_f AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "On Armistice Day in 2013, what is the zip code of the place that had the highest mean visibility miles, and what was the temperature difference there on that day?", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - min_temperature_f AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "Find the zip code of the place with the highest mean visibility (in miles) on the 2013 Armistice Day and also calculate the temperature difference there on that day.", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - 52 AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "On Armistice Day in 2013, what is the zip code of the place that had the highest mean visibility miles, and what was the temperature difference there on that day if the minimum temperature is 52 degrees Fahrenheit there?", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - 52 AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "What is the zip code of the place with the highest mean visibility on Armistice Day 2013 as measured by miles and also what was the temperature difference there when the minimum was 52 F?", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT date , 1.0 * ( MAX ( mean_temperature_f ) - 32 ) * 5 / 9 AS celsius FROM weather WHERE zip_code = \"94107\"", "question": "Which day has the highest mean temperature in the place with zip code 94107? List the date and the mean temperature in Celsius.", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "bike_1", "query": "SELECT date , 1.0 * ( MAX ( mean_temperature_f ) - 32 ) * 5 / 9 AS celsius FROM weather WHERE zip_code = \"94107\"", "question": "What was the day and mean temperature (in degrees C) of the day in area 94107 with the highest mean temperature?", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "What are the zip code and average wind speed in kilometers per hour on January 1st, 2014 in each area?", "reasoning_type": "* C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "For each area give me the zip code and average wind speed (in units kilometers per hour) for January 1 in 2014.", "reasoning_type": "* C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * ( 1 + 0.2 ) * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "What are the zip code and the average wind speed in kilometers per hour on 1/1/2014 in each area,if the average wind speed on that day was increased by 20%?", "reasoning_type": "+ * C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * ( 1 + 0.2 ) * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "On January 1 2014 the average wind speed was increased by 20 percent so what are the zip code and the average wind speed per hour (in kilometers per hour) on this day?", "reasoning_type": "+ * C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "What is the precipitation in millimeters for the two days of November 12th, 2014 and Match 12th, 2014 at place with postcode address of 94041, and what is the difference?", "reasoning_type": "* - C", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "Calculate the millimeter precipitation for 12th November and 12th March, both in 2014, in zip code area 94041 and the difference in precipitation between the two.", "reasoning_type": "* - C", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "If the precipitatio in the place with a postal code address of 94041 on November 12th, 2014 and Match 12th, 2014 decreases by 15%, how many millimeters are the precipitation on these two days, and what is the difference?", "reasoning_type": "- * C H", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "In area 94041 the millimeter precipitation decreased by 15 percent on 2014 March 12th and November 12th; therefore calculate the millimeter precipitation on these days and the difference.", "reasoning_type": "- * C H", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT zip_code , max_visibility_miles * 1609.344 AS max_m , mean_visibility_miles * 1609.344 AS mean_m , min_visibility_miles * 1609.344 AS min_m FROM weather WHERE date = \"8/30/2013\"", "question": "On National Grief Awareness Day 2013, what is the zip code, maximum visibility, mean visibility, and minimum visibility in various places?", "reasoning_type": "* C", "commonsense_knowledge": "1 mile is equal to 1,609.344 meters. National Grief Awareness Day takes place on August 30th every year"}, {"db_id": "bike_1", "query": "SELECT zip_code , max_visibility_miles * 1609.344 AS max_m , mean_visibility_miles * 1609.344 AS mean_m , min_visibility_miles * 1609.344 AS min_m FROM weather WHERE date = \"8/30/2013\"", "question": "Return the max, min and mean visibility, and the zip code from various places on the National Grief Awareness day in year 2013?", "reasoning_type": "* C", "commonsense_knowledge": "1 mile is equal to 1,609.344 meters. National Grief Awareness Day takes place on August 30th every year"}, {"db_id": "bike_1", "query": "SELECT MIN ( dock_count ) + 10 AS n_dock FROM station", "question": "If 10 docks were added to the station with the fewest docks, how many docks will it have?", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT MIN ( dock_count ) + 10 AS n_dock FROM station", "question": "What is the sum of docks at the station with the fewest docks currently if we add ten more?", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT COUNT ( * ) + 4 AS n_stations FROM station WHERE city = \"San Jose\"", "question": "The government plans to build four more stations in the third most populous city in California. How many stations will there be in total?", "reasoning_type": "+ C", "commonsense_knowledge": "San Jose is the third largest city by population in California."}, {"db_id": "bike_1", "query": "SELECT COUNT ( * ) + 4 AS n_stations FROM station WHERE city = \"San Jose\"", "question": "If we add four more, what will the total number of stations be in California's 3rd most populous city.", "reasoning_type": "+ C", "commonsense_knowledge": "San Jose is the third largest city by population in California."}, {"db_id": "bike_1", "query": "SELECT zip_code , max_temperature_f , ABS ( max_temperature_f - 136 ) AS diff FROM weather WHERE date = \"10/24/2014\"", "question": "What is the zip code and highest temperature in various places on October 24th, 2014, and what is the difference between it and the highest temperature ever recorded on Earth?", "reasoning_type": "- C", "commonsense_knowledge": "57.8 \u00b0C (136 \u00b0F) is the hottest temperature ever recorded on Earth."}, {"db_id": "bike_1", "query": "SELECT zip_code , max_temperature_f , ABS ( max_temperature_f - 136 ) AS diff FROM weather WHERE date = \"10/24/2014\"", "question": "Given me the zip code and the hottest temperature in various places for the 24th day in October in year 2014 and then compare this to the hottest temperature ever recorded on Earth.", "reasoning_type": "- C", "commonsense_knowledge": "57.8 \u00b0C (136 \u00b0F) is the hottest temperature ever recorded on Earth."}, {"db_id": "bike_1", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM station WHERE city = \"San Francisco\" ) AS propotion FROM station WHERE city = \"San Francisco\" AND dock_count > 25", "question": "What percentage of stations in San Francisco have more than 25 docks?", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM station WHERE city = \"San Francisco\" ) AS propotion FROM station WHERE city = \"San Francisco\" AND dock_count > 25", "question": "How many stations, as a percentage of total stations, have more than 25 docks in San Francisco.", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * MAX ( n_station ) / MIN ( n_station ) AS times FROM ( SELECT city , COUNT ( * ) AS n_station FROM station GROUP BY city )", "question": "How many times is the number of stations in the city with the most stations to the number of stations in the city with the least stations?", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * MAX ( n_station ) / MIN ( n_station ) AS times FROM ( SELECT city , COUNT ( * ) AS n_station FROM station GROUP BY city )", "question": "What is the ratio between the number of stations in the city with the greatest stations to fewest stations?", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * max_temperature_f / min_temperature_f AS times FROM weather WHERE max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather )", "question": "When the temperature difference is maximum, how many times is the maximum temperature higher than the minimum temperature?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * max_temperature_f / min_temperature_f AS times FROM weather WHERE max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather )", "question": "What is the ratio of maximum temperature to minimum temperature when the temperature difference is maximized?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT ( AVG ( max_temperature_f ) - 32 ) * 5 / 9 AS avg_max_celsius , ( ( AVG ( max_temperature_f ) - AVG ( min_temperature_f ) ) ) * 5 / 9 AS diff_celsius FROM weather WHERE zip_code = \"94063\"", "question": "What is the average maximum temperature in degrees Celsius in the area with the postcode of 94063? How much higher than the average minimum temperature in degrees Celsius?", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "bike_1", "query": "SELECT ( AVG ( max_temperature_f ) - 32 ) * 5 / 9 AS avg_max_celsius , ( ( AVG ( max_temperature_f ) - AVG ( min_temperature_f ) ) ) * 5 / 9 AS diff_celsius FROM weather WHERE zip_code = \"94063\"", "question": "What is the average maximum temperature (in C) for ZIP 94063 and how much higher is it than the minimum temperature?", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "How much has Sterling spent so far?", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "What is the total spend for Sterling to date?", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( cost ) FROM ( SELECT SUM ( C.order_quantity * 600 ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name = \"gucci\" UNION SELECT SUM ( C.order_quantity * D.product_price ) AS ost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name != \"gucci\" )", "question": "If the unit price of all Gucci products is 600, how much has Sterling spent so far?", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( cost ) FROM ( SELECT SUM ( C.order_quantity * 600 ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name = \"gucci\" UNION SELECT SUM ( C.order_quantity * D.product_price ) AS ost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name != \"gucci\" )", "question": "Calculate Sterling's total spend to date if all Gucci products cost 600 each.", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 - 1.0 * 20 / 100 ) ) AS cost_after_discount FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "Sterling is a member and gets a 20% discount on all products. How much has he spent so far?", "reasoning_type": "* C - /", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 - 1.0 * 20 / 100 ) ) AS cost_after_discount FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "Calculate Sterling's spend to date factoring in a 20% member price discount.", "reasoning_type": "* C - /", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 * 20 / 100 ) ) AS svaed_money FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "Sterling is a member and gets a 20% discount on all products. How much has he saved so far?", "reasoning_type": "* / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 * 20 / 100 ) ) AS svaed_money FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "Calculate how much Sterling has saved to date through their 20% member price discount.", "reasoning_type": "* / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_id , A.customer_name , A.customer_address , A.customer_phone , A.customer_email , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id GROUP BY A.customer_name ORDER BY cost DESC", "question": "List customer IDs, names, addresses, phone numbers, and email addresses in descending order of their total spending to date.", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_id , A.customer_name , A.customer_address , A.customer_phone , A.customer_email , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id GROUP BY A.customer_name ORDER BY cost DESC", "question": "Sort customers by descending order of total spending to today and give me the total spend, name, email address, phone number, mail address and customer ID.", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "What is the total price of Cleo's latest order?", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "Calculate the sum price of the lastest order from Cleo.", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( 5.0 * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "What is the total price of Cleo's latest order if he purchased 5 of each product?", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( 5.0 * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "If Cleo purchased 5 of each product, then what is the total cost of Cleo's latest order?", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "The cost of Apple products is 40% of the selling price, Gucci products is 20% of the selling price, and other products is 50% of the selling price. Please list each product's ID, name, sales volume, sales revenue, and total gross profit.", "reasoning_type": "- * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "List all products and product ID, name, volume of sales, sales revenue and total gross profit if Apple products cost 40% of selling price, Gucci products cost 20% of selling price and all other products cost half their sale price.", "reasoning_type": "- * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) AS revenue , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "The cost of Apple products is 40% of the selling price, Gucci products is 20% of the selling price, and other products is 50% of the selling price. If all Apple products are discounted by 15%, please list each product's ID, name, sales volume, sales revenue, and total gross profit.", "reasoning_type": "- * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) AS revenue , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "During an Apple sale discounting all product selling price by 15%, list all products and name, sales volume, product ID, revenue of sales and total profit gross if Apple products cost 40% of selling price, Gucci products cost 20% of selling price and all other products cost half their sale price.", "reasoning_type": "- * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE order_status_code = \"Completed\"", "question": "What percentage of orders have been completed?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE order_status_code = \"Completed\"", "question": "Of total orders, what percentage are completed?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT 100 - 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE strftime ( \"%Y\" , order_date ) >= \"2000\" AND order_status_code != \"Completed\"", "question": "If all orders before year 2000 have been completed, what percentage of orders have been completed?", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT 100 - 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE strftime ( \"%Y\" , order_date ) >= \"2000\" AND order_status_code != \"Completed\"", "question": "Of total orders, what percentage are completed assuming all pre-2000 orders are completed?", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "What are the names of users with multiple contact methods and the amount of their first order?", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "Tell me the names and first order cost of users only with multiple contact methods?", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT customer_id , order_id , order_date , SUM ( price ) AS price FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * 888.0 ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name = \"Apple\" AND strftime ( \"%Y\" , B.order_date ) < \"2000\" GROUP BY B.customer_id , B.order_id UNION SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name != \"Apple\" OR strftime ( \"%Y\" , B.order_date ) >= \"2000\" GROUP BY B.customer_id , B.order_id ) GROUP BY customer_id , order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "If all Apple products before year 2000 were priced at 888, what is the amount of the first order for users with multiple contact methods?", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT customer_id , order_id , order_date , SUM ( price ) AS price FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * 888.0 ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name = \"Apple\" AND strftime ( \"%Y\" , B.order_date ) < \"2000\" GROUP BY B.customer_id , B.order_id UNION SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name != \"Apple\" OR strftime ( \"%Y\" , B.order_date ) >= \"2000\" GROUP BY B.customer_id , B.order_id ) GROUP BY customer_id , order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "Tell me the amount of the initial order only for users with multiple contact methods if all Apple products cost 888 before 2000?", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name, zip_postcode FROM (SELECT C.customer_name, B.zip_postcode, MAX (julianday (A.date_to) - julianday (A.date_from)) FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) > 1)", "question": "What are the names of users who have had multiple different addresses, and which postcode have they used the longest?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name, zip_postcode FROM (SELECT C.customer_name, B.zip_postcode, MAX (julianday (A.date_to) - julianday (A.date_from)) FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) > 1)", "question": "Tell me the names of users who have held multiple addresses on file and which postcode each user has held the longest?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT C.customer_name, B.zip_postcode FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) = 1", "question": "What are the names of users have never had multiple different addresses, and which postcode have they used?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT C.customer_name, B.zip_postcode FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) = 1", "question": "Tell me the names of users who have never had more than 1 address at any given time and which postcode each user held?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id , customer_name , customer_email , price AS last_order_price FROM ( SELECT M.customer_id , N.customer_name , N.customer_email , M.price , MAX ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING strftime ( \"%Y\" , MAX ( order_date ) ) < \"2000\" ) GROUP BY M.customer_id )", "question": "Which user has not placed an order since 2000? List their ID, name, email, and the amount of their last order.", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id , customer_name , customer_email , price AS last_order_price FROM ( SELECT M.customer_id , N.customer_name , N.customer_email , M.price , MAX ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING strftime ( \"%Y\" , MAX ( order_date ) ) < \"2000\" ) GROUP BY M.customer_id )", "question": "Tell me the name, email, customer ID and most recent order total of users who have not ordered anything since 2000?", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id FROM ( SELECT customer_id , COUNT ( * ) * ( 666 + 222 ) AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 2000 GROUP BY customer_id UNION SELECT customer_id , COUNT ( * ) * 222 AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 1000 AND price < 2000 GROUP BY customer_id ) GROUP BY customer_id ORDER BY points DESC LIMIT 1", "question": "Users can earn 222 points for a single order with a total price of over 1000 and another 666 points for a total price of over 2000. Which user currently has the most total points? Give me their ID.", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id FROM ( SELECT customer_id , COUNT ( * ) * ( 666 + 222 ) AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 2000 GROUP BY customer_id UNION SELECT customer_id , COUNT ( * ) * 222 AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 1000 AND price < 2000 GROUP BY customer_id ) GROUP BY customer_id ORDER BY points DESC LIMIT 1", "question": "Tell me the ID of the user with the most total points if all orders over 1000 earn 222 points and orders over 2000 earn and additional 666 points?", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "How much higher is the average unit price of clothing compared to hardware?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "Calculate the difference in average prices between clothing and hardware?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT ( 1 + 20.0 / 100 ) * clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "If clothing prices increase by 20%, how much higher is the average unit price of clothing compared to hardware?", "reasoning_type": "+ * - / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT ( 1 + 20.0 / 100 ) * clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "Calculate how much higher the difference in average price is between clothing and hardware if clothing prices increase by 20%?", "reasoning_type": "+ * - / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT n_total , 1.0 * n_female / n_total AS female_ratio FROM ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_female FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Contacts C ON A.customer_id = C.customer_id WHERE B.state_province_county = \"Kentucky\" AND C.gender = \"female\" ) JOIN ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_total FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id WHERE B.state_province_county = \"Kentucky\" )", "question": "How many users have used an address in a state with a capital city of Frankfurt, and what is the proportion of females among them?", "reasoning_type": "* / C", "commonsense_knowledge": "Frankfort is the capital city of Kentucky state."}, {"db_id": "customers_and_products_contacts", "query": "SELECT n_total , 1.0 * n_female / n_total AS female_ratio FROM ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_female FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Contacts C ON A.customer_id = C.customer_id WHERE B.state_province_county = \"Kentucky\" AND C.gender = \"female\" ) JOIN ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_total FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id WHERE B.state_province_county = \"Kentucky\" )", "question": "What is the total number of users in the state with Frankfurt as the capital city? What proportion of this total are females?", "reasoning_type": "* / C", "commonsense_knowledge": "Frankfort is the capital city of Kentucky state."}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) AS max_quantity , t2.diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "What are the ID, name, and sales volume of the product that has the highest sales volume, and how much higher is it compared to the product with the lowest sales volume?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) AS max_quantity , t2.diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "Find me the product ID and name with the highest volume of sales, and tell me its sales volumne, and how much higher this volume is than the product with the lowest sales volume?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) + 500 AS max_quantity , t2.diff + 500 FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "What are the ID and name of product that has the highest sales volume? If its sales volume was increased by 500, what is its sales volume and how much higher is it compared to the product with the lowest sales volume?", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) + 500 AS max_quantity , t2.diff + 500 FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "Find me the ID and name of the product with the highest sales volume. What would its sales volume be if it increased by 500, and how much higher would its sale volume be , relative to the product with lowest sale?", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * D.product_price ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * D.product_price AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "A 5% service charge is required for credit card payments. List the name of each customer and how much each customer spent on each order along with the order id.", "reasoning_type": "+ * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * D.product_price ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * D.product_price AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "Tell me the name of each customer and how much each customer spent on each order along with the order id, if a 5% service charge is required for all credit card payments.", "reasoning_type": "+ * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * 99 ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * 99 AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "A 5% service charge is required for credit card payments. If the unit price of each product is 99, list the name of each customer and how much each customer spent on each order along with the order id.", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * 99 ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * 99 AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "Tell me the name of each customer and how much each customer spent on each order along with the order id, given that the unit price of all products is 99 and we charge a 5% fee for credit card payments.", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT strftime ( \"%Y\" , A.order_date ) AS year , SUM ( B.order_quantity * C.product_price ) AS annual_sales_revenue FROM Customer_Orders A JOIN Order_Items B ON A.order_id = B.order_id JOIN Products C ON B.product_id = C.product_id GROUP BY strftime ( \"%Y\" , A.order_date )", "question": "List the year in record and the annual sales revenue for each year.", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT strftime ( \"%Y\" , A.order_date ) AS year , SUM ( B.order_quantity * C.product_price ) AS annual_sales_revenue FROM Customer_Orders A JOIN Order_Items B ON A.order_id = B.order_id JOIN Products C ON B.product_id = C.product_id GROUP BY strftime ( \"%Y\" , A.order_date )", "question": "Tell me the year in record and corresponding annual sales revenue.", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT max_price , min_price , variance FROM ( SELECT 1.0 * ( product_price - AVG ( product_price ) ) * ( product_price - AVG ( product_price ) ) / COUNT ( * ) AS variance FROM Products WHERE product_name = \"Apple\" ) JOIN ( SELECT MAX ( product_price ) AS max_price , MIN ( product_price ) AS min_price FROM Products WHERE product_name = \"Apple\" )", "question": "List the highest price, lowest price, and variance of Apple products.", "reasoning_type": "- * / C", "commonsense_knowledge": "The variance is mean squared difference between each data point and the centre of the distribution measured by the mean."}, {"db_id": "customers_and_products_contacts", "query": "SELECT max_price , min_price , variance FROM ( SELECT 1.0 * ( product_price - AVG ( product_price ) ) * ( product_price - AVG ( product_price ) ) / COUNT ( * ) AS variance FROM Products WHERE product_name = \"Apple\" ) JOIN ( SELECT MAX ( product_price ) AS max_price , MIN ( product_price ) AS min_price FROM Products WHERE product_name = \"Apple\" )", "question": "Considering only Apple products tell me the highest and lowest prices and also the variance across the Apple range.", "reasoning_type": "- * / C", "commonsense_knowledge": "The variance is mean squared difference between each data point and the centre of the distribution measured by the mean."}, {"db_id": "driving_school", "query": "SELECT customer_id , strftime ( \"%Y\" , date_became_customer ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_became_customer ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Customers", "question": "List the IDs of customers and their ages when they signed up for the driving school.", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT customer_id , strftime ( \"%Y\" , date_became_customer ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_became_customer ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Customers", "question": "Give me IDs of all customers and their ages at the time of registering for driving school?", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", date_of_birth)) AS age FROM Customers WHERE NOT (first_name = \"Dameon\" AND last_name = \"Sanford\") UNION ALL SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", \"2001-01-01\") - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", \"2001-01-01\")) AS age FROM Customers WHERE first_name = \"Dameon\" AND last_name = \"Sanford\"", "question": "If Damon Sanford was born on the first day of the 21st century, list the customer IDs and their ages when they signed up for the driving school.", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date. The 21st century began on 1st January 2001."}, {"db_id": "driving_school", "query": "SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", date_of_birth)) AS age FROM Customers WHERE NOT (first_name = \"Dameon\" AND last_name = \"Sanford\") UNION ALL SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", \"2001-01-01\") - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", \"2001-01-01\")) AS age FROM Customers WHERE first_name = \"Dameon\" AND last_name = \"Sanford\"", "question": "Give me IDs of all customers and their ages when registering for driving school if Damon Sanford was born on the first day of the 21st Century.", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date. The 21st century began on 1st January 2001."}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM Customers WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM Customers WHERE amount_outstanding > 2000 )", "question": "What percentage of customers with outstanding amounts larger than 2000 are good customers?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM Customers WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM Customers WHERE amount_outstanding > 2000 )", "question": "Give me the percentage of customers with over 2000 in outstanding balance who are rated good?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 )", "question": "If all customers who registered in 2015 have an outstanding amount of 200, what percentage of customers with outstanding amounts greater than 2000 are good customers?", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 )", "question": "What percentage of customers are rated good with an outstanding balance of over 2000 if all customers registered in 2015 have an outstanding amount over 2000?", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM Staff WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "List the ID and number of lessons scheduled for staffs who were older than 20 when they joined the driving school.", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM Staff WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "Give me the ID and number of scheduled lessons for all staff older than age 20 at the time of joining the driving school.", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "If the staffs who resigned on March 8th, 2018 all joined on March 8th, 2016, list the IDs and number of lessons scheduled for staffs who were older than 20 when they joined.", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "Give me the ID and quantity of scheduled lessons for all staff older than age 20 at the time of commencing employment at the driving school if all staff who joined on March 8 2016 resigned on March 8 2018.", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM Staff ORDER BY julianday ( date_left_staff ) - julianday ( date_joined_staff ) DESC LIMIT 1", "question": "What's the ID of staff who has worked at the driving school the longest?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM Staff ORDER BY julianday ( date_left_staff ) - julianday ( date_joined_staff ) DESC LIMIT 1", "question": "Tell me the ID of staff who have worked at the driving school the longest?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM (SELECT staff_id, strftime (\"%Y-%m-%d\", julianday (date_of_birth) + 21 * 365.25) AS date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\" UNION ALL SELECT staff_id, date_joined_staff, date_left_staff FROM Staff WHERE NOT (first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\") ) ORDER BY julianday (date_left_staff) - julianday (date_joined_staff) DESC LIMIT 1", "question": "If Lincoln Benny Carroll joined on his 21st birthday, list the ID of the staff who has worked at the driving school the longest? ", "reasoning_type": "- + * C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time. Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM (SELECT staff_id, strftime (\"%Y-%m-%d\", julianday (date_of_birth) + 21 * 365.25) AS date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\" UNION ALL SELECT staff_id, date_joined_staff, date_left_staff FROM Staff WHERE NOT (first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\") ) ORDER BY julianday (date_left_staff) - julianday (date_joined_staff) DESC LIMIT 1", "question": "What's the ID of the staff member who has worked at the driving school longest if Lincoln Benny Carroll joined on their 21st birthday?", "reasoning_type": "- + * C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time. Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "Among the customers who have never attended a class, how much more bad customers than good customers?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "How many more customers are rated bad than good for only the customers who have never attended a class?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "Assuming that all classes are not canceled on March 7, 2018, how much more bad customers than good customers among the customers who have never attended a class?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "How many more customers are rated bad than good for only the customers who have never attended a class if all classes were not canceled on March 7 2018?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "How much is the average course fee for a staff who has no course schedule after March 5, 2018? What's his staff ID and how old is he this year?", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "Tell me the staff ID, average course fee, and age (this year) for staff with no course scheduled after 5 March 2018?", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM ( SELECT staff_id , ( 1 + 0.08 ) * price AS price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) = \"2018-02\" UNION ALL SELECT staff_id , price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) != \"2018-02\" ) A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "If the prices of all courses were increased by 8% in February 2018, how much is the average course fee for a staff who has no course schedule after March 5, 2018? What's his staff ID and how old is he this year?", "reasoning_type": "* + - C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM ( SELECT staff_id , ( 1 + 0.08 ) * price AS price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) = \"2018-02\" UNION ALL SELECT staff_id , price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) != \"2018-02\" ) A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "What is the staff ID, average course fee, and age this year, for staff with no course scheduled after March 5 2018 if all course prices were increased by 8% in February 2018?", "reasoning_type": "* + - C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) - ( SELECT AVG ( price ) FROM Lessons GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id GROUP BY A.staff_id ORDER BY AVG ( A.price ) DESC LIMIT 1", "question": "What's the ID of the coach who has the highest average course price and how much higher than that of the coach with the lowest average course price?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) - ( SELECT AVG ( price ) FROM Lessons GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id GROUP BY A.staff_id ORDER BY AVG ( A.price ) DESC LIMIT 1", "question": "Tell me the ID of the coach who has the highest average course price and how much more does this cost than the average price from the coach with the lowest average price?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT staff_id , AVG ( price ) - ( SELECT AVG ( price ) FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) DESC LIMIT 1", "question": "If all courses offered by Winnifred Liam Jast were reduced by 12%, what's the ID of the coach who has the highest average course price and how much higher than that of the coach with the lowest average course price?", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT staff_id , AVG ( price ) - ( SELECT AVG ( price ) FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) DESC LIMIT 1", "question": "Tell me the ID of the coach who has the highest average price of a course and how much more this is than the price of a course from the coach with the lowest average price if courses from Winnifred Liam Jast were 12% cheaper?", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM Lessons GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "What percentage of clients have multiple coaches?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM Lessons GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "Calculate the percentage of clients with more than one coach?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM ( SELECT customer_id , ( SELECT staff_id FROM Staff WHERE first_name = \"Winnifred\" AND middle_name = \"Liam\" AND last_name = \"Jast\" ) AS staff_id FROM Lessons WHERE lesson_id = \"12\" UNION ALL SELECT customer_id , staff_id FROM Lessons WHERE lesson_id != \"12\" ) GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "If the coach of the course with ID 12 is Winnifred Liam Jast, what percentage of clients have multiple coaches?", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM ( SELECT customer_id , ( SELECT staff_id FROM Staff WHERE first_name = \"Winnifred\" AND middle_name = \"Liam\" AND last_name = \"Jast\" ) AS staff_id FROM Lessons WHERE lesson_id = \"12\" UNION ALL SELECT customer_id , staff_id FROM Lessons WHERE lesson_id != \"12\" ) GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "Calculate the percentage of clients with more than a single coach if course with ID 12 is coached by Winnifred Liam Jast.", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT strftime ( \"%Y\" , MAX ( date_of_birth ) ) - strftime ( \"%Y\" , MIN ( date_of_birth ) ) - ( strftime ( \"%m-%d\" , MAX ( date_of_birth ) ) < strftime ( \"%m-%d\" , MIN ( date_of_birth ) ) ) AS diff FROM Staff", "question": "How many years older is the oldest staff than the youngest staff?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT strftime ( \"%Y\" , MAX ( date_of_birth ) ) - strftime ( \"%Y\" , MIN ( date_of_birth ) ) - ( strftime ( \"%m-%d\" , MAX ( date_of_birth ) ) < strftime ( \"%m-%d\" , MIN ( date_of_birth ) ) ) AS diff FROM Staff", "question": "Calculate the difference in age between the oldest and youngest staff?", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT MAX ( date_of_birth ) - MIN ( date_of_birth ) AS diff FROM ( SELECT 2020 - ( 2020 - 2009 ) * 2 AS date_of_birth FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" UNION ALL SELECT date_of_birth FROM Staff WHERE NOT ( first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" ) ) ORDER BY date_of_birth DESC", "question": "If Camylle Icie Weissnat's age in 2020 is twice that of a person born in 2009, how many years older is the oldest staff than the youngest staff?", "reasoning_type": "* - C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT MAX ( date_of_birth ) - MIN ( date_of_birth ) AS diff FROM ( SELECT 2020 - ( 2020 - 2009 ) * 2 AS date_of_birth FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" UNION ALL SELECT date_of_birth FROM Staff WHERE NOT ( first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" ) ) ORDER BY date_of_birth DESC", "question": "Calculate the difference in age between the oldest and youngest staff, if in 2020, Camylle Icie Weissnat was twice as old as someone born in 2009.", "reasoning_type": "* - C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND lesson_status_code = \"Cancelled\" )", "question": "What is the total number of courses arranged for the oldest coach when leaving the driving school, and what percentage of them were canceled?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND lesson_status_code = \"Cancelled\" )", "question": "What is the sum total of scheduled courses for the oldest coach when leaving the driving school and how many of these were cancelled?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_status_code = \"Cancelled\" AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) )", "question": "If all coaches have no course scheduled within 60 days after joining, what is the total number of courses arranged for the oldest coach when leaving the driving school, and what percentage of them were canceled?", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_status_code = \"Cancelled\" AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) )", "question": "Give me the total number of arranged courses, and the cancellation rate, for the oldest coach when leaving the driving school if all coaches have no course scheduled within 60 days after joining.", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.customer_id , MAX ( A.amount_payment ) - ( SELECT MIN ( amount_payment ) FROM Customer_Payments ) AS payment_diff FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id", "question": "What's the ID of the customer who paid the most, and how much more than the customer who paid the least?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.customer_id , MAX ( A.amount_payment ) - ( SELECT MIN ( amount_payment ) FROM Customer_Payments ) AS payment_diff FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id", "question": "Tell me the ID of the customer who paid the highest fee and how much more was this than the customer paying the lowest fee?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT customer_id, MAX (amount_payment) - (SELECT MIN (amount_payment) FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )) AS payment_diff FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )", "question": "If Amya Spinka paid 5000 more on March 12th, 2018, what's the ID of the customer who paid the most, and how much more than the customer who paid the least?", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT customer_id, MAX (amount_payment) - (SELECT MIN (amount_payment) FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )) AS payment_diff FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )", "question": "Tell me the ID of the customer who paid the highest fee and how much more was this than the customer paying the lowest fee if Amya Spinka paid 5000 more on 12 March 2018?", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Lake Elaina\"", "question": "What is the average age of the coaches living in Lake Elaine, Georgia?", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Lake Elaina\"", "question": "For the coaches resident in Lake Elaine Georgia, calculate the average age.", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 2 * AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Port Melyssa\"", "question": "If the average age of coaches living in Lake Elaine, Georgia is twice the average age of coaches living in Port Melyssa,Georgia, what is the average age of the coaches living in Lake Elaine, Georgia?", "reasoning_type": "- * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 2 * AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Port Melyssa\"", "question": "What is the average age of coaches in Lake Elaine Georgia if the average ages of coaches here is twice the average of coaches living in Port Melyssa, Georgia?", "reasoning_type": "- * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT * FROM ( SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) JOIN ( SELECT date_of_birth - ( SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) AS diff FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" )", "question": "How old is Janessa Amara Sawayn five years after she left office, and how many years younger than Camylle Icie Weissnat?", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT * FROM ( SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) JOIN ( SELECT date_of_birth - ( SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) AS diff FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" )", "question": "Give me Janessa Amara Sawayn's age five years after leaving office and how many years younger were they than Camylle Icie Weissnat?", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age , 30 - ( strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) ) AS diff FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\"", "question": "If Camylle Icie Weissnat is 30 years old when Janessa Amara Sawayn leaves, how old is Janessa Amara Sawayn five years after she left office, and how many years younger than Camylle Icie Weissnat?", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age , 30 - ( strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) ) AS diff FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\"", "question": "How old was Janessa Amara Sawayn five years after leaving office if Camylle Icie Weissnat was 30 years old when Janessa Amara Sawayn left? How much younger was Janessa Amara Sawayn than Camylle Icie Weissnat?", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - substr ( dob , 7 , 4 ) + ( strftime ( \"%m\" , \"now\" ) > substr ( dob , 4 , 2 ) OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > substr ( dob , 1 , 2 ) ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "Five years later, how old is Lewis Hamilton?", "reasoning_type": "+ - C", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - substr ( dob , 7 , 4 ) + ( strftime ( \"%m\" , \"now\" ) > substr ( dob , 4 , 2 ) OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > substr ( dob , 1 , 2 ) ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "How much older is Lewis Hamilton five years later?", "reasoning_type": "+ - C", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - 2020 + ( strftime ( \"%m\" , \"now\" ) > 1 OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > 1 ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "Five years later, how old is \"Lewis Hamilton\" assuming he was born in 01/01/2020?", "reasoning_type": "+ - C H", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - 2020 + ( strftime ( \"%m\" , \"now\" ) > 1 OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > 1 ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "If Lewis Hamilton was born on 01/01/2020 then how old are they five years later?", "reasoning_type": "+ - C H", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || q1 ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "What is the average lap time over the three sessions for the top ranked driver in the 2009 Australian Grand Prix qualifying?", "reasoning_type": "+ /", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || q1 ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "For the Australian Grand Prix qualifier in 2009, give me the lap time average from the three sessions of the top ranked driver.", "reasoning_type": "+ /", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || \"1:26.026\" ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "What is the average lap time over the three sessions for the top ranked driver in the 2009 Australian Grand Prix qualifying, assuming his lap time obtained in q1 was 1:26.026 instead?", "reasoning_type": "+ / H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || \"1:26.026\" ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "Assuming the top ranked driver of the 2009 Australian Grand Prix qualifier recorded a score of 1:26:026 in the first round then what would their average lap time over all three qualifiers be?", "reasoning_type": "+ / H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT name , location FROM circuits ORDER BY ABS ( lat - 23.4394 ) ASC LIMIT 1", "question": "What is the name and location of the circuit which is closest to Tropic of Cancer?", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Cancer lies at 23.4394 degrees north of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT name , location FROM circuits ORDER BY ABS ( lat - 23.4394 ) ASC LIMIT 1", "question": "Which circuit is closest in location to the Tropic of Cancer? Return this circuit name and location?", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Cancer lies at 23.4394 degrees north of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT name FROM circuits ORDER BY ABS ( lat - ( - 23.4394 ) ) DESC LIMIT 1", "question": "what is the name of the circuit which is furthest away from the Tropic of Capricorn?", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Capricorn lies at 23.4394 degrees south of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT name FROM circuits ORDER BY ABS ( lat - ( - 23.4394 ) ) DESC LIMIT 1", "question": "Find me the name of the circuit which is farthest in distance from the Tropic of Capricorn.", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Capricorn lies at 23.4394 degrees south of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 , ABS ( n_2009 - n_2010 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "How many races were held in 2009 and 2010 respectively? What is the difference between them?", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 , ABS ( n_2009 - n_2010 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "Find me the sum of races held in 2009 and separately then in 2010 and also return the difference.", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 + 5 , ABS ( n_2010 + 5 - n_2009 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "How many races were held in 2009 and 2010 respectively? What is the difference between them if 5 more races were held in 2010?", "reasoning_type": "- + C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 + 5 , ABS ( n_2010 + 5 - n_2009 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "If there were five more races held in 2010 than the actual amount then calculate the number of races in 2009, 2010 and the difference between the two.", "reasoning_type": "- + C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_france - n_italy FROM ( SELECT COUNT ( * ) AS n_france FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"France\" ) JOIN ( SELECT COUNT ( * ) AS n_italy FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"Italy\" )", "question": "How many more races are held in France than in Italy?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT n_france - n_italy FROM ( SELECT COUNT ( * ) AS n_france FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"France\" ) JOIN ( SELECT COUNT ( * ) AS n_italy FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"Italy\" )", "question": "Calculate the difference between the sum of races held in France and those held in Italy.", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT n_north , n_south , n_north - n_south FROM ( SELECT COUNT ( * ) AS n_north FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat > 0 ) JOIN ( SELECT COUNT ( * ) AS n_south FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat < 0 )", "question": "How many races were held in the Northern Hemisphere and the Southern Hemisphere respectively? What is the difference between them?", "reasoning_type": "- C", "commonsense_knowledge": "The Northern Hemisphere runs from 0 degree latitude to 90 degrees North and the Southern Hemisphere from 0 degree latitude to 90 degree South. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT n_north , n_south , n_north - n_south FROM ( SELECT COUNT ( * ) AS n_north FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat > 0 ) JOIN ( SELECT COUNT ( * ) AS n_south FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat < 0 )", "question": "What is the sum, and difference between, of races held in the Northern and Southern Hemispheres respectively?", "reasoning_type": "- C", "commonsense_knowledge": "The Northern Hemisphere runs from 0 degree latitude to 90 degrees North and the Southern Hemisphere from 0 degree latitude to 90 degree South. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT forename_slowest , surname_slowest , forename_fastest , surname_fastest , time ( ( strftime ( \"%s\" , \"00:0\" || slowest_q1 ) - strftime ( \"%s\" , \"00:0\" || fastest_q1 ) ) , \"unixepoch\" ) AS diff FROM ( SELECT MAX ( A.q1 ) AS slowest_q1 , D.forename AS forename_slowest , D.surname AS surname_slowest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" ) JOIN ( SELECT MIN ( A.q1 ) AS fastest_q1 , D.forename AS forename_fastest , D.surname AS surname_fastest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" AND A.q1 != \"\" )", "question": "What are the first name and last name of the fastest and slowest driver in the first round of the 2006 British Grand Prix qualifying race? What is the difference between their lap time?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT forename_slowest , surname_slowest , forename_fastest , surname_fastest , time ( ( strftime ( \"%s\" , \"00:0\" || slowest_q1 ) - strftime ( \"%s\" , \"00:0\" || fastest_q1 ) ) , \"unixepoch\" ) AS diff FROM ( SELECT MAX ( A.q1 ) AS slowest_q1 , D.forename AS forename_slowest , D.surname AS surname_slowest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" ) JOIN ( SELECT MIN ( A.q1 ) AS fastest_q1 , D.forename AS forename_fastest , D.surname AS surname_fastest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" AND A.q1 != \"\" )", "question": "For the British Grand Prix in 2006, which racer was the fastest and which racer was the slowest? Provide their first name, last name, and the difference in lap time between them?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT B.country FROM circuits B , ( SELECT COUNT ( * ) AS n_japan FROM circuits B WHERE B.country = \"Japan\" ) GROUP BY B.country HAVING COUNT ( * ) > 2 * n_japan", "question": "Which countries have more than twice as many racing circuits as Japan?", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT B.country FROM circuits B , ( SELECT COUNT ( * ) AS n_japan FROM circuits B WHERE B.country = \"Japan\" ) GROUP BY B.country HAVING COUNT ( * ) > 2 * n_japan", "question": "Find me the countries with at least two times the quantity of racing circuits in Japan.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT country FROM circuits GROUP BY country HAVING COUNT ( * ) > 2 * 2", "question": "Assuming Japan had 2 circuits, which countries have more than twice as many racing circuits as Japan?", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT country FROM circuits GROUP BY country HAVING COUNT ( * ) > 2 * 2", "question": "Which countries have more than twice as many racing circuits as the two racing circuits in Japan?", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE milliseconds != \"\" AND CAST ( milliseconds AS INT ) > 1.5 * ( SELECT MIN ( CAST ( milliseconds AS INT ) ) FROM results WHERE milliseconds != \"\" )", "question": "List the first and last name of drivers with lap time 1.5 times more than the minimum lap time record.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE milliseconds != \"\" AND CAST ( milliseconds AS INT ) > 1.5 * ( SELECT MIN ( CAST ( milliseconds AS INT ) ) FROM results WHERE milliseconds != \"\" )", "question": "Which drivers have recorded a lap time 1.5 times greater than the record for minimum lap time? Provide their first and last names.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE CAST ( milliseconds AS INT ) > 1.5 * 93000", "question": "If the minimum lap time record was 93000 milliseconds, list the first and last names of drivers with lap time 1.5 times more than the minimum lap time.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE CAST ( milliseconds AS INT ) > 1.5 * 93000", "question": "Tell me the first and last names of all the drivers with a lap time 1.5 times greater than the record of 93000 milliseconds.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * ( SELECT COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.location = \"Lisbon\" )", "question": "List locations and the number of races, where the locations held three times more races than that held in the Portuguese capital.", "reasoning_type": "* C", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * ( SELECT COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.location = \"Lisbon\" )", "question": "Which locations have held three times more races than the capital of Portugal? What is the number of races for each of these places?", "reasoning_type": "* C", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * 5", "question": "If 5 races were held in Lisbon, list locations and the number of races, where the locations held three times more races than that held in the Portuguese capital.", "reasoning_type": "* C H", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * 5", "question": "Lisbon has held five races so give me the locations and race count of all locations which held three times more races than the quantity of races at the capital of Portugal.", "reasoning_type": "* C H", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT num_matches , num_no1 , 1.0 * num_no1 / num_matches AS possibility FROM ( SELECT COUNT ( * ) AS num_matches FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Albers\" AND B.forename = \"Christijan\" ) JOIN ( SELECT COUNT ( * ) AS num_no1 FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Hamilton\" AND B.forename = \"Lewis\" AND A.rank = \"1\" )", "question": "How many races did Lewis Hamilton participate in? How many times did he win first place? What is the probability for him of winning first place?", "reasoning_type": "* / C", "commonsense_knowledge": "Probability is calculated by dividing the number of ways the event can occur by the total number of outcomes."}, {"db_id": "formula_1", "query": "SELECT num_matches , num_no1 , 1.0 * num_no1 / num_matches AS possibility FROM ( SELECT COUNT ( * ) AS num_matches FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Albers\" AND B.forename = \"Christijan\" ) JOIN ( SELECT COUNT ( * ) AS num_no1 FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Hamilton\" AND B.forename = \"Lewis\" AND A.rank = \"1\" )", "question": "Count the number of races Lewis Hamilton has participated in and then the amount he has ranked first place. Therefore, what is his probability of winning first?", "reasoning_type": "* / C", "commonsense_knowledge": "Probability is calculated by dividing the number of ways the event can occur by the total number of outcomes."}, {"db_id": "formula_1", "query": "SELECT 1.0 * ( SELECT COUNT ( * ) FROM circuits WHERE country = \"USA\" ) / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "How many times is the number of circuits in the United States greater than that in the country with the largest land area in the world?", "reasoning_type": "/ * C", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * ( SELECT COUNT ( * ) FROM circuits WHERE country = \"USA\" ) / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "What is the ratio between the number of circuits in the United States to the number of circuits in the largest country as measured by land area?", "reasoning_type": "/ * C", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * 2 / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "Assuming there were 2 circuits in USA, how many times is the number of circuits in the United States greater than that in the country with the largest land area in the world?", "reasoning_type": "* / C H", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * 2 / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "If the USA has two circuits then how many times more circuits does this country have than the country with the largest area?", "reasoning_type": "* / C H", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * n_p / n_all FROM ( SELECT COUNT ( DISTINCT A.driverId ) AS n_p FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" AND C.name = \"United States Grand Prix\" AND C.year = \"2006\" ) JOIN ( SELECT COUNT ( DISTINCT A.driverId ) AS n_all FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" )", "question": "Among the drivers who have the same nationality as the famous football player Cristiano Ronaldo, how many times is the number of players that participated in the 2006 United States Grand Prix greater than that of players who did not?", "reasoning_type": "* / C", "commonsense_knowledge": "Cristiano Ronaldo is a Portuguese professional footballer."}, {"db_id": "formula_1", "query": "SELECT 1.0 * n_p / n_all FROM ( SELECT COUNT ( DISTINCT A.driverId ) AS n_p FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" AND C.name = \"United States Grand Prix\" AND C.year = \"2006\" ) JOIN ( SELECT COUNT ( DISTINCT A.driverId ) AS n_all FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" )", "question": "Among those professional drivers who share a nationality with Cristiano Ronaldo, what is the ratio between participating drivers to non-participating drivers for the 2006 Grand Prix in the United States?", "reasoning_type": "* / C", "commonsense_knowledge": "Cristiano Ronaldo is a Portuguese professional footballer."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT 1.0 * COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"UK\" ) AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "During George W. Bush's presidency, how many races did the United States host? How many times as many races as those held in the United Kingdom?", "reasoning_type": "* / C", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT 1.0 * COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"UK\" ) AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "What is the total count of races hosted in the U.S.A. during George W. Bush's tenure as President and how many times was this count greater than the number of races held in the U.K.?", "reasoning_type": "* / C", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / 10 AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "During George W. Bush's presidency, how many races did the United States host? How many times as many races as those held in the UK assuming that there were 10 races held in UK during that time?", "reasoning_type": "* / C H", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / 10 AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "If the U.K. hosted 10 races during George W. Bush's tenure then how many times more races did the U.S.A. host in the same time period?", "reasoning_type": "* / C H", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * ( SELECT COUNT ( * ) FROM drivers A JOIN results B ON A.driverId = B.driverId WHERE A.forename = \"Allen\" AND A.surname = \"Berg\" ) AND A.nationality = \"American\"", "question": "Provide the ID, first name, and number of races for drivers who have competed in at least twice as many races as Allen Berg and have the same nationality as the famous singer Michael Jackson.", "reasoning_type": "* C", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * ( SELECT COUNT ( * ) FROM drivers A JOIN results B ON A.driverId = B.driverId WHERE A.forename = \"Allen\" AND A.surname = \"Berg\" ) AND A.nationality = \"American\"", "question": "Of the drivers sharing a nationality with late singer Michael Jackson, find me the ID, first name and race count for only those two competed in at least twice as many races as Allen Berg.", "reasoning_type": "* C", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * 10 AND A.nationality = \"American\"", "question": "Assuming that Allen Berg participated in 10 races, provide the ID, first name, and number of races for drivers who have competed in at least twice as many races as Allen Berg and have the same nationality as the famous singer Michael Joseph Jackson.", "reasoning_type": "* C H", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * 10 AND A.nationality = \"American\"", "question": "Return the ID, first name and race count only for drivers who competed in at least twice as many races at Allen Berg's 10 competitive races and only tell me about drivers with the same nationality as singer Michael Jackson.", "reasoning_type": "* C H", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "hospital_1", "query": "SELECT CAST ( julianday ( A.StayEnd ) - julianday ( A.StayStart ) AS INTEGER ) AS days_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "How many days did John Smith stay in hospital?", "reasoning_type": "- C", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of discharge."}, {"db_id": "hospital_1", "query": "SELECT CAST ( julianday ( A.StayEnd ) - julianday ( A.StayStart ) AS INTEGER ) AS days_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "How long was John Smith admitted to the hospital?", "reasoning_type": "- C", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of discharge."}, {"db_id": "hospital_1", "query": "SELECT julianday ( strftime ( \"%Y-\" , A.StayEnd ) || \"05-12\" ) - julianday ( strftime ( \"%Y-\" , A.StayStart ) || strftime ( \"%m-%d\" , A.StayStart ) ) AS date_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "If John Smith left the hospital on International Nurses Day, how many days did John Smith stay in the hospital?", "reasoning_type": "- C H", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of dischargel. International Nurses Day is an international day observed around the world on 12 May each year."}, {"db_id": "hospital_1", "query": "SELECT julianday ( strftime ( \"%Y-\" , A.StayEnd ) || \"05-12\" ) - julianday ( strftime ( \"%Y-\" , A.StayStart ) || strftime ( \"%m-%d\" , A.StayStart ) ) AS date_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "If John Smith was discharged from the hospital on International Nurses Day, for how long was he admitted to the hospital?", "reasoning_type": "- C H", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of dischargel. International Nurses Day is an international day observed around the world on 12 May each year."}, {"db_id": "hospital_1", "query": "SELECT COUNT ( DISTINCT ( Patient ) ) - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Foo Labs\"", "question": "How many more patients have used Foo Labs branded drugs than those have used Baz Industries branded drugs?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT COUNT ( DISTINCT ( Patient ) ) - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Foo Labs\"", "question": "What is the difference in the number of patients who have used drugs branded by Foo Labs compared to those who have used drugs branded by Baz Industries?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 10 - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff", "question": "If there were 10 patients who used Foo Labs brand drugs, how many more patients have used Foo Labs branded drugs than those have used Baz Industries branded drugs?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 10 - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff", "question": "If 10 patients have used drugs branded by Foo Labs, how many additional patients have used Foo Labs branded drugs compared to the number of patients who have used drugs branded by Baz Industries?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / MIN ( c ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "How many times is the number of appointments made by the physician with the highest number of appointments compared to the physician with the lowest number of appointments?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / MIN ( c ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "What is the ratio between the number of appointments made by the physician with the highest and lowest appointments?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / ( MIN ( c ) + 2 ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "If the physician with the fewest appointments made 2 new appointments, how many times is the number of appointments made by the physician with the highest number of appointments compared to the physician with the lowest number of appointments?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / ( MIN ( c ) + 2 ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "If the physician who has the least number of appointments schedules 2 additional appointments, what is the ratio between the number of appointments made by the physician with the highest and him?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "All drugs are 2 dollars per dose. How much did Dennis Doe spend on all drugs and treatment in total?", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "If all drugs cost 2 dollars per dose, what is the total amount spent by Dennis Doe on drugs and treatment?", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost + 10 * 2 AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" AND A.Date != \"2008-04-30 16:53\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "All drugs are 2 dollars per dose. If Dennis Doe bought 10 more doses of Thesisin at 16:53 on April 30th, 2008, how much did Dennis Doe spend on all drugs and treatment in total?", "reasoning_type": "+ * C H", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost + 10 * 2 AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" AND A.Date != \"2008-04-30 16:53\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "If all drugs cost 2 dollars per dose and Dennis Doe purchased 10 additional doses of Thesisin at 16:53 on April 30, 2008, what is the total amount spent by Dennis Doe on all drugs and treatment?", "reasoning_type": "+ * C H", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "How long is the validity period of John Wen''s trained procedures qualification certificate?", "reasoning_type": "- C", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "What is the validity period of John Wen''s trained procedure qualification certificate?", "reasoning_type": "- C", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) + 180 AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "How long is the validity period of John Wen''s trained procedures qualification certificate, if the the validity period is extended by 180 days?", "reasoning_type": "- + C H", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) + 180 AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "If the validity period of John Wen's trained procedures qualification certificate is extended by 180 days, what is the new validity period of the certificate?", "reasoning_type": "- + C H", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Affiliated_With WHERE Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID WHERE B.Name = \"Surgery\" or B.Name = \"General Medicine\" GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "What is the proportion of physicians who belong to both Surgery department and General Medicine department out of physicians who belong to Surgery department?", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Affiliated_With WHERE Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID WHERE B.Name = \"Surgery\" or B.Name = \"General Medicine\" GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "What is the ratio of physicians who are members of both the Surgery department and the General Medicine department, compared to the total number of physicians in the Surgery department?", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * ( 1 + COUNT ( * ) ) / ( 1 + ( SELECT COUNT ( * ) FROM Affiliated_With as A join Physician as B on A.Physician = B.EmployeeID WHERE B.Name != \"Keith Dudermeister\" and Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID join Physician as C on A.Physician = C.EmployeeID WHERE C.Name != \"Keith Dudermeister\" and ( B.Name = \"Surgery\" or B.Name = \"General Medicine\" ) GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "If Keith Dudermeister belongs to both the Surgery department and the General Medicine department, what is the proportion of physicians who belong to both the Surgery department and the General Medicine department among physicians who belong to the Surgery department?", "reasoning_type": "+ / * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * ( 1 + COUNT ( * ) ) / ( 1 + ( SELECT COUNT ( * ) FROM Affiliated_With as A join Physician as B on A.Physician = B.EmployeeID WHERE B.Name != \"Keith Dudermeister\" and Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID join Physician as C on A.Physician = C.EmployeeID WHERE C.Name != \"Keith Dudermeister\" and ( B.Name = \"Surgery\" or B.Name = \"General Medicine\" ) GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "If Keith Dudermeister is a member of both the Surgery and General Medicine departments, what is the proportion of physicians who belong to both departments out of the total number of physicians in the Surgery department?", "reasoning_type": "+ / * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / MIN ( Cost ) AS times FROM Procedures", "question": "How many times is the highest price of the treatments compared to the lowest price?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / MIN ( Cost ) AS times FROM Procedures", "question": "What is the ratio between the highest and lowest prices of the treatments?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / ( ( 1 + 0.75 ) * MIN ( Cost ) ) AS times FROM Procedures", "question": "How many times is the highest price of the treatments compared to the lowest price, if the the lowest price was increased by 75%?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / ( ( 1 + 0.75 ) * MIN ( Cost ) ) AS times FROM Procedures", "question": "If the lowest price of the treatments was increased by 75%, what would be the new ratio between the highest and lowest prices?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Procedures ) FROM Procedures WHERE Cost > 1000", "question": "How many treatments with a cost higher than 1000 account for the total number of treatments?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Procedures ) FROM Procedures WHERE Cost > 1000", "question": "What proportion of treatments, out of the total number of treatments, cost higher than 1000?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 - 1.0 * COUNT ( DISTINCT ( Patient ) ) / ( SELECT COUNT ( DISTINCT ( SSN ) ) FROM Patient ) AS prop FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Name = \"Procrastin-X\"", "question": "What is the proportion of patients who do not use Procrastin-X in the total number of patients?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 - 1.0 * COUNT ( DISTINCT ( Patient ) ) / ( SELECT COUNT ( DISTINCT ( SSN ) ) FROM Patient ) AS prop FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Name = \"Procrastin-X\"", "question": "What proportion of patients, out of the total number of patients, do not use Procrastin-X?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT MAX ( A.Cost ) - MIN ( A.Cost ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "How much is the difference between Dennis Doe's most expensive treatment and his cheapest treatment?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT MAX ( A.Cost ) - MIN ( A.Cost ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "What is the difference between Dennis Doe's most expensive and least expensive treatments?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT ( ( 1 + 0.5 ) * MAX ( A.Cost ) ) - ( ( 1 + 0.5 ) * MIN ( A.Cost ) ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "If the price of each treatment was increased by 50%, how much is the difference between Dennis Doe's most expensive treatment and his cheapest treatment?", "reasoning_type": "- + * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT ( ( 1 + 0.5 ) * MAX ( A.Cost ) ) - ( ( 1 + 0.5 ) * MIN ( A.Cost ) ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "If the price of each treatment was increased by 50%, what would be the difference between Dennis Doe's most expensive and least expensive treatments?", "reasoning_type": "- + * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Room ) AS prop FROM Room WHERE Unavailable = \"0\"", "question": "How many available rooms account for the total number of rooms?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Room ) AS prop FROM Room WHERE Unavailable = \"0\"", "question": "What is the proportion of available rooms to the total number of rooms?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 2 * COUNT ( * ) AS n_people FROM Room WHERE Unavailable = \"0\"", "question": "If there are two beds in each room, how many people can be accommodated in the available room in total?", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 2 * COUNT ( * ) AS n_people FROM Room WHERE Unavailable = \"0\"", "question": "If each room has two beds, what is the total number of people that can be accommodated in all the available rooms?", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "What is the duration in minutes of an appointment with an appointment ID of 13216584?", "reasoning_type": "- / C", "commonsense_knowledge": "One hour is 60 minutes."}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "How long is the appointment with appointment ID 13216584 in minutes?", "reasoning_type": "- / C", "commonsense_knowledge": "One hour is 60 minutes."}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 + 30 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "If the duration of the appointment with an appointment ID 13216584 is extended for half an hour, how many minutes will it last?", "reasoning_type": "- + / C H", "commonsense_knowledge": "Half an hour is 30 minutes."}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 + 30 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "If the appointment with appointment ID 13216584 is extended by 30 minutes, what will be the new total duration of the appointment in minutes?", "reasoning_type": "- + / C H", "commonsense_knowledge": "Half an hour is 30 minutes."}, {"db_id": "hospital_1", "query": "SELECT A.Name , A.Position , 50 * COUNT ( * ) AS cost FROM Physician A JOIN Trained_In B ON A.EmployeeID = B.Physician GROUP BY A.EmployeeID HAVING COUNT ( * ) = ( SELECT MAX ( training_count ) FROM ( SELECT COUNT ( * ) AS training_count FROM Trained_In GROUP BY Physician ) )", "question": "If the training fee for each training is 50, who is the physician who spent the most on training? List his name, position, and training expenses.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT A.Name , A.Position , 50 * COUNT ( * ) AS cost FROM Physician A JOIN Trained_In B ON A.EmployeeID = B.Physician GROUP BY A.EmployeeID HAVING COUNT ( * ) = ( SELECT MAX ( training_count ) FROM ( SELECT COUNT ( * ) AS training_count FROM Trained_In GROUP BY Physician ) )", "question": "Which physician has incurred the highest training expenses, if the training fee for each session is 50? Provide their name, position, and total training expense.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MAX ( BlockFloor ) FROM Room )", "question": "How many more rooms are available on the top floor than on the bottom floor?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MAX ( BlockFloor ) FROM Room )", "question": "What is the difference in the number of available rooms on the top and bottom floors?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 20 - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff", "question": "Suppose there are 20 available rooms on the top floor, how many more rooms are available on the top floor than on the bottom floor?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 20 - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff", "question": "If the top floor has 20 available rooms, what is the difference in the number of available rooms between the top and bottom floors?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Player_ID ) ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach", "question": "What is the percentage of players with coaches in the total number of players?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Player_ID ) ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach", "question": "What percentage of total players have coaches?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( DISTINCT ( A.Player_ID ) ) + 1 ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach A JOIN player B ON A.Player_ID = B.Player_ID WHERE B.Player_name != \"Jim Maloway\"", "question": "If Jim Maloway's coach is Joe Fabbri, what is the percentage of players with coaches in the total number of players?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( DISTINCT ( A.Player_ID ) ) + 1 ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach A JOIN player B ON A.Player_ID = B.Player_ID WHERE B.Player_name != \"Jim Maloway\"", "question": "What percentage of players have a coach under the premise of Joe Fabbri coaching Jim Maloway?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\"", "question": "What percentage of the total number of clubs were built before the year the Bitcoin Network was first launched?", "reasoning_type": "* / C", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\"", "question": "How many clubs, out of the total number, were constructed and opened prior to the launching of the Bitcoin Network?", "reasoning_type": "* / C", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + 1 ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\" AND Club_name != \"Helsingborgs IF\"", "question": "If the Helsingborgs IF Club was established in 2000 instead, what percentage of the total number of clubs were built before the year the Bitcoin Network was first launched?", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + 1 ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\" AND Club_name != \"Helsingborgs IF\"", "question": "Which clubs, as a percentage of total clubs, existed prior to the foundation of the Bitcoin Network if the Helsingborgs IF Club was actuallly established in 2000?", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT SUM ( Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "How many medals have all the clubs in the country that owns the world's longest railway won?", "reasoning_type": "+ C", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT SUM ( Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "What is the medal count for all clubs located in the same country as the longest railway in the world?", "reasoning_type": "+ C", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT SUM ( 2 * Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "How many medals have all the clubs in the country that owns the world's longest railway won if the number of gold medal of each club was doubled?", "reasoning_type": "+ * C H", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT SUM ( 2 * Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "Assuming the number of gold medal of each club was doubled, what is the medal count for all clubs located in the same country as the longest railway in the world?", "reasoning_type": "+ * C H", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "How many times more medals does the top ranked club have than the third ranked club?", "reasoning_type": "+ * /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "What is the ratio of medals between the top ranked and third ranked club?", "reasoning_type": "+ * /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + 3 * Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "How many times more medals does the top ranked club have than the third ranked club, if the number of bronze medals of the top ranked club was tripled?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + 3 * Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "If the number of bronze medals for the highest-ranking club was tripled, how many times more medals does the highest-ranking club club have compared to the thrid ranked club?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"F\" )", "question": "If a gold medal equals 5 points, a big silver medal equals 3 points, a small silver equals 2 points, and a bronze equals 1 point, where is the club with the highest number of points located, when was it established, and how many male and female coaches does it have?", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"F\" )", "question": "Assuming you converted a gold medal to 5 points, a big silver medal to 3 points, a small silver to two points and a bronze medal to 1 point, where is the highest scoring club located, when was it established, and what are the male coach count and the female coach count for the club?", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"F\" )", "question": "If a gold medal equals 5 points, a big silver medal equals 3 points, a small silver equals 2 points, a bronze equals 1 point and the number of bronze medals of clubs that have the most and fewest number of gold medals were the same, where is the club with the highest number of points located, when was it established, and how many male and female coaches does it have?", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"F\" )", "question": "If the clubs with the highest and lowest number of gold medals had an equivalent number of bronze medals --- find me where the highest scoring club is located, when it was established, and the male coach count and the female coach count for the club if you converted all medals to points when a gold medal is 5 points, a big silver medal is 3 points, a small silver medal is 2 points and a bronze medal is 1 point.", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" GROUP BY Player_ID ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" GROUP BY Player_ID )", "question": "What is the proportion of small businessman among the contestants who have won the championship?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" GROUP BY Player_ID ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" GROUP BY Player_ID )", "question": "Out of contestants winning the championship, how many of them are small businessman as a proportion?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" AND Occupation = \"Small Businessman\" ) ) / ( ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" and Player_name != \"Ross Eadie\" GROUP BY Player_ID ) ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" AND Player_name != \"Ross Eadie\" GROUP BY Player_ID )", "question": "If Ross Eadie won the first place instead, what is the proportion of small businessman among the contestants who have won the championship?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" AND Occupation = \"Small Businessman\" ) ) / ( ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" and Player_name != \"Ross Eadie\" GROUP BY Player_ID ) ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" AND Player_name != \"Ross Eadie\" GROUP BY Player_ID )", "question": "What proportion of the winning contestants are small businessmen if Ross Eadie won first place instead of their actual placement?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\"", "question": "What is the probability of a contestant guided by Jameson Tomas winning the championship?", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\"", "question": "If a contestant is guided by Jameson Tomas then what probability is there of this contestant winning the championship?", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Player_name = \"Fiona Shiells\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\" AND A.Player_name != \"Fiona Shiells\"", "question": "If Fiona Shiells won the first place instead, what is the probability of a contestant guided by Jameson Tomas winning the championship?", "reasoning_type": "+ * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Player_name = \"Fiona Shiells\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\" AND A.Player_name != \"Fiona Shiells\"", "question": "Imagine if Fiona Shiells won the championship then what would the probability be for a contestant winning if they are guided by Jameson Tomas?", "reasoning_type": "+ * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT Coach_name , n_1st - ( SELECT MIN ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) ) AS diff FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) WHERE n_1st = ( SELECT MAX ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) )", "question": "What's the name of the coach who has guided the most number of champions, and how many more has he produced than the coach who has guided the fewest?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT Coach_name , n_1st - ( SELECT MIN ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) ) AS diff FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) WHERE n_1st = ( SELECT MAX ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) )", "question": "Find me the name of the coach with the most winning contestants and then find me how many more champions this coach has trained than the coach with the fewest winning contestants.", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "Coaches earn $100 for every champion they guided, $60 for every runner-up and $20 for every third-place finisher. What's the name of the coach who gets the most bonuses and how much does they earn?", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "Find me the name and bonus of the highest bonus earning coach if each champion earns $100, a runner-up earns $60 and a third place earns $20.", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND C.Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) AND Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) UNION SELECT ( SELECT C.Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) AS Coach_name , COUNT ( * ) + 1 AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND A.Player_name = \"Rachel Heinrichs\" ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "Coaches earn $100 for every champion they guided, $60 for every runner-up and $20 for every third-place finisher. If Rachel Heinrichs won the runner-up, what's the name of the coach who gets the most bonuses and how much does he earn?", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND C.Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) AND Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) UNION SELECT ( SELECT C.Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) AS Coach_name , COUNT ( * ) + 1 AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND A.Player_name = \"Rachel Heinrichs\" ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "What is the name and bonus of the coach with the highest bonus of Rachel Heinrichs won runner-up? Convert a champion into $100 bonus, a runner-up to $60 bonus and a third-place position to a $20 bonus.", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001", "question": "What percentage of clubs were established before the 21st century?", "reasoning_type": "* / C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001", "question": "What percentage of clubs were founded prior to the 21st Century?", "reasoning_type": "* / C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM club WHERE Region = \"USA\" ) ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001 AND Region != \"USA\"", "question": "If all the clubs in USA were established in 2000, what percentage of clubs were established before the 21st century?", "reasoning_type": "+ * / C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM club WHERE Region = \"USA\" ) ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001 AND Region != \"USA\"", "question": "What percentage of clubs were founded before the 21st Century given that all clubs in the USA were founded in 2000.", "reasoning_type": "+ * / C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * ( SELECT Votes FROM player WHERE Player_name = \"Ross C. Martin\" )", "question": "What are the names of players living in the capital of Manitoba provincee in Cnanda received more than twice as many votes as Ross C. Martin?", "reasoning_type": "* C", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * ( SELECT Votes FROM player WHERE Player_name = \"Ross C. Martin\" )", "question": "Of the players living in Manitona province's capital city, what are the names of players who received more than twice the votes that Ross C. Martin recieved?", "reasoning_type": "* C", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * 2000 AND Player_name != \"Ross C. Martin\"", "question": "What are the names of players living in the capital of Manitoba provincee in Cnanda received more than twice as many votes as Ross C. Martin, if Ross C. Martin obtained 2000 votes instead?", "reasoning_type": "* C H", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * 2000 AND Player_name != \"Ross C. Martin\"", "question": "Of the players living in Manitona province's capital city, what are the names of players who received more than twice the votes that Ross C. Martin recieved, if if Ross C. Martin obtained 2000 votes instead?", "reasoning_type": "* C H", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - ( SELECT MIN ( Votes ) FROM player ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "What are the names of the players whose coaches come from clubs established before the 21st Century, and how much higher are their votes than the lowest?", "reasoning_type": "- C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - ( SELECT MIN ( Votes ) FROM player ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "Find me the names of players who have coaches that come from clubs established prior to the 21st Century and then calculate how much higher their respective votes are than the lowest number of votes.", "reasoning_type": "- C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - 1000 AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "What are the names of players who are guided by coaches from clubs established before the 21st Century, and how much higher are their votes than the lowest if the lowest votes count is 1000?", "reasoning_type": "- C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - 1000 AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "If the lowest vote count is 1000 then find what are the names of the players who have coaches from pre-21st-century clubs and calculate how much higher these players votes are than the minimum vote count.", "reasoning_type": "- C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) AS ratio FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Rank = \"1st\"", "question": "What is the probability of a player without a coach winning the championship?", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) AS ratio FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Rank = \"1st\"", "question": "If a player has no coach then how likely is it that they will win the championship?", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) - ( SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" )", "question": "How much more likely is the coached player to finish in the top two than the uncoached player?", "reasoning_type": "- * / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) - ( SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" )", "question": "What is the difference in likelihood of a coached player finishing in the top two versus an uncoached player?", "reasoning_type": "- * / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT prob_1 - prob_2 AS diff FROM ( SELECT 1.0 * ( COUNT ( * ) - ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) AND A.Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE A.Player_name != \"Niki Ashton\" ) AS prob_1 FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) ) JOIN ( SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) From player WHERE ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) + 1 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Player_name != \"Niki Ashton\" ) AS prob_2 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name != \"Niki Ashton\" )", "question": "If Niki Ashton was an uncoached player, how much more likely is the coached player to finish in the top two than the uncoached player?", "reasoning_type": "- + * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT prob_1 - prob_2 AS diff FROM ( SELECT 1.0 * ( COUNT ( * ) - ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) AND A.Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE A.Player_name != \"Niki Ashton\" ) AS prob_1 FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) ) JOIN ( SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) From player WHERE ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) + 1 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Player_name != \"Niki Ashton\" ) AS prob_2 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name != \"Niki Ashton\" )", "question": "How much likelier is it that a coached player ranks in the top two than a player without a coach if Niki Ashton has no coach?", "reasoning_type": "- + * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * A.vision + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "The passing rating consists of 5% curve, 5% free kick accuracy, 15% long passing, 20% crossing, 20% vision, and 35% short passing. List the name and current age of the top 10 players who have the highest passing rating.", "reasoning_type": "+ - * C", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * A.vision + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "Find me the name and age today of the top 10 players who have the current highest passing rating as measured by 5% curve, 5% free kick accuracy, 15% long passing, 20% crossing, 20% vision and 40% short passing.", "reasoning_type": "+ - * C", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * 80 + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "The passing rating consists of 5% curve, 5% free kick accuracy, 15% long passing, 20% crossing, 20% vision, and 35% short passing. Assuming ratings of vision attribute for all players are 80, list the name and current age of the top 10 players who have the highest passing rating.", "reasoning_type": "+ - * C H", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * 80 + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "What are the names and present day ages for the top ten players as measured by passing rating if all players have equivalent vision attribute of 80? Calculate passing rating according to sum of 35% short passing, 20% vision, 20% corssing, 15% long passing, 5% free kick accuracy and 5% curve.", "reasoning_type": "+ - * C H", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * A.acceleration + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "The pace rating consists of 45% acceleration rating and 55% sprint speed rating. List the names of the top three players in terms of pace, and list their height, weight and the body mass index.", "reasoning_type": "+ * / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * A.acceleration + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "What is the name, height, weight and body mass index of the top three players in terms of pace as measured by summing 45% acceleration rating and 55% sprint speed rating.", "reasoning_type": "+ * / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * 75 + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "The pace rating consists of 45% acceleration rating and 55% sprint speed rating. Assuming rating of acceleration attribute for all players is 75, list the names of the top three players in terms of pace, and list their height, weight and the body mass index.", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * 75 + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "Give me the names, body mass index, height and weight of the top three players measured by pace (sum 45% acceleration rating and 55% sprint speed rating) when all players have acceleration attribute of 75.", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , MAX ( ABS ( A.potential - A.overall_rating ) ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY difference DESC LIMIT 3", "question": "List names of the top three players with the largest difference between overall rating and potential ability, and list the differences.", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , MAX ( ABS ( A.potential - A.overall_rating ) ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY difference DESC LIMIT 3", "question": "What are the names of the players with the largest discrepancy between overall rating and potential ability? Return only the top 3 and list the difference between rating and ability.", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( difference ) FROM ( SELECT B.player_name , ABS ( A.overall_rating - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating >= 70 UNION SELECT B.player_name , ABS ( A.overall_rating + 5 - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating < 70 ) GROUP BY player_name ORDER BY difference DESC LIMIT 3", "question": "Assuming players with an overall rating below 70 are increased by 5 in their overall rating, list names of the top three players with the largest difference between overall rating and potential ability.", "reasoning_type": "+ - C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( difference ) FROM ( SELECT B.player_name , ABS ( A.overall_rating - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating >= 70 UNION SELECT B.player_name , ABS ( A.overall_rating + 5 - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating < 70 ) GROUP BY player_name ORDER BY difference DESC LIMIT 3", "question": "List the top three players with the largest absolute difference between potential ability and overall rating if all players with an overall rating of 70 get an increase in rating of 5.", "reasoning_type": "+ - C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT left_footed , right_footed , ABS ( left_footed - right_footed ) AS difference FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"right\" )", "question": "Rating 80 to 89 points means very good. Among players that are very good at passing without conceding the ball, how many are left-footed and how many are right-footed, and what is the difference between them?", "reasoning_type": "- C", "commonsense_knowledge": "(1) Dribbling attribute describes how well a player can pass without conceding the ball and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT left_footed , right_footed , ABS ( left_footed - right_footed ) AS difference FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"right\" )", "question": "What is the sum of players that are left-footed and right-footed (and the difference between the two sums) for players rated very good at passing without conceding the ball (rating 80 to 89 points is very good).", "reasoning_type": "- C", "commonsense_knowledge": "(1) Dribbling attribute describes how well a player can pass without conceding the ball and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT player_name FROM ( SELECT B.player_name , MAX ( A.positioning + A.gk_handling ) AS goalkeeper_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY goalkeeper_rating DESC LIMIT 1", "question": "What is the name of the goalkeeper with the highest ratingin terms of the ability of catching the ball clean and positioning correctly for saves?", "reasoning_type": "+ C", "commonsense_knowledge": "Position attribute for a goalkeeper is the ability to position correctly for saves. Handling is an exclusive goalkeeper attribute used to measure how clean he catches the ball."}, {"db_id": "soccer_1", "query": "SELECT player_name FROM ( SELECT B.player_name , MAX ( A.positioning + A.gk_handling ) AS goalkeeper_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY goalkeeper_rating DESC LIMIT 1", "question": "Considering ability of catching the ball clean and correct positioning for saves, which goalkeeper has the highest rating? Give me his name.", "reasoning_type": "+ C", "commonsense_knowledge": "Position attribute for a goalkeeper is the ability to position correctly for saves. Handling is an exclusive goalkeeper attribute used to measure how clean he catches the ball."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.long_shots + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "For the player who gets tired during a game at the highest rate, what is his name and his total rating in terms of long shots and short power?", "reasoning_type": "+ C", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.long_shots + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "Give me the name and total rating in long shots and short power of the player with the maximum rate of tiredness increase during a game?", "reasoning_type": "+ C", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 90 + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "For the player who gets tired during a game at the highest rate, what is his name and his total rating in terms of long shots and short power, if his long shots rating was assumed to be 90?", "reasoning_type": "+ C H", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 90 + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "Find me the name of the player who tires the fastest during a game and then calculate their total rating with respect to long shots and short power if the long shots rating is now 90.", "reasoning_type": "+ C H", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT best_team_name , lowest_team_name FROM ( SELECT B.team_short_name AS best_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating DESC LIMIT 1 ) JOIN ( SELECT B.team_short_name AS lowest_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating ASC LIMIT 1 )", "question": "The defensive rating is composed of ratings for pressure, aggression, and team width. Provide the short names of the teams with the highest and lowest defensive ratings.", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT best_team_name , lowest_team_name FROM ( SELECT B.team_short_name AS best_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating DESC LIMIT 1 ) JOIN ( SELECT B.team_short_name AS lowest_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating ASC LIMIT 1 )", "question": "What are the short names of the teams with highest and lowest defensive rating as measured by ratings for pressure, aggression and width of team.", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + A.buildUpPlayDribbling AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + A.buildUpPlayDribbling DESC LIMIT 1", "question": "Out of the teams that utilize the free-form chance creation position tactic, which team has the highest combined rating for build-up play speed and dribbling? Please provide the long name of the team and the combined rating.", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + A.buildUpPlayDribbling AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + A.buildUpPlayDribbling DESC LIMIT 1", "question": "What is the long team name and highest rating for the team with the highest combined rating for build-up play speed and dribbling out of all the teams using the free-form chance creation position tactic?", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + 60 AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + 60 DESC LIMIT 1", "question": "Assuming all teams have a dribbling rating of 60, which team has the highest combined rating for build-up play speed and dribbling among teams that utilize the free-form chance creation position tactic? Please provide the full name of the team and the combined rating.", "reasoning_type": "+ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + 60 AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + 60 DESC LIMIT 1", "question": "Tell me the long name and combined rating for the team with the highest combined rating as measured by build-up play speed and dribbling. Include only the teams using a free-form chance creation position tactic and assume all teams have a 60 dribbling rate.", "reasoning_type": "+ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 0.45 * A.finishing + 0.2 * A.long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ORDER BY shooting_rating DESC LIMIT 1", "question": "The shooting rating is comprised of 6 attributes, including 45% finishing, 20% long shots, 5% penalties, 5% positioning, 20% shot power, and 5% volleys. What is the name and shooting rating of the top 1 player in terms of shooting rating?", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 0.45 * A.finishing + 0.2 * A.long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ORDER BY shooting_rating DESC LIMIT 1", "question": "Which is the top 1 player as measured by shooting rate calculated as 5% volleys, 20% shot power, 5% positioning, 5% penalties, 20% long shots and 45% finishing.", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( shooting_rating ) FROM ( SELECT B.player_name , MAX ( 0.45 * ( finishing + 5 ) + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE finishing <= long_shots AND finishing <= penalties AND finishing <= positioning AND finishing <= shot_power AND finishing <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * ( long_shots + 5 ) + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE long_shots <= finishing AND long_shots <= penalties AND long_shots <= positioning AND long_shots <= shot_power AND long_shots <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * ( penalties + 5 ) + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE penalties <= finishing AND penalties <= long_shots AND penalties <= positioning AND penalties <= shot_power AND penalties <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * ( positioning + 5 ) + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE positioning <= finishing AND positioning <= long_shots AND positioning <= penalties AND positioning <= shot_power AND positioning <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * ( shot_power + 5 ) + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE shot_power <= finishing AND shot_power <= long_shots AND shot_power <= penalties AND shot_power <= positioning AND shot_power <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * ( volleys + 5 ) ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE volleys <= finishing AND volleys <= long_shots AND volleys <= penalties AND volleys <= positioning AND volleys <= shot_power )", "question": "The shooting rating is comprised of 6 attributes, including 45% finishing, 20% long shots, 5% penalties, 5% positioning, 20% shot power, and 5% volleys. What is the name and shooting rating of the top 1 player in terms of shooting rating if weakest shooting attributes of all players could be impoved by 5 points?", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( shooting_rating ) FROM ( SELECT B.player_name , MAX ( 0.45 * ( finishing + 5 ) + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE finishing <= long_shots AND finishing <= penalties AND finishing <= positioning AND finishing <= shot_power AND finishing <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * ( long_shots + 5 ) + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE long_shots <= finishing AND long_shots <= penalties AND long_shots <= positioning AND long_shots <= shot_power AND long_shots <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * ( penalties + 5 ) + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE penalties <= finishing AND penalties <= long_shots AND penalties <= positioning AND penalties <= shot_power AND penalties <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * ( positioning + 5 ) + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE positioning <= finishing AND positioning <= long_shots AND positioning <= penalties AND positioning <= shot_power AND positioning <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * ( shot_power + 5 ) + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE shot_power <= finishing AND shot_power <= long_shots AND shot_power <= penalties AND shot_power <= positioning AND shot_power <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * ( volleys + 5 ) ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE volleys <= finishing AND volleys <= long_shots AND volleys <= penalties AND volleys <= positioning AND volleys <= shot_power )", "question": "Give me the name and shooting rating of the best player (ranked top 1) if all players received a 5 point increase to their weakest attribute. Shooting rating can be calculated as 45% finishing, 20% long shots, 5% penalties, 5% positioning, 20% shot power and 5% volleys.", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT best_vision_long_passing , worst_vision_long_passing , ABS ( worst_vision_long_passing - best_vision_long_passing ) AS diff FROM ( SELECT A.long_passing AS best_vision_long_passing , MAX ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) JOIN ( SELECT A.long_passing AS worst_vision_long_passing , MIN ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id )", "question": "What are the long passing ratings for the players with the best and worst awareness of the position of their teammates and opponents around them? What is the difference?", "reasoning_type": "- C", "commonsense_knowledge": "(1) Vision ranks the player\u2019s awareness of the position of his teammates and opponents around him and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT best_vision_long_passing , worst_vision_long_passing , ABS ( worst_vision_long_passing - best_vision_long_passing ) AS diff FROM ( SELECT A.long_passing AS best_vision_long_passing , MAX ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) JOIN ( SELECT A.long_passing AS worst_vision_long_passing , MIN ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id )", "question": "For the players with the best and worst position-awareness of their teammates and opponents, find me the long passing ratings and calculate the distance between these ratings.", "reasoning_type": "- C", "commonsense_knowledge": "(1) Vision ranks the player\u2019s awareness of the position of his teammates and opponents around him and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * max_strength / min_strength AS ratio FROM ( SELECT MAX ( A.strength ) AS max_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" ) JOIN ( SELECT MIN ( A.strength ) AS min_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" )", "question": "Among the players with medium attack rating, what is the ratio between the highest and lowest scores which measure the quality of physical strength?", "reasoning_type": "* / C", "commonsense_knowledge": "Strength is about the quality or state of physical strength."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * max_strength / min_strength AS ratio FROM ( SELECT MAX ( A.strength ) AS max_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" ) JOIN ( SELECT MIN ( A.strength ) AS min_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" )", "question": "Find me the ratio of highest to lowest scores as measured by quality of physical strength out of only the players with a medium attack rating.", "reasoning_type": "* / C", "commonsense_knowledge": "Strength is about the quality or state of physical strength."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * very_good / good AS proportion FROM ( SELECT COUNT ( * ) AS very_good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 80 AND 89 ) JOIN ( SELECT COUNT ( * ) AS good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 70 AND 79 )", "question": "Rating between 80 to 89 points means very good. Rating between 70 to 79 points means good. What is the proportion of players with very good accuracy to those with good accuracy when shooting from inside the penalty area?", "reasoning_type": "/ * C", "commonsense_knowledge": "Penalties attribute measures the accuracy of shots from inside the penalty area."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * very_good / good AS proportion FROM ( SELECT COUNT ( * ) AS very_good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 80 AND 89 ) JOIN ( SELECT COUNT ( * ) AS good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 70 AND 79 )", "question": "Calculate the proportion of players with very good accuracy (80 to 89 points) to players with good accuracy (70 to 79 points) when only shooting from inside the penalty area.", "reasoning_type": "/ * C", "commonsense_knowledge": "Penalties attribute measures the accuracy of shots from inside the penalty area."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * highest_weight / lowest_weight AS times FROM ( SELECT weight AS highest_weight , MAX ( height ) FROM Player ) JOIN ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "How many times does the tallest player weigh as much as the shortest player?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT 1.0 * highest_weight / lowest_weight AS times FROM ( SELECT weight AS highest_weight , MAX ( height ) FROM Player ) JOIN ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "How many more times is the weight of the tallest player to the weight of the shortest player as a proportion?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT 170.0 / lowest_weight AS times FROM ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "How many times does the tallest player weigh as much as the shortest player, if the the tallest player weighed 170 lbs instead?", "reasoning_type": "/ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT 170.0 / lowest_weight AS times FROM ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "If the tallest player has a weight of 170lbs then calculate the ratio of the tallest players weight to the shortest players weight.", "reasoning_type": "/ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , B.height , B.weight , A.overall_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id JOIN ( SELECT B.player_fifa_api_id , B.weight * 0.45 / ( ( B.height / 100 ) * ( B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) AS C ON A.player_fifa_api_id = C.player_fifa_api_id ORDER BY C.BMI DESC LIMIT 1", "question": "List the name, height, weight and overall rating of players with the highest body mass index.", "reasoning_type": "/ * C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , B.height , B.weight , A.overall_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id JOIN ( SELECT B.player_fifa_api_id , B.weight * 0.45 / ( ( B.height / 100 ) * ( B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) AS C ON A.player_fifa_api_id = C.player_fifa_api_id ORDER BY C.BMI DESC LIMIT 1", "question": "As sorted by highest body mass index, give me the name, height, weight and rating overall of players.", "reasoning_type": "/ * C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT left_count , right_count , ABS ( left_count - right_count ) FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"right\" )", "question": "Among players who have both \"low\" attacking and defensive work rate, how many players are right-footed? How many players are left-footed? What is the difference between them?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT left_count , right_count , ABS ( left_count - right_count ) FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"right\" )", "question": "What is the count, and difference between, of the right-footed players and the left footed players only considering players with \"low\" attacking and defensive foot work rate?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id , ( SELECT A.crossing AS FC_crossing FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE B.player_name = \"Fabio Cannavaro\" and date ( A.date ) = \"2007-08-30\" ) WHERE A.crossing > 2.0 * FC_crossing", "question": "Provide a list of player names, their overall ratings, and their attribute record dates, where Crossing ratings of the players surpass that of Fabio Cannavaro recorded on 30th August 2007 by two times.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id , ( SELECT A.crossing AS FC_crossing FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE B.player_name = \"Fabio Cannavaro\" and date ( A.date ) = \"2007-08-30\" ) WHERE A.crossing > 2.0 * FC_crossing", "question": "What are the names of the players with their overall ratings and attribute record dates only for the players who have a \"Crossing\" rating surpassing by two the rating of Fabio Cannavaro from August 30th 2007.", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.crossing > 2.0 * 45", "question": "Assuming that Fabio Cannavaro obtained 45 crossing rating on 30th Aug 2007 instead, provide a list of player names, their overall ratings, and their attribute record dates, where crossing ratings of them surpassed Fabio Cannavaro crossing rating recorded on 30 August 2007 by two times.", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.crossing > 2.0 * 45", "question": "Get me the player names, overall ratings and attribute record dates for all players which surpass by two times the recorded \"Crossing\" rating of 45 from Fabio Cannavaro recorded on August 30th in 2007.", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 1.0 * height / 100 ) * ( height / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "What is the body mass index of Jonathan Leko?", "reasoning_type": "* / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 1.0 * height / 100 ) * ( height / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "For the player Jonathan Leko, return their body mass index.", "reasoning_type": "* / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 190.0 / 100 ) * ( 190.0 / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "What is the body mass index of \"Jonathan Leko\", if he was 190cm instead?", "reasoning_type": "* / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 190.0 / 100 ) * ( 190.0 / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "If you imagine that \"Jonathan Leko\" is 190cm tall then recalculate their body mass index.", "reasoning_type": "* / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "How many cases of wine were produced in total in 2009, and what percentage was the increase over 2007?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "What is the total case quantity of wine production in 2009 and how does this compare (in percentage change) relative to 2007 production?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" AND Name != \"Sauvignon Blanc\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "If no Sauvignon Blanc was produced in 2009, how many cases of wine were produced in 2009, and what percentage was the increase over 2007?", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" AND Name != \"Sauvignon Blanc\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "What is the total case production of wine in 2009 and respective increase from 2007 if no Sauvignon Blanc was produced in 2009?", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" )", "question": "How many types of wine are not produced in American Viticultural Area, and how much more is that compared to wines produced in American Viticultural Area?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" )", "question": "What is the total number of wine types produced outside the American Viticultural Area and how many more types are produced here than inside this area?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" OR B.Price <= ( SELECT AVG ( Price ) FROM wine ) - 10 ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" AND B.Price > ( SELECT AVG ( Price ) FROM wine ) - 10 )", "question": "If wines priced more than 10 dollars less than the average price of wine were all produced in non-American Viticultural Area, how many types of wine are not produced in American Viticultural Area, and how much more is that compared to wines produced in American Viticultural Area?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" OR B.Price <= ( SELECT AVG ( Price ) FROM wine ) - 10 ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" AND B.Price > ( SELECT AVG ( Price ) FROM wine ) - 10 )", "question": "How many types of wine are produced not inside the American Viticultural Area and how many more types is this than the number of wine types from inside this area? Assume all wines priced more than $10 USD less than the average price of wine are produced outside this respective area.", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "How many times was the production of red wine in 2008 compared to white wine?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "What is the ratio of wine production for red wine compared to white wine for 2008?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases + 100 ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases + 100 ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "If the production of each type of wine increases by 100 boxes, how many times was the production of red wine in 2008 compared to white wine?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases + 100 ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases + 100 ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "How many times more was red wine produced in 2008 compared to white wine in the same period if all wine type production increases by 100 boxes?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM wine WHERE Score = \"98\"", "question": "What is the difference between the highest and lowest prices of a 98 rated wine?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM wine WHERE Score = \"98\"", "question": "Out of wines with a 98 rating, give me the difference between highest and lowest priced wine.", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM ( SELECT price * ( 1 + 0.1 ) AS price , Score FROM wine WHERE Winery = \"Carlisle\" UNION ALL SELECT price , Score FROM wine WHERE Winery != \"Carlisle\" ) WHERE Score = \"98\"", "question": "What is the difference between the highest and lowest prices of 98 rated wines if all the wines from Carlisle Winery were increased by 10% in price?", "reasoning_type": "+ - * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM ( SELECT price * ( 1 + 0.1 ) AS price , Score FROM wine WHERE Winery = \"Carlisle\" UNION ALL SELECT price , Score FROM wine WHERE Winery != \"Carlisle\" ) WHERE Score = \"98\"", "question": "If you only consider wines with a 98 rating, what is the difference between the most expensive and cheapest wine if all Carlisle Winery wines increased in price by 10%.", "reasoning_type": "+ - * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM wine A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM ( A.Cases ) < 2 * ( SELECT SUM ( Cases ) FROM wine WHERE Appelation = \"Calaveras County\" )", "question": "What is the name of the appellation in American Viticultural Area that has a total wine production that did not reach twice the production of Calaveras County?", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM wine A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM ( A.Cases ) < 2 * ( SELECT SUM ( Cases ) FROM wine WHERE Appelation = \"Calaveras County\" )", "question": "Tell me the name of the appelation in the American Viticultural Area with a total production of wine less than double the producton of Calaveras county?", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM (SELECT Appelation, Cases FROM wine WHERE YEAR != \"2009\" UNION ALL SELECT Appelation, 2 * Cases FROM wine WHERE YEAR = \"2009\" ) A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM (A.Cases) < 2 * (SELECT SUM(Cases) FROM (SELECT SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year!= 2009 UNION ALL SELECT 2*SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year= 2009))", "question": "If the production of wine produced in 2009 doubled, which appelation in American Viticultural Area has a total wine production that did not reach twice the production of Calaveras County?", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM (SELECT Appelation, Cases FROM wine WHERE YEAR != \"2009\" UNION ALL SELECT Appelation, 2 * Cases FROM wine WHERE YEAR = \"2009\" ) A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM (A.Cases) < 2 * (SELECT SUM(Cases) FROM (SELECT SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year!= 2009 UNION ALL SELECT 2*SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year= 2009))", "question": "Which appelation in the American Viticultural Area did not surpass twice the production of Calaveras county if all production in 2009 doubled?", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM wine WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM wine WHERE Price < \"40\" )", "question": "What percentage of wines priced lower than 40 have a rating higher than 85?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM wine WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM wine WHERE Price < \"40\" )", "question": "Of the wines cheaper than 40, what percentage have a rating above 85?", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" )", "question": "If the price of all the wines made from Zinfandel grapes goes up 15 percent, what percentage of wines priced below 40 have a rating above 85?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" )", "question": "Considering only wines cheaper than 40, what percentage of these have an above 85 rating if the price of all Zinfandel grape-derived wines goes up by 15%?", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, name FROM wine WHERE Appelation IN ( SELECT Appelation FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) AND Score > ( SELECT MIN ( Score ) FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) + 10", "question": "What are the No. and names of wines that are from the appellation with the most expensive wine have a rating that is more than 10 points higher than the lowest rating of the highest-priced wine?", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, name FROM wine WHERE Appelation IN ( SELECT Appelation FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) AND Score > ( SELECT MIN ( Score ) FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) + 10", "question": "List me the No. and names of all wines from the appelation which also produces the most expensive wine which also have a rating at least 10 points above the lowest rating of the highest-priced wine?", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, Name FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Appelation IN (SELECT Appelation FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) AND Score > (SELECT MIN (Score) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) + 10", "question": "If the price of wine produced in 2008 was increased by 15%, what are the No. and names wines from the appellation with the most expensive wine have a rating that is more than 10 points higher than the lowest rating of the highest-priced wine?", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, Name FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Appelation IN (SELECT Appelation FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) AND Score > (SELECT MIN (Score) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) + 10", "question": "List the No. and names of all wines from the appelation also producing the most expensive wine which have a rating over 10 points above the lowest rating of the highest-priced wine if all 2008 wine increased in price by 15%.", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\"", "question": "It takes 1.2 kilograms of grapes to make a bottle of red wine. How many tons of grapes were used to produce red wine in 2005?", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\"", "question": "How many tons of grapes were used for red wine in 2005 if it takes 1.2 kilograms of grapes for a single bottle of red wine?", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\" AND A.Winery != \"Paloma\"", "question": "It takes 1.2 kilograms of grapes to make a bottle of red wine. If Paloma Winery did not produce wine in 2005, how many tons of grapes were used to produce red wine in 2005?", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\" AND A.Winery != \"Paloma\"", "question": "How many tons of grapes were used for red wine in 2005 if it takes 1.2 kilograms of grapes for a single bottle of red wine and Paloma Winery had zero production in 2005?", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" )", "question": "It takes 1.2 kilograms of grapes to make a bottle of wine. How many tons of red grapes and how many tons of white grapes are used to produce wine in Napa County?", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" )", "question": "Tell me how many tons of red and white grapes were used to make wine in Napa Valley if it takes 1.2 kilograms of grapes per bottle?", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" AND A.Appelation != \"Carneros\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" AND A.Appelation != \"Carneros\" )", "question": "It takes 1.2kg of grapes to make a bottle of wine. If all Carneros wines were produced outside Napa County, how many tons of red grapes and how many tons of white grapes are used to produce wine in Napa County?", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" AND A.Appelation != \"Carneros\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" AND A.Appelation != \"Carneros\" )", "question": "How many tones of red and white grapes were used to make wine in Napa Valley if it takes 1.2 kilograms of grapes per bottle and all Carneros wines were produced somewhere else? ", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM wine WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM wine WHERE name = \"Cabernet Sauvignon\" )", "question": "Which wineries do the highest-rated Cabernet sauvignon wines come from, and how much more do they cost than the average price of Cabernet Sauvignon?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM wine WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM wine WHERE name = \"Cabernet Sauvignon\" )", "question": "List the wineries providing the highest-rated Cabernet Sauvignon and how much more do these bottles cost than the average price of Cabernet Sauvignon?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" )", "question": "If the scores of all wines produced in 2005 were decreased by 10 points, which wineries do the highest-rated Cabernet sauvignon wines come from, and how much more do they cost than the average price of Cabernet Sauvignon?", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" )", "question": "List the wineries making the Cabernet Sauvignon with the higest rating and how much more expensive these are than the average price for Cabernet Sauvignon if all 2005 wines decrease in score by 10 points.", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( A.Price ) AS max_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" ) JOIN ( SELECT MAX ( A.Price ) AS max_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" )", "question": "How much more expensive is the most expensive red wine than the most expensive white wine?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( A.Price ) AS max_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" ) JOIN ( SELECT MAX ( A.Price ) AS max_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" )", "question": "What is the price difference between the most expensive red and white wine respectively?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( Price ) AS max_red FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"Red\" ) JOIN ( SELECT MAX ( Price ) AS max_white FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"White\" )", "question": "If the price of Ampelos Winery's wine was reduced by 20%, how much more expensive is the most expensive red wine than the most expensive white wine?", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( Price ) AS max_red FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"Red\" ) JOIN ( SELECT MAX ( Price ) AS max_white FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"White\" )", "question": "What is the price increase between the most expensive red and white wines if Ampelos Winery wine costs 20% less?", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM wine A JOIN wine B ON A.Winery = B.Winery JOIN wine C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "If a winery has produced wine for three consecutive years without a rating below 90, it is rated as a \"premium winery\". What percentage of wineries are premium winery?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM wine A JOIN wine B ON A.Winery = B.Winery JOIN wine C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "Which wineries are considered premium as measured by producing no wine with a rating lower than 90 for three consecutive years?", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) A JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) B ON A.Winery = B.Winery JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "If a winery has produced wine for three consecutive years without a rating below 90, it is rated as a \"premium winery\". If the score of wine made from Pinot Noir grapes was decreased by 5 points, what percentage of wineries are premium winery?", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) A JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) B ON A.Winery = B.Winery JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "Which wineries are considered premium, by only producing wines with ratings of at least 90 for three consecutive years, if you decrease the score of all Pinot Noir grape wines by 5 points?", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "In which year was the production of white wine the highest, and how much higher than the production of red wine in that year?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "Calculate the year in which white wine production peaked and how much more white wine was produced than red wine on this year?", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "If the production of all wines at the Beringer Winery doubled, in which year was the production of white wine the highest, and how much higher than the production of red wine in that year?", "reasoning_type": "* - H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "Calculate the year of peak white wine production and how much greater this production was than red wine if the Beringer Winery doubled production.", "reasoning_type": "* - H", "commonsense_knowledge": ""}]