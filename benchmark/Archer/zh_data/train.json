[{"db_id": "bike_1", "query": "SELECT A.dock_count - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "2015\u5e746\u67082\u65e512:47:02\uff0c\u5723\u4f55\u585e\u6587\u5a31\u4e2d\u5fc3\u7ad9\u4e0d\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6709\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT A.dock_count - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "\u8fd4\u56de2015\u5e746\u67082\u65e512\u70b947\u52062\u79d2\u5723\u4f55\u585e\u6587\u5a31\u4e2d\u5fc3\u7ad9\u4e0d\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u6570\u91cf\u3002", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT 20 - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "\u5982\u679c\u5723\u4f55\u585e\u6587\u5a31\u4e2d\u5fc3\u7ad9\u7ad9\u603b\u5171\u670920\u4e2a\u81ea\u884c\u8f66\u505c\u9760\u70b9\uff0c\u90a3\u4e482015\u5e746\u67082\u65e512:47:02\uff0c\u5b83\u4e0d\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6709\u591a\u5c11\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT 20 - B.docks_available AS n_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE B.time = \"2015-06-02 12:47:02\" AND A.name = \"San Jose Civic Center\"", "question": "\u8fd4\u56de2015\u5e746\u67082\u65e512\u70b947\u52062\u79d2\u5723\u4f55\u585e\u6587\u5a31\u4e2d\u5fc3\u7ad9\u4e0d\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u6570\u91cf\uff0c\u5047\u8bbe\u5b83\u603b\u5171\u6709\u4e8c\u5341\u4e2a\u81ea\u884c\u8f66\u505c\u9760\u70b9\u3002", "reasoning_type": "- C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "\u91d1\u95e8\u4e4b\u57ce\u603b\u5171\u6709\u591a\u5c11\u4e2a\u81ea\u884c\u8f66\u7ad9\uff0c\u6bd4\u5e15\u6d1b\u963f\u6258\u5c11\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "\u8fd4\u56de\u91d1\u95e8\u4e4b\u57ce\u7684\u81ea\u884c\u8f66\u7ad9\u603b\u6570\u3002\u5b83\u4e0e\u5e15\u6d1b\u963f\u6258\u7684\u81ea\u884c\u8f66\u7ad9\u603b\u6570\u76f8\u6bd4\u5c11\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) * 2 + 10 FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "\u91d1\u95e8\u4e4b\u57ce\u603b\u5171\u6709\u591a\u5c11\u4e2a\u81ea\u884c\u8f66\u7ad9\uff1f\u5982\u679c\u5e15\u6d1b\u963f\u6258\u7684\u81ea\u884c\u8f66\u7ad9\u6570\u91cf\u662f\u5b83\u81ea\u5df1\u7684\u4e24\u500d\u8fd8\u591a10\u4e2a\uff0c\u90a3\u91d1\u95e8\u4e4b\u57ce\u7684\u81ea\u884c\u8f66\u7ad9\u6570\u91cf\u6bd4\u5e15\u6d1b\u963f\u6258\u5c11\u591a\u5c11\uff1f", "reasoning_type": "- + * C H", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT ( SELECT COUNT ( * ) * 2 + 10 FROM station WHERE city = \"Palo Alto\" ) - COUNT ( * ) AS diff FROM station WHERE city = \"San Francisco\"", "question": "\u8fd4\u56de\u91d1\u95e8\u4e4b\u57ce\u7684\u81ea\u884c\u8f66\u7ad9\u603b\u6570\u3002\u5047\u5982\u5e15\u6d1b\u963f\u6258\u7684\u81ea\u884c\u8f66\u7ad9\u6570\u91cf\u589e\u957f\u4e00\u500d\u8fd8\u591a\u5341\u4e2a\uff0c\u90a3\u91d1\u95e8\u4e4b\u57ce\u7684\u81ea\u884c\u8f66\u7ad9\u6570\u91cf\u6bd4\u5e15\u6d1b\u963f\u6258\u5c11\u591a\u5c11\uff1f", "reasoning_type": "- + * C H", "commonsense_knowledge": "San Francisco is known as city of the Golden Gate."}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( A.dock_count ) - SUM ( B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "\u57282015\u5e746\u67082\u65e512:46:02\u8fd9\u4e2a\u65f6\u523b\uff0c\u90a3\u4e9b\u5efa\u4e8e2013\u5e748\u670820\u65e5\u7684\u8f66\u7ad9\u7684\u53ef\u7528\u81ea\u884c\u8f66\u505c\u9760\u70b9\u4e00\u5171\u6709\u591a\u5c11\uff0c\u4e0d\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u5462\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( A.dock_count ) - SUM ( B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "\u8fd4\u56de2015\u5e746\u67082\u65e512\u70b946\u52062\u79d2\u7684\u65f6\u5019\uff0c\u6240\u67092013\u5e748\u670820\u65e5\u5efa\u7684\u8f66\u7ad9\u7684\u53ef\u7528\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u603b\u6570\u91cf\u548c\u4e0d\u53ef\u7528\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u603b\u6570\u91cf\u3002", "reasoning_type": "- C", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( 2 * ( SELECT dock_count FROM station WHERE name = \"Grant Avenue at Columbus Avenue\" ) + 5 - B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "\u5982\u679c\u5efa\u4e8e2013\u5e748\u670820\u65e5\u7684\u6bcf\u4e2a\u8f66\u7ad9\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6570\u91cf\u90fd\u662f\"Grant Avenue at Columbus Avenue\"\u8f66\u7ad9\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6570\u91cf\u7684\u4e24\u500d\u591a5\u4e2a\uff0c\u57282015\u5e746\u67082\u65e512:46:02\u8fd9\u4e2a\u65f6\u523b\uff0c\u90a3\u4e9b\u5efa\u4e8e2013\u5e748\u670820\u65e5\u7684\u8f66\u7ad9\u7684\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u4e00\u5171\u6709\u591a\u5c11\u53ef\u7528\uff0c\u4e0d\u53ef\u7528\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u5462\uff1f", "reasoning_type": "+ * - C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT SUM ( B.docks_available ) AS total_available , SUM ( 2 * ( SELECT dock_count FROM station WHERE name = \"Grant Avenue at Columbus Avenue\" ) + 5 - B.docks_available ) AS total_unavailable FROM station A JOIN status B ON A.id = B.station_id WHERE A.installation_date = \"8/20/2013\" AND B.time = \"2015-06-02 12:46:02\"", "question": "\u5047\u8bbe2013\u5e748\u670820\u65e5\u5efa\u7684\u6bcf\u4e2a\u8f66\u7ad9\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6570\u91cf\u6bd4\u201cGrant Avenue at ColumbusAvenue\u201d\u8f66\u7ad9\u7684\u4e24\u500d\u591a\u4e94\u4e2a\uff0c\u8fd4\u56de2015\u5e746\u67082\u65e512\u70b946\u52062\u79d2\u7684\u65f6\u5019\uff0c\u6240\u67092013\u5e748\u670820\u65e5\u5efa\u7684\u8f66\u7ad9\u7684\u53ef\u7528\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u603b\u6570\u91cf\u548c\u4e0d\u53ef\u7528\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u603b\u6570\u91cf\u3002", "reasoning_type": "+ * - C H", "commonsense_knowledge": "unavailable dock count= total dock count - available dock count"}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= ( SELECT 2 * AVG ( duration ) FROM trip WHERE start_station_name = \"2nd at Folsom\" )", "question": "\u67e5\u627e\u6301\u7eed\u65f6\u95f4\u662f\u51fa\u53d1\u4e8e\u201c2nd at Folsom\u201d\u7ad9\u7684\u884c\u7a0b\u7684\u5e73\u5747\u6301\u7eed\u65f6\u95f4\u81f3\u5c11\u4e24\u500d\u7684\u884c\u7a0bID\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= ( SELECT 2 * AVG ( duration ) FROM trip WHERE start_station_name = \"2nd at Folsom\" )", "question": "\u54ea\u4e9b\u884c\u7a0b\u7684\u6301\u7eed\u65f6\u957f\u81f3\u5c11\u662f\u51fa\u53d1\u7ad9\u4e3a\u201c2nd at Folsom\u201d\u7ad9\u7684\u884c\u7a0b\u7684\u5e73\u5747\u6301\u7eed\u65f6\u957f\u7684\u4e24\u500d\uff1f\u5217\u51fa\u884c\u7a0bID\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= 2 * 666", "question": "\u67e5\u627e\u6301\u7eed\u65f6\u95f4\u81f3\u5c11\u662f\u51fa\u53d1\u4e8e\u201c2nd at Folsom\u201d\u7ad9\u7684\u884c\u7a0b\u7684\u5e73\u5747\u6301\u7eed\u65f6\u95f4\u4e24\u500d\u7684\u884c\u7a0bID\uff0c\u5047\u5982\u51fa\u53d1\u4e8e\u201c2nd at Folsom\u201d\u7ad9\u7684\u884c\u7a0b\u7684\u5e73\u5747\u6301\u7eed\u65f6\u95f4\u662f666\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration >= 2 * 666", "question": "\u5047\u5982\u51fa\u53d1\u7ad9\u4e3a\u201c2nd at Folsom\u201d\u7ad9\u7684\u884c\u7a0b\u7684\u5e73\u5747\u6301\u7eed\u65f6\u957f\u4e3a666\uff0c\u54ea\u4e9b\u884c\u7a0b\u7684\u6301\u7eed\u65f6\u957f\u81f3\u5c11\u662f\u51fa\u53d1\u7ad9\u4e3a\u201c2nd at Folsom\u201d\u7ad9\u7684\u884c\u7a0b\u7684\u5e73\u5747\u6301\u7eed\u65f6\u957f\u7684\u4e24\u500d\uff1f\u5217\u51fa\u884c\u7a0bID\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * ( SELECT A.bikes_available FROM status A JOIN station B ON A.station_id = B.id WHERE B.name = \"2nd at Townsend\" AND A.time = \"2015-06-02 13:59:02\" ) AND A.time = \"2015-06-02 13:59:02\"", "question": "2015\u5e746\u67082\u65e513:59:02\uff0c\u54ea\u4e2a\u8f66\u7ad9\u7684\u53ef\u7528\u81ea\u884c\u8f66\u6570\u91cf\u662f\u201c2nd at Townsend\u201d\u7684\u4e24\u500d\u591a\uff1f\u7ed9\u51fa\u8fd9\u4e9b\u8f66\u7ad9\u7684\u540d\u5b57\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * ( SELECT A.bikes_available FROM status A JOIN station B ON A.station_id = B.id WHERE B.name = \"2nd at Townsend\" AND A.time = \"2015-06-02 13:59:02\" ) AND A.time = \"2015-06-02 13:59:02\"", "question": "\u5217\u51fa\u5728\u4e8c\u96f6\u4e00\u4e94\u5e74\u516d\u6708\u4e8c\u65e5\u5341\u4e09\u70b9\u4e94\u5341\u4e5d\u5206\u4e24\u79d2\u7684\u65f6\u5019\u53ef\u7528\u81ea\u884c\u8f66\u6570\u91cf\u6bd4\u201c2nd at Townsend\u201d\u8f66\u7ad9\u7684\u4e24\u500d\u591a\u7684\u8f66\u7ad9\u7684\u540d\u5b57\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * 5 AND A.time = \"2015-06-02 13:59:02\"", "question": "2015\u5e746\u67082\u65e513:59:02\uff0c\u5982\u679c\u201c2nd at Townsend\u201d\u67095\u4e2a\u53ef\u7528\u7684\u81ea\u884c\u8f66\uff0c\u54ea\u4e2a\u8f66\u7ad9\u7684\u53ef\u7528\u81ea\u884c\u8f66\u662f\u201c2nd at Townsend\u201d\u7684\u4e24\u500d\u591a\uff1f\u7ed9\u51fa\u8fd9\u4e9b\u8f66\u7ad9\u7684\u540d\u5b57\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT B.name FROM status A JOIN station B ON A.station_id = B.id WHERE A.bikes_available > 2 * 5 AND A.time = \"2015-06-02 13:59:02\"", "question": "\u5217\u51fa\u5728\u4e8c\u96f6\u4e00\u4e94\u5e74\u516d\u6708\u4e8c\u65e5\u5341\u4e09\u70b9\u4e94\u5341\u4e5d\u5206\u4e24\u79d2\u7684\u65f6\u5019\u53ef\u7528\u81ea\u884c\u8f66\u6570\u91cf\u6bd4\u201c2nd at Townsend\u201d\u8f66\u7ad9\u7684\u4e24\u500d\u591a\u7684\u8f66\u7ad9\u7684\u540d\u5b57\uff0c\u5047\u8bbe\u201c2nd at Townsend\u201d\u8f66\u7ad9\u5f53\u65f6\u6709\u4e94\u8f86\u53ef\u7528\u7684\u81ea\u884c\u8f66\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT end_station_name , MAX ( duration ) AS max_duration , MIN ( duration ) AS min_duration , MAX ( duration ) - MIN ( duration ) AS diff FROM trip GROUP BY end_station_name", "question": "\u5bf9\u4e8e\u6bcf\u4e2a\u8f66\u7ad9\uff0c\u627e\u51fa\u4ee5\u5b83\u4e3a\u7ec8\u70b9\u7ad9\u7684\u884c\u7a0b\u7684\u6700\u5c0f\u6301\u7eed\u65f6\u95f4\u3001\u6700\u957f\u6301\u7eed\u65f6\u95f4\u4ee5\u53ca\u5b83\u4eec\u7684\u5dee\u503c\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT end_station_name , MAX ( duration ) AS max_duration , MIN ( duration ) AS min_duration , MAX ( duration ) - MIN ( duration ) AS diff FROM trip GROUP BY end_station_name", "question": "\u5bf9\u4e8e\u6bcf\u4e2a\u8f66\u7ad9\uff0c\u4ee5\u5b83\u4e3a\u7ec8\u70b9\u7684\u884c\u7a0b\u7684\u6700\u77ed\u548c\u6700\u957f\u6301\u7eed\u65f6\u957f\u5206\u522b\u662f\u591a\u5c11\uff0c\u5b83\u4eec\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code = \"94107\" AND max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather WHERE zip_code = \"94107\" )", "question": "\u90ae\u7f16\u4e3a94107\u7684\u5730\u65b9\u54ea\u5929\u6e29\u5dee\u6700\u5927\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code = \"94107\" AND max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather WHERE zip_code = \"94107\" )", "question": "\u8bf7\u544a\u8bc9\u6211\u54ea\u5929\u90ae\u7f16\u4e3a94107\u7684\u5730\u65b9\u6e29\u5dee\u6700\u5927\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - min_temperature_f AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "2013\u5e74\u4e00\u6218\u505c\u6218\u7eaa\u5ff5\u65e5\uff0c\u54ea\u4e2a\u5730\u65b9\u7684\u5e73\u5747\u80fd\u89c1\u5ea6\u82f1\u91cc\u6570\u6700\u9ad8\uff0c\u7ed9\u51fa\u90a3\u91cc\u7684\u90ae\u7f16\uff0c\u4ee5\u53ca\u90a3\u91cc\u90a3\u5929\u7684\u6e29\u5dee\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - min_temperature_f AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "\u8fd4\u56de\u4e8c\u96f6\u4e00\u4e09\u5e74\u4e00\u6218\u505c\u6218\u7eaa\u5ff5\u65e5\u90a3\u5929\u5e73\u5747\u80fd\u89c1\u5ea6\u82f1\u91cc\u6570\u6700\u8fdc\u7684\u5730\u65b9\u7684\u90ae\u7f16\uff0c\u4ee5\u53ca\u5b83\u5f53\u5929\u7684\u6e29\u5dee\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - 52 AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "2013\u5e74\u4e00\u6218\u505c\u6218\u7eaa\u5ff5\u65e5\uff0c\u54ea\u4e2a\u5730\u65b9\u7684\u5e73\u5747\u80fd\u89c1\u5ea6\u82f1\u91cc\u6570\u6700\u9ad8\uff1f\u7ed9\u51fa\u90a3\u91cc\u7684\u90ae\u7f16\u3002\u5982\u679c\u90a3\u91cc\u6700\u4f4e\u6e29\u5ea6\u662f52\u534e\u6c0f\u5ea6\uff0c\u90a3\u5929\u7684\u6e29\u5dee\u662f\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT zip_code , tem_diff FROM ( SELECT zip_code , MAX ( mean_visibility_miles ) , max_temperature_f - 52 AS tem_diff FROM weather WHERE date = \"11/11/2013\" )", "question": "\u8fd4\u56de\u4e8c\u96f6\u4e00\u4e09\u5e74\u4e00\u6218\u505c\u6218\u7eaa\u5ff5\u65e5\u90a3\u5929\u5e73\u5747\u80fd\u89c1\u5ea6\u82f1\u91cc\u6570\u6700\u8fdc\u7684\u5730\u65b9\u7684\u90ae\u7f16\u4ee5\u53ca\u5b83\u5f53\u5929\u7684\u6e29\u5dee\uff0c\u5047\u5982\u5b83\u5f53\u5929\u7684\u6700\u4f4e\u6e29\u5ea6\u662f52\u534e\u6c0f\u5ea6\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Armistice Day is commemorated on 11th November every year."}, {"db_id": "bike_1", "query": "SELECT date , 1.0 * ( MAX ( mean_temperature_f ) - 32 ) * 5 / 9 AS celsius FROM weather WHERE zip_code = \"94107\"", "question": "\u90ae\u7f16\u4e3a94107\u7684\u5730\u65b9\u54ea\u5929\u5e73\u5747\u6e29\u5ea6\u6700\u9ad8\uff1f\u5217\u51fa\u65e5\u671f\u548c\u5e73\u5747\u6444\u6c0f\u6e29\u5ea6\u3002", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "bike_1", "query": "SELECT date , 1.0 * ( MAX ( mean_temperature_f ) - 32 ) * 5 / 9 AS celsius FROM weather WHERE zip_code = \"94107\"", "question": "\u8fd4\u56de\u90ae\u7f16\u4e3a94107\u7684\u5730\u65b9\u5e73\u5747\u6e29\u5ea6\u6700\u9ad8\u7684\u90a3\u5929\u7684\u65e5\u671f\u548c\u5e73\u5747\u6444\u6c0f\u6e29\u5ea6\u3002", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "\u5404\u4e2a\u5730\u65b9\u7684\u90ae\u7f16\u662f\u591a\u5c11\uff1f\u5b83\u4eec2014\u5e741\u67081\u65e5\u5e73\u5747\u98ce\u901f\u5206\u522b\u662f\u591a\u5c11\u5343\u7c73\u6bcf\u5c0f\u65f6\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "\u4ee5\u5355\u4f4d\u5343\u7c73\u6bcf\u5c0f\u65f6\u8fd4\u56de\u4e8c\u96f6\u4e00\u56db\u5e74\u5404\u4e2a\u5730\u65b9\u7684\u5e73\u5747\u98ce\u901f\uff0c\u540c\u65f6\u7ed9\u51fa\u5404\u5730\u7684\u90ae\u7f16\u3002", "reasoning_type": "* C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * ( 1 + 0.2 ) * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "2014\u5e741\u67081\u65e5\u8fd9\u5929\u5404\u4e2a\u5730\u65b9\u7684\u5e73\u5747\u98ce\u901f\u662f\u591a\u5c11\u5343\u7c73\u6bcf\u5c0f\u65f6\uff0c\u5982\u679c\u5f53\u5929\u7684\u5e73\u5747\u98ce\u901f\u589e\u52a0\u4e8620%\uff1f\u540c\u65f6\u7ed9\u51fa\u5bf9\u5e94\u7684\u90ae\u7f16\u3002", "reasoning_type": "+ * C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT zip_code , mean_wind_speed_mph * ( 1 + 0.2 ) * 1.609344 AS km_per_h FROM weather WHERE date = \"1/1/2014\"", "question": "\u7ed9\u51fa\u5404\u4e2a\u5730\u65b9\u7684\u90ae\u7f16\uff0c\u5e76\u4ee5\u5355\u4f4d\u5343\u7c73\u6bcf\u5c0f\u65f6\u8fd4\u56de\u4e8c\u96f6\u4e00\u56db\u5e74\u5404\u4e2a\u5730\u65b9\u7684\u5e73\u5747\u98ce\u901f\uff0c\u5047\u5982\u5f53\u5929\u5404\u5730\u7684\u5e73\u5747\u98ce\u901f\u589e\u52a020%\u3002", "reasoning_type": "+ * C", "commonsense_knowledge": "1 miles per hour (mph) is equal to 1.609344 kilometres per hour (km/h)."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "\u90ae\u7f16\u5730\u5740\u4e3a94041\u7684\u5730\u65b92014\u5e7411\u670812\u65e5\u548c2014\u5e743\u670812\u65e5\u8fd9\u4e24\u5929\u7684\u964d\u6c34\u91cf\u5206\u522b\u662f\u591a\u5c11\u6beb\u7c73\uff0c\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "* - C", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "\u4ee5\u5355\u4f4d\u6beb\u7c73\u7ed9\u51fa\u90ae\u7f16\u5730\u5740\u4e3a94041\u7684\u5730\u65b9\u4e8c\u96f6\u4e00\u56db\u5e74\u5341\u4e00\u6708\u5341\u4e8c\u65e5\u548c\u4e09\u6708\u5341\u4e8c\u65e5\u8fd9\u4e24\u5929\u7684\u964d\u6c34\u91cf\u53ca\u5dee\u503c\u3002", "reasoning_type": "* - C", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "\u5982\u679c\u90ae\u7f16\u5730\u5740\u4e3a94041\u7684\u5730\u65b92014\u5e7411\u670812\u65e5\u548c2014\u5e743\u670812\u65e5\u90a3\u4e24\u5929\u7684\u964d\u6c34\u91cf\u51cf\u5c11\u4e8615%\uff0c\u90a3\u4e24\u5929\u7684\u964d\u6c34\u91cf\u5206\u522b\u662f\u591a\u5c11\u6beb\u7c73\uff0c\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "- * C H", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT mm_1 , mm_2 , ABS ( mm_1 - mm_2 ) AS diff FROM ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_1 FROM weather WHERE zip_code = \"94041\" AND date = \"12/11/2014\" ) JOIN ( SELECT precipitation_inches * ( 1 - 0.15 ) * 25 AS mm_2 FROM weather WHERE zip_code = \"94041\" AND date = \"12/3/2014\" )", "question": "\u5047\u8bbe\u90ae\u7f16\u5730\u5740\u4e3a94041\u7684\u5730\u65b9\u4e8c\u96f6\u4e00\u56db\u5e74\u5341\u4e00\u6708\u5341\u4e8c\u65e5\u548c\u4e09\u6708\u5341\u4e8c\u65e5\u8fd9\u4e24\u5929\u7684\u964d\u6c34\u91cf\u51cf\u5c1115%\uff0c\u4ee5\u5355\u4f4d\u6beb\u7c73\u7ed9\u51fa\u5f53\u5730\u8fd9\u4e24\u5929\u7684\u964d\u6c34\u91cf\u53ca\u5dee\u503c\u3002", "reasoning_type": "- * C H", "commonsense_knowledge": "25 mm equals one inch."}, {"db_id": "bike_1", "query": "SELECT zip_code , max_visibility_miles * 1609.344 AS max_m , mean_visibility_miles * 1609.344 AS mean_m , min_visibility_miles * 1609.344 AS min_m FROM weather WHERE date = \"8/30/2013\"", "question": "2013\u5e74\u56fd\u6c11\u60b2\u75db\u610f\u8bc6\u65e5\u8fd9\u5929\uff0c\u5404\u4e2a\u5730\u65b9\u7684\u6700\u9ad8\u80fd\u89c1\u5ea6\u3001\u5e73\u5747\u80fd\u89c1\u5ea6\u3001\u6700\u4f4e\u80fd\u89c1\u5ea6\u662f\u591a\u5c11\u7c73\uff1f\u540c\u65f6\u7ed9\u51fa\u5bf9\u5e94\u7684\u90ae\u7f16\u3002", "reasoning_type": "* C", "commonsense_knowledge": "1 mile is equal to 1,609.344 meters. National Grief Awareness Day takes place on August 30th every year"}, {"db_id": "bike_1", "query": "SELECT zip_code , max_visibility_miles * 1609.344 AS max_m , mean_visibility_miles * 1609.344 AS mean_m , min_visibility_miles * 1609.344 AS min_m FROM weather WHERE date = \"8/30/2013\"", "question": "\u4ee5\u7c73\u4e3a\u5355\u4f4d\u5217\u51fa\u4e8c\u96f6\u4e00\u4e09\u5e74\u56fd\u6c11\u60b2\u75db\u610f\u8bc6\u65e5\u8fd9\u5929\u5404\u4e2a\u5730\u65b9\u7684\u90ae\u7f16\u3001\u6700\u9ad8\u80fd\u89c1\u5ea6\u3001\u5e73\u5747\u80fd\u89c1\u5ea6\u548c\u6700\u4f4e\u80fd\u89c1\u5ea6\u3002", "reasoning_type": "* C", "commonsense_knowledge": "1 mile is equal to 1,609.344 meters. National Grief Awareness Day takes place on August 30th every year"}, {"db_id": "bike_1", "query": "SELECT MIN ( dock_count ) + 10 AS n_dock FROM station", "question": "\u5982\u679c\u7ed9\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6700\u5c11\u7684\u8f66\u7ad9\u518d\u6dfb10\u4e2a\u81ea\u884c\u8f66\u505c\u9760\u70b9\uff0c\u5b83\u4f1a\u6709\u591a\u5c11\u81ea\u884c\u8f66\u505c\u9760\u70b9\uff1f", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT MIN ( dock_count ) + 10 AS n_dock FROM station", "question": "\u8fd4\u56de\u7ed9\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6700\u5c11\u7684\u8f66\u7ad9\u518d\u6dfb10\u4e2a\u81ea\u884c\u8f66\u505c\u9760\u70b9\u540e\u5b83\u7684\u81ea\u884c\u8f66\u505c\u9760\u70b9\u6570\u91cf\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT COUNT ( * ) + 4 AS n_stations FROM station WHERE city = \"San Jose\"", "question": "\u653f\u5e9c\u8ba1\u5212\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u4eba\u53e3\u6392\u540d\u7b2c\u4e09\u7684\u57ce\u5e02\u4e2d\u518d\u5efa\u7acb\u56db\u4e2a\u8f66\u7ad9\uff0c\u90a3\u91cc\u5c06\u603b\u5171\u6709\u51e0\u4e2a\u8f66\u7ad9\uff1f", "reasoning_type": "+ C", "commonsense_knowledge": "San Jose is the third largest city by population in California."}, {"db_id": "bike_1", "query": "SELECT COUNT ( * ) + 4 AS n_stations FROM station WHERE city = \"San Jose\"", "question": "\u8fd4\u56de\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u4eba\u53e3\u6392\u540d\u7b2c\u4e09\u7684\u57ce\u5e02\u518d\u5efa\u56db\u4e2a\u8f66\u7ad9\u540e\u7684\u8f66\u7ad9\u603b\u6570\u3002", "reasoning_type": "+ C", "commonsense_knowledge": "San Jose is the third largest city by population in California."}, {"db_id": "bike_1", "query": "SELECT zip_code , max_temperature_f , ABS ( max_temperature_f - 136 ) AS diff FROM weather WHERE date = \"10/24/2014\"", "question": "\u7ed9\u51fa\u5404\u5730\u533a\u7684\u90ae\u653f\u7f16\u7801\uff0c\u5e76\u8ba1\u7b972014\u5e7410\u670824\u65e5\uff0c\u5404\u5730\u533a\u7684\u6700\u9ad8\u6e29\u5ea6\u662f\u591a\u5c11\uff1f\u4e0e\u5730\u7403\u4e0a\u6709\u8bb0\u5f55\u4ee5\u6765\u7684\u6700\u9ad8\u6c14\u6e29\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "57.8 \u00b0C (136 \u00b0F) is the hottest temperature ever recorded on Earth."}, {"db_id": "bike_1", "query": "SELECT zip_code , max_temperature_f , ABS ( max_temperature_f - 136 ) AS diff FROM weather WHERE date = \"10/24/2014\"", "question": "\u8fd4\u56de\u4e8c\u96f6\u4e00\u56db\u5e74\u5341\u6708\u4e8c\u5341\u65e5\u5404\u5730\u533a\u7684\u90ae\u653f\u7f16\u7801\uff0c\u6700\u9ad8\u6e29\u5ea6\uff0c\u53ca\u4e0e\u5730\u7403\u4e0a\u6709\u8bb0\u5f55\u4ee5\u6765\u7684\u6700\u9ad8\u6c14\u6e29\u7684\u5dee\u503c\u3002", "reasoning_type": "- C", "commonsense_knowledge": "57.8 \u00b0C (136 \u00b0F) is the hottest temperature ever recorded on Earth."}, {"db_id": "bike_1", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM station WHERE city = \"San Francisco\" ) AS propotion FROM station WHERE city = \"San Francisco\" AND dock_count > 25", "question": "\u65e7\u91d1\u5c71\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u8f66\u7ad9\u6709\u8d85\u8fc725\u4e2a\u81ea\u884c\u8f66\u505c\u9760\u70b9\uff1f", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM station WHERE city = \"San Francisco\" ) AS propotion FROM station WHERE city = \"San Francisco\" AND dock_count > 25", "question": "\u65e7\u91d1\u5c71\u7684\u8f66\u7ad9\u4e2d\u6709\u8d85\u8fc725\u4e2a\u81ea\u884c\u8f66\u505c\u9760\u70b9\u7684\u8f66\u7ad9\u5360\u767e\u5206\u4e4b\u51e0\uff1f", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * MAX ( n_station ) / MIN ( n_station ) AS times FROM ( SELECT city , COUNT ( * ) AS n_station FROM station GROUP BY city )", "question": "\u62e5\u6709\u6700\u591a\u8f66\u7ad9\u7684\u57ce\u5e02\u7684\u8f66\u7ad9\u6570\u91cf\u662f\u62e5\u6709\u6700\u5c11\u8f66\u7ad9\u7684\u57ce\u5e02\u7684\u8f66\u7ad9\u6570\u91cf\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * MAX ( n_station ) / MIN ( n_station ) AS times FROM ( SELECT city , COUNT ( * ) AS n_station FROM station GROUP BY city )", "question": "\u8bf7\u544a\u8bc9\u6211\u62e5\u6709\u6700\u591a\u8f66\u7ad9\u7684\u57ce\u5e02\u7684\u8f66\u7ad9\u6570\u91cf\u662f\u8f66\u7ad9\u6570\u91cf\u6700\u5c11\u7684\u57ce\u5e02\u7684\u51e0\u500d\u3002", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * max_temperature_f / min_temperature_f AS times FROM weather WHERE max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather )", "question": "\u6e29\u5dee\u6700\u5927\u7684\u65f6\u5019\u6700\u9ad8\u6e29\u5ea6\u662f\u6700\u4f4e\u6e29\u5ea6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT 1.0 * max_temperature_f / min_temperature_f AS times FROM weather WHERE max_temperature_f - min_temperature_f = ( SELECT MAX ( max_temperature_f - min_temperature_f ) FROM weather )", "question": "\u8fd4\u56de\u6e29\u5ea6\u53d8\u5316\u6700\u5927\u65f6\u6700\u9ad8\u6e29\u5ea6\u662f\u6700\u4f4e\u6e29\u5ea6\u7684\u51e0\u500d\u3002", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "bike_1", "query": "SELECT ( AVG ( max_temperature_f ) - 32 ) * 5 / 9 AS avg_max_celsius , ( ( AVG ( max_temperature_f ) - AVG ( min_temperature_f ) ) ) * 5 / 9 AS diff_celsius FROM weather WHERE zip_code = \"94063\"", "question": "\u90ae\u7f16\u4e3a94063\u7684\u5730\u65b9\u5e73\u5747\u6700\u9ad8\u6c14\u6e29\u662f\u591a\u5c11\u6444\u6c0f\u5ea6\uff0c\u6bd4\u5e73\u5747\u6700\u4f4e\u6c14\u6e29\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "bike_1", "query": "SELECT ( AVG ( max_temperature_f ) - 32 ) * 5 / 9 AS avg_max_celsius , ( ( AVG ( max_temperature_f ) - AVG ( min_temperature_f ) ) ) * 5 / 9 AS diff_celsius FROM weather WHERE zip_code = \"94063\"", "question": "\u4ee5\u6444\u6c0f\u5ea6\u4e3a\u5355\u4f4d\u8fd4\u56de\u90ae\u7f16\u4e3a94063\u7684\u5730\u65b9\u7684\u5e73\u5747\u6700\u9ad8\u6c14\u6e29\u3002\u5b83\u6bd4\u5f53\u5730\u7684\u5e73\u5747\u6700\u4f4e\u6c14\u6e29\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "/ * - C", "commonsense_knowledge": "To convert Fahrenheit to celsius, the formula used is \u00b0C = 5/9(\u00b0F \u2013 32)."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "\u65af\u7279\u6797\u81f3\u4eca\u82b1\u4e86\u591a\u5c11\u94b1\u4e86\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u65af\u7279\u6797\u5df2\u7ecf\u82b1\u8d39\u4e86\u591a\u5c11\u94b1\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( cost ) FROM ( SELECT SUM ( C.order_quantity * 600 ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name = \"gucci\" UNION SELECT SUM ( C.order_quantity * D.product_price ) AS ost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name != \"gucci\" )", "question": "\u5047\u5982\u6240\u6709\u53e4\u7426\u4ea7\u54c1\u7684\u5355\u4ef7\u90fd\u662f600\uff0c\u65af\u7279\u6797\u81f3\u4eca\u82b1\u4e86\u591a\u5c11\u94b1\u4e86\uff1f", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( cost ) FROM ( SELECT SUM ( C.order_quantity * 600 ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name = \"gucci\" UNION SELECT SUM ( C.order_quantity * D.product_price ) AS ost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name != \"gucci\" )", "question": "\u5047\u5982\u6240\u6709\u53e4\u7426\u4ea7\u54c1\u901a\u901a600\u4e00\u4ef6\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u65af\u7279\u6797\u5df2\u7ecf\u82b1\u8d39\u4e86\u591a\u5c11\u94b1\uff1f", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 - 1.0 * 20 / 100 ) ) AS cost_after_discount FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "\u65af\u7279\u6797\u662f\u4f1a\u5458\uff0c\u4e70\u6240\u6709\u4ea7\u54c1\u90fd\u6709\u516b\u6298\u4f18\u60e0\uff0c\u4ed6\u81f3\u4eca\u82b1\u4e86\u591a\u5c11\u94b1\u4e86\uff1f", "reasoning_type": "* C - /", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 - 1.0 * 20 / 100 ) ) AS cost_after_discount FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "\u65af\u7279\u6797\u4f5c\u4e3a\u4f1a\u5458\u4e70\u6240\u6709\u4ea7\u54c1\u90fd\u4eab\u6709\u516b\u6298\u4f18\u60e0\uff0c\u8ba1\u7b97\u4e00\u4e0b\u4ed6\u76ee\u524d\u4e3a\u6b62\u7684\u6d88\u8d39\u603b\u91d1\u989d\u3002", "reasoning_type": "* C - /", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 * 20 / 100 ) ) AS svaed_money FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "\u65af\u7279\u6797\u662f\u4f1a\u5458\uff0c\u4e70\u6240\u6709\u4ea7\u54c1\u90fd\u6709\u516b\u6298\u4f18\u60e0\uff0c\u4ed6\u81f3\u4eca\u8282\u7ea6\u4e86\u591a\u5c11\u94b1\u4e86\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 * 20 / 100 ) ) AS svaed_money FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"", "question": "\u65af\u7279\u6797\u4f5c\u4e3a\u4f1a\u5458\u4e70\u6240\u6709\u4ea7\u54c1\u90fd\u4eab\u6709\u516b\u6298\u4f18\u60e0\uff0c\u8ba1\u7b97\u4e00\u4e0b\u4ed6\u76ee\u524d\u4e3a\u6b62\u7684\u603b\u8282\u7701\u91d1\u989d\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_id , A.customer_name , A.customer_address , A.customer_phone , A.customer_email , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id GROUP BY A.customer_name ORDER BY cost DESC", "question": "\u6309\u7167\u7528\u6237\u81f3\u4eca\u7684\u82b1\u8d39\u603b\u989d\u7684\u4ece\u591a\u5230\u5c11\uff0c\u5217\u51fa\u5ba2\u6237id\u3001\u59d3\u540d\u3001\u5730\u5740\u3001\u7535\u8bdd\u3001\u7535\u5b50\u90ae\u4ef6\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_id , A.customer_name , A.customer_address , A.customer_phone , A.customer_email , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id GROUP BY A.customer_name ORDER BY cost DESC", "question": "\u8bf7\u7ed9\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684id\u3001\u59d3\u540d\u3001\u5730\u5740\u3001\u7535\u8bdd\u548c\u7535\u5b50\u90ae\u4ef6\uff0c\u6309\u7167\u4ed6\u4eec\u622a\u6b62\u5f53\u524d\u6d88\u8d39\u91d1\u989d\u7684\u4ece\u9ad8\u5230\u4f4e\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "\u514b\u83b1\u5965\u6700\u65b0\u7684\u8ba2\u5355\u603b\u4ef7\u591a\u5c11\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "\u514b\u83b1\u5965\u5728\u6700\u8fd1\u4e00\u6b21\u8ba2\u5355\u4e2d\u603b\u5171\u82b1\u8d39\u4e86\u591a\u5c11\u94b1\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( 5.0 * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "\u514b\u83b1\u5965\u6700\u65b0\u7684\u8ba2\u5355\u603b\u4ef7\u591a\u5c11\uff0c\u5047\u5982\u4ed6\u6bcf\u4e2a\u4ea7\u54c1\u90fd\u4e70\u4e865\u4e2a\uff1f", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT cost FROM ( SELECT B.order_date , SUM ( 5.0 * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1", "question": "\u514b\u83b1\u5965\u5728\u6700\u8fd1\u4e00\u6b21\u8ba2\u5355\u4e2d\u603b\u5171\u82b1\u8d39\u4e86\u591a\u5c11\u94b1\uff0c\u5047\u8bbe\u4ed6\u6bcf\u4e2a\u4ea7\u54c1\u7684\u8d2d\u4e70\u6570\u91cf\u90fd\u4e3a\u4e94\uff1f", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "\u82f9\u679c\u4ea7\u54c1\u7684\u6210\u672c\u662f\u51fa\u552e\u4ef7\u683c\u768440%\uff0c\u53e4\u7426\u4ea7\u54c1\u7684\u6210\u672c\u662f\u51fa\u552e\u4ef7\u683c\u768420%\uff0c\u5176\u4ed6\u4ea7\u54c1\u7684\u6210\u672c\u662f\u51fa\u552e\u4ef7\u683c\u768450%\u3002\u8bf7\u5217\u51fa\u5404\u4e2a\u4ea7\u54c1\u7684ID\u3001\u540d\u5b57\u3001\u9500\u552e\u91cf\u3001\u9500\u552e\u989d\u3001\u6bdb\u5229\u6da6\u603b\u989d\u3002", "reasoning_type": "- * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "\u8bf7\u63d0\u4f9b\u5404\u4e2a\u4ea7\u54c1\u7684ID\u3001\u540d\u79f0\u3001\u9500\u552e\u91cf\u3001\u9500\u552e\u989d\u548c\u603b\u6bdb\u5229\u6da6\u91d1\u989d\u3002\u5176\u4e2d\uff0c\u82f9\u679c\u4ea7\u54c1\u7684\u6210\u672c\u662f\u9500\u552e\u4ef7\u683c\u768440%\uff0c\u53e4\u7426\u4ea7\u54c1\u7684\u6210\u672c\u662f\u9500\u552e\u4ef7\u683c\u768420%\uff0c\u5176\u4ed6\u4ea7\u54c1\u7684\u6210\u672c\u662f\u9500\u552e\u4ef7\u683c\u768450%\u3002", "reasoning_type": "- * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) AS revenue , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "\u82f9\u679c\u4ea7\u54c1\u7684\u6210\u672c\u662f\u51fa\u552e\u4ef7\u683c\u768440%\uff0c\u53e4\u7426\u4ea7\u54c1\u7684\u6210\u672c\u662f\u51fa\u552e\u4ef7\u683c\u768420%\uff0c\u5176\u4ed6\u4ea7\u54c1\u7684\u6210\u672c\u662f\u51fa\u552e\u4ef7\u683c\u768450%\u3002\u5047\u5982\u6240\u6709\u82f9\u679c\u4ea7\u54c1\u964d\u4ef7\u4e8615%\u4e86\uff0c\u8bf7\u5217\u51fa\u5404\u4e2a\u4ea7\u54c1\u7684ID\u3001\u540d\u5b57\u3001\u9500\u552e\u91cf\u3001\u9500\u552e\u989d\u3001\u6bdb\u5229\u6da6\u603b\u989d\u3002", "reasoning_type": "- * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) AS revenue , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id", "question": "\u5047\u8bbe\u82f9\u679c\u4ea7\u54c1\u7684\u4ef7\u683c\u901a\u901a\u51cf\u5c1115%\uff0c\u8bf7\u63d0\u4f9b\u5404\u4e2a\u4ea7\u54c1\u7684ID\u3001\u540d\u79f0\u3001\u9500\u552e\u91cf\u3001\u9500\u552e\u989d\u548c\u603b\u6bdb\u5229\u6da6\u91d1\u989d\u3002\u5176\u4e2d\uff0c\u82f9\u679c\u4ea7\u54c1\u7684\u6210\u672c\u662f\u9500\u552e\u4ef7\u683c\u768440%\uff0c\u53e4\u7426\u4ea7\u54c1\u7684\u6210\u672c\u662f\u9500\u552e\u4ef7\u683c\u768420%\uff0c\u5176\u4ed6\u4ea7\u54c1\u7684\u6210\u672c\u662f\u9500\u552e\u4ef7\u683c\u768450%\u3002", "reasoning_type": "- * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity. Gross profit is calculated by substracting costs of goods from revenue."}, {"db_id": "customers_and_products_contacts", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE order_status_code = \"Completed\"", "question": "\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u8ba2\u5355\u5df2\u7ecf\u5df2\u5b8c\u6210\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE order_status_code = \"Completed\"", "question": "\u8ba1\u7b97\u4e00\u4e0b\u5904\u4e8e\u5df2\u5b8c\u6210\u72b6\u6001\u7684\u8ba2\u5355\u5360\u6240\u6709\u8ba2\u5355\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT 100 - 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE strftime ( \"%Y\" , order_date ) >= \"2000\" AND order_status_code != \"Completed\"", "question": "\u5047\u59822000\u5e74\u4ee5\u524d\u7684\u8ba2\u5355\u90fd\u5b8c\u6210\u4e86\uff0c\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u8ba2\u5355\u5df2\u7ecf\u5df2\u5b8c\u6210\uff1f", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT 100 - 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE strftime ( \"%Y\" , order_date ) >= \"2000\" AND order_status_code != \"Completed\"", "question": "\u5047\u59822000\u5e74\u524d\u7684\u8ba2\u5355\u90fd\u5904\u4e8e\u5df2\u5b8c\u6210\u72b6\u6001\uff0c\u8ba1\u7b97\u4e00\u4e0b\u5904\u4e8e\u5df2\u5b8c\u6210\u72b6\u6001\u7684\u8ba2\u5355\u5360\u6240\u6709\u8ba2\u5355\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "\u6709\u591a\u4e2a\u8054\u7cfb\u65b9\u5f0f\u7684\u7528\u6237\u7684\u59d3\u540d\u548c\u7b2c\u4e00\u4e2a\u8ba2\u5355\u7684\u91d1\u989d\u662f\u591a\u5c11\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "\u5217\u51fa\u6709\u591a\u4e2a\u8054\u7cfb\u65b9\u5f0f\u7684\u7528\u6237\u7684\u59d3\u540d\uff0c\u4ee5\u53ca\u4ed6\u7684\u9996\u5355\u6d88\u8d39\u989d\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT customer_id , order_id , order_date , SUM ( price ) AS price FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * 888.0 ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name = \"Apple\" AND strftime ( \"%Y\" , B.order_date ) < \"2000\" GROUP BY B.customer_id , B.order_id UNION SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name != \"Apple\" OR strftime ( \"%Y\" , B.order_date ) >= \"2000\" GROUP BY B.customer_id , B.order_id ) GROUP BY customer_id , order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "\u5047\u59822000\u5e74\u524d\u6240\u6709\u82f9\u679c\u4ea7\u54c1\u7684\u5355\u4ef7\u90fd\u662f888\uff0c\u6709\u591a\u4e2a\u8054\u7cfb\u65b9\u5f0f\u7684\u7528\u6237\u7b2c\u4e00\u4e2a\u8ba2\u5355\u7684\u91d1\u989d\u662f\u591a\u5c11\uff1f", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT customer_id , order_id , order_date , SUM ( price ) AS price FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * 888.0 ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name = \"Apple\" AND strftime ( \"%Y\" , B.order_date ) < \"2000\" GROUP BY B.customer_id , B.order_id UNION SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name != \"Apple\" OR strftime ( \"%Y\" , B.order_date ) >= \"2000\" GROUP BY B.customer_id , B.order_id ) GROUP BY customer_id , order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )", "question": "\u5047\u5982\u6240\u6709\u82f9\u679c\u4ea7\u54c1\u57282000\u5e74\u4ee5\u524d\u7684\u4ef7\u683c\u5747\u4e3a888\uff0c\u5217\u51fa\u6709\u591a\u4e2a\u8054\u7cfb\u65b9\u5f0f\u7684\u7528\u6237\u7684\u59d3\u540d\uff0c\u4ee5\u53ca\u4ed6\u7684\u9996\u5355\u6d88\u8d39\u989d\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name, zip_postcode FROM (SELECT C.customer_name, B.zip_postcode, MAX (julianday (A.date_to) - julianday (A.date_from)) FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) > 1)", "question": "\u54ea\u4e9b\u7528\u6237\u66fe\u6709\u8fc7\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u5740\uff0c\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u5b83\u4eec\u6bcf\u4e2a\u4eba\u81f3\u4eca\u7528\u5f97\u6700\u4e45\u7684\u5730\u5740\u7684\u90ae\u7f16\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name, zip_postcode FROM (SELECT C.customer_name, B.zip_postcode, MAX (julianday (A.date_to) - julianday (A.date_from)) FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) > 1)", "question": "\u5217\u51fa\u66fe\u6709\u8fc7\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u5740\u7684\u7528\u6237\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u4ed6\u4eec\u81f3\u4eca\u7528\u5f97\u6700\u4e45\u7684\u90ae\u7f16\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT C.customer_name, B.zip_postcode FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) = 1", "question": "\u54ea\u4e9b\u7528\u6237\u4ece\u672a\u6709\u8fc7\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u5740\uff0c\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u5b83\u4eec\u6bcf\u4e2a\u4eba\u7684\u90ae\u7f16\u5730\u5740\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT C.customer_name, B.zip_postcode FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) = 1", "question": "\u5217\u51fa\u4ece\u672a\u6709\u8fc7\u591a\u4e2a\u4e0d\u540c\u5730\u5740\u7684\u7528\u6237\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u90ae\u7f16\u5730\u5740\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id , customer_name , customer_email , price AS last_order_price FROM ( SELECT M.customer_id , N.customer_name , N.customer_email , M.price , MAX ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING strftime ( \"%Y\" , MAX ( order_date ) ) < \"2000\" ) GROUP BY M.customer_id )", "question": "\u54ea\u4e2a\u7528\u6237\u57282000\u5e74\u4ee5\u540e\u518d\u4e5f\u6ca1\u6709\u4e0b\u8fc7\u8ba2\u5355\uff0c\u5217\u51fa\u4ed6\u7684id\u3001\u540d\u5b57\u3001\u90ae\u4ef6\u4ee5\u53ca\u6700\u540e\u4e00\u7b14\u8ba2\u5355\u7684\u91d1\u989d\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id , customer_name , customer_email , price AS last_order_price FROM ( SELECT M.customer_id , N.customer_name , N.customer_email , M.price , MAX ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING strftime ( \"%Y\" , MAX ( order_date ) ) < \"2000\" ) GROUP BY M.customer_id )", "question": "\u5217\u51fa\u57282000\u5e74\u4ee5\u540e\u518d\u4e5f\u6ca1\u6709\u4e70\u8fc7\u4e1c\u897f\u7684\u7528\u6237\u7684id\u3001\u540d\u5b57\u3001\u90ae\u4ef6\u3001\u4ee5\u53ca\u6700\u540e\u4e00\u7b14\u8ba2\u5355\u7684\u7684\u6d88\u8d39\u989d\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id FROM ( SELECT customer_id , COUNT ( * ) * ( 666 + 222 ) AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 2000 GROUP BY customer_id UNION SELECT customer_id , COUNT ( * ) * 222 AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 1000 AND price < 2000 GROUP BY customer_id ) GROUP BY customer_id ORDER BY points DESC LIMIT 1", "question": "\u7528\u6237\u5355\u7b14\u8ba2\u5355\u603b\u4ef7\u8d85\u8fc71000\u53ef\u4ee5\u83b7\u5f97222\u79ef\u5206\uff0c\u8d85\u8fc72000\u53ef\u4ee5\u518d\u83b7\u5f97666\u79ef\u5206\u3002\u54ea\u4e2a\u7528\u6237\u76ee\u524d\u83b7\u5f97\u7684\u603b\u79ef\u5206\u6700\u591a\uff1f\u7ed9\u51fa\u4ed6\u7684ID\u3002", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT customer_id FROM ( SELECT customer_id , COUNT ( * ) * ( 666 + 222 ) AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 2000 GROUP BY customer_id UNION SELECT customer_id , COUNT ( * ) * 222 AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 1000 AND price < 2000 GROUP BY customer_id ) GROUP BY customer_id ORDER BY points DESC LIMIT 1", "question": "\u7528\u6237\u53ef\u4ee5\u5728\u5355\u7b14\u8ba2\u5355\u603b\u4ef7\u8d85\u8fc71000\u65f6\u83b7\u5f97222\u79ef\u5206\uff0c\u5728\u8d85\u8fc72000\u65f6\u518d\u83b7\u5f97666\u79ef\u5206\u3002\u8bf7\u544a\u8bc9\u6211\u76ee\u524d\u603b\u79ef\u5206\u6700\u9ad8\u7684\u7528\u6237\u7684ID\u3002", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "\u8863\u670d\u7684\u5e73\u5747\u5355\u4ef7\u6bd4\u786c\u4ef6\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "\u8863\u670d\u7684\u5e73\u5747\u5355\u4ef7\u4e0e\u786c\u4ef6\u7684\u5e73\u5747\u5355\u4ef7\u76f8\u6bd4\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT ( 1 + 20.0 / 100 ) * clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "\u5982\u679c\u8863\u670d\u6da8\u4ef720%\uff0c\u8863\u670d\u7684\u5e73\u5747\u5355\u4ef7\u6bd4\u786c\u4ef6\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "+ * - / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT ( 1 + 20.0 / 100 ) * clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )", "question": "\u5982\u679c\u6240\u6709\u8863\u670d\u7684\u4ef7\u683c\u4e0a\u534720%\uff0c\u8863\u670d\u7684\u5e73\u5747\u5355\u4ef7\u4e0e\u786c\u4ef6\u7684\u5e73\u5747\u5355\u4ef7\u76f8\u6bd4\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "+ * - / H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT n_total , 1.0 * n_female / n_total AS female_ratio FROM ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_female FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Contacts C ON A.customer_id = C.customer_id WHERE B.state_province_county = \"Kentucky\" AND C.gender = \"female\" ) JOIN ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_total FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id WHERE B.state_province_county = \"Kentucky\" )", "question": "\u66fe\u4f7f\u7528\u8fc7\u9996\u5e9c\u4e3a\u6cd5\u5170\u514b\u798f\u7684\u5dde\u7684\u5730\u5740\u7684\u7528\u6237\u6709\u591a\u5c11\uff0c\u4ed6\u4eec\u4e2d\u5973\u6027\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Frankfort is the capital city of Kentucky state."}, {"db_id": "customers_and_products_contacts", "query": "SELECT n_total , 1.0 * n_female / n_total AS female_ratio FROM ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_female FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Contacts C ON A.customer_id = C.customer_id WHERE B.state_province_county = \"Kentucky\" AND C.gender = \"female\" ) JOIN ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_total FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id WHERE B.state_province_county = \"Kentucky\" )", "question": "\u6709\u591a\u5c11\u5ba2\u6237\u7684\u66fe\u7528\u5730\u5740\u4f4d\u4e8e\u9996\u5e9c\u4e3a\u6cd5\u5170\u514b\u798f\u7684\u5dde\uff0c\u4ed6\u4eec\u4e2d\u5973\u6027\u5360\u6bd4\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Frankfort is the capital city of Kentucky state."}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) AS max_quantity , t2.diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "\u7ed9\u51fa\u9500\u552e\u91cf\u6700\u9ad8\u7684\u4ea7\u54c1\u7684ID\uff0c\u540d\u5b57\uff0c\u9500\u91cf\uff0c\u4ee5\u53ca\u7ed9\u51fa\u5176\u6bd4\u9500\u552e\u91cf\u6700\u4f4e\u7684\u4ea7\u54c1\u7684\u9500\u552e\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) AS max_quantity , t2.diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "\u9500\u91cf\u7b2c\u4e00\u7684\u4ea7\u54c1\u7684ID\u548c\u540d\u5b57\u662f\u4ec0\u4e48\uff1f\u5b83\u7684\u9500\u91cf\u662f\u591a\u5c11\uff0c\u6bd4\u9500\u91cf\u5012\u6570\u7b2c\u4e00\u7684\u4ea7\u54c1\u9500\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) + 500 AS max_quantity , t2.diff + 500 FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "\u7ed9\u51fa\u9500\u552e\u91cf\u6700\u9ad8\u7684\u4ea7\u54c1\u7684ID\uff0c\u540d\u5b57\u3002\u5047\u5982\u5b83\u7684\u9500\u552e\u91cf\u53c8\u589e\u52a0\u4e86500\uff0c\u5b83\u7684\u9500\u552e\u91cf\u53d8\u6210\u4e86\u591a\u5c11\uff0c\u5176\u6bd4\u9500\u552e\u91cf\u6700\u4f4e\u7684\u4ea7\u54c1\u7684\u9500\u552e\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) + 500 AS max_quantity , t2.diff + 500 FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2", "question": "\u9500\u91cf\u7b2c\u4e00\u7684\u4ea7\u54c1\u7684ID\u548c\u540d\u5b57\u662f\u4ec0\u4e48\uff1f\u5047\u8bbe\u5b83\u7684\u9500\u91cf\u589e\u52a0500\uff0c\u5b83\u7684\u9500\u91cf\u662f\u591a\u5c11\uff0c\u6bd4\u9500\u91cf\u5012\u6570\u7b2c\u4e00\u7684\u4ea7\u54c1\u9500\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * D.product_price ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * D.product_price AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "\u4f7f\u7528\u4fe1\u7528\u5361\u4ed8\u6b3e\u9700\u8981\u4ea4\u652f\u4ed8\u91d1\u989d5%\u7684\u624b\u7eed\u8d39\u3002\u5217\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684\u59d3\u540d\uff0c\u5176\u6bcf\u7b14\u8ba2\u5355\u7684id\uff0c\u4ee5\u53ca\u6bcf\u7b14\u8ba2\u5355\u5171\u82b1\u4e86\u591a\u5c11\u94b1\u3002", "reasoning_type": "+ * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * D.product_price ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * D.product_price AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "\u8bf7\u5217\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684\u59d3\u540d\uff0c\u53ca\u5176\u6bcf\u7b14\u8ba2\u5355\u7684id\u548c\u603b\u82b1\u8d39\uff0c\u5176\u4e2d\u4f7f\u7528\u4fe1\u7528\u5361\u4ed8\u6b3e\u7684\u9700\u8981\u989d\u5916\u652f\u4ed8\u91d1\u989d\u76845%\u4f5c\u4e3a\u624b\u7eed\u8d39\u3002", "reasoning_type": "+ * / C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * 99 ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * 99 AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "\u4f7f\u7528\u4fe1\u7528\u5361\u4ed8\u6b3e\u9700\u8981\u4ea4\u652f\u4ed8\u91d1\u989d5%\u7684\u624b\u7eed\u8d39\u3002\u5047\u5982\u6bcf\u4e2a\u4ea7\u54c1\u7684\u5355\u4ef7\u90fd\u662f99\uff0c\u5217\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684\u59d3\u540d\uff0c\u5176\u6bcf\u7b14\u8ba2\u5355\u7684id\uff0c\u4ee5\u53ca\u6bcf\u7b14\u8ba2\u5355\u5171\u82b1\u4e86\u591a\u5c11\u94b1\u3002", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT A.customer_name , B.order_id , ( C.order_quantity * 99 ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * 99 AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id", "question": "\u5047\u5982\u6240\u6709\u4ea7\u54c1\u901a\u901a99\u4e00\u4e2a\uff0c\u8bf7\u5217\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684\u59d3\u540d\uff0c\u53ca\u5176\u6bcf\u7b14\u8ba2\u5355\u7684id\u548c\u603b\u82b1\u8d39\uff0c\u5176\u4e2d\u4f7f\u7528\u4fe1\u7528\u5361\u4ed8\u6b3e\u7684\u9700\u8981\u989d\u5916\u652f\u4ed8\u91d1\u989d\u76845%\u4f5c\u4e3a\u624b\u7eed\u8d39\u3002", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT strftime ( \"%Y\" , A.order_date ) AS year , SUM ( B.order_quantity * C.product_price ) AS annual_sales_revenue FROM Customer_Orders A JOIN Order_Items B ON A.order_id = B.order_id JOIN Products C ON B.product_id = C.product_id GROUP BY strftime ( \"%Y\" , A.order_date )", "question": "\u5217\u51fa\u5e74\u4efd\u548c\u5bf9\u5e94\u7684\u5e74\u9500\u552e\u989d\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT strftime ( \"%Y\" , A.order_date ) AS year , SUM ( B.order_quantity * C.product_price ) AS annual_sales_revenue FROM Customer_Orders A JOIN Order_Items B ON A.order_id = B.order_id JOIN Products C ON B.product_id = C.product_id GROUP BY strftime ( \"%Y\" , A.order_date )", "question": "\u6709\u8bb0\u5f55\u7684\u5e74\u4efd\u548c\u5bf9\u5e94\u7684\u5e74\u9500\u552e\u989d\u662f\u591a\u5c11\uff1f", "reasoning_type": "* C", "commonsense_knowledge": "Total price is calculated by multiplying unit price to quantity."}, {"db_id": "customers_and_products_contacts", "query": "SELECT max_price , min_price , variance FROM ( SELECT 1.0 * ( product_price - AVG ( product_price ) ) * ( product_price - AVG ( product_price ) ) / COUNT ( * ) AS variance FROM Products WHERE product_name = \"Apple\" ) JOIN ( SELECT MAX ( product_price ) AS max_price , MIN ( product_price ) AS min_price FROM Products WHERE product_name = \"Apple\" )", "question": "\u5217\u51fa\u82f9\u679c\u4ea7\u54c1\u7684\u6700\u9ad8\u4ef7\u3001\u6700\u4f4e\u4ef7\u3001\u65b9\u5dee\u3002", "reasoning_type": "- * / C", "commonsense_knowledge": "The variance is mean squared difference between each data point and the centre of the distribution measured by the mean."}, {"db_id": "customers_and_products_contacts", "query": "SELECT max_price , min_price , variance FROM ( SELECT 1.0 * ( product_price - AVG ( product_price ) ) * ( product_price - AVG ( product_price ) ) / COUNT ( * ) AS variance FROM Products WHERE product_name = \"Apple\" ) JOIN ( SELECT MAX ( product_price ) AS max_price , MIN ( product_price ) AS min_price FROM Products WHERE product_name = \"Apple\" )", "question": "\u82f9\u679c\u4ea7\u54c1\u7684\u6700\u9ad8\u4ef7\u3001\u6700\u4f4e\u4ef7\u3001\u4ef7\u683c\u65b9\u5dee\u662f\u591a\u5c11\uff1f", "reasoning_type": "- * / C", "commonsense_knowledge": "The variance is mean squared difference between each data point and the centre of the distribution measured by the mean."}, {"db_id": "driving_school", "query": "SELECT customer_id , strftime ( \"%Y\" , date_became_customer ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_became_customer ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Customers", "question": "\u5217\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684ID\u548c\u62a5\u540d\u9a7e\u6821\u65f6\u7684\u5e74\u9f84\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT customer_id , strftime ( \"%Y\" , date_became_customer ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_became_customer ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Customers", "question": "\u6bcf\u4e2a\u5ba2\u6237\u7684ID\u662f\u591a\u5c11\uff0c\u4ed6\u4eec\u62a5\u540d\u9a7e\u6821\u65f6\u5019\u5e74\u9f84\u90fd\u591a\u5927\u4e86\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", date_of_birth)) AS age FROM Customers WHERE NOT (first_name = \"Dameon\" AND last_name = \"Sanford\") UNION ALL SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", \"2001-01-01\") - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", \"2001-01-01\")) AS age FROM Customers WHERE first_name = \"Dameon\" AND last_name = \"Sanford\"", "question": "\u5047\u5982\u8fbe\u8499\u00b7\u6851\u798f\u5fb7\u51fa\u751f\u4e8e21\u4e16\u7eaa\u7684\u7b2c\u4e00\u5929\uff0c\u5217\u51fa\u6bcf\u4e2a\u5ba2\u6237\u7684ID\u548c\u62a5\u540d\u9a7e\u6821\u65f6\u7684\u5e74\u9f84\u3002", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date. The 21st century began on 1st January 2001."}, {"db_id": "driving_school", "query": "SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", date_of_birth)) AS age FROM Customers WHERE NOT (first_name = \"Dameon\" AND last_name = \"Sanford\") UNION ALL SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", \"2001-01-01\") - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", \"2001-01-01\")) AS age FROM Customers WHERE first_name = \"Dameon\" AND last_name = \"Sanford\"", "question": "\u5047\u5982\u8fbe\u8499\u00b7\u6851\u798f\u5fb7\u7684\u751f\u65e5\u662f21\u4e16\u7eaa\u7684\u7b2c\u4e00\u5929\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5ba2\u6237\u7684ID\u662f\u591a\u5c11\uff0c\u4ed6\u4eec\u62a5\u540d\u9a7e\u6821\u65f6\u5019\u5e74\u9f84\u90fd\u591a\u5927\u4e86\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date. The 21st century began on 1st January 2001."}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM Customers WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM Customers WHERE amount_outstanding > 2000 )", "question": "\u672a\u507f\u91d1\u989d\u5927\u4e8e2000\u7684\u5ba2\u6237\u4e2d\u6709\u767e\u5206\u4e4b\u591a\u5c11\u5ba2\u6237\u662f\u4f18\u8d28\u5ba2\u6237\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM Customers WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM Customers WHERE amount_outstanding > 2000 )", "question": "\u5217\u51fa\u4f18\u8d28\u5ba2\u6237\u5728\u672a\u507f\u91d1\u989d\u5927\u4e8e2000\u7684\u5ba2\u6237\u4e2d\u6240\u5360\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 )", "question": "\u5047\u5982\u6240\u67092015\u5e74\u62a5\u540d\u7684\u5ba2\u6237\u672a\u507f\u91d1\u989d\u4e3a200\uff0c\u672a\u507f\u91d1\u989d\u5927\u4e8e2000\u7684\u5ba2\u6237\u4e2d\u6709\u767e\u5206\u4e4b\u591a\u5c11\u5ba2\u6237\u662f\u4f18\u8d28\u5ba2\u6237\uff1f", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 )", "question": "\u5982\u679c\u6240\u6709\u57282015\u5e74\u62a5\u540d\u7684\u5ba2\u6237\u7684\u672a\u507f\u91d1\u989d\u90fd\u662f200\uff0c\u5217\u51fa\u4f18\u8d28\u5ba2\u6237\u5728\u672a\u507f\u91d1\u989d\u5927\u4e8e2000\u7684\u5ba2\u6237\u4e2d\u6240\u5360\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM Staff WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "\u5217\u51fa\u5165\u804c\u65f6\u5927\u4e8e20\u5c81\u7684\u6559\u7ec3\u7684ID\u548c\u5b89\u6392\u7684\u8bfe\u7a0b\u6570\u91cf\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM Staff WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "\u54ea\u4e9b\u6559\u7ec3\u5728\u5165\u804c\u65f6\u7684\u5e74\u9f84\u5927\u4e8e20\u5c81\uff0c\u4ed6\u4eec\u7684ID\u548c\u5b89\u6392\u7684\u8bfe\u7a0b\u6570\u91cf\u5206\u522b\u662f\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "\u5047\u59822018\u5e743\u67088\u65e5\u79bb\u804c\u7684\u6559\u7ec3\u90fd\u662f2016\u5e743\u67088\u65e5\u5165\u804c\u7684\uff0c\u5217\u51fa\u5165\u804c\u65f6\u5927\u4e8e20\u5c81\u7684\u6559\u7ec3\u7684ID\u3001\u5b89\u6392\u7684\u8bfe\u7a0b\u6570\u91cf\u3002", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)", "question": "\u5047\u8bbe\u6240\u67092018\u5e743\u67088\u65e5\u79bb\u804c\u7684\u6559\u7ec3\u7684\u5165\u804c\u65e5\u671f\u90fd\u662f2016\u5e743\u67088\u65e5\uff0c\u90a3\u4e48\u54ea\u4e9b\u6559\u7ec3\u5728\u5165\u804c\u65f6\u7684\u5e74\u9f84\u5927\u4e8e20\u5c81\uff0c\u4ed6\u4eec\u7684ID\u548c\u5b89\u6392\u7684\u8bfe\u7a0b\u6570\u91cf\u5206\u522b\u662f\u591a\u5c11\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM Staff ORDER BY julianday ( date_left_staff ) - julianday ( date_joined_staff ) DESC LIMIT 1", "question": "\u54ea\u4e2a\u6559\u7ec3\u5728\u9a7e\u6821\u5de5\u4f5c\u5f97\u6700\u4e45\uff1f\u7ed9\u51fa\u4ed6\u4eec\u7684ID\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM Staff ORDER BY julianday ( date_left_staff ) - julianday ( date_joined_staff ) DESC LIMIT 1", "question": "\u5728\u9a7e\u6821\u5de5\u4f5c\u65f6\u95f4\u6700\u957f\u7684\u6559\u7ec3\u7684ID\u662f\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM (SELECT staff_id, strftime (\"%Y-%m-%d\", julianday (date_of_birth) + 21 * 365.25) AS date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\" UNION ALL SELECT staff_id, date_joined_staff, date_left_staff FROM Staff WHERE NOT (first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\") ) ORDER BY julianday (date_left_staff) - julianday (date_joined_staff) DESC LIMIT 1", "question": "\u5047\u5982\u6797\u80af\u00b7\u672c\u5c3c\u00b7\u5361\u7f57\u5c1421\u5c81\u751f\u65e5\u90a3\u5929\u5165\u804c\u7684\uff0c\u7ed9\u51fa\u5728\u9a7e\u6821\u5de5\u4f5c\u5f97\u6700\u4e45\u7684\u6559\u7ec3\u7684ID\u3002", "reasoning_type": "- + * C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time. Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT staff_id FROM (SELECT staff_id, strftime (\"%Y-%m-%d\", julianday (date_of_birth) + 21 * 365.25) AS date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\" UNION ALL SELECT staff_id, date_joined_staff, date_left_staff FROM Staff WHERE NOT (first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\") ) ORDER BY julianday (date_left_staff) - julianday (date_joined_staff) DESC LIMIT 1", "question": "\u5982\u679c\u6797\u80af\u00b7\u672c\u5c3c\u00b7\u5361\u7f57\u5c14\u7684\u5165\u804c\u65e5\u671f\u662f\u4ed6\u768421\u5c81\u751f\u65e5\u90a3\u5929\uff0c\u5728\u9a7e\u6821\u5de5\u4f5c\u65f6\u95f4\u6700\u957f\u7684\u6559\u7ec3\u7684ID\u662f\u591a\u5c11\uff1f", "reasoning_type": "- + * C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time. Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "\u4e00\u6b21\u8bfe\u90fd\u6ca1\u4e0a\u8fc7\u7684\u5ba2\u6237\u4e2d\u4e0d\u826f\u5ba2\u6237\u6bd4\u4f18\u8d28\u5ba2\u6237\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "\u5217\u51fa\u5728\u4ece\u672a\u4e0a\u8fc7\u8bfe\u7684\u5ba2\u6237\u4e2d\u4e0d\u826f\u5ba2\u6237\u6bd4\u4f18\u8d28\u5ba2\u6237\u591a\u7684\u6570\u91cf\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "\u5047\u59822018\u5e743\u67087\u65e5\u6240\u6709\u8bfe\u90fd\u6ca1\u6709\u88ab\u53d6\u6d88\uff0c\u4e00\u6b21\u8bfe\u90fd\u6ca1\u4e0a\u8fc7\u7684\u5ba2\u6237\u4e2d\u4e0d\u826f\u5ba2\u6237\u6bd4\u4f18\u8d28\u5ba2\u6237\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )", "question": "\u5982\u679c2018\u5e743\u67087\u65e5\u6240\u6709\u8bfe\u90fd\u6ca1\u6709\u88ab\u53d6\u6d88\uff0c\u5217\u51fa\u5728\u4ece\u672a\u4e0a\u8fc7\u8bfe\u7684\u5ba2\u6237\u4e2d\u4e0d\u826f\u5ba2\u6237\u6bd4\u4f18\u8d28\u5ba2\u6237\u591a\u7684\u6570\u91cf\u3002", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "2018\u5e743\u67085\u65e5\u540e\u6ca1\u6709\u8bfe\u7a0b\u5b89\u6392\u7684\u6559\u7ec3\u7684ID\u662f\u591a\u5c11\uff0c\u5176\u4e00\u6b21\u8bfe\u5e73\u5747\u591a\u5c11\u94b1\uff0c\u4ed6\u4eca\u5e74\u591a\u5c11\u5c81\u4e86\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "\u5217\u51fa\u57282018\u5e743\u67085\u65e5\u4e4b\u540e\u6ca1\u6709\u4efb\u4f55\u8bfe\u7a0b\u5b89\u6392\u7684\u6559\u7ec3\u7684ID\uff0c\u5176\u8bfe\u7a0b\u7684\u5e73\u5747\u4ef7\u683c\uff0c\u4ee5\u53ca\u5176\u5e74\u9f84\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM ( SELECT staff_id , ( 1 + 0.08 ) * price AS price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) = \"2018-02\" UNION ALL SELECT staff_id , price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) != \"2018-02\" ) A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "\u5047\u59822018\u5e742\u6708\u6240\u6709\u8bfe\u6da8\u4ef78%\uff0c2018\u5e743\u67085\u65e5\u540e\u6ca1\u6709\u8bfe\u7a0b\u5b89\u6392\u7684\u6559\u7ec3\u7684ID\u662f\u591a\u5c11\uff0c\u5176\u4e00\u6b21\u8bfe\u5e73\u5747\u591a\u5c11\u94b1\uff0c\u8fd9\u4e9b\u6559\u7ec3\u4eca\u5e74\u591a\u5c11\u5c81\uff1f", "reasoning_type": "* + - C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM ( SELECT staff_id , ( 1 + 0.08 ) * price AS price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) = \"2018-02\" UNION ALL SELECT staff_id , price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) != \"2018-02\" ) A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id", "question": "\u5047\u8bbe2018\u5e742\u6708\u6240\u6709\u8bfe\u7a0b\u4ef7\u683c\u4e0a\u8c038%\uff0c\u5217\u51fa\u57282018\u5e743\u67085\u65e5\u4e4b\u540e\u6ca1\u6709\u4efb\u4f55\u8bfe\u7a0b\u5b89\u6392\u7684\u6559\u7ec3\u7684ID\uff0c\u5176\u8bfe\u7a0b\u7684\u5e73\u5747\u4ef7\u683c\uff0c\u4ee5\u53ca\u5176\u5e74\u9f84\u3002", "reasoning_type": "* + - C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) - ( SELECT AVG ( price ) FROM Lessons GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id GROUP BY A.staff_id ORDER BY AVG ( A.price ) DESC LIMIT 1", "question": "\u54ea\u4e2a\u6559\u7ec3\u8bfe\u7a0b\u5747\u4ef7\u6700\u9ad8\uff0c\u7ed9\u51fa\u4ed6\u7684ID\u3002\u5176\u5747\u4ef7\u6bd4\u8bfe\u7a0b\u5747\u4ef7\u6700\u4f4e\u7684\u6559\u7ec3\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.staff_id , AVG ( A.price ) - ( SELECT AVG ( price ) FROM Lessons GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id GROUP BY A.staff_id ORDER BY AVG ( A.price ) DESC LIMIT 1", "question": "\u8bfe\u7a0b\u5e73\u5747\u4ef7\u683c\u6700\u8d35\u7684\u6559\u7ec3\u7684ID\u662f\u591a\u5c11\uff0c\u5176\u5e73\u5747\u4ef7\u683c\u6bd4\u8bfe\u7a0b\u5e73\u5747\u4ef7\u683c\u6700\u4fbf\u5b9c\u7684\u6559\u7ec3\u8d35\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT staff_id , AVG ( price ) - ( SELECT AVG ( price ) FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) DESC LIMIT 1", "question": "\u5047\u5982\u6e29\u5c3c\u5f17\u96f7\u5fb7\u00b7\u5229\u4e9a\u59c6\u00b7\u8d3e\u65af\u7279\u7684\u6240\u6709\u8bfe\u7a0b\u964d\u4ef712%\uff0c\u54ea\u4e2a\u6559\u7ec3\u8bfe\u7a0b\u5747\u4ef7\u6700\u9ad8\uff0c\u7ed9\u51fa\u4ed6\u7684ID\uff0c\u5176\u5747\u4ef7\u6bd4\u8bfe\u7a0b\u5747\u4ef7\u6700\u4f4e\u7684\u6559\u7ec3\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT staff_id , AVG ( price ) - ( SELECT AVG ( price ) FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) DESC LIMIT 1", "question": "\u5047\u8bbe\u6e29\u5c3c\u5f17\u96f7\u5fb7\u00b7\u5229\u4e9a\u59c6\u00b7\u8d3e\u65af\u7279\u7684\u6240\u6709\u8bfe\u7a0b\u4ef7\u683c\u4e0b\u8c0312%\uff0c\u8bfe\u7a0b\u5e73\u5747\u4ef7\u683c\u6700\u8d35\u7684\u6559\u7ec3\u7684ID\u662f\u591a\u5c11\uff0c\u5176\u5e73\u5747\u4ef7\u683c\u6bd4\u8bfe\u7a0b\u5e73\u5747\u4ef7\u683c\u6700\u4fbf\u5b9c\u7684\u6559\u7ec3\u8d35\u591a\u5c11\uff1f", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM Lessons GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u5b66\u5458\u6709\u591a\u4e2a\u6559\u7ec3\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM Lessons GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "\u5217\u51fa\u6559\u7ec3\u6570\u91cf\u5927\u4e8e\u4e00\u4e2a\u7684\u5b66\u5458\u6240\u5360\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM ( SELECT customer_id , ( SELECT staff_id FROM Staff WHERE first_name = \"Winnifred\" AND middle_name = \"Liam\" AND last_name = \"Jast\" ) AS staff_id FROM Lessons WHERE lesson_id = \"12\" UNION ALL SELECT customer_id , staff_id FROM Lessons WHERE lesson_id != \"12\" ) GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "\u5047\u5982ID\u4e3a12\u7684\u8bfe\u7a0b\u7684\u6559\u7ec3\u662f\u5c3c\u5f17\u96f7\u5fb7\u00b7\u5229\u4e9a\u59c6\u00b7\u8d3e\u65af\u7279\uff0c\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u5b66\u5458\u6709\u591a\u4e2a\u6559\u7ec3\uff1f", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM ( SELECT customer_id , ( SELECT staff_id FROM Staff WHERE first_name = \"Winnifred\" AND middle_name = \"Liam\" AND last_name = \"Jast\" ) AS staff_id FROM Lessons WHERE lesson_id = \"12\" UNION ALL SELECT customer_id , staff_id FROM Lessons WHERE lesson_id != \"12\" ) GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )", "question": "\u5982\u679c\u5c3c\u5f17\u96f7\u5fb7\u00b7\u5229\u4e9a\u59c6\u00b7\u8d3e\u65af\u7279\u662fID\u4e3a12\u7684\u8bfe\u7a0b\u7684\u6559\u7ec3\uff0c\u5217\u51fa\u6559\u7ec3\u6570\u91cf\u5927\u4e8e\u4e00\u4e2a\u7684\u5b66\u5458\u6240\u5360\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT strftime ( \"%Y\" , MAX ( date_of_birth ) ) - strftime ( \"%Y\" , MIN ( date_of_birth ) ) - ( strftime ( \"%m-%d\" , MAX ( date_of_birth ) ) < strftime ( \"%m-%d\" , MIN ( date_of_birth ) ) ) AS diff FROM Staff", "question": "\u6700\u8001\u7684\u6559\u7ec3\u6bd4\u6700\u5e74\u8f7b\u7684\u6559\u7ec3\u5927\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT strftime ( \"%Y\" , MAX ( date_of_birth ) ) - strftime ( \"%Y\" , MIN ( date_of_birth ) ) - ( strftime ( \"%m-%d\" , MAX ( date_of_birth ) ) < strftime ( \"%m-%d\" , MIN ( date_of_birth ) ) ) AS diff FROM Staff", "question": "\u5e74\u7eaa\u6700\u5927\u7684\u6559\u7ec3\u6bd4\u5e74\u7eaa\u6700\u5c0f\u7684\u6559\u7ec3\u5e74\u957f\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT MAX ( date_of_birth ) - MIN ( date_of_birth ) AS diff FROM ( SELECT 2020 - ( 2020 - 2009 ) * 2 AS date_of_birth FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" UNION ALL SELECT date_of_birth FROM Staff WHERE NOT ( first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" ) ) ORDER BY date_of_birth DESC", "question": "\u5047\u59822020\u5e74\u7684\u65f6\u5019\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u7684\u5e74\u9f84\u662f2009\u5e74\u51fa\u751f\u7684\u4eba\u7684\u4e24\u500d\uff0c\u6700\u8001\u7684\u6559\u7ec3\u6bd4\u6700\u5e74\u8f7b\u7684\u6559\u7ec3\u5927\u591a\u5c11\u5c81\uff1f", "reasoning_type": "* - C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT MAX ( date_of_birth ) - MIN ( date_of_birth ) AS diff FROM ( SELECT 2020 - ( 2020 - 2009 ) * 2 AS date_of_birth FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" UNION ALL SELECT date_of_birth FROM Staff WHERE NOT ( first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" ) ) ORDER BY date_of_birth DESC", "question": "\u5047\u8bbe2020\u5e74\u7684\u65f6\u5019\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u7684\u5e74\u9f84\u662f\u751f\u4e8e2009\u7684\u4eba\u7684\u5e74\u9f84\u7684\u4e24\u500d\uff0c\u5e74\u7eaa\u6700\u5927\u7684\u6559\u7ec3\u6bd4\u5e74\u7eaa\u6700\u5c0f\u7684\u6559\u7ec3\u5e74\u957f\u591a\u5c11\u5c81\uff1f", "reasoning_type": "* - C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND lesson_status_code = \"Cancelled\" )", "question": "\u79bb\u5f00\u9a7e\u6821\u65f6\u7684\u5e74\u9f84\u6700\u5927\u7684\u6559\u7ec3\u603b\u5171\u6709\u591a\u5c11\u8bfe\u7a0b\u5b89\u6392\uff0c\u5176\u4e2d\u88ab\u53d6\u6d88\u4e86\u7684\u8bfe\u5360\u6bd4\u591a\u5c11\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND lesson_status_code = \"Cancelled\" )", "question": "\u79bb\u5f00\u9a7e\u6821\u65f6\u5019\u7684\u6700\u5e74\u957f\u7684\u6559\u7ec3\u7684\u8bfe\u7a0b\u5b89\u6392\u603b\u91cf\u662f\u591a\u5c11\uff0c\u5176\u4e2d\u591a\u5c11\u6bd4\u4f8b\u7684\u8bfe\u7a0b\u88ab\u53d6\u6d88\u4e86\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_status_code = \"Cancelled\" AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) )", "question": "\u5047\u5982\u6240\u6709\u6559\u7ec3\u5165\u804c\u540e\u768460\u5929\u5185\u90fd\u6ca1\u6709\u8bfe\u7a0b\u5b89\u6392\uff0c\u79bb\u5f00\u9a7e\u6821\u7684\u65f6\u5e74\u9f84\u6700\u5927\u7684\u6559\u7ec3\u603b\u5171\u6709\u591a\u5c11\u8bfe\u7a0b\u5b89\u6392\uff0c\u5176\u4e2d\u88ab\u53d6\u6d88\u4e86\u7684\u8bfe\u5360\u6bd4\u591a\u5c11\uff1f", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_status_code = \"Cancelled\" AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) )", "question": "\u5982\u679c\u6240\u6709\u6559\u7ec3\u5728\u5165\u804c60\u5929\u540e\u624d\u4f1a\u6709\u8bfe\u7a0b\u5b89\u6392\uff0c\u79bb\u5f00\u9a7e\u6821\u65f6\u5019\u7684\u6700\u5e74\u957f\u7684\u6559\u7ec3\u7684\u8bfe\u7a0b\u5b89\u6392\u603b\u91cf\u662f\u591a\u5c11\uff0c\u5176\u4e2d\u591a\u5c11\u6bd4\u4f8b\u7684\u8bfe\u7a0b\u88ab\u53d6\u6d88\u4e86\uff1f", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.customer_id , MAX ( A.amount_payment ) - ( SELECT MIN ( amount_payment ) FROM Customer_Payments ) AS payment_diff FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id", "question": "\u54ea\u4e2a\u5ba2\u6237\u652f\u4ed8\u7684\u94b1\u6700\u591a\uff0c\u7ed9\u51fa\u4ed6\u7684ID\uff0c\u5e76\u6c42\u51fa\u5176\u6bd4\u652f\u4ed8\u7684\u94b1\u6700\u5c11\u7684\u5ba2\u6237\u591a\u652f\u4ed8\u591a\u5c11\u94b1\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT A.customer_id , MAX ( A.amount_payment ) - ( SELECT MIN ( amount_payment ) FROM Customer_Payments ) AS payment_diff FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id", "question": "\u5217\u51fa\u4ed8\u94b1\u6700\u591a\u7684\u5ba2\u6237\u7684ID\uff0c\u4ee5\u53ca\u5176\u6bd4\u4ed8\u94b1\u6700\u5c11\u7684\u5ba2\u6237\u591a\u4ed8\u7684\u94b1\u7684\u6570\u989d\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT customer_id, MAX (amount_payment) - (SELECT MIN (amount_payment) FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )) AS payment_diff FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )", "question": "\u5047\u5982\u963f\u7c73\u5a05\u00b7\u65af\u5bbe\u53612018\u5e743\u670812\u65e5\u591a\u652f\u4ed85000\uff0c\u54ea\u4e2a\u5ba2\u6237\u652f\u4ed8\u7684\u94b1\u6700\u591a\uff0c\u7ed9\u51fa\u4ed6\u7684ID\uff0c\u5e76\u6c42\u51fa\u5176\u6bd4\u652f\u4ed8\u7684\u94b1\u6700\u5c11\u7684\u5ba2\u6237\u591a\u652f\u4ed8\u591a\u5c11\u94b1\u3002", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT customer_id, MAX (amount_payment) - (SELECT MIN (amount_payment) FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )) AS payment_diff FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )", "question": "\u5982\u679c\u963f\u7c73\u5a05\u00b7\u65af\u5bbe\u53612018\u5e743\u670812\u65e5\u4ed8\u6b3e\u91d1\u989d\u591a5000\uff0c\u5217\u51fa\u4ed8\u94b1\u6700\u591a\u7684\u5ba2\u6237\u7684ID\uff0c\u4ee5\u53ca\u5176\u6bd4\u4ed8\u94b1\u6700\u5c11\u7684\u5ba2\u6237\u591a\u4ed8\u7684\u94b1\u7684\u6570\u989d\u3002", "reasoning_type": "- + H", "commonsense_knowledge": ""}, {"db_id": "driving_school", "query": "SELECT AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Lake Elaina\"", "question": "\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u4f0a\u83b1\u6069\u6e56\u5e02\u7684\u6559\u7ec3\u5e73\u5747\u5e74\u9f84\u662f\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Lake Elaina\"", "question": "\u5217\u51fa\u5c45\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u4f0a\u83b1\u6069\u6e56\u5e02\u7684\u6559\u7ec3\u7684\u5e73\u5747\u5e74\u9f84\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 2 * AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Port Melyssa\"", "question": "\u5047\u5982\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u4f0a\u83b1\u6069\u6e56\u5e02\u7684\u6559\u7ec3\u5e73\u5747\u5e74\u9f84\u662f\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u6885\u4e3d\u838e\u6e2f\u5e02\u7684\u6559\u7ec3\u7684\u5e73\u5747\u5e74\u9f84\u7684\u4e24\u500d\uff0c\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u4f0a\u83b1\u6069\u6e56\u5e02\u7684\u6559\u7ec3\u5e73\u5747\u5e74\u9f84\u662f\u591a\u5c11\uff1f", "reasoning_type": "- * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 2 * AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Port Melyssa\"", "question": "\u5982\u679c\u5c45\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u4f0a\u83b1\u6069\u6e56\u5e02\u7684\u6559\u7ec3\u5e73\u5747\u5e74\u9f84\u662f\u5c45\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u6885\u4e3d\u838e\u6e2f\u5e02\u7684\u6559\u7ec3\u7684\u5e73\u5747\u5e74\u9f84\u7684\u4e24\u500d\uff0c\u5217\u51fa\u5c45\u4f4f\u5728\u4e54\u6cbb\u4e9a\u5dde\u4f0a\u83b1\u6069\u6e56\u5e02\u7684\u6559\u7ec3\u7684\u5e73\u5747\u5e74\u9f84\u3002", "reasoning_type": "- * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT * FROM ( SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) JOIN ( SELECT date_of_birth - ( SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) AS diff FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" )", "question": "\u8d3e\u59ae\u838e\u00b7\u963f\u9a6c\u62c9\u00b7\u8428\u6587\u79bb\u804c5\u5e74\u540e\u591a\u5c11\u5c81\uff0c\u6bd4\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u5c0f\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT * FROM ( SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) JOIN ( SELECT date_of_birth - ( SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) AS diff FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" )", "question": "\u8d3e\u59ae\u838e\u00b7\u963f\u9a6c\u62c9\u00b7\u8428\u6587\u5728\u79bb\u804c5\u5e74\u540e\u7684\u5e74\u9f84\u662f\u591a\u5927\uff0c\u5176\u6bd4\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u5e74\u8f7b\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age , 30 - ( strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) ) AS diff FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\"", "question": "\u5047\u5982\u8d3e\u59ae\u838e\u00b7\u963f\u9a6c\u62c9\u00b7\u8428\u6587\u79bb\u804c\u7684\u65f6\u5019\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u727930\u5c81\uff0c\u8d3e\u59ae\u838e\u00b7\u963f\u9a6c\u62c9\u00b7\u8428\u6587\u79bb\u804c5\u5e74\u540e\u591a\u5c11\u5c81\uff0c\u6bd4\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u5c0f\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "driving_school", "query": "SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age , 30 - ( strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) ) AS diff FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\"", "question": "\u82e5\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u5728\u8d3e\u59ae\u838e\u00b7\u963f\u9a6c\u62c9\u00b7\u8428\u6587\u79bb\u804c\u7684\u65f6\u5019\u7684\u5e74\u9f84\u662f30\u5c81\uff0c\u90a3\u8d3e\u59ae\u838e\u00b7\u963f\u9a6c\u62c9\u00b7\u8428\u6587\u5728\u79bb\u804c5\u5e74\u540e\u7684\u5e74\u9f84\u662f\u591a\u5927\uff0c\u5176\u6bd4\u5361\u6885\u5c14\u00b7\u4f0a\u897f\u00b7\u9b4f\u65af\u7eb3\u7279\u5e74\u8f7b\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - substr ( dob , 7 , 4 ) + ( strftime ( \"%m\" , \"now\" ) > substr ( dob , 4 , 2 ) OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > substr ( dob , 1 , 2 ) ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "\u4e94\u5e74\u540e\uff0c\u5218\u6613\u65af\u00b7\u6c49\u5bc6\u5c14\u987f\u591a\u5927\u4e86\uff1f", "reasoning_type": "+ - C", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - substr ( dob , 7 , 4 ) + ( strftime ( \"%m\" , \"now\" ) > substr ( dob , 4 , 2 ) OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > substr ( dob , 1 , 2 ) ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "\u5218\u6613\u65af\u00b7\u6c49\u5bc6\u5c14\u987f\u5728\u4e94\u5e74\u540e\u7684\u5e74\u9f84\u662f\u591a\u5927\uff1f", "reasoning_type": "+ - C", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - 2020 + ( strftime ( \"%m\" , \"now\" ) > 1 OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > 1 ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "\u4e94\u5e74\u540e\uff0c\u5218\u6613\u65af\u00b7\u6c49\u5bc6\u5c14\u987f\u591a\u5927\u4e86\uff0c\u5047\u5982\u4ed6\u51fa\u751f\u4e8e2020\u5e741\u67081\u65e5\uff1f", "reasoning_type": "+ - C H", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT strftime ( \"%Y\" , \"now\" ) + 5 - 2020 + ( strftime ( \"%m\" , \"now\" ) > 1 OR ( strftime ( \"%m\" , \"now\" ) = substr ( dob , 4 , 2 ) AND strftime ( \"%d\" , \"now\" ) > 1 ) ) AS age FROM drivers WHERE forename = \"Lewis\" and surname = \"Hamilton\"", "question": "\u5982\u679c\u5218\u6613\u65af\u00b7\u6c49\u5bc6\u5c14\u987f\u7684\u751f\u65e5\u662f2020\u5e741\u67081\u65e5\uff0c\u90a3\u4ed6\u5728\u4e94\u5e74\u540e\u7684\u5e74\u9f84\u662f\u591a\u5927\uff1f", "reasoning_type": "+ - C H", "commonsense_knowledge": "Age is computed by substracting the date of birth from the given date."}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || q1 ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "\u57282009\u5e74\u6fb3\u5927\u5229\u4e9a\u5927\u5956\u8d5b\u8d44\u683c\u8d5b\u4e2d\uff0c\u6392\u540d\u7b2c\u4e00\u7684\u8f66\u624b\u5728\u4e09\u573a\u6bd4\u8d5b\u4e2d\u7684\u5e73\u5747\u5708\u901f\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ /", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || q1 ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "\u57282009\u5e74\u6fb3\u5927\u5229\u4e9a\u5927\u5956\u8d5b\u8d44\u683c\u8d5b\u4e2d\u6392\u540d\u6700\u9ad8\u7684\u8f66\u624b\u4e09\u573a\u6bd4\u8d5b\u7684\u5e73\u5747\u5708\u901f\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ /", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || \"1:26.026\" ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "\u57282009\u5e74\u6fb3\u5927\u5229\u4e9a\u5927\u5956\u8d5b\u8d44\u683c\u8d5b\u4e2d\uff0c\u6392\u540d\u7b2c\u4e00\u7684\u8f66\u624b\u5728\u4e09\u573a\u6bd4\u8d5b\u4e2d\u7684\u5e73\u5747\u5708\u901f\u662f\u591a\u5c11\uff0c\u5047\u8bbe\u4ed6\u5728q1\u4e2d\u7684\u5708\u901f\u662f1:26.026\uff1f", "reasoning_type": "+ / H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT time ( ( strftime ( \"%s\" , \"00:0\" || \"1:26.026\" ) + strftime ( \"%s\" , \"00:0\" || q2 ) + strftime ( \"%s\" , \"00:0\" || q3 ) ) / 3.0 , \"unixepoch\" ) AS avg_lap FROM qualifying A JOIN races B ON A.raceId = B.raceId WHERE B.name = \"Australian Grand Prix\" AND B.year = \"2009\" AND A.position = \"1\"", "question": "\u5982\u679c\u57282009\u5e74\u6fb3\u5927\u5229\u4e9a\u5927\u5956\u8d5b\u8d44\u683c\u8d5b\u4e2d\u6392\u540d\u6700\u9ad8\u7684\u8f66\u624b\u5728q1\u4e2d\u7684\u5708\u901f\u662f1:26.026\uff0c\u90a3\u4ed6\u4e09\u573a\u6bd4\u8d5b\u4e2d\u7684\u5e73\u5747\u5708\u901f\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ / H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT name , location FROM circuits ORDER BY ABS ( lat - 23.4394 ) ASC LIMIT 1", "question": "\u6700\u9760\u8fd1\u5317\u56de\u5f52\u7ebf\u7684\u8d5b\u9053\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\u662f\u4ec0\u4e48\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Cancer lies at 23.4394 degrees north of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT name , location FROM circuits ORDER BY ABS ( lat - 23.4394 ) ASC LIMIT 1", "question": "\u5217\u51fa\u79bb\u5317\u56de\u5f52\u7ebf\u6700\u8fd1\u7684\u8d5b\u9053\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Cancer lies at 23.4394 degrees north of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT name FROM circuits ORDER BY ABS ( lat - ( - 23.4394 ) ) DESC LIMIT 1", "question": "\u79bb\u5357\u56de\u5f52\u7ebf\u6700\u8fdc\u7684\u8d5b\u9053\u53eb\u4ec0\u4e48\u540d\u5b57\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Capricorn lies at 23.4394 degrees south of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT name FROM circuits ORDER BY ABS ( lat - ( - 23.4394 ) ) DESC LIMIT 1", "question": "\u7ed9\u51fa\u8ddd\u79bb\u5357\u56de\u5f52\u7ebf\u8ddd\u79bb\u6700\u8fdc\u7684\u8d5b\u9053\u540d\u79f0\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The Tropic of Capricorn lies at 23.4394 degrees south of the Equator. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 , ABS ( n_2009 - n_2010 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "2009\u5e74\u548c2010\u5e74\u5206\u522b\u4e3e\u884c\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f\u5b83\u4eec\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 , ABS ( n_2009 - n_2010 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "\u5206\u522b\u5217\u51fa\u57282009\u5e74\u548c2010\u5e74\u4e3e\u884c\u7684\u6bd4\u8d5b\u6570\u91cf\uff0c\u4ee5\u53ca\u4e8c\u8005\u7684\u5dee\u8ddd\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 + 5 , ABS ( n_2010 + 5 - n_2009 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "2009\u5e74\u548c2010\u5e74\u5206\u522b\u4e3e\u884c\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f\u5b83\u4eec\u76f8\u5dee\u591a\u5c11\u5047\u59822010\u5e74\u518d\u591a\u4e3e\u884c\u4e865\u573a\u6bd4\u8d5b\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_2009 , n_2010 + 5 , ABS ( n_2010 + 5 - n_2009 ) AS diff FROM ( SELECT COUNT ( * ) AS n_2009 FROM races WHERE year = \"2009\" ) JOIN ( SELECT COUNT ( * ) AS n_2010 FROM races WHERE year = \"2010\" )", "question": "\u5982\u679c2010\u5e74\u518d\u591a\u4e3e\u529e5\u573a\u6bd4\u8d5b\uff0c\u5206\u522b\u5217\u51fa\u57282009\u5e74\u548c2010\u5e74\u4e3e\u884c\u7684\u6bd4\u8d5b\u6570\u91cf\uff0c\u4ee5\u53ca\u4e8c\u8005\u7684\u5dee\u8ddd\u3002", "reasoning_type": "- + C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "formula_1", "query": "SELECT n_france - n_italy FROM ( SELECT COUNT ( * ) AS n_france FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"France\" ) JOIN ( SELECT COUNT ( * ) AS n_italy FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"Italy\" )", "question": "\u6cd5\u56fd\u6bd4\u610f\u5927\u5229\u591a\u4e3e\u884c\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT n_france - n_italy FROM ( SELECT COUNT ( * ) AS n_france FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"France\" ) JOIN ( SELECT COUNT ( * ) AS n_italy FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.Country = \"Italy\" )", "question": "\u5728\u6cd5\u56fd\u4e3e\u529e\u7684\u6bd4\u8d5b\u6570\u91cf\u6bd4\u5728\u610f\u5927\u5229\u4e3e\u529e\u7684\u6bd4\u8d5b\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT n_north , n_south , n_north - n_south FROM ( SELECT COUNT ( * ) AS n_north FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat > 0 ) JOIN ( SELECT COUNT ( * ) AS n_south FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat < 0 )", "question": "\u5317\u534a\u7403\u548c\u5357\u534a\u7403\u5206\u522b\u4e3e\u884c\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f\u5b83\u4eec\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The Northern Hemisphere runs from 0 degree latitude to 90 degrees North and the Southern Hemisphere from 0 degree latitude to 90 degree South. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT n_north , n_south , n_north - n_south FROM ( SELECT COUNT ( * ) AS n_north FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat > 0 ) JOIN ( SELECT COUNT ( * ) AS n_south FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.lat < 0 )", "question": "\u5206\u522b\u5217\u51fa\u4e3e\u529e\u4f4d\u7f6e\u5728\u5317\u534a\u7403\u548c\u5357\u534a\u7403\u7684\u6bd4\u8d5b\u6570\u91cf\uff0c\u4ee5\u53ca\u4e8c\u8005\u7684\u5dee\u8ddd\u3002", "reasoning_type": "- C", "commonsense_knowledge": "The Northern Hemisphere runs from 0 degree latitude to 90 degrees North and the Southern Hemisphere from 0 degree latitude to 90 degree South. The north latitude is positive, and the south latitude is negative."}, {"db_id": "formula_1", "query": "SELECT forename_slowest , surname_slowest , forename_fastest , surname_fastest , time ( ( strftime ( \"%s\" , \"00:0\" || slowest_q1 ) - strftime ( \"%s\" , \"00:0\" || fastest_q1 ) ) , \"unixepoch\" ) AS diff FROM ( SELECT MAX ( A.q1 ) AS slowest_q1 , D.forename AS forename_slowest , D.surname AS surname_slowest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" ) JOIN ( SELECT MIN ( A.q1 ) AS fastest_q1 , D.forename AS forename_fastest , D.surname AS surname_fastest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" AND A.q1 != \"\" )", "question": "\u57282006\u5e74\u82f1\u56fd\u5927\u5956\u8d5b\u8d44\u683c\u8d5b\u7b2c\u4e00\u8f6e\u6bd4\u8d5b\u4e2d\uff0c\u7ed9\u51fa\u901f\u5ea6\u6700\u5feb\u3001\u6700\u6162\u7684\u8f66\u624b\u7684\u59d3\uff0c\u540d\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5708\u901f\u7684\u5dee\u8ddd\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT forename_slowest , surname_slowest , forename_fastest , surname_fastest , time ( ( strftime ( \"%s\" , \"00:0\" || slowest_q1 ) - strftime ( \"%s\" , \"00:0\" || fastest_q1 ) ) , \"unixepoch\" ) AS diff FROM ( SELECT MAX ( A.q1 ) AS slowest_q1 , D.forename AS forename_slowest , D.surname AS surname_slowest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" ) JOIN ( SELECT MIN ( A.q1 ) AS fastest_q1 , D.forename AS forename_fastest , D.surname AS surname_fastest FROM qualifying A JOIN races B ON A.raceId = B.raceId JOIN drivers D ON A.driverId = D.driverId WHERE B.name = \"British Grand Prix\" AND B.year = \"2006\" AND A.q1 != \"\" )", "question": "\u5217\u51fa2006\u5e74\u82f1\u56fd\u5927\u5956\u8d5b\u8d44\u683c\u8d5b\u7b2c\u4e00\u8f6e\u6bd4\u8d5b\u4e2d\u901f\u5ea6\u6700\u5feb\u548c\u6700\u6162\u7684\u8f66\u624b\u7684\u59d3\uff0c\u540d\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5708\u901f\u7684\u5dee\u8ddd\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT B.country FROM circuits B , ( SELECT COUNT ( * ) AS n_japan FROM circuits B WHERE B.country = \"Japan\" ) GROUP BY B.country HAVING COUNT ( * ) > 2 * n_japan", "question": "\u54ea\u4e9b\u56fd\u5bb6\u7684\u8d5b\u9053\u6570\u91cf\u662f\u65e5\u672c\u7684\u4e24\u500d\u591a\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT B.country FROM circuits B , ( SELECT COUNT ( * ) AS n_japan FROM circuits B WHERE B.country = \"Japan\" ) GROUP BY B.country HAVING COUNT ( * ) > 2 * n_japan", "question": "\u5217\u51fa\u8d5b\u9053\u6570\u91cf\u6bd4\u65e5\u672c\u8d5b\u9053\u6570\u91cf\u7684\u4e24\u500d\u8fd8\u8981\u591a\u7684\u56fd\u5bb6\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT country FROM circuits GROUP BY country HAVING COUNT ( * ) > 2 * 2", "question": "\u5047\u8bbe\u65e5\u672c\u67092\u6761\u8d5b\u9053\uff0c\u90a3\u4e48\u54ea\u4e9b\u56fd\u5bb6\u7684\u8d5b\u9053\u6570\u91cf\u662f\u65e5\u672c\u7684\u4e24\u500d\u591a\uff1f", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT country FROM circuits GROUP BY country HAVING COUNT ( * ) > 2 * 2", "question": "\u5982\u679c\u65e5\u672c\u67092\u6761\u8d5b\u9053\uff0c\u5217\u51fa\u8d5b\u9053\u6570\u91cf\u6bd4\u65e5\u672c\u8d5b\u9053\u6570\u91cf\u7684\u4e24\u500d\u8fd8\u8981\u591a\u7684\u56fd\u5bb6\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE milliseconds != \"\" AND CAST ( milliseconds AS INT ) > 1.5 * ( SELECT MIN ( CAST ( milliseconds AS INT ) ) FROM results WHERE milliseconds != \"\" )", "question": "\u5217\u51fa\u5708\u901f\u8d85\u8fc7\u6700\u4f4e\u5708\u901f\u8bb0\u5f551.5\u500d\u7684\u8f66\u624b\u7684\u59d3\u548c\u540d\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE milliseconds != \"\" AND CAST ( milliseconds AS INT ) > 1.5 * ( SELECT MIN ( CAST ( milliseconds AS INT ) ) FROM results WHERE milliseconds != \"\" )", "question": "\u54ea\u4e9b\u8f66\u624b\u7684\u5708\u901f\u8d85\u8fc7\u6700\u4f4e\u5708\u901f\u8bb0\u5f551.5\u500d\uff1f\u5217\u51fa\u4ed6\u4eec\u7684\u59d3\u548c\u540d\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE CAST ( milliseconds AS INT ) > 1.5 * 93000", "question": "\u5982\u679c\u6700\u4f4e\u5708\u901f\u8bb0\u5f55\u4e3a93000\u6beb\u79d2\uff0c\u8bf7\u5217\u51fa\u5708\u901f\u8d85\u8fc7\u6700\u4f4e\u5708\u901f\u8bb0\u5f551.5\u500d\u7684\u9a7e\u9a76\u5458\u59d3\u548c\u540d\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT DISTINCT B.forename , B.surname FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE CAST ( milliseconds AS INT ) > 1.5 * 93000", "question": "\u82e5\u6700\u4f4e\u5708\u901f\u7eaa\u5f55\u662f93000\u6beb\u79d2\uff0c\u90a3\u54ea\u4e9b\u8f66\u624b\u7684\u5708\u901f\u8d85\u8fc7\u6700\u4f4e\u5708\u901f\u8bb0\u5f551.5\u500d\uff1f\u5217\u51fa\u4ed6\u4eec\u7684\u59d3\u548c\u540d\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * ( SELECT COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.location = \"Lisbon\" )", "question": "\u5217\u51fa\u6bd4\u8d5b\u6b21\u6570\u6bd4\u8461\u8404\u7259\u9996\u90fd\u7684\u6bd4\u8d5b\u6b21\u6570\u7684\u4e09\u500d\u591a\u7684\u5730\u70b9\u548c\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * ( SELECT COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE B.location = \"Lisbon\" )", "question": "\u54ea\u4e9b\u5730\u70b9\u4e3e\u529e\u7684\u6bd4\u8d5b\u6570\u91cf\u6bd4\u8461\u8404\u7259\u9996\u90fd\u7684\u6bd4\u8d5b\u6b21\u6570\u7684\u4e09\u500d\u8fd8\u8981\u591a\uff1f\u5217\u51fa\u8fd9\u4e9b\u5730\u70b9\u548c\u4ed6\u4eec\u4e3e\u529e\u7684\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * 5", "question": "\u5982\u679c\u5728\u91cc\u65af\u672c\u4e3e\u884c\u4e865\u573a\u6bd4\u8d5b\uff0c\u5217\u51fa\u6bd4\u8d5b\u6b21\u6570\u6bd4\u8461\u8404\u7259\u9996\u90fd\u7684\u6bd4\u8d5b\u6b21\u6570\u7684\u4e09\u500d\u591a\u7684\u5730\u70b9\u548c\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT B.location , COUNT ( * ) AS num_races FROM races A JOIN circuits B ON A.circuitId = B.circuitId GROUP BY B.location HAVING COUNT ( * ) > 3 * 5", "question": "\u5982\u679c\u91cc\u65af\u672c\u4e3e\u884c\u7684\u6bd4\u8d5b\u6570\u91cf\u4e3a5\u573a\uff0c\u90a3\u4e48\u54ea\u4e9b\u5730\u70b9\u4e3e\u529e\u7684\u6bd4\u8d5b\u6570\u91cf\u6bd4\u8461\u8404\u7259\u9996\u90fd\u7684\u6bd4\u8d5b\u6b21\u6570\u7684\u4e09\u500d\u8fd8\u8981\u591a\uff1f\u5217\u51fa\u8fd9\u4e9b\u5730\u70b9\u548c\u4ed6\u4eec\u4e3e\u529e\u7684\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Lisbon is the capital of Portugal."}, {"db_id": "formula_1", "query": "SELECT num_matches , num_no1 , 1.0 * num_no1 / num_matches AS possibility FROM ( SELECT COUNT ( * ) AS num_matches FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Albers\" AND B.forename = \"Christijan\" ) JOIN ( SELECT COUNT ( * ) AS num_no1 FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Hamilton\" AND B.forename = \"Lewis\" AND A.rank = \"1\" )", "question": "\u5218\u6613\u65af\u00b7\u6c49\u5bc6\u5c14\u987f\u53c2\u52a0\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f\u4ed6\u6709\u591a\u5c11\u6b21\u83b7\u5f97\u4e86\u7b2c\u4e00\u540d\uff1f\u4ed6\u83b7\u5f97\u7b2c\u4e00\u540d\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Probability is calculated by dividing the number of ways the event can occur by the total number of outcomes."}, {"db_id": "formula_1", "query": "SELECT num_matches , num_no1 , 1.0 * num_no1 / num_matches AS possibility FROM ( SELECT COUNT ( * ) AS num_matches FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Albers\" AND B.forename = \"Christijan\" ) JOIN ( SELECT COUNT ( * ) AS num_no1 FROM results A JOIN drivers B ON A.driverId = B.driverId WHERE B.surname = \"Hamilton\" AND B.forename = \"Lewis\" AND A.rank = \"1\" )", "question": "\u5217\u51fa\u5218\u6613\u65af\u00b7\u6c49\u5bc6\u5c14\u987f\u53c2\u52a0\u7684\u6bd4\u8d5b\u6570\u91cf\uff0c\u83b7\u5f97\u7b2c\u4e00\u540d\u7684\u6b21\u6570\uff0c\u4ee5\u53ca\u83b7\u5f97\u51a0\u519b\u7684\u6982\u7387\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Probability is calculated by dividing the number of ways the event can occur by the total number of outcomes."}, {"db_id": "formula_1", "query": "SELECT 1.0 * ( SELECT COUNT ( * ) FROM circuits WHERE country = \"USA\" ) / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "\u7f8e\u56fd\u7684\u8d5b\u9053\u6570\u91cf\u662f\u4e16\u754c\u4e0a\u9646\u5730\u9762\u79ef\u6700\u5927\u7684\u56fd\u5bb6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "/ * C", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * ( SELECT COUNT ( * ) FROM circuits WHERE country = \"USA\" ) / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "\u8bf7\u7ed9\u51fa\u4f4d\u4e8e\u7f8e\u56fd\u7684\u8d5b\u9053\u6570\u91cf\u662f\u4f4d\u4e8e\u4e16\u754c\u4e0a\u9646\u5730\u9762\u79ef\u6700\u5927\u7684\u56fd\u5bb6\u7684\u8d5b\u9053\u6570\u91cf\u7684\u591a\u5c11\u500d\u3002", "reasoning_type": "/ * C", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * 2 / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "\u5047\u8bbe\u7f8e\u56fd\u67092\u4e2a\u8d5b\u9053\uff0c\u7f8e\u56fd\u7684\u8d5b\u9053\u6570\u91cf\u662f\u4e16\u754c\u4e0a\u9646\u5730\u9762\u79ef\u6700\u5927\u7684\u56fd\u5bb6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * 2 / COUNT ( * ) AS ratio FROM circuits WHERE country = \"Russia\"", "question": "\u5982\u679c\u7f8e\u56fd\u7684\u8d5b\u9053\u6570\u91cf\u4e3a2\uff0c\u8bf7\u7ed9\u51fa\u4f4d\u4e8e\u7f8e\u56fd\u7684\u8d5b\u9053\u6570\u91cf\u662f\u4f4d\u4e8e\u4e16\u754c\u4e0a\u9646\u5730\u9762\u79ef\u6700\u5927\u7684\u56fd\u5bb6\u7684\u8d5b\u9053\u6570\u91cf\u7684\u591a\u5c11\u500d\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "The largest country in the world is Russia."}, {"db_id": "formula_1", "query": "SELECT 1.0 * n_p / n_all FROM ( SELECT COUNT ( DISTINCT A.driverId ) AS n_p FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" AND C.name = \"United States Grand Prix\" AND C.year = \"2006\" ) JOIN ( SELECT COUNT ( DISTINCT A.driverId ) AS n_all FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" )", "question": "\u5728\u4e0e\u8457\u540d\u8db3\u7403\u8fd0\u52a8\u5458\u514b\u91cc\u65af\u8482\u4e9a\u8bfa\u00b7\u7f57\u7eb3\u5c14\u591a\u62e5\u6709\u76f8\u540c\u56fd\u7c4d\u7684\u8f66\u624b\u4e2d\uff0c\u53c2\u52a0\u8fc72006\u5e74\u7f8e\u56fd\u5927\u5956\u8d5b\u7684\u9009\u624b\u662f\u6ca1\u6709\u53c2\u52a0\u8fc7\u7684\u9009\u624b\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Cristiano Ronaldo is a Portuguese professional footballer."}, {"db_id": "formula_1", "query": "SELECT 1.0 * n_p / n_all FROM ( SELECT COUNT ( DISTINCT A.driverId ) AS n_p FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" AND C.name = \"United States Grand Prix\" AND C.year = \"2006\" ) JOIN ( SELECT COUNT ( DISTINCT A.driverId ) AS n_all FROM drivers A JOIN results B ON A.driverId = B.driverId JOIN races C ON B.raceId = C.raceID WHERE A.nationality = \"Portuguese\" )", "question": "\u56fd\u7c4d\u4e0e\u8457\u540d\u8db3\u7403\u8fd0\u52a8\u5458\u514b\u91cc\u65af\u8482\u4e9a\u8bfa\u00b7\u7f57\u7eb3\u5c14\u591a\u76f8\u540c\u7684\u8d5b\u8f66\u624b\u4e2d\uff0c\u53c2\u52a0\u8fc72006\u5e74\u7f8e\u56fd\u5927\u5956\u8d5b\u7684\u9009\u624b\u6570\u91cf\u662f\u6ca1\u6709\u53c2\u52a0\u8fc7\u7684\u9009\u624b\u6570\u91cf\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Cristiano Ronaldo is a Portuguese professional footballer."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT 1.0 * COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"UK\" ) AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "\u5728\u4e54\u6cbb\u00b7W\u00b7\u5e03\u4ec0\u62c5\u4efb\u603b\u7edf\u671f\u95f4\uff0c\u7f8e\u56fd\u4e3e\u529e\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f\u662f\u82f1\u56fd\u4e3e\u529e\u7684\u6bd4\u8d5b\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT 1.0 * COUNT ( * ) FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"UK\" ) AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "\u7f8e\u56fd\u5728\u4e54\u6cbb\u00b7W\u00b7\u5e03\u4ec0\u62c5\u4efb\u603b\u7edf\u671f\u95f4\u4e3e\u529e\u7684\u6bd4\u8d5b\u6570\u91cf\u662f\u591a\u5c11\uff1f\u662f\u82f1\u56fd\u540c\u671f\u4e3e\u529e\u6bd4\u8d5b\u6570\u91cf\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / 10 AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "\u5728\u4e54\u6cbb\u00b7\u5e03\u4ec0\u62c5\u4efb\u603b\u7edf\u671f\u95f4\uff0c\u7f8e\u56fd\u4e3e\u529e\u4e86\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f\u662f\u82f1\u56fd\u4e3e\u529e\u7684\u6bd4\u8d5b\u7684\u591a\u5c11\u500d\uff0c\u5047\u5982\u82f1\u56fd\u90a3\u6bb5\u65f6\u95f4\u4e3e\u529e\u4e8610\u6b21\u6bd4\u8d5b\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT 1.0 * COUNT ( * ) / 10 AS ratio FROM races A JOIN circuits B ON A.circuitId = B.circuitId WHERE A.year BETWEEN 2001 AND 2009 AND country = \"USA\"", "question": "\u7f8e\u56fd\u5728\u4e54\u6cbb\u00b7W\u00b7\u5e03\u4ec0\u62c5\u4efb\u603b\u7edf\u671f\u95f4\u4e3e\u529e\u7684\u6bd4\u8d5b\u6570\u91cf\u662f\u591a\u5c11\uff1f\u662f\u82f1\u56fd\u4e3e\u529e\u6bd4\u8d5b\u6570\u91cf\u7684\u591a\u5c11\u500d\uff0c\u5047\u8bbe\u82f1\u56fd\u5728\u8fd9\u6bb5\u65f6\u95f4\u4e3e\u529e\u4e8610\u6b21\u6bd4\u8d5b\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "George W. Bush\u2019s tenure as the 43rd president of the United States began with his first inauguration on January 20, 2001, and ended on January 20, 2009."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * ( SELECT COUNT ( * ) FROM drivers A JOIN results B ON A.driverId = B.driverId WHERE A.forename = \"Allen\" AND A.surname = \"Berg\" ) AND A.nationality = \"American\"", "question": "\u8bf7\u63d0\u4f9b\u53c2\u52a0\u8fc7\u7684\u6bd4\u8d5b\u6b21\u6570\u81f3\u5c11\u662f\u827e\u4f26\u00b7\u4f2f\u683c\u7684\u4e24\u500d\u4e14\u4e0e\u8457\u540d\u7684\u6b4c\u624b\u8fc8\u514b\u5c14\u00b7\u6770\u514b\u900a\u5177\u6709\u76f8\u540c\u56fd\u7c4d\u7684\u8f66\u624b\u7684ID\u3001\u540d\u5b57\u3001\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * ( SELECT COUNT ( * ) FROM drivers A JOIN results B ON A.driverId = B.driverId WHERE A.forename = \"Allen\" AND A.surname = \"Berg\" ) AND A.nationality = \"American\"", "question": "\u7ed9\u51fa\u56fd\u7c4d\u4e0e\u8457\u540d\u7684\u6b4c\u624b\u8fc8\u514b\u5c14\u00b7\u6770\u514b\u900a\u5177\u6709\u76f8\u540c\uff0c\u4e14\u53c2\u52a0\u8fc7\u6bd4\u8d5b\u7684\u6570\u91cf\u4e0d\u5c11\u4e8e\u827e\u4f26\u00b7\u4f2f\u683c\u7684\u4e24\u500d\u7684\u8f66\u624b\u7684ID\u3001\u540d\u5b57\u548c\u53c2\u52a0\u8fc7\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * 10 AND A.nationality = \"American\"", "question": "\u5047\u8bbe\u827e\u4f26\u00b7\u4f2f\u683c\u53c2\u52a0\u4e8610\u573a\u6bd4\u8d5b\uff0c\u8bf7\u63d0\u4f9b\u53c2\u52a0\u8fc7\u7684\u6bd4\u8d5b\u6b21\u6570\u81f3\u5c11\u662f\u827e\u4f26\u00b7\u4f2f\u683c\u7684\u4e24\u500d\u4e14\u4e0e\u8457\u540d\u7684\u6b4c\u624b\u8fc8\u514b\u5c14\u00b7\u7ea6\u745f\u592b\u00b7\u6770\u514b\u900a\u5177\u6709\u76f8\u540c\u56fd\u7c4d\u7684\u8f66\u624b\u7684ID\u3001\u540d\u5b57\u3001\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "formula_1", "query": "SELECT A.driverId , forename AS first_name , COUNT ( * ) AS n_races FROM drivers A JOIN results B ON A.driverId = B.driverId GROUP BY A.driverId HAVING COUNT ( * ) >= 2 * 10 AND A.nationality = \"American\"", "question": "\u5047\u8bbe\u827e\u4f26\u00b7\u4f2f\u683c\u53c2\u52a0\u8fc7\u7684\u6bd4\u8d5b\u7684\u6570\u91cf\u662f10\uff0c\u7ed9\u51fa\u56fd\u7c4d\u4e0e\u8457\u540d\u7684\u6b4c\u624b\u8fc8\u514b\u5c14\u00b7\u6770\u514b\u900a\u5177\u6709\u76f8\u540c\uff0c\u4e14\u53c2\u52a0\u8fc7\u6bd4\u8d5b\u7684\u6570\u91cf\u4e0d\u5c11\u4e8e\u827e\u4f26\u00b7\u4f2f\u683c\u7684\u4e24\u500d\u7684\u8f66\u624b\u7684ID\u3001\u540d\u5b57\u548c\u53c2\u52a0\u8fc7\u6bd4\u8d5b\u6b21\u6570\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Michael Joseph Jackson was an American singer, songwriter, dancer, and philanthropist."}, {"db_id": "hospital_1", "query": "SELECT CAST ( julianday ( A.StayEnd ) - julianday ( A.StayStart ) AS INTEGER ) AS days_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "\u7ea6\u7ff0\u00b7\u53f2\u5bc6\u65af\u4f4f\u4e86\u51e0\u5929\u9662\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of discharge."}, {"db_id": "hospital_1", "query": "SELECT CAST ( julianday ( A.StayEnd ) - julianday ( A.StayStart ) AS INTEGER ) AS days_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "\u7ea6\u7ff0\u00b7\u53f2\u5bc6\u65af\u7684\u603b\u4f4f\u9662\u65f6\u95f4\u662f\u591a\u5c11\u5929\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of discharge."}, {"db_id": "hospital_1", "query": "SELECT julianday ( strftime ( \"%Y-\" , A.StayEnd ) || \"05-12\" ) - julianday ( strftime ( \"%Y-\" , A.StayStart ) || strftime ( \"%m-%d\" , A.StayStart ) ) AS date_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "\u5982\u679c\u7ea6\u7ff0\u00b7\u53f2\u5bc6\u65af\u662f\u56fd\u9645\u62a4\u58eb\u8282\u90a3\u5929\u51fa\u9662\u7684\uff0c\u4ed6\u4f4f\u4e86\u51e0\u5929\u9662\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of dischargel. International Nurses Day is an international day observed around the world on 12 May each year."}, {"db_id": "hospital_1", "query": "SELECT julianday ( strftime ( \"%Y-\" , A.StayEnd ) || \"05-12\" ) - julianday ( strftime ( \"%Y-\" , A.StayStart ) || strftime ( \"%m-%d\" , A.StayStart ) ) AS date_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"", "question": "\u5982\u679c\u7ea6\u7ff0\u00b7\u53f2\u5bc6\u65af\u7684\u51fa\u9662\u65e5\u671f\u662f\u56fd\u9645\u62a4\u58eb\u8282\uff0c\u90a3\u4e48\u4ed6\u603b\u4f4f\u9662\u65f6\u95f4\u662f\u591a\u5c11\u5929\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "Days in hospital is caculated by subtracting day of admission from day of dischargel. International Nurses Day is an international day observed around the world on 12 May each year."}, {"db_id": "hospital_1", "query": "SELECT COUNT ( DISTINCT ( Patient ) ) - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Foo Labs\"", "question": "\u4f7f\u7528\u4e86Foo Labs\u54c1\u724c\u7684\u836f\u7684\u75c5\u4eba\u6bd4\u4f7f\u7528\u4e86Baz Industries\u54c1\u724c\u7684\u836f\u7684\u75c5\u4eba\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT COUNT ( DISTINCT ( Patient ) ) - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Foo Labs\"", "question": "\u4f7f\u7528\u8fc7\u54c1\u724c\u4e3aFoo Labs\u7684\u836f\u7269\u7684\u75c5\u4eba\u7684\u6570\u91cf\u6bd4\u7528\u8fc7\u54c1\u724c\u4f4dBaz Industries\u7684\u836f\u7269\u7684\u75c5\u4eba\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 10 - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff", "question": "\u5982\u679c\u4f7f\u7528\u8fc7Foo Labs\u54c1\u724c\u7684\u75c5\u4eba\u5171\u670910\u4e2a\uff0c\u4f7f\u7528\u4e86Foo Labs\u54c1\u724c\u7684\u836f\u7684\u75c5\u4eba\u6bd4\u4f7f\u7528\u4e86Baz Industries\u54c1\u724c\u7684\u836f\u7684\u75c5\u4eba\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 10 - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff", "question": "\u5047\u5982\u603b\u5171\u670910\u4f4d\u75c5\u4eba\u4f7f\u7528\u8fc7Foo Labs\u54c1\u724c\u7684\u836f\u54c1\uff0c\u90a3\u4e48\u4f7f\u7528\u8fc7\u54c1\u724c\u4e3aFoo Labs\u7684\u836f\u7269\u7684\u75c5\u4eba\u7684\u6570\u91cf\u6bd4\u7528\u8fc7\u54c1\u724c\u4f4dBaz Industries\u7684\u836f\u7269\u7684\u75c5\u4eba\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / MIN ( c ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "\u9884\u7ea6\u6b21\u6570\u6700\u591a\u7684\u533b\u751f\u7684\u9884\u7ea6\u6b21\u6570\u662f\u9884\u7ea6\u6b21\u6570\u6700\u5c11\u7684\u533b\u751f\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / MIN ( c ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "\u9884\u7ea6\u6b21\u6570\u6392\u540d\u7b2c\u4e00\u7684\u533b\u751f\u7684\u9884\u7ea6\u6b21\u6570\u662f\u9884\u7ea6\u6570\u91cf\u6392\u540d\u5012\u6570\u7b2c\u4e00\u7684\u533b\u751f\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / ( MIN ( c ) + 2 ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "\u5982\u679c\u9884\u7ea6\u6700\u5c11\u7684\u533b\u5e08\u65b0\u6dfb\u4e862\u4e2a\u9884\u7ea6\uff0c\u9884\u7ea6\u6b21\u6570\u6700\u591a\u7684\u533b\u751f\u7684\u9884\u7ea6\u6b21\u6570\u662f\u4ed6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( c ) / ( MIN ( c ) + 2 ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )", "question": "\u5982\u679c\u9884\u7ea6\u6570\u91cf\u57ab\u5e95\u7684\u533b\u5e08\u65b0\u6dfb\u4e862\u4e2a\u9884\u7ea6\uff0c\u90a3\u9884\u7ea6\u6b21\u6570\u6392\u540d\u7b2c\u4e00\u7684\u533b\u751f\u7684\u9884\u7ea6\u6b21\u6570\u662f\u4ed6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "\u6240\u6709\u836f\u7269\u6bcf\u52422\u7f8e\u5143\u3002Dennis Doe\u5728\u836f\u7269\u548c\u6cbb\u7597\u4e0a\u603b\u5171\u82b1\u4e86\u591a\u5c11\u94b1\uff1f", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "\u5982\u679c\u4efb\u4f55\u836f\u7269\u90fd\u662f2\u7f8e\u5143\u4e00\u5242\uff0c\u90a3\u4e48Dennis Doe\u5728\u836f\u7269\u548c\u6cbb\u7597\u4e0a\u7684\u603b\u82b1\u8d39\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost + 10 * 2 AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" AND A.Date != \"2008-04-30 16:53\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "\u6240\u6709\u836f\u7269\u6bcf\u52422\u7f8e\u5143\u3002\u5047\u5982\u4e39\u5c3c\u65af\u00b7\u591a\u4f0a2008\u5e744\u670830\u65e516:53\u591a\u4e70\u4e8610\u5242Thesisin\uff0c\u4ed6\u5728\u836f\u7269\u548c\u6cbb\u7597\u4e0a\u603b\u5171\u82b1\u4e86\u591a\u5c11\u94b1\uff1f", "reasoning_type": "+ * C H", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT med_cost + pro_cost + 10 * 2 AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" AND A.Date != \"2008-04-30 16:53\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )", "question": "\u5982\u679c\u4efb\u4f55\u836f\u7269\u90fd\u662f2\u7f8e\u5143\u4e00\u5242\uff0c\u5047\u5982\u4e39\u5c3c\u65af\u00b7\u591a\u4f0a2008\u5e744\u670830\u65e516:53\u591a\u8d2d\u4e70\u4e8610\u5242Thesisin\uff0c\u90a3\u4e48Dennis Doe\u5728\u836f\u7269\u548c\u6cbb\u7597\u4e0a\u7684\u603b\u82b1\u8d39\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * C H", "commonsense_knowledge": "Total price is calculated by multiplying quantity with unit price."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "John Wen \u63a5\u53d7\u57f9\u8bad\u8fc7\u7684\u624b\u672f\u8d44\u683c\u8ba4\u8bc1\u7684\u6709\u6548\u671f\u662f\u591a\u957f\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "John Wen\u7ecf\u8fc7\u57f9\u8bad\u7684\u624b\u672f\u8d44\u683c\u8ba4\u8bc1\u5728\u591a\u957f\u65f6\u95f4\u5185\u6709\u6548\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) + 180 AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "John Wen \u63a5\u53d7\u57f9\u8bad\u8fc7\u7684\u624b\u672f\u8d44\u683c\u8ba4\u8bc1\u7684\u6709\u6548\u671f\u662f\u591a\u957f\uff0c\u5047\u5982\u6709\u6548\u671f\u5ef6\u957f180\u5929\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) + 180 AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"", "question": "\u5047\u5982\u6240\u6709\u8d44\u683c\u8ba4\u8bc1\u6709\u6548\u671f\u5ef6\u957f180\u5929\uff0c\u90a3\u4e48John Wen \u63a5\u53d7\u57f9\u8bad\u8fc7\u7684\u624b\u672f\u8d44\u683c\u8ba4\u8bc1\u7684\u6709\u6548\u671f\u662f\u591a\u957f\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Lifetime of the certification is computed substacting certification start date from certification expire date."}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Affiliated_With WHERE Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID WHERE B.Name = \"Surgery\" or B.Name = \"General Medicine\" GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "\u540c\u65f6\u5c5e\u4e8e\u5916\u79d1\u90e8\u95e8\u548c\u666e\u901a\u5185\u79d1\u90e8\u95e8\u7684\u533b\u751f\u5728\u5c5e\u4e8e\u5916\u79d1\u7684\u533b\u751f\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Affiliated_With WHERE Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID WHERE B.Name = \"Surgery\" or B.Name = \"General Medicine\" GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "\u5728\u5916\u79d1\u548c\u666e\u901a\u5185\u79d1\u4e24\u4e2a\u90e8\u95e8\u540c\u65f6\u5de5\u4f5c\u7684\u533b\u751f\u6240\u5360\u5916\u79d1\u533b\u751f\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "/ *", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * ( 1 + COUNT ( * ) ) / ( 1 + ( SELECT COUNT ( * ) FROM Affiliated_With as A join Physician as B on A.Physician = B.EmployeeID WHERE B.Name != \"Keith Dudermeister\" and Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID join Physician as C on A.Physician = C.EmployeeID WHERE C.Name != \"Keith Dudermeister\" and ( B.Name = \"Surgery\" or B.Name = \"General Medicine\" ) GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "\u5047\u5982\u57fa\u601d\u00b7\u675c\u5fb7\u7c73\u65af\u7279\u65e2\u5c5e\u4e8e\u5916\u79d1\u90e8\u95e8\u53c8\u5c5e\u4e8e\u666e\u901a\u5185\u79d1\u90e8\u95e8\uff0c\u540c\u65f6\u5c5e\u4e8e\u5916\u79d1\u90e8\u95e8\u548c\u666e\u901a\u5185\u79d1\u90e8\u95e8\u7684\u533b\u751f\u5728\u5c5e\u4e8e\u5916\u79d1\u7684\u533b\u751f\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ / * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * ( 1 + COUNT ( * ) ) / ( 1 + ( SELECT COUNT ( * ) FROM Affiliated_With as A join Physician as B on A.Physician = B.EmployeeID WHERE B.Name != \"Keith Dudermeister\" and Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID join Physician as C on A.Physician = C.EmployeeID WHERE C.Name != \"Keith Dudermeister\" and ( B.Name = \"Surgery\" or B.Name = \"General Medicine\" ) GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )", "question": "\u5047\u5982\u57fa\u601d\u00b7\u675c\u5fb7\u7c73\u65af\u7279\u65e2\u5728\u5916\u79d1\u90e8\u95e8\u5de5\u4f5c\u53c8\u5728\u666e\u901a\u5185\u79d1\u90e8\u95e8\u5de5\u4f5c\uff0c\u90a3\u4e48\u5728\u5916\u79d1\u548c\u666e\u901a\u5185\u79d1\u4e24\u4e2a\u90e8\u95e8\u540c\u65f6\u5de5\u4f5c\u7684\u533b\u751f\u6240\u5360\u5916\u79d1\u533b\u751f\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ / * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / MIN ( Cost ) AS times FROM Procedures", "question": "\u6cbb\u7597\u7684\u6700\u9ad8\u4ef7\u683c\u4e0e\u6700\u4f4e\u4ef7\u683c\u76f8\u6bd4\u662f\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / MIN ( Cost ) AS times FROM Procedures", "question": "\u6700\u8d35\u7684\u6cbb\u7597\u7684\u4ef7\u683c\u662f\u6700\u4fbf\u5b9c\u7684\u6cbb\u7597\u7684\u4ef7\u683c\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / ( ( 1 + 0.75 ) * MIN ( Cost ) ) AS times FROM Procedures", "question": "\u6cbb\u7597\u7684\u6700\u9ad8\u4ef7\u683c\u4e0e\u6700\u4f4e\u4ef7\u683c\u76f8\u6bd4\u662f\u591a\u5c11\u500d\uff0c\u5982\u679c\u6700\u4f4e\u4ef7\u63d0\u9ad8\u4e8675%\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * MAX ( Cost ) / ( ( 1 + 0.75 ) * MIN ( Cost ) ) AS times FROM Procedures", "question": "\u5982\u679c\u6700\u4fbf\u5b9c\u7684\u6cbb\u7597\u4ef7\u683c\u63d0\u9ad875%\uff0c\u90a3\u4e48\u6700\u8d35\u7684\u6cbb\u7597\u7684\u4ef7\u683c\u662f\u6700\u4fbf\u5b9c\u7684\u6cbb\u7597\u7684\u4ef7\u683c\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Procedures ) FROM Procedures WHERE Cost > 1000", "question": "\u6cbb\u7597\u8d39\u7528\u9ad8\u4e8e1000\u7684\u6848\u4f8b\u5360\u6cbb\u7597\u6848\u4f8b\u603b\u6570\u7684\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Procedures ) FROM Procedures WHERE Cost > 1000", "question": "\u4ef7\u683c\u57281000\u4ee5\u4e0a\u7684\u6cbb\u7597\u6848\u4f8b\u5360\u6cbb\u7597\u6848\u4f8b\u603b\u6570\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 - 1.0 * COUNT ( DISTINCT ( Patient ) ) / ( SELECT COUNT ( DISTINCT ( SSN ) ) FROM Patient ) AS prop FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Name = \"Procrastin-X\"", "question": "\u4e0d\u4f7f\u7528Procrastin-X\u7684\u60a3\u8005\u5360\u60a3\u8005\u603b\u6570\u7684\u591a\u5c11\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 - 1.0 * COUNT ( DISTINCT ( Patient ) ) / ( SELECT COUNT ( DISTINCT ( SSN ) ) FROM Patient ) AS prop FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Name = \"Procrastin-X\"", "question": "\u4e0d\u670d\u7528Procrastin-X\u7684\u60a3\u8005\u7684\u6570\u91cf\u6240\u5360\u60a3\u8005\u603b\u6570\u91cf\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT MAX ( A.Cost ) - MIN ( A.Cost ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "\u4e39\u5c3c\u65af\u00b7\u591a\u4f0a\u6700\u6602\u8d35\u7684\u6cbb\u7597\u548c\u6700\u4fbf\u5b9c\u7684\u6cbb\u7597\u4e4b\u95f4\u6709\u591a\u5c11\u533a\u522b\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT MAX ( A.Cost ) - MIN ( A.Cost ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "\u4e39\u5c3c\u65af\u00b7\u591a\u4f0a\u6d88\u8d39\u6700\u9ad8\u7684\u4e00\u6b21\u6cbb\u7597\u548c\u6d88\u8d39\u6700\u4f4e\u7684\u4e00\u6b21\u6cbb\u7597\u76f8\u5dee\u591a\u5c11\u94b1\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT ( ( 1 + 0.5 ) * MAX ( A.Cost ) ) - ( ( 1 + 0.5 ) * MIN ( A.Cost ) ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "\u5982\u679c\u6bcf\u4e2a\u6cbb\u7597\u90fd\u6da8\u4ef750%\uff0c\u4e39\u5c3c\u65af\u00b7\u591a\u4f0a\u505a\u7684\u6700\u6602\u8d35\u7684\u6cbb\u7597\u548c\u6700\u4fbf\u5b9c\u7684\u6cbb\u7597\u76f8\u5dee\u591a\u5c11\u94b1\uff1f", "reasoning_type": "- + * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT ( ( 1 + 0.5 ) * MAX ( A.Cost ) ) - ( ( 1 + 0.5 ) * MIN ( A.Cost ) ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"", "question": "\u5982\u679c\u6bcf\u4e2a\u6cbb\u7597\u90fd\u6da8\u4ef750%\uff0c\u90a3\u4e48\u4e39\u5c3c\u65af\u00b7\u591a\u4f0a\u6d88\u8d39\u6700\u9ad8\u7684\u4e00\u6b21\u6cbb\u7597\u548c\u6d88\u8d39\u6700\u4f4e\u7684\u4e00\u6b21\u6cbb\u7597\u76f8\u5dee\u591a\u5c11\u94b1\uff1f", "reasoning_type": "- + * H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Room ) AS prop FROM Room WHERE Unavailable = \"0\"", "question": "\u53ef\u7528\u623f\u95f4\u5360\u623f\u95f4\u603b\u6570\u7684\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Room ) AS prop FROM Room WHERE Unavailable = \"0\"", "question": "\u76ee\u524d\u6709\u591a\u5c11\u6bd4\u4f8b\u7684\u623f\u95f4\u662f\u7a7a\u95f2\u7684\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 2 * COUNT ( * ) AS n_people FROM Room WHERE Unavailable = \"0\"", "question": "\u5982\u679c\u6bcf\u4e2a\u623f\u95f4\u6709\u4e24\u5f20\u5e8a\uff0c\u90a3\u4e48\u53ef\u7528\u7684\u623f\u95f4\u603b\u5171\u53ef\u4ee5\u5bb9\u7eb3\u591a\u5c11\u4eba\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 2 * COUNT ( * ) AS n_people FROM Room WHERE Unavailable = \"0\"", "question": "\u82e5\u6bcf\u4e2a\u623f\u95f4\u6709\u4e24\u5f20\u5e8a\u4f4d\uff0c\u5217\u51fa\u76ee\u524d\u7a7a\u95f2\u7684\u623f\u95f4\u53ef\u4ee5\u5bb9\u7eb3\u7684\u603b\u4eba\u6570\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "\u9884\u7ea6ID\u4e3a13216584\u7684\u9884\u7ea6\u6301\u7eed\u65f6\u95f4\u662f\u591a\u5c11\u5206\u949f\uff1f", "reasoning_type": "- / C", "commonsense_knowledge": "One hour is 60 minutes."}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "\u5217\u51fa\u9884\u7ea6ID\u4e3a13216584\u7684\u9884\u7ea6\u603b\u5171\u6301\u7eed\u7684\u5206\u949f\u6570\u3002", "reasoning_type": "- / C", "commonsense_knowledge": "One hour is 60 minutes."}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 + 30 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "\u5982\u679c\u9884\u7ea6ID\u4e3a13216584\u7684\u9884\u7ea6\u6301\u7eed\u65f6\u95f4\u5ef6\u957f\u4e86\u534a\u4e2a\u5c0f\u65f6\uff0c\u5b83\u7684\u6301\u7eed\u4e86\u591a\u5c11\u5206\u949f\uff1f", "reasoning_type": "- + / C H", "commonsense_knowledge": "Half an hour is 30 minutes."}, {"db_id": "hospital_1", "query": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 + 30 AS time FROM Appointment WHERE AppointmentID = \"13216584\"", "question": "\u5982\u679c\u9884\u7ea6ID\u4e3a13216584\u7684\u9884\u7ea6\u6301\u7eed\u65f6\u95f4\u6bd4\u5f53\u524d\u957f\u534a\u4e2a\u5c0f\u65f6\uff0c\u5217\u51fa\u9884\u7ea6ID\u4e3a13216584\u7684\u9884\u7ea6\u603b\u5171\u6301\u7eed\u7684\u5206\u949f\u6570\u3002", "reasoning_type": "- + / C H", "commonsense_knowledge": "Half an hour is 30 minutes."}, {"db_id": "hospital_1", "query": "SELECT A.Name , A.Position , 50 * COUNT ( * ) AS cost FROM Physician A JOIN Trained_In B ON A.EmployeeID = B.Physician GROUP BY A.EmployeeID HAVING COUNT ( * ) = ( SELECT MAX ( training_count ) FROM ( SELECT COUNT ( * ) AS training_count FROM Trained_In GROUP BY Physician ) )", "question": "\u5982\u679c\u6bcf\u6b21\u57f9\u8bad\u7684\u57f9\u8bad\u8d39\u662f50\u82f1\u9551\uff0c\u90a3\u4e48\u8c01\u662f\u5728\u57f9\u8bad\u4e0a\u82b1\u8d39\u6700\u591a\u7684\u533b\u751f\uff1f\u5217\u51fa\u4ed6\u7684\u59d3\u540d\u3001\u804c\u4f4d\u548c\u57f9\u8bad\u8d39\u7528\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT A.Name , A.Position , 50 * COUNT ( * ) AS cost FROM Physician A JOIN Trained_In B ON A.EmployeeID = B.Physician GROUP BY A.EmployeeID HAVING COUNT ( * ) = ( SELECT MAX ( training_count ) FROM ( SELECT COUNT ( * ) AS training_count FROM Trained_In GROUP BY Physician ) )", "question": "\u82e5\u6bcf\u6b21\u57f9\u8bad\u90fd\u9700\u8981\u6536\u8d3950\u82f1\u9551\uff0c\u90a3\u4e48\u54ea\u4f4d\u533b\u751f\u5728\u57f9\u8bad\u4e0a\u82b1\u8d39\u6700\u591a\uff1f\u5217\u51fa\u4ed6\u7684\u59d3\u540d\u3001\u804c\u4f4d\u548c\u57f9\u8bad\u6240\u82b1\u7684\u8d39\u7528\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MAX ( BlockFloor ) FROM Room )", "question": "\u9876\u5c42\u7684\u53ef\u7528\u623f\u95f4\u6bd4\u6700\u5e95\u5c42\u7684\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MAX ( BlockFloor ) FROM Room )", "question": "\u6700\u9ad8\u697c\u5c42\u4e0a\u7684\u7a7a\u95f2\u623f\u95f4\u6570\u91cf\u6bd4\u6700\u4f4e\u697c\u5c42\u7684\u7a7a\u95f2\u623f\u95f4\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 20 - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff", "question": "\u5047\u8bbe\u5728\u9876\u5c42\u670920\u4e2a\u53ef\u7528\u623f\u95f4\uff0c\u9876\u5c42\u7684\u53ef\u7528\u623f\u95f4\u6bd4\u6700\u5e95\u5c42\u7684\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "hospital_1", "query": "SELECT 20 - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff", "question": "\u5982\u679c\u5728\u6700\u9ad8\u5c42\u4e0a\u670920\u4e2a\u7a7a\u95f2\u623f\u95f4\uff0c\u90a3\u4e48\u6700\u9ad8\u697c\u5c42\u4e0a\u7684\u7a7a\u95f2\u623f\u95f4\u6570\u91cf\u6bd4\u6700\u4f4e\u697c\u5c42\u7684\u7a7a\u95f2\u623f\u95f4\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Player_ID ) ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach", "question": "\u6709\u6559\u7ec3\u7684\u9009\u624b\u5360\u9009\u624b\u603b\u6570\u7684\u767e\u5206\u4e4b\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Player_ID ) ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach", "question": "\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u9009\u624b\u7684\u6570\u91cf\u5360\u6240\u6709\u9009\u624b\u603b\u6570\u91cf\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( DISTINCT ( A.Player_ID ) ) + 1 ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach A JOIN player B ON A.Player_ID = B.Player_ID WHERE B.Player_name != \"Jim Maloway\"", "question": "\u5982\u679c\u5409\u59c6\u00b7\u9a6c\u6d1b\u7ef4\u7684\u6559\u7ec3\u662f\u4e54\u00b7\u6cd5\u5e03\u91cc\uff0c\u6709\u6559\u7ec3\u7684\u9009\u624b\u5360\u9009\u624b\u603b\u6570\u7684\u767e\u5206\u4e4b\u591a\u5c11\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( DISTINCT ( A.Player_ID ) ) + 1 ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach A JOIN player B ON A.Player_ID = B.Player_ID WHERE B.Player_name != \"Jim Maloway\"", "question": "\u5982\u679c\u4e54\u00b7\u6cd5\u5e03\u91cc\u662f\u5409\u59c6\u00b7\u9a6c\u6d1b\u7ef4\u7684\u6559\u7ec3\uff0c\u90a3\u4e48\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u9009\u624b\u7684\u6570\u91cf\u5360\u6240\u6709\u9009\u624b\u603b\u6570\u91cf\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\"", "question": "\u5efa\u4e8e\u6bd4\u7279\u5e01\u7f51\u7edc\u7b2c\u4e00\u6b21\u53d1\u5e03\u90a3\u5e74\u4e4b\u524d\u7684\u4ff1\u4e50\u90e8\u5360\u4ff1\u4e50\u90e8\u603b\u6570\u7684\u767e\u5206\u4e4b\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\"", "question": "\u6709\u767e\u5206\u4e4b\u51e0\u7684\u4ff1\u4e50\u90e8\u5efa\u7acb\u4e8e\u6bd4\u7279\u5e01\u7f51\u7edc\u9996\u6b21\u53d1\u5e03\u54ea\u4e00\u5e74\u4e4b\u524d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + 1 ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\" AND Club_name != \"Helsingborgs IF\"", "question": "\u5982\u679cHelsingborgs IF\u4ff1\u4e50\u90e8\u5efa\u7acb\u4e8e2000\u5e74\uff0c\u5efa\u4e8e\u6bd4\u7279\u5e01\u7f51\u7edc\u7b2c\u4e00\u6b21\u53d1\u5e03\u90a3\u5e74\u4e4b\u524d\u7684\u4ff1\u4e50\u90e8\u5360\u4ff1\u4e50\u90e8\u603b\u6570\u7684\u767e\u5206\u4e4b\u591a\u5c11\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + 1 ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\" AND Club_name != \"Helsingborgs IF\"", "question": "\u82e5Helsingborgs IF\u4ff1\u4e50\u90e8\u57282000\u5e74\u6210\u7acb\uff0c\u90a3\u4e48\u6709\u767e\u5206\u4e4b\u51e0\u7684\u4ff1\u4e50\u90e8\u5efa\u7acb\u4e8e\u6bd4\u7279\u5e01\u7f51\u7edc\u9996\u6b21\u53d1\u5e03\u54ea\u4e00\u5e74\u4e4b\u524d\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Bitcoin Network was first launched in January 2009."}, {"db_id": "riding_club", "query": "SELECT SUM ( Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "\u62e5\u6709\u4e16\u754c\u6700\u957f\u94c1\u8def\u7684\u56fd\u5bb6\u7684\u6240\u6709\u4ff1\u4e50\u90e8\u83b7\u5f97\u7684\u5956\u724c\u4e00\u5171\u6709\u591a\u5c11\uff1f", "reasoning_type": "+ C", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT SUM ( Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "\u7ed9\u51fa\u4f4d\u4e8e\u4e16\u754c\u4e0a\u6700\u957f\u7684\u94c1\u8def\u6240\u5728\u7684\u56fd\u5bb6\u7684\u6240\u6709\u4ff1\u4e50\u90e8\u7684\u83b7\u5f97\u7684\u6240\u6709\u5956\u724c\u603b\u6570\u3002", "reasoning_type": "+ C", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT SUM ( 2 * Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "\u62e5\u6709\u4e16\u754c\u6700\u957f\u94c1\u8def\u7684\u56fd\u5bb6\u7684\u6240\u6709\u4ff1\u4e50\u90e8\u83b7\u5f97\u7684\u5956\u724c\u4e00\u5171\u6709\u591a\u5c11\uff0c\u5982\u679c\u6bcf\u4e2a\u4ff1\u4e50\u90e8\u7684\u91d1\u724c\u7ffb\u500d\u4e86\uff1f", "reasoning_type": "+ * C H", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT SUM ( 2 * Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"", "question": "\u5047\u8bbe\u6bcf\u4e2a\u4ff1\u4e50\u90e8\u7684\u91d1\u724c\u6570\u91cf\u90fd\u662f\u73b0\u5728\u7684\u4e24\u500d\uff0c\u7ed9\u51fa\u4f4d\u4e8e\u4e16\u754c\u4e0a\u6700\u957f\u7684\u94c1\u8def\u6240\u5728\u7684\u56fd\u5bb6\u7684\u6240\u6709\u4ff1\u4e50\u90e8\u7684\u83b7\u5f97\u7684\u6240\u6709\u5956\u724c\u603b\u6570\u3002", "reasoning_type": "+ * C H", "commonsense_knowledge": "The Trans-Siberian Railway located at Russia is the longest railway line in the world."}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "\u6392\u540d\u7b2c\u4e00\u7684\u4ff1\u4e50\u90e8\u62e5\u6709\u7684\u5956\u724c\u603b\u6570\u662f\u7b2c\u4e09\u540d\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "\u6392\u540d\u6700\u9ad8\u7684\u4ff1\u4e50\u90e8\u6240\u83b7\u5f97\u7684\u6240\u6709\u5956\u724c\u603b\u6570\u662f\u4f4d\u4e8e\u6392\u884c\u699c\u7b2c\u4e09\u4f4d\u7684\u4ff1\u4e50\u90e8\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + 3 * Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "\u6392\u540d\u7b2c\u4e00\u7684\u4ff1\u4e50\u90e8\u62e5\u6709\u7684\u5956\u724c\u603b\u6570\u662f\u7b2c\u4e09\u540d\u7684\u591a\u5c11\u500d\uff0c\u5982\u679c\u6392\u540d\u7b2c\u4e00\u7684\u4ff1\u4e50\u90e8\u7684\u94dc\u724c\u7ffb\u4e86\u4e09\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + 3 * Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )", "question": "\u5018\u82e5\u4f4d\u4e8e\u6392\u884c\u699c\u7b2c\u4e00\u4f4d\u7684\u4ff1\u4e50\u90e8\u83b7\u5f97\u7684\u94dc\u724c\u6570\u91cf\u662f\u5f53\u524d\u7684\u4e09\u500d\uff0c\u90a3\u4e48\u6392\u540d\u6700\u9ad8\u4ff1\u4e50\u90e8\u6240\u83b7\u5f97\u7684\u6240\u6709\u5956\u724c\u603b\u6570\u662f\u4f4d\u4e8e\u6392\u884c\u699c\u7b2c\u4e09\u4f4d\u7684\u4ff1\u4e50\u90e8\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"F\" )", "question": "\u5982\u679c\u4e00\u679a\u91d1\u724c\u53ef\u4ee5\u83b7\u5f975\u4e2a\u79ef\u5206\uff0c\u4e00\u679a\u5927\u94f6\u724c\u83b7\u5f973\u5206\uff0c\u4e00\u679a\u5c0f\u94f6\u724c\u83b7\u5f972\u5206\uff0c\u4e00\u679a\u94dc\u724c\u83b7\u5f971\u5206\u3002\u83b7\u5f97\u6700\u591a\u79ef\u5206\u7684\u4ff1\u4e50\u90e8\u4f4d\u4e8e\u54ea\u91cc\uff0c\u6210\u7acb\u4e8e\u54ea\u5e74\uff0c\u6709\u51e0\u4e2a\u7537\u6559\u7ec3\uff0c\u5973\u6559\u7ec3\uff1f", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"F\" )", "question": "\u5982\u679c\u4e00\u679a\u91d1\u724c\uff0c\u4e00\u679a\u5927\u94f6\u724c\uff0c\u4e00\u679a\u5c0f\u94f6\u724c\uff0c\u548c\u4e00\u679a\u94dc\u724c\u5206\u522b\u5bf9\u5e945\u4e2a\u79ef\u5206\uff0c3\u4e2a\u79ef\u5206\uff0c2\u4e2a\u79ef\u5206\u548c1\u4e2a\u79ef\u5206\u3002\u90a3\u4e48\u79ef\u5206\u6570\u91cf\u6700\u591a\u7684\u4ff1\u4e50\u90e8\u4f4d\u4e8e\u54ea\u91cc\uff0c\u6210\u7acb\u4e8e\u54ea\u5e74\uff0c\u7537\u5973\u6559\u7ec3\u5206\u522b\u6709\u591a\u5c11\u4f4d\uff1f", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"F\" )", "question": "\u4e00\u679a\u91d1\u724c\u53ef\u4ee5\u83b7\u5f975\u4e2a\u79ef\u5206\uff0c\u4e00\u679a\u5927\u94f6\u724c\u83b7\u5f973\u5206\uff0c\u4e00\u679a\u5c0f\u94f6\u724c\u83b7\u5f972\u5206\uff0c\u4e00\u679a\u94dc\u724c\u83b7\u5f971\u5206\u3002\u5982\u679c\u91d1\u724c\u6570\u6700\u5c11\u7684\u4ff1\u4e50\u90e8\u7684\u94dc\u724c\u6570\u91cf\u548c\u91d1\u724c\u6570\u91cf\u6700\u591a\u7684\u4ff1\u4e50\u90e8\u7684\u94dc\u724c\u6570\u91cf\u4e00\u6837\u591a\uff0c\u83b7\u5f97\u6700\u591a\u79ef\u5206\u7684\u4ff1\u4e50\u90e8\u4f4d\u4e8e\u54ea\u91cc\uff0c\u6210\u7acb\u4e8e\u54ea\u5e74\uff0c\u6709\u51e0\u4e2a\u7537\u6559\u7ec3\uff0c\u5973\u6559\u7ec3\uff1f", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"F\" )", "question": "\u5047\u8bbe\u83b7\u5f97\u91d1\u724c\u6570\u91cf\u6700\u5c11\u7684\u4ff1\u4e50\u90e8\u7684\u94dc\u724c\u6570\u91cf\u548c\u91d1\u724c\u6570\u91cf\u6700\u591a\u7684\u4ff1\u4e50\u90e8\u7684\u94dc\u724c\u6570\u91cf\u4e00\u6837\u591a\uff0c\u4e14\u4e00\u679a\u91d1\u724c\u3001\u4e00\u679a\u5927\u94f6\u724c\u3001\u4e00\u679a\u5c0f\u94f6\u724c\u3001\u548c\u4e00\u679a\u94dc\u724c\u5206\u522b\u5bf9\u5e945\u4e2a\u79ef\u5206\u30013\u4e2a\u79ef\u5206\u30012\u4e2a\u79ef\u5206\u548c1\u4e2a\u79ef\u5206\u3002\u90a3\u4e48\u79ef\u5206\u6570\u91cf\u6700\u591a\u7684\u4ff1\u4e50\u90e8\u4f4d\u4e8e\u54ea\u91cc\uff0c\u6210\u7acb\u4e8e\u54ea\u5e74\uff0c\u7537\u5973\u6559\u7ec3\u5206\u522b\u6709\u591a\u5c11\u4f4d\uff1f", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" GROUP BY Player_ID ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" GROUP BY Player_ID )", "question": "\u83b7\u5f97\u8fc7\u51a0\u519b\u7684\u9009\u624b\u4e2d\uff0c\u5c0f\u5546\u4eba\u7684\u5360\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" GROUP BY Player_ID ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" GROUP BY Player_ID )", "question": "\u7ed9\u51fa\u5c0f\u5546\u4eba\u5728\u6240\u6709\u593a\u51a0\u9009\u624b\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u3002", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" AND Occupation = \"Small Businessman\" ) ) / ( ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" and Player_name != \"Ross Eadie\" GROUP BY Player_ID ) ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" AND Player_name != \"Ross Eadie\" GROUP BY Player_ID )", "question": "\u5047\u5982\u7f57\u65af\u4f0a\u8fea\u83b7\u5f97\u7684\u5176\u5b9e\u662f\u7b2c\u4e00\u540d\uff0c\u83b7\u5f97\u8fc7\u51a0\u519b\u7684\u9009\u624b\u4e2d\uff0c\u5c0f\u5546\u4eba\u7684\u5360\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" AND Occupation = \"Small Businessman\" ) ) / ( ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" and Player_name != \"Ross Eadie\" GROUP BY Player_ID ) ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" AND Player_name != \"Ross Eadie\" GROUP BY Player_ID )", "question": "\u5982\u679c\u7f57\u65af\u4f0a\u8fea\u5728\u5176\u53c2\u52a0\u7684\u6bd4\u8d5b\u4e2d\u83b7\u5f97\u7684\u5176\u5b9e\u662f\u51a0\u519b\uff0c\u7ed9\u51fa\u5c0f\u5546\u4eba\u5728\u6240\u6709\u593a\u51a0\u9009\u624b\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u3002", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\"", "question": "\u8a79\u59c6\u68ee\u6258\u9a6c\u65af\u6307\u5bfc\u7684\u9009\u624b\u53d6\u5f97\u51a0\u519b\u7684\u6982\u7387\u6709\u591a\u5927\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\"", "question": "\u6559\u7ec3\u4e3a\u8a79\u59c6\u68ee\u6258\u9a6c\u65af\u7684\u9009\u624b\u83b7\u5f97\u7b2c\u4e00\u540d\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Player_name = \"Fiona Shiells\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\" AND A.Player_name != \"Fiona Shiells\"", "question": "\u5047\u5982\u83f2\u5965\u5a1c\u5e0c\u5c14\u65af\u83b7\u5f97\u7684\u5176\u5b9e\u662f\u7b2c\u4e00\u540d\uff0c\u8a79\u59c6\u68ee\u6258\u9a6c\u65af\u6307\u5bfc\u7684\u9009\u624b\u53d6\u5f97\u51a0\u519b\u7684\u6982\u7387\u6709\u591a\u5927\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Player_name = \"Fiona Shiells\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\" AND A.Player_name != \"Fiona Shiells\"", "question": "\u5982\u679c\u83f2\u5965\u5a1c\u5e0c\u5c14\u65af\u5728\u5176\u6240\u53c2\u52a0\u7684\u90a3\u573a\u6bd4\u8d5b\u4e2d\u593a\u51a0\u4e86\uff0c\u6559\u7ec3\u4e3a\u8a79\u59c6\u68ee\u6258\u9a6c\u65af\u7684\u9009\u624b\u83b7\u5f97\u7b2c\u4e00\u540d\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT Coach_name , n_1st - ( SELECT MIN ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) ) AS diff FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) WHERE n_1st = ( SELECT MAX ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) )", "question": "\u54ea\u4e2a\u6559\u7ec3\u57f9\u517b\u7684\u51a0\u519b\u6700\u591a\uff0c\u4ed6\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u6bd4\u57f9\u517b\u7684\u51a0\u519b\u6700\u5c11\u7684\u6559\u7ec3\u57f9\u517b\u7684\u51a0\u519b\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT Coach_name , n_1st - ( SELECT MIN ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) ) AS diff FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) WHERE n_1st = ( SELECT MAX ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) )", "question": "\u57f9\u517b\u51fa\u6700\u591a\u51a0\u519b\u7684\u6559\u7ec3\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5176\u57f9\u517b\u7684\u51a0\u519b\u6570\u91cf\u6bd4\u57f9\u517b\u7684\u51a0\u519b\u6700\u5c11\u7684\u6559\u7ec3\u57f9\u517b\u7684\u51a0\u519b\u6570\u91cf\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "\u6559\u7ec3\u6bcf\u57f9\u517b\u4e00\u4e2a\u51a0\u519b\u53ef\u4ee5\u83b7\u5f97100\u7f8e\u5143\u5956\u91d1\uff0c\u6bcf\u57f9\u517b\u4e00\u4e2a\u4e9a\u519b\u53ef\u4ee5\u83b7\u5f9760\u7f8e\u5143\u5956\u91d1\uff0c\u6bcf\u57f9\u517b\u4e00\u4e2a\u5b63\u519b\u53ef\u4ee5\u83b7\u5f9720\u7f8e\u5143\u5956\u91d1\u3002\u54ea\u4e2a\u6559\u7ec3\u83b7\u5f97\u7684\u5956\u91d1\u6700\u591a\uff0c\u4ed6\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u4ed6\u7684\u5956\u91d1\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "\u6559\u7ec3\u6bcf\u57f9\u517b\u4e00\u4e2a\u51a0\u519b\u3001\u4e9a\u519b\u3001\u5b63\u519b\u53ef\u4ee5\u5206\u522b\u83b7\u5f97100\u7f8e\u5143\u300160\u7f8e\u5143\u548c20\u7f8e\u5143\u7684\u5956\u91d1\uff0c\u90a3\u4e48\u83b7\u5f97\u5956\u91d1\u6570\u91cf\u6700\u591a\u7684\u6559\u7ec3\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5176\u83b7\u5f97\u4e86\u591a\u5c11\u5956\u91d1\uff1f", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND C.Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) AND Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) UNION SELECT ( SELECT C.Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) AS Coach_name , COUNT ( * ) + 1 AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND A.Player_name = \"Rachel Heinrichs\" ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "\u6559\u7ec3\u6bcf\u57f9\u517b\u4e00\u4e2a\u51a0\u519b\u53ef\u4ee5\u83b7\u5f97100\u7f8e\u5143\u5956\u91d1\uff0c\u6bcf\u57f9\u517b\u4e00\u4e2a\u4e9a\u519b\u53ef\u4ee5\u83b7\u5f9760\u7f8e\u5143\u5956\u91d1\uff0c\u6bcf\u57f9\u517b\u4e00\u4e2a\u5b63\u519b\u53ef\u4ee5\u83b7\u5f9720\u7f8e\u5143\u5956\u91d1\u3002\u5982\u679c\u96f7\u5207\u5c14\u00b7\u6d77\u56e0\u91cc\u5e0c\u83b7\u5f97\u7684\u5176\u5b9e\u662f\u7b2c\u4e8c\u540d\uff0c\u54ea\u4e2a\u6559\u7ec3\u83b7\u5f97\u7684\u5956\u91d1\u6700\u591a\uff0c\u5176\u59d3\u540d\u548c\u5956\u91d1\u5206\u522b\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND C.Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) AND Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) UNION SELECT ( SELECT C.Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) AS Coach_name , COUNT ( * ) + 1 AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND A.Player_name = \"Rachel Heinrichs\" ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name", "question": "\u6559\u7ec3\u6bcf\u57f9\u517b\u4e00\u4e2a\u51a0\u519b\u3001\u4e9a\u519b\u3001\u5b63\u519b\u53ef\u4ee5\u5206\u522b\u83b7\u5f97100\u7f8e\u5143\u300160\u7f8e\u5143\u548c20\u7f8e\u5143\u7684\u5956\u91d1\uff0c\u52a0\u5165\u5982\u679c\u96f7\u5207\u5c14\u00b7\u6d77\u56e0\u91cc\u5e0c\u83b7\u5f97\u7684\u5176\u5b9e\u662f\u7b2c\u4e8c\u540d\uff0c\u90a3\u4e48\u83b7\u5f97\u5956\u91d1\u6570\u91cf\u6700\u591a\u7684\u6559\u7ec3\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5176\u83b7\u5f97\u4e86\u591a\u5c11\u5956\u91d1\uff1f", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001", "question": "\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u4ff1\u4e50\u90e8\u6210\u7acb\u4e8e21\u4e16\u7eaa\u4e4b\u524d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001", "question": "\u6210\u7acb\u65f6\u95f4\u572821\u4e16\u7eaa\u4ee5\u524d\u7684\u4ff1\u4e50\u90e8\u6570\u91cf\u5360\u6bd4\u662f\u767e\u5206\u4e4b\u51e0\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM club WHERE Region = \"USA\" ) ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001 AND Region != \"USA\"", "question": "\u5982\u679c\u7f8e\u56fd\u6240\u6709\u7684\u4ff1\u4e50\u90e8\u662f\u57282000\u5e74\u6210\u7acb\u7684\uff0c\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u4ff1\u4e50\u90e8\u6210\u7acb\u4e8e21\u4e16\u7eaa\u4e4b\u524d\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 100.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM club WHERE Region = \"USA\" ) ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001 AND Region != \"USA\"", "question": "\u5047\u5982\u4f4d\u4e8e\u7f8e\u56fd\u7684\u6240\u6709\u4ff1\u4e50\u90e8\u6210\u7acb\u65f6\u95f4\u90fd\u662f2000\u5e74\uff0c\u90a3\u4e48\u6210\u7acb\u65f6\u95f4\u572821\u4e16\u7eaa\u4ee5\u524d\u7684\u4ff1\u4e50\u90e8\u6570\u91cf\u5360\u6bd4\u662f\u767e\u5206\u4e4b\u51e0\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * ( SELECT Votes FROM player WHERE Player_name = \"Ross C. Martin\" )", "question": "\u54ea\u4f4d\u5c45\u4f4f\u5728\u52a0\u62ff\u5927\u9a6c\u5c3c\u6258\u5df4\u7701\u9996\u5e9c\u7684\u7403\u5458\u83b7\u5f97\u7684\u9009\u7968\u662f\u7f57\u65af\u9a6c\u4e01\u7684\u4e24\u500d\u591a\uff1f\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * ( SELECT Votes FROM player WHERE Player_name = \"Ross C. Martin\" )", "question": "\u83b7\u5f97\u9009\u7968\u6bd4\u7f57\u65af\u9a6c\u4e01\u7684\u4e24\u500d\u8fd8\u591a\u7684\u7403\u5458\u4e2d\uff0c\u54ea\u4e9b\u5c45\u4f4f\u5728\u52a0\u62ff\u5927\u9a6c\u5c3c\u6258\u5df4\u7701\u9996\u5e9c\uff1f\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\u3002", "reasoning_type": "* C", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * 2000 AND Player_name != \"Ross C. Martin\"", "question": "\u5982\u679c\u7f57\u65af\u9a6c\u4e01\u83b7\u5f97\u4e862000\u5f20\u9009\u7968\uff0c\u54ea\u4f4d\u5c45\u4f4f\u5728\u52a0\u62ff\u5927\u9a6c\u5c3c\u6258\u5df4\u7701\u9996\u5e9c\u7684\u7403\u5458\u83b7\u5f97\u7684\u9009\u7968\u662f\u7f57\u65af\u9a6c\u4e01\u7684\u4e24\u500d\u591a\uff1f\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * 2000 AND Player_name != \"Ross C. Martin\"", "question": "\u5982\u679c\u7f57\u65af\u9a6c\u4e01\u83b7\u5f97\u4e862000\u5f20\u9009\u7968\uff0c\u90a3\u4e48\u83b7\u5f97\u9009\u7968\u6bd4\u7f57\u65af\u9a6c\u4e01\u7684\u4e24\u500d\u8fd8\u591a\u7684\u7403\u5458\u4e2d\uff0c\u54ea\u4e9b\u5c45\u4f4f\u5728\u52a0\u62ff\u5927\u9a6c\u5c3c\u6258\u5df4\u7701\u9996\u5e9c\uff1f\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\u3002", "reasoning_type": "* C H", "commonsense_knowledge": "Winnipeg is the capital of the Manitoba province of Canada."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - ( SELECT MIN ( Votes ) FROM player ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "\u54ea\u4e9b\u7403\u5458\u753121\u4e16\u7eaa\u4e4b\u524d\u6210\u7acb\u7684\u4ff1\u4e50\u90e8\u7684\u6559\u7ec3\u6307\u5bfc\uff0c\u4ed6\u4eec\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u9009\u7968\u6bd4\u6700\u4f4e\u9009\u7968\u7684\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - ( SELECT MIN ( Votes ) FROM player ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "\u54ea\u4e9b\u7403\u5458\u7531\u6210\u7acb\u4e8e21\u4e16\u754c\u4e4b\u524d\u7684\u4ff1\u4e50\u90e8\u7684\u6559\u7ec3\u6307\u5bfc\uff0c\u4ed6\u4eec\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u9009\u7968\u8d85\u51fa\u6700\u4f4e\u9009\u7968\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - 1000 AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "\u5982\u679c\u6700\u4f4e\u6295\u7968\u6570\u91cf\u662f1000\uff0c\u54ea\u4e9b\u7403\u5458\u753121\u4e16\u7eaa\u4e4b\u524d\u6210\u7acb\u7684\u4ff1\u4e50\u90e8\u7684\u6559\u7ec3\u6307\u5bfc\uff0c\u4ed6\u4eec\u7684\u59d3\u540d\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u9009\u7968\u6bd4\u6700\u4f4e\u7684\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT A.Player_name , A.Votes - 1000 AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006", "question": "\u5047\u8bbe\u6700\u4f4e\u6295\u7968\u6570\u91cf\u662f1000\uff0c\u90a3\u4e48\u54ea\u4e9b\u7403\u5458\u7531\u6210\u7acb\u4e8e21\u4e16\u754c\u4e4b\u524d\u7684\u4ff1\u4e50\u90e8\u7684\u6559\u7ec3\u6307\u5bfc\uff0c\u4ed6\u4eec\u53eb\u4ec0\u4e48\u540d\u5b57\uff1f\u4ed6\u4eec\u7684\u9009\u7968\u8d85\u51fa\u6700\u4f4e\u9009\u7968\u591a\u5c11\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "The 21st century begins with 1 January 2001."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) AS ratio FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Rank = \"1st\"", "question": "\u6ca1\u6709\u6559\u7ec3\u7684\u9009\u624b\u83b7\u5f97\u51a0\u519b\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) AS ratio FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Rank = \"1st\"", "question": "\u6ca1\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u53c2\u8d5b\u9009\u624b\u593a\u51a0\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) - ( SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" )", "question": "\u6709\u6559\u7ec3\u7684\u9009\u624b\u83b7\u5f97\u524d\u4e24\u540d\u7684\u6982\u7387\u6bd4\u6ca1\u6709\u6559\u7ec3\u7684\u9009\u624b\u83b7\u5f97\u524d\u4e24\u540d\u7684\u6982\u7387\u5927\u591a\u5c11\uff1f", "reasoning_type": "- * / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) - ( SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" )", "question": "\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u53c2\u8d5b\u9009\u624b\u83b7\u5f97\u51a0\u4e9a\u519b\u7684\u6982\u7387\u6bd4\u6ca1\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u9009\u624b\u83b7\u5f97\u51a0\u4e9a\u519b\u7684\u6982\u7387\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- * / C", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT prob_1 - prob_2 AS diff FROM ( SELECT 1.0 * ( COUNT ( * ) - ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) AND A.Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE A.Player_name != \"Niki Ashton\" ) AS prob_1 FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) ) JOIN ( SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) From player WHERE ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) + 1 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Player_name != \"Niki Ashton\" ) AS prob_2 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name != \"Niki Ashton\" )", "question": "\u5047\u5982\u5c3c\u57fa\u00b7\u963f\u4ec0\u987f\u5e76\u6ca1\u6709\u6559\u7ec3\uff0c\u6709\u6559\u7ec3\u7684\u9009\u624b\u83b7\u5f97\u524d\u4e24\u540d\u7684\u6982\u7387\u6bd4\u6ca1\u6709\u6559\u7ec3\u7684\u9009\u624b\u83b7\u5f97\u524d\u4e24\u540d\u7684\u6982\u7387\u5927\u591a\u5c11\uff1f", "reasoning_type": "- + * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "riding_club", "query": "SELECT prob_1 - prob_2 AS diff FROM ( SELECT 1.0 * ( COUNT ( * ) - ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) AND A.Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE A.Player_name != \"Niki Ashton\" ) AS prob_1 FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) ) JOIN ( SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) From player WHERE ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) + 1 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Player_name != \"Niki Ashton\" ) AS prob_2 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name != \"Niki Ashton\" )", "question": "\u5982\u679c\u5c3c\u57fa\u00b7\u963f\u4ec0\u987f\u6ca1\u6709\u6559\u7ec3\u6307\u5bfc\uff0c\u90a3\u4e48\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u53c2\u8d5b\u9009\u624b\u83b7\u5f97\u51a0\u4e9a\u519b\u7684\u6982\u7387\u6bd4\u6ca1\u6709\u6559\u7ec3\u6307\u5bfc\u7684\u9009\u624b\u83b7\u5f97\u51a0\u4e9a\u519b\u7684\u6982\u7387\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- + * / C H", "commonsense_knowledge": "A simple probability is calculated by dividing a specific outcome by all the possible outcomes."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * A.vision + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "\u4f20\u7403\u5f97\u5206\u5305\u62ec5%\u7684\u5f27\u7ebf\u7403\u30015%\u7684\u4efb\u610f\u7403\u7cbe\u5ea6\u300115%\u7684\u957f\u4f20\u300120%\u7684\u4f20\u4e2d\u300120%\u7684\u89c6\u91ce\u548c35%\u7684\u77ed\u4f20\u3002\u5217\u51fa\u4f20\u7403\u5f97\u5206\u6700\u9ad8\u7684\u524d10\u540d\u7403\u5458\u7684\u59d3\u540d\u548c\u5f53\u524d\u5e74\u9f84\u3002", "reasoning_type": "+ - * C", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * A.vision + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "\u4f20\u7403\u80fd\u529b\u503c\u75315%\u7684\u5f27\u7ebf\u7403\u30015%\u7684\u4efb\u610f\u7403\u7cbe\u5ea6\u300115%\u7684\u957f\u4f20\u300120%\u7684\u4f20\u4e2d\u300120%\u7684\u89c6\u91ce\u548c35%\u7684\u77ed\u4f20\u7ec4\u6210\u3002\u7ed9\u51fa\u4f20\u7403\u80fd\u529b\u503c\u6392\u540d\u524d10\u7684\u7403\u5458\u59d3\u540d\u548c\u5f53\u524d\u7684\u5e74\u9f84\u3002", "reasoning_type": "+ - * C", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * 80 + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "\u4f20\u7403\u5f97\u5206\u5305\u62ec5%\u7684\u5f27\u7ebf\u7403\u30015%\u7684\u4efb\u610f\u7403\u7cbe\u5ea6\u300115%\u7684\u957f\u4f20\u300120%\u7684\u4f20\u4e2d\u300120%\u7684\u89c6\u91ce\u548c35%\u7684\u77ed\u4f20\u3002\u5047\u5982\u6240\u6709\u7403\u5458\u7684\u89c6\u91ce\u90fd\u662f80\u5206\uff0c\u5217\u51fa\u4f20\u7403\u5f97\u5206\u6700\u9ad8\u7684\u524d10\u540d\u7403\u5458\u7684\u59d3\u540d\u548c\u5f53\u524d\u5e74\u9f84\u3002", "reasoning_type": "+ - * C H", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT name , age FROM ( SELECT B.player_name AS name , MAX ( 0.05 * A.curve + 0.05 * A.free_kick_accuracy + 0.15 * A.long_passing + 0.2 * A.crossing + 0.2 * 80 + 0.35 * A.short_passing ) AS passing_rating , DATE ( \"now\" ) - strftime ( \"%Y-%m-%d\" , B.birthday ) AS age FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY passing_rating DESC LIMIT 10 )", "question": "\u4f20\u7403\u80fd\u529b\u503c\u75315%\u7684\u5f27\u7ebf\u7403\u30015%\u7684\u4efb\u610f\u7403\u7cbe\u5ea6\u300115%\u7684\u957f\u4f20\u300120%\u7684\u4f20\u4e2d\u300120%\u7684\u89c6\u91ce\u548c35%\u7684\u77ed\u4f20\u7ec4\u6210\u3002\u5047\u8bbe\u6240\u6709\u7403\u5458\u7684\u89c6\u91ce\u5f97\u5206\u90fd\u662f80\u5206\uff0c\u7ed9\u51fa\u4f20\u7403\u80fd\u529b\u503c\u6392\u540d\u524d10\u7684\u7403\u5458\u59d3\u540d\u548c\u5f53\u524d\u7684\u5e74\u9f84\u3002", "reasoning_type": "+ - * C H", "commonsense_knowledge": "Current age is computed by substracting the date of birth from current date."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * A.acceleration + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "\u901f\u5ea6\u8bc4\u5206\u5305\u62ec45%\u7684\u52a0\u901f\u8bc4\u5206\u548c55%\u7684\u51b2\u523a\u901f\u5ea6\u8bc4\u5206\u3002\u5217\u51fa\u901f\u5ea6\u6392\u540d\u524d\u4e09\u7684\u9009\u624b\u7684\u540d\u5b57\uff0c\u5e76\u5217\u51fa\u4ed6\u4eec\u7684\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u4f53\u91cd\u6307\u6570\u3002", "reasoning_type": "+ * / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * A.acceleration + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "\u901f\u5ea6\u80fd\u529b\u503c\u7531\u52a0\u901f\u8bc4\u5206\u768445%\u548c\u51b2\u523a\u901f\u5ea6\u8bc4\u5206\u768455%\u7ec4\u6210\u3002\u901f\u5ea6\u6392\u540d\u524d\u4e09\u7684\u9009\u624b\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5e76\u5217\u51fa\u4ed6\u4eec\u7684\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u4f53\u91cd\u6307\u6570\u3002", "reasoning_type": "+ * / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * 75 + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "\u901f\u5ea6\u8bc4\u5206\u5305\u62ec45%\u7684\u52a0\u901f\u8bc4\u5206\u548c55%\u7684\u51b2\u523a\u901f\u5ea6\u8bc4\u5206\u3002\u5047\u5982\u6240\u6709\u7403\u5458\u7684\u52a0\u901f\u8bc4\u5206\u90fd\u662f75\u5206\uff0c\u5217\u51fa\u901f\u5ea6\u6392\u540d\u524d\u4e09\u7684\u7403\u5458\u7684\u540d\u5b57\uff0c\u5e76\u5217\u51fa\u4ed6\u4eec\u7684\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u4f53\u91cd\u6307\u6570\u3002", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT player_name , height , weight , BMI FROM ( SELECT B.player_name , MAX ( 0.45 * 75 + 0.55 * A.sprint_speed ) AS pace_rating , B.height , B.weight , B.weight * 0.45 / ( ( 1.0 * B.height / 100 ) * ( 1.0 * B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY pace_rating DESC LIMIT 3", "question": "\u901f\u5ea6\u80fd\u529b\u503c\u7531\u52a0\u901f\u8bc4\u5206\u768445%\u548c\u51b2\u523a\u901f\u5ea6\u8bc4\u5206\u768455%\u7ec4\u6210\u3002\u5982\u679c\u6bcf\u4e2a\u7403\u5458\u7684\u52a0\u901f\u8bc4\u5206\u90fd\u662f75\u5206\uff0c\u90a3\u4e48\u901f\u5ea6\u6392\u540d\u524d\u4e09\u7684\u9009\u624b\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5e76\u5217\u51fa\u4ed6\u4eec\u7684\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u4f53\u91cd\u6307\u6570\u3002", "reasoning_type": "+ * / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , MAX ( ABS ( A.potential - A.overall_rating ) ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY difference DESC LIMIT 3", "question": "\u5217\u51fa\u6574\u4f53\u8bc4\u5206\u548c\u6f5c\u5728\u80fd\u529b\u5dee\u5f02\u6700\u5927\u7684\u524d\u4e09\u540d\u7403\u5458\u7684\u540d\u5b57\uff0c\u5e76\u5217\u51fa\u5dee\u5f02\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , MAX ( ABS ( A.potential - A.overall_rating ) ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ORDER BY difference DESC LIMIT 3", "question": "\u6574\u4f53\u8bc4\u5206\u548c\u6f5c\u5728\u80fd\u529b\u76f8\u5dee\u6700\u5927\u7684\u524d\u4e09\u540d\u7403\u5458\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5b83\u4eec\u6574\u4f53\u8bc4\u5206\u548c\u6f5c\u5728\u80fd\u529b\u7684\u5dee\u5f02\u5206\u522b\u662f\u591a\u5c11\u3002", "reasoning_type": "- C", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( difference ) FROM ( SELECT B.player_name , ABS ( A.overall_rating - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating >= 70 UNION SELECT B.player_name , ABS ( A.overall_rating + 5 - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating < 70 ) GROUP BY player_name ORDER BY difference DESC LIMIT 3", "question": "\u5047\u5982\u603b\u8bc4\u5206\u4f4e\u4e8e70\u7684\u7403\u5458\u7684\u603b\u8bc4\u5206\u589e\u52a0\u4e865\u5206\uff0c\u5217\u51fa\u603b\u8bc4\u5206\u548c\u6f5c\u5728\u80fd\u529b\u5dee\u5f02\u6700\u5927\u7684\u524d\u4e09\u540d\u7403\u5458\u7684\u540d\u5b57\u3002", "reasoning_type": "+ - C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( difference ) FROM ( SELECT B.player_name , ABS ( A.overall_rating - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating >= 70 UNION SELECT B.player_name , ABS ( A.overall_rating + 5 - A.potential ) AS difference FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.overall_rating < 70 ) GROUP BY player_name ORDER BY difference DESC LIMIT 3", "question": "\u5047\u8bbe\u6240\u6709\u603b\u8bc4\u5206\u4e0d\u523070\u5206\u7684\u7403\u5458\u7684\u603b\u8bc4\u5206\u90fd\u589e\u52a05\u5206\uff0c\u90a3\u4e48\u603b\u8bc4\u5206\u548c\u6f5c\u5728\u80fd\u529b\u503c\u5dee\u5f02\u6700\u5927\u7684\u524d\u4e09\u540d\u7403\u5458\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f", "reasoning_type": "+ - C H", "commonsense_knowledge": "Diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT left_footed , right_footed , ABS ( left_footed - right_footed ) AS difference FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"right\" )", "question": "\u8bc4\u520680\u523089\u5206\u8868\u793a\u975e\u5e38\u597d\u3002\u5728\u8fc7\u4eba\u4e0d\u5931\u7403\u80fd\u529b\u975e\u5e38\u597d\u7684\u7403\u5458\u4e2d\uff0c\u5de6\u811a\u7403\u5458\u6709\u591a\u5c11\uff0c\u53f3\u811a\u7403\u5458\u6709\u591a\u5c11\uff0c\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "(1) Dribbling attribute describes how well a player can pass without conceding the ball and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT left_footed , right_footed , ABS ( left_footed - right_footed ) AS difference FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_footed FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.dribbling BETWEEN 80 AND 89 AND A.preferred_foot = \"right\" )", "question": "\u5982\u679c\u4e00\u9879\u80fd\u529b\u7684\u5f97\u5206\u572880\u5206\u548c89\u5206\u4e4b\u95f4\uff0c\u6211\u4eec\u79f0\u8fd9\u4f4d\u7403\u5458\u7684\u8fd9\u9879\u80fd\u529b\u975e\u5e38\u597d\u3002\u90a3\u4e48\u5728\u8fc7\u4eba\u4e0d\u5931\u7403\u80fd\u529b\u975e\u5e38\u597d\u7684\u7403\u5458\u4e2d\uff0c\u5de6\u811a\u7403\u5458\u548c\u53f3\u811a\u7403\u5458\u7684\u6570\u91cf\u662f\u591a\u5c11\uff0c\u5dee\u522b\u662f\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "(1) Dribbling attribute describes how well a player can pass without conceding the ball and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT player_name FROM ( SELECT B.player_name , MAX ( A.positioning + A.gk_handling ) AS goalkeeper_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY goalkeeper_rating DESC LIMIT 1", "question": "\u5c31\u5e72\u51c0\u63a5\u7403\u548c\u6251\u6551\u65f6\u6b63\u786e\u7ad9\u4f4d\u7684\u80fd\u529b\u800c\u8a00\uff0c\u54ea\u540d\u5b88\u95e8\u5458\u7684\u603b\u5f97\u5206\u6700\u9ad8\uff1f\u7ed9\u51fa\u4ed6\u7684\u540d\u5b57\u3002", "reasoning_type": "+ C", "commonsense_knowledge": "Position attribute for a goalkeeper is the ability to position correctly for saves. Handling is an exclusive goalkeeper attribute used to measure how clean he catches the ball."}, {"db_id": "soccer_1", "query": "SELECT player_name FROM ( SELECT B.player_name , MAX ( A.positioning + A.gk_handling ) AS goalkeeper_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id GROUP BY B.player_name ) ORDER BY goalkeeper_rating DESC LIMIT 1", "question": "\u54ea\u540d\u5b88\u95e8\u5458\u5728\u5e72\u51c0\u63a5\u7403\u548c\u6251\u6551\u65f6\u6b63\u786e\u7ad9\u4f4d\u7684\u80fd\u529b\u4e0a\u603b\u5f97\u5206\u6700\u9ad8\uff1f\u7ed9\u51fa\u4ed6\u7684\u540d\u5b57\u3002", "reasoning_type": "+ C", "commonsense_knowledge": "Position attribute for a goalkeeper is the ability to position correctly for saves. Handling is an exclusive goalkeeper attribute used to measure how clean he catches the ball."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.long_shots + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "\u5728\u6bd4\u8d5b\u4e2d\u7d2f\u5f97\u6700\u5feb\u7684\u7403\u5458\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u4ed6\u5728\u8fdc\u5c04\u51c6\u786e\u5ea6\u548c\u5c04\u95e8\u529b\u91cf\u65b9\u9762\u7684\u603b\u5f97\u5206\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ C", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.long_shots + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "\u7ed9\u51fa\u5728\u6bd4\u8d5b\u4e2d\u7d2f\u5f97\u6700\u5feb\u7684\u7403\u5458\u7684\u59d3\u540d\uff0c\u4ee5\u53ca\u4ed6\u5728\u8fdc\u5c04\u51c6\u786e\u5ea6\u548c\u5c04\u95e8\u529b\u91cf\u65b9\u9762\u7684\u603b\u5f97\u5206\u3002", "reasoning_type": "+ C", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 90 + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "\u5728\u6bd4\u8d5b\u4e2d\u7d2f\u5f97\u6700\u5feb\u7684\u7403\u5458\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5982\u679c\u4ed6\u7684\u8fdc\u5c04\u51c6\u786e\u5ea6\u8bc4\u5206\u662f90\uff0c\u4ed6\u5728\u8fdc\u5c04\u51c6\u786e\u5ea6\u548c\u5c04\u95e8\u529b\u91cf\u65b9\u9762\u7684\u603b\u5f97\u5206\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ C H", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 90 + A.shot_power AS total_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE NOT ( A.stamina IS NULL ) ORDER BY A.stamina ASC LIMIT 1", "question": "\u7ed9\u51fa\u5728\u6bd4\u8d5b\u4e2d\u7d2f\u5f97\u6700\u5feb\u7684\u7403\u5458\u7684\u59d3\u540d\uff0c\u5047\u8bbe\u4ed6\u7684\u8fdc\u5c04\u51c6\u786e\u5ea6\u8bc4\u5206\u4e3a90\u5206\uff0c\u90a3\u4ed6\u5728\u8fdc\u5c04\u51c6\u786e\u5ea6\u548c\u5c04\u95e8\u529b\u91cf\u65b9\u9762\u7684\u603b\u5f97\u5206\u662f\u591a\u5c11\u3002", "reasoning_type": "+ C H", "commonsense_knowledge": "Stamina attribute determines the rate at which a player will tire during a game."}, {"db_id": "soccer_1", "query": "SELECT best_team_name , lowest_team_name FROM ( SELECT B.team_short_name AS best_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating DESC LIMIT 1 ) JOIN ( SELECT B.team_short_name AS lowest_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating ASC LIMIT 1 )", "question": "\u9632\u5b88\u8bc4\u5206\u7531\u538b\u529b\u3001\u4fb5\u7565\u6027\u548c\u7403\u961f\u5bbd\u5ea6\u7684\u8bc4\u5206\u7ec4\u6210\u3002\u63d0\u4f9b\u9632\u5b88\u5f97\u5206\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u7403\u961f\u7684\u7f29\u5199\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT best_team_name , lowest_team_name FROM ( SELECT B.team_short_name AS best_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating DESC LIMIT 1 ) JOIN ( SELECT B.team_short_name AS lowest_team_name , A.defencePressure + A.defenceAggression + A.defenceTeamWidth AS defensive_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id ORDER BY defensive_rating ASC LIMIT 1 )", "question": "\u9632\u5b88\u80fd\u529b\u7531\u538b\u529b\u3001\u4fb5\u7565\u6027\u548c\u7403\u961f\u5bbd\u5ea6\u7684\u8bc4\u5206\u6784\u6210\u3002\u7ed9\u51fa\u9632\u5b88\u80fd\u529b\u6700\u597d\u548c\u6700\u5dee\u7684\u7403\u961f\u7684\u7f29\u5199\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + A.buildUpPlayDribbling AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + A.buildUpPlayDribbling DESC LIMIT 1", "question": "\u5728\u4f7f\u7528\u81ea\u7531\u5f0f\u521b\u9020\u673a\u4f1a\u4f4d\u7f6e\u6218\u672f\u7684\u7403\u961f\u4e2d\uff0c\u54ea\u652f\u7403\u961f\u5728\u8fdb\u653b\u901f\u5ea6\u548c\u76d8\u5e26\u65b9\u9762\u7684\u7efc\u5408\u5f97\u5206\u6700\u9ad8\uff1f\u8bf7\u63d0\u4f9b\u7403\u961f\u7684\u5168\u540d\u548c\u7efc\u5408\u5f97\u5206\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + A.buildUpPlayDribbling AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + A.buildUpPlayDribbling DESC LIMIT 1", "question": "\u54ea\u652f\u4f7f\u7528\u81ea\u7531\u5f0f\u521b\u9020\u673a\u4f1a\u4f4d\u7f6e\u6218\u672f\u7684\u7403\u961f\u5728\u8fdb\u653b\u901f\u5ea6\u548c\u76d8\u5e26\u65b9\u9762\u7684\u7efc\u5408\u5f97\u5206\u6700\u9ad8\uff1f\u5217\u51fa\u7403\u961f\u7684\u5168\u540d\u548c\u7efc\u5408\u5f97\u5206\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + 60 AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + 60 DESC LIMIT 1", "question": "\u5728\u4f7f\u7528\u81ea\u7531\u5f0f\u521b\u9020\u673a\u4f1a\u4f4d\u7f6e\u6218\u672f\u7684\u7403\u961f\u4e2d\uff0c\u54ea\u652f\u7403\u961f\u5728\u8fdb\u653b\u901f\u5ea6\u548c\u76d8\u5e26\u65b9\u9762\u7684\u7efc\u5408\u5f97\u5206\u6700\u9ad8\uff0c\u5047\u8bbe\u6240\u6709\u7403\u961f\u76d8\u5e26\u65b9\u9762\u7684\u5f97\u5206\u662f60\uff1f\u8bf7\u63d0\u4f9b\u7403\u961f\u7684\u5168\u540d\u548c\u7efc\u5408\u5f97\u5206\u3002", "reasoning_type": "+ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.team_long_name , A.buildUpPlaySpeed + 60 AS combined_rating FROM Team_Attributes A JOIN Team B ON A.team_fifa_api_id = B.team_fifa_api_id WHERE A.chanceCreationPositioningClass = \"Free Form\" ORDER BY A.buildUpPlaySpeed + 60 DESC LIMIT 1", "question": "\u5047\u8bbe\u6bcf\u4e00\u652f\u7403\u961f\u76d8\u5e26\u65b9\u9762\u7684\u5f97\u5206\u90fd\u662f60\uff0c\u54ea\u652f\u4f7f\u7528\u81ea\u7531\u5f0f\u521b\u9020\u673a\u4f1a\u4f4d\u7f6e\u6218\u672f\u7684\u7403\u961f\u5728\u8fdb\u653b\u901f\u5ea6\u548c\u76d8\u5e26\u65b9\u9762\u7684\u7efc\u5408\u5f97\u5206\u6700\u9ad8\uff1f\u5217\u51fa\u7403\u961f\u7684\u5168\u540d\u548c\u7efc\u5408\u5f97\u5206\u3002", "reasoning_type": "+ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 0.45 * A.finishing + 0.2 * A.long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ORDER BY shooting_rating DESC LIMIT 1", "question": "\u5c04\u95e8\u8bc4\u5206\u75316\u4e2a\u5c5e\u6027\u7ec4\u6210\uff0c\u5305\u62ec45%\u7684\u5c04\u95e8\u7cbe\u5ea6\u300120%\u7684\u8fdc\u5c04\u30015%\u7684\u70b9\u7403\u30015%\u7684\u8dd1\u4f4d\u300120%\u7684\u5c04\u95e8\u529b\u91cf\u548c5%\u7684\u51cc\u7a7a\u5c04\u95e8\u3002\u5c04\u95e8\u8bc4\u5206\u6700\u9ad8\u7684\u7403\u5458\u7684\u540d\u5b57\u548c\u8bc4\u5206\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , 0.45 * A.finishing + 0.2 * A.long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ORDER BY shooting_rating DESC LIMIT 1", "question": "\u5c04\u95e8\u7efc\u5408\u8bc4\u5206\u753145%\u7684\u5c04\u95e8\u7cbe\u5ea6\u300120%\u7684\u8fdc\u5c04\u30015%\u7684\u70b9\u7403\u30015%\u7684\u8dd1\u4f4d\u300120%\u7684\u5c04\u95e8\u529b\u91cf\u548c5%\u7684\u51cc\u7a7a\u5c04\u95e86\u4e2a\u65b9\u9762\u7ec4\u5408\u800c\u6210\u3002\u5217\u51fa\u5c04\u95e8\u7efc\u5408\u8bc4\u5206\u6700\u9ad8\u7684\u7403\u5458\u7684\u540d\u5b57\u548c\u4ed6\u4eec\u7684\u8bc4\u5206\u3002", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( shooting_rating ) FROM ( SELECT B.player_name , MAX ( 0.45 * ( finishing + 5 ) + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE finishing <= long_shots AND finishing <= penalties AND finishing <= positioning AND finishing <= shot_power AND finishing <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * ( long_shots + 5 ) + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE long_shots <= finishing AND long_shots <= penalties AND long_shots <= positioning AND long_shots <= shot_power AND long_shots <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * ( penalties + 5 ) + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE penalties <= finishing AND penalties <= long_shots AND penalties <= positioning AND penalties <= shot_power AND penalties <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * ( positioning + 5 ) + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE positioning <= finishing AND positioning <= long_shots AND positioning <= penalties AND positioning <= shot_power AND positioning <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * ( shot_power + 5 ) + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE shot_power <= finishing AND shot_power <= long_shots AND shot_power <= penalties AND shot_power <= positioning AND shot_power <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * ( volleys + 5 ) ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE volleys <= finishing AND volleys <= long_shots AND volleys <= penalties AND volleys <= positioning AND volleys <= shot_power )", "question": "\u5c04\u95e8\u8bc4\u5206\u75315\u4e2a\u5c5e\u6027\u7ec4\u6210\uff0c\u5305\u62ec45%\u7684\u5c04\u95e8\u7cbe\u5ea6\u300120%\u7684\u8fdc\u5c04\u30015%\u7684\u70b9\u7403\u30015%\u7684\u8dd1\u4f4d\u300120%\u7684\u5c04\u95e8\u529b\u91cf\u548c5%\u7684\u51cc\u7a7a\u5c04\u95e8\u3002\u5982\u679c\u628a\u6240\u6709\u7403\u5458\u5c04\u95e8\u5c5e\u6027\u4e2d\u7684\u6700\u8584\u5f31\u4e00\u9879\u63d0\u9ad8\u4e94\u5206\uff0c\u90a3\u4e48\u5c04\u95e8\u8bc4\u5206\u6700\u9ad8\u7684\u7403\u5458\u7684\u540d\u5b57\u548c\u8bc4\u5206\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT player_name , MAX ( shooting_rating ) FROM ( SELECT B.player_name , MAX ( 0.45 * ( finishing + 5 ) + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE finishing <= long_shots AND finishing <= penalties AND finishing <= positioning AND finishing <= shot_power AND finishing <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * ( long_shots + 5 ) + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE long_shots <= finishing AND long_shots <= penalties AND long_shots <= positioning AND long_shots <= shot_power AND long_shots <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * ( penalties + 5 ) + 0.05 * positioning + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE penalties <= finishing AND penalties <= long_shots AND penalties <= positioning AND penalties <= shot_power AND penalties <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * ( positioning + 5 ) + 0.2 * shot_power + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE positioning <= finishing AND positioning <= long_shots AND positioning <= penalties AND positioning <= shot_power AND positioning <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * ( shot_power + 5 ) + 0.05 * volleys ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE shot_power <= finishing AND shot_power <= long_shots AND shot_power <= penalties AND shot_power <= positioning AND shot_power <= volleys UNION ALL SELECT B.player_name , MAX ( 0.45 * finishing + 0.2 * long_shots + 0.05 * penalties + 0.05 * positioning + 0.2 * shot_power + 0.05 * ( volleys + 5 ) ) AS shooting_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE volleys <= finishing AND volleys <= long_shots AND volleys <= penalties AND volleys <= positioning AND volleys <= shot_power )", "question": "\u5c04\u95e8\u7efc\u5408\u8bc4\u5206\u753145%\u7684\u5c04\u95e8\u7cbe\u5ea6\u300120%\u7684\u8fdc\u5c04\u30015%\u7684\u70b9\u7403\u30015%\u7684\u8dd1\u4f4d\u300120%\u7684\u5c04\u95e8\u529b\u91cf\u548c5%\u7684\u51cc\u7a7a\u5c04\u95e86\u4e2a\u65b9\u9762\u7ec4\u5408\u800c\u6210\u3002\u5982\u679c\u6bcf\u4e2a\u7403\u5458\u5c04\u95e8\u7efc\u5408\u8bc4\u5206\u4e2d\u6700\u8584\u5f31\u7684\u4e00\u73af\u7684\u7c89\u63d0\u9ad85\u5206\uff0c\u8bf7\u5217\u51fa\u5c04\u95e8\u8bc4\u5206\u6700\u9ad8\u7684\u7403\u5458\u7684\u540d\u5b57\u548c\u4ed6\u4eec\u7684\u8bc4\u5206\u3002", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT best_vision_long_passing , worst_vision_long_passing , ABS ( worst_vision_long_passing - best_vision_long_passing ) AS diff FROM ( SELECT A.long_passing AS best_vision_long_passing , MAX ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) JOIN ( SELECT A.long_passing AS worst_vision_long_passing , MIN ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id )", "question": "\u5bf9\u5468\u56f4\u961f\u53cb\u548c\u5bf9\u624b\u7684\u4f4d\u7f6e\u8ba4\u77e5\u6700\u597d\u548c\u6700\u5dee\u7684\u7403\u5458\u7684\u957f\u4f20\u5f97\u5206\u662f\u591a\u5c11\uff1f\u4ed6\u4eec\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "(1) Vision ranks the player\u2019s awareness of the position of his teammates and opponents around him and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT best_vision_long_passing , worst_vision_long_passing , ABS ( worst_vision_long_passing - best_vision_long_passing ) AS diff FROM ( SELECT A.long_passing AS best_vision_long_passing , MAX ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) JOIN ( SELECT A.long_passing AS worst_vision_long_passing , MIN ( A.vision ) FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id )", "question": "\u5217\u51fa\u5bf9\u5468\u56f4\u961f\u53cb\u548c\u5bf9\u624b\u7684\u4f4d\u7f6e\u8ba4\u77e5\u6700\u5f3a\u548c\u6700\u5f31\u7684\u7403\u5458\u7684\u957f\u4f20\u5f97\u5206\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u5dee\u8ddd\u3002", "reasoning_type": "- C", "commonsense_knowledge": "(1) Vision ranks the player\u2019s awareness of the position of his teammates and opponents around him and (2) diffenrence between two values should be an absolute value."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * max_strength / min_strength AS ratio FROM ( SELECT MAX ( A.strength ) AS max_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" ) JOIN ( SELECT MIN ( A.strength ) AS min_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" )", "question": "\u5728\u8fdb\u653b\u5f97\u5206\u4e2d\u7b49\u7684\u7403\u5458\u4e2d\uff0c\u8eab\u4f53\u5f3a\u58ee\u7a0b\u5ea6\u6307\u6807\u7684\u6700\u9ad8\u5f97\u5206\u548c\u6700\u4f4e\u5f97\u5206\u4e4b\u95f4\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Strength is about the quality or state of physical strength."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * max_strength / min_strength AS ratio FROM ( SELECT MAX ( A.strength ) AS max_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" ) JOIN ( SELECT MIN ( A.strength ) AS min_strength FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"medium\" )", "question": "\u5217\u51fa\u8fdb\u653b\u5f97\u5206\u4e3a\u4e2d\u7b49\u7684\u7403\u5458\u4e2d\uff0c\u8eab\u4f53\u5f3a\u58ee\u7a0b\u5ea6\u6307\u6807\u7684\u6700\u9ad8\u5206\u548c\u6700\u4f4e\u5206\u4e4b\u95f4\u7684\u6bd4\u4f8b\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Strength is about the quality or state of physical strength."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * very_good / good AS proportion FROM ( SELECT COUNT ( * ) AS very_good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 80 AND 89 ) JOIN ( SELECT COUNT ( * ) AS good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 70 AND 79 )", "question": "\u8bc4\u5206\u572880\u523089\u5206\u4e4b\u95f4\u610f\u5473\u7740\u975e\u5e38\u597d\u3002\u8bc4\u5206\u572870\u523079\u5206\u4e4b\u95f4\u8868\u793a\u826f\u597d\u3002\u7f5a\u7403\u533a\u5185\u5c04\u95e8\u51c6\u786e\u5ea6\u975e\u5e38\u597d\u7684\u7403\u5458\u6570\u91cf\u4e0e\u51c6\u786e\u5ea6\u826f\u597d\u7684\u7403\u5458\u6570\u91cf\u7684\u6bd4\u4f8b\u662f\u591a\u5c11\uff1f", "reasoning_type": "/ * C", "commonsense_knowledge": "Penalties attribute measures the accuracy of shots from inside the penalty area."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * very_good / good AS proportion FROM ( SELECT COUNT ( * ) AS very_good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 80 AND 89 ) JOIN ( SELECT COUNT ( * ) AS good FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.penalties BETWEEN 70 AND 79 )", "question": "\u67d0\u9879\u80fd\u529b\u8bc4\u5206\u572880\u5206\u548c89\u5206\u4e4b\u95f4\u88ab\u79f0\u4e4b\u4e3a\u975e\u5e38\u597d\uff0c\u8bc4\u5206\u572870\u5206\u548c79\u5206\u4e4b\u95f4\u4e3a\u826f\u597d\u3002\u5217\u51fa\u7f5a\u7403\u533a\u5185\u5c04\u95e8\u51c6\u786e\u5ea6\u975e\u5e38\u597d\u7684\u7403\u5458\u6570\u91cf\u4e0e\u51c6\u786e\u5ea6\u826f\u597d\u7684\u7403\u5458\u6570\u91cf\u7684\u6bd4\u4f8b\u3002", "reasoning_type": "/ * C", "commonsense_knowledge": "Penalties attribute measures the accuracy of shots from inside the penalty area."}, {"db_id": "soccer_1", "query": "SELECT 1.0 * highest_weight / lowest_weight AS times FROM ( SELECT weight AS highest_weight , MAX ( height ) FROM Player ) JOIN ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "\u6700\u9ad8\u7684\u9009\u624b\u6bd4\u6700\u77ee\u7684\u9009\u624b\u91cd\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT 1.0 * highest_weight / lowest_weight AS times FROM ( SELECT weight AS highest_weight , MAX ( height ) FROM Player ) JOIN ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "\u8eab\u9ad8\u6700\u9ad8\u7684\u9009\u624b\u6bd4\u8eab\u9ad8\u6700\u77ee\u7684\u9009\u624b\u7684\u4f53\u91cd\u91cd\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT 170.0 / lowest_weight AS times FROM ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "\u6700\u9ad8\u7684\u9009\u624b\u6bd4\u6700\u77ee\u7684\u9009\u624b\u91cd\u591a\u5c11\u500d\uff0c\u5047\u5982\u6700\u9ad8\u7684\u9009\u624b\u91cd170\u78c5\uff1f", "reasoning_type": "/ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT 170.0 / lowest_weight AS times FROM ( SELECT weight AS lowest_weight , MIN ( height ) FROM Player )", "question": "\u5047\u8bbe\u8eab\u9ad8\u6700\u9ad8\u7684\u9009\u624b\u4f53\u91cd\u4e3a170\u78c5\uff0c\u90a3\u8eab\u9ad8\u6700\u9ad8\u7684\u9009\u624b\u6bd4\u8eab\u9ad8\u6700\u77ee\u7684\u9009\u624b\u7684\u4f53\u91cd\u91cd\u591a\u5c11\u500d\uff1f", "reasoning_type": "/ H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , B.height , B.weight , A.overall_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id JOIN ( SELECT B.player_fifa_api_id , B.weight * 0.45 / ( ( B.height / 100 ) * ( B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) AS C ON A.player_fifa_api_id = C.player_fifa_api_id ORDER BY C.BMI DESC LIMIT 1", "question": "\u5217\u51fa\u4f53\u91cd\u6307\u6570\u6700\u9ad8\u7684\u7403\u5458\u7684\u59d3\u540d\u3001\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u6574\u4f53\u8bc4\u5206\u3002", "reasoning_type": "/ * C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT B.player_name , B.height , B.weight , A.overall_rating FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id JOIN ( SELECT B.player_fifa_api_id , B.weight * 0.45 / ( ( B.height / 100 ) * ( B.height / 100 ) ) AS BMI FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id ) AS C ON A.player_fifa_api_id = C.player_fifa_api_id ORDER BY C.BMI DESC LIMIT 1", "question": "\u4f53\u91cd\u6307\u6570\u6700\u9ad8\u7684\u7403\u5458\u662f\u8c01\uff0c\u4ed6\u7684\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u6574\u4f53\u8bc4\u5206\u5206\u522b\u662f\u591a\u5c11\uff1f", "reasoning_type": "/ * C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT left_count , right_count , ABS ( left_count - right_count ) FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"right\" )", "question": "\u5728\u8fdb\u653b\u548c\u9632\u5b88\u5de5\u4f5c\u7387\u90fd\u201c\u4f4e\u201d\u7684\u7403\u5458\u4e2d\uff0c\u6709\u591a\u5c11\u7403\u5458\u662f\u53f3\u811a\u7403\u5458\uff0c\u6709\u591a\u5c11\u662f\u5de6\u811a\u7403\u5458\uff0c\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT left_count , right_count , ABS ( left_count - right_count ) FROM ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS left_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"left\" ) JOIN ( SELECT COUNT ( DISTINCT ( B.player_name ) ) AS right_count FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.attacking_work_rate = \"low\" and A.defensive_work_rate = \"low\" and A.preferred_foot = \"right\" )", "question": "\u5217\u51fa\u5728\u8fdb\u653b\u548c\u9632\u5b88\u5de5\u4f5c\u7387\u90fd\u4e3a\u201c\u4f4e\u201d\u7684\u7403\u5458\u4e2d\uff0c\u53f3\u811a\u7403\u5458\u548c\u5de6\u811a\u7403\u5458\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u4e8c\u8005\u76f8\u5dee\u7684\u6570\u91cf\u3002", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id , ( SELECT A.crossing AS FC_crossing FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE B.player_name = \"Fabio Cannavaro\" and date ( A.date ) = \"2007-08-30\" ) WHERE A.crossing > 2.0 * FC_crossing", "question": "\u63d0\u4f9b\u4e00\u4efd\u7403\u5458\u540d\u5355\u3001\u4ed6\u4eec\u7684\u603b\u4f53\u8bc4\u5206\u3001\u4ee5\u53ca\u4ed6\u4eec\u7684\u5c5e\u6027\u8bb0\u5f55\u65e5\u671f\uff0c\u4e14\u8fd9\u4e9b\u7403\u5458\u7684\u4f20\u4e2d\u8bc4\u5206\u8d85\u8fc7\u4e862007\u5e748\u670830\u65e5\u8bb0\u5f55\u7684\u6cd5\u6bd4\u5965\u00b7\u5361\u7eb3\u74e6\u7f57\u7684\u4f20\u4e2d\u8bc4\u5206\u7684\u4e24\u500d\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id , ( SELECT A.crossing AS FC_crossing FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE B.player_name = \"Fabio Cannavaro\" and date ( A.date ) = \"2007-08-30\" ) WHERE A.crossing > 2.0 * FC_crossing", "question": "\u5217\u51fa\u6240\u6709\u4f20\u4e2d\u8bc4\u5206\u8d85\u8fc7\u4e862007\u5e748\u670830\u65e5\u8bb0\u5f55\u7684\u6cd5\u6bd4\u5965\u00b7\u5361\u7eb3\u74e6\u7f57\u7684\u4f20\u4e2d\u8bc4\u5206\u7684\u4e24\u500d\u7684\u7403\u5458\u7684\u59d3\u540d\u3001\u603b\u4f53\u8bc4\u5206\u3001\u4ee5\u53ca\u4ed6\u4eec\u7684\u5c5e\u6027\u8bb0\u5f55\u65e5\u671f\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.crossing > 2.0 * 45", "question": "\u5047\u59822007\u5e748\u670830\u65e5\u6cd5\u6bd4\u5965\u00b7\u5361\u7eb3\u74e6\u7f57\u83b7\u5f97\u7684\u4f20\u4e2d\u8bc4\u5206\u662f45\uff0c\u63d0\u4f9b\u4e00\u4efd\u7403\u5458\u540d\u5355\u3001\u4ed6\u4eec\u7684\u603b\u4f53\u8bc4\u5206\u3001\u4ee5\u53ca\u4ed6\u4eec\u7684\u5c5e\u6027\u8bb0\u5f55\u65e5\u671f\uff0c\u4e14\u8fd9\u4e9b\u7403\u5458\u7684\u4f20\u4e2d\u8bc4\u5206\u8d85\u8fc7\u4e862007\u5e748\u670830\u65e5\u8bb0\u5f55\u7684\u6cd5\u6bd4\u5965\u00b7\u5361\u7eb3\u74e6\u7f57\u7684\u4f20\u4e2d\u8bc4\u5206\u7684\u4e24\u500d\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT B.player_name , A.overall_rating , A.date FROM Player_Attributes A JOIN Player B ON A.player_fifa_api_id = B.player_fifa_api_id WHERE A.crossing > 2.0 * 45", "question": "\u5047\u8bbe\u6cd5\u6bd4\u5965\u00b7\u5361\u7eb3\u74e6\u7f57\u57282007\u5e748\u670830\u65e5\u83b7\u5f97\u7684\u4f20\u4e2d\u8bc4\u5206\u662f45\u5206\uff0c\u5217\u51fa\u6240\u6709\u4f20\u4e2d\u8bc4\u5206\u8d85\u8fc7\u4e862007\u5e748\u670830\u65e5\u8bb0\u5f55\u7684\u6cd5\u6bd4\u5965\u00b7\u5361\u7eb3\u74e6\u7f57\u7684\u4f20\u4e2d\u8bc4\u5206\u7684\u4e24\u500d\u7684\u7403\u5458\u7684\u59d3\u540d\u3001\u603b\u4f53\u8bc4\u5206\u3001\u4ee5\u53ca\u4ed6\u4eec\u7684\u5c5e\u6027\u8bb0\u5f55\u65e5\u671f\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 1.0 * height / 100 ) * ( height / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "\u4e54\u7eb3\u68ee\u00b7\u83b1\u79d1\u7684\u4f53\u91cd\u6307\u6570\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 1.0 * height / 100 ) * ( height / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "\u540d\u4e3a\u4e54\u7eb3\u68ee\u00b7\u83b1\u79d1\u7684\u8fd0\u52a8\u5458\u7684\u4f53\u91cd\u6307\u6570\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 190.0 / 100 ) * ( 190.0 / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "\u4e54\u7eb3\u68ee\u00b7\u83b1\u79d1\u7684\u4f53\u91cd\u6307\u6570\u662f\u591a\u5c11\uff0c\u5047\u5982\u4ed6\u9ad8190cm\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "soccer_1", "query": "SELECT weight * 0.45 / ( ( 190.0 / 100 ) * ( 190.0 / 100 ) ) AS BMI FROM Player WHERE player_name = \"Jonathan Leko\"", "question": "\u5047\u8bbe\u540d\u4e3a\u4e54\u7eb3\u68ee\u00b7\u83b1\u79d1\u7684\u8fd0\u52a8\u5458\u7684\u8eab\u9ad8\u662f190cm\uff0c\u90a3\u4e48\u4ed6\u7684\u4f53\u91cd\u6307\u6570\u662f\u591a\u5c11\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "Body mass index is weight in pounds divided by height in meters squared and multiplying by a conversion factor 0.45."}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "2009\u5e74\u603b\u5171\u751f\u4ea7\u4e86\u591a\u5c11\u7bb1\u9152\uff0c\u6bd42007\u5e74\u589e\u957f\u4e86\u767e\u5206\u4e4b\u591a\u5c11\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "2009\u5e74\u6240\u6709\u9152\u603b\u4ea7\u91cf\u662f\u591a\u5c11\u7bb1\uff0c\u6bd42007\u5e74\u589e\u957f\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" AND Name != \"Sauvignon Blanc\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "\u5047\u59822009\u5e74\u6ca1\u6709\u751f\u4ea7\u957f\u76f8\u601d\u8461\u8404\u9152\uff0c2009\u5e74\u603b\u5171\u751f\u4ea7\u4e86\u591a\u5c11\u7bb1\u9152\uff0c\u6bd42007\u5e74\u589e\u957f\u4e86\u767e\u5206\u4e4b\u591a\u5c11\uff1f", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT n_2009 , 100.0 * ( n_2009 - n_2007 ) / n_2007 AS growth_rate FROM ( SELECT SUM ( Cases ) AS n_2009 FROM wine WHERE Year = \"2009\" AND Name != \"Sauvignon Blanc\" ) JOIN ( SELECT SUM ( Cases ) AS n_2007 FROM wine WHERE Year = \"2007\" )", "question": "\u5047\u8bbe2009\u5e74\u6ca1\u6709\u751f\u4ea7\u957f\u76f8\u601d\u8461\u8404\u9152\uff0c\u90a32009\u5e74\u6240\u6709\u9152\u603b\u4ea7\u91cf\u662f\u591a\u5c11\u7bb1\uff0c\u6bd42007\u5e74\u589e\u957f\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" )", "question": "\u6709\u591a\u5c11\u79cd\u9152\u4e0d\u662f\u4ea7\u81ea\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\uff0c\u6bd4\u4ea7\u81ea\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" )", "question": "\u4ea7\u81ea\u975e\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u6709\u591a\u5c11\u79cd\uff0c\u6bd4\u4ea7\u5730\u662f\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" OR B.Price <= ( SELECT AVG ( Price ) FROM wine ) - 10 ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" AND B.Price > ( SELECT AVG ( Price ) FROM wine ) - 10 )", "question": "\u5047\u5982\u4ef7\u683c\u6bd4\u8461\u8404\u9152\u5747\u4ef7\u4f4e10\u7f8e\u5143\u4ee5\u4e0a\u7684\u9152\u90fd\u4ea7\u81ea\u975e\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\uff0c\u6709\u591a\u5c11\u79cd\u9152\u4e0d\u662f\u4ea7\u81ea\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\uff0c\u6bd4\u4ea7\u81ea\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT no_ava , no_ava - ava AS diff FROM ( SELECT COUNT ( * ) AS no_ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"N\" OR B.Price <= ( SELECT AVG ( Price ) FROM wine ) - 10 ) JOIN ( SELECT COUNT ( * ) AS ava FROM appellations A JOIN wine B ON A.Appelation = B.Appelation WHERE A.isAVA = \"Y\" AND B.Price > ( SELECT AVG ( Price ) FROM wine ) - 10 )", "question": "\u5047\u8bbe\u6240\u6709\u4ef7\u683c\u6bd4\u8461\u8404\u9152\u5e73\u5747\u4ef7\u683c\u4f4e\u81f3\u5c1110\u7f8e\u5143\u7684\u9152\u90fd\u4ea7\u81ea\u975e\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\uff0c\u90a3\u4ea7\u81ea\u975e\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u6709\u591a\u5c11\u79cd\uff0c\u6bd4\u4ea7\u5730\u662f\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u591a\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "2008\u5e74\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u662f\u767d\u8461\u8404\u9152\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u57282008\u5e74\u662f\u767d\u8461\u8404\u9152\u540c\u5e74\u4ea7\u91cf\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases + 100 ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases + 100 ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "\u5047\u5982\u6bcf\u79cd\u9152\u7684\u4ea7\u91cf\u90fd\u589e\u52a0100\u7bb1\uff0c2008\u5e74\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u662f\u767d\u8461\u8404\u9152\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.0 * n_red / n_white AS times FROM ( SELECT SUM ( A.Cases + 100 ) AS n_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND A.Year = \"2008\" ) JOIN ( SELECT SUM ( A.Cases + 100 ) AS n_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" AND A.Year = \"2008\" )", "question": "\u5047\u5982\u6bcf\u4e00\u79cd\u9152\u7684\u4ea7\u91cf\u90fd\u589e\u52a0100\u7bb1\uff0c\u90a3\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u57282008\u5e74\u662f\u767d\u8461\u8404\u9152\u540c\u5e74\u4ea7\u91cf\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM wine WHERE Score = \"98\"", "question": "98\u8bc4\u5206\u7684\u9152\u7684\u6700\u9ad8\u4ef7\u548c\u6700\u4f4e\u4ef7\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM wine WHERE Score = \"98\"", "question": "\u8bc4\u5206\u4e3a98\u7684\u9152\u4e2d\uff0c\u6700\u8d35\u7684\u548c\u6700\u4fbf\u5b9c\u7684\u4ef7\u683c\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM ( SELECT price * ( 1 + 0.1 ) AS price , Score FROM wine WHERE Winery = \"Carlisle\" UNION ALL SELECT price , Score FROM wine WHERE Winery != \"Carlisle\" ) WHERE Score = \"98\"", "question": "\u5047\u5982\u5361\u83b1\u5c14\u9152\u5382\u7684\u9152\u5168\u90e8\u6da8\u4ef710%\uff0c98\u8bc4\u5206\u7684\u9152\u7684\u6700\u9ad8\u4ef7\u548c\u6700\u4f4e\u4ef7\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "+ - * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT MAX ( Price ) - MIN ( Price ) AS diff FROM ( SELECT price * ( 1 + 0.1 ) AS price , Score FROM wine WHERE Winery = \"Carlisle\" UNION ALL SELECT price , Score FROM wine WHERE Winery != \"Carlisle\" ) WHERE Score = \"98\"", "question": "\u5047\u5982\u5361\u83b1\u5c14\u9152\u5382\u7684\u9152\u4ef7\u683c\u5168\u90e8\u4e0a\u8c0310%\uff0c\u90a3\u8bc4\u5206\u4e3a98\u7684\u9152\u4e2d\uff0c\u6700\u8d35\u7684\u548c\u6700\u4fbf\u5b9c\u7684\u4ef7\u683c\u76f8\u5dee\u591a\u5c11\uff1f", "reasoning_type": "+ - * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM wine A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM ( A.Cases ) < 2 * ( SELECT SUM ( Cases ) FROM wine WHERE Appelation = \"Calaveras County\" )", "question": "\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u4e2d\u54ea\u4e2a\u9152\u4ea7\u533a\u7684\u9152\u603b\u4ea7\u91cf\u6ca1\u6709\u8fbe\u5230\u5361\u62c9\u7ef4\u62c9\u65af\u53bf\u4ea7\u533a\u7684\u4e24\u500d\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM wine A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM ( A.Cases ) < 2 * ( SELECT SUM ( Cases ) FROM wine WHERE Appelation = \"Calaveras County\" )", "question": "\u5c5e\u4e8e\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u4ea7\u533a\u4e2d\uff0c\u54ea\u4e2a\u9152\u4ea7\u533a\u7684\u9152\u603b\u4ea7\u91cf\u5c0f\u4e8e\u5361\u62c9\u7ef4\u62c9\u65af\u53bf\u4ea7\u533a\u7684\u4e24\u500d\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM (SELECT Appelation, Cases FROM wine WHERE YEAR != \"2009\" UNION ALL SELECT Appelation, 2 * Cases FROM wine WHERE YEAR = \"2009\" ) A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM (A.Cases) < 2 * (SELECT SUM(Cases) FROM (SELECT SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year!= 2009 UNION ALL SELECT 2*SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year= 2009))", "question": "\u5047\u5982\u751f\u4ea7\u4e8e2009\u5e74\u7684\u9152\u7684\u4ea7\u91cf\u7ffb\u500d\uff0c\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u4e2d\u54ea\u4e2a\u4ea7\u533a\u7684\u9152\u603b\u4ea7\u91cf\u6ca1\u6709\u8fbe\u5230\u5361\u62c9\u7ef4\u62c9\u65af\u53bf\u4ea7\u533a\u7684\u4e24\u500d\uff1f", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT A.Appelation FROM (SELECT Appelation, Cases FROM wine WHERE YEAR != \"2009\" UNION ALL SELECT Appelation, 2 * Cases FROM wine WHERE YEAR = \"2009\" ) A JOIN appellations B ON A.Appelation = B.Appelation WHERE B.isAVA = \"Y\" GROUP BY A.Appelation HAVING SUM (A.Cases) < 2 * (SELECT SUM(Cases) FROM (SELECT SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year!= 2009 UNION ALL SELECT 2*SUM (Cases) AS Cases FROM wine WHERE Appelation = \"Calaveras County\" AND Year= 2009))", "question": "\u5047\u5982\u57282009\u5e74\u6240\u6709\u9152\u7684\u4ea7\u91cf\u90fd\u7ffb\u500d\uff0c\u90a3\u5c5e\u4e8e\u7f8e\u56fd\u8461\u8404\u79cd\u690d\u533a\u7684\u9152\u4ea7\u533a\u4e2d\uff0c\u54ea\u4e2a\u9152\u4ea7\u533a\u7684\u9152\u603b\u4ea7\u91cf\u5c0f\u4e8e\u5361\u62c9\u7ef4\u62c9\u65af\u53bf\u4ea7\u533a\u7684\u4e24\u500d\uff1f", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM wine WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM wine WHERE Price < \"40\" )", "question": "\u4ef7\u683c\u4f4e\u4e8e40\u7684\u9152\u4e2d\uff0c\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u9152\u8bc4\u5206\u9ad8\u4e8e85\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM wine WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM wine WHERE Price < \"40\" )", "question": "\u4ef7\u683c\u4e0d\u523040\u7684\u9152\u4e2d\uff0c\u8bc4\u520685\u4ee5\u4e0a\u7684\u9152\u5360\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" )", "question": "\u5047\u5982\u7528\u4ed9\u7c89\u9edb\u8461\u8404\u917f\u9020\u7684\u8461\u8404\u9152\u5168\u90e8\u6da8\u4ef715\uff0c\u4ef7\u683c\u4f4e\u4e8e40\u7684\u9152\u4e2d\uff0c\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u9152\u8bc4\u5206\u9ad8\u4e8e85\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * n1 / n2 AS ratio FROM ( SELECT COUNT ( * ) AS n1 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" AND Score > \"85\" ) JOIN ( SELECT COUNT ( * ) AS n2 FROM ( SELECT Price , Score FROM wine WHERE Grape != \"Zinfandel\" UNION ALL SELECT Price + 15 , Score FROM wine WHERE Grape = \"Zinfandel\" ) WHERE Price < \"40\" )", "question": "\u5047\u8bbe\u6240\u6709\u7528\u4ed9\u7c89\u9edb\u8461\u8404\u917f\u9020\u7684\u8461\u8404\u9152\u5168\u90e8\u6da8\u4ef715\uff0c\u90a3\u4ef7\u683c\u4e0d\u523040\u7684\u9152\u4e2d\uff0c\u8bc4\u520685\u4ee5\u4e0a\u7684\u9152\u5360\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, name FROM wine WHERE Appelation IN ( SELECT Appelation FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) AND Score > ( SELECT MIN ( Score ) FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) + 10", "question": "\u4ef7\u683c\u6700\u9ad8\u7684\u9152\u7684\u4ea7\u533a\u751f\u4ea7\u7684\u9152\u4e2d\uff0c\u6709\u54ea\u4e9b\u9152\u7684\u8bc4\u5206\u6bd4\u4ef7\u683c\u6700\u9ad8\u7684\u9152\u7684\u6700\u4f4e\u8bc4\u5206\u9ad810\u5206\u4ee5\u4e0a\uff1f\u7ed9\u51fa\u5b83\u4eec\u7684\u7f16\u53f7\u548c\u540d\u5b57\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, name FROM wine WHERE Appelation IN ( SELECT Appelation FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) AND Score > ( SELECT MIN ( Score ) FROM wine WHERE Price = ( SELECT MAX ( Price ) FROM wine ) ) + 10", "question": "\u751f\u4ea7\u6700\u8d35\u7684\u9152\u7684\u4ea7\u533a\u6240\u751f\u4ea7\u7684\u6240\u6709\u9152\u5f53\u4e2d\uff0c\u5217\u51fa\u6240\u6709\u6bd4\u6700\u8d35\u7684\u9152\u7684\u6700\u4f4e\u8bc4\u5206\u9ad810\u5206\u4ee5\u4e0a\u7684\u9152\u7684\u7f16\u53f7\u548c\u540d\u5b57\u3002", "reasoning_type": "+", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, Name FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Appelation IN (SELECT Appelation FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) AND Score > (SELECT MIN (Score) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) + 10", "question": "\u5047\u59822008\u5e74\u751f\u4ea7\u7684\u9152\u6da8\u4ef715%\uff0c\u4ef7\u683c\u6700\u9ad8\u7684\u9152\u7684\u4ea7\u533a\u751f\u4ea7\u7684\u9152\u4e2d\uff0c\u6709\u54ea\u4e9b\u9152\u7684\u8bc4\u5206\u6bd4\u4ef7\u683c\u6700\u9ad8\u7684\u9152\u7684\u6700\u4f4e\u8bc4\u5206\u9ad810\u5206\u4ee5\u4e0a\uff1f\u7ed9\u51fa\u5b83\u4eec\u7684\u7f16\u53f7\u548c\u540d\u5b57\u3002", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT No, Name FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Appelation IN (SELECT Appelation FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) AND Score > (SELECT MIN (Score) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" ) WHERE Price = (SELECT MAX (Price) FROM (SELECT No, Name, Appelation, Price, Score FROM wine WHERE YEAR != \"2008\" UNION ALL SELECT No, Name, Appelation, (1 + 0.15) * Price, Score FROM wine WHERE YEAR = \"2008\" )) ) + 10", "question": "\u5047\u8bbe2008\u5e74\u6240\u751f\u4ea7\u7684\u9152\u4ef7\u683c\u4e0a\u6da815%\uff0c\u5217\u51fa\u5728\u751f\u4ea7\u6700\u8d35\u7684\u9152\u7684\u4ea7\u533a\u6240\u751f\u4ea7\u7684\u6240\u6709\u9152\u5f53\u4e2d\uff0c\u6bd4\u6700\u8d35\u7684\u9152\u7684\u6700\u4f4e\u8bc4\u5206\u9ad810\u5206\u4ee5\u4e0a\u7684\u9152\u7684\u7f16\u53f7\u548c\u540d\u5b57\u3002", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\"", "question": "\u917f\u9020\u4e00\u74f6\u7ea2\u8461\u8404\u9152\u9700\u89811.2\u5343\u514b\u7684\u8461\u8404\u30022005\u5e74\u751f\u4ea7\u7684\u7ea2\u8461\u8404\u9152\u7528\u4e86\u591a\u5c11\u5428\u8461\u8404\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\"", "question": "\u4f7f\u75281.2\u5343\u514b\u7684\u8461\u8404\u53ef\u4ee5\u917f\u9020\u51fa\u4e00\u74f6\u7ea2\u8461\u8404\u9152\uff0c\u90a3\u4e48\u4ea7\u4e8e2005\u5e74\u7684\u7ea2\u8461\u8404\u9152\u603b\u5171\u7528\u4e86\u591a\u5c11\u8461\u8404\u917f\u6210\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\" AND A.Winery != \"Paloma\"", "question": "\u917f\u9020\u4e00\u74f6\u7ea2\u8461\u8404\u9152\u9700\u89811.2\u5343\u514b\u7684\u8461\u8404\u3002\u5047\u5982\u5e15\u6d1b\u739b\u9152\u53822005\u5e74\u6ca1\u6709\u751f\u4ea7\u8461\u8404\u9152\uff0c2005\u5e74\u751f\u4ea7\u7684\u7ea2\u8461\u8404\u9152\u7528\u4e86\u591a\u5c11\u5428\u8461\u8404\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Year = \"2005\" AND B.Color = \"Red\" AND A.Winery != \"Paloma\"", "question": "\u4f7f\u75281.2\u5343\u514b\u7684\u8461\u8404\u53ef\u4ee5\u917f\u9020\u51fa\u4e00\u74f6\u7ea2\u8461\u8404\u9152\uff0c\u5982\u679c\u5e15\u6d1b\u739b\u9152\u53822005\u5e74\u6ca1\u6709\u751f\u4ea7\u8461\u8404\u9152\uff0c\u90a3\u4e48\u4ea7\u4e8e2005\u5e74\u7684\u7ea2\u8461\u8404\u9152\u603b\u5171\u7528\u4e86\u591a\u5c11\u8461\u8404\u917f\u6210\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" )", "question": "\u917f\u9020\u4e00\u74f6\u8461\u8404\u9152\u9700\u89811.2\u5343\u514b\u7684\u8461\u8404\u3002\u5728\u7eb3\u5e15\u53bf\u751f\u4ea7\u7684\u8461\u8404\u9152\u4e00\u5171\u7528\u4e86\u591a\u5c11\u5428\u7ea2\u8461\u8404\uff0c\u591a\u5c11\u5428\u767d\u8461\u8404\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" )", "question": "\u4f7f\u75281.2\u5343\u514b\u7684\u8461\u8404\u53ef\u4ee5\u917f\u9020\u51fa\u4e00\u74f6\u7ea2\u8461\u8404\u9152\uff0c\u4ea7\u4e8e\u7eb3\u5e15\u53bf\u7684\u8461\u8404\u9152\u4e00\u5171\u82b1\u8d39\u4e86\u591a\u5c11\u5428\u7ea2\u8461\u8404\uff0c\u591a\u5c11\u5428\u767d\u8461\u8404\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" AND A.Appelation != \"Carneros\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" AND A.Appelation != \"Carneros\" )", "question": "\u917f\u9020\u4e00\u74f6\u8461\u8404\u9152\u9700\u89811.2\u5343\u514b\u7684\u8461\u8404\u3002\u5047\u5982\u6240\u6709\u5361\u5185\u7f57\u65af\u8461\u8404\u9152\u7684\u4ea7\u533a\u90fd\u4e0d\u5728\u7eb3\u5e15\u53bf\uff0c\u4ea7\u533a\u5728\u7eb3\u5e15\u53bf\u7684\u8461\u8404\u9152\u4e00\u5171\u7528\u4e86\u591a\u5c11\u5428\u7ea2\u8461\u8404\uff0c\u591a\u5c11\u5428\u767d\u8461\u8404\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT * FROM ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_red FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"Red\" AND A.Appelation != \"Carneros\" ) JOIN ( SELECT 1.2 * SUM ( A.Cases ) * 12 / 1000 AS tons_while FROM wine A JOIN grapes B ON A.Grape = B.Grape JOIN appellations C ON A.Appelation = C.Appelation WHERE C.County = \"Napa\" AND B.Color = \"White\" AND A.Appelation != \"Carneros\" )", "question": "\u4f7f\u75281.2\u5343\u514b\u7684\u8461\u8404\u53ef\u4ee5\u917f\u9020\u51fa\u4e00\u74f6\u7ea2\u8461\u8404\u9152\uff0c\u5047\u5982\u6240\u6709\u5361\u5185\u7f57\u65af\u8461\u8404\u9152\u7684\u4ea7\u533a\u90fd\u4e0d\u5728\u7eb3\u5e15\u53bf\uff0c\u4ea7\u4e8e\u7eb3\u5e15\u53bf\u7684\u8461\u8404\u9152\u4e00\u5171\u82b1\u8d39\u4e86\u591a\u5c11\u5428\u7ea2\u8461\u8404\uff0c\u591a\u5c11\u5428\u767d\u8461\u8404\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "1 case equals to 12 bottles and 1 ton equals to 1000 kilograms."}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM wine WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM wine WHERE name = \"Cabernet Sauvignon\" )", "question": "\u8bc4\u5206\u6700\u9ad8\u7684\u8d64\u971e\u73e0\u8461\u8404\u9152\u6765\u81ea\u54ea\u4e9b\u9152\u5382\uff0c\u5b83\u4eec\u7684\u4ef7\u683c\u6bd4\u8d64\u971e\u73e0\u8461\u8404\u9152\u7684\u5e73\u5747\u4ef7\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM wine WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM wine WHERE name = \"Cabernet Sauvignon\" )", "question": "\u8bc4\u5206\u6700\u9ad8\u7684\u8d64\u971e\u73e0\u8461\u8404\u9152\u751f\u4ea7\u81ea\u54ea\u4e9b\u9152\u5382\uff0c\u8fd9\u4e9b\u9152\u7684\u4ef7\u683c\u6bd4\u8d64\u971e\u73e0\u8461\u8404\u9152\u7684\u5e73\u5747\u4ef7\u8d35\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" )", "question": "\u5047\u59822005\u5e74\u751f\u4ea7\u7684\u5168\u90e8\u9152\u7684\u8bc4\u5206\u4e0b\u964d10\u5206\uff0c\u8bc4\u5206\u6700\u9ad8\u7684\u8d64\u971e\u73e0\u8461\u8404\u9152\u6765\u81ea\u54ea\u4e9b\u9152\u5382\uff0c\u5b83\u4eec\u7684\u4ef7\u683c\u6bd4\u8d64\u971e\u73e0\u8461\u8404\u9152\u7684\u5e73\u5747\u4ef7\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Winery , Price - ( SELECT AVG ( Price ) FROM wine WHERE name = \"Cabernet Sauvignon\" ) AS diff FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" AND Score = ( SELECT MAX ( Score ) FROM ( SELECT Winery , Price , Score - 10 AS Score , Name FROM wine WHERE Year = \"2005\" UNION ALL SELECT Winery , Price , Score , Name FROM wine WHERE Year != \"2005\" ) WHERE name = \"Cabernet Sauvignon\" )", "question": "\u5982\u679c\u4ea7\u4e8e2005\u5e74\u7684\u6240\u6709\u9152\u7684\u8bc4\u5206\u5168\u90e8\u964d\u4f4e10\u5206\uff0c\u90a3\u4e48\u8bc4\u5206\u6700\u9ad8\u7684\u8d64\u971e\u73e0\u8461\u8404\u9152\u751f\u4ea7\u81ea\u54ea\u4e9b\u9152\u5382\uff0c\u8fd9\u4e9b\u9152\u7684\u4ef7\u683c\u6bd4\u8d64\u971e\u73e0\u8461\u8404\u9152\u7684\u5e73\u5747\u4ef7\u8d35\u591a\u5c11\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( A.Price ) AS max_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" ) JOIN ( SELECT MAX ( A.Price ) AS max_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" )", "question": "\u6700\u8d35\u7684\u7ea2\u8461\u8404\u9152\u6bd4\u6700\u8d35\u7684\u767d\u8461\u8404\u9152\u8d35\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( A.Price ) AS max_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" ) JOIN ( SELECT MAX ( A.Price ) AS max_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" )", "question": "\u4ef7\u683c\u6700\u9ad8\u7684\u7ea2\u8461\u8404\u9152\u6bd4\u4ef7\u683c\u6700\u9ad8\u7684\u767d\u8461\u8404\u9152\u8d35\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( Price ) AS max_red FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"Red\" ) JOIN ( SELECT MAX ( Price ) AS max_white FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"White\" )", "question": "\u5047\u5982\u5b89\u57f9\u6d1b\u65af\u9152\u5382\u7684\u9152\u964d\u4ef720%\uff0c\u6700\u8d35\u7684\u7ea2\u8461\u8404\u9152\u6bd4\u6700\u8d35\u7684\u767d\u8461\u8404\u9152\u8d35\u591a\u5c11\uff1f", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT max_red - max_white AS diff FROM ( SELECT MAX ( Price ) AS max_red FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"Red\" ) JOIN ( SELECT MAX ( Price ) AS max_white FROM ( SELECT B.Color , A.Price * ( 1 - 0.2 ) AS Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery = \"Ampelos\" UNION ALL SELECT B.Color , A.Price FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE A.Winery != \"Ampelos\" ) WHERE Color = \"White\" )", "question": "\u5982\u679c\u4ea7\u81ea\u5b89\u57f9\u6d1b\u65af\u9152\u5382\u7684\u9152\u4ef7\u683c\u4e0b\u8c0320%\uff0c\u4ef7\u683c\u6700\u9ad8\u7684\u7ea2\u8461\u8404\u9152\u6bd4\u4ef7\u683c\u6700\u9ad8\u7684\u767d\u8461\u8404\u9152\u8d35\u591a\u5c11\uff1f", "reasoning_type": "- * H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM wine A JOIN wine B ON A.Winery = B.Winery JOIN wine C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "\u5982\u679c\u4e00\u4e2a\u9152\u5382\u80fd\u505a\u5230\u8fde\u7eed3\u5e74\u751f\u4ea7\u7684\u9152\u8bc4\u5206\u4ece\u672a\u4f4e\u4e8e90\uff0c\u5b83\u5c31\u4f1a\u88ab\u8bc4\u4e3a\u201c\u4f18\u8d28\u9152\u5382\u201d\u3002\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u9152\u5382\u662f\u4f18\u8d28\u9152\u5382\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM wine A JOIN wine B ON A.Winery = B.Winery JOIN wine C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "\u201c\u4f18\u8d28\u9152\u5382\u201d\u662f\u8fde\u7eed3\u5e74\u751f\u4ea7\u7684\u9152\u8bc4\u5206\u4ece\u672a\u4f4e\u4e8e90\u7684\u9152\u5382\uff0c\u90a3\u4e48\u6240\u6709\u9152\u5382\u4e2d\u4f18\u8d28\u9152\u5382\u5360\u591a\u5c11\u767e\u5206\u6bd4\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) A JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) B ON A.Winery = B.Winery JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "\u5982\u679c\u4e00\u4e2a\u9152\u5382\u80fd\u505a\u5230\u8fde\u7eed3\u5e74\u751f\u4ea7\u7684\u9152\u8bc4\u5206\u4ece\u672a\u4f4e\u4e8e90\uff0c\u5b83\u5c31\u4f1a\u88ab\u8bc4\u4e3a\u201c\u4f18\u8d28\u9152\u5382\u201d\u3002\u5047\u5982\u7528\u9ed1\u6bd4\u8bfa\u8461\u8404\u917f\u9020\u7684\u8461\u8404\u9152\u8bc4\u5206\u4e0b\u964d5\u5206\uff0c\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u9152\u5382\u662f\u4f18\u8d28\u9152\u5382\uff1f", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT 100.0 * COUNT ( DISTINCT ( Winery ) ) / ( SELECT COUNT ( DISTINCT ( Winery ) ) FROM wine ) AS percent FROM ( SELECT A.Winery , A.No , A.Year , A.Score , B.No , B.Year , B.Score , C.No , C.Year , C.Score FROM ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) A JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) B ON A.Winery = B.Winery JOIN ( SELECt Winery , No , Year , Score - 5 AS Score FROM wine WHERE Grape = \"Pinot Noir\" UNION ALL SELECt Winery , No , Year , Score FROM wine WHERE Grape != \"Pinot Noir\" ) C ON A.Winery = C.Winery WHERE A.Score >= 90 AND B.Score >= 90 AND C.Score >= 90 AND B.Year - A.Year = 1 AND C.Year - B.Year = 1 )", "question": "\u201c\u4f18\u8d28\u9152\u5382\u201d\u662f\u8fde\u7eed3\u5e74\u751f\u4ea7\u7684\u9152\u8bc4\u5206\u4ece\u672a\u4f4e\u4e8e90\u7684\u9152\u5382\uff0c\u5047\u8bbe\u7528\u9ed1\u6bd4\u8bfa\u8461\u8404\u917f\u9020\u7684\u8461\u8404\u9152\u8bc4\u5206\u964d\u4f4e5\u5206\uff0c\u90a3\u4e48\u6240\u6709\u9152\u5382\u4e2d\u4f18\u8d28\u9152\u5382\u5360\u591a\u5c11\u767e\u5206\u6bd4\uff1f", "reasoning_type": "- * / H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "\u54ea\u5e74\u767d\u8461\u8404\u9152\u7684\u4ea7\u91cf\u6700\u9ad8\uff0c\u6bd4\u5f53\u5e74\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM wine A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "\u767d\u8461\u8404\u9152\u4ea7\u91cf\u6700\u9ad8\u7684\u5e74\u4efd\u662f\u54ea\u4e00\u5e74\uff0c\u6bd4\u540c\u5e74\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "\u5047\u5982\u8d1d\u7075\u54f2\u9152\u5382\u7684\u5168\u90e8\u9152\u4ea7\u91cf\u7ffb\u500d\uff0c\u54ea\u5e74\u767d\u8461\u8404\u9152\u7684\u4ea7\u91cf\u6700\u9ad8\uff0c\u6bd4\u5f53\u5e74\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "* - H", "commonsense_knowledge": ""}, {"db_id": "wine_1", "query": "SELECT Year , cases_white - cases_red AS diff FROM ( SELECT A.Year , SUM ( A.Cases ) AS cases_white FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) JOIN ( SELECT SUM ( A.Cases ) AS cases_red FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"Red\" AND Year = ( SELECT A.Year FROM ( SELECT Grape , Year , 2 * Cases AS Cases FROM wine WHERE Winery = \"Beringer\" UNION ALL SELECT Grape , Year , Cases AS Cases FROM wine WHERE Winery != \"Beringer\" ) A JOIN grapes B ON A.Grape = B.Grape WHERE B.Color = \"White\" GROUP BY A.Year ORDER BY SUM ( A.Cases ) DESC LIMIT 1 ) )", "question": "\u5047\u8bbe\u8d1d\u7075\u54f2\u9152\u5382\u7684\u5168\u90e8\u9152\u4ea7\u91cf\u7ffb\u500d\uff0c\u767d\u8461\u8404\u9152\u4ea7\u91cf\u6700\u9ad8\u7684\u5e74\u4efd\u662f\u54ea\u4e00\u5e74\uff0c\u6bd4\u540c\u5e74\u7ea2\u8461\u8404\u9152\u7684\u4ea7\u91cf\u9ad8\u591a\u5c11\uff1f", "reasoning_type": "* - H", "commonsense_knowledge": ""}]