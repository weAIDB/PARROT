[{"db_id": "concert_singer", "query": "SELECT Name , Age + ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Gentleman\" ) - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer", "question": "\u5217\u51fa\u6bcf\u4e2a\u6b4c\u624b\u7684\u540d\u5b57\u4ee5\u53ca\u5176\u5728\u6b4c\u66f2\u201cGentleman\u201d\u53d1\u5e03\u7684\u65f6\u5019\u7684\u5e74\u9f84\uff1f", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Name , Age + ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Gentleman\" ) - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer", "question": "\u7ed9\u51fa\u6bcf\u4e2a\u6b4c\u624b\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u5728\u6b4c\u66f2\u201cGentleman\u201d\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u6bcf\u4e2a\u4eba\u7684\u5e74\u9f84\u5206\u522b\u662f\u591a\u5c11\uff1f", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Name , Age + 2001 - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer", "question": "\u5047\u5982\u201cGentleman\u201d\u8fd9\u9996\u6b4c\u662f21\u4e16\u7eaa\u7684\u7b2c\u4e00\u5e74\u53d1\u5e03\u7684\uff0c\u5217\u51fa\u6bcf\u4e2a\u6b4c\u624b\u7684\u540d\u5b57\u4ee5\u53ca\u5176\u5728\u6b4c\u66f2\u201cGentleman\u201d\u53d1\u5e03\u7684\u65f6\u5019\u7684\u5e74\u9f84\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "21st century began on 1 January 2001. Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Name , Age + 2001 - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer", "question": "\u5047\u8bbe\u201cGentleman\u201d\u8fd9\u9996\u6b4c\u53d1\u5e03\u4e8e21\u4e16\u7eaa\u7684\u7b2c\u4e00\u5e74\uff0c\u90a3\u4e48\u5728\u6b4c\u66f2\u201cGentleman\u201d\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u6bcf\u4e2a\u6b4c\u624b\u7684\u5e74\u9f84\u5206\u522b\u662f\u591a\u5c11\uff1f\u540c\u65f6\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\u3002", "reasoning_type": "- + C H", "commonsense_knowledge": "21st century began on 1 January 2001. Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , C.Age + ( A.Year - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\"", "question": "\u4e3b\u9898\u4e3a\u201cFree choice\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\u7684\u540d\u5b57\u5206\u522b\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u5f53\u65f6\u591a\u5c11\u5c81\uff1f", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , C.Age + ( A.Year - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\"", "question": "\u8fd4\u56de\u4e3b\u9898\u4e3a\u201cFree choice\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\u7684\u59d3\u540d\u548c\u53c2\u6f14\u65f6\u7684\u5e74\u9f84\u3002", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , C.Age + ( ( SELECT Year FROM concert WHERE Theme = \"Free choice\" ) - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\" OR strftime ( \"%Y\" , \"now\" ) - C.Age < 1985 GROUP BY C.Name", "question": "\u5047\u59821985\u5e74\u524d\u51fa\u751f\u7684\u6b4c\u624b\u90fd\u53c2\u52a0\u8fc7\u4e3b\u9898\u4e3a\u201cFree choice\u201d\u7684\u97f3\u4e50\u4f1a\uff0c\u4e3b\u9898\u4e3a\u201cFree choice\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\u53c2\u6f14\u65f6\u591a\u5c11\u5c81\uff1f\u4ed6\u4eec\u7684\u540d\u5b57\u5206\u522b\u662f\u4ec0\u4e48\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , C.Age + ( ( SELECT Year FROM concert WHERE Theme = \"Free choice\" ) - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\" OR strftime ( \"%Y\" , \"now\" ) - C.Age < 1985 GROUP BY C.Name", "question": "\u5047\u5982\u6240\u6709\u51fa\u751f\u4e8e1985\u5e74\u4ee5\u524d\u7684\u6b4c\u624b\u90fd\u662f\u4e3b\u9898\u4e3a\u201cFree choice\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\uff0c\u90a3\u4e48\u4e3b\u9898\u4e3a\u201cFree choice\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\u5f53\u65f6\u5206\u522b\u591a\u5c11\u5c81\uff1f\u4ed6\u4eec\u7684\u540d\u5b57\u5206\u522b\u662f\u4ec0\u4e48\uff1f", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM concert", "question": "\u6700\u65e9\u7684\u4e00\u6b21\u97f3\u4e50\u4f1a\u8ddd\u4eca\u591a\u5c11\u5e74\u4e86\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "concert_singer", "query": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM concert", "question": "\u591a\u5c11\u5e74\u4ee5\u524d\u4e3e\u884c\u4e86\u6700\u65e9\u7684\u97f3\u4e50\u4f1a\uff1f", "reasoning_type": "- C", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "concert_singer", "query": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM ( SELECt Year - 3 AS Year FROM concert WHERE Theme = \"Wide Awake\" UNION ALL SELECT Year FROM concert WHERE Theme != \"Wide Awake\" )", "question": "\u5047\u5982\u4e3b\u9898\u4e3a\u201cWide Awake\u201d\u7684\u97f3\u4e50\u4f1a\u63d0\u524d\u4e09\u5e74\u4e3e\u529e\uff0c\u6700\u65e9\u7684\u4e00\u6b21\u97f3\u4e50\u4f1a\u8ddd\u4eca\u591a\u5c11\u5e74\u4e86\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "concert_singer", "query": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM ( SELECt Year - 3 AS Year FROM concert WHERE Theme = \"Wide Awake\" UNION ALL SELECT Year FROM concert WHERE Theme != \"Wide Awake\" )", "question": "\u5047\u5982\u4e3b\u9898\u4e3a\u201cWide Awake\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u4e3e\u529e\u65f6\u95f4\u63d0\u524d\u4e09\u5e74\uff0c\u90a3\u4e48\u591a\u5c11\u5e74\u4ee5\u524d\u4e3e\u884c\u4e86\u6700\u65e9\u7684\u97f3\u4e50\u4f1a\uff1f", "reasoning_type": "- C H", "commonsense_knowledge": "The time duration is calculated by substracting the start time from the end time."}, {"db_id": "concert_singer", "query": "SELECT C.Name , A.Year - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\"", "question": "\u201cHome Visits\u201d\u97f3\u4e50\u4f1a20\u5468\u5e74\u7684\u65f6\u5019\uff0c\u5b83\u7684\u53c2\u6f14\u6b4c\u624b\u591a\u5c11\u5c81\u4e86\uff1f\u540c\u65f6\u7ed9\u51fa\u53c2\u6f14\u6b4c\u624b\u7684\u540d\u5b57\u3002", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , A.Year - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\"", "question": "\u8fd4\u56de\u201cHome Visits\u201d\u97f3\u4e50\u4f1a20\u5468\u5e74\u7684\u65f6\u5019\u5b83\u7684\u53c2\u6f14\u6b4c\u624b\u7684\u5e74\u7eaa\uff0c\u540c\u65f6\u7ed9\u51fa\u53c2\u6f14\u6b4c\u624b\u7684\u540d\u5b57\u3002", "reasoning_type": "- + C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , ( SELECT Year FROM concert WHERE concert_Name = \"Home Visits\" ) - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\" OR B.Singer_ID IN ( SELECT C.Singer_ID FROM concert A JOIN stadium B ON A.Stadium_ID = B.Stadium_ID JOIN singer_in_concert C ON A.concert_ID = C.concert_ID WHERE B.Name = \"Stark's Park\" ) GROUP BY B.Singer_ID", "question": "\u5047\u5982\u53c2\u52a0\u8fc7\u5728\u65af\u5854\u514b\u516c\u56ed\u4e3e\u884c\u7684\u97f3\u4e50\u4f1a\u7684\u6b4c\u624b\u5168\u90fd\u53c2\u52a0\u8fc7\u201cHome Visits\u201d\u97f3\u4e50\u4f1a\uff0c\u201cHome Visits\u201d\u97f3\u4e50\u4f1a20\u5468\u5e74\u7684\u65f6\u5019\uff0c\u5b83\u7684\u53c2\u6f14\u6b4c\u624b\u90fd\u591a\u5c11\u5c81\u4e86\uff1f\u540c\u65f6\u7ed9\u51fa\u4ed6\u4eec\u7684\u540d\u5b57\u3002", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT C.Name , ( SELECT Year FROM concert WHERE concert_Name = \"Home Visits\" ) - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\" OR B.Singer_ID IN ( SELECT C.Singer_ID FROM concert A JOIN stadium B ON A.Stadium_ID = B.Stadium_ID JOIN singer_in_concert C ON A.concert_ID = C.concert_ID WHERE B.Name = \"Stark's Park\" ) GROUP BY B.Singer_ID", "question": "\u5047\u8bbe\u6240\u6709\u53c2\u6f14\u8fc7\u5728\u65af\u5854\u514b\u516c\u56ed\u7684\u7ec4\u7ec7\u7684\u97f3\u4e50\u4f1a\u4e5f\u90fd\u53c2\u52a0\u8fc7\u201cHome Visits\u201d\u97f3\u4e50\u4f1a\uff0c\u8fd4\u56de\u201cHome Visits\u201d\u97f3\u4e50\u4f1a20\u5468\u5e74\u7684\u65f6\u5019\u5b83\u7684\u53c2\u6f14\u6b4c\u624b\u7684\u59d3\u540d\u548c\u5e74\u7eaa\u3002", "reasoning_type": "- + C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Capacity * 20 + ( SELECT Capacity * 5.5 FROM stadium WHERE Name = \"Hampden Park\" ) AS total FROM stadium WHERE Name = \"Balmoor\"", "question": "\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7968\u4ef7\u4e00\u5f2020\u7f8e\u5143\uff0c\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7968\u4ef7\u4e00\u5f205.5\u7f8e\u5143\u3002\u6ee1\u5ea7\u7684\u65f6\u5019\uff0c\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u548c\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u5356\u7968\u4e00\u5171\u80fd\u6323\u591a\u5c11\u94b1\uff1f", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying quantity to unit price."}, {"db_id": "concert_singer", "query": "SELECT Capacity * 20 + ( SELECT Capacity * 5.5 FROM stadium WHERE Name = \"Hampden Park\" ) AS total FROM stadium WHERE Name = \"Balmoor\"", "question": "\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u7968\u4ef7\u4e3a20\u7f8e\u5143\u4e00\u5f20\uff0c\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7684\u7968\u4ef7\u4e3a5.5\u7f8e\u5143\u4e00\u5f20\u3002\u5047\u8bbe\u4e24\u4e2a\u573a\u9986\u90fd\u6ee1\u5ea7\u7684\u8bdd\uff0c\u5b83\u4eec\u7684\u7968\u623f\u603b\u6536\u5165\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * C", "commonsense_knowledge": "Total price is calculated by multiplying quantity to unit price."}, {"db_id": "concert_singer", "query": "SELECT Capacity * 20 + 2 * Capacity * 5.5 AS total FROM stadium WHERE Name = \"Balmoor\"", "question": "\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7968\u4ef7\u4e00\u5f2020\u7f8e\u5143\uff0c\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7968\u4ef7\u4e00\u5f205.5\u7f8e\u5143\u3002\u5047\u5982\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7684\u5bb9\u91cf\u662f\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u4e24\u500d\uff0c\u6ee1\u5ea7\u7684\u65f6\u5019\uff0c\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u548c\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u5356\u7968\u4e00\u5171\u80fd\u6323\u591a\u5c11\u94b1\uff1f", "reasoning_type": "+ * C H", "commonsense_knowledge": "Total price is calculated by multiplying quantity to unit price."}, {"db_id": "concert_singer", "query": "SELECT Capacity * 20 + 2 * Capacity * 5.5 AS total FROM stadium WHERE Name = \"Balmoor\"", "question": "\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u7968\u4ef7\u4e3a20\u7f8e\u5143\u4e00\u5f20\uff0c\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7684\u7968\u4ef7\u4e3a5.5\u7f8e\u5143\u4e00\u5f20\u3002\u5047\u8bbe\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7684\u5bb9\u91cf\u662f\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u4e24\u500d\u4e14\u4e24\u4e2a\u573a\u9986\u90fd\u6ee1\u5ea7\u7684\u8bdd\uff0c\u5b83\u4eec\u7684\u7968\u623f\u603b\u6536\u5165\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * C H", "commonsense_knowledge": "Total price is calculated by multiplying quantity to unit price."}, {"db_id": "concert_singer", "query": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age >= 1980 )", "question": "1980\u5e74\u524d\u51fa\u751f\u7684\u6b4c\u624b\u51fa\u6f14\u4e00\u573a\u97f3\u4e50\u4f1a\u85aa\u916c355\u7f8e\u5143\uff0c1980\u5e74\u53ca\u4ee5\u540e\u51fa\u751f\u7684\u6b4c\u624b\u51fa\u6f14\u4e00\u573a\u97f3\u4e50\u4f1a\u85aa\u916c228\u7f8e\u5143\u3002\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u7ed9\u6b4c\u624b\u4ed8\u85aa\u916c\u4e00\u5171\u82b1\u4e86\u591a\u5c11\u94b1\uff1f", "reasoning_type": "- + * C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age >= 1980 )", "question": "\u5bf9\u4e8e1980\u5e74\u524d\u51fa\u751f\u7684\u6b4c\u624b\uff0c\u85aa\u916c\u662f355\u7f8e\u5143\u4e00\u573a\u6f14\u51fa\uff1b\u800c\u5bf9\u4e8e1980\u5e74\u53ca\u4ee5\u540e\u51fa\u751f\u7684\u6b4c\u624b\uff0c\u85aa\u916c\u662f228\u7f8e\u5143\u4e00\u573a\u6f14\u51fa\u3002\u8ba1\u7b97\u4e00\u4e0b\u76ee\u524d\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u603b\u5171\u82b1\u8d39\u4e86\u591a\u5c11\u7528\u4e8e\u652f\u4ed8\u6b4c\u624b\u7684\u85aa\u916c\u3002", "reasoning_type": "- + * C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )", "question": "1980\u5e74\u524d\u51fa\u751f\u7684\u6b4c\u624b\u51fa\u6f14\u4e00\u573a\u97f3\u4e50\u4f1a\u85aa\u916c355\u7f8e\u5143\uff0c1980\u5e74\u53ca\u4ee5\u540e\u51fa\u751f\u7684\u6b4c\u624b\u51fa\u6f14\u4e00\u573a\u97f3\u4e50\u4f1a\u85aa\u916c228\u7f8e\u5143\u3002\u5047\u5982\u8d3e\u65af\u6c40\u00b7\u5e03\u6717\u6bd4\u7ea6\u7ff0\u00b7\u5c3c\u897f\u5c3c\u514b\u59273\u5c81\uff0c\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u7ed9\u6b4c\u624b\u4ed8\u85aa\u916c\u4e00\u5171\u82b1\u4e86\u591a\u5c11\uff1f", "reasoning_type": "- + * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )", "question": "\u5bf9\u4e8e1980\u5e74\u524d\u51fa\u751f\u7684\u6b4c\u624b\uff0c\u85aa\u916c\u662f355\u7f8e\u5143\u4e00\u573a\u6f14\u51fa\uff1b\u800c\u5bf9\u4e8e1980\u5e74\u53ca\u4ee5\u540e\u51fa\u751f\u7684\u6b4c\u624b\uff0c\u85aa\u916c\u662f228\u7f8e\u5143\u4e00\u573a\u6f14\u51fa\u3002\u5047\u8bbe\u8d3e\u65af\u6c40\u00b7\u5e03\u6717\u6bd4\u7ea6\u7ff0\u00b7\u5c3c\u897f\u5c3c\u514b\u59273\u5c81\uff0c\u8ba1\u7b97\u4e00\u4e0b\u76ee\u524d\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u603b\u5171\u82b1\u8d39\u4e86\u591a\u5c11\u7528\u4e8e\u652f\u4ed8\u6b4c\u624b\u7684\u85aa\u916c\u3002", "reasoning_type": "- + * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT * FROM ( SELECT Name AS highest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )", "question": "\u5e73\u5747\u5165\u5ea7\u7387\u6700\u4f4e\u548c\u6700\u9ad8\u7684\u573a\u9986\u5206\u522b\u662f\u54ea\u4e2a\uff0c\u5b83\u4eec\u5206\u522b\u5f00\u8fc7\u51e0\u573a\u97f3\u4e50\u4f1a\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT * FROM ( SELECT Name AS highest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )", "question": "\u8bf7\u544a\u8bc9\u6211\u5e73\u5747\u5165\u5ea7\u7387\u6700\u4f4e\u548c\u6700\u9ad8\u7684\u573a\u9986\u7684\u540d\u5b57\u4ee5\u53ca\u5b83\u4eec\u5404\u81ea\u4e3e\u529e\u8fc7\u7684\u97f3\u4e50\u4f1a\u6570\u91cf\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT * FROM ( SELECT Name AS highest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )", "question": "\u5047\u5982\u76d6\u83f2\u5c14\u5fb7\u516c\u56ed\u573a\u9986\u7684\u5bb9\u91cf\u662f\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7684\u5341\u5206\u4e4b\u4e00\uff0c\u5e73\u5747\u5165\u5ea7\u7387\u6700\u4f4e\u548c\u6700\u9ad8\u7684\u573a\u9986\u5206\u522b\u662f\u54ea\u4e2a\uff0c\u5b83\u4eec\u5206\u522b\u5f00\u8fc7\u51e0\u573a\u97f3\u4e50\u4f1a\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT * FROM ( SELECT Name AS highest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )", "question": "\u5047\u5982\u76d6\u83f2\u5c14\u5fb7\u516c\u56ed\u573a\u9986\u7684\u5bb9\u91cf\u662f\u6c49\u666e\u767b\u516c\u56ed\u573a\u9986\u7684\u5341\u5206\u4e4b\u4e00\uff0c\u8bf7\u544a\u8bc9\u6211\u5e73\u5747\u5165\u5ea7\u7387\u6700\u4f4e\u548c\u6700\u9ad8\u7684\u573a\u9986\u7684\u540d\u5b57\u4ee5\u53ca\u5b83\u4eec\u5404\u81ea\u4e3e\u529e\u8fc7\u7684\u97f3\u4e50\u4f1a\u6570\u91cf\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID", "question": "\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u6bcf\u4e2a\u97f3\u4e50\u4f1a\u7684ID\u548c\u540d\u5b57\u5206\u522b\u662f\u4ec0\u4e48\uff1f\u6bcf\u573a\u97f3\u4e50\u4f1a\u4e2d\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u6b4c\u624b\u662f\u5973\u6b4c\u624b\uff1f", "reasoning_type": "+ * /", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID", "question": "\u5217\u51fa\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u6bcf\u573a\u97f3\u4e50\u4f1a\u7684ID\u548c\u540d\u5b57\uff0c\u4ee5\u53ca\u5176\u4e2d\u5973\u6b4c\u624b\u5728\u6b4c\u624b\u4e2d\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "+ * /", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID", "question": "\u5047\u5982\u201cWeek 2\u201d\u97f3\u4e50\u4f1a\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\uff0c\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u6bcf\u4e2a\u97f3\u4e50\u4f1a\u7684ID\u548c\u540d\u5b57\u662f\u4ec0\u4e48\uff0c\u5176\u4e2d\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u6b4c\u624b\u662f\u5973\u6b4c\u624b\uff1f", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID", "question": "\u5047\u5982\u201cWeek 2\u201d\u97f3\u4e50\u4f1a\u7684\u4e3e\u529e\u573a\u5730\u662f\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\uff0c\u5217\u51fa\u5728\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u4e3e\u529e\u7684\u6bcf\u573a\u97f3\u4e50\u4f1a\u7684ID\uff0c\u59d3\u540d\uff0c\u4ee5\u53ca\u5973\u6b4c\u624b\u5728\u6b4c\u624b\u4e2d\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM concert WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )", "question": "\u603b\u5171\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u97f3\u4e50\u4f1a\u662f\u5728\u5e73\u5747\u5165\u5ea7\u7387\u524d\u4e09\u7684\u573a\u9986\u4e3e\u529e\u7684\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM concert WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )", "question": "\u8ba1\u7b97\u4e00\u4e0b\u5728\u5e73\u5747\u5165\u5ea7\u7387\u524d\u4e09\u7684\u573a\u9986\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u6570\u91cf\u5360\u6240\u6709\u97f3\u4e50\u4f1a\u6570\u91cf\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )", "question": "\u5047\u5982\u4e3b\u9898\u4e3a\u201cBleeding Love\u201d\u7684\u97f3\u4e50\u4f1a\u5728\u683c\u91cc\u516c\u56ed\u4e3e\u529e\uff0c\u603b\u5171\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u97f3\u4e50\u4f1a\u662f\u5728\u5e73\u5747\u5165\u5ea7\u7387\u524d\u4e09\u7684\u573a\u9986\u4e3e\u529e\u7684\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )", "question": "\u5047\u8bbe\u4e3b\u9898\u4e3a\u201cBleeding Love\u201d\u7684\u97f3\u4e50\u4f1a\u7684\u4e3e\u529e\u573a\u5730\u662f\u683c\u91cc\u516c\u56ed\uff0c\u8ba1\u7b97\u4e00\u4e0b\u5728\u5e73\u5747\u5165\u5ea7\u7387\u524d\u4e09\u7684\u573a\u9986\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u6570\u91cf\u5360\u6240\u6709\u97f3\u4e50\u4f1a\u6570\u91cf\u7684\u767e\u5206\u6bd4\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID GROUP BY C.Stadium_ID HAVING COUNT ( DISTINCT ( B.Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )", "question": "\u54ea\u4e2a\u573a\u9986\u53bb\u6f14\u5531\u8fc7\u7684\u6b4c\u624b\u6570\u91cf\u4e0d\u5c11\u4e8e\u53bb\u683c\u91cc\u516c\u56ed\u573a\u9986\u5531\u8fc7\u7684\u6b4c\u624b\u6570\u91cf\u7684\u4e09\u500d\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID GROUP BY C.Stadium_ID HAVING COUNT ( DISTINCT ( B.Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )", "question": "\u5217\u51fa\u53bb\u6f14\u5531\u8fc7\u7684\u6b4c\u624b\u6570\u91cf\u4e0d\u5c11\u4e8e\u53bb\u683c\u91cc\u516c\u56ed\u573a\u9986\u5531\u8fc7\u7684\u6b4c\u624b\u6570\u91cf\u7684\u4e09\u500d\u7684\u573a\u9986\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT Name FROM ( SELECT C.Stadium_ID , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID UNION ALL SELECT ( SELECT Stadium_ID FROM stadium WHERE Name = \"Balmoor\" ) , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Somerset Park\" ) GROUP BY Stadium_ID HAVING COUNT ( DISTINCT ( Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )", "question": "\u5047\u5982\u53bb\u8fc7\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u6f14\u5531\u7684\u6b4c\u624b\u90fd\u53bb\u8fc7\u5df4\u5c14\u7a46\u5c14\u573a\u9986\uff0c\u54ea\u4e2a\u573a\u9986\u53bb\u6f14\u5531\u8fc7\u6b4c\u624b\u6570\u91cf\u4e0d\u5c11\u4e8e\u683c\u91cc\u516c\u56ed\u573a\u9986\u7684\u4e09\u500d\uff1f\u5217\u51fa\u8fd9\u4e9b\u573a\u9986\u7684\u540d\u5b57\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT Name FROM ( SELECT C.Stadium_ID , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID UNION ALL SELECT ( SELECT Stadium_ID FROM stadium WHERE Name = \"Balmoor\" ) , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Somerset Park\" ) GROUP BY Stadium_ID HAVING COUNT ( DISTINCT ( Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )", "question": "\u5047\u5982\u6240\u6709\u53bb\u8428\u9ed8\u585e\u7279\u516c\u56ed\u573a\u9986\u6f14\u5531\u8fc7\u7684\u6b4c\u624b\u4e5f\u90fd\u53bb\u8fc7\u5df4\u5c14\u7a46\u5c14\u573a\u9986\uff0c\u5217\u51fa\u53bb\u6f14\u5531\u8fc7\u7684\u6b4c\u624b\u6570\u91cf\u4e0d\u5c11\u4e8e\u53bb\u683c\u91cc\u516c\u56ed\u573a\u9986\u5531\u8fc7\u7684\u6b4c\u624b\u6570\u91cf\u7684\u4e09\u500d\u7684\u573a\u9986\u7684\u540d\u5b57\u3002", "reasoning_type": "* H", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / Capacity FROM stadium WHERE Name = \"Balmoor\" )", "question": "\u54ea\u4e2a\u573a\u9986\u7684\u6700\u9ad8\u5165\u5ea7\u7387\u6bd4\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u6700\u9ad8\u5165\u5ea7\u7387\u4e24\u500d\u8fd8\u591a\uff1f\u5217\u51fa\u8fd9\u4e9b\u573a\u9986\u7684\u540d\u5b57\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / Capacity FROM stadium WHERE Name = \"Balmoor\" )", "question": "\u5217\u51fa\u6700\u9ad8\u5165\u5ea7\u7387\u6bd4\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u6700\u9ad8\u5165\u5ea7\u7387\u4e24\u500d\u8fd8\u9ad8\u7684\u573a\u9986\u7684\u540d\u5b57\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / 5600 FROM stadium WHERE Name = \"Balmoor\" )", "question": "\u5047\u5982\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u5bb9\u91cf\u662f5600\uff0c\u54ea\u4e2a\u573a\u9986\u7684\u6700\u9ad8\u5165\u5ea7\u7387\u6bd4\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u6700\u9ad8\u5165\u5ea7\u7387\u4e24\u500d\u8fd8\u591a\uff1f\u5217\u51fa\u8fd9\u4e9b\u573a\u9986\u7684\u540d\u5b57\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / 5600 FROM stadium WHERE Name = \"Balmoor\" )", "question": "\u5047\u8bbe\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u6700\u591a\u53ea\u80fd\u5bb9\u4e0b5600\u4eba\uff0c\u5217\u51fa\u6700\u9ad8\u5165\u5ea7\u7387\u6bd4\u5df4\u5c14\u7a46\u5c14\u573a\u9986\u7684\u6700\u9ad8\u5165\u5ea7\u7387\u4e24\u500d\u8fd8\u9ad8\u7684\u573a\u9986\u7684\u540d\u5b57\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium."}, {"db_id": "concert_singer", "query": "SELECT A.concert_ID, A.concert_Name, 1.0 * COUNT (DISTINCT (B.Singer_ID)) / (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 GROUP BY A.concert_ID HAVING COUNT (DISTINCT (B.Singer_ID)) > (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" )", "question": "\u54ea\u573a2012\u5e74\u540e\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u7684\u6b4c\u624b\u6570\u91cf\u6bd4\u201cHappy Tonight\u201d\u4e3b\u9898\u97f3\u4e50\u4f1a\u6b4c\u624b\u6570\u91cf\u591a\uff0c\u662f\u5b83\u7684\u591a\u5c11\u500d\uff1f\u540c\u65f6\u7ed9\u51fa\u97f3\u4e50\u4f1a\u7684ID\u548c\u5168\u540d\u3002", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT A.concert_ID, A.concert_Name, 1.0 * COUNT (DISTINCT (B.Singer_ID)) / (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 GROUP BY A.concert_ID HAVING COUNT (DISTINCT (B.Singer_ID)) > (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" )", "question": "\u4e3e\u529e\u4e8e2012\u5e74\u4ee5\u540e\u7684\u97f3\u4e50\u4f1a\u4e2d\uff0c\u54ea\u573a\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\u6bd4\u201cHappy Tonight\u201d\u4e3b\u9898\u97f3\u4e50\u4f1a\u6b4c\u624b\u591a\uff0c\u662f\u5b83\u7684\u591a\u5c11\u500d\uff1f\u540c\u65f6\u7ed9\u51fa\u97f3\u4e50\u4f1a\u7684ID\u548c\u5168\u540d\u3002", "reasoning_type": "* /", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT A.concert_ID, A.concert_Name, 1.0 * (COUNT (DISTINCT (B.Singer_ID)) + 1) / (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) GROUP BY A.concert_ID HAVING (COUNT (DISTINCT (B.Singer_ID)) + 1) > (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) )", "question": "\u5047\u5982\u6bcf\u573a\u97f3\u4e50\u4f1a\u90fd\u6709\u6b4c\u624b\u4e54\u00b7\u590f\u666e\uff0c\u54ea\u573a2012\u5e74\u540e\u4e3e\u529e\u7684\u97f3\u4e50\u4f1a\u7684\u6b4c\u624b\u6570\u91cf\u6bd4\u201cHappy Tonight\u201d\u4e3b\u9898\u97f3\u4e50\u4f1a\u6b4c\u624b\u6570\u91cf\u591a\uff0c\u662f\u5b83\u7684\u591a\u5c11\u500d\uff1f\u540c\u65f6\u7ed9\u51fa\u8fd9\u4e9b\u97f3\u4e50\u4f1a\u7684ID\u548c\u5168\u540d\u3002", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT A.concert_ID, A.concert_Name, 1.0 * (COUNT (DISTINCT (B.Singer_ID)) + 1) / (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) GROUP BY A.concert_ID HAVING (COUNT (DISTINCT (B.Singer_ID)) + 1) > (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) )", "question": "\u5047\u5982\u4e54\u00b7\u590f\u666e\u53c2\u6f14\u4e86\u6bcf\u4e00\u573a\u97f3\u4e50\u4f1a\uff0c\u4e3e\u529e\u4e8e2012\u5e74\u4ee5\u540e\u7684\u97f3\u4e50\u4f1a\u4e2d\uff0c\u54ea\u573a\u97f3\u4e50\u4f1a\u7684\u53c2\u6f14\u6b4c\u624b\u6bd4\u201cHappy Tonight\u201d\u4e3b\u9898\u97f3\u4e50\u4f1a\u6b4c\u624b\u591a\uff0c\u662f\u5b83\u7684\u591a\u5c11\u500d\uff1f\u540c\u65f6\u7ed9\u51fa\u8fd9\u4e9b\u97f3\u4e50\u4f1a\u7684ID\u548c\u5168\u540d\u3002", "reasoning_type": "+ * / H", "commonsense_knowledge": ""}, {"db_id": "concert_singer", "query": "SELECT Name FROM singer WHERE ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Love\" ) - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - Song_release_year ) FROM singer WHERE Song_Name = \"Love\" )", "question": "\u201cLove\u201d\u8fd9\u9996\u6b4c\u53d1\u5e03\u7684\u65f6\u5019\u54ea\u4e9b\u6b4c\u624b\u7684\u5e74\u9f84\u6bd4\u8fd9\u9996\u6b4c\u7684\u6f14\u5531\u8005\u7684\u4e24\u500d\u8fd8\u5927\uff1f\u5217\u51fa\u8fd9\u4e9b\u6b4c\u624b\u7684\u540d\u5b57\u3002", "reasoning_type": "- * C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Name FROM singer WHERE ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Love\" ) - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - Song_release_year ) FROM singer WHERE Song_Name = \"Love\" )", "question": "\u5217\u51fa\u201cLove\u201d\u8fd9\u9996\u6b4c\u53d1\u5e03\u7684\u65f6\u5019\u5e74\u9f84\u6bd4\u8fd9\u9996\u6b4c\u7684\u6f14\u5531\u8005\u7684\u4e24\u500d\u8fd8\u5927\u7684\u6b4c\u624b\u7684\u540d\u5b57\u3002", "reasoning_type": "- * C", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Name FROM singer WHERE 2010 - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - 2010 ) FROM singer WHERE Song_Name = \"Love\" )", "question": "\u5047\u5982\u201cLove\u201d\u53d1\u5e03\u4e8e2010\u5e74\uff0c\u201cLove\u201d\u8fd9\u9996\u6b4c\u53d1\u5e03\u7684\u65f6\u5019\u54ea\u4e9b\u6b4c\u624b\u7684\u5e74\u9f84\u6bd4\u8fd9\u9996\u6b4c\u7684\u6f14\u5531\u8005\u7684\u4e24\u500d\u8fd8\u5927\uff1f\u5217\u51fa\u8fd9\u4e9b\u6b4c\u624b\u7684\u540d\u5b57\u3002", "reasoning_type": "- * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "concert_singer", "query": "SELECT Name FROM singer WHERE 2010 - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - 2010 ) FROM singer WHERE Song_Name = \"Love\" )", "question": "\u5047\u5982\u201cLove\u201d\u53d1\u5e03\u4e8e2010\u5e74\uff0c\u5217\u51fa\u201cLove\u201d\u8fd9\u9996\u6b4c\u53d1\u5e03\u7684\u65f6\u5019\u5e74\u9f84\u6bd4\u8fd9\u9996\u6b4c\u7684\u6f14\u5531\u8005\u7684\u4e24\u500d\u8fd8\u5927\u7684\u6b4c\u624b\u7684\u540d\u5b57\u3002", "reasoning_type": "- * C H", "commonsense_knowledge": "Age is calculated by substracting date of birth from a given date."}, {"db_id": "world_1", "query": "SELECT Continent FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 1", "question": "\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u6700\u9ad8\u7684\u56fd\u5bb6\u5728\u54ea\u4e2a\u5927\u6d32\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Continent FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 1", "question": "\u7ed9\u51fa\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u6700\u9ad8\u7684\u56fd\u5bb6\u6240\u5728\u7684\u5927\u6d32\u7684\u540d\u5b57\u3002", "reasoning_type": "* / C", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Continent FROM (SELECT \"1982268.0\" AS GNP, Population, Continent FROM country WHERE name = (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) UNION ALL SELECT GNP, Population, Continent FROM country WHERE name != (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) ) ORDER BY 1.0 * GNP / Population DESC LIMIT 1", "question": "\u5047\u5982\u5e93\u5c14\u52d2\u5e02\u6240\u5728\u7684\u56fd\u5bb6\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u4e3a1982268\uff0c\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u6700\u9ad8\u7684\u56fd\u5bb6\u5728\u54ea\u4e2a\u5927\u6d32\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Continent FROM (SELECT \"1982268.0\" AS GNP, Population, Continent FROM country WHERE name = (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) UNION ALL SELECT GNP, Population, Continent FROM country WHERE name != (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) ) ORDER BY 1.0 * GNP / Population DESC LIMIT 1", "question": "\u5982\u679c\u5e93\u5c14\u52d2\u5e02\u6240\u5728\u7684\u56fd\u5bb6\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u4e3a1982268\uff0c\u7ed9\u51fa\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u6700\u9ad8\u7684\u56fd\u5bb6\u6240\u5728\u7684\u5927\u6d32\u7684\u540d\u5b57\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "1979\u5e74\u540e\u72ec\u7acb\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6700\u9ad8\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "\u72ec\u7acb\u65e5\u671f\u57281979\u5e74\u4e4b\u540e\u7684\u56fd\u5bb6\u4e2d\uff0c\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6700\u9ad8\u7684\u56fd\u5bb6\u662f\u54ea\u4e2a\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT name FROM ( SELECT name , GNP + 1000000 AS GNP , GNPOld , IndepYear FROM country WHERE Continent = \"Oceania\" UNION ALL SELECT name , GNP , GNPOld , IndepYear FROM country WHERE Continent != \"Oceania\" ) WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "1979\u5e74\u540e\u72ec\u7acb\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6700\u9ad8\u5047\u5982\u5927\u6d0b\u6d32\u6240\u6709\u56fd\u5bb6\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a01000000\uff1f", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT name FROM ( SELECT name , GNP + 1000000 AS GNP , GNPOld , IndepYear FROM country WHERE Continent = \"Oceania\" UNION ALL SELECT name , GNP , GNPOld , IndepYear FROM country WHERE Continent != \"Oceania\" ) WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "\u5047\u8bbe\u5927\u6d0b\u6d32\u6240\u6709\u56fd\u5bb6\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a01000000\uff0c\u7ed9\u51fa\u57281979\u5e74\u4e4b\u540e\u72ec\u7acb\u7684\u56fd\u5bb6\u4e2d\uff0c\u6240\u6709\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6700\u9ad8\u7684\u56fd\u5bb6\u540d\u5b57\u3002", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1", "question": "\u54ea\u4e2a\u7edd\u5927\u591a\u6570\u4eba\u8bf4\u82f1\u8bed\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u5bc6\u5ea6\u6700\u9ad8\uff0c\u662f\u4eba\u53e3\u5bc6\u5ea6\u6700\u4f4e\u7684\u56fd\u5bb6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "The density of population is the ratio between the numbers of people to the size of land."}, {"db_id": "world_1", "query": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1", "question": "\u5728\u4f7f\u7528\u4eba\u6570\u5360\u6bd4\u6700\u9ad8\u7684\u8bed\u8a00\u4e3a\u82f1\u8bed\u7684\u56fd\u5bb6\u4e2d\uff0c\u4eba\u53e3\u5bc6\u5ea6\u6700\u9ad8\u7684\u56fd\u5bb6\u662f\u54ea\u4e2a\uff1f\u5b83\u7684\u4eba\u53e3\u5bc6\u5ea6\u662f\u4eba\u53e3\u5bc6\u5ea6\u6700\u4f4e\u7684\u56fd\u5bb6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C", "commonsense_knowledge": "The density of population is the ratio between the numbers of people to the size of land."}, {"db_id": "world_1", "query": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage A JOIN country B ON A.CountryCode = B.Code WHERE B.name != \"Ireland\" GROUP BY A.CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1", "question": "\u5047\u5982\u7231\u5c14\u5170\u6ca1\u6709\u4e00\u4e2a\u4eba\u8bf4\u82f1\u8bed\uff0c\u54ea\u4e2a\u7edd\u5927\u591a\u6570\u4eba\u8bf4\u82f1\u8bed\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u5bc6\u5ea6\u6700\u9ad8\uff0c\u662f\u4eba\u53e3\u5bc6\u5ea6\u6700\u4f4e\u7684\u56fd\u5bb6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "The density of population is the ratio between the numbers of people to the size of land."}, {"db_id": "world_1", "query": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage A JOIN country B ON A.CountryCode = B.Code WHERE B.name != \"Ireland\" GROUP BY A.CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1", "question": "\u5047\u8bbe\u7231\u5c14\u5170\u6ca1\u6709\u8bf4\u82f1\u8bed\u7684\u4eba\uff0c\u90a3\u4e48\u5728\u4f7f\u7528\u4eba\u6570\u5360\u6bd4\u6700\u9ad8\u7684\u8bed\u8a00\u4e3a\u82f1\u8bed\u7684\u56fd\u5bb6\u4e2d\uff0c\u4eba\u53e3\u5bc6\u5ea6\u6700\u9ad8\u7684\u56fd\u5bb6\u662f\u54ea\u4e2a\uff1f\u5b83\u7684\u4eba\u53e3\u5bc6\u5ea6\u662f\u4eba\u53e3\u5bc6\u5ea6\u6700\u4f4e\u7684\u56fd\u5bb6\u7684\u591a\u5c11\u500d\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "The density of population is the ratio between the numbers of people to the size of land."}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "\u963f\u62c9\u4f2f\u8bed\u4e0d\u662f\u5b98\u65b9\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u7684\u589e\u957f\u5e45\u5ea6\u6700\u5927\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "\u6240\u6709\u4e0d\u4ee5\u963f\u62c9\u4f2f\u8bed\u4e3a\u5b98\u65b9\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u5e45\u5ea6\u6700\u5927\u7684\u56fd\u5bb6\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM ( SELECT Name , Code , GNP , GNPOld + 9999.0 AS GNPOld FROM country WHERE Continent = \"South America\" UNION ALL SELECT Name , Code , GNP , GNPOld FROM country WHERE Continent != \"South America\" ) WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "\u5047\u5982\u5357\u7f8e\u6d32\u6240\u6709\u56fd\u5bb6\u8fc7\u53bb\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a09999\uff0c\u5728\u963f\u62c9\u4f2f\u8bed\u4e0d\u662f\u5b98\u65b9\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u7684\u589e\u957f\u5e45\u5ea6\u6700\u5927\uff1f", "reasoning_type": "- + * / H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM ( SELECT Name , Code , GNP , GNPOld + 9999.0 AS GNPOld FROM country WHERE Continent = \"South America\" UNION ALL SELECT Name , Code , GNP , GNPOld FROM country WHERE Continent != \"South America\" ) WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1", "question": "\u5982\u679c\u6240\u6709\u4f4d\u4e8e\u5357\u7f8e\u6d32\u7684\u56fd\u5bb6\u7684\u8fc7\u53bb\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a09999\uff0c\u5728\u6240\u6709\u4e0d\u4ee5\u963f\u62c9\u4f2f\u8bed\u4e3a\u5b98\u65b9\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u5e45\u5ea6\u6700\u5927\u7684\u56fd\u5bb6\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f", "reasoning_type": "- + * / H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT B.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE A.Continent = \"North America\" AND B.Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )", "question": "\u5317\u7f8e\u6d32\u54ea\u4e2a\u57ce\u5e02\u7684\u4eba\u53e3\u6570\u91cf\u81f3\u5c11\u662f\u6c5f\u539f\u9053\u884c\u653f\u533a\u7684\u4e24\u500d\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT B.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE A.Continent = \"North America\" AND B.Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )", "question": "\u5217\u51fa\u4f4d\u4e8e\u5317\u7f8e\u6d32\u7684\u4eba\u53e3\u6570\u91cf\u81f3\u5c11\u662f\u6c5f\u539f\u9053\u884c\u653f\u533a\u7684\u4e24\u500d\u7684\u6240\u6709\u57ce\u5e02\u540d\u5b57\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT DISTINCT ( name ) FROM ( SELECT B.name , B.Population * ( 1 + 0.01 ) AS Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND C.Language = \"English\" AND C.IsOfficial = \"T\" UNION ALL SELECT B.name , B.Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND NOT ( C.Language = \"English\" AND C.IsOfficial = \"T\" ) ) WHERE Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )", "question": "\u5047\u5982\u5317\u7f8e\u6d32\u4ee5\u82f1\u8bed\u4e3a\u5b98\u65b9\u8bed\u8a00\u7684\u56fd\u5bb6\u7684\u57ce\u5e02\u4eba\u53e3\u589e\u52a01%\uff0c\u5317\u7f8e\u6d32\u54ea\u4e2a\u57ce\u5e02\u7684\u4eba\u53e3\u6570\u91cf\u81f3\u5c11\u662f\u6c5f\u539f\u9053\u884c\u653f\u533a\u7684\u4e24\u500d\uff1f", "reasoning_type": "* + H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT DISTINCT ( name ) FROM ( SELECT B.name , B.Population * ( 1 + 0.01 ) AS Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND C.Language = \"English\" AND C.IsOfficial = \"T\" UNION ALL SELECT B.name , B.Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND NOT ( C.Language = \"English\" AND C.IsOfficial = \"T\" ) ) WHERE Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )", "question": "\u5047\u5982\u4ee5\u82f1\u8bed\u4e3a\u5b98\u65b9\u8bed\u8a00\u7684\u5317\u7f8e\u6d32\u56fd\u5bb6\u7684\u57ce\u5e02\u4eba\u53e3\u589e\u52a01%\uff0c\u5217\u51fa\u4f4d\u4e8e\u5317\u7f8e\u6d32\u7684\u4eba\u53e3\u6570\u91cf\u81f3\u5c11\u662f\u6c5f\u539f\u9053\u884c\u653f\u533a\u7684\u4e24\u500d\u7684\u6240\u6709\u57ce\u5e02\u540d\u5b57\u3002", "reasoning_type": "* + H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Continent FROM country GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )", "question": "\u54ea\u4e2a\u5927\u6d32\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u81f3\u5c11\u662f\u975e\u6d32\u76841.5\u500d\uff1f", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Continent FROM country GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )", "question": "\u5217\u51fa\u6240\u6709\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u81f3\u5c11\u662f\u975e\u6d32\u76841.5\u500d\u7684\u5927\u6d32\u7684\u540d\u5b57\u3002", "reasoning_type": "- * /", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Continent FROM ( SELECT Code , GNP * ( 1 + 0.005 ) AS GNP , GNPOld , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) UNION ALL SELECT Code , GNP , GNPOld , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) ) GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )", "question": "\u5047\u5982\u7edd\u5927\u591a\u6570\u4eba\u8bf4\u6377\u514b\u8bed\u7684\u56fd\u5bb6\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a00.5%\uff0c\u54ea\u4e2a\u5927\u6d32\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u81f3\u5c11\u662f\u975e\u6d32\u76841.5\u500d\uff1f", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Continent FROM ( SELECT Code , GNP * ( 1 + 0.005 ) AS GNP , GNPOld , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) UNION ALL SELECT Code , GNP , GNPOld , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) ) GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )", "question": "\u5982\u679c\u4f7f\u7528\u4eba\u6570\u6bd4\u4f8b\u6700\u9ad8\u7684\u8bed\u8a00\u662f\u6377\u514b\u8bed\u7684\u56fd\u5bb6\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a00.5%\uff0c\u5217\u51fa\u6240\u6709\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u81f3\u5c11\u662f\u975e\u6d32\u76841.5\u500d\u7684\u5927\u6d32\u7684\u540d\u5b57\u3002", "reasoning_type": "+ - * / H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )", "question": "\u54ea\u4e2a\u56fd\u5bb6\u7684\u4eba\u53e3\u9884\u671f\u5bff\u547d\u4e0d\u4f4e\u4e8e\u8d5e\u6bd4\u4e9a\u76841.5\u500d\uff1f", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )", "question": "\u5217\u51fa\u6240\u6709\u4eba\u53e3\u9884\u671f\u5bff\u547d\u4e0d\u4f4e\u4e8e\u8d5e\u6bd4\u4e9a\u76841.5\u500d\u7684\u56fd\u5bb6\u540d\u5b57\u3002", "reasoning_type": "*", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM ( SELECT Name , 90 AS LifeExpectancy FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) UNION ALL SELECT Name , LifeExpectancy FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) ) WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )", "question": "\u5047\u5982\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u662f\u5168\u7403\u524d20\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u9884\u671f\u5bff\u547d\u90fd\u662f90\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u4eba\u53e3\u9884\u671f\u5bff\u547d\u4e0d\u4f4e\u4e8e\u8d5e\u6bd4\u4e9a\u76841.5\u500d\uff1f", "reasoning_type": "* / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Name FROM ( SELECT Name , 90 AS LifeExpectancy FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) UNION ALL SELECT Name , LifeExpectancy FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) ) WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )", "question": "\u5047\u5982\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u6392\u540d\u5168\u7403\u524d20\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u9884\u671f\u5bff\u547d\u90fd\u662f90\uff0c\u5217\u51fa\u6240\u6709\u4eba\u53e3\u9884\u671f\u5bff\u547d\u4e0d\u4f4e\u4e8e\u8d5e\u6bd4\u4e9a\u76841.5\u500d\u7684\u56fd\u5bb6\u540d\u5b57\u3002", "reasoning_type": "* / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" ) ORDER BY GNPOld - GNP DESC LIMIT 1", "question": "\u8377\u5170\u8bed\u4e0d\u662f\u6700\u4e3b\u8981\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u7684\u51cf\u5c11\u91cf\u6700\u5927\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" ) ORDER BY GNPOld - GNP DESC LIMIT 1", "question": "\u5728\u6240\u6709\u4e0d\u4ee5\u8377\u5170\u8bed\u4e3a\u6700\u4e3b\u8981\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u964d\u4f4e\u5e45\u5ea6\u6700\u5927\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" UNION SELECT Code FROM country WHERE name = \"Aruba\" ) ORDER BY GNPOld - GNP DESC LIMIT 1", "question": "\u5047\u5982\u963f\u9c81\u5df4\u5c9b\u6240\u6709\u4eba\u90fd\u8bf4\u8377\u5170\u8bed\uff0c\u8377\u5170\u8bed\u4e0d\u662f\u6700\u4e3b\u8981\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u7684\u51cf\u5c11\u91cf\u6700\u5927\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" UNION SELECT Code FROM country WHERE name = \"Aruba\" ) ORDER BY GNPOld - GNP DESC LIMIT 1", "question": "\u5047\u5982\u8377\u5170\u8bed\u4e8b\u963f\u9c81\u5df4\u5c9b\u552f\u4e00\u4e00\u79cd\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u90a3\u4e48\u5728\u6240\u6709\u4e0d\u4ee5\u8377\u5170\u8bed\u4e3a\u6700\u4e3b\u8981\u8bed\u8a00\u7684\u56fd\u5bb6\u4e2d\uff0c\u54ea\u4e2a\u56fd\u5bb6\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u964d\u4f4e\u5e45\u5ea6\u6700\u5927\uff1f", "reasoning_type": "- H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM country WHERE GNP < GNPOld AND Continent = \"North America\"", "question": "\u5317\u7f8e\u6d32\u6d32\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u5448\u4e0b\u964d\u8d8b\u52bf\u7684\u56fd\u5bb6\u6bd4\u5357\u7f8e\u6d32\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM country WHERE GNP < GNPOld AND Continent = \"North America\"", "question": "\u4f4d\u4e8e\u5317\u7f8e\u6d32\u7684\u56fd\u5bb6\u4e2d\uff0c\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u5448\u4e0b\u964d\u8d8b\u52bf\u7684\u56fd\u5bb6\u6bd4\u5357\u7f8e\u6d32\u591a\u591a\u5c11\uff1f", "reasoning_type": "-", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM ( SELECT Name , GNP * ( 1 + 0.02 ) AS GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) UNION ALL SELECT Name , GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code NOT IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) ) WHERE GNP < GNPOld AND Continent = \"North America\"", "question": "\u5047\u5982\u5317\u7f8e\u6d32\u4eba\u53e3\u6700\u591a\u7684\u524d\u4e24\u4e2a\u56fd\u5bb6\u5f53\u524d\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a02%\uff0c\u5317\u7f8e\u6d32\u6d32\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u5448\u4e0b\u964d\u8d8b\u52bf\u7684\u56fd\u5bb6\u6bd4\u5357\u7f8e\u6d32\u591a\u591a\u5c11\uff1f", "reasoning_type": "+ - * H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM ( SELECT Name , GNP * ( 1 + 0.02 ) AS GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) UNION ALL SELECT Name , GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code NOT IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) ) WHERE GNP < GNPOld AND Continent = \"North America\"", "question": "\u5047\u5982\u5317\u7f8e\u6d32\u4eba\u53e3\u6570\u91cf\u6392\u540d\u6700\u9ad8\u7684\u4e24\u4e2a\u56fd\u5bb6\u7684\u5f53\u524d\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u52a02%\uff0c\u90a3\u4e48\u5728\u4f4d\u4e8e\u5317\u7f8e\u6d32\u7684\u56fd\u5bb6\u4e2d\uff0c\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u5448\u4e0b\u964d\u8d8b\u52bf\u7684\u56fd\u5bb6\u6bd4\u5357\u7f8e\u6d32\u591a\u591a\u5c11\uff1f", "reasoning_type": "+ - * H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Continent FROM country GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02", "question": "\u54ea\u4e2a\u5927\u6d32\u7684\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6bd4\u6b27\u6d32\u9ad8\u81f3\u5c11\u4e24\u4e2a\u70b9\uff1f", "reasoning_type": "+ - * / C", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Continent FROM country GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02", "question": "\u5217\u51fa\u6240\u6709\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6bd4\u6b27\u6d32\u9ad8\u81f3\u5c11\u4e24\u4e2a\u767e\u5206\u70b9\u7684\u5927\u6d32\u3002", "reasoning_type": "+ - * / C", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Continent FROM ( SELECT name , Continent , GNP * ( 1 - 0.02 ) AS GNP , Population , GNPOld FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) UNION ALL SELECT name , Continent , GNP , Population , GNPOld FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) ) GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02", "question": "\u5047\u5982\u4eba\u53e3\u9884\u671f\u5bff\u547d\u6700\u957f\u7684\u524d3\u4e2a\u56fd\u5bb6\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u51cf\u5c112%\uff0c\u54ea\u4e2a\u5927\u6d32\u7684\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6bd4\u6b27\u6d32\u9ad8\u81f3\u5c11\u4e24\u4e2a\u70b9\uff1f", "reasoning_type": "+ - * / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT Continent FROM ( SELECT name , Continent , GNP * ( 1 - 0.02 ) AS GNP , Population , GNPOld FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) UNION ALL SELECT name , Continent , GNP , Population , GNPOld FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) ) GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02", "question": "\u5047\u8bbe\u4eba\u53e3\u9884\u671f\u5bff\u547d\u4f4d\u5217\u524d3\u7684\u56fd\u5bb6\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u51cf\u5c112%\uff0c\u5217\u51fa\u6240\u6709\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u7387\u6bd4\u6b27\u6d32\u9ad8\u81f3\u5c11\u4e24\u4e2a\u767e\u5206\u70b9\u7684\u5927\u6d32\u3002", "reasoning_type": "+ - * / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population."}, {"db_id": "world_1", "query": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM country WHERE Continent = \"Asia\"", "question": "\u5982\u679c\u589e\u957f\u5e45\u5ea6\u4fdd\u6301\u4e0d\u53d8\uff0c\u5217\u51fa\u4e9a\u6d32\u6bcf\u4e2a\u56fd\u5bb6\u7684\u540d\u5b57\u3001\u8fc7\u53bb\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3001\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\uff0c\u5e76\u9884\u4f30\u4e00\u4e0b\u672a\u6765\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3002", "reasoning_type": "+ -", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM country WHERE Continent = \"Asia\"", "question": "\u5047\u8bbe\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u5e45\u5ea6\u4fdd\u6301\u6052\u5b9a\uff0c\u5217\u51fa\u6bcf\u4e2a\u4f4d\u4e8e\u4e9a\u6d32\u7684\u56fd\u5bb6\u7684\u540d\u5b57\u3001\u8fc7\u53bb\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3001\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\uff0c\u548c\u9884\u671f\u7684\u672a\u6765\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3002", "reasoning_type": "+ -", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM ( SELECT name , GNPOld , 1000000.0 AS GNP , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) UNION ALL SELECT name , GNPOld , GNP , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) ) WHERE Continent = \"Asia\"", "question": "\u5982\u679c\u589e\u957f\u5e45\u5ea6\u4fdd\u6301\u4e0d\u53d8\u4e14\u4ee5\u4e2d\u6587\u4e3a\u4e3b\u8981\u8bed\u8a00\u7684\u56fd\u5bb6\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u662f1000000.0\uff0c\u5217\u51fa\u4e9a\u6d32\u6bcf\u4e2a\u56fd\u5bb6\u7684\u540d\u5b57\u3001\u8fc7\u53bb\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3001\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\uff0c\u5e76\u9884\u4f30\u4e00\u4e0b\u672a\u6765\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\uff1f", "reasoning_type": "+ - H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM ( SELECT name , GNPOld , 1000000.0 AS GNP , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) UNION ALL SELECT name , GNPOld , GNP , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) ) WHERE Continent = \"Asia\"", "question": "\u5047\u8bbe\u4ee5\u4e2d\u6587\u4e3a\u4e3b\u8981\u8bed\u8a00\u7684\u56fd\u5bb6\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u662f1000000.0\uff0c\u4e14\u6240\u6709\u56fd\u5bb6\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u589e\u957f\u5e45\u5ea6\u4fdd\u6301\u6052\u5b9a\uff0c\u5217\u51fa\u6bcf\u4e2a\u4f4d\u4e8e\u4e9a\u6d32\u7684\u56fd\u5bb6\u7684\u540d\u5b57\u3001\u8fc7\u53bb\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3001\u73b0\u5728\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\uff0c\u548c\u9884\u671f\u7684\u672a\u6765\u7684\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u3002", "reasoning_type": "+ - H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM country WHERE name = \"United Kingdom\"", "question": "\u82f1\u56fd\u7684\u4eba\u53e3\u5e74\u589e\u957f\u7387\u662f0.4%\uff0c1\u5e74\u540e\u82f1\u56fd\u7684\u4eba\u53e3\u6570\u91cf\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM country WHERE name = \"United Kingdom\"", "question": "\u5217\u51fa1\u5e74\u4e4b\u540e\u82f1\u56fd\u7684\u4eba\u53e3\u6570\u91cf\uff0c\u5df2\u77e5\u82f1\u56fd\u7684\u4eba\u53e3\u5e74\u589e\u957f\u7387\u662f0.4%\u3002", "reasoning_type": "+ *", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM ( SELECT Continent , name , 103000 AS Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy > 75 UNION SELECT Continent , name , Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy <= 75 ) WHERE name = \"United Kingdom\"", "question": "\u5047\u5982\u6b27\u6d32\u4eba\u53e3\u9884\u671f\u5bff\u547d\u5927\u4e8e75\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u6570\u91cf\u4e3a103000\uff0c\u82f1\u56fd\u7684\u4eba\u53e3\u5e74\u589e\u957f\u7387\u662f0.4%\uff0c1\u5e74\u540e\u82f1\u56fd\u7684\u4eba\u53e3\u6570\u91cf\u662f\u591a\u5c11\uff1f", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM ( SELECT Continent , name , 103000 AS Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy > 75 UNION SELECT Continent , name , Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy <= 75 ) WHERE name = \"United Kingdom\"", "question": "\u5047\u8bbe\u4f4d\u4e8e\u6b27\u6d32\u4e14\u4eba\u53e3\u9884\u671f\u5bff\u547d\u5927\u4e8e75\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u6570\u91cf\u4e3a103000\uff0c\u8bf7\u5217\u51fa1\u5e74\u4e4b\u540e\u82f1\u56fd\u7684\u4eba\u53e3\u6570\u91cf\uff0c\u5df2\u77e5\u82f1\u56fd\u7684\u4eba\u53e3\u5e74\u589e\u957f\u7387\u662f0.4%\u3002", "reasoning_type": "+ * H", "commonsense_knowledge": ""}, {"db_id": "world_1", "query": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM country WHERE name = \"Zambia\"", "question": "\u6309\u7167\u8d5e\u6bd4\u4e9a\u7684\u9884\u671f\u5bff\u547d\uff0c\u51fa\u751f\u4e8e\u8d5e\u6bd4\u4e9a\u72ec\u7acb\u90a3\u5e74\u7684\u4eba\u7684\u9884\u671f\u6b7b\u4ea1\u5e74\u4efd\u662f\u54ea\u5e74\uff1f", "reasoning_type": "+ C", "commonsense_knowledge": "Age is calculated by subtracting date of birth from a given date."}, {"db_id": "world_1", "query": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM country WHERE name = \"Zambia\"", "question": "\u5047\u8bbe\u4e00\u4e2a\u8d5e\u6bd4\u4e9a\u4eba\u51fa\u751f\u4e8e\u8d5e\u6bd4\u4e9a\u72ec\u7acb\u7684\u90a3\u4e00\u5e74\uff0c\u8bf7\u6839\u636e\u8d5e\u6bd4\u4e9a\u7684\u9884\u671f\u5bff\u547d\u9884\u6d4b\u8fd9\u4e2a\u4eba\u7684\u9884\u671f\u6b7b\u4ea1\u5e74\u4efd\u3002", "reasoning_type": "+ C", "commonsense_knowledge": "Age is calculated by subtracting date of birth from a given date."}, {"db_id": "world_1", "query": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM ( SELECT name , IndepYear , LifeExpectancy + 10 AS LifeExpectancy FROM country WHERE 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) UNION ALL SELECT name , IndepYear , LifeExpectancy FROM country WHERE NOT ( 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) ) ) WHERE name = \"Zambia\"", "question": "\u5047\u5982\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u5927\u4e8e\u6b27\u6d32\u6240\u6709\u56fd\u5bb6\u7684\u5e73\u5747\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u9884\u671f\u5bff\u547d\u589e\u52a010\u5e74\uff0c\u6309\u7167\u8d5e\u6bd4\u4e9a\u7684\u9884\u671f\u5bff\u547d\uff0c\u51fa\u751f\u4e8e\u8d5e\u6bd4\u4e9a\u72ec\u7acb\u90a3\u5e74\u7684\u4eba\u7684\u9884\u671f\u6b7b\u4ea1\u5e74\u4efd\u662f\u54ea\u5e74\uff1f", "reasoning_type": "+ * / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population.  Age is calculated by subtracting date of birth from a given date."}, {"db_id": "world_1", "query": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM ( SELECT name , IndepYear , LifeExpectancy + 10 AS LifeExpectancy FROM country WHERE 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) UNION ALL SELECT name , IndepYear , LifeExpectancy FROM country WHERE NOT ( 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) ) ) WHERE name = \"Zambia\"", "question": "\u5047\u5982\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u5927\u4e8e\u6b27\u6d32\u6240\u6709\u56fd\u5bb6\u7684\u5e73\u5747\u4eba\u5747\u56fd\u6c11\u751f\u4ea7\u603b\u503c\u7684\u56fd\u5bb6\u7684\u4eba\u53e3\u9884\u671f\u5bff\u547d\u589e\u52a010\u5e74\uff0c\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u8d5e\u6bd4\u4e9a\u4eba\u51fa\u751f\u4e8e\u8d5e\u6bd4\u4e9a\u72ec\u7acb\u7684\u90a3\u4e00\u5e74\uff0c\u8bf7\u6839\u636e\u8d5e\u6bd4\u4e9a\u7684\u9884\u671f\u5bff\u547d\u9884\u6d4b\u8fd9\u4e2a\u4eba\u7684\u9884\u671f\u6b7b\u4ea1\u5e74\u4efd\u3002", "reasoning_type": "+ * / C H", "commonsense_knowledge": "GNP per capita is computed by dividing the GNP by the population.  Age is calculated by subtracting date of birth from a given date."}]