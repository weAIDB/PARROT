# Generated from sql/athena/AthenaParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,174,1544,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,1,0,1,0,3,
        0,253,8,0,1,0,1,0,1,1,1,1,3,1,259,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,3,2,287,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,3,3,301,8,3,1,4,1,4,1,4,1,4,5,4,307,8,4,10,4,12,4,310,
        9,4,3,4,312,8,4,1,4,1,4,1,5,1,5,3,5,318,8,5,1,5,1,5,1,5,1,5,1,5,
        5,5,325,8,5,10,5,12,5,328,9,5,3,5,330,8,5,1,5,1,5,3,5,334,8,5,1,
        5,1,5,1,5,3,5,339,8,5,1,5,1,5,1,5,5,5,344,8,5,10,5,12,5,347,9,5,
        3,5,349,8,5,1,5,1,5,3,5,353,8,5,1,5,1,5,3,5,357,8,5,1,5,3,5,360,
        8,5,1,5,1,5,1,5,1,5,1,5,5,5,367,8,5,10,5,12,5,370,9,5,3,5,372,8,
        5,1,5,1,5,1,5,3,5,377,8,5,3,5,379,8,5,1,5,1,5,1,5,3,5,384,8,5,3,
        5,386,8,5,1,6,1,6,1,7,1,7,3,7,392,8,7,1,7,1,7,3,7,396,8,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,3,13,419,8,13,1,13,1,13,1,13,1,13,
        1,13,5,13,426,8,13,10,13,12,13,429,9,13,3,13,431,8,13,1,14,1,14,
        1,14,1,14,5,14,437,8,14,10,14,12,14,440,9,14,1,14,1,14,1,15,1,15,
        1,15,5,15,447,8,15,10,15,12,15,450,9,15,1,16,1,16,3,16,454,8,16,
        1,16,3,16,457,8,16,1,16,1,16,1,16,3,16,462,8,16,1,16,3,16,465,8,
        16,1,17,1,17,1,17,1,17,1,17,3,17,472,8,17,1,17,1,17,1,17,3,17,477,
        8,17,1,18,1,18,1,18,1,18,3,18,483,8,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,5,18,495,8,18,10,18,12,18,498,9,18,1,18,
        1,18,3,18,502,8,18,1,19,1,19,1,19,1,19,3,19,508,8,19,1,19,3,19,511,
        8,19,1,19,1,19,1,19,3,19,516,8,19,1,19,3,19,519,8,19,1,19,3,19,522,
        8,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,5,21,532,8,21,10,21,
        12,21,535,9,21,1,21,3,21,538,8,21,1,22,1,22,1,22,1,22,1,22,3,22,
        545,8,22,1,22,1,22,1,22,3,22,550,8,22,1,22,1,22,1,22,1,22,1,22,1,
        23,1,23,1,23,5,23,560,8,23,10,23,12,23,563,9,23,1,24,1,24,1,24,5,
        24,568,8,24,10,24,12,24,571,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,5,27,596,8,27,10,27,12,27,599,9,27,1,27,1,27,1,
        27,3,27,604,8,27,1,28,1,28,1,28,1,28,3,28,610,8,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,3,28,619,8,28,1,29,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,634,8,32,10,32,12,32,637,
        9,32,1,32,1,32,3,32,641,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
        649,8,32,1,32,3,32,652,8,32,1,33,1,33,1,33,1,33,3,33,658,8,33,1,
        34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,669,8,35,1,36,1,
        36,1,36,1,36,1,36,1,36,5,36,677,8,36,10,36,12,36,680,9,36,3,36,682,
        8,36,1,37,1,37,1,38,1,38,1,38,3,38,689,8,38,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,5,41,714,8,41,10,41,12,41,717,9,41,
        1,42,1,42,1,43,1,43,3,43,723,8,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,5,44,734,8,44,10,44,12,44,737,9,44,1,44,1,44,1,45,
        1,45,1,46,1,46,1,46,1,46,3,46,747,8,46,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,5,47,757,8,47,10,47,12,47,760,9,47,1,47,1,47,3,47,
        764,8,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,
        1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,784,8,51,1,51,1,51,1,51,
        1,51,1,51,5,51,791,8,51,10,51,12,51,794,9,51,1,51,1,51,1,51,3,51,
        799,8,51,4,51,801,8,51,11,51,12,51,802,1,52,1,52,1,52,1,52,1,52,
        3,52,810,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        5,52,822,8,52,10,52,12,52,825,9,52,1,53,1,53,1,53,5,53,830,8,53,
        10,53,12,53,833,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,853,8,55,10,55,
        12,55,856,9,55,1,55,1,55,3,55,860,8,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,5,55,871,8,55,10,55,12,55,874,9,55,1,55,1,55,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,886,8,56,1,56,1,56,
        1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,901,
        8,57,10,57,12,57,904,9,57,1,57,1,57,1,58,1,58,1,58,3,58,911,8,58,
        1,58,1,58,1,58,3,58,916,8,58,1,58,1,58,3,58,920,8,58,1,58,1,58,1,
        58,1,58,1,58,1,58,5,58,928,8,58,10,58,12,58,931,9,58,1,58,1,58,3,
        58,935,8,58,1,59,1,59,1,59,1,59,3,59,941,8,59,1,59,1,59,1,59,3,59,
        946,8,59,1,59,1,59,1,59,1,59,1,59,5,59,953,8,59,10,59,12,59,956,
        9,59,1,59,1,59,3,59,960,8,59,1,59,1,59,3,59,964,8,59,1,59,1,59,1,
        59,1,59,1,59,1,59,5,59,972,8,59,10,59,12,59,975,9,59,1,59,1,59,3,
        59,979,8,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,987,8,59,10,59,12,
        59,990,9,59,1,59,1,59,1,59,1,59,1,59,3,59,997,8,59,1,59,1,59,1,59,
        3,59,1002,8,59,1,59,1,59,1,59,3,59,1007,8,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,3,59,1016,8,59,1,60,1,60,1,61,1,61,3,61,1022,8,61,
        1,61,3,61,1025,8,61,1,61,3,61,1028,8,61,1,61,3,61,1031,8,61,1,61,
        3,61,1034,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1044,
        8,61,3,61,1046,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1055,
        8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,
        1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1091,8,67,1,68,
        1,68,1,69,1,69,1,69,1,69,3,69,1099,8,69,1,70,1,70,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,5,71,1111,8,71,10,71,12,71,1114,9,71,1,
        71,1,71,3,71,1118,8,71,1,71,1,71,1,71,1,71,3,71,1124,8,71,1,71,3,
        71,1127,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,3,74,1137,8,
        74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,3,75,1146,8,75,1,75,1,75,1,
        75,3,75,1151,8,75,1,75,1,75,1,75,3,75,1156,8,75,1,76,1,76,1,77,1,
        77,3,77,1162,8,77,1,78,1,78,1,78,3,78,1167,8,78,1,78,1,78,3,78,1171,
        8,78,1,79,1,79,1,79,3,79,1176,8,79,1,79,1,79,1,80,1,80,1,80,3,80,
        1183,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1206,8,82,
        3,82,1208,8,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1216,8,83,1,83,
        1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,3,85,1229,8,85,
        1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,3,87,1239,8,87,1,87,3,87,
        1242,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1251,8,88,1,89,
        1,89,1,89,1,89,3,89,1257,8,89,1,89,1,89,3,89,1261,8,89,1,90,1,90,
        1,91,1,91,1,92,1,92,5,92,1269,8,92,10,92,12,92,1272,9,92,1,92,1,
        92,1,92,1,92,1,92,3,92,1279,8,92,1,92,1,92,1,92,1,92,1,92,1,92,5,
        92,1287,8,92,10,92,12,92,1290,9,92,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1299,8,93,1,93,1,93,1,93,1,93,3,93,1305,8,93,1,93,1,93,
        1,93,1,93,1,93,3,93,1312,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        3,93,1321,8,93,1,93,1,93,1,93,1,93,1,93,3,93,1328,8,93,1,93,1,93,
        1,93,1,93,1,93,1,93,3,93,1336,8,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1345,8,93,1,94,1,94,1,94,1,94,1,95,1,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1376,8,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,5,96,1387,8,96,10,96,12,96,1390,9,
        96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,4,97,1399,8,97,11,97,12,97,
        1400,1,97,1,97,3,97,1405,8,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,
        1,98,4,98,1415,8,98,11,98,12,98,1416,1,98,1,98,3,98,1421,8,98,1,
        98,1,98,1,99,1,99,3,99,1427,8,99,1,100,1,100,1,100,1,100,3,100,1433,
        8,100,1,101,1,101,1,102,1,102,1,102,3,102,1440,8,102,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,5,103,1460,8,103,10,103,12,103,1463,
        9,103,1,103,1,103,3,103,1467,8,103,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1493,8,104,
        1,105,1,105,1,106,1,106,1,107,1,107,1,107,1,107,1,107,3,107,1504,
        8,107,1,108,1,108,1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,
        1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,118,
        1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,121,1,122,1,122,
        1,122,1,123,1,123,1,123,1,124,1,124,1,124,0,2,184,192,125,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,0,20,3,0,46,
        46,68,68,135,135,1,0,108,109,2,0,2,2,39,39,2,0,9,9,37,37,2,0,54,
        54,76,76,2,0,74,74,127,127,3,0,59,59,74,74,127,127,4,0,40,40,70,
        70,81,81,140,140,2,0,28,28,110,110,2,0,50,50,57,57,2,0,18,18,106,
        106,2,0,29,29,111,111,2,0,52,52,133,133,3,0,2,2,6,6,119,119,2,0,
        148,148,154,159,1,0,163,164,2,0,162,162,165,166,2,0,21,21,142,142,
        2,0,167,167,169,169,2,0,58,58,63,63,1646,0,250,1,0,0,0,2,258,1,0,
        0,0,4,286,1,0,0,0,6,300,1,0,0,0,8,311,1,0,0,0,10,315,1,0,0,0,12,
        387,1,0,0,0,14,389,1,0,0,0,16,397,1,0,0,0,18,399,1,0,0,0,20,401,
        1,0,0,0,22,407,1,0,0,0,24,409,1,0,0,0,26,411,1,0,0,0,28,432,1,0,
        0,0,30,443,1,0,0,0,32,464,1,0,0,0,34,466,1,0,0,0,36,478,1,0,0,0,
        38,503,1,0,0,0,40,527,1,0,0,0,42,533,1,0,0,0,44,539,1,0,0,0,46,556,
        1,0,0,0,48,564,1,0,0,0,50,572,1,0,0,0,52,579,1,0,0,0,54,603,1,0,
        0,0,56,605,1,0,0,0,58,620,1,0,0,0,60,623,1,0,0,0,62,625,1,0,0,0,
        64,651,1,0,0,0,66,657,1,0,0,0,68,659,1,0,0,0,70,668,1,0,0,0,72,670,
        1,0,0,0,74,683,1,0,0,0,76,688,1,0,0,0,78,690,1,0,0,0,80,694,1,0,
        0,0,82,705,1,0,0,0,84,718,1,0,0,0,86,722,1,0,0,0,88,724,1,0,0,0,
        90,740,1,0,0,0,92,742,1,0,0,0,94,748,1,0,0,0,96,770,1,0,0,0,98,774,
        1,0,0,0,100,776,1,0,0,0,102,778,1,0,0,0,104,804,1,0,0,0,106,826,
        1,0,0,0,108,834,1,0,0,0,110,844,1,0,0,0,112,877,1,0,0,0,114,891,
        1,0,0,0,116,907,1,0,0,0,118,936,1,0,0,0,120,1017,1,0,0,0,122,1045,
        1,0,0,0,124,1047,1,0,0,0,126,1056,1,0,0,0,128,1062,1,0,0,0,130,1068,
        1,0,0,0,132,1073,1,0,0,0,134,1090,1,0,0,0,136,1092,1,0,0,0,138,1094,
        1,0,0,0,140,1100,1,0,0,0,142,1102,1,0,0,0,144,1128,1,0,0,0,146,1130,
        1,0,0,0,148,1134,1,0,0,0,150,1143,1,0,0,0,152,1157,1,0,0,0,154,1159,
        1,0,0,0,156,1163,1,0,0,0,158,1172,1,0,0,0,160,1179,1,0,0,0,162,1186,
        1,0,0,0,164,1207,1,0,0,0,166,1209,1,0,0,0,168,1219,1,0,0,0,170,1224,
        1,0,0,0,172,1230,1,0,0,0,174,1234,1,0,0,0,176,1243,1,0,0,0,178,1252,
        1,0,0,0,180,1262,1,0,0,0,182,1264,1,0,0,0,184,1266,1,0,0,0,186,1344,
        1,0,0,0,188,1346,1,0,0,0,190,1350,1,0,0,0,192,1375,1,0,0,0,194,1391,
        1,0,0,0,196,1408,1,0,0,0,198,1426,1,0,0,0,200,1432,1,0,0,0,202,1434,
        1,0,0,0,204,1439,1,0,0,0,206,1466,1,0,0,0,208,1492,1,0,0,0,210,1494,
        1,0,0,0,212,1496,1,0,0,0,214,1498,1,0,0,0,216,1505,1,0,0,0,218,1507,
        1,0,0,0,220,1509,1,0,0,0,222,1511,1,0,0,0,224,1513,1,0,0,0,226,1515,
        1,0,0,0,228,1517,1,0,0,0,230,1519,1,0,0,0,232,1521,1,0,0,0,234,1523,
        1,0,0,0,236,1525,1,0,0,0,238,1527,1,0,0,0,240,1529,1,0,0,0,242,1531,
        1,0,0,0,244,1535,1,0,0,0,246,1538,1,0,0,0,248,1541,1,0,0,0,250,252,
        3,2,1,0,251,253,5,149,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,
        1,0,0,0,254,255,5,0,0,1,255,1,1,0,0,0,256,259,3,4,2,0,257,259,3,
        6,3,0,258,256,1,0,0,0,258,257,1,0,0,0,259,3,1,0,0,0,260,287,3,88,
        44,0,261,287,3,94,47,0,262,287,3,102,51,0,263,287,3,104,52,0,264,
        287,3,108,54,0,265,287,3,110,55,0,266,287,3,112,56,0,267,287,3,114,
        57,0,268,287,3,116,58,0,269,287,3,118,59,0,270,287,3,142,71,0,271,
        287,3,148,74,0,272,287,3,156,78,0,273,287,3,158,79,0,274,287,3,160,
        80,0,275,287,3,150,75,0,276,287,3,154,77,0,277,287,3,162,81,0,278,
        287,3,164,82,0,279,287,3,166,83,0,280,287,3,168,84,0,281,287,3,170,
        85,0,282,287,3,172,86,0,283,287,3,174,87,0,284,287,3,176,88,0,285,
        287,3,178,89,0,286,260,1,0,0,0,286,261,1,0,0,0,286,262,1,0,0,0,286,
        263,1,0,0,0,286,264,1,0,0,0,286,265,1,0,0,0,286,266,1,0,0,0,286,
        267,1,0,0,0,286,268,1,0,0,0,286,269,1,0,0,0,286,270,1,0,0,0,286,
        271,1,0,0,0,286,272,1,0,0,0,286,273,1,0,0,0,286,274,1,0,0,0,286,
        275,1,0,0,0,286,276,1,0,0,0,286,277,1,0,0,0,286,278,1,0,0,0,286,
        279,1,0,0,0,286,280,1,0,0,0,286,281,1,0,0,0,286,282,1,0,0,0,286,
        283,1,0,0,0,286,284,1,0,0,0,286,285,1,0,0,0,287,5,1,0,0,0,288,301,
        3,8,4,0,289,301,3,26,13,0,290,301,3,34,17,0,291,301,3,36,18,0,292,
        301,3,38,19,0,293,301,3,56,28,0,294,301,3,58,29,0,295,301,3,64,32,
        0,296,301,3,68,34,0,297,301,3,72,36,0,298,301,3,78,39,0,299,301,
        3,80,40,0,300,288,1,0,0,0,300,289,1,0,0,0,300,290,1,0,0,0,300,291,
        1,0,0,0,300,292,1,0,0,0,300,293,1,0,0,0,300,294,1,0,0,0,300,295,
        1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,1,0,0,0,300,299,
        1,0,0,0,301,7,1,0,0,0,302,303,5,147,0,0,303,308,3,20,10,0,304,305,
        5,153,0,0,305,307,3,20,10,0,306,304,1,0,0,0,307,310,1,0,0,0,308,
        306,1,0,0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,
        302,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,3,10,5,0,314,
        9,1,0,0,0,315,317,5,112,0,0,316,318,3,12,6,0,317,316,1,0,0,0,317,
        318,1,0,0,0,318,319,1,0,0,0,319,329,3,30,15,0,320,321,5,58,0,0,321,
        326,3,16,8,0,322,323,5,153,0,0,323,325,3,16,8,0,324,322,1,0,0,0,
        325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,330,1,0,0,0,
        328,326,1,0,0,0,329,320,1,0,0,0,329,330,1,0,0,0,330,333,1,0,0,0,
        331,332,5,146,0,0,332,334,3,24,12,0,333,331,1,0,0,0,333,334,1,0,
        0,0,334,348,1,0,0,0,335,336,5,60,0,0,336,338,5,17,0,0,337,339,3,
        12,6,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,345,3,
        22,11,0,341,342,5,153,0,0,342,344,3,22,11,0,343,341,1,0,0,0,344,
        347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,
        345,1,0,0,0,348,335,1,0,0,0,348,349,1,0,0,0,349,352,1,0,0,0,350,
        351,5,61,0,0,351,353,3,24,12,0,352,350,1,0,0,0,352,353,1,0,0,0,353,
        359,1,0,0,0,354,356,7,0,0,0,355,357,3,12,6,0,356,355,1,0,0,0,356,
        357,1,0,0,0,357,358,1,0,0,0,358,360,3,10,5,0,359,354,1,0,0,0,359,
        360,1,0,0,0,360,371,1,0,0,0,361,362,5,95,0,0,362,363,5,17,0,0,363,
        368,3,14,7,0,364,365,5,153,0,0,365,367,3,14,7,0,366,364,1,0,0,0,
        367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,372,1,0,0,0,
        370,368,1,0,0,0,371,361,1,0,0,0,371,372,1,0,0,0,372,378,1,0,0,0,
        373,374,5,90,0,0,374,376,3,18,9,0,375,377,7,1,0,0,376,375,1,0,0,
        0,376,377,1,0,0,0,377,379,1,0,0,0,378,373,1,0,0,0,378,379,1,0,0,
        0,379,385,1,0,0,0,380,383,5,78,0,0,381,384,3,18,9,0,382,384,5,2,
        0,0,383,381,1,0,0,0,383,382,1,0,0,0,384,386,1,0,0,0,385,380,1,0,
        0,0,385,386,1,0,0,0,386,11,1,0,0,0,387,388,7,2,0,0,388,13,1,0,0,
        0,389,391,3,192,96,0,390,392,7,3,0,0,391,390,1,0,0,0,391,392,1,0,
        0,0,392,395,1,0,0,0,393,394,5,89,0,0,394,396,7,4,0,0,395,393,1,0,
        0,0,395,396,1,0,0,0,396,15,1,0,0,0,397,398,3,224,112,0,398,17,1,
        0,0,0,399,400,3,202,101,0,400,19,1,0,0,0,401,402,3,240,120,0,402,
        403,5,8,0,0,403,404,5,150,0,0,404,405,3,10,5,0,405,406,5,151,0,0,
        406,21,1,0,0,0,407,408,3,192,96,0,408,23,1,0,0,0,409,410,3,184,92,
        0,410,25,1,0,0,0,411,412,5,65,0,0,412,413,5,69,0,0,413,418,3,228,
        114,0,414,415,5,150,0,0,415,416,3,48,24,0,416,417,5,151,0,0,417,
        419,1,0,0,0,418,414,1,0,0,0,418,419,1,0,0,0,419,430,1,0,0,0,420,
        431,3,10,5,0,421,422,5,141,0,0,422,427,3,28,14,0,423,424,5,153,0,
        0,424,426,3,28,14,0,425,423,1,0,0,0,426,429,1,0,0,0,427,425,1,0,
        0,0,427,428,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,430,420,1,0,
        0,0,430,421,1,0,0,0,431,27,1,0,0,0,432,433,5,150,0,0,433,438,3,76,
        38,0,434,435,5,153,0,0,435,437,3,76,38,0,436,434,1,0,0,0,437,440,
        1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,438,
        1,0,0,0,441,442,5,151,0,0,442,29,1,0,0,0,443,448,3,32,16,0,444,445,
        5,153,0,0,445,447,3,32,16,0,446,444,1,0,0,0,447,450,1,0,0,0,448,
        446,1,0,0,0,448,449,1,0,0,0,449,31,1,0,0,0,450,448,1,0,0,0,451,456,
        3,192,96,0,452,454,5,8,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,
        1,0,0,0,455,457,3,234,117,0,456,453,1,0,0,0,456,457,1,0,0,0,457,
        465,1,0,0,0,458,459,3,224,112,0,459,460,5,152,0,0,460,462,1,0,0,
        0,461,458,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,465,5,162,
        0,0,464,451,1,0,0,0,464,461,1,0,0,0,465,33,1,0,0,0,466,467,5,35,
        0,0,467,471,5,58,0,0,468,469,3,218,109,0,469,470,5,152,0,0,470,472,
        1,0,0,0,471,468,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,476,
        3,224,112,0,474,475,5,146,0,0,475,477,3,86,43,0,476,474,1,0,0,0,
        476,477,1,0,0,0,477,35,1,0,0,0,478,482,5,137,0,0,479,480,3,218,109,
        0,480,481,5,152,0,0,481,483,1,0,0,0,482,479,1,0,0,0,482,483,1,0,
        0,0,483,484,1,0,0,0,484,485,3,224,112,0,485,486,5,116,0,0,486,487,
        3,216,108,0,487,488,5,148,0,0,488,496,3,192,96,0,489,490,5,153,0,
        0,490,491,3,216,108,0,491,492,5,148,0,0,492,493,3,192,96,0,493,495,
        1,0,0,0,494,489,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,
        1,0,0,0,497,501,1,0,0,0,498,496,1,0,0,0,499,500,5,146,0,0,500,502,
        3,86,43,0,501,499,1,0,0,0,501,502,1,0,0,0,502,37,1,0,0,0,503,504,
        5,84,0,0,504,505,5,69,0,0,505,510,3,60,30,0,506,508,5,8,0,0,507,
        506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,511,3,236,118,0,
        510,507,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,515,5,138,0,
        0,513,516,3,62,31,0,514,516,3,180,90,0,515,513,1,0,0,0,515,514,1,
        0,0,0,516,521,1,0,0,0,517,519,5,8,0,0,518,517,1,0,0,0,518,519,1,
        0,0,0,519,520,1,0,0,0,520,522,3,238,119,0,521,518,1,0,0,0,521,522,
        1,0,0,0,522,523,1,0,0,0,523,524,5,91,0,0,524,525,3,40,20,0,525,526,
        3,42,21,0,526,39,1,0,0,0,527,528,3,86,43,0,528,41,1,0,0,0,529,532,
        3,50,25,0,530,532,3,52,26,0,531,529,1,0,0,0,531,530,1,0,0,0,532,
        535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,537,1,0,0,0,535,
        533,1,0,0,0,536,538,3,44,22,0,537,536,1,0,0,0,537,538,1,0,0,0,538,
        43,1,0,0,0,539,540,5,145,0,0,540,541,5,87,0,0,541,544,5,83,0,0,542,
        543,5,5,0,0,543,545,3,192,96,0,544,542,1,0,0,0,544,545,1,0,0,0,545,
        546,1,0,0,0,546,547,5,129,0,0,547,549,5,65,0,0,548,550,3,48,24,0,
        549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,141,0,
        0,552,553,5,150,0,0,553,554,3,46,23,0,554,555,5,151,0,0,555,45,1,
        0,0,0,556,561,3,192,96,0,557,558,5,153,0,0,558,560,3,192,96,0,559,
        557,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,
        47,1,0,0,0,563,561,1,0,0,0,564,569,3,216,108,0,565,566,5,153,0,0,
        566,568,3,216,108,0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,0,
        0,0,569,570,1,0,0,0,570,49,1,0,0,0,571,569,1,0,0,0,572,573,5,145,
        0,0,573,574,5,83,0,0,574,575,5,5,0,0,575,576,3,192,96,0,576,577,
        5,129,0,0,577,578,3,54,27,0,578,51,1,0,0,0,579,580,5,145,0,0,580,
        581,5,83,0,0,581,582,5,129,0,0,582,583,3,54,27,0,583,53,1,0,0,0,
        584,585,5,137,0,0,585,586,5,116,0,0,586,587,5,150,0,0,587,588,3,
        216,108,0,588,589,5,148,0,0,589,597,3,192,96,0,590,591,5,153,0,0,
        591,592,3,216,108,0,592,593,5,148,0,0,593,594,3,192,96,0,594,596,
        1,0,0,0,595,590,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,
        1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,601,5,151,0,0,601,604,
        1,0,0,0,602,604,5,35,0,0,603,584,1,0,0,0,603,602,1,0,0,0,604,55,
        1,0,0,0,605,609,5,92,0,0,606,607,3,218,109,0,607,608,5,152,0,0,608,
        610,1,0,0,0,609,606,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,
        612,3,224,112,0,612,613,5,107,0,0,613,614,5,27,0,0,614,615,5,138,
        0,0,615,618,5,13,0,0,616,617,5,146,0,0,617,619,3,86,43,0,618,616,
        1,0,0,0,618,619,1,0,0,0,619,57,1,0,0,0,620,621,5,139,0,0,621,622,
        3,60,30,0,622,59,1,0,0,0,623,624,3,224,112,0,624,61,1,0,0,0,625,
        626,3,224,112,0,626,63,1,0,0,0,627,628,5,49,0,0,628,640,3,70,35,
        0,629,630,5,150,0,0,630,635,3,66,33,0,631,632,5,153,0,0,632,634,
        3,66,33,0,633,631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,
        1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,639,5,151,0,0,639,641,
        1,0,0,0,640,629,1,0,0,0,640,641,1,0,0,0,641,652,1,0,0,0,642,643,
        5,49,0,0,643,648,5,4,0,0,644,645,5,150,0,0,645,646,5,56,0,0,646,
        647,7,5,0,0,647,649,5,151,0,0,648,644,1,0,0,0,648,649,1,0,0,0,649,
        650,1,0,0,0,650,652,3,70,35,0,651,627,1,0,0,0,651,642,1,0,0,0,652,
        65,1,0,0,0,653,654,5,56,0,0,654,658,7,6,0,0,655,656,5,134,0,0,656,
        658,7,7,0,0,657,653,1,0,0,0,657,655,1,0,0,0,658,67,1,0,0,0,659,660,
        5,101,0,0,660,661,3,222,111,0,661,662,5,58,0,0,662,663,3,70,35,0,
        663,69,1,0,0,0,664,669,3,8,4,0,665,669,3,142,71,0,666,669,3,26,13,
        0,667,669,3,80,40,0,668,664,1,0,0,0,668,665,1,0,0,0,668,666,1,0,
        0,0,668,667,1,0,0,0,669,71,1,0,0,0,670,671,5,47,0,0,671,681,3,222,
        111,0,672,673,5,138,0,0,673,678,3,74,37,0,674,675,5,153,0,0,675,
        677,3,74,37,0,676,674,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,
        679,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,681,672,1,0,0,0,681,
        682,1,0,0,0,682,73,1,0,0,0,683,684,3,76,38,0,684,75,1,0,0,0,685,
        689,3,202,101,0,686,689,3,230,115,0,687,689,3,182,91,0,688,685,1,
        0,0,0,688,686,1,0,0,0,688,687,1,0,0,0,689,77,1,0,0,0,690,691,5,32,
        0,0,691,692,5,101,0,0,692,693,3,222,111,0,693,79,1,0,0,0,694,695,
        5,136,0,0,695,696,5,150,0,0,696,697,3,8,4,0,697,698,5,151,0,0,698,
        699,5,132,0,0,699,700,3,230,115,0,700,701,5,147,0,0,701,702,5,150,
        0,0,702,703,3,82,41,0,703,704,5,151,0,0,704,81,1,0,0,0,705,706,3,
        144,72,0,706,707,5,148,0,0,707,715,3,84,42,0,708,709,5,153,0,0,709,
        710,3,144,72,0,710,711,5,148,0,0,711,712,3,84,42,0,712,714,1,0,0,
        0,713,708,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,
        0,716,83,1,0,0,0,717,715,1,0,0,0,718,719,3,76,38,0,719,85,1,0,0,
        0,720,723,3,182,91,0,721,723,3,184,92,0,722,720,1,0,0,0,722,721,
        1,0,0,0,723,87,1,0,0,0,724,725,5,3,0,0,725,726,3,90,45,0,726,727,
        3,220,110,0,727,728,5,116,0,0,728,729,5,31,0,0,729,730,5,150,0,0,
        730,735,3,92,46,0,731,732,5,153,0,0,732,734,3,92,46,0,733,731,1,
        0,0,0,734,737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,738,1,
        0,0,0,737,735,1,0,0,0,738,739,5,151,0,0,739,89,1,0,0,0,740,741,7,
        8,0,0,741,91,1,0,0,0,742,743,3,230,115,0,743,746,5,148,0,0,744,747,
        3,230,115,0,745,747,5,169,0,0,746,744,1,0,0,0,746,745,1,0,0,0,747,
        93,1,0,0,0,748,749,5,3,0,0,749,750,5,123,0,0,750,763,3,224,112,0,
        751,752,5,98,0,0,752,753,5,150,0,0,753,758,3,96,48,0,754,755,5,153,
        0,0,755,757,3,96,48,0,756,754,1,0,0,0,757,760,1,0,0,0,758,756,1,
        0,0,0,758,759,1,0,0,0,759,761,1,0,0,0,760,758,1,0,0,0,761,762,5,
        151,0,0,762,764,1,0,0,0,763,751,1,0,0,0,763,764,1,0,0,0,764,765,
        1,0,0,0,765,766,5,1,0,0,766,767,5,24,0,0,767,768,3,216,108,0,768,
        769,3,206,103,0,769,95,1,0,0,0,770,771,3,98,49,0,771,772,5,148,0,
        0,772,773,3,100,50,0,773,97,1,0,0,0,774,775,3,216,108,0,775,99,1,
        0,0,0,776,777,3,76,38,0,777,101,1,0,0,0,778,779,5,3,0,0,779,780,
        5,123,0,0,780,781,3,224,112,0,781,783,5,1,0,0,782,784,3,242,121,
        0,783,782,1,0,0,0,783,784,1,0,0,0,784,800,1,0,0,0,785,786,5,98,0,
        0,786,787,5,150,0,0,787,792,3,96,48,0,788,789,5,153,0,0,789,791,
        3,96,48,0,790,788,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,
        1,0,0,0,793,795,1,0,0,0,794,792,1,0,0,0,795,798,5,151,0,0,796,797,
        5,80,0,0,797,799,3,230,115,0,798,796,1,0,0,0,798,799,1,0,0,0,799,
        801,1,0,0,0,800,785,1,0,0,0,801,802,1,0,0,0,802,800,1,0,0,0,802,
        803,1,0,0,0,803,103,1,0,0,0,804,805,5,3,0,0,805,806,5,123,0,0,806,
        807,3,224,112,0,807,809,5,42,0,0,808,810,3,244,122,0,809,808,1,0,
        0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,812,5,98,0,0,812,813,5,150,
        0,0,813,814,3,106,53,0,814,823,5,151,0,0,815,816,5,153,0,0,816,817,
        5,98,0,0,817,818,5,150,0,0,818,819,3,106,53,0,819,820,5,151,0,0,
        820,822,1,0,0,0,821,815,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,
        823,824,1,0,0,0,824,105,1,0,0,0,825,823,1,0,0,0,826,831,3,96,48,
        0,827,828,5,153,0,0,828,830,3,96,48,0,829,827,1,0,0,0,830,833,1,
        0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,107,1,0,0,0,833,831,1,
        0,0,0,834,835,5,3,0,0,835,836,5,123,0,0,836,837,3,224,112,0,837,
        838,5,98,0,0,838,839,3,106,53,0,839,840,5,103,0,0,840,841,5,132,
        0,0,841,842,5,98,0,0,842,843,3,106,53,0,843,109,1,0,0,0,844,845,
        5,3,0,0,845,846,5,123,0,0,846,859,3,224,112,0,847,848,5,98,0,0,848,
        849,5,150,0,0,849,854,3,96,48,0,850,851,5,153,0,0,851,853,3,96,48,
        0,852,850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,
        0,855,857,1,0,0,0,856,854,1,0,0,0,857,858,5,151,0,0,858,860,1,0,
        0,0,859,847,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,862,5,105,
        0,0,862,863,5,24,0,0,863,864,5,150,0,0,864,865,3,216,108,0,865,872,
        3,206,103,0,866,867,5,153,0,0,867,868,3,216,108,0,868,869,3,206,
        103,0,869,871,1,0,0,0,870,866,1,0,0,0,871,874,1,0,0,0,872,870,1,
        0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,872,1,0,0,0,875,876,5,
        151,0,0,876,111,1,0,0,0,877,878,5,3,0,0,878,879,5,123,0,0,879,885,
        3,224,112,0,880,881,5,98,0,0,881,882,5,150,0,0,882,883,3,106,53,
        0,883,884,5,151,0,0,884,886,1,0,0,0,885,880,1,0,0,0,885,886,1,0,
        0,0,886,887,1,0,0,0,887,888,5,116,0,0,888,889,5,80,0,0,889,890,3,
        230,115,0,890,113,1,0,0,0,891,892,5,3,0,0,892,893,5,123,0,0,893,
        894,3,224,112,0,894,895,5,116,0,0,895,896,5,125,0,0,896,897,5,150,
        0,0,897,902,3,92,46,0,898,899,5,153,0,0,899,901,3,92,46,0,900,898,
        1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,905,
        1,0,0,0,904,902,1,0,0,0,905,906,5,151,0,0,906,115,1,0,0,0,907,908,
        5,26,0,0,908,910,3,90,45,0,909,911,3,242,121,0,910,909,1,0,0,0,910,
        911,1,0,0,0,911,912,1,0,0,0,912,915,3,220,110,0,913,914,5,25,0,0,
        914,916,3,230,115,0,915,913,1,0,0,0,915,916,1,0,0,0,916,919,1,0,
        0,0,917,918,5,80,0,0,918,920,3,230,115,0,919,917,1,0,0,0,919,920,
        1,0,0,0,920,934,1,0,0,0,921,922,5,147,0,0,922,923,5,31,0,0,923,924,
        5,150,0,0,924,929,3,92,46,0,925,926,5,153,0,0,926,928,3,92,46,0,
        927,925,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,
        930,932,1,0,0,0,931,929,1,0,0,0,932,933,5,151,0,0,933,935,1,0,0,
        0,934,921,1,0,0,0,934,935,1,0,0,0,935,117,1,0,0,0,936,937,5,26,0,
        0,937,938,5,51,0,0,938,940,5,123,0,0,939,941,3,242,121,0,940,939,
        1,0,0,0,940,941,1,0,0,0,941,945,1,0,0,0,942,943,3,218,109,0,943,
        944,5,152,0,0,944,946,1,0,0,0,945,942,1,0,0,0,945,946,1,0,0,0,946,
        947,1,0,0,0,947,959,3,224,112,0,948,949,5,150,0,0,949,954,3,138,
        69,0,950,951,5,153,0,0,951,953,3,138,69,0,952,950,1,0,0,0,953,956,
        1,0,0,0,954,952,1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,954,
        1,0,0,0,957,958,5,151,0,0,958,960,1,0,0,0,959,948,1,0,0,0,959,960,
        1,0,0,0,960,963,1,0,0,0,961,962,5,25,0,0,962,964,3,120,60,0,963,
        961,1,0,0,0,963,964,1,0,0,0,964,978,1,0,0,0,965,966,5,99,0,0,966,
        967,5,17,0,0,967,968,5,150,0,0,968,973,3,138,69,0,969,970,5,153,
        0,0,970,972,3,138,69,0,971,969,1,0,0,0,972,975,1,0,0,0,973,971,1,
        0,0,0,973,974,1,0,0,0,974,976,1,0,0,0,975,973,1,0,0,0,976,977,5,
        151,0,0,977,979,1,0,0,0,978,965,1,0,0,0,978,979,1,0,0,0,979,996,
        1,0,0,0,980,981,5,22,0,0,981,982,5,17,0,0,982,983,5,150,0,0,983,
        988,3,216,108,0,984,985,5,153,0,0,985,987,3,216,108,0,986,984,1,
        0,0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,991,1,
        0,0,0,990,988,1,0,0,0,991,992,5,151,0,0,992,993,5,69,0,0,993,994,
        3,136,68,0,994,995,5,16,0,0,995,997,1,0,0,0,996,980,1,0,0,0,996,
        997,1,0,0,0,997,1001,1,0,0,0,998,999,5,108,0,0,999,1000,5,56,0,0,
        1000,1002,3,122,61,0,1001,998,1,0,0,0,1001,1002,1,0,0,0,1002,1006,
        1,0,0,0,1003,1004,5,120,0,0,1004,1005,5,8,0,0,1005,1007,3,134,67,
        0,1006,1003,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1009,
        5,80,0,0,1009,1015,3,230,115,0,1010,1011,5,125,0,0,1011,1012,5,150,
        0,0,1012,1013,3,82,41,0,1013,1014,5,151,0,0,1014,1016,1,0,0,0,1015,
        1010,1,0,0,0,1015,1016,1,0,0,0,1016,119,1,0,0,0,1017,1018,3,230,
        115,0,1018,121,1,0,0,0,1019,1021,5,36,0,0,1020,1022,3,124,62,0,1021,
        1020,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1025,3,126,
        63,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,
        1028,3,128,64,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,
        0,0,0,1029,1031,3,130,65,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,
        1033,1,0,0,0,1032,1034,3,132,66,0,1033,1032,1,0,0,0,1033,1034,1,
        0,0,0,1034,1046,1,0,0,0,1035,1036,5,114,0,0,1036,1043,3,230,115,
        0,1037,1038,5,147,0,0,1038,1039,5,115,0,0,1039,1040,5,150,0,0,1040,
        1041,3,82,41,0,1041,1042,5,151,0,0,1042,1044,1,0,0,0,1043,1037,1,
        0,0,0,1043,1044,1,0,0,0,1044,1046,1,0,0,0,1045,1019,1,0,0,0,1045,
        1035,1,0,0,0,1046,123,1,0,0,0,1047,1048,5,53,0,0,1048,1049,5,126,
        0,0,1049,1050,5,17,0,0,1050,1054,3,230,115,0,1051,1052,5,45,0,0,
        1052,1053,5,17,0,0,1053,1055,3,230,115,0,1054,1051,1,0,0,0,1054,
        1055,1,0,0,0,1055,125,1,0,0,0,1056,1057,5,23,0,0,1057,1058,5,73,
        0,0,1058,1059,5,126,0,0,1059,1060,5,17,0,0,1060,1061,3,230,115,0,
        1061,127,1,0,0,0,1062,1063,5,82,0,0,1063,1064,5,75,0,0,1064,1065,
        5,126,0,0,1065,1066,5,17,0,0,1066,1067,3,230,115,0,1067,129,1,0,
        0,0,1068,1069,5,79,0,0,1069,1070,5,126,0,0,1070,1071,5,17,0,0,1071,
        1072,3,230,115,0,1072,131,1,0,0,0,1073,1074,5,88,0,0,1074,1075,5,
        34,0,0,1075,1076,5,8,0,0,1076,1077,3,230,115,0,1077,133,1,0,0,0,
        1078,1091,5,113,0,0,1079,1091,5,128,0,0,1080,1091,5,102,0,0,1081,
        1091,5,94,0,0,1082,1091,5,97,0,0,1083,1091,5,10,0,0,1084,1091,5,
        71,0,0,1085,1086,5,64,0,0,1086,1087,3,230,115,0,1087,1088,5,96,0,
        0,1088,1089,3,230,115,0,1089,1091,1,0,0,0,1090,1078,1,0,0,0,1090,
        1079,1,0,0,0,1090,1080,1,0,0,0,1090,1081,1,0,0,0,1090,1082,1,0,0,
        0,1090,1083,1,0,0,0,1090,1084,1,0,0,0,1090,1085,1,0,0,0,1091,135,
        1,0,0,0,1092,1093,3,202,101,0,1093,137,1,0,0,0,1094,1095,3,216,108,
        0,1095,1098,3,206,103,0,1096,1097,5,25,0,0,1097,1099,3,140,70,0,
        1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,139,1,0,0,0,1100,1101,3,
        230,115,0,1101,141,1,0,0,0,1102,1103,5,26,0,0,1103,1104,5,123,0,
        0,1104,1117,3,224,112,0,1105,1106,5,147,0,0,1106,1107,5,150,0,0,
        1107,1112,3,146,73,0,1108,1109,5,153,0,0,1109,1111,3,146,73,0,1110,
        1108,1,0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,
        0,1113,1115,1,0,0,0,1114,1112,1,0,0,0,1115,1116,5,151,0,0,1116,1118,
        1,0,0,0,1117,1105,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1119,
        1120,5,8,0,0,1120,1126,3,180,90,0,1121,1123,5,147,0,0,1122,1124,
        5,86,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,
        1127,5,27,0,0,1126,1121,1,0,0,0,1126,1127,1,0,0,0,1127,143,1,0,0,
        0,1128,1129,3,240,120,0,1129,145,1,0,0,0,1130,1131,3,144,72,0,1131,
        1132,5,148,0,0,1132,1133,3,192,96,0,1133,147,1,0,0,0,1134,1136,5,
        26,0,0,1135,1137,3,246,123,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,
        1137,1138,1,0,0,0,1138,1139,5,143,0,0,1139,1140,3,226,113,0,1140,
        1141,5,8,0,0,1141,1142,3,180,90,0,1142,149,1,0,0,0,1143,1145,5,38,
        0,0,1144,1146,7,9,0,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1150,
        1,0,0,0,1147,1148,3,218,109,0,1148,1149,5,152,0,0,1149,1151,1,0,
        0,0,1150,1147,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1155,
        3,224,112,0,1153,1154,5,98,0,0,1154,1156,3,106,53,0,1155,1153,1,
        0,0,0,1155,1156,1,0,0,0,1156,151,1,0,0,0,1157,1158,3,240,120,0,1158,
        153,1,0,0,0,1159,1161,5,38,0,0,1160,1162,3,226,113,0,1161,1160,1,
        0,0,0,1161,1162,1,0,0,0,1162,155,1,0,0,0,1163,1164,5,42,0,0,1164,
        1166,3,90,45,0,1165,1167,3,244,122,0,1166,1165,1,0,0,0,1166,1167,
        1,0,0,0,1167,1168,1,0,0,0,1168,1170,3,220,110,0,1169,1171,7,10,0,
        0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,157,1,0,0,0,1172,1173,
        5,42,0,0,1173,1175,5,123,0,0,1174,1176,3,244,122,0,1175,1174,1,0,
        0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,3,224,112,0,1178,
        159,1,0,0,0,1179,1180,5,42,0,0,1180,1182,5,143,0,0,1181,1183,3,244,
        122,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,
        1185,3,226,113,0,1185,161,1,0,0,0,1186,1187,5,85,0,0,1187,1188,5,
        104,0,0,1188,1189,5,123,0,0,1189,1190,3,224,112,0,1190,163,1,0,0,
        0,1191,1192,5,117,0,0,1192,1193,5,24,0,0,1193,1194,3,248,124,0,1194,
        1195,3,220,110,0,1195,1196,5,152,0,0,1196,1197,3,224,112,0,1197,
        1208,1,0,0,0,1198,1199,5,117,0,0,1199,1200,5,24,0,0,1200,1201,3,
        248,124,0,1201,1205,3,224,112,0,1202,1203,3,248,124,0,1203,1204,
        3,220,110,0,1204,1206,1,0,0,0,1205,1202,1,0,0,0,1205,1206,1,0,0,
        0,1206,1208,1,0,0,0,1207,1191,1,0,0,0,1207,1198,1,0,0,0,1208,165,
        1,0,0,0,1209,1210,5,117,0,0,1210,1211,5,26,0,0,1211,1215,5,123,0,
        0,1212,1213,3,218,109,0,1213,1214,5,152,0,0,1214,1216,1,0,0,0,1215,
        1212,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1218,3,224,
        112,0,1218,167,1,0,0,0,1219,1220,5,117,0,0,1220,1221,5,26,0,0,1221,
        1222,5,143,0,0,1222,1223,3,226,113,0,1223,169,1,0,0,0,1224,1225,
        5,117,0,0,1225,1228,7,11,0,0,1226,1227,5,77,0,0,1227,1229,3,232,
        116,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,171,1,0,0,0,1230,
        1231,5,117,0,0,1231,1232,5,100,0,0,1232,1233,3,224,112,0,1233,173,
        1,0,0,0,1234,1235,5,117,0,0,1235,1238,5,124,0,0,1236,1237,5,63,0,
        0,1237,1239,3,220,110,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,
        1241,1,0,0,0,1240,1242,3,232,116,0,1241,1240,1,0,0,0,1241,1242,1,
        0,0,0,1242,175,1,0,0,0,1243,1244,5,117,0,0,1244,1245,5,125,0,0,1245,
        1250,3,224,112,0,1246,1247,5,150,0,0,1247,1248,3,230,115,0,1248,
        1249,5,151,0,0,1249,1251,1,0,0,0,1250,1246,1,0,0,0,1250,1251,1,0,
        0,0,1251,177,1,0,0,0,1252,1253,5,117,0,0,1253,1256,5,144,0,0,1254,
        1255,5,63,0,0,1255,1257,3,220,110,0,1256,1254,1,0,0,0,1256,1257,
        1,0,0,0,1257,1260,1,0,0,0,1258,1259,5,77,0,0,1259,1261,3,232,116,
        0,1260,1258,1,0,0,0,1260,1261,1,0,0,0,1261,179,1,0,0,0,1262,1263,
        3,8,4,0,1263,181,1,0,0,0,1264,1265,7,12,0,0,1265,183,1,0,0,0,1266,
        1270,6,92,-1,0,1267,1269,5,87,0,0,1268,1267,1,0,0,0,1269,1272,1,
        0,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,0,1271,1278,1,0,0,0,1272,
        1270,1,0,0,0,1273,1274,5,150,0,0,1274,1275,3,184,92,0,1275,1276,
        5,151,0,0,1276,1279,1,0,0,0,1277,1279,3,186,93,0,1278,1273,1,0,0,
        0,1278,1277,1,0,0,0,1279,1288,1,0,0,0,1280,1281,10,3,0,0,1281,1282,
        5,5,0,0,1282,1287,3,184,92,4,1283,1284,10,2,0,0,1284,1285,5,93,0,
        0,1285,1287,3,184,92,3,1286,1280,1,0,0,0,1286,1283,1,0,0,0,1287,
        1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,185,1,0,0,
        0,1290,1288,1,0,0,0,1291,1292,3,192,96,0,1292,1293,3,190,95,0,1293,
        1294,3,192,96,0,1294,1345,1,0,0,0,1295,1296,3,192,96,0,1296,1298,
        5,72,0,0,1297,1299,5,87,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,
        1299,1300,1,0,0,0,1300,1301,5,88,0,0,1301,1345,1,0,0,0,1302,1304,
        3,240,120,0,1303,1305,5,87,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,
        0,1305,1306,1,0,0,0,1306,1307,5,77,0,0,1307,1308,3,230,115,0,1308,
        1345,1,0,0,0,1309,1311,3,192,96,0,1310,1312,5,87,0,0,1311,1310,1,
        0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,1314,5,11,0,0,1314,
        1315,3,192,96,0,1315,1316,5,5,0,0,1316,1317,3,192,96,0,1317,1345,
        1,0,0,0,1318,1320,3,192,96,0,1319,1321,5,87,0,0,1320,1319,1,0,0,
        0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1323,5,63,0,0,1323,1324,
        3,188,94,0,1324,1345,1,0,0,0,1325,1327,3,192,96,0,1326,1328,5,87,
        0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1330,
        5,63,0,0,1330,1331,5,150,0,0,1331,1332,3,46,23,0,1332,1333,5,151,
        0,0,1333,1345,1,0,0,0,1334,1336,5,87,0,0,1335,1334,1,0,0,0,1335,
        1336,1,0,0,0,1336,1337,1,0,0,0,1337,1338,5,48,0,0,1338,1345,3,188,
        94,0,1339,1340,3,192,96,0,1340,1341,3,190,95,0,1341,1342,7,13,0,
        0,1342,1343,3,188,94,0,1343,1345,1,0,0,0,1344,1291,1,0,0,0,1344,
        1295,1,0,0,0,1344,1302,1,0,0,0,1344,1309,1,0,0,0,1344,1318,1,0,0,
        0,1344,1325,1,0,0,0,1344,1335,1,0,0,0,1344,1339,1,0,0,0,1345,187,
        1,0,0,0,1346,1347,5,150,0,0,1347,1348,3,10,5,0,1348,1349,5,151,0,
        0,1349,189,1,0,0,0,1350,1351,7,14,0,0,1351,191,1,0,0,0,1352,1353,
        6,96,-1,0,1353,1376,3,198,99,0,1354,1355,5,150,0,0,1355,1356,3,192,
        96,0,1356,1357,5,151,0,0,1357,1376,1,0,0,0,1358,1376,3,188,94,0,
        1359,1360,3,240,120,0,1360,1361,5,150,0,0,1361,1362,3,46,23,0,1362,
        1363,5,151,0,0,1363,1376,1,0,0,0,1364,1376,3,194,97,0,1365,1376,
        3,196,98,0,1366,1367,7,15,0,0,1367,1376,3,192,96,5,1368,1369,5,20,
        0,0,1369,1370,5,150,0,0,1370,1371,3,192,96,0,1371,1372,5,8,0,0,1372,
        1373,3,206,103,0,1373,1374,5,151,0,0,1374,1376,1,0,0,0,1375,1352,
        1,0,0,0,1375,1354,1,0,0,0,1375,1358,1,0,0,0,1375,1359,1,0,0,0,1375,
        1364,1,0,0,0,1375,1365,1,0,0,0,1375,1366,1,0,0,0,1375,1368,1,0,0,
        0,1376,1388,1,0,0,0,1377,1378,10,4,0,0,1378,1379,7,16,0,0,1379,1387,
        3,192,96,5,1380,1381,10,3,0,0,1381,1382,7,15,0,0,1382,1387,3,192,
        96,4,1383,1384,10,2,0,0,1384,1385,5,152,0,0,1385,1387,3,192,96,3,
        1386,1377,1,0,0,0,1386,1380,1,0,0,0,1386,1383,1,0,0,0,1387,1390,
        1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,193,1,0,0,0,1390,
        1388,1,0,0,0,1391,1392,5,19,0,0,1392,1398,3,192,96,0,1393,1394,5,
        145,0,0,1394,1395,3,192,96,0,1395,1396,5,129,0,0,1396,1397,3,192,
        96,0,1397,1399,1,0,0,0,1398,1393,1,0,0,0,1399,1400,1,0,0,0,1400,
        1398,1,0,0,0,1400,1401,1,0,0,0,1401,1404,1,0,0,0,1402,1403,5,43,
        0,0,1403,1405,3,192,96,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,
        1406,1,0,0,0,1406,1407,5,44,0,0,1407,195,1,0,0,0,1408,1414,5,19,
        0,0,1409,1410,5,145,0,0,1410,1411,3,192,96,0,1411,1412,5,129,0,0,
        1412,1413,3,192,96,0,1413,1415,1,0,0,0,1414,1409,1,0,0,0,1415,1416,
        1,0,0,0,1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,1420,1,0,0,0,1418,
        1419,5,43,0,0,1419,1421,3,192,96,0,1420,1418,1,0,0,0,1420,1421,1,
        0,0,0,1421,1422,1,0,0,0,1422,1423,5,44,0,0,1423,197,1,0,0,0,1424,
        1427,3,200,100,0,1425,1427,3,240,120,0,1426,1424,1,0,0,0,1426,1425,
        1,0,0,0,1427,199,1,0,0,0,1428,1433,3,204,102,0,1429,1433,3,230,115,
        0,1430,1433,3,182,91,0,1431,1433,5,88,0,0,1432,1428,1,0,0,0,1432,
        1429,1,0,0,0,1432,1430,1,0,0,0,1432,1431,1,0,0,0,1433,201,1,0,0,
        0,1434,1435,5,170,0,0,1435,203,1,0,0,0,1436,1440,3,202,101,0,1437,
        1440,5,172,0,0,1438,1440,5,171,0,0,1439,1436,1,0,0,0,1439,1437,1,
        0,0,0,1439,1438,1,0,0,0,1440,205,1,0,0,0,1441,1467,3,208,104,0,1442,
        1443,5,7,0,0,1443,1444,5,154,0,0,1444,1445,3,206,103,0,1445,1446,
        5,155,0,0,1446,1467,1,0,0,0,1447,1448,5,82,0,0,1448,1449,5,154,0,
        0,1449,1450,3,208,104,0,1450,1451,5,153,0,0,1451,1452,3,206,103,
        0,1452,1453,5,155,0,0,1453,1467,1,0,0,0,1454,1455,5,122,0,0,1455,
        1456,5,154,0,0,1456,1461,3,214,107,0,1457,1458,5,153,0,0,1458,1460,
        3,214,107,0,1459,1457,1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,
        0,1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1461,1,0,0,0,1464,1465,
        5,155,0,0,1465,1467,1,0,0,0,1466,1441,1,0,0,0,1466,1442,1,0,0,0,
        1466,1447,1,0,0,0,1466,1454,1,0,0,0,1467,207,1,0,0,0,1468,1493,5,
        15,0,0,1469,1493,5,131,0,0,1470,1493,5,118,0,0,1471,1493,5,66,0,
        0,1472,1493,5,67,0,0,1473,1493,5,12,0,0,1474,1493,5,41,0,0,1475,
        1493,5,55,0,0,1476,1477,5,33,0,0,1477,1478,5,150,0,0,1478,1479,3,
        210,105,0,1479,1480,5,153,0,0,1480,1481,3,212,106,0,1481,1482,5,
        151,0,0,1482,1493,1,0,0,0,1483,1484,7,17,0,0,1484,1485,5,150,0,0,
        1485,1486,3,202,101,0,1486,1487,5,151,0,0,1487,1493,1,0,0,0,1488,
        1493,5,121,0,0,1489,1493,5,14,0,0,1490,1493,5,30,0,0,1491,1493,5,
        130,0,0,1492,1468,1,0,0,0,1492,1469,1,0,0,0,1492,1470,1,0,0,0,1492,
        1471,1,0,0,0,1492,1472,1,0,0,0,1492,1473,1,0,0,0,1492,1474,1,0,0,
        0,1492,1475,1,0,0,0,1492,1476,1,0,0,0,1492,1483,1,0,0,0,1492,1488,
        1,0,0,0,1492,1489,1,0,0,0,1492,1490,1,0,0,0,1492,1491,1,0,0,0,1493,
        209,1,0,0,0,1494,1495,3,202,101,0,1495,211,1,0,0,0,1496,1497,3,202,
        101,0,1497,213,1,0,0,0,1498,1499,3,216,108,0,1499,1500,5,160,0,0,
        1500,1503,3,206,103,0,1501,1502,5,25,0,0,1502,1504,3,140,70,0,1503,
        1501,1,0,0,0,1503,1504,1,0,0,0,1504,215,1,0,0,0,1505,1506,3,240,
        120,0,1506,217,1,0,0,0,1507,1508,3,240,120,0,1508,219,1,0,0,0,1509,
        1510,3,240,120,0,1510,221,1,0,0,0,1511,1512,3,240,120,0,1512,223,
        1,0,0,0,1513,1514,3,240,120,0,1514,225,1,0,0,0,1515,1516,3,240,120,
        0,1516,227,1,0,0,0,1517,1518,3,240,120,0,1518,229,1,0,0,0,1519,1520,
        5,168,0,0,1520,231,1,0,0,0,1521,1522,3,230,115,0,1522,233,1,0,0,
        0,1523,1524,3,240,120,0,1524,235,1,0,0,0,1525,1526,3,240,120,0,1526,
        237,1,0,0,0,1527,1528,3,240,120,0,1528,239,1,0,0,0,1529,1530,7,18,
        0,0,1530,241,1,0,0,0,1531,1532,5,62,0,0,1532,1533,5,87,0,0,1533,
        1534,5,48,0,0,1534,243,1,0,0,0,1535,1536,5,62,0,0,1536,1537,5,48,
        0,0,1537,245,1,0,0,0,1538,1539,5,93,0,0,1539,1540,5,105,0,0,1540,
        247,1,0,0,0,1541,1542,7,19,0,0,1542,249,1,0,0,0,155,252,258,286,
        300,308,311,317,326,329,333,338,345,348,352,356,359,368,371,376,
        378,383,385,391,395,418,427,430,438,448,453,456,461,464,471,476,
        482,496,501,507,510,515,518,521,531,533,537,544,549,561,569,597,
        603,609,618,635,640,648,651,657,668,678,681,688,715,722,735,746,
        758,763,783,792,798,802,809,823,831,854,859,872,885,902,910,915,
        919,929,934,940,945,954,959,963,973,978,988,996,1001,1006,1015,1021,
        1024,1027,1030,1033,1043,1045,1054,1090,1098,1112,1117,1123,1126,
        1136,1145,1150,1155,1161,1166,1170,1175,1182,1205,1207,1215,1228,
        1238,1241,1250,1256,1260,1270,1278,1286,1288,1298,1304,1311,1320,
        1327,1335,1344,1375,1386,1388,1400,1404,1416,1420,1426,1432,1439,
        1461,1466,1492,1503
    ]

class AthenaParser ( Parser ):

    grammarFileName = "AthenaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                     "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AVRO'", 
                     "'BETWEEN'", "'BIGINT'", "'BIN_PACK'", "'BINARY'", 
                     "'BOOLEAN'", "'BUCKETS'", "'BY'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CHAR'", "'CLUSTERED'", "'COLLECTION'", 
                     "'COLUMNS'", "'COMMENT'", "'CREATE'", "'DATA'", "'DATABASE'", 
                     "'DATABASES'", "'DATE'", "'DBPROPERTIES'", "'DEALLOCATE'", 
                     "'DECIMAL'", "'DEFINED'", "'DELETE'", "'DELIMITED'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DISTRIBUTED'", 
                     "'DOUBLE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPED'", 
                     "'EXCEPT'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", "'EXTENDED'", 
                     "'EXTERNAL'", "'FALSE'", "'FIELDS'", "'FIRST'", "'FLOAT'", 
                     "'FORMAT'", "'FORMATTED'", "'FROM'", "'GRAPHVIZ'", 
                     "'GROUP'", "'HAVING'", "'IF'", "'IN'", "'INPUTFORMAT'", 
                     "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTO'", 
                     "'IO'", "'ION'", "'IS'", "'ITEMS'", "'JSON'", "'KEYS'", 
                     "'LAST'", "'LIKE'", "'LIMIT'", "'LINES'", "'LOCATION'", 
                     "'LOGICAL'", "'MAP'", "'MATCHED'", "'MERGE'", "'MSCK'", 
                     "'NO'", "'NOT'", "'NULL'", "'NULLS'", "'OFFSET'", "'ON'", 
                     "'OPTIMIZE'", "'OR'", "'ORC'", "'ORDER'", "'OUTPUTFORMAT'", 
                     "'PARQUET'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", 
                     "'PREPARE'", "'RCFILE'", "'RENAME'", "'REPAIR'", "'REPLACE'", 
                     "'RESTRICT'", "'REWRITE'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SELECT'", "'SEQUENCEFILE'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SET'", "'SHOW'", "'SMALLINT'", 
                     "'SOME'", "'STORED'", "'STRING'", "'STRUCT'", "'TABLE'", 
                     "'TABLES'", "'TBLPROPERTIES'", "'TERMINATED'", "'TEXT'", 
                     "'TEXTFILE'", "'THEN'", "'TIMESTAMP'", "'TINYINT'", 
                     "'TO'", "'TRUE'", "'TYPE'", "'UNION'", "'UNLOAD'", 
                     "'UPDATE'", "'USING'", "'VACUUM'", "'VALIDATE'", "'VALUES'", 
                     "'VARCHAR'", "'VIEW'", "'VIEWS'", "'WHEN'", "'WHERE'", 
                     "'WITH'", "'='", "';'", "'('", "')'", "'.'", "','", 
                     "'<'", "'>'", "'<='", "'>='", "'<>'", "'!='", "':'", 
                     "'?'", "'*'", "'+'", "'-'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>", "ADD", "ALL", "ALTER", "ANALYZE", "AND", 
                      "ANY", "ARRAY", "AS", "ASC", "AVRO", "BETWEEN", "BIGINT", 
                      "BIN_PACK", "BINARY", "BOOLEAN", "BUCKETS", "BY", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CLUSTERED", "COLLECTION", 
                      "COLUMNS", "COMMENT", "CREATE", "DATA", "DATABASE", 
                      "DATABASES", "DATE", "DBPROPERTIES", "DEALLOCATE", 
                      "DECIMAL", "DEFINED", "DELETE", "DELIMITED", "DESC", 
                      "DESCRIBE", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", 
                      "ELSE", "END", "ESCAPED", "EXCEPT", "EXECUTE", "EXISTS", 
                      "EXPLAIN", "EXTENDED", "EXTERNAL", "FALSE", "FIELDS", 
                      "FIRST", "FLOAT", "FORMAT", "FORMATTED", "FROM", "GRAPHVIZ", 
                      "GROUP", "HAVING", "IF", "IN", "INPUTFORMAT", "INSERT", 
                      "INT", "INTEGER", "INTERSECT", "INTO", "IO", "ION", 
                      "IS", "ITEMS", "JSON", "KEYS", "LAST", "LIKE", "LIMIT", 
                      "LINES", "LOCATION", "LOGICAL", "MAP", "MATCHED", 
                      "MERGE", "MSCK", "NO", "NOT", "NULL_", "NULLS", "OFFSET", 
                      "ON", "OPTIMIZE", "OR", "ORC", "ORDER", "OUTPUTFORMAT", 
                      "PARQUET", "PARTITION", "PARTITIONED", "PARTITIONS", 
                      "PREPARE", "RCFILE", "RENAME", "REPAIR", "REPLACE", 
                      "RESTRICT", "REWRITE", "ROW", "ROWS", "SCHEMA", "SCHEMAS", 
                      "SELECT", "SEQUENCEFILE", "SERDE", "SERDEPROPERTIES", 
                      "SET", "SHOW", "SMALLINT", "SOME", "STORED", "STRING", 
                      "STRUCT", "TABLE", "TABLES", "TBLPROPERTIES", "TERMINATED", 
                      "TEXT", "TEXTFILE", "THEN", "TIMESTAMP", "TINYINT", 
                      "TO", "TRUE", "TYPE", "UNION", "UNLOAD", "UPDATE", 
                      "USING", "VACUUM", "VALIDATE", "VALUES", "VARCHAR", 
                      "VIEW", "VIEWS", "WHEN", "WHERE", "WITH", "EQ", "SEMI", 
                      "LP", "RP", "DOT", "COMMA", "LT", "GT", "LE", "GE", 
                      "NE", "BOX", "COLON", "QM", "STAR", "PLUS", "MINUS", 
                      "DIVIDE", "MODULE", "IDENTIFIER", "SQ_STRING_LITERAL", 
                      "DQ_STRING_LITERAL", "INTEGRAL_LITERAL", "FLOAT_LITERAL", 
                      "REAL_LITERAL", "WS", "LINE_COMMENT" ]

    RULE_stmt = 0
    RULE_command = 1
    RULE_ddl_command = 2
    RULE_dml_command = 3
    RULE_select = 4
    RULE_select_statement = 5
    RULE_all_distinct = 6
    RULE_order_item = 7
    RULE_from_item = 8
    RULE_count = 9
    RULE_with_query = 10
    RULE_grouping_element = 11
    RULE_condition = 12
    RULE_insert_into = 13
    RULE_value_list = 14
    RULE_select_list = 15
    RULE_select_item = 16
    RULE_delete_stmt = 17
    RULE_update = 18
    RULE_merge_into = 19
    RULE_search_condition = 20
    RULE_when_clauses = 21
    RULE_when_not_matched_clause = 22
    RULE_expression_list_ = 23
    RULE_column_list = 24
    RULE_when_matched_and_clause = 25
    RULE_when_matched_then_clause = 26
    RULE_update_delete = 27
    RULE_optimize_stmt = 28
    RULE_vacuum = 29
    RULE_target_table = 30
    RULE_source_table = 31
    RULE_explain = 32
    RULE_explain_option = 33
    RULE_prepare = 34
    RULE_statement = 35
    RULE_execute = 36
    RULE_parameter = 37
    RULE_value = 38
    RULE_deallocate = 39
    RULE_unload = 40
    RULE_property_list = 41
    RULE_property_value = 42
    RULE_predicate = 43
    RULE_alter_database = 44
    RULE_db_schema = 45
    RULE_kv_pair = 46
    RULE_alter_table_add_cols = 47
    RULE_part_col_name_value = 48
    RULE_partition_col_name = 49
    RULE_partition_col_value = 50
    RULE_alter_table_add_part = 51
    RULE_alter_table_drop_part = 52
    RULE_partition_spec = 53
    RULE_alter_table_rename_part = 54
    RULE_alter_table_replace_part = 55
    RULE_alter_table_set_location = 56
    RULE_alter_table_set_props = 57
    RULE_create_database = 58
    RULE_create_table = 59
    RULE_table_comment = 60
    RULE_row_format = 61
    RULE_table_row_format_field_identifier = 62
    RULE_table_row_format_coll_items_identifier = 63
    RULE_table_row_format_map_keys_identifier = 64
    RULE_table_row_format_lines_identifier = 65
    RULE_table_row_null_format = 66
    RULE_file_format = 67
    RULE_num_buckets = 68
    RULE_col_def_with_comment = 69
    RULE_col_comment = 70
    RULE_create_table_as = 71
    RULE_property_name = 72
    RULE_prop_exp = 73
    RULE_create_view = 74
    RULE_describe = 75
    RULE_field_name = 76
    RULE_describe_view = 77
    RULE_drop_database = 78
    RULE_drop_table = 79
    RULE_drop_view = 80
    RULE_msck = 81
    RULE_show_columns = 82
    RULE_show_create_table = 83
    RULE_show_create_view = 84
    RULE_show_databases = 85
    RULE_show_partitions = 86
    RULE_show_tables = 87
    RULE_show_tblproperties = 88
    RULE_show_views = 89
    RULE_query = 90
    RULE_true_false = 91
    RULE_boolean_expression = 92
    RULE_pred = 93
    RULE_table_subquery = 94
    RULE_comparison_operator = 95
    RULE_expression = 96
    RULE_case_expression = 97
    RULE_when_expression = 98
    RULE_primitive_expression = 99
    RULE_literal = 100
    RULE_int_number = 101
    RULE_number = 102
    RULE_data_type = 103
    RULE_primitive_type = 104
    RULE_precision = 105
    RULE_scale = 106
    RULE_struct_col_def = 107
    RULE_col_name = 108
    RULE_db_name = 109
    RULE_database_name = 110
    RULE_statement_name = 111
    RULE_table_name = 112
    RULE_view_name = 113
    RULE_destination_table = 114
    RULE_string = 115
    RULE_reg_ex = 116
    RULE_alias = 117
    RULE_target_alias = 118
    RULE_source_alias = 119
    RULE_id_ = 120
    RULE_if_not_exists = 121
    RULE_if_exists = 122
    RULE_or_replace = 123
    RULE_from_in = 124

    ruleNames =  [ "stmt", "command", "ddl_command", "dml_command", "select", 
                   "select_statement", "all_distinct", "order_item", "from_item", 
                   "count", "with_query", "grouping_element", "condition", 
                   "insert_into", "value_list", "select_list", "select_item", 
                   "delete_stmt", "update", "merge_into", "search_condition", 
                   "when_clauses", "when_not_matched_clause", "expression_list_", 
                   "column_list", "when_matched_and_clause", "when_matched_then_clause", 
                   "update_delete", "optimize_stmt", "vacuum", "target_table", 
                   "source_table", "explain", "explain_option", "prepare", 
                   "statement", "execute", "parameter", "value", "deallocate", 
                   "unload", "property_list", "property_value", "predicate", 
                   "alter_database", "db_schema", "kv_pair", "alter_table_add_cols", 
                   "part_col_name_value", "partition_col_name", "partition_col_value", 
                   "alter_table_add_part", "alter_table_drop_part", "partition_spec", 
                   "alter_table_rename_part", "alter_table_replace_part", 
                   "alter_table_set_location", "alter_table_set_props", 
                   "create_database", "create_table", "table_comment", "row_format", 
                   "table_row_format_field_identifier", "table_row_format_coll_items_identifier", 
                   "table_row_format_map_keys_identifier", "table_row_format_lines_identifier", 
                   "table_row_null_format", "file_format", "num_buckets", 
                   "col_def_with_comment", "col_comment", "create_table_as", 
                   "property_name", "prop_exp", "create_view", "describe", 
                   "field_name", "describe_view", "drop_database", "drop_table", 
                   "drop_view", "msck", "show_columns", "show_create_table", 
                   "show_create_view", "show_databases", "show_partitions", 
                   "show_tables", "show_tblproperties", "show_views", "query", 
                   "true_false", "boolean_expression", "pred", "table_subquery", 
                   "comparison_operator", "expression", "case_expression", 
                   "when_expression", "primitive_expression", "literal", 
                   "int_number", "number", "data_type", "primitive_type", 
                   "precision", "scale", "struct_col_def", "col_name", "db_name", 
                   "database_name", "statement_name", "table_name", "view_name", 
                   "destination_table", "string", "reg_ex", "alias", "target_alias", 
                   "source_alias", "id_", "if_not_exists", "if_exists", 
                   "or_replace", "from_in" ]

    EOF = Token.EOF
    ADD=1
    ALL=2
    ALTER=3
    ANALYZE=4
    AND=5
    ANY=6
    ARRAY=7
    AS=8
    ASC=9
    AVRO=10
    BETWEEN=11
    BIGINT=12
    BIN_PACK=13
    BINARY=14
    BOOLEAN=15
    BUCKETS=16
    BY=17
    CASCADE=18
    CASE=19
    CAST=20
    CHAR=21
    CLUSTERED=22
    COLLECTION=23
    COLUMNS=24
    COMMENT=25
    CREATE=26
    DATA=27
    DATABASE=28
    DATABASES=29
    DATE=30
    DBPROPERTIES=31
    DEALLOCATE=32
    DECIMAL=33
    DEFINED=34
    DELETE=35
    DELIMITED=36
    DESC=37
    DESCRIBE=38
    DISTINCT=39
    DISTRIBUTED=40
    DOUBLE=41
    DROP=42
    ELSE=43
    END=44
    ESCAPED=45
    EXCEPT=46
    EXECUTE=47
    EXISTS=48
    EXPLAIN=49
    EXTENDED=50
    EXTERNAL=51
    FALSE=52
    FIELDS=53
    FIRST=54
    FLOAT=55
    FORMAT=56
    FORMATTED=57
    FROM=58
    GRAPHVIZ=59
    GROUP=60
    HAVING=61
    IF=62
    IN=63
    INPUTFORMAT=64
    INSERT=65
    INT=66
    INTEGER=67
    INTERSECT=68
    INTO=69
    IO=70
    ION=71
    IS=72
    ITEMS=73
    JSON=74
    KEYS=75
    LAST=76
    LIKE=77
    LIMIT=78
    LINES=79
    LOCATION=80
    LOGICAL=81
    MAP=82
    MATCHED=83
    MERGE=84
    MSCK=85
    NO=86
    NOT=87
    NULL_=88
    NULLS=89
    OFFSET=90
    ON=91
    OPTIMIZE=92
    OR=93
    ORC=94
    ORDER=95
    OUTPUTFORMAT=96
    PARQUET=97
    PARTITION=98
    PARTITIONED=99
    PARTITIONS=100
    PREPARE=101
    RCFILE=102
    RENAME=103
    REPAIR=104
    REPLACE=105
    RESTRICT=106
    REWRITE=107
    ROW=108
    ROWS=109
    SCHEMA=110
    SCHEMAS=111
    SELECT=112
    SEQUENCEFILE=113
    SERDE=114
    SERDEPROPERTIES=115
    SET=116
    SHOW=117
    SMALLINT=118
    SOME=119
    STORED=120
    STRING=121
    STRUCT=122
    TABLE=123
    TABLES=124
    TBLPROPERTIES=125
    TERMINATED=126
    TEXT=127
    TEXTFILE=128
    THEN=129
    TIMESTAMP=130
    TINYINT=131
    TO=132
    TRUE=133
    TYPE=134
    UNION=135
    UNLOAD=136
    UPDATE=137
    USING=138
    VACUUM=139
    VALIDATE=140
    VALUES=141
    VARCHAR=142
    VIEW=143
    VIEWS=144
    WHEN=145
    WHERE=146
    WITH=147
    EQ=148
    SEMI=149
    LP=150
    RP=151
    DOT=152
    COMMA=153
    LT=154
    GT=155
    LE=156
    GE=157
    NE=158
    BOX=159
    COLON=160
    QM=161
    STAR=162
    PLUS=163
    MINUS=164
    DIVIDE=165
    MODULE=166
    IDENTIFIER=167
    SQ_STRING_LITERAL=168
    DQ_STRING_LITERAL=169
    INTEGRAL_LITERAL=170
    FLOAT_LITERAL=171
    REAL_LITERAL=172
    WS=173
    LINE_COMMENT=174

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self):
            return self.getTypedRuleContext(AthenaParser.CommandContext,0)


        def EOF(self):
            return self.getToken(AthenaParser.EOF, 0)

        def SEMI(self):
            return self.getToken(AthenaParser.SEMI, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = AthenaParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.command()
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 251
                self.match(AthenaParser.SEMI)


            self.state = 254
            self.match(AthenaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddl_command(self):
            return self.getTypedRuleContext(AthenaParser.Ddl_commandContext,0)


        def dml_command(self):
            return self.getTypedRuleContext(AthenaParser.Dml_commandContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)




    def command(self):

        localctx = AthenaParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_command)
        try:
            self.state = 258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 26, 38, 42, 85, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.ddl_command()
                pass
            elif token in [32, 35, 47, 49, 65, 84, 92, 101, 112, 136, 137, 139, 147]:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.dml_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_database(self):
            return self.getTypedRuleContext(AthenaParser.Alter_databaseContext,0)


        def alter_table_add_cols(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_add_colsContext,0)


        def alter_table_add_part(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_add_partContext,0)


        def alter_table_drop_part(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_drop_partContext,0)


        def alter_table_rename_part(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_rename_partContext,0)


        def alter_table_replace_part(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_replace_partContext,0)


        def alter_table_set_location(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_set_locationContext,0)


        def alter_table_set_props(self):
            return self.getTypedRuleContext(AthenaParser.Alter_table_set_propsContext,0)


        def create_database(self):
            return self.getTypedRuleContext(AthenaParser.Create_databaseContext,0)


        def create_table(self):
            return self.getTypedRuleContext(AthenaParser.Create_tableContext,0)


        def create_table_as(self):
            return self.getTypedRuleContext(AthenaParser.Create_table_asContext,0)


        def create_view(self):
            return self.getTypedRuleContext(AthenaParser.Create_viewContext,0)


        def drop_database(self):
            return self.getTypedRuleContext(AthenaParser.Drop_databaseContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(AthenaParser.Drop_tableContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(AthenaParser.Drop_viewContext,0)


        def describe(self):
            return self.getTypedRuleContext(AthenaParser.DescribeContext,0)


        def describe_view(self):
            return self.getTypedRuleContext(AthenaParser.Describe_viewContext,0)


        def msck(self):
            return self.getTypedRuleContext(AthenaParser.MsckContext,0)


        def show_columns(self):
            return self.getTypedRuleContext(AthenaParser.Show_columnsContext,0)


        def show_create_table(self):
            return self.getTypedRuleContext(AthenaParser.Show_create_tableContext,0)


        def show_create_view(self):
            return self.getTypedRuleContext(AthenaParser.Show_create_viewContext,0)


        def show_databases(self):
            return self.getTypedRuleContext(AthenaParser.Show_databasesContext,0)


        def show_partitions(self):
            return self.getTypedRuleContext(AthenaParser.Show_partitionsContext,0)


        def show_tables(self):
            return self.getTypedRuleContext(AthenaParser.Show_tablesContext,0)


        def show_tblproperties(self):
            return self.getTypedRuleContext(AthenaParser.Show_tblpropertiesContext,0)


        def show_views(self):
            return self.getTypedRuleContext(AthenaParser.Show_viewsContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_ddl_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_command" ):
                listener.enterDdl_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_command" ):
                listener.exitDdl_command(self)




    def ddl_command(self):

        localctx = AthenaParser.Ddl_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ddl_command)
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self.alter_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.alter_table_add_cols()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 262
                self.alter_table_add_part()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 263
                self.alter_table_drop_part()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 264
                self.alter_table_rename_part()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 265
                self.alter_table_replace_part()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 266
                self.alter_table_set_location()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 267
                self.alter_table_set_props()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 268
                self.create_database()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 269
                self.create_table()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 270
                self.create_table_as()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 271
                self.create_view()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 272
                self.drop_database()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 273
                self.drop_table()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 274
                self.drop_view()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 275
                self.describe()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 276
                self.describe_view()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 277
                self.msck()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 278
                self.show_columns()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 279
                self.show_create_table()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 280
                self.show_create_view()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 281
                self.show_databases()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 282
                self.show_partitions()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 283
                self.show_tables()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 284
                self.show_tblproperties()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 285
                self.show_views()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select(self):
            return self.getTypedRuleContext(AthenaParser.SelectContext,0)


        def insert_into(self):
            return self.getTypedRuleContext(AthenaParser.Insert_intoContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(AthenaParser.Delete_stmtContext,0)


        def update(self):
            return self.getTypedRuleContext(AthenaParser.UpdateContext,0)


        def merge_into(self):
            return self.getTypedRuleContext(AthenaParser.Merge_intoContext,0)


        def optimize_stmt(self):
            return self.getTypedRuleContext(AthenaParser.Optimize_stmtContext,0)


        def vacuum(self):
            return self.getTypedRuleContext(AthenaParser.VacuumContext,0)


        def explain(self):
            return self.getTypedRuleContext(AthenaParser.ExplainContext,0)


        def prepare(self):
            return self.getTypedRuleContext(AthenaParser.PrepareContext,0)


        def execute(self):
            return self.getTypedRuleContext(AthenaParser.ExecuteContext,0)


        def deallocate(self):
            return self.getTypedRuleContext(AthenaParser.DeallocateContext,0)


        def unload(self):
            return self.getTypedRuleContext(AthenaParser.UnloadContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_dml_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_command" ):
                listener.enterDml_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_command" ):
                listener.exitDml_command(self)




    def dml_command(self):

        localctx = AthenaParser.Dml_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_dml_command)
        try:
            self.state = 300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112, 147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.select()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.insert_into()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 290
                self.delete_stmt()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 4)
                self.state = 291
                self.update()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 5)
                self.state = 292
                self.merge_into()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 6)
                self.state = 293
                self.optimize_stmt()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 7)
                self.state = 294
                self.vacuum()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 8)
                self.state = 295
                self.explain()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 9)
                self.state = 296
                self.prepare()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 10)
                self.state = 297
                self.execute()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 11)
                self.state = 298
                self.deallocate()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 12)
                self.state = 299
                self.unload()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(AthenaParser.Select_statementContext,0)


        def WITH(self):
            return self.getToken(AthenaParser.WITH, 0)

        def with_query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.With_queryContext)
            else:
                return self.getTypedRuleContext(AthenaParser.With_queryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect" ):
                listener.enterSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect" ):
                listener.exitSelect(self)




    def select(self):

        localctx = AthenaParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 302
                self.match(AthenaParser.WITH)
                self.state = 303
                self.with_query()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 304
                    self.match(AthenaParser.COMMA)
                    self.state = 305
                    self.with_query()
                    self.state = 310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 313
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(AthenaParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(AthenaParser.Select_listContext,0)


        def all_distinct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.All_distinctContext)
            else:
                return self.getTypedRuleContext(AthenaParser.All_distinctContext,i)


        def FROM(self):
            return self.getToken(AthenaParser.FROM, 0)

        def from_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.From_itemContext)
            else:
                return self.getTypedRuleContext(AthenaParser.From_itemContext,i)


        def WHERE(self):
            return self.getToken(AthenaParser.WHERE, 0)

        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ConditionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ConditionContext,i)


        def GROUP(self):
            return self.getToken(AthenaParser.GROUP, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.BY)
            else:
                return self.getToken(AthenaParser.BY, i)

        def grouping_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Grouping_elementContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Grouping_elementContext,i)


        def HAVING(self):
            return self.getToken(AthenaParser.HAVING, 0)

        def select_statement(self):
            return self.getTypedRuleContext(AthenaParser.Select_statementContext,0)


        def ORDER(self):
            return self.getToken(AthenaParser.ORDER, 0)

        def order_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Order_itemContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Order_itemContext,i)


        def OFFSET(self):
            return self.getToken(AthenaParser.OFFSET, 0)

        def count(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.CountContext)
            else:
                return self.getTypedRuleContext(AthenaParser.CountContext,i)


        def LIMIT(self):
            return self.getToken(AthenaParser.LIMIT, 0)

        def UNION(self):
            return self.getToken(AthenaParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(AthenaParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(AthenaParser.EXCEPT, 0)

        def ALL(self):
            return self.getToken(AthenaParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def ROW(self):
            return self.getToken(AthenaParser.ROW, 0)

        def ROWS(self):
            return self.getToken(AthenaParser.ROWS, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = AthenaParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(AthenaParser.SELECT)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==39:
                self.state = 316
                self.all_distinct()


            self.state = 319
            self.select_list()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 320
                self.match(AthenaParser.FROM)
                self.state = 321
                self.from_item()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 322
                    self.match(AthenaParser.COMMA)
                    self.state = 323
                    self.from_item()
                    self.state = 328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 331
                self.match(AthenaParser.WHERE)
                self.state = 332
                self.condition()


            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 335
                self.match(AthenaParser.GROUP)
                self.state = 336
                self.match(AthenaParser.BY)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==39:
                    self.state = 337
                    self.all_distinct()


                self.state = 340
                self.grouping_element()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 341
                    self.match(AthenaParser.COMMA)
                    self.state = 342
                    self.grouping_element()
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 350
                self.match(AthenaParser.HAVING)
                self.state = 351
                self.condition()


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46 or _la==68 or _la==135:
                self.state = 354
                _la = self._input.LA(1)
                if not(_la==46 or _la==68 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==39:
                    self.state = 355
                    self.all_distinct()


                self.state = 358
                self.select_statement()


            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 361
                self.match(AthenaParser.ORDER)
                self.state = 362
                self.match(AthenaParser.BY)
                self.state = 363
                self.order_item()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 364
                    self.match(AthenaParser.COMMA)
                    self.state = 365
                    self.order_item()
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 373
                self.match(AthenaParser.OFFSET)
                self.state = 374
                self.count()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108 or _la==109:
                    self.state = 375
                    _la = self._input.LA(1)
                    if not(_la==108 or _la==109):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 380
                self.match(AthenaParser.LIMIT)
                self.state = 383
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [170]:
                    self.state = 381
                    self.count()
                    pass
                elif token in [2]:
                    self.state = 382
                    self.match(AthenaParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(AthenaParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(AthenaParser.DISTINCT, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_all_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct" ):
                listener.enterAll_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct" ):
                listener.exitAll_distinct(self)




    def all_distinct(self):

        localctx = AthenaParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            _la = self._input.LA(1)
            if not(_la==2 or _la==39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AthenaParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(AthenaParser.NULLS, 0)

        def ASC(self):
            return self.getToken(AthenaParser.ASC, 0)

        def DESC(self):
            return self.getToken(AthenaParser.DESC, 0)

        def FIRST(self):
            return self.getToken(AthenaParser.FIRST, 0)

        def LAST(self):
            return self.getToken(AthenaParser.LAST, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_order_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_item" ):
                listener.enterOrder_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_item" ):
                listener.exitOrder_item(self)




    def order_item(self):

        localctx = AthenaParser.Order_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_order_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.expression(0)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==37:
                self.state = 390
                _la = self._input.LA(1)
                if not(_la==9 or _la==37):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 393
                self.match(AthenaParser.NULLS)
                self.state = 394
                _la = self._input.LA(1)
                if not(_la==54 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_from_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_item" ):
                listener.enterFrom_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_item" ):
                listener.exitFrom_item(self)




    def from_item(self):

        localctx = AthenaParser.From_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_from_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCount" ):
                listener.enterCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCount" ):
                listener.exitCount(self)




    def count(self):

        localctx = AthenaParser.CountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.int_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def select_statement(self):
            return self.getTypedRuleContext(AthenaParser.Select_statementContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_with_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_query" ):
                listener.enterWith_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_query" ):
                listener.exitWith_query(self)




    def with_query(self):

        localctx = AthenaParser.With_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_with_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.id_()
            self.state = 402
            self.match(AthenaParser.AS)
            self.state = 403
            self.match(AthenaParser.LP)
            self.state = 404
            self.select_statement()
            self.state = 405
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AthenaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_grouping_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_element" ):
                listener.enterGrouping_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_element" ):
                listener.exitGrouping_element(self)




    def grouping_element(self):

        localctx = AthenaParser.Grouping_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_grouping_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_expression(self):
            return self.getTypedRuleContext(AthenaParser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = AthenaParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.boolean_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_intoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(AthenaParser.INSERT, 0)

        def INTO(self):
            return self.getToken(AthenaParser.INTO, 0)

        def destination_table(self):
            return self.getTypedRuleContext(AthenaParser.Destination_tableContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(AthenaParser.Select_statementContext,0)


        def VALUES(self):
            return self.getToken(AthenaParser.VALUES, 0)

        def value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Value_listContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Value_listContext,i)


        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def column_list(self):
            return self.getTypedRuleContext(AthenaParser.Column_listContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_insert_into

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into" ):
                listener.enterInsert_into(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into" ):
                listener.exitInsert_into(self)




    def insert_into(self):

        localctx = AthenaParser.Insert_intoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_insert_into)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(AthenaParser.INSERT)
            self.state = 412
            self.match(AthenaParser.INTO)
            self.state = 413
            self.destination_table()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 414
                self.match(AthenaParser.LP)
                self.state = 415
                self.column_list()
                self.state = 416
                self.match(AthenaParser.RP)


            self.state = 430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.state = 420
                self.select_statement()
                pass
            elif token in [141]:
                self.state = 421
                self.match(AthenaParser.VALUES)
                self.state = 422
                self.value_list()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 423
                    self.match(AthenaParser.COMMA)
                    self.state = 424
                    self.value_list()
                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ValueContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ValueContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_list" ):
                listener.enterValue_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_list" ):
                listener.exitValue_list(self)




    def value_list(self):

        localctx = AthenaParser.Value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(AthenaParser.LP)
            self.state = 433
            self.value()
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 434
                self.match(AthenaParser.COMMA)
                self.state = 435
                self.value()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 441
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Select_itemContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Select_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = AthenaParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.select_item()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 444
                self.match(AthenaParser.COMMA)
                self.state = 445
                self.select_item()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AthenaParser.ExpressionContext,0)


        def alias(self):
            return self.getTypedRuleContext(AthenaParser.AliasContext,0)


        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def STAR(self):
            return self.getToken(AthenaParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_select_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_item" ):
                listener.enterSelect_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_item" ):
                listener.exitSelect_item(self)




    def select_item(self):

        localctx = AthenaParser.Select_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_select_item)
        self._la = 0 # Token type
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.expression(0)
                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 452
                        self.match(AthenaParser.AS)


                    self.state = 455
                    self.alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167 or _la==169:
                    self.state = 458
                    self.table_name()
                    self.state = 459
                    self.match(AthenaParser.DOT)


                self.state = 463
                self.match(AthenaParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(AthenaParser.DELETE, 0)

        def FROM(self):
            return self.getToken(AthenaParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def db_name(self):
            return self.getTypedRuleContext(AthenaParser.Db_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def WHERE(self):
            return self.getToken(AthenaParser.WHERE, 0)

        def predicate(self):
            return self.getTypedRuleContext(AthenaParser.PredicateContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = AthenaParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(AthenaParser.DELETE)
            self.state = 467
            self.match(AthenaParser.FROM)
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 468
                self.db_name()
                self.state = 469
                self.match(AthenaParser.DOT)


            self.state = 473
            self.table_name()
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 474
                self.match(AthenaParser.WHERE)
                self.state = 475
                self.predicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(AthenaParser.UPDATE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(AthenaParser.SET, 0)

        def col_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Col_nameContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Col_nameContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.EQ)
            else:
                return self.getToken(AthenaParser.EQ, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def db_name(self):
            return self.getTypedRuleContext(AthenaParser.Db_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def WHERE(self):
            return self.getToken(AthenaParser.WHERE, 0)

        def predicate(self):
            return self.getTypedRuleContext(AthenaParser.PredicateContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)




    def update(self):

        localctx = AthenaParser.UpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_update)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(AthenaParser.UPDATE)
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 479
                self.db_name()
                self.state = 480
                self.match(AthenaParser.DOT)


            self.state = 484
            self.table_name()
            self.state = 485
            self.match(AthenaParser.SET)
            self.state = 486
            self.col_name()
            self.state = 487
            self.match(AthenaParser.EQ)
            self.state = 488
            self.expression(0)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 489
                self.match(AthenaParser.COMMA)
                self.state = 490
                self.col_name()
                self.state = 491
                self.match(AthenaParser.EQ)
                self.state = 492
                self.expression(0)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 499
                self.match(AthenaParser.WHERE)
                self.state = 500
                self.predicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_intoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(AthenaParser.MERGE, 0)

        def INTO(self):
            return self.getToken(AthenaParser.INTO, 0)

        def target_table(self):
            return self.getTypedRuleContext(AthenaParser.Target_tableContext,0)


        def USING(self):
            return self.getToken(AthenaParser.USING, 0)

        def ON(self):
            return self.getToken(AthenaParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(AthenaParser.Search_conditionContext,0)


        def when_clauses(self):
            return self.getTypedRuleContext(AthenaParser.When_clausesContext,0)


        def source_table(self):
            return self.getTypedRuleContext(AthenaParser.Source_tableContext,0)


        def query(self):
            return self.getTypedRuleContext(AthenaParser.QueryContext,0)


        def target_alias(self):
            return self.getTypedRuleContext(AthenaParser.Target_aliasContext,0)


        def source_alias(self):
            return self.getTypedRuleContext(AthenaParser.Source_aliasContext,0)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.AS)
            else:
                return self.getToken(AthenaParser.AS, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_merge_into

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_into" ):
                listener.enterMerge_into(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_into" ):
                listener.exitMerge_into(self)




    def merge_into(self):

        localctx = AthenaParser.Merge_intoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_merge_into)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(AthenaParser.MERGE)
            self.state = 504
            self.match(AthenaParser.INTO)
            self.state = 505
            self.target_table()
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==167 or _la==169:
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 506
                    self.match(AthenaParser.AS)


                self.state = 509
                self.target_alias()


            self.state = 512
            self.match(AthenaParser.USING)
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [167, 169]:
                self.state = 513
                self.source_table()
                pass
            elif token in [112, 147]:
                self.state = 514
                self.query()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==167 or _la==169:
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 517
                    self.match(AthenaParser.AS)


                self.state = 520
                self.source_alias()


            self.state = 523
            self.match(AthenaParser.ON)
            self.state = 524
            self.search_condition()
            self.state = 525
            self.when_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(AthenaParser.PredicateContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)




    def search_condition(self):

        localctx = AthenaParser.Search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_search_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.predicate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_matched_and_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.When_matched_and_clauseContext)
            else:
                return self.getTypedRuleContext(AthenaParser.When_matched_and_clauseContext,i)


        def when_matched_then_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.When_matched_then_clauseContext)
            else:
                return self.getTypedRuleContext(AthenaParser.When_matched_then_clauseContext,i)


        def when_not_matched_clause(self):
            return self.getTypedRuleContext(AthenaParser.When_not_matched_clauseContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_when_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clauses" ):
                listener.enterWhen_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clauses" ):
                listener.exitWhen_clauses(self)




    def when_clauses(self):

        localctx = AthenaParser.When_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_when_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 531
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        self.state = 529
                        self.when_matched_and_clause()
                        pass

                    elif la_ == 2:
                        self.state = 530
                        self.when_matched_then_clause()
                        pass

             
                self.state = 535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 536
                self.when_not_matched_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_not_matched_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(AthenaParser.WHEN, 0)

        def NOT(self):
            return self.getToken(AthenaParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(AthenaParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(AthenaParser.THEN, 0)

        def INSERT(self):
            return self.getToken(AthenaParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(AthenaParser.VALUES, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(AthenaParser.Expression_list_Context,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def AND(self):
            return self.getToken(AthenaParser.AND, 0)

        def expression(self):
            return self.getTypedRuleContext(AthenaParser.ExpressionContext,0)


        def column_list(self):
            return self.getTypedRuleContext(AthenaParser.Column_listContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_when_not_matched_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_not_matched_clause" ):
                listener.enterWhen_not_matched_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_not_matched_clause" ):
                listener.exitWhen_not_matched_clause(self)




    def when_not_matched_clause(self):

        localctx = AthenaParser.When_not_matched_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_when_not_matched_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(AthenaParser.WHEN)
            self.state = 540
            self.match(AthenaParser.NOT)
            self.state = 541
            self.match(AthenaParser.MATCHED)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 542
                self.match(AthenaParser.AND)
                self.state = 543
                self.expression(0)


            self.state = 546
            self.match(AthenaParser.THEN)
            self.state = 547
            self.match(AthenaParser.INSERT)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==167 or _la==169:
                self.state = 548
                self.column_list()


            self.state = 551
            self.match(AthenaParser.VALUES)
            self.state = 552
            self.match(AthenaParser.LP)
            self.state = 553
            self.expression_list_()
            self.state = 554
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_expression_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list_" ):
                listener.enterExpression_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list_" ):
                listener.exitExpression_list_(self)




    def expression_list_(self):

        localctx = AthenaParser.Expression_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression_list_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.expression(0)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 557
                self.match(AthenaParser.COMMA)
                self.state = 558
                self.expression(0)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Col_nameContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Col_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = AthenaParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.col_name()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 565
                self.match(AthenaParser.COMMA)
                self.state = 566
                self.col_name()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_matched_and_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(AthenaParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(AthenaParser.MATCHED, 0)

        def AND(self):
            return self.getToken(AthenaParser.AND, 0)

        def expression(self):
            return self.getTypedRuleContext(AthenaParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(AthenaParser.THEN, 0)

        def update_delete(self):
            return self.getTypedRuleContext(AthenaParser.Update_deleteContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_when_matched_and_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_matched_and_clause" ):
                listener.enterWhen_matched_and_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_matched_and_clause" ):
                listener.exitWhen_matched_and_clause(self)




    def when_matched_and_clause(self):

        localctx = AthenaParser.When_matched_and_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_when_matched_and_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(AthenaParser.WHEN)
            self.state = 573
            self.match(AthenaParser.MATCHED)
            self.state = 574
            self.match(AthenaParser.AND)
            self.state = 575
            self.expression(0)
            self.state = 576
            self.match(AthenaParser.THEN)
            self.state = 577
            self.update_delete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_matched_then_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(AthenaParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(AthenaParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(AthenaParser.THEN, 0)

        def update_delete(self):
            return self.getTypedRuleContext(AthenaParser.Update_deleteContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_when_matched_then_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_matched_then_clause" ):
                listener.enterWhen_matched_then_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_matched_then_clause" ):
                listener.exitWhen_matched_then_clause(self)




    def when_matched_then_clause(self):

        localctx = AthenaParser.When_matched_then_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_when_matched_then_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(AthenaParser.WHEN)
            self.state = 580
            self.match(AthenaParser.MATCHED)
            self.state = 581
            self.match(AthenaParser.THEN)
            self.state = 582
            self.update_delete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_deleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(AthenaParser.UPDATE, 0)

        def SET(self):
            return self.getToken(AthenaParser.SET, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def col_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Col_nameContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Col_nameContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.EQ)
            else:
                return self.getToken(AthenaParser.EQ, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def DELETE(self):
            return self.getToken(AthenaParser.DELETE, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_update_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_delete" ):
                listener.enterUpdate_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_delete" ):
                listener.exitUpdate_delete(self)




    def update_delete(self):

        localctx = AthenaParser.Update_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_update_delete)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 584
                self.match(AthenaParser.UPDATE)
                self.state = 585
                self.match(AthenaParser.SET)
                self.state = 586
                self.match(AthenaParser.LP)
                self.state = 587
                self.col_name()
                self.state = 588
                self.match(AthenaParser.EQ)
                self.state = 589
                self.expression(0)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 590
                    self.match(AthenaParser.COMMA)
                    self.state = 591
                    self.col_name()
                    self.state = 592
                    self.match(AthenaParser.EQ)
                    self.state = 593
                    self.expression(0)
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.match(AthenaParser.RP)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(AthenaParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optimize_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIMIZE(self):
            return self.getToken(AthenaParser.OPTIMIZE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def REWRITE(self):
            return self.getToken(AthenaParser.REWRITE, 0)

        def DATA(self):
            return self.getToken(AthenaParser.DATA, 0)

        def USING(self):
            return self.getToken(AthenaParser.USING, 0)

        def BIN_PACK(self):
            return self.getToken(AthenaParser.BIN_PACK, 0)

        def db_name(self):
            return self.getTypedRuleContext(AthenaParser.Db_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def WHERE(self):
            return self.getToken(AthenaParser.WHERE, 0)

        def predicate(self):
            return self.getTypedRuleContext(AthenaParser.PredicateContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_optimize_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_stmt" ):
                listener.enterOptimize_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_stmt" ):
                listener.exitOptimize_stmt(self)




    def optimize_stmt(self):

        localctx = AthenaParser.Optimize_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_optimize_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(AthenaParser.OPTIMIZE)
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 606
                self.db_name()
                self.state = 607
                self.match(AthenaParser.DOT)


            self.state = 611
            self.table_name()
            self.state = 612
            self.match(AthenaParser.REWRITE)
            self.state = 613
            self.match(AthenaParser.DATA)
            self.state = 614
            self.match(AthenaParser.USING)
            self.state = 615
            self.match(AthenaParser.BIN_PACK)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 616
                self.match(AthenaParser.WHERE)
                self.state = 617
                self.predicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VacuumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM(self):
            return self.getToken(AthenaParser.VACUUM, 0)

        def target_table(self):
            return self.getTypedRuleContext(AthenaParser.Target_tableContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_vacuum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum" ):
                listener.enterVacuum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum" ):
                listener.exitVacuum(self)




    def vacuum(self):

        localctx = AthenaParser.VacuumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_vacuum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(AthenaParser.VACUUM)
            self.state = 621
            self.target_table()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_target_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_table" ):
                listener.enterTarget_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_table" ):
                listener.exitTarget_table(self)




    def target_table(self):

        localctx = AthenaParser.Target_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_target_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_source_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_table" ):
                listener.enterSource_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_table" ):
                listener.exitSource_table(self)




    def source_table(self):

        localctx = AthenaParser.Source_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_source_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(AthenaParser.EXPLAIN, 0)

        def statement(self):
            return self.getTypedRuleContext(AthenaParser.StatementContext,0)


        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def explain_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Explain_optionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Explain_optionContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def ANALYZE(self):
            return self.getToken(AthenaParser.ANALYZE, 0)

        def FORMAT(self):
            return self.getToken(AthenaParser.FORMAT, 0)

        def TEXT(self):
            return self.getToken(AthenaParser.TEXT, 0)

        def JSON(self):
            return self.getToken(AthenaParser.JSON, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_explain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)




    def explain(self):

        localctx = AthenaParser.ExplainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_explain)
        self._la = 0 # Token type
        try:
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.match(AthenaParser.EXPLAIN)
                self.state = 628
                self.statement()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 629
                    self.match(AthenaParser.LP)
                    self.state = 630
                    self.explain_option()
                    self.state = 635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==153:
                        self.state = 631
                        self.match(AthenaParser.COMMA)
                        self.state = 632
                        self.explain_option()
                        self.state = 637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 638
                    self.match(AthenaParser.RP)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.match(AthenaParser.EXPLAIN)
                self.state = 643
                self.match(AthenaParser.ANALYZE)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 644
                    self.match(AthenaParser.LP)
                    self.state = 645
                    self.match(AthenaParser.FORMAT)
                    self.state = 646
                    _la = self._input.LA(1)
                    if not(_la==74 or _la==127):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 647
                    self.match(AthenaParser.RP)


                self.state = 650
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT(self):
            return self.getToken(AthenaParser.FORMAT, 0)

        def TEXT(self):
            return self.getToken(AthenaParser.TEXT, 0)

        def GRAPHVIZ(self):
            return self.getToken(AthenaParser.GRAPHVIZ, 0)

        def JSON(self):
            return self.getToken(AthenaParser.JSON, 0)

        def TYPE(self):
            return self.getToken(AthenaParser.TYPE, 0)

        def LOGICAL(self):
            return self.getToken(AthenaParser.LOGICAL, 0)

        def DISTRIBUTED(self):
            return self.getToken(AthenaParser.DISTRIBUTED, 0)

        def VALIDATE(self):
            return self.getToken(AthenaParser.VALIDATE, 0)

        def IO(self):
            return self.getToken(AthenaParser.IO, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_explain_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option" ):
                listener.enterExplain_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option" ):
                listener.exitExplain_option(self)




    def explain_option(self):

        localctx = AthenaParser.Explain_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_explain_option)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.match(AthenaParser.FORMAT)
                self.state = 654
                _la = self._input.LA(1)
                if not(_la==59 or _la==74 or _la==127):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.match(AthenaParser.TYPE)
                self.state = 656
                _la = self._input.LA(1)
                if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 2200096997377) != 0) or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPARE(self):
            return self.getToken(AthenaParser.PREPARE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(AthenaParser.Statement_nameContext,0)


        def FROM(self):
            return self.getToken(AthenaParser.FROM, 0)

        def statement(self):
            return self.getTypedRuleContext(AthenaParser.StatementContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_prepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)




    def prepare(self):

        localctx = AthenaParser.PrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_prepare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(AthenaParser.PREPARE)
            self.state = 660
            self.statement_name()
            self.state = 661
            self.match(AthenaParser.FROM)
            self.state = 662
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select(self):
            return self.getTypedRuleContext(AthenaParser.SelectContext,0)


        def create_table_as(self):
            return self.getTypedRuleContext(AthenaParser.Create_table_asContext,0)


        def insert_into(self):
            return self.getTypedRuleContext(AthenaParser.Insert_intoContext,0)


        def unload(self):
            return self.getTypedRuleContext(AthenaParser.UnloadContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = AthenaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_statement)
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112, 147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.select()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.create_table_as()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 666
                self.insert_into()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 4)
                self.state = 667
                self.unload()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(AthenaParser.EXECUTE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(AthenaParser.Statement_nameContext,0)


        def USING(self):
            return self.getToken(AthenaParser.USING, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ParameterContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = AthenaParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(AthenaParser.EXECUTE)
            self.state = 671
            self.statement_name()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 672
                self.match(AthenaParser.USING)
                self.state = 673
                self.parameter()
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 674
                    self.match(AthenaParser.COMMA)
                    self.state = 675
                    self.parameter()
                    self.state = 680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(AthenaParser.ValueContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = AthenaParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def true_false(self):
            return self.getTypedRuleContext(AthenaParser.True_falseContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = AthenaParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_value)
        try:
            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170]:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.int_number()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.string()
                pass
            elif token in [52, 133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.true_false()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(AthenaParser.DEALLOCATE, 0)

        def PREPARE(self):
            return self.getToken(AthenaParser.PREPARE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(AthenaParser.Statement_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_deallocate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)




    def deallocate(self):

        localctx = AthenaParser.DeallocateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_deallocate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(AthenaParser.DEALLOCATE)
            self.state = 691
            self.match(AthenaParser.PREPARE)
            self.state = 692
            self.statement_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOAD(self):
            return self.getToken(AthenaParser.UNLOAD, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.LP)
            else:
                return self.getToken(AthenaParser.LP, i)

        def select(self):
            return self.getTypedRuleContext(AthenaParser.SelectContext,0)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.RP)
            else:
                return self.getToken(AthenaParser.RP, i)

        def TO(self):
            return self.getToken(AthenaParser.TO, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def WITH(self):
            return self.getToken(AthenaParser.WITH, 0)

        def property_list(self):
            return self.getTypedRuleContext(AthenaParser.Property_listContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_unload

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnload" ):
                listener.enterUnload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnload" ):
                listener.exitUnload(self)




    def unload(self):

        localctx = AthenaParser.UnloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_unload)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(AthenaParser.UNLOAD)
            self.state = 695
            self.match(AthenaParser.LP)
            self.state = 696
            self.select()
            self.state = 697
            self.match(AthenaParser.RP)
            self.state = 698
            self.match(AthenaParser.TO)
            self.state = 699
            self.string()
            self.state = 700
            self.match(AthenaParser.WITH)
            self.state = 701
            self.match(AthenaParser.LP)
            self.state = 702
            self.property_list()
            self.state = 703
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Property_nameContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Property_nameContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.EQ)
            else:
                return self.getToken(AthenaParser.EQ, i)

        def property_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Property_valueContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Property_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_property_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_list" ):
                listener.enterProperty_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_list" ):
                listener.exitProperty_list(self)




    def property_list(self):

        localctx = AthenaParser.Property_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_property_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.property_name()
            self.state = 706
            self.match(AthenaParser.EQ)
            self.state = 707
            self.property_value()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 708
                self.match(AthenaParser.COMMA)
                self.state = 709
                self.property_name()
                self.state = 710
                self.match(AthenaParser.EQ)
                self.state = 711
                self.property_value()
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(AthenaParser.ValueContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_property_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_value" ):
                listener.enterProperty_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_value" ):
                listener.exitProperty_value(self)




    def property_value(self):

        localctx = AthenaParser.Property_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_property_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def true_false(self):
            return self.getTypedRuleContext(AthenaParser.True_falseContext,0)


        def boolean_expression(self):
            return self.getTypedRuleContext(AthenaParser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = AthenaParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_predicate)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.true_false()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.boolean_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def db_schema(self):
            return self.getTypedRuleContext(AthenaParser.Db_schemaContext,0)


        def database_name(self):
            return self.getTypedRuleContext(AthenaParser.Database_nameContext,0)


        def SET(self):
            return self.getToken(AthenaParser.SET, 0)

        def DBPROPERTIES(self):
            return self.getToken(AthenaParser.DBPROPERTIES, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Kv_pairContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)




    def alter_database(self):

        localctx = AthenaParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alter_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(AthenaParser.ALTER)
            self.state = 725
            self.db_schema()
            self.state = 726
            self.database_name()
            self.state = 727
            self.match(AthenaParser.SET)
            self.state = 728
            self.match(AthenaParser.DBPROPERTIES)
            self.state = 729
            self.match(AthenaParser.LP)
            self.state = 730
            self.kv_pair()
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 731
                self.match(AthenaParser.COMMA)
                self.state = 732
                self.kv_pair()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 738
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(AthenaParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(AthenaParser.SCHEMA, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_db_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_schema" ):
                listener.enterDb_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_schema" ):
                listener.exitDb_schema(self)




    def db_schema(self):

        localctx = AthenaParser.Db_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_db_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            _la = self._input.LA(1)
            if not(_la==28 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.StringContext)
            else:
                return self.getTypedRuleContext(AthenaParser.StringContext,i)


        def EQ(self):
            return self.getToken(AthenaParser.EQ, 0)

        def DQ_STRING_LITERAL(self):
            return self.getToken(AthenaParser.DQ_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_kv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_pair" ):
                listener.enterKv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_pair" ):
                listener.exitKv_pair(self)




    def kv_pair(self):

        localctx = AthenaParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.string()
            self.state = 743
            self.match(AthenaParser.EQ)
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [168]:
                self.state = 744
                self.string()
                pass
            elif token in [169]:
                self.state = 745
                self.match(AthenaParser.DQ_STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_add_colsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def ADD(self):
            return self.getToken(AthenaParser.ADD, 0)

        def COLUMNS(self):
            return self.getToken(AthenaParser.COLUMNS, 0)

        def col_name(self):
            return self.getTypedRuleContext(AthenaParser.Col_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(AthenaParser.Data_typeContext,0)


        def PARTITION(self):
            return self.getToken(AthenaParser.PARTITION, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def part_col_name_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Part_col_name_valueContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Part_col_name_valueContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_add_cols

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_cols" ):
                listener.enterAlter_table_add_cols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_cols" ):
                listener.exitAlter_table_add_cols(self)




    def alter_table_add_cols(self):

        localctx = AthenaParser.Alter_table_add_colsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_table_add_cols)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(AthenaParser.ALTER)
            self.state = 749
            self.match(AthenaParser.TABLE)
            self.state = 750
            self.table_name()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 751
                self.match(AthenaParser.PARTITION)
                self.state = 752
                self.match(AthenaParser.LP)
                self.state = 753
                self.part_col_name_value()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 754
                    self.match(AthenaParser.COMMA)
                    self.state = 755
                    self.part_col_name_value()
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 761
                self.match(AthenaParser.RP)


            self.state = 765
            self.match(AthenaParser.ADD)
            self.state = 766
            self.match(AthenaParser.COLUMNS)

            self.state = 767
            self.col_name()
            self.state = 768
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Part_col_name_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_col_name(self):
            return self.getTypedRuleContext(AthenaParser.Partition_col_nameContext,0)


        def EQ(self):
            return self.getToken(AthenaParser.EQ, 0)

        def partition_col_value(self):
            return self.getTypedRuleContext(AthenaParser.Partition_col_valueContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_part_col_name_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart_col_name_value" ):
                listener.enterPart_col_name_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart_col_name_value" ):
                listener.exitPart_col_name_value(self)




    def part_col_name_value(self):

        localctx = AthenaParser.Part_col_name_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_part_col_name_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.partition_col_name()
            self.state = 771
            self.match(AthenaParser.EQ)
            self.state = 772
            self.partition_col_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_col_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_name(self):
            return self.getTypedRuleContext(AthenaParser.Col_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_partition_col_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_col_name" ):
                listener.enterPartition_col_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_col_name" ):
                listener.exitPartition_col_name(self)




    def partition_col_name(self):

        localctx = AthenaParser.Partition_col_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partition_col_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.col_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_col_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(AthenaParser.ValueContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_partition_col_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_col_value" ):
                listener.enterPartition_col_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_col_value" ):
                listener.exitPartition_col_value(self)




    def partition_col_value(self):

        localctx = AthenaParser.Partition_col_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_partition_col_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_add_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def ADD(self):
            return self.getToken(AthenaParser.ADD, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_not_existsContext,0)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.PARTITION)
            else:
                return self.getToken(AthenaParser.PARTITION, i)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.LP)
            else:
                return self.getToken(AthenaParser.LP, i)

        def part_col_name_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Part_col_name_valueContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Part_col_name_valueContext,i)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.RP)
            else:
                return self.getToken(AthenaParser.RP, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def LOCATION(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.LOCATION)
            else:
                return self.getToken(AthenaParser.LOCATION, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.StringContext)
            else:
                return self.getTypedRuleContext(AthenaParser.StringContext,i)


        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_add_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_part" ):
                listener.enterAlter_table_add_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_part" ):
                listener.exitAlter_table_add_part(self)




    def alter_table_add_part(self):

        localctx = AthenaParser.Alter_table_add_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alter_table_add_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(AthenaParser.ALTER)
            self.state = 779
            self.match(AthenaParser.TABLE)
            self.state = 780
            self.table_name()
            self.state = 781
            self.match(AthenaParser.ADD)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 782
                self.if_not_exists()


            self.state = 800 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 785
                self.match(AthenaParser.PARTITION)
                self.state = 786
                self.match(AthenaParser.LP)
                self.state = 787
                self.part_col_name_value()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 788
                    self.match(AthenaParser.COMMA)
                    self.state = 789
                    self.part_col_name_value()
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 795
                self.match(AthenaParser.RP)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 796
                    self.match(AthenaParser.LOCATION)
                    self.state = 797
                    self.string()


                self.state = 802 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==98):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_drop_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def DROP(self):
            return self.getToken(AthenaParser.DROP, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.PARTITION)
            else:
                return self.getToken(AthenaParser.PARTITION, i)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.LP)
            else:
                return self.getToken(AthenaParser.LP, i)

        def partition_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Partition_specContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Partition_specContext,i)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.RP)
            else:
                return self.getToken(AthenaParser.RP, i)

        def if_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_existsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_drop_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_drop_part" ):
                listener.enterAlter_table_drop_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_drop_part" ):
                listener.exitAlter_table_drop_part(self)




    def alter_table_drop_part(self):

        localctx = AthenaParser.Alter_table_drop_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_alter_table_drop_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(AthenaParser.ALTER)
            self.state = 805
            self.match(AthenaParser.TABLE)
            self.state = 806
            self.table_name()
            self.state = 807
            self.match(AthenaParser.DROP)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 808
                self.if_exists()


            self.state = 811
            self.match(AthenaParser.PARTITION)
            self.state = 812
            self.match(AthenaParser.LP)
            self.state = 813
            self.partition_spec()
            self.state = 814
            self.match(AthenaParser.RP)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 815
                self.match(AthenaParser.COMMA)
                self.state = 816
                self.match(AthenaParser.PARTITION)
                self.state = 817
                self.match(AthenaParser.LP)
                self.state = 818
                self.partition_spec()
                self.state = 819
                self.match(AthenaParser.RP)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def part_col_name_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Part_col_name_valueContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Part_col_name_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_partition_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_spec" ):
                listener.enterPartition_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_spec" ):
                listener.exitPartition_spec(self)




    def partition_spec(self):

        localctx = AthenaParser.Partition_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_partition_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.part_col_name_value()
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 827
                self.match(AthenaParser.COMMA)
                self.state = 828
                self.part_col_name_value()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_rename_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.np = None # Partition_specContext

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.PARTITION)
            else:
                return self.getToken(AthenaParser.PARTITION, i)

        def RENAME(self):
            return self.getToken(AthenaParser.RENAME, 0)

        def TO(self):
            return self.getToken(AthenaParser.TO, 0)

        def partition_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Partition_specContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Partition_specContext,i)


        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_rename_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_rename_part" ):
                listener.enterAlter_table_rename_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_rename_part" ):
                listener.exitAlter_table_rename_part(self)




    def alter_table_rename_part(self):

        localctx = AthenaParser.Alter_table_rename_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alter_table_rename_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(AthenaParser.ALTER)
            self.state = 835
            self.match(AthenaParser.TABLE)
            self.state = 836
            self.table_name()
            self.state = 837
            self.match(AthenaParser.PARTITION)

            self.state = 838
            self.partition_spec()
            self.state = 839
            self.match(AthenaParser.RENAME)
            self.state = 840
            self.match(AthenaParser.TO)
            self.state = 841
            self.match(AthenaParser.PARTITION)

            self.state = 842
            localctx.np = self.partition_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_replace_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def REPLACE(self):
            return self.getToken(AthenaParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(AthenaParser.COLUMNS, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.LP)
            else:
                return self.getToken(AthenaParser.LP, i)

        def col_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Col_nameContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Col_nameContext,i)


        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Data_typeContext,i)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.RP)
            else:
                return self.getToken(AthenaParser.RP, i)

        def PARTITION(self):
            return self.getToken(AthenaParser.PARTITION, 0)

        def part_col_name_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Part_col_name_valueContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Part_col_name_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_replace_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_replace_part" ):
                listener.enterAlter_table_replace_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_replace_part" ):
                listener.exitAlter_table_replace_part(self)




    def alter_table_replace_part(self):

        localctx = AthenaParser.Alter_table_replace_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_alter_table_replace_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(AthenaParser.ALTER)
            self.state = 845
            self.match(AthenaParser.TABLE)
            self.state = 846
            self.table_name()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 847
                self.match(AthenaParser.PARTITION)
                self.state = 848
                self.match(AthenaParser.LP)
                self.state = 849
                self.part_col_name_value()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 850
                    self.match(AthenaParser.COMMA)
                    self.state = 851
                    self.part_col_name_value()
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 857
                self.match(AthenaParser.RP)


            self.state = 861
            self.match(AthenaParser.REPLACE)
            self.state = 862
            self.match(AthenaParser.COLUMNS)
            self.state = 863
            self.match(AthenaParser.LP)
            self.state = 864
            self.col_name()
            self.state = 865
            self.data_type()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 866
                self.match(AthenaParser.COMMA)
                self.state = 867
                self.col_name()
                self.state = 868
                self.data_type()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 875
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_set_locationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(AthenaParser.SET, 0)

        def LOCATION(self):
            return self.getToken(AthenaParser.LOCATION, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def PARTITION(self):
            return self.getToken(AthenaParser.PARTITION, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def partition_spec(self):
            return self.getTypedRuleContext(AthenaParser.Partition_specContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_set_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_set_location" ):
                listener.enterAlter_table_set_location(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_set_location" ):
                listener.exitAlter_table_set_location(self)




    def alter_table_set_location(self):

        localctx = AthenaParser.Alter_table_set_locationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alter_table_set_location)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(AthenaParser.ALTER)
            self.state = 878
            self.match(AthenaParser.TABLE)
            self.state = 879
            self.table_name()
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 880
                self.match(AthenaParser.PARTITION)
                self.state = 881
                self.match(AthenaParser.LP)
                self.state = 882
                self.partition_spec()
                self.state = 883
                self.match(AthenaParser.RP)


            self.state = 887
            self.match(AthenaParser.SET)
            self.state = 888
            self.match(AthenaParser.LOCATION)
            self.state = 889
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_set_propsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(AthenaParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(AthenaParser.SET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(AthenaParser.TBLPROPERTIES, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Kv_pairContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_alter_table_set_props

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_set_props" ):
                listener.enterAlter_table_set_props(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_set_props" ):
                listener.exitAlter_table_set_props(self)




    def alter_table_set_props(self):

        localctx = AthenaParser.Alter_table_set_propsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alter_table_set_props)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(AthenaParser.ALTER)
            self.state = 892
            self.match(AthenaParser.TABLE)
            self.state = 893
            self.table_name()
            self.state = 894
            self.match(AthenaParser.SET)
            self.state = 895
            self.match(AthenaParser.TBLPROPERTIES)
            self.state = 896
            self.match(AthenaParser.LP)
            self.state = 897
            self.kv_pair()
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 898
                self.match(AthenaParser.COMMA)
                self.state = 899
                self.kv_pair()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 905
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(AthenaParser.CREATE, 0)

        def db_schema(self):
            return self.getTypedRuleContext(AthenaParser.Db_schemaContext,0)


        def database_name(self):
            return self.getTypedRuleContext(AthenaParser.Database_nameContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_not_existsContext,0)


        def COMMENT(self):
            return self.getToken(AthenaParser.COMMENT, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.StringContext)
            else:
                return self.getTypedRuleContext(AthenaParser.StringContext,i)


        def LOCATION(self):
            return self.getToken(AthenaParser.LOCATION, 0)

        def WITH(self):
            return self.getToken(AthenaParser.WITH, 0)

        def DBPROPERTIES(self):
            return self.getToken(AthenaParser.DBPROPERTIES, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Kv_pairContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)




    def create_database(self):

        localctx = AthenaParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(AthenaParser.CREATE)
            self.state = 908
            self.db_schema()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 909
                self.if_not_exists()


            self.state = 912
            self.database_name()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 913
                self.match(AthenaParser.COMMENT)
                self.state = 914
                self.string()


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 917
                self.match(AthenaParser.LOCATION)
                self.state = 918
                self.string()


            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 921
                self.match(AthenaParser.WITH)
                self.state = 922
                self.match(AthenaParser.DBPROPERTIES)
                self.state = 923
                self.match(AthenaParser.LP)
                self.state = 924
                self.kv_pair()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 925
                    self.match(AthenaParser.COMMA)
                    self.state = 926
                    self.kv_pair()
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 932
                self.match(AthenaParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(AthenaParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(AthenaParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def LOCATION(self):
            return self.getToken(AthenaParser.LOCATION, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_not_existsContext,0)


        def db_name(self):
            return self.getTypedRuleContext(AthenaParser.Db_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.LP)
            else:
                return self.getToken(AthenaParser.LP, i)

        def col_def_with_comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Col_def_with_commentContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Col_def_with_commentContext,i)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.RP)
            else:
                return self.getToken(AthenaParser.RP, i)

        def COMMENT(self):
            return self.getToken(AthenaParser.COMMENT, 0)

        def table_comment(self):
            return self.getTypedRuleContext(AthenaParser.Table_commentContext,0)


        def PARTITIONED(self):
            return self.getToken(AthenaParser.PARTITIONED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.BY)
            else:
                return self.getToken(AthenaParser.BY, i)

        def CLUSTERED(self):
            return self.getToken(AthenaParser.CLUSTERED, 0)

        def col_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Col_nameContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Col_nameContext,i)


        def INTO(self):
            return self.getToken(AthenaParser.INTO, 0)

        def num_buckets(self):
            return self.getTypedRuleContext(AthenaParser.Num_bucketsContext,0)


        def BUCKETS(self):
            return self.getToken(AthenaParser.BUCKETS, 0)

        def ROW(self):
            return self.getToken(AthenaParser.ROW, 0)

        def FORMAT(self):
            return self.getToken(AthenaParser.FORMAT, 0)

        def row_format(self):
            return self.getTypedRuleContext(AthenaParser.Row_formatContext,0)


        def STORED(self):
            return self.getToken(AthenaParser.STORED, 0)

        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def file_format(self):
            return self.getTypedRuleContext(AthenaParser.File_formatContext,0)


        def TBLPROPERTIES(self):
            return self.getToken(AthenaParser.TBLPROPERTIES, 0)

        def property_list(self):
            return self.getTypedRuleContext(AthenaParser.Property_listContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def getRuleIndex(self):
            return AthenaParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = AthenaParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(AthenaParser.CREATE)
            self.state = 937
            self.match(AthenaParser.EXTERNAL)
            self.state = 938
            self.match(AthenaParser.TABLE)
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 939
                self.if_not_exists()


            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 942
                self.db_name()
                self.state = 943
                self.match(AthenaParser.DOT)


            self.state = 947
            self.table_name()
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 948
                self.match(AthenaParser.LP)
                self.state = 949
                self.col_def_with_comment()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 950
                    self.match(AthenaParser.COMMA)
                    self.state = 951
                    self.col_def_with_comment()
                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 957
                self.match(AthenaParser.RP)


            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 961
                self.match(AthenaParser.COMMENT)
                self.state = 962
                self.table_comment()


            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 965
                self.match(AthenaParser.PARTITIONED)
                self.state = 966
                self.match(AthenaParser.BY)
                self.state = 967
                self.match(AthenaParser.LP)
                self.state = 968
                self.col_def_with_comment()
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 969
                    self.match(AthenaParser.COMMA)
                    self.state = 970
                    self.col_def_with_comment()
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 976
                self.match(AthenaParser.RP)


            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 980
                self.match(AthenaParser.CLUSTERED)
                self.state = 981
                self.match(AthenaParser.BY)
                self.state = 982
                self.match(AthenaParser.LP)
                self.state = 983
                self.col_name()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 984
                    self.match(AthenaParser.COMMA)
                    self.state = 985
                    self.col_name()
                    self.state = 990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 991
                self.match(AthenaParser.RP)
                self.state = 992
                self.match(AthenaParser.INTO)
                self.state = 993
                self.num_buckets()
                self.state = 994
                self.match(AthenaParser.BUCKETS)


            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 998
                self.match(AthenaParser.ROW)
                self.state = 999
                self.match(AthenaParser.FORMAT)
                self.state = 1000
                self.row_format()


            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 1003
                self.match(AthenaParser.STORED)
                self.state = 1004
                self.match(AthenaParser.AS)
                self.state = 1005
                self.file_format()


            self.state = 1008
            self.match(AthenaParser.LOCATION)
            self.state = 1009
            self.string()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1010
                self.match(AthenaParser.TBLPROPERTIES)
                self.state = 1011
                self.match(AthenaParser.LP)
                self.state = 1012
                self.property_list()
                self.state = 1013
                self.match(AthenaParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_table_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_comment" ):
                listener.enterTable_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_comment" ):
                listener.exitTable_comment(self)




    def table_comment(self):

        localctx = AthenaParser.Table_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_table_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIMITED(self):
            return self.getToken(AthenaParser.DELIMITED, 0)

        def table_row_format_field_identifier(self):
            return self.getTypedRuleContext(AthenaParser.Table_row_format_field_identifierContext,0)


        def table_row_format_coll_items_identifier(self):
            return self.getTypedRuleContext(AthenaParser.Table_row_format_coll_items_identifierContext,0)


        def table_row_format_map_keys_identifier(self):
            return self.getTypedRuleContext(AthenaParser.Table_row_format_map_keys_identifierContext,0)


        def table_row_format_lines_identifier(self):
            return self.getTypedRuleContext(AthenaParser.Table_row_format_lines_identifierContext,0)


        def table_row_null_format(self):
            return self.getTypedRuleContext(AthenaParser.Table_row_null_formatContext,0)


        def SERDE(self):
            return self.getToken(AthenaParser.SERDE, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def WITH(self):
            return self.getToken(AthenaParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(AthenaParser.SERDEPROPERTIES, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def property_list(self):
            return self.getTypedRuleContext(AthenaParser.Property_listContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_row_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_format" ):
                listener.enterRow_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_format" ):
                listener.exitRow_format(self)




    def row_format(self):

        localctx = AthenaParser.Row_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_row_format)
        self._la = 0 # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(AthenaParser.DELIMITED)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1020
                    self.table_row_format_field_identifier()


                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1023
                    self.table_row_format_coll_items_identifier()


                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1026
                    self.table_row_format_map_keys_identifier()


                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1029
                    self.table_row_format_lines_identifier()


                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 1032
                    self.table_row_null_format()


                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(AthenaParser.SERDE)
                self.state = 1036
                self.string()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 1037
                    self.match(AthenaParser.WITH)
                    self.state = 1038
                    self.match(AthenaParser.SERDEPROPERTIES)
                    self.state = 1039
                    self.match(AthenaParser.LP)
                    self.state = 1040
                    self.property_list()
                    self.state = 1041
                    self.match(AthenaParser.RP)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_row_format_field_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELDS(self):
            return self.getToken(AthenaParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(AthenaParser.TERMINATED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.BY)
            else:
                return self.getToken(AthenaParser.BY, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.StringContext)
            else:
                return self.getTypedRuleContext(AthenaParser.StringContext,i)


        def ESCAPED(self):
            return self.getToken(AthenaParser.ESCAPED, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_table_row_format_field_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_row_format_field_identifier" ):
                listener.enterTable_row_format_field_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_row_format_field_identifier" ):
                listener.exitTable_row_format_field_identifier(self)




    def table_row_format_field_identifier(self):

        localctx = AthenaParser.Table_row_format_field_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_table_row_format_field_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(AthenaParser.FIELDS)
            self.state = 1048
            self.match(AthenaParser.TERMINATED)
            self.state = 1049
            self.match(AthenaParser.BY)
            self.state = 1050
            self.string()
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 1051
                self.match(AthenaParser.ESCAPED)
                self.state = 1052
                self.match(AthenaParser.BY)
                self.state = 1053
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_row_format_coll_items_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLECTION(self):
            return self.getToken(AthenaParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(AthenaParser.ITEMS, 0)

        def TERMINATED(self):
            return self.getToken(AthenaParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(AthenaParser.BY, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_table_row_format_coll_items_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_row_format_coll_items_identifier" ):
                listener.enterTable_row_format_coll_items_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_row_format_coll_items_identifier" ):
                listener.exitTable_row_format_coll_items_identifier(self)




    def table_row_format_coll_items_identifier(self):

        localctx = AthenaParser.Table_row_format_coll_items_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_table_row_format_coll_items_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(AthenaParser.COLLECTION)
            self.state = 1057
            self.match(AthenaParser.ITEMS)
            self.state = 1058
            self.match(AthenaParser.TERMINATED)
            self.state = 1059
            self.match(AthenaParser.BY)
            self.state = 1060
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_row_format_map_keys_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(AthenaParser.MAP, 0)

        def KEYS(self):
            return self.getToken(AthenaParser.KEYS, 0)

        def TERMINATED(self):
            return self.getToken(AthenaParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(AthenaParser.BY, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_table_row_format_map_keys_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_row_format_map_keys_identifier" ):
                listener.enterTable_row_format_map_keys_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_row_format_map_keys_identifier" ):
                listener.exitTable_row_format_map_keys_identifier(self)




    def table_row_format_map_keys_identifier(self):

        localctx = AthenaParser.Table_row_format_map_keys_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_table_row_format_map_keys_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(AthenaParser.MAP)
            self.state = 1063
            self.match(AthenaParser.KEYS)
            self.state = 1064
            self.match(AthenaParser.TERMINATED)
            self.state = 1065
            self.match(AthenaParser.BY)
            self.state = 1066
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_row_format_lines_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES(self):
            return self.getToken(AthenaParser.LINES, 0)

        def TERMINATED(self):
            return self.getToken(AthenaParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(AthenaParser.BY, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_table_row_format_lines_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_row_format_lines_identifier" ):
                listener.enterTable_row_format_lines_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_row_format_lines_identifier" ):
                listener.exitTable_row_format_lines_identifier(self)




    def table_row_format_lines_identifier(self):

        localctx = AthenaParser.Table_row_format_lines_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_table_row_format_lines_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(AthenaParser.LINES)
            self.state = 1069
            self.match(AthenaParser.TERMINATED)
            self.state = 1070
            self.match(AthenaParser.BY)
            self.state = 1071
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_row_null_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(AthenaParser.NULL_, 0)

        def DEFINED(self):
            return self.getToken(AthenaParser.DEFINED, 0)

        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_table_row_null_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_row_null_format" ):
                listener.enterTable_row_null_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_row_null_format" ):
                listener.exitTable_row_null_format(self)




    def table_row_null_format(self):

        localctx = AthenaParser.Table_row_null_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_table_row_null_format)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(AthenaParser.NULL_)
            self.state = 1074
            self.match(AthenaParser.DEFINED)
            self.state = 1075
            self.match(AthenaParser.AS)
            self.state = 1076
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCEFILE(self):
            return self.getToken(AthenaParser.SEQUENCEFILE, 0)

        def TEXTFILE(self):
            return self.getToken(AthenaParser.TEXTFILE, 0)

        def RCFILE(self):
            return self.getToken(AthenaParser.RCFILE, 0)

        def ORC(self):
            return self.getToken(AthenaParser.ORC, 0)

        def PARQUET(self):
            return self.getToken(AthenaParser.PARQUET, 0)

        def AVRO(self):
            return self.getToken(AthenaParser.AVRO, 0)

        def ION(self):
            return self.getToken(AthenaParser.ION, 0)

        def INPUTFORMAT(self):
            return self.getToken(AthenaParser.INPUTFORMAT, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.StringContext)
            else:
                return self.getTypedRuleContext(AthenaParser.StringContext,i)


        def OUTPUTFORMAT(self):
            return self.getToken(AthenaParser.OUTPUTFORMAT, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_format" ):
                listener.enterFile_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_format" ):
                listener.exitFile_format(self)




    def file_format(self):

        localctx = AthenaParser.File_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_file_format)
        try:
            self.state = 1090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.match(AthenaParser.SEQUENCEFILE)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(AthenaParser.TEXTFILE)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.match(AthenaParser.RCFILE)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.match(AthenaParser.ORC)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1082
                self.match(AthenaParser.PARQUET)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1083
                self.match(AthenaParser.AVRO)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1084
                self.match(AthenaParser.ION)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1085
                self.match(AthenaParser.INPUTFORMAT)
                self.state = 1086
                self.string()
                self.state = 1087
                self.match(AthenaParser.OUTPUTFORMAT)
                self.state = 1088
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_bucketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_num_buckets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_buckets" ):
                listener.enterNum_buckets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_buckets" ):
                listener.exitNum_buckets(self)




    def num_buckets(self):

        localctx = AthenaParser.Num_bucketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_num_buckets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.int_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_def_with_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_name(self):
            return self.getTypedRuleContext(AthenaParser.Col_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(AthenaParser.Data_typeContext,0)


        def COMMENT(self):
            return self.getToken(AthenaParser.COMMENT, 0)

        def col_comment(self):
            return self.getTypedRuleContext(AthenaParser.Col_commentContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_col_def_with_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_def_with_comment" ):
                listener.enterCol_def_with_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_def_with_comment" ):
                listener.exitCol_def_with_comment(self)




    def col_def_with_comment(self):

        localctx = AthenaParser.Col_def_with_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_col_def_with_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.col_name()
            self.state = 1095
            self.data_type()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1096
                self.match(AthenaParser.COMMENT)
                self.state = 1097
                self.col_comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_col_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_comment" ):
                listener.enterCol_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_comment" ):
                listener.exitCol_comment(self)




    def col_comment(self):

        localctx = AthenaParser.Col_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_col_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_asContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(AthenaParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(AthenaParser.QueryContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.WITH)
            else:
                return self.getToken(AthenaParser.WITH, i)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def prop_exp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Prop_expContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Prop_expContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def DATA(self):
            return self.getToken(AthenaParser.DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def NO(self):
            return self.getToken(AthenaParser.NO, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_create_table_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_as" ):
                listener.enterCreate_table_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_as" ):
                listener.exitCreate_table_as(self)




    def create_table_as(self):

        localctx = AthenaParser.Create_table_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_create_table_as)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(AthenaParser.CREATE)
            self.state = 1103
            self.match(AthenaParser.TABLE)
            self.state = 1104
            self.table_name()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 1105
                self.match(AthenaParser.WITH)
                self.state = 1106
                self.match(AthenaParser.LP)
                self.state = 1107
                self.prop_exp()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 1108
                    self.match(AthenaParser.COMMA)
                    self.state = 1109
                    self.prop_exp()
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1115
                self.match(AthenaParser.RP)


            self.state = 1119
            self.match(AthenaParser.AS)
            self.state = 1120
            self.query()
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 1121
                self.match(AthenaParser.WITH)
                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1122
                    self.match(AthenaParser.NO)


                self.state = 1125
                self.match(AthenaParser.DATA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_property_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_name" ):
                listener.enterProperty_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_name" ):
                listener.exitProperty_name(self)




    def property_name(self):

        localctx = AthenaParser.Property_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_property_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prop_expContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_name(self):
            return self.getTypedRuleContext(AthenaParser.Property_nameContext,0)


        def EQ(self):
            return self.getToken(AthenaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(AthenaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_prop_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProp_exp" ):
                listener.enterProp_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProp_exp" ):
                listener.exitProp_exp(self)




    def prop_exp(self):

        localctx = AthenaParser.Prop_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_prop_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.property_name()
            self.state = 1131
            self.match(AthenaParser.EQ)
            self.state = 1132
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(AthenaParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(AthenaParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(AthenaParser.View_nameContext,0)


        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(AthenaParser.QueryContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(AthenaParser.Or_replaceContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = AthenaParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(AthenaParser.CREATE)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1135
                self.or_replace()


            self.state = 1138
            self.match(AthenaParser.VIEW)
            self.state = 1139
            self.view_name()
            self.state = 1140
            self.match(AthenaParser.AS)
            self.state = 1141
            self.query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(AthenaParser.DESCRIBE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def db_name(self):
            return self.getTypedRuleContext(AthenaParser.Db_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def PARTITION(self):
            return self.getToken(AthenaParser.PARTITION, 0)

        def partition_spec(self):
            return self.getTypedRuleContext(AthenaParser.Partition_specContext,0)


        def EXTENDED(self):
            return self.getToken(AthenaParser.EXTENDED, 0)

        def FORMATTED(self):
            return self.getToken(AthenaParser.FORMATTED, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_describe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe" ):
                listener.enterDescribe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe" ):
                listener.exitDescribe(self)




    def describe(self):

        localctx = AthenaParser.DescribeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_describe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(AthenaParser.DESCRIBE)
            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50 or _la==57:
                self.state = 1144
                _la = self._input.LA(1)
                if not(_la==50 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1147
                self.db_name()
                self.state = 1148
                self.match(AthenaParser.DOT)


            self.state = 1152
            self.table_name()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1153
                self.match(AthenaParser.PARTITION)
                self.state = 1154
                self.partition_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_name" ):
                listener.enterField_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_name" ):
                listener.exitField_name(self)




    def field_name(self):

        localctx = AthenaParser.Field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(AthenaParser.DESCRIBE, 0)

        def view_name(self):
            return self.getTypedRuleContext(AthenaParser.View_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_describe_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_view" ):
                listener.enterDescribe_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_view" ):
                listener.exitDescribe_view(self)




    def describe_view(self):

        localctx = AthenaParser.Describe_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_describe_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(AthenaParser.DESCRIBE)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==167 or _la==169:
                self.state = 1160
                self.view_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(AthenaParser.DROP, 0)

        def db_schema(self):
            return self.getTypedRuleContext(AthenaParser.Db_schemaContext,0)


        def database_name(self):
            return self.getTypedRuleContext(AthenaParser.Database_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_existsContext,0)


        def RESTRICT(self):
            return self.getToken(AthenaParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(AthenaParser.CASCADE, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_drop_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database" ):
                listener.enterDrop_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database" ):
                listener.exitDrop_database(self)




    def drop_database(self):

        localctx = AthenaParser.Drop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_drop_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(AthenaParser.DROP)
            self.state = 1164
            self.db_schema()
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1165
                self.if_exists()


            self.state = 1168
            self.database_name()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==106:
                self.state = 1169
                _la = self._input.LA(1)
                if not(_la==18 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(AthenaParser.DROP, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_existsContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = AthenaParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(AthenaParser.DROP)
            self.state = 1173
            self.match(AthenaParser.TABLE)
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1174
                self.if_exists()


            self.state = 1177
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(AthenaParser.DROP, 0)

        def VIEW(self):
            return self.getToken(AthenaParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(AthenaParser.View_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(AthenaParser.If_existsContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)




    def drop_view(self):

        localctx = AthenaParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(AthenaParser.DROP)
            self.state = 1180
            self.match(AthenaParser.VIEW)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1181
                self.if_exists()


            self.state = 1184
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MsckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MSCK(self):
            return self.getToken(AthenaParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(AthenaParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_msck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMsck" ):
                listener.enterMsck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMsck" ):
                listener.exitMsck(self)




    def msck(self):

        localctx = AthenaParser.MsckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_msck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.match(AthenaParser.MSCK)
            self.state = 1187
            self.match(AthenaParser.REPAIR)
            self.state = 1188
            self.match(AthenaParser.TABLE)
            self.state = 1189
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def COLUMNS(self):
            return self.getToken(AthenaParser.COLUMNS, 0)

        def from_in(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.From_inContext)
            else:
                return self.getTypedRuleContext(AthenaParser.From_inContext,i)


        def database_name(self):
            return self.getTypedRuleContext(AthenaParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_show_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_columns" ):
                listener.enterShow_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_columns" ):
                listener.exitShow_columns(self)




    def show_columns(self):

        localctx = AthenaParser.Show_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_show_columns)
        self._la = 0 # Token type
        try:
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                self.match(AthenaParser.SHOW)
                self.state = 1192
                self.match(AthenaParser.COLUMNS)
                self.state = 1193
                self.from_in()
                self.state = 1194
                self.database_name()
                self.state = 1195
                self.match(AthenaParser.DOT)
                self.state = 1196
                self.table_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.match(AthenaParser.SHOW)
                self.state = 1199
                self.match(AthenaParser.COLUMNS)
                self.state = 1200
                self.from_in()
                self.state = 1201
                self.table_name()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58 or _la==63:
                    self.state = 1202
                    self.from_in()
                    self.state = 1203
                    self.database_name()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(AthenaParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(AthenaParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def db_name(self):
            return self.getTypedRuleContext(AthenaParser.Db_nameContext,0)


        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_show_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_create_table" ):
                listener.enterShow_create_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_create_table" ):
                listener.exitShow_create_table(self)




    def show_create_table(self):

        localctx = AthenaParser.Show_create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_show_create_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.match(AthenaParser.SHOW)
            self.state = 1210
            self.match(AthenaParser.CREATE)
            self.state = 1211
            self.match(AthenaParser.TABLE)
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1212
                self.db_name()
                self.state = 1213
                self.match(AthenaParser.DOT)


            self.state = 1217
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(AthenaParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(AthenaParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(AthenaParser.View_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_show_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_create_view" ):
                listener.enterShow_create_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_create_view" ):
                listener.exitShow_create_view(self)




    def show_create_view(self):

        localctx = AthenaParser.Show_create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_show_create_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(AthenaParser.SHOW)
            self.state = 1220
            self.match(AthenaParser.CREATE)
            self.state = 1221
            self.match(AthenaParser.VIEW)
            self.state = 1222
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_databasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(AthenaParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(AthenaParser.SCHEMAS, 0)

        def LIKE(self):
            return self.getToken(AthenaParser.LIKE, 0)

        def reg_ex(self):
            return self.getTypedRuleContext(AthenaParser.Reg_exContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_show_databases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_databases" ):
                listener.enterShow_databases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_databases" ):
                listener.exitShow_databases(self)




    def show_databases(self):

        localctx = AthenaParser.Show_databasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_show_databases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(AthenaParser.SHOW)
            self.state = 1225
            _la = self._input.LA(1)
            if not(_la==29 or _la==111):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1226
                self.match(AthenaParser.LIKE)
                self.state = 1227
                self.reg_ex()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_partitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def PARTITIONS(self):
            return self.getToken(AthenaParser.PARTITIONS, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_show_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_partitions" ):
                listener.enterShow_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_partitions" ):
                listener.exitShow_partitions(self)




    def show_partitions(self):

        localctx = AthenaParser.Show_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_show_partitions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(AthenaParser.SHOW)
            self.state = 1231
            self.match(AthenaParser.PARTITIONS)
            self.state = 1232
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(AthenaParser.TABLES, 0)

        def IN(self):
            return self.getToken(AthenaParser.IN, 0)

        def database_name(self):
            return self.getTypedRuleContext(AthenaParser.Database_nameContext,0)


        def reg_ex(self):
            return self.getTypedRuleContext(AthenaParser.Reg_exContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_show_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_tables" ):
                listener.enterShow_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_tables" ):
                listener.exitShow_tables(self)




    def show_tables(self):

        localctx = AthenaParser.Show_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_show_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(AthenaParser.SHOW)
            self.state = 1235
            self.match(AthenaParser.TABLES)
            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1236
                self.match(AthenaParser.IN)
                self.state = 1237
                self.database_name()


            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==168:
                self.state = 1240
                self.reg_ex()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_tblpropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def TBLPROPERTIES(self):
            return self.getToken(AthenaParser.TBLPROPERTIES, 0)

        def table_name(self):
            return self.getTypedRuleContext(AthenaParser.Table_nameContext,0)


        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_show_tblproperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_tblproperties" ):
                listener.enterShow_tblproperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_tblproperties" ):
                listener.exitShow_tblproperties(self)




    def show_tblproperties(self):

        localctx = AthenaParser.Show_tblpropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_show_tblproperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(AthenaParser.SHOW)
            self.state = 1244
            self.match(AthenaParser.TBLPROPERTIES)
            self.state = 1245
            self.table_name()
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1246
                self.match(AthenaParser.LP)
                self.state = 1247
                self.string()
                self.state = 1248
                self.match(AthenaParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_viewsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(AthenaParser.SHOW, 0)

        def VIEWS(self):
            return self.getToken(AthenaParser.VIEWS, 0)

        def IN(self):
            return self.getToken(AthenaParser.IN, 0)

        def database_name(self):
            return self.getTypedRuleContext(AthenaParser.Database_nameContext,0)


        def LIKE(self):
            return self.getToken(AthenaParser.LIKE, 0)

        def reg_ex(self):
            return self.getTypedRuleContext(AthenaParser.Reg_exContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_show_views

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_views" ):
                listener.enterShow_views(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_views" ):
                listener.exitShow_views(self)




    def show_views(self):

        localctx = AthenaParser.Show_viewsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_show_views)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(AthenaParser.SHOW)
            self.state = 1253
            self.match(AthenaParser.VIEWS)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1254
                self.match(AthenaParser.IN)
                self.state = 1255
                self.database_name()


            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1258
                self.match(AthenaParser.LIKE)
                self.state = 1259
                self.reg_ex()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select(self):
            return self.getTypedRuleContext(AthenaParser.SelectContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = AthenaParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.select()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class True_falseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(AthenaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(AthenaParser.FALSE, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_true_false

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrue_false" ):
                listener.enterTrue_false(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrue_false" ):
                listener.exitTrue_false(self)




    def true_false(self):

        localctx = AthenaParser.True_falseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_true_false)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            _la = self._input.LA(1)
            if not(_la==52 or _la==133):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def boolean_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Boolean_expressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Boolean_expressionContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def pred(self):
            return self.getTypedRuleContext(AthenaParser.PredContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.NOT)
            else:
                return self.getToken(AthenaParser.NOT, i)

        def AND(self):
            return self.getToken(AthenaParser.AND, 0)

        def OR(self):
            return self.getToken(AthenaParser.OR, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_boolean_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_expression" ):
                listener.enterBoolean_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_expression" ):
                listener.exitBoolean_expression(self)



    def boolean_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AthenaParser.Boolean_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_boolean_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1267
                    self.match(AthenaParser.NOT) 
                self.state = 1272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1273
                self.match(AthenaParser.LP)
                self.state = 1274
                self.boolean_expression(0)
                self.state = 1275
                self.match(AthenaParser.RP)
                pass

            elif la_ == 2:
                self.state = 1277
                self.pred()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1286
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                    if la_ == 1:
                        localctx = AthenaParser.Boolean_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolean_expression)
                        self.state = 1280
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1281
                        self.match(AthenaParser.AND)
                        self.state = 1282
                        self.boolean_expression(4)
                        pass

                    elif la_ == 2:
                        localctx = AthenaParser.Boolean_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolean_expression)
                        self.state = 1283
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1284
                        self.match(AthenaParser.OR)
                        self.state = 1285
                        self.boolean_expression(3)
                        pass

             
                self.state = 1290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(AthenaParser.Comparison_operatorContext,0)


        def IS(self):
            return self.getToken(AthenaParser.IS, 0)

        def NULL_(self):
            return self.getToken(AthenaParser.NULL_, 0)

        def NOT(self):
            return self.getToken(AthenaParser.NOT, 0)

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def LIKE(self):
            return self.getToken(AthenaParser.LIKE, 0)

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def BETWEEN(self):
            return self.getToken(AthenaParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(AthenaParser.AND, 0)

        def IN(self):
            return self.getToken(AthenaParser.IN, 0)

        def table_subquery(self):
            return self.getTypedRuleContext(AthenaParser.Table_subqueryContext,0)


        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(AthenaParser.Expression_list_Context,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def EXISTS(self):
            return self.getToken(AthenaParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(AthenaParser.ALL, 0)

        def ANY(self):
            return self.getToken(AthenaParser.ANY, 0)

        def SOME(self):
            return self.getToken(AthenaParser.SOME, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_pred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPred" ):
                listener.enterPred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPred" ):
                listener.exitPred(self)




    def pred(self):

        localctx = AthenaParser.PredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_pred)
        self._la = 0 # Token type
        try:
            self.state = 1344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.expression(0)
                self.state = 1292
                self.comparison_operator()
                self.state = 1293
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.expression(0)
                self.state = 1296
                self.match(AthenaParser.IS)
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1297
                    self.match(AthenaParser.NOT)


                self.state = 1300
                self.match(AthenaParser.NULL_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1302
                self.id_()
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1303
                    self.match(AthenaParser.NOT)


                self.state = 1306
                self.match(AthenaParser.LIKE)
                self.state = 1307
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1309
                self.expression(0)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1310
                    self.match(AthenaParser.NOT)


                self.state = 1313
                self.match(AthenaParser.BETWEEN)
                self.state = 1314
                self.expression(0)
                self.state = 1315
                self.match(AthenaParser.AND)
                self.state = 1316
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1318
                self.expression(0)
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1319
                    self.match(AthenaParser.NOT)


                self.state = 1322
                self.match(AthenaParser.IN)
                self.state = 1323
                self.table_subquery()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1325
                self.expression(0)
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1326
                    self.match(AthenaParser.NOT)


                self.state = 1329
                self.match(AthenaParser.IN)
                self.state = 1330
                self.match(AthenaParser.LP)
                self.state = 1331
                self.expression_list_()
                self.state = 1332
                self.match(AthenaParser.RP)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1334
                    self.match(AthenaParser.NOT)


                self.state = 1337
                self.match(AthenaParser.EXISTS)
                self.state = 1338
                self.table_subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1339
                self.expression(0)
                self.state = 1340
                self.comparison_operator()
                self.state = 1341
                _la = self._input.LA(1)
                if not(_la==2 or _la==6 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                self.table_subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def select_statement(self):
            return self.getTypedRuleContext(AthenaParser.Select_statementContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_table_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_subquery" ):
                listener.enterTable_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_subquery" ):
                listener.exitTable_subquery(self)




    def table_subquery(self):

        localctx = AthenaParser.Table_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_table_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(AthenaParser.LP)
            self.state = 1347
            self.select_statement()
            self.state = 1348
            self.match(AthenaParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(AthenaParser.LT, 0)

        def EQ(self):
            return self.getToken(AthenaParser.EQ, 0)

        def GT(self):
            return self.getToken(AthenaParser.GT, 0)

        def LE(self):
            return self.getToken(AthenaParser.LE, 0)

        def GE(self):
            return self.getToken(AthenaParser.GE, 0)

        def NE(self):
            return self.getToken(AthenaParser.NE, 0)

        def BOX(self):
            return self.getToken(AthenaParser.BOX, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = AthenaParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_comparison_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            _la = self._input.LA(1)
            if not(((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 4033) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def primitive_expression(self):
            return self.getTypedRuleContext(AthenaParser.Primitive_expressionContext,0)


        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def table_subquery(self):
            return self.getTypedRuleContext(AthenaParser.Table_subqueryContext,0)


        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def expression_list_(self):
            return self.getTypedRuleContext(AthenaParser.Expression_list_Context,0)


        def case_expression(self):
            return self.getTypedRuleContext(AthenaParser.Case_expressionContext,0)


        def when_expression(self):
            return self.getTypedRuleContext(AthenaParser.When_expressionContext,0)


        def PLUS(self):
            return self.getToken(AthenaParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(AthenaParser.MINUS, 0)

        def CAST(self):
            return self.getToken(AthenaParser.CAST, 0)

        def AS(self):
            return self.getToken(AthenaParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(AthenaParser.Data_typeContext,0)


        def STAR(self):
            return self.getToken(AthenaParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(AthenaParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(AthenaParser.MODULE, 0)

        def DOT(self):
            return self.getToken(AthenaParser.DOT, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AthenaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 192
        self.enterRecursionRule(localctx, 192, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1353
                self.primitive_expression()
                pass

            elif la_ == 2:
                self.state = 1354
                self.match(AthenaParser.LP)
                self.state = 1355
                self.expression(0)
                self.state = 1356
                self.match(AthenaParser.RP)
                pass

            elif la_ == 3:
                self.state = 1358
                self.table_subquery()
                pass

            elif la_ == 4:
                self.state = 1359
                self.id_()
                self.state = 1360
                self.match(AthenaParser.LP)
                self.state = 1361
                self.expression_list_()
                self.state = 1362
                self.match(AthenaParser.RP)
                pass

            elif la_ == 5:
                self.state = 1364
                self.case_expression()
                pass

            elif la_ == 6:
                self.state = 1365
                self.when_expression()
                pass

            elif la_ == 7:
                self.state = 1366
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==163 or _la==164):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1367
                self.expression(5)
                pass

            elif la_ == 8:
                self.state = 1368
                self.match(AthenaParser.CAST)
                self.state = 1369
                self.match(AthenaParser.LP)
                self.state = 1370
                self.expression(0)
                self.state = 1371
                self.match(AthenaParser.AS)
                self.state = 1372
                self.data_type()
                self.state = 1373
                self.match(AthenaParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1386
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        localctx = AthenaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1377
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1378
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 25) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1379
                        self.expression(5)
                        pass

                    elif la_ == 2:
                        localctx = AthenaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1380
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1381
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==163 or _la==164):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1382
                        self.expression(4)
                        pass

                    elif la_ == 3:
                        localctx = AthenaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1383
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1384
                        self.match(AthenaParser.DOT)
                        self.state = 1385
                        self.expression(3)
                        pass

             
                self.state = 1390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Case_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(AthenaParser.CASE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def END(self):
            return self.getToken(AthenaParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.WHEN)
            else:
                return self.getToken(AthenaParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.THEN)
            else:
                return self.getToken(AthenaParser.THEN, i)

        def ELSE(self):
            return self.getToken(AthenaParser.ELSE, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_case_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)




    def case_expression(self):

        localctx = AthenaParser.Case_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_case_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(AthenaParser.CASE)
            self.state = 1392
            self.expression(0)
            self.state = 1398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1393
                self.match(AthenaParser.WHEN)
                self.state = 1394
                self.expression(0)
                self.state = 1395
                self.match(AthenaParser.THEN)
                self.state = 1396
                self.expression(0)
                self.state = 1400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==145):
                    break

            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 1402
                self.match(AthenaParser.ELSE)
                self.state = 1403
                self.expression(0)


            self.state = 1406
            self.match(AthenaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(AthenaParser.CASE, 0)

        def END(self):
            return self.getToken(AthenaParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.WHEN)
            else:
                return self.getToken(AthenaParser.WHEN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AthenaParser.ExpressionContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.THEN)
            else:
                return self.getToken(AthenaParser.THEN, i)

        def ELSE(self):
            return self.getToken(AthenaParser.ELSE, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_when_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_expression" ):
                listener.enterWhen_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_expression" ):
                listener.exitWhen_expression(self)




    def when_expression(self):

        localctx = AthenaParser.When_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_when_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(AthenaParser.CASE)
            self.state = 1414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1409
                self.match(AthenaParser.WHEN)
                self.state = 1410
                self.expression(0)
                self.state = 1411
                self.match(AthenaParser.THEN)
                self.state = 1412
                self.expression(0)
                self.state = 1416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==145):
                    break

            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 1418
                self.match(AthenaParser.ELSE)
                self.state = 1419
                self.expression(0)


            self.state = 1422
            self.match(AthenaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(AthenaParser.LiteralContext,0)


        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_primitive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)




    def primitive_expression(self):

        localctx = AthenaParser.Primitive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_primitive_expression)
        try:
            self.state = 1426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52, 88, 133, 168, 170, 171, 172]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.literal()
                pass
            elif token in [167, 169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1425
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(AthenaParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def true_false(self):
            return self.getTypedRuleContext(AthenaParser.True_falseContext,0)


        def NULL_(self):
            return self.getToken(AthenaParser.NULL_, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = AthenaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_literal)
        try:
            self.state = 1432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170, 171, 172]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                self.number()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1429
                self.string()
                pass
            elif token in [52, 133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1430
                self.true_false()
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1431
                self.match(AthenaParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGRAL_LITERAL(self):
            return self.getToken(AthenaParser.INTEGRAL_LITERAL, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_int_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_number" ):
                listener.enterInt_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_number" ):
                listener.exitInt_number(self)




    def int_number(self):

        localctx = AthenaParser.Int_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_int_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(AthenaParser.INTEGRAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def REAL_LITERAL(self):
            return self.getToken(AthenaParser.REAL_LITERAL, 0)

        def FLOAT_LITERAL(self):
            return self.getToken(AthenaParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = AthenaParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_number)
        try:
            self.state = 1439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.int_number()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.match(AthenaParser.REAL_LITERAL)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1438
                self.match(AthenaParser.FLOAT_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_type(self):
            return self.getTypedRuleContext(AthenaParser.Primitive_typeContext,0)


        def ARRAY(self):
            return self.getToken(AthenaParser.ARRAY, 0)

        def LT(self):
            return self.getToken(AthenaParser.LT, 0)

        def data_type(self):
            return self.getTypedRuleContext(AthenaParser.Data_typeContext,0)


        def GT(self):
            return self.getToken(AthenaParser.GT, 0)

        def MAP(self):
            return self.getToken(AthenaParser.MAP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AthenaParser.COMMA)
            else:
                return self.getToken(AthenaParser.COMMA, i)

        def STRUCT(self):
            return self.getToken(AthenaParser.STRUCT, 0)

        def struct_col_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AthenaParser.Struct_col_defContext)
            else:
                return self.getTypedRuleContext(AthenaParser.Struct_col_defContext,i)


        def getRuleIndex(self):
            return AthenaParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = AthenaParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 14, 15, 21, 30, 33, 41, 55, 66, 67, 118, 121, 130, 131, 142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self.primitive_type()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.match(AthenaParser.ARRAY)
                self.state = 1443
                self.match(AthenaParser.LT)
                self.state = 1444
                self.data_type()
                self.state = 1445
                self.match(AthenaParser.GT)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1447
                self.match(AthenaParser.MAP)
                self.state = 1448
                self.match(AthenaParser.LT)
                self.state = 1449
                self.primitive_type()
                self.state = 1450
                self.match(AthenaParser.COMMA)
                self.state = 1451
                self.data_type()
                self.state = 1452
                self.match(AthenaParser.GT)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1454
                self.match(AthenaParser.STRUCT)
                self.state = 1455
                self.match(AthenaParser.LT)
                self.state = 1456
                self.struct_col_def()
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 1457
                    self.match(AthenaParser.COMMA)
                    self.state = 1458
                    self.struct_col_def()
                    self.state = 1463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1464
                self.match(AthenaParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(AthenaParser.BOOLEAN, 0)

        def TINYINT(self):
            return self.getToken(AthenaParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(AthenaParser.SMALLINT, 0)

        def INT(self):
            return self.getToken(AthenaParser.INT, 0)

        def INTEGER(self):
            return self.getToken(AthenaParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(AthenaParser.BIGINT, 0)

        def DOUBLE(self):
            return self.getToken(AthenaParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(AthenaParser.FLOAT, 0)

        def DECIMAL(self):
            return self.getToken(AthenaParser.DECIMAL, 0)

        def LP(self):
            return self.getToken(AthenaParser.LP, 0)

        def precision(self):
            return self.getTypedRuleContext(AthenaParser.PrecisionContext,0)


        def COMMA(self):
            return self.getToken(AthenaParser.COMMA, 0)

        def scale(self):
            return self.getTypedRuleContext(AthenaParser.ScaleContext,0)


        def RP(self):
            return self.getToken(AthenaParser.RP, 0)

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def CHAR(self):
            return self.getToken(AthenaParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(AthenaParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(AthenaParser.STRING, 0)

        def BINARY(self):
            return self.getToken(AthenaParser.BINARY, 0)

        def DATE(self):
            return self.getToken(AthenaParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(AthenaParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_primitive_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_type" ):
                listener.enterPrimitive_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_type" ):
                listener.exitPrimitive_type(self)




    def primitive_type(self):

        localctx = AthenaParser.Primitive_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_primitive_type)
        self._la = 0 # Token type
        try:
            self.state = 1492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.match(AthenaParser.BOOLEAN)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1469
                self.match(AthenaParser.TINYINT)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1470
                self.match(AthenaParser.SMALLINT)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1471
                self.match(AthenaParser.INT)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1472
                self.match(AthenaParser.INTEGER)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1473
                self.match(AthenaParser.BIGINT)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1474
                self.match(AthenaParser.DOUBLE)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1475
                self.match(AthenaParser.FLOAT)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1476
                self.match(AthenaParser.DECIMAL)
                self.state = 1477
                self.match(AthenaParser.LP)
                self.state = 1478
                self.precision()
                self.state = 1479
                self.match(AthenaParser.COMMA)
                self.state = 1480
                self.scale()
                self.state = 1481
                self.match(AthenaParser.RP)
                pass
            elif token in [21, 142]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1483
                _la = self._input.LA(1)
                if not(_la==21 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1484
                self.match(AthenaParser.LP)
                self.state = 1485
                self.int_number()
                self.state = 1486
                self.match(AthenaParser.RP)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1488
                self.match(AthenaParser.STRING)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1489
                self.match(AthenaParser.BINARY)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1490
                self.match(AthenaParser.DATE)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1491
                self.match(AthenaParser.TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision" ):
                listener.enterPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision" ):
                listener.exitPrecision(self)




    def precision(self):

        localctx = AthenaParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.int_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(AthenaParser.Int_numberContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)




    def scale(self):

        localctx = AthenaParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self.int_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_col_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_name(self):
            return self.getTypedRuleContext(AthenaParser.Col_nameContext,0)


        def COLON(self):
            return self.getToken(AthenaParser.COLON, 0)

        def data_type(self):
            return self.getTypedRuleContext(AthenaParser.Data_typeContext,0)


        def COMMENT(self):
            return self.getToken(AthenaParser.COMMENT, 0)

        def col_comment(self):
            return self.getTypedRuleContext(AthenaParser.Col_commentContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_struct_col_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_col_def" ):
                listener.enterStruct_col_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_col_def" ):
                listener.exitStruct_col_def(self)




    def struct_col_def(self):

        localctx = AthenaParser.Struct_col_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_struct_col_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.col_name()
            self.state = 1499
            self.match(AthenaParser.COLON)
            self.state = 1500
            self.data_type()
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1501
                self.match(AthenaParser.COMMENT)
                self.state = 1502
                self.col_comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_col_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_name" ):
                listener.enterCol_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_name" ):
                listener.exitCol_name(self)




    def col_name(self):

        localctx = AthenaParser.Col_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_col_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_db_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_name" ):
                listener.enterDb_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_name" ):
                listener.exitDb_name(self)




    def db_name(self):

        localctx = AthenaParser.Db_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_db_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = AthenaParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = AthenaParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_statement_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = AthenaParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = AthenaParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destination_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_destination_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestination_table" ):
                listener.enterDestination_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestination_table" ):
                listener.exitDestination_table(self)




    def destination_table(self):

        localctx = AthenaParser.Destination_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_destination_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ_STRING_LITERAL(self):
            return self.getToken(AthenaParser.SQ_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = AthenaParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.match(AthenaParser.SQ_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reg_exContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(AthenaParser.StringContext,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_reg_ex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReg_ex" ):
                listener.enterReg_ex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReg_ex" ):
                listener.exitReg_ex(self)




    def reg_ex(self):

        localctx = AthenaParser.Reg_exContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_reg_ex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = AthenaParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_target_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_alias" ):
                listener.enterTarget_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_alias" ):
                listener.exitTarget_alias(self)




    def target_alias(self):

        localctx = AthenaParser.Target_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_target_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(AthenaParser.Id_Context,0)


        def getRuleIndex(self):
            return AthenaParser.RULE_source_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_alias" ):
                listener.enterSource_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_alias" ):
                listener.exitSource_alias(self)




    def source_alias(self):

        localctx = AthenaParser.Source_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_source_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(AthenaParser.IDENTIFIER, 0)

        def DQ_STRING_LITERAL(self):
            return self.getToken(AthenaParser.DQ_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)




    def id_(self):

        localctx = AthenaParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_id_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            _la = self._input.LA(1)
            if not(_la==167 or _la==169):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_not_existsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(AthenaParser.IF, 0)

        def NOT(self):
            return self.getToken(AthenaParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(AthenaParser.EXISTS, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_if_not_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_not_exists" ):
                listener.enterIf_not_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_not_exists" ):
                listener.exitIf_not_exists(self)




    def if_not_exists(self):

        localctx = AthenaParser.If_not_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_if_not_exists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(AthenaParser.IF)
            self.state = 1532
            self.match(AthenaParser.NOT)
            self.state = 1533
            self.match(AthenaParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_existsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(AthenaParser.IF, 0)

        def EXISTS(self):
            return self.getToken(AthenaParser.EXISTS, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_if_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_exists" ):
                listener.enterIf_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_exists" ):
                listener.exitIf_exists(self)




    def if_exists(self):

        localctx = AthenaParser.If_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_if_exists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(AthenaParser.IF)
            self.state = 1536
            self.match(AthenaParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_replaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(AthenaParser.OR, 0)

        def REPLACE(self):
            return self.getToken(AthenaParser.REPLACE, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_or_replace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_replace" ):
                listener.enterOr_replace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_replace" ):
                listener.exitOr_replace(self)




    def or_replace(self):

        localctx = AthenaParser.Or_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_or_replace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.match(AthenaParser.OR)
            self.state = 1539
            self.match(AthenaParser.REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(AthenaParser.FROM, 0)

        def IN(self):
            return self.getToken(AthenaParser.IN, 0)

        def getRuleIndex(self):
            return AthenaParser.RULE_from_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_in" ):
                listener.enterFrom_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_in" ):
                listener.exitFrom_in(self)




    def from_in(self):

        localctx = AthenaParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_from_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            _la = self._input.LA(1)
            if not(_la==58 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[92] = self.boolean_expression_sempred
        self._predicates[96] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def boolean_expression_sempred(self, localctx:Boolean_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




