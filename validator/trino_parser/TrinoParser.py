# Generated from sql/trino/TrinoParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,340,3278,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        1,0,5,0,254,8,0,10,0,12,0,257,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,3,1,267,8,1,1,1,3,1,270,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,303,8,8,1,8,1,8,1,8,1,8,1,8,3,8,310,
        8,8,1,8,1,8,3,8,314,8,8,1,8,1,8,3,8,318,8,8,1,8,1,8,1,8,1,8,3,8,
        324,8,8,1,8,1,8,3,8,328,8,8,1,8,1,8,1,8,1,8,1,8,3,8,335,8,8,1,8,
        1,8,1,8,3,8,340,8,8,1,8,1,8,3,8,344,8,8,1,8,1,8,1,8,1,8,3,8,350,
        8,8,1,8,1,8,3,8,354,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,373,8,8,1,8,1,8,1,8,1,8,3,8,379,
        8,8,1,8,1,8,3,8,383,8,8,1,8,1,8,3,8,387,8,8,1,8,1,8,3,8,391,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,399,8,8,1,8,1,8,3,8,403,8,8,1,8,3,8,
        406,8,8,1,8,1,8,1,8,3,8,411,8,8,1,8,1,8,1,8,1,8,3,8,417,8,8,1,8,
        1,8,1,8,1,8,1,8,5,8,424,8,8,10,8,12,8,427,9,8,1,8,1,8,1,8,3,8,432,
        8,8,1,8,1,8,3,8,436,8,8,1,8,1,8,1,8,1,8,3,8,442,8,8,1,8,1,8,1,8,
        1,8,1,8,3,8,449,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,458,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,470,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,479,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,488,8,8,
        1,8,1,8,1,8,1,8,3,8,494,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,505,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,513,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,521,8,8,1,8,1,8,1,8,1,8,1,8,3,8,528,8,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,538,8,8,1,8,1,8,1,8,1,8,1,8,3,8,545,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,553,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,587,8,8,10,8,12,8,590,9,
        8,3,8,592,8,8,1,8,3,8,595,8,8,1,8,1,8,3,8,599,8,8,1,8,1,8,1,8,1,
        8,3,8,605,8,8,1,8,1,8,1,8,3,8,610,8,8,1,8,1,8,1,8,1,8,1,8,3,8,617,
        8,8,1,8,1,8,1,8,1,8,3,8,623,8,8,1,8,1,8,3,8,627,8,8,1,8,1,8,3,8,
        631,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,639,8,8,1,8,1,8,1,8,1,8,3,8,
        645,8,8,1,8,1,8,3,8,649,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,663,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,671,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,690,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,713,8,8,10,8,12,8,716,9,8,3,
        8,718,8,8,1,8,1,8,1,8,1,8,1,8,3,8,725,8,8,1,8,1,8,1,8,1,8,1,8,3,
        8,732,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,741,8,8,1,8,1,8,3,8,745,
        8,8,1,8,1,8,1,8,1,8,1,8,3,8,752,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,
        760,8,8,10,8,12,8,763,9,8,1,8,1,8,1,8,3,8,768,8,8,1,8,1,8,1,8,3,
        8,773,8,8,1,8,1,8,3,8,777,8,8,1,8,1,8,1,8,1,8,3,8,783,8,8,1,8,1,
        8,1,8,1,8,1,8,5,8,790,8,8,10,8,12,8,793,9,8,1,8,1,8,1,8,3,8,798,
        8,8,1,8,1,8,3,8,802,8,8,1,8,1,8,1,8,1,8,1,8,3,8,809,8,8,1,8,1,8,
        3,8,813,8,8,1,8,1,8,1,8,1,8,5,8,819,8,8,10,8,12,8,822,9,8,1,8,1,
        8,3,8,826,8,8,1,8,1,8,3,8,830,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,838,
        8,8,1,8,1,8,1,8,1,8,5,8,844,8,8,10,8,12,8,847,9,8,1,8,1,8,3,8,851,
        8,8,1,8,1,8,3,8,855,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,865,
        8,8,1,8,1,8,1,8,5,8,870,8,8,10,8,12,8,873,9,8,1,8,1,8,3,8,877,8,
        8,1,8,1,8,3,8,881,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,891,8,
        8,1,8,3,8,894,8,8,1,8,1,8,1,8,1,8,1,8,5,8,901,8,8,10,8,12,8,904,
        9,8,1,8,1,8,3,8,908,8,8,1,8,1,8,1,8,1,8,3,8,914,8,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,938,8,8,1,8,1,8,1,8,1,8,3,8,944,8,8,3,8,946,8,8,
        1,8,1,8,1,8,1,8,3,8,952,8,8,1,8,1,8,1,8,1,8,3,8,958,8,8,3,8,960,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,968,8,8,3,8,970,8,8,1,8,1,8,1,8,
        1,8,3,8,976,8,8,1,8,1,8,1,8,1,8,3,8,982,8,8,3,8,984,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,999,8,8,1,8,1,8,
        1,8,3,8,1004,8,8,1,8,1,8,1,8,1,8,1,8,3,8,1011,8,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,3,8,1021,8,8,1,8,1,8,1,8,1,8,3,8,1027,8,8,3,8,
        1029,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1037,8,8,3,8,1039,8,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,5,8,1062,8,8,10,8,12,8,1065,9,8,3,8,1067,8,8,1,8,1,
        8,3,8,1071,8,8,1,8,1,8,3,8,1075,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1091,8,8,10,8,12,8,1094,9,8,3,8,
        1096,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1105,8,8,10,8,12,8,1108,
        9,8,3,8,1110,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,1126,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1134,8,8,10,8,12,
        8,1137,9,8,1,8,1,8,3,8,1141,8,8,1,8,1,8,1,8,1,8,3,8,1147,8,8,1,8,
        3,8,1150,8,8,1,8,1,8,1,8,1,8,1,8,4,8,1157,8,8,11,8,12,8,1158,3,8,
        1161,8,8,1,9,3,9,1164,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,1172,
        8,10,10,10,12,10,1175,9,10,1,11,3,11,1178,8,11,1,11,1,11,1,12,1,
        12,3,12,1184,8,12,1,12,1,12,1,12,5,12,1189,8,12,10,12,12,12,1192,
        9,12,1,13,1,13,3,13,1196,8,13,1,14,1,14,1,14,1,14,3,14,1202,8,14,
        1,14,1,14,3,14,1206,8,14,1,14,1,14,3,14,1210,8,14,1,15,1,15,1,15,
        1,15,3,15,1216,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,1225,
        8,17,10,17,12,17,1228,9,17,1,18,1,18,1,18,1,18,1,19,1,19,3,19,1236,
        8,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,1244,8,20,10,20,12,20,1247,
        9,20,3,20,1249,8,20,1,20,1,20,1,20,3,20,1254,8,20,3,20,1256,8,20,
        1,20,1,20,1,20,1,20,1,20,3,20,1263,8,20,1,20,1,20,1,20,1,20,3,20,
        1269,8,20,3,20,1271,8,20,1,21,1,21,3,21,1275,8,21,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,23,3,23,1285,8,23,1,23,1,23,1,23,1,23,3,23,
        1291,8,23,1,23,5,23,1294,8,23,10,23,12,23,1297,9,23,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,5,24,1306,8,24,10,24,12,24,1309,9,24,1,24,
        1,24,1,24,1,24,3,24,1315,8,24,1,25,1,25,3,25,1319,8,25,1,25,1,25,
        3,25,1323,8,25,1,26,1,26,3,26,1327,8,26,1,26,1,26,1,26,5,26,1332,
        8,26,10,26,12,26,1335,9,26,1,26,1,26,1,26,1,26,5,26,1341,8,26,10,
        26,12,26,1344,9,26,3,26,1346,8,26,1,26,1,26,3,26,1350,8,26,1,26,
        1,26,1,26,3,26,1355,8,26,1,26,1,26,3,26,1359,8,26,1,26,1,26,1,26,
        1,26,5,26,1365,8,26,10,26,12,26,1368,9,26,3,26,1370,8,26,1,27,3,
        27,1373,8,27,1,27,1,27,1,27,5,27,1378,8,27,10,27,12,27,1381,9,27,
        1,28,1,28,1,28,1,28,1,28,1,28,5,28,1389,8,28,10,28,12,28,1392,9,
        28,3,28,1394,8,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,1402,8,28,10,
        28,12,28,1405,9,28,3,28,1407,8,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,5,28,1416,8,28,10,28,12,28,1419,9,28,1,28,1,28,3,28,1423,8,
        28,1,29,1,29,1,29,1,29,5,29,1429,8,29,10,29,12,29,1432,9,29,3,29,
        1434,8,29,1,29,1,29,3,29,1438,8,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,31,3,31,1447,8,31,1,31,1,31,1,31,1,31,1,31,5,31,1454,8,31,10,31,
        12,31,1457,9,31,3,31,1459,8,31,1,31,1,31,1,31,1,31,1,31,5,31,1466,
        8,31,10,31,12,31,1469,9,31,3,31,1471,8,31,1,31,3,31,1474,8,31,1,
        32,1,32,3,32,1478,8,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,
        34,3,34,1489,8,34,1,34,3,34,1492,8,34,1,34,1,34,1,34,1,34,1,34,3,
        34,1499,8,34,1,34,3,34,1502,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1521,8,
        35,5,35,1523,8,35,10,35,12,35,1526,9,35,1,36,3,36,1529,8,36,1,36,
        1,36,3,36,1533,8,36,3,36,1535,8,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,5,37,1544,8,37,10,37,12,37,1547,9,37,1,37,1,37,3,37,1551,8,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1560,8,38,1,39,1,39,1,
        40,1,40,1,41,1,41,1,41,3,41,1569,8,41,1,41,3,41,1572,8,41,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1585,8,43,10,
        43,12,43,1588,9,43,3,43,1590,8,43,1,43,1,43,1,43,1,43,1,43,5,43,
        1597,8,43,10,43,12,43,1600,9,43,3,43,1602,8,43,1,43,1,43,1,43,1,
        43,5,43,1608,8,43,10,43,12,43,1611,9,43,3,43,1613,8,43,1,43,3,43,
        1616,8,43,1,43,1,43,1,43,3,43,1621,8,43,1,43,3,43,1624,8,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1634,8,43,10,43,12,43,1637,
        9,43,3,43,1639,8,43,1,43,1,43,1,43,1,43,5,43,1645,8,43,10,43,12,
        43,1648,9,43,1,43,1,43,3,43,1652,8,43,1,43,1,43,3,43,1656,8,43,3,
        43,1658,8,43,3,43,1660,8,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,3,45,1675,8,45,3,45,1677,8,45,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1688,8,46,1,47,1,47,1,
        47,1,47,1,47,3,47,1695,8,47,1,47,3,47,1698,8,47,1,47,1,47,1,47,3,
        47,1703,8,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,1711,8,48,10,48,
        12,48,1714,9,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,3,50,1724,
        8,50,1,50,1,50,3,50,1728,8,50,3,50,1730,8,50,1,51,1,51,1,51,1,51,
        5,51,1736,8,51,10,51,12,51,1739,9,51,1,51,1,51,1,52,1,52,3,52,1745,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1756,8,52,
        10,52,12,52,1759,9,52,1,52,1,52,1,52,3,52,1764,8,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1780,
        8,52,1,53,1,53,1,53,1,53,1,53,5,53,1787,8,53,10,53,12,53,1790,9,
        53,3,53,1792,8,53,1,53,1,53,1,53,1,53,5,53,1798,8,53,10,53,12,53,
        1801,9,53,3,53,1803,8,53,1,53,1,53,1,54,1,54,1,54,3,54,1810,8,54,
        1,54,1,54,1,54,3,54,1815,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        5,55,1824,8,55,10,55,12,55,1827,9,55,3,55,1829,8,55,1,55,1,55,3,
        55,1833,8,55,3,55,1835,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1843,
        8,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,1851,8,55,10,55,12,55,1854,
        9,55,1,55,1,55,1,55,3,55,1859,8,55,3,55,1861,8,55,1,56,1,56,1,56,
        1,56,1,56,3,56,1868,8,56,1,56,1,56,3,56,1872,8,56,3,56,1874,8,56,
        1,56,1,56,1,56,1,56,1,56,3,56,1881,8,56,1,56,1,56,3,56,1885,8,56,
        3,56,1887,8,56,3,56,1889,8,56,1,57,1,57,1,57,1,57,1,57,5,57,1896,
        8,57,10,57,12,57,1899,9,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,3,57,1909,8,57,1,58,1,58,3,58,1913,8,58,1,59,1,59,1,59,1,59,1,
        59,1,59,5,59,1921,8,59,10,59,12,59,1924,9,59,1,59,1,59,1,60,1,60,
        1,61,1,61,1,61,3,61,1933,8,61,1,61,1,61,3,61,1937,8,61,1,61,1,61,
        1,61,1,61,1,61,1,61,5,61,1945,8,61,10,61,12,61,1948,9,61,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1960,8,62,1,62,1,
        62,1,62,1,62,1,62,1,62,3,62,1968,8,62,1,62,1,62,1,62,1,62,1,62,5,
        62,1975,8,62,10,62,12,62,1978,9,62,1,62,1,62,1,62,3,62,1983,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,3,62,1991,8,62,1,62,1,62,1,62,1,62,
        3,62,1997,8,62,1,62,1,62,3,62,2001,8,62,1,62,1,62,1,62,3,62,2006,
        8,62,1,62,1,62,1,62,3,62,2011,8,62,1,63,1,63,1,63,1,63,3,63,2017,
        8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        5,63,2031,8,63,10,63,12,63,2034,9,63,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,2061,8,64,11,64,12,64,2062,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2072,8,64,10,64,12,64,2075,
        9,64,1,64,1,64,1,64,1,64,1,64,3,64,2082,8,64,1,64,1,64,1,64,3,64,
        2087,8,64,1,64,1,64,1,64,3,64,2092,8,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,5,64,2103,8,64,10,64,12,64,2106,9,64,1,64,1,
        64,1,64,3,64,2111,8,64,1,64,3,64,2114,8,64,1,64,1,64,1,64,1,64,1,
        64,3,64,2121,8,64,1,64,1,64,1,64,3,64,2126,8,64,1,64,3,64,2129,8,
        64,1,64,3,64,2132,8,64,1,64,1,64,1,64,3,64,2137,8,64,1,64,1,64,1,
        64,5,64,2142,8,64,10,64,12,64,2145,9,64,3,64,2147,8,64,1,64,1,64,
        1,64,1,64,1,64,5,64,2154,8,64,10,64,12,64,2157,9,64,3,64,2159,8,
        64,1,64,1,64,3,64,2163,8,64,1,64,3,64,2166,8,64,1,64,3,64,2169,8,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2182,
        8,64,10,64,12,64,2185,9,64,3,64,2187,8,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,2204,8,
        64,11,64,12,64,2205,1,64,1,64,3,64,2210,8,64,1,64,1,64,1,64,1,64,
        4,64,2216,8,64,11,64,12,64,2217,1,64,1,64,3,64,2222,8,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2245,8,64,10,64,12,64,2248,
        9,64,3,64,2250,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2259,
        8,64,1,64,1,64,1,64,1,64,3,64,2265,8,64,1,64,1,64,1,64,1,64,3,64,
        2271,8,64,1,64,1,64,1,64,1,64,3,64,2277,8,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,3,64,2286,8,64,1,64,3,64,2289,8,64,1,64,3,64,2292,
        8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,2311,8,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,2320,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2340,8,64,
        10,64,12,64,2343,9,64,3,64,2345,8,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,3,64,2355,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,2364,8,64,1,64,1,64,1,64,1,64,3,64,2370,8,64,1,64,1,64,1,64,1,
        64,3,64,2376,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,2387,8,64,3,64,2389,8,64,1,64,1,64,1,64,3,64,2394,8,64,1,64,1,
        64,1,64,1,64,1,64,3,64,2401,8,64,3,64,2403,8,64,1,64,1,64,1,64,1,
        64,3,64,2409,8,64,1,64,1,64,1,64,1,64,3,64,2415,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,5,64,2424,8,64,10,64,12,64,2427,9,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,2435,8,64,1,64,1,64,1,64,3,64,2440,
        8,64,1,64,1,64,1,64,3,64,2445,8,64,3,64,2447,8,64,3,64,2449,8,64,
        1,64,1,64,1,64,1,64,3,64,2455,8,64,3,64,2457,8,64,1,64,1,64,1,64,
        1,64,1,64,1,64,5,64,2465,8,64,10,64,12,64,2468,9,64,1,64,1,64,1,
        64,1,64,1,64,1,64,3,64,2476,8,64,3,64,2478,8,64,1,64,1,64,1,64,1,
        64,3,64,2484,8,64,3,64,2486,8,64,1,64,3,64,2489,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,5,64,2499,8,64,10,64,12,64,2502,9,64,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,2511,8,65,10,65,12,65,2514,
        9,65,3,65,2516,8,65,1,66,1,66,1,66,3,66,2521,8,66,1,67,1,67,1,67,
        3,67,2526,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,
        3,70,2538,8,70,1,71,1,71,3,71,2542,8,71,1,71,1,71,3,71,2546,8,71,
        1,71,3,71,2549,8,71,3,71,2551,8,71,1,72,1,72,1,72,1,72,3,72,2557,
        8,72,1,73,3,73,2560,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,2570,8,73,1,74,1,74,1,75,1,75,1,75,1,75,3,75,2578,8,75,1,76,
        1,76,1,76,1,76,3,76,2584,8,76,3,76,2586,8,76,1,77,1,77,1,77,1,77,
        1,77,1,77,3,77,2594,8,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,
        3,81,2604,8,81,1,81,1,81,1,81,1,81,3,81,2610,8,81,1,82,1,82,1,83,
        1,83,1,84,1,84,1,84,1,84,1,84,1,84,5,84,2622,8,84,10,84,12,84,2625,
        9,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2633,8,84,1,84,1,84,1,84,
        1,84,1,84,3,84,2640,8,84,1,84,1,84,1,84,3,84,2645,8,84,1,84,1,84,
        1,84,1,84,1,84,3,84,2652,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,3,84,2662,8,84,1,84,1,84,1,84,3,84,2667,8,84,1,84,1,84,1,84,
        1,84,1,84,3,84,2674,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,5,84,2698,8,84,10,84,12,84,2701,9,84,1,84,1,84,3,84,2705,8,
        84,3,84,2707,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2714,8,84,5,84,2716,
        8,84,10,84,12,84,2719,9,84,1,85,1,85,1,85,1,85,3,85,2725,8,85,1,
        86,1,86,3,86,2729,8,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,
        88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,2746,8,89,1,89,1,89,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,2759,8,89,10,89,12,89,
        2762,9,89,1,89,1,89,1,89,1,89,3,89,2768,8,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,3,89,2777,8,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,
        2785,8,89,10,89,12,89,2788,9,89,1,89,1,89,3,89,2792,8,89,1,89,1,
        89,1,89,1,89,1,89,5,89,2799,8,89,10,89,12,89,2802,9,89,1,89,1,89,
        3,89,2806,8,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2814,8,90,1,91,
        1,91,1,91,1,91,5,91,2820,8,91,10,91,12,91,2823,9,91,3,91,2825,8,
        91,1,91,1,91,1,91,1,91,3,91,2831,8,91,1,91,3,91,2834,8,91,1,91,1,
        91,1,91,1,91,1,91,3,91,2841,8,91,1,91,1,91,1,91,1,91,5,91,2847,8,
        91,10,91,12,91,2850,9,91,3,91,2852,8,91,1,91,1,91,1,91,1,91,5,91,
        2858,8,91,10,91,12,91,2861,9,91,3,91,2863,8,91,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,2889,8,92,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,2900,8,93,1,94,1,94,1,94,3,
        94,2905,8,94,1,94,1,94,1,94,1,94,1,94,5,94,2912,8,94,10,94,12,94,
        2915,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,2925,8,95,
        10,95,12,95,2928,9,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,3,95,2942,8,95,1,96,1,96,3,96,2946,8,96,1,96,1,
        96,3,96,2950,8,96,1,96,1,96,3,96,2954,8,96,1,96,1,96,1,96,1,96,3,
        96,2960,8,96,1,96,1,96,3,96,2964,8,96,1,96,1,96,3,96,2968,8,96,1,
        96,1,96,3,96,2972,8,96,3,96,2974,8,96,1,97,1,97,1,97,1,97,1,98,1,
        98,1,98,1,98,3,98,2984,8,98,1,99,1,99,1,99,1,99,1,99,3,99,2991,8,
        99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3000,8,100,1,
        101,1,101,1,101,1,101,1,101,3,101,3007,8,101,1,102,1,102,1,102,1,
        102,1,102,3,102,3014,8,102,1,103,1,103,1,103,5,103,3019,8,103,10,
        103,12,103,3022,9,103,1,104,1,104,1,104,1,104,5,104,3028,8,104,10,
        104,12,104,3031,9,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,
        5,105,3040,8,105,10,105,12,105,3043,9,105,3,105,3045,8,105,1,105,
        1,105,1,106,3,106,3050,8,106,1,106,1,106,1,107,1,107,1,107,1,108,
        1,108,1,108,3,108,3060,8,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3076,8,108,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,4,109,
        3088,8,109,11,109,12,109,3089,1,109,3,109,3093,8,109,1,109,1,109,
        1,109,1,109,1,109,4,109,3100,8,109,11,109,12,109,3101,1,109,3,109,
        3105,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,5,109,
        3115,8,109,10,109,12,109,3118,9,109,1,109,3,109,3121,8,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,5,109,
        3134,8,109,10,109,12,109,3137,9,109,1,109,3,109,3140,8,109,1,109,
        1,109,1,109,1,109,3,109,3146,8,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,3,109,3156,8,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,3,109,3168,8,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,3177,8,109,1,110,1,110,1,110,1,110,
        1,110,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,113,1,113,
        1,113,1,113,5,113,3196,8,113,10,113,12,113,3199,9,113,1,113,1,113,
        1,113,3,113,3204,8,113,1,114,1,114,1,114,4,114,3209,8,114,11,114,
        12,114,3210,1,115,1,115,1,116,1,116,1,116,5,116,3218,8,116,10,116,
        12,116,3221,9,116,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,
        1,119,1,119,1,119,3,119,3234,8,119,1,120,1,120,1,120,1,120,1,120,
        3,120,3241,8,120,1,121,1,121,1,121,5,121,3246,8,121,10,121,12,121,
        3249,9,121,1,122,1,122,1,122,1,122,1,122,3,122,3256,8,122,1,123,
        3,123,3259,8,123,1,123,1,123,3,123,3263,8,123,1,123,1,123,3,123,
        3267,8,123,1,123,3,123,3270,8,123,1,124,1,124,3,124,3274,8,124,1,
        125,1,125,1,125,0,7,46,70,122,126,128,168,188,126,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,0,37,2,0,22,22,212,212,
        2,0,55,55,114,114,2,0,226,226,244,244,2,0,88,88,105,105,2,0,75,75,
        106,106,1,0,222,223,2,0,84,84,157,157,2,0,308,308,330,330,2,0,74,
        74,265,265,2,0,12,12,58,58,2,0,84,84,131,131,2,0,5,5,62,62,3,0,89,
        89,135,135,217,217,2,0,16,16,243,243,3,0,18,18,133,133,254,254,2,
        0,288,288,290,290,2,0,107,107,230,230,1,0,302,303,1,0,304,306,2,
        0,127,127,172,172,1,0,275,277,4,0,72,72,80,80,257,257,267,267,2,
        0,32,32,264,264,2,0,10,10,169,169,2,0,83,83,224,224,1,0,296,301,
        3,0,5,5,9,9,238,238,2,0,80,80,257,257,5,0,50,50,101,101,153,154,
        228,228,294,294,1,0,158,161,2,0,85,85,195,195,3,0,96,96,120,120,
        247,247,4,0,63,63,115,115,143,143,278,278,2,0,175,175,293,293,5,
        0,36,36,56,56,110,110,231,231,271,271,2,0,252,252,282,282,55,0,1,
        5,7,7,9,10,12,16,18,18,20,22,25,32,34,35,39,39,48,50,52,55,57,58,
        60,61,63,65,68,70,72,72,75,75,78,78,81,85,87,87,90,96,99,99,101,
        104,106,107,109,109,112,112,114,115,117,118,120,120,127,134,136,
        136,138,138,140,140,143,154,156,163,167,172,174,176,179,179,181,
        196,198,203,205,216,218,220,222,230,232,236,238,243,245,248,250,
        255,258,260,262,264,266,268,270,273,275,279,281,283,286,287,289,
        295,3787,0,255,1,0,0,0,2,269,1,0,0,0,4,271,1,0,0,0,6,274,1,0,0,0,
        8,277,1,0,0,0,10,280,1,0,0,0,12,283,1,0,0,0,14,286,1,0,0,0,16,1160,
        1,0,0,0,18,1163,1,0,0,0,20,1167,1,0,0,0,22,1177,1,0,0,0,24,1181,
        1,0,0,0,26,1195,1,0,0,0,28,1197,1,0,0,0,30,1211,1,0,0,0,32,1217,
        1,0,0,0,34,1221,1,0,0,0,36,1229,1,0,0,0,38,1235,1,0,0,0,40,1237,
        1,0,0,0,42,1274,1,0,0,0,44,1276,1,0,0,0,46,1278,1,0,0,0,48,1314,
        1,0,0,0,50,1316,1,0,0,0,52,1324,1,0,0,0,54,1372,1,0,0,0,56,1422,
        1,0,0,0,58,1437,1,0,0,0,60,1439,1,0,0,0,62,1446,1,0,0,0,64,1475,
        1,0,0,0,66,1484,1,0,0,0,68,1501,1,0,0,0,70,1503,1,0,0,0,72,1534,
        1,0,0,0,74,1550,1,0,0,0,76,1552,1,0,0,0,78,1561,1,0,0,0,80,1563,
        1,0,0,0,82,1571,1,0,0,0,84,1573,1,0,0,0,86,1576,1,0,0,0,88,1661,
        1,0,0,0,90,1676,1,0,0,0,92,1687,1,0,0,0,94,1689,1,0,0,0,96,1704,
        1,0,0,0,98,1717,1,0,0,0,100,1721,1,0,0,0,102,1731,1,0,0,0,104,1779,
        1,0,0,0,106,1781,1,0,0,0,108,1809,1,0,0,0,110,1816,1,0,0,0,112,1888,
        1,0,0,0,114,1908,1,0,0,0,116,1910,1,0,0,0,118,1914,1,0,0,0,120,1927,
        1,0,0,0,122,1936,1,0,0,0,124,2010,1,0,0,0,126,2016,1,0,0,0,128,2488,
        1,0,0,0,130,2503,1,0,0,0,132,2517,1,0,0,0,134,2522,1,0,0,0,136,2527,
        1,0,0,0,138,2531,1,0,0,0,140,2537,1,0,0,0,142,2550,1,0,0,0,144,2556,
        1,0,0,0,146,2569,1,0,0,0,148,2571,1,0,0,0,150,2577,1,0,0,0,152,2585,
        1,0,0,0,154,2593,1,0,0,0,156,2595,1,0,0,0,158,2597,1,0,0,0,160,2599,
        1,0,0,0,162,2601,1,0,0,0,164,2611,1,0,0,0,166,2613,1,0,0,0,168,2706,
        1,0,0,0,170,2724,1,0,0,0,172,2728,1,0,0,0,174,2730,1,0,0,0,176,2735,
        1,0,0,0,178,2805,1,0,0,0,180,2807,1,0,0,0,182,2824,1,0,0,0,184,2888,
        1,0,0,0,186,2899,1,0,0,0,188,2901,1,0,0,0,190,2941,1,0,0,0,192,2973,
        1,0,0,0,194,2975,1,0,0,0,196,2983,1,0,0,0,198,2990,1,0,0,0,200,2999,
        1,0,0,0,202,3006,1,0,0,0,204,3013,1,0,0,0,206,3015,1,0,0,0,208,3023,
        1,0,0,0,210,3034,1,0,0,0,212,3049,1,0,0,0,214,3053,1,0,0,0,216,3075,
        1,0,0,0,218,3176,1,0,0,0,220,3178,1,0,0,0,222,3183,1,0,0,0,224,3188,
        1,0,0,0,226,3191,1,0,0,0,228,3208,1,0,0,0,230,3212,1,0,0,0,232,3214,
        1,0,0,0,234,3222,1,0,0,0,236,3228,1,0,0,0,238,3233,1,0,0,0,240,3240,
        1,0,0,0,242,3242,1,0,0,0,244,3255,1,0,0,0,246,3269,1,0,0,0,248,3273,
        1,0,0,0,250,3275,1,0,0,0,252,254,3,2,1,0,253,252,1,0,0,0,254,257,
        1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,
        1,0,0,0,258,259,5,0,0,1,259,1,1,0,0,0,260,270,3,4,2,0,261,270,3,
        6,3,0,262,270,3,8,4,0,263,270,3,10,5,0,264,266,3,12,6,0,265,267,
        5,309,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,270,1,0,0,0,268,270,
        3,14,7,0,269,260,1,0,0,0,269,261,1,0,0,0,269,262,1,0,0,0,269,263,
        1,0,0,0,269,264,1,0,0,0,269,268,1,0,0,0,270,3,1,0,0,0,271,272,3,
        16,8,0,272,273,5,309,0,0,273,5,1,0,0,0,274,275,3,120,60,0,275,276,
        5,309,0,0,276,7,1,0,0,0,277,278,3,206,103,0,278,279,5,309,0,0,279,
        9,1,0,0,0,280,281,3,168,84,0,281,282,5,309,0,0,282,11,1,0,0,0,283,
        284,3,188,94,0,284,285,5,309,0,0,285,13,1,0,0,0,286,287,3,208,104,
        0,287,288,5,309,0,0,288,15,1,0,0,0,289,1161,3,18,9,0,290,291,5,272,
        0,0,291,1161,3,244,122,0,292,293,5,272,0,0,293,294,3,244,122,0,294,
        295,5,310,0,0,295,296,3,244,122,0,296,1161,1,0,0,0,297,298,5,36,
        0,0,298,302,5,25,0,0,299,300,5,102,0,0,300,301,5,165,0,0,301,303,
        5,77,0,0,302,299,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,
        3,244,122,0,305,306,5,274,0,0,306,309,3,244,122,0,307,308,5,29,0,
        0,308,310,3,152,76,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,
        0,0,311,312,5,14,0,0,312,314,3,240,120,0,313,311,1,0,0,0,313,314,
        1,0,0,0,314,317,1,0,0,0,315,316,5,288,0,0,316,318,3,32,16,0,317,
        315,1,0,0,0,317,318,1,0,0,0,318,1161,1,0,0,0,319,320,5,66,0,0,320,
        323,5,25,0,0,321,322,5,102,0,0,322,324,5,77,0,0,323,321,1,0,0,0,
        323,324,1,0,0,0,324,325,1,0,0,0,325,327,3,244,122,0,326,328,7,0,
        0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,1161,1,0,0,0,329,330,5,36,
        0,0,330,334,5,226,0,0,331,332,5,102,0,0,332,333,5,165,0,0,333,335,
        5,77,0,0,334,331,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,339,
        3,232,116,0,337,338,5,14,0,0,338,340,3,240,120,0,339,337,1,0,0,0,
        339,340,1,0,0,0,340,343,1,0,0,0,341,342,5,288,0,0,342,344,3,32,16,
        0,343,341,1,0,0,0,343,344,1,0,0,0,344,1161,1,0,0,0,345,346,5,66,
        0,0,346,349,5,226,0,0,347,348,5,102,0,0,348,350,5,77,0,0,349,347,
        1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,3,232,116,0,352,
        354,7,0,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,1161,1,0,0,0,355,
        356,5,6,0,0,356,357,5,226,0,0,357,358,3,232,116,0,358,359,5,206,
        0,0,359,360,5,253,0,0,360,361,3,244,122,0,361,1161,1,0,0,0,362,363,
        5,6,0,0,363,364,5,226,0,0,364,365,3,232,116,0,365,366,5,234,0,0,
        366,367,5,14,0,0,367,368,3,240,120,0,368,1161,1,0,0,0,369,372,5,
        36,0,0,370,371,5,177,0,0,371,373,5,209,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,374,1,0,0,0,374,378,5,244,0,0,375,376,5,102,0,0,376,
        377,5,165,0,0,377,379,5,77,0,0,378,375,1,0,0,0,378,379,1,0,0,0,379,
        380,1,0,0,0,380,382,3,232,116,0,381,383,3,102,51,0,382,381,1,0,0,
        0,382,383,1,0,0,0,383,386,1,0,0,0,384,385,5,29,0,0,385,387,3,152,
        76,0,386,384,1,0,0,0,386,387,1,0,0,0,387,390,1,0,0,0,388,389,5,288,
        0,0,389,391,3,32,16,0,390,388,1,0,0,0,390,391,1,0,0,0,391,392,1,
        0,0,0,392,398,5,11,0,0,393,399,3,18,9,0,394,395,5,313,0,0,395,396,
        3,18,9,0,396,397,5,314,0,0,397,399,1,0,0,0,398,393,1,0,0,0,398,394,
        1,0,0,0,399,405,1,0,0,0,400,402,5,288,0,0,401,403,5,162,0,0,402,
        401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,406,5,48,0,0,405,
        400,1,0,0,0,405,406,1,0,0,0,406,1161,1,0,0,0,407,410,5,36,0,0,408,
        409,5,177,0,0,409,411,5,209,0,0,410,408,1,0,0,0,410,411,1,0,0,0,
        411,412,1,0,0,0,412,416,5,244,0,0,413,414,5,102,0,0,414,415,5,165,
        0,0,415,417,5,77,0,0,416,413,1,0,0,0,416,417,1,0,0,0,417,418,1,0,
        0,0,418,419,3,232,116,0,419,420,5,313,0,0,420,425,3,26,13,0,421,
        422,5,312,0,0,422,424,3,26,13,0,423,421,1,0,0,0,424,427,1,0,0,0,
        425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,
        428,431,5,314,0,0,429,430,5,29,0,0,430,432,3,152,76,0,431,429,1,
        0,0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,434,5,288,0,0,434,436,
        3,32,16,0,435,433,1,0,0,0,435,436,1,0,0,0,436,1161,1,0,0,0,437,438,
        5,66,0,0,438,441,5,244,0,0,439,440,5,102,0,0,440,442,5,77,0,0,441,
        439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,1161,3,232,116,0,
        444,445,5,110,0,0,445,446,5,113,0,0,446,448,3,232,116,0,447,449,
        3,102,51,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,451,
        3,18,9,0,451,1161,1,0,0,0,452,453,5,56,0,0,453,454,5,88,0,0,454,
        457,3,232,116,0,455,456,5,285,0,0,456,458,3,122,61,0,457,455,1,0,
        0,0,457,458,1,0,0,0,458,1161,1,0,0,0,459,460,5,258,0,0,460,461,5,
        244,0,0,461,1161,3,232,116,0,462,463,5,29,0,0,463,464,5,173,0,0,
        464,465,5,244,0,0,465,466,3,232,116,0,466,469,5,116,0,0,467,470,
        3,152,76,0,468,470,5,166,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,
        1161,1,0,0,0,471,472,5,29,0,0,472,473,5,173,0,0,473,474,5,283,0,
        0,474,475,3,232,116,0,475,478,5,116,0,0,476,479,3,152,76,0,477,479,
        5,166,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,1161,1,0,0,0,480,481,
        5,29,0,0,481,482,5,173,0,0,482,483,5,27,0,0,483,484,3,232,116,0,
        484,487,5,116,0,0,485,488,3,152,76,0,486,488,5,166,0,0,487,485,1,
        0,0,0,487,486,1,0,0,0,488,1161,1,0,0,0,489,490,5,6,0,0,490,493,5,
        244,0,0,491,492,5,102,0,0,492,494,5,77,0,0,493,491,1,0,0,0,493,494,
        1,0,0,0,494,495,1,0,0,0,495,496,3,232,116,0,496,497,5,206,0,0,497,
        498,5,253,0,0,498,499,3,232,116,0,499,1161,1,0,0,0,500,501,5,6,0,
        0,501,504,5,244,0,0,502,503,5,102,0,0,503,505,5,77,0,0,504,502,1,
        0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,3,232,116,0,507,508,
        5,2,0,0,508,512,5,27,0,0,509,510,5,102,0,0,510,511,5,165,0,0,511,
        513,5,77,0,0,512,509,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
        515,3,28,14,0,515,1161,1,0,0,0,516,517,5,6,0,0,517,520,5,244,0,0,
        518,519,5,102,0,0,519,521,5,77,0,0,520,518,1,0,0,0,520,521,1,0,0,
        0,521,522,1,0,0,0,522,523,3,232,116,0,523,524,5,206,0,0,524,527,
        5,27,0,0,525,526,5,102,0,0,526,528,5,77,0,0,527,525,1,0,0,0,527,
        528,1,0,0,0,528,529,1,0,0,0,529,530,3,232,116,0,530,531,5,253,0,
        0,531,532,3,244,122,0,532,1161,1,0,0,0,533,534,5,6,0,0,534,537,5,
        244,0,0,535,536,5,102,0,0,536,538,5,77,0,0,537,535,1,0,0,0,537,538,
        1,0,0,0,538,539,1,0,0,0,539,540,3,232,116,0,540,541,5,66,0,0,541,
        544,5,27,0,0,542,543,5,102,0,0,543,545,5,77,0,0,544,542,1,0,0,0,
        544,545,1,0,0,0,545,546,1,0,0,0,546,547,3,232,116,0,547,1161,1,0,
        0,0,548,549,5,6,0,0,549,552,5,244,0,0,550,551,5,102,0,0,551,553,
        5,77,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,555,
        3,232,116,0,555,556,5,6,0,0,556,557,5,27,0,0,557,558,3,232,116,0,
        558,559,5,234,0,0,559,560,5,48,0,0,560,561,5,260,0,0,561,562,3,168,
        84,0,562,1161,1,0,0,0,563,564,5,6,0,0,564,565,5,244,0,0,565,566,
        3,232,116,0,566,567,5,234,0,0,567,568,5,14,0,0,568,569,3,240,120,
        0,569,1161,1,0,0,0,570,571,5,6,0,0,571,572,5,244,0,0,572,573,3,232,
        116,0,573,574,5,234,0,0,574,575,5,199,0,0,575,576,3,34,17,0,576,
        1161,1,0,0,0,577,578,5,6,0,0,578,579,5,244,0,0,579,580,3,232,116,
        0,580,581,5,76,0,0,581,594,3,244,122,0,582,591,5,313,0,0,583,588,
        3,202,101,0,584,585,5,312,0,0,585,587,3,202,101,0,586,584,1,0,0,
        0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,
        0,590,588,1,0,0,0,591,583,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,
        0,593,595,5,314,0,0,594,582,1,0,0,0,594,595,1,0,0,0,595,598,1,0,
        0,0,596,597,5,285,0,0,597,599,3,122,61,0,598,596,1,0,0,0,598,599,
        1,0,0,0,599,1161,1,0,0,0,600,601,5,7,0,0,601,604,3,232,116,0,602,
        603,5,288,0,0,603,605,3,32,16,0,604,602,1,0,0,0,604,605,1,0,0,0,
        605,1161,1,0,0,0,606,609,5,36,0,0,607,608,5,177,0,0,608,610,5,209,
        0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,5,150,
        0,0,612,616,5,283,0,0,613,614,5,102,0,0,614,615,5,165,0,0,615,617,
        5,77,0,0,616,613,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,622,
        3,232,116,0,619,620,5,92,0,0,620,621,5,191,0,0,621,623,3,162,81,
        0,622,619,1,0,0,0,622,623,1,0,0,0,623,626,1,0,0,0,624,625,5,29,0,
        0,625,627,3,152,76,0,626,624,1,0,0,0,626,627,1,0,0,0,627,630,1,0,
        0,0,628,629,5,288,0,0,629,631,3,32,16,0,630,628,1,0,0,0,630,631,
        1,0,0,0,631,632,1,0,0,0,632,633,5,11,0,0,633,634,3,18,9,0,634,1161,
        1,0,0,0,635,638,5,36,0,0,636,637,5,177,0,0,637,639,5,209,0,0,638,
        636,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,283,0,0,641,
        644,3,232,116,0,642,643,5,29,0,0,643,645,3,152,76,0,644,642,1,0,
        0,0,644,645,1,0,0,0,645,648,1,0,0,0,646,647,5,229,0,0,647,649,7,
        1,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,
        11,0,0,651,652,3,18,9,0,652,1161,1,0,0,0,653,654,5,205,0,0,654,655,
        5,150,0,0,655,656,5,283,0,0,656,1161,3,232,116,0,657,658,5,66,0,
        0,658,659,5,150,0,0,659,662,5,283,0,0,660,661,5,102,0,0,661,663,
        5,77,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,1161,
        3,232,116,0,665,666,5,6,0,0,666,667,5,150,0,0,667,670,5,283,0,0,
        668,669,5,102,0,0,669,671,5,77,0,0,670,668,1,0,0,0,670,671,1,0,0,
        0,671,672,1,0,0,0,672,673,3,232,116,0,673,674,5,206,0,0,674,675,
        5,253,0,0,675,676,3,232,116,0,676,1161,1,0,0,0,677,678,5,6,0,0,678,
        679,5,150,0,0,679,680,5,283,0,0,680,681,3,232,116,0,681,682,5,234,
        0,0,682,683,5,199,0,0,683,684,3,34,17,0,684,1161,1,0,0,0,685,686,
        5,66,0,0,686,689,5,283,0,0,687,688,5,102,0,0,688,690,5,77,0,0,689,
        687,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,1161,3,232,116,0,
        692,693,5,6,0,0,693,694,5,283,0,0,694,695,3,232,116,0,695,696,5,
        206,0,0,696,697,5,253,0,0,697,698,3,232,116,0,698,1161,1,0,0,0,699,
        700,5,6,0,0,700,701,5,283,0,0,701,702,3,232,116,0,702,703,5,234,
        0,0,703,704,5,14,0,0,704,705,3,240,120,0,705,1161,1,0,0,0,706,707,
        5,20,0,0,707,708,3,232,116,0,708,717,5,313,0,0,709,714,3,202,101,
        0,710,711,5,312,0,0,711,713,3,202,101,0,712,710,1,0,0,0,713,716,
        1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,718,1,0,0,0,716,714,
        1,0,0,0,717,709,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,
        5,314,0,0,720,1161,1,0,0,0,721,724,5,36,0,0,722,723,5,177,0,0,723,
        725,5,209,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
        1161,3,208,104,0,727,728,5,66,0,0,728,731,5,90,0,0,729,730,5,102,
        0,0,730,732,5,77,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,733,1,0,
        0,0,733,1161,3,210,105,0,734,735,5,36,0,0,735,736,5,218,0,0,736,
        740,3,244,122,0,737,738,5,288,0,0,738,739,5,3,0,0,739,741,3,238,
        119,0,740,737,1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,0,742,743,5,
        105,0,0,743,745,3,244,122,0,744,742,1,0,0,0,744,745,1,0,0,0,745,
        1161,1,0,0,0,746,747,5,66,0,0,747,748,5,218,0,0,748,751,3,244,122,
        0,749,750,5,105,0,0,750,752,3,244,122,0,751,749,1,0,0,0,751,752,
        1,0,0,0,752,1161,1,0,0,0,753,754,5,93,0,0,754,755,3,242,121,0,755,
        756,5,253,0,0,756,761,3,240,120,0,757,758,5,312,0,0,758,760,3,240,
        120,0,759,757,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,
        0,0,0,762,767,1,0,0,0,763,761,1,0,0,0,764,765,5,288,0,0,765,766,
        5,3,0,0,766,768,5,176,0,0,767,764,1,0,0,0,767,768,1,0,0,0,768,772,
        1,0,0,0,769,770,5,94,0,0,770,771,5,19,0,0,771,773,3,238,119,0,772,
        769,1,0,0,0,772,773,1,0,0,0,773,776,1,0,0,0,774,775,5,105,0,0,775,
        777,3,244,122,0,776,774,1,0,0,0,776,777,1,0,0,0,777,1161,1,0,0,0,
        778,782,5,216,0,0,779,780,5,3,0,0,780,781,5,176,0,0,781,783,5,86,
        0,0,782,779,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,3,242,
        121,0,785,786,5,88,0,0,786,791,3,240,120,0,787,788,5,312,0,0,788,
        790,3,240,120,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,
        791,792,1,0,0,0,792,797,1,0,0,0,793,791,1,0,0,0,794,795,5,94,0,0,
        795,796,5,19,0,0,796,798,3,238,119,0,797,794,1,0,0,0,797,798,1,0,
        0,0,798,801,1,0,0,0,799,800,5,105,0,0,800,802,3,244,122,0,801,799,
        1,0,0,0,801,802,1,0,0,0,802,1161,1,0,0,0,803,804,5,234,0,0,804,808,
        5,218,0,0,805,809,5,5,0,0,806,809,5,163,0,0,807,809,3,244,122,0,
        808,805,1,0,0,0,808,806,1,0,0,0,808,807,1,0,0,0,809,812,1,0,0,0,
        810,811,5,105,0,0,811,813,3,244,122,0,812,810,1,0,0,0,812,813,1,
        0,0,0,813,1161,1,0,0,0,814,825,5,93,0,0,815,820,3,230,115,0,816,
        817,5,312,0,0,817,819,3,230,115,0,818,816,1,0,0,0,819,822,1,0,0,
        0,820,818,1,0,0,0,820,821,1,0,0,0,821,826,1,0,0,0,822,820,1,0,0,
        0,823,824,5,5,0,0,824,826,5,198,0,0,825,815,1,0,0,0,825,823,1,0,
        0,0,826,827,1,0,0,0,827,829,5,173,0,0,828,830,7,2,0,0,829,828,1,
        0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,3,232,116,0,832,833,
        5,253,0,0,833,837,3,240,120,0,834,835,5,288,0,0,835,836,5,93,0,0,
        836,838,5,176,0,0,837,834,1,0,0,0,837,838,1,0,0,0,838,1161,1,0,0,
        0,839,850,5,57,0,0,840,845,3,230,115,0,841,842,5,312,0,0,842,844,
        3,230,115,0,843,841,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,845,
        846,1,0,0,0,846,851,1,0,0,0,847,845,1,0,0,0,848,849,5,5,0,0,849,
        851,5,198,0,0,850,840,1,0,0,0,850,848,1,0,0,0,851,852,1,0,0,0,852,
        854,5,173,0,0,853,855,7,2,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,
        856,1,0,0,0,856,857,3,232,116,0,857,858,5,253,0,0,858,859,3,240,
        120,0,859,1161,1,0,0,0,860,864,5,216,0,0,861,862,5,93,0,0,862,863,
        5,176,0,0,863,865,5,86,0,0,864,861,1,0,0,0,864,865,1,0,0,0,865,876,
        1,0,0,0,866,871,3,230,115,0,867,868,5,312,0,0,868,870,3,230,115,
        0,869,867,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,
        0,872,877,1,0,0,0,873,871,1,0,0,0,874,875,5,5,0,0,875,877,5,198,
        0,0,876,866,1,0,0,0,876,874,1,0,0,0,877,878,1,0,0,0,878,880,5,173,
        0,0,879,881,7,2,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,
        0,0,882,883,3,232,116,0,883,884,5,88,0,0,884,885,3,240,120,0,885,
        1161,1,0,0,0,886,887,5,236,0,0,887,893,5,95,0,0,888,890,5,173,0,
        0,889,891,5,244,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,
        0,0,892,894,3,232,116,0,893,888,1,0,0,0,893,894,1,0,0,0,894,1161,
        1,0,0,0,895,907,5,78,0,0,896,897,5,313,0,0,897,902,3,196,98,0,898,
        899,5,312,0,0,899,901,3,196,98,0,900,898,1,0,0,0,901,904,1,0,0,0,
        902,900,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,0,904,902,1,0,0,0,
        905,906,5,314,0,0,906,908,1,0,0,0,907,896,1,0,0,0,907,908,1,0,0,
        0,908,909,1,0,0,0,909,1161,3,16,8,0,910,911,5,78,0,0,911,913,5,7,
        0,0,912,914,5,281,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,
        0,0,0,915,1161,3,16,8,0,916,917,5,236,0,0,917,918,5,36,0,0,918,919,
        5,244,0,0,919,1161,3,232,116,0,920,921,5,236,0,0,921,922,5,36,0,
        0,922,923,5,226,0,0,923,1161,3,232,116,0,924,925,5,236,0,0,925,926,
        5,36,0,0,926,927,5,283,0,0,927,1161,3,232,116,0,928,929,5,236,0,
        0,929,930,5,36,0,0,930,931,5,150,0,0,931,932,5,283,0,0,932,1161,
        3,232,116,0,933,934,5,236,0,0,934,937,5,245,0,0,935,936,7,3,0,0,
        936,938,3,232,116,0,937,935,1,0,0,0,937,938,1,0,0,0,938,945,1,0,
        0,0,939,940,5,137,0,0,940,943,3,152,76,0,941,942,5,73,0,0,942,944,
        3,152,76,0,943,941,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,939,
        1,0,0,0,945,946,1,0,0,0,946,1161,1,0,0,0,947,948,5,236,0,0,948,951,
        5,227,0,0,949,950,7,3,0,0,950,952,3,244,122,0,951,949,1,0,0,0,951,
        952,1,0,0,0,952,959,1,0,0,0,953,954,5,137,0,0,954,957,3,152,76,0,
        955,956,5,73,0,0,956,958,3,152,76,0,957,955,1,0,0,0,957,958,1,0,
        0,0,958,960,1,0,0,0,959,953,1,0,0,0,959,960,1,0,0,0,960,1161,1,0,
        0,0,961,962,5,236,0,0,962,969,5,26,0,0,963,964,5,137,0,0,964,967,
        3,152,76,0,965,966,5,73,0,0,966,968,3,152,76,0,967,965,1,0,0,0,967,
        968,1,0,0,0,968,970,1,0,0,0,969,963,1,0,0,0,969,970,1,0,0,0,970,
        1161,1,0,0,0,971,972,5,236,0,0,972,973,5,28,0,0,973,975,7,3,0,0,
        974,976,3,232,116,0,975,974,1,0,0,0,975,976,1,0,0,0,976,983,1,0,
        0,0,977,978,5,137,0,0,978,981,3,152,76,0,979,980,5,73,0,0,980,982,
        3,152,76,0,981,979,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,977,
        1,0,0,0,983,984,1,0,0,0,984,1161,1,0,0,0,985,986,5,236,0,0,986,987,
        5,240,0,0,987,988,5,86,0,0,988,1161,3,232,116,0,989,990,5,236,0,
        0,990,991,5,240,0,0,991,992,5,86,0,0,992,993,5,313,0,0,993,994,3,
        18,9,0,994,995,5,314,0,0,995,1161,1,0,0,0,996,998,5,236,0,0,997,
        999,5,39,0,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,
        1003,5,219,0,0,1001,1002,7,3,0,0,1002,1004,3,244,122,0,1003,1001,
        1,0,0,0,1003,1004,1,0,0,0,1004,1161,1,0,0,0,1005,1006,5,236,0,0,
        1006,1007,5,218,0,0,1007,1010,5,95,0,0,1008,1009,7,3,0,0,1009,1011,
        3,244,122,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1161,1,0,0,
        0,1012,1013,5,59,0,0,1013,1161,3,232,116,0,1014,1015,5,58,0,0,1015,
        1161,3,232,116,0,1016,1017,5,236,0,0,1017,1020,5,91,0,0,1018,1019,
        7,3,0,0,1019,1021,3,232,116,0,1020,1018,1,0,0,0,1020,1021,1,0,0,
        0,1021,1028,1,0,0,0,1022,1023,5,137,0,0,1023,1026,3,152,76,0,1024,
        1025,5,73,0,0,1025,1027,3,152,76,0,1026,1024,1,0,0,0,1026,1027,1,
        0,0,0,1027,1029,1,0,0,0,1028,1022,1,0,0,0,1028,1029,1,0,0,0,1029,
        1161,1,0,0,0,1030,1031,5,236,0,0,1031,1038,5,233,0,0,1032,1033,5,
        137,0,0,1033,1036,3,152,76,0,1034,1035,5,73,0,0,1035,1037,3,152,
        76,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,0,1038,
        1032,1,0,0,0,1038,1039,1,0,0,0,1039,1161,1,0,0,0,1040,1041,5,234,
        0,0,1041,1042,5,233,0,0,1042,1043,5,14,0,0,1043,1161,3,248,124,0,
        1044,1045,5,210,0,0,1045,1046,5,233,0,0,1046,1161,5,14,0,0,1047,
        1048,5,234,0,0,1048,1049,5,233,0,0,1049,1050,3,232,116,0,1050,1051,
        5,296,0,0,1051,1052,3,120,60,0,1052,1161,1,0,0,0,1053,1054,5,210,
        0,0,1054,1055,5,233,0,0,1055,1161,3,232,116,0,1056,1057,5,239,0,
        0,1057,1066,5,255,0,0,1058,1063,3,198,99,0,1059,1060,5,312,0,0,1060,
        1062,3,198,99,0,1061,1059,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,
        0,0,0,1063,1064,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,1066,
        1058,1,0,0,0,1066,1067,1,0,0,0,1067,1161,1,0,0,0,1068,1070,5,30,
        0,0,1069,1071,5,291,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,
        1161,1,0,0,0,1072,1074,5,220,0,0,1073,1075,5,291,0,0,1074,1073,1,
        0,0,0,1074,1075,1,0,0,0,1075,1161,1,0,0,0,1076,1077,5,197,0,0,1077,
        1078,3,244,122,0,1078,1079,5,88,0,0,1079,1080,3,16,8,0,1080,1161,
        1,0,0,0,1081,1082,5,51,0,0,1082,1083,5,197,0,0,1083,1161,3,244,122,
        0,1084,1085,5,76,0,0,1085,1095,3,244,122,0,1086,1087,5,274,0,0,1087,
        1092,3,120,60,0,1088,1089,5,312,0,0,1089,1091,3,120,60,0,1090,1088,
        1,0,0,0,1091,1094,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,
        1096,1,0,0,0,1094,1092,1,0,0,0,1095,1086,1,0,0,0,1095,1096,1,0,0,
        0,1096,1161,1,0,0,0,1097,1098,5,76,0,0,1098,1099,5,104,0,0,1099,
        1109,3,152,76,0,1100,1101,5,274,0,0,1101,1106,3,120,60,0,1102,1103,
        5,312,0,0,1103,1105,3,120,60,0,1104,1102,1,0,0,0,1105,1108,1,0,0,
        0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1110,1,0,0,0,1108,1106,
        1,0,0,0,1109,1100,1,0,0,0,1109,1110,1,0,0,0,1110,1161,1,0,0,0,1111,
        1112,5,59,0,0,1112,1113,5,109,0,0,1113,1161,3,244,122,0,1114,1115,
        5,59,0,0,1115,1116,5,181,0,0,1116,1161,3,244,122,0,1117,1118,5,234,
        0,0,1118,1119,5,188,0,0,1119,1161,3,206,103,0,1120,1121,5,234,0,
        0,1121,1122,5,251,0,0,1122,1125,5,295,0,0,1123,1126,5,140,0,0,1124,
        1126,3,120,60,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,1161,1,
        0,0,0,1127,1128,5,271,0,0,1128,1129,3,232,116,0,1129,1130,5,234,
        0,0,1130,1135,3,194,97,0,1131,1132,5,312,0,0,1132,1134,3,194,97,
        0,1133,1131,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,
        1,0,0,0,1136,1140,1,0,0,0,1137,1135,1,0,0,0,1138,1139,5,285,0,0,
        1139,1141,3,122,61,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,1161,
        1,0,0,0,1142,1143,5,152,0,0,1143,1144,5,113,0,0,1144,1149,3,232,
        116,0,1145,1147,5,11,0,0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,
        1148,1,0,0,0,1148,1150,3,244,122,0,1149,1146,1,0,0,0,1149,1150,1,
        0,0,0,1150,1151,1,0,0,0,1151,1152,5,274,0,0,1152,1153,3,70,35,0,
        1153,1154,5,173,0,0,1154,1156,3,120,60,0,1155,1157,3,178,89,0,1156,
        1155,1,0,0,0,1157,1158,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,
        0,1159,1161,1,0,0,0,1160,289,1,0,0,0,1160,290,1,0,0,0,1160,292,1,
        0,0,0,1160,297,1,0,0,0,1160,319,1,0,0,0,1160,329,1,0,0,0,1160,345,
        1,0,0,0,1160,355,1,0,0,0,1160,362,1,0,0,0,1160,369,1,0,0,0,1160,
        407,1,0,0,0,1160,437,1,0,0,0,1160,444,1,0,0,0,1160,452,1,0,0,0,1160,
        459,1,0,0,0,1160,462,1,0,0,0,1160,471,1,0,0,0,1160,480,1,0,0,0,1160,
        489,1,0,0,0,1160,500,1,0,0,0,1160,516,1,0,0,0,1160,533,1,0,0,0,1160,
        548,1,0,0,0,1160,563,1,0,0,0,1160,570,1,0,0,0,1160,577,1,0,0,0,1160,
        600,1,0,0,0,1160,606,1,0,0,0,1160,635,1,0,0,0,1160,653,1,0,0,0,1160,
        657,1,0,0,0,1160,665,1,0,0,0,1160,677,1,0,0,0,1160,685,1,0,0,0,1160,
        692,1,0,0,0,1160,699,1,0,0,0,1160,706,1,0,0,0,1160,721,1,0,0,0,1160,
        727,1,0,0,0,1160,734,1,0,0,0,1160,746,1,0,0,0,1160,753,1,0,0,0,1160,
        778,1,0,0,0,1160,803,1,0,0,0,1160,814,1,0,0,0,1160,839,1,0,0,0,1160,
        860,1,0,0,0,1160,886,1,0,0,0,1160,895,1,0,0,0,1160,910,1,0,0,0,1160,
        916,1,0,0,0,1160,920,1,0,0,0,1160,924,1,0,0,0,1160,928,1,0,0,0,1160,
        933,1,0,0,0,1160,947,1,0,0,0,1160,961,1,0,0,0,1160,971,1,0,0,0,1160,
        985,1,0,0,0,1160,989,1,0,0,0,1160,996,1,0,0,0,1160,1005,1,0,0,0,
        1160,1012,1,0,0,0,1160,1014,1,0,0,0,1160,1016,1,0,0,0,1160,1030,
        1,0,0,0,1160,1040,1,0,0,0,1160,1044,1,0,0,0,1160,1047,1,0,0,0,1160,
        1053,1,0,0,0,1160,1056,1,0,0,0,1160,1068,1,0,0,0,1160,1072,1,0,0,
        0,1160,1076,1,0,0,0,1160,1081,1,0,0,0,1160,1084,1,0,0,0,1160,1097,
        1,0,0,0,1160,1111,1,0,0,0,1160,1114,1,0,0,0,1160,1117,1,0,0,0,1160,
        1120,1,0,0,0,1160,1127,1,0,0,0,1160,1142,1,0,0,0,1161,17,1,0,0,0,
        1162,1164,3,20,10,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,
        1,0,0,0,1165,1166,3,22,11,0,1166,19,1,0,0,0,1167,1168,5,288,0,0,
        1168,1173,3,208,104,0,1169,1170,5,312,0,0,1170,1172,3,208,104,0,
        1171,1169,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,
        1,0,0,0,1174,21,1,0,0,0,1175,1173,1,0,0,0,1176,1178,3,24,12,0,1177,
        1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,1180,3,40,
        20,0,1180,23,1,0,0,0,1181,1183,5,288,0,0,1182,1184,5,204,0,0,1183,
        1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1190,3,64,
        32,0,1186,1187,5,312,0,0,1187,1189,3,64,32,0,1188,1186,1,0,0,0,1189,
        1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,25,1,0,0,0,
        1192,1190,1,0,0,0,1193,1196,3,28,14,0,1194,1196,3,30,15,0,1195,1193,
        1,0,0,0,1195,1194,1,0,0,0,1196,27,1,0,0,0,1197,1198,3,244,122,0,
        1198,1201,3,168,84,0,1199,1200,5,165,0,0,1200,1202,5,166,0,0,1201,
        1199,1,0,0,0,1201,1202,1,0,0,0,1202,1205,1,0,0,0,1203,1204,5,29,
        0,0,1204,1206,3,152,76,0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,
        1209,1,0,0,0,1207,1208,5,288,0,0,1208,1210,3,32,16,0,1209,1207,1,
        0,0,0,1209,1210,1,0,0,0,1210,29,1,0,0,0,1211,1212,5,137,0,0,1212,
        1215,3,232,116,0,1213,1214,7,4,0,0,1214,1216,5,199,0,0,1215,1213,
        1,0,0,0,1215,1216,1,0,0,0,1216,31,1,0,0,0,1217,1218,5,313,0,0,1218,
        1219,3,34,17,0,1219,1220,5,314,0,0,1220,33,1,0,0,0,1221,1226,3,36,
        18,0,1222,1223,5,312,0,0,1223,1225,3,36,18,0,1224,1222,1,0,0,0,1225,
        1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,1227,35,1,0,0,0,
        1228,1226,1,0,0,0,1229,1230,3,244,122,0,1230,1231,5,296,0,0,1231,
        1232,3,38,19,0,1232,37,1,0,0,0,1233,1236,5,53,0,0,1234,1236,3,120,
        60,0,1235,1233,1,0,0,0,1235,1234,1,0,0,0,1236,39,1,0,0,0,1237,1248,
        3,46,23,0,1238,1239,5,178,0,0,1239,1240,5,19,0,0,1240,1245,3,50,
        25,0,1241,1242,5,312,0,0,1242,1244,3,50,25,0,1243,1241,1,0,0,0,1244,
        1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1249,1,0,0,
        0,1247,1245,1,0,0,0,1248,1238,1,0,0,0,1248,1249,1,0,0,0,1249,1255,
        1,0,0,0,1250,1251,5,171,0,0,1251,1253,3,44,22,0,1252,1254,7,5,0,
        0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1256,1,0,0,0,1255,1250,
        1,0,0,0,1255,1256,1,0,0,0,1256,1270,1,0,0,0,1257,1258,5,138,0,0,
        1258,1271,3,42,21,0,1259,1260,5,81,0,0,1260,1262,7,6,0,0,1261,1263,
        3,44,22,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,
        1264,1268,7,5,0,0,1265,1269,5,175,0,0,1266,1267,5,288,0,0,1267,1269,
        5,250,0,0,1268,1265,1,0,0,0,1268,1266,1,0,0,0,1269,1271,1,0,0,0,
        1270,1257,1,0,0,0,1270,1259,1,0,0,0,1270,1271,1,0,0,0,1271,41,1,
        0,0,0,1272,1275,5,5,0,0,1273,1275,3,44,22,0,1274,1272,1,0,0,0,1274,
        1273,1,0,0,0,1275,43,1,0,0,0,1276,1277,7,7,0,0,1277,45,1,0,0,0,1278,
        1279,6,23,-1,0,1279,1280,3,48,24,0,1280,1295,1,0,0,0,1281,1282,10,
        2,0,0,1282,1284,5,111,0,0,1283,1285,3,66,33,0,1284,1283,1,0,0,0,
        1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1294,3,46,23,3,1287,1288,
        10,1,0,0,1288,1290,7,8,0,0,1289,1291,3,66,33,0,1290,1289,1,0,0,0,
        1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1294,3,46,23,2,1293,1281,
        1,0,0,0,1293,1287,1,0,0,0,1294,1297,1,0,0,0,1295,1293,1,0,0,0,1295,
        1296,1,0,0,0,1296,47,1,0,0,0,1297,1295,1,0,0,0,1298,1315,3,52,26,
        0,1299,1300,5,244,0,0,1300,1315,3,232,116,0,1301,1302,5,280,0,0,
        1302,1307,3,120,60,0,1303,1304,5,312,0,0,1304,1306,3,120,60,0,1305,
        1303,1,0,0,0,1306,1309,1,0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,
        0,1308,1315,1,0,0,0,1309,1307,1,0,0,0,1310,1311,5,313,0,0,1311,1312,
        3,40,20,0,1312,1313,5,314,0,0,1313,1315,1,0,0,0,1314,1298,1,0,0,
        0,1314,1299,1,0,0,0,1314,1301,1,0,0,0,1314,1310,1,0,0,0,1315,49,
        1,0,0,0,1316,1318,3,120,60,0,1317,1319,7,9,0,0,1318,1317,1,0,0,0,
        1318,1319,1,0,0,0,1319,1322,1,0,0,0,1320,1321,5,168,0,0,1321,1323,
        7,10,0,0,1322,1320,1,0,0,0,1322,1323,1,0,0,0,1323,51,1,0,0,0,1324,
        1326,5,231,0,0,1325,1327,3,66,33,0,1326,1325,1,0,0,0,1326,1327,1,
        0,0,0,1327,1328,1,0,0,0,1328,1333,3,68,34,0,1329,1330,5,312,0,0,
        1330,1332,3,68,34,0,1331,1329,1,0,0,0,1332,1335,1,0,0,0,1333,1331,
        1,0,0,0,1333,1334,1,0,0,0,1334,1345,1,0,0,0,1335,1333,1,0,0,0,1336,
        1337,5,88,0,0,1337,1342,3,70,35,0,1338,1339,5,312,0,0,1339,1341,
        3,70,35,0,1340,1338,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,
        1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1345,1336,
        1,0,0,0,1345,1346,1,0,0,0,1346,1349,1,0,0,0,1347,1348,5,285,0,0,
        1348,1350,3,122,61,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1354,
        1,0,0,0,1351,1352,5,97,0,0,1352,1353,5,19,0,0,1353,1355,3,54,27,
        0,1354,1351,1,0,0,0,1354,1355,1,0,0,0,1355,1358,1,0,0,0,1356,1357,
        5,100,0,0,1357,1359,3,122,61,0,1358,1356,1,0,0,0,1358,1359,1,0,0,
        0,1359,1369,1,0,0,0,1360,1361,5,287,0,0,1361,1366,3,60,30,0,1362,
        1363,5,312,0,0,1363,1365,3,60,30,0,1364,1362,1,0,0,0,1365,1368,1,
        0,0,0,1366,1364,1,0,0,0,1366,1367,1,0,0,0,1367,1370,1,0,0,0,1368,
        1366,1,0,0,0,1369,1360,1,0,0,0,1369,1370,1,0,0,0,1370,53,1,0,0,0,
        1371,1373,3,66,33,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1374,
        1,0,0,0,1374,1379,3,56,28,0,1375,1376,5,312,0,0,1376,1378,3,56,28,
        0,1377,1375,1,0,0,0,1378,1381,1,0,0,0,1379,1377,1,0,0,0,1379,1380,
        1,0,0,0,1380,55,1,0,0,0,1381,1379,1,0,0,0,1382,1423,3,58,29,0,1383,
        1384,5,221,0,0,1384,1393,5,313,0,0,1385,1390,3,120,60,0,1386,1387,
        5,312,0,0,1387,1389,3,120,60,0,1388,1386,1,0,0,0,1389,1392,1,0,0,
        0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,1394,1,0,0,0,1392,1390,
        1,0,0,0,1393,1385,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,
        1423,5,314,0,0,1396,1397,5,38,0,0,1397,1406,5,313,0,0,1398,1403,
        3,120,60,0,1399,1400,5,312,0,0,1400,1402,3,120,60,0,1401,1399,1,
        0,0,0,1402,1405,1,0,0,0,1403,1401,1,0,0,0,1403,1404,1,0,0,0,1404,
        1407,1,0,0,0,1405,1403,1,0,0,0,1406,1398,1,0,0,0,1406,1407,1,0,0,
        0,1407,1408,1,0,0,0,1408,1423,5,314,0,0,1409,1410,5,98,0,0,1410,
        1411,5,235,0,0,1411,1412,5,313,0,0,1412,1417,3,58,29,0,1413,1414,
        5,312,0,0,1414,1416,3,58,29,0,1415,1413,1,0,0,0,1416,1419,1,0,0,
        0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,1420,1,0,0,0,1419,1417,
        1,0,0,0,1420,1421,5,314,0,0,1421,1423,1,0,0,0,1422,1382,1,0,0,0,
        1422,1383,1,0,0,0,1422,1396,1,0,0,0,1422,1409,1,0,0,0,1423,57,1,
        0,0,0,1424,1433,5,313,0,0,1425,1430,3,120,60,0,1426,1427,5,312,0,
        0,1427,1429,3,120,60,0,1428,1426,1,0,0,0,1429,1432,1,0,0,0,1430,
        1428,1,0,0,0,1430,1431,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,0,
        0,1433,1425,1,0,0,0,1433,1434,1,0,0,0,1434,1435,1,0,0,0,1435,1438,
        5,314,0,0,1436,1438,3,120,60,0,1437,1424,1,0,0,0,1437,1436,1,0,0,
        0,1438,59,1,0,0,0,1439,1440,3,244,122,0,1440,1441,5,11,0,0,1441,
        1442,5,313,0,0,1442,1443,3,62,31,0,1443,1444,5,314,0,0,1444,61,1,
        0,0,0,1445,1447,3,244,122,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,
        1447,1458,1,0,0,0,1448,1449,5,184,0,0,1449,1450,5,19,0,0,1450,1455,
        3,120,60,0,1451,1452,5,312,0,0,1452,1454,3,120,60,0,1453,1451,1,
        0,0,0,1454,1457,1,0,0,0,1455,1453,1,0,0,0,1455,1456,1,0,0,0,1456,
        1459,1,0,0,0,1457,1455,1,0,0,0,1458,1448,1,0,0,0,1458,1459,1,0,0,
        0,1459,1470,1,0,0,0,1460,1461,5,178,0,0,1461,1462,5,19,0,0,1462,
        1467,3,50,25,0,1463,1464,5,312,0,0,1464,1466,3,50,25,0,1465,1463,
        1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,
        1471,1,0,0,0,1469,1467,1,0,0,0,1470,1460,1,0,0,0,1470,1471,1,0,0,
        0,1471,1473,1,0,0,0,1472,1474,3,182,91,0,1473,1472,1,0,0,0,1473,
        1474,1,0,0,0,1474,63,1,0,0,0,1475,1477,3,244,122,0,1476,1478,3,102,
        51,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,
        1480,5,11,0,0,1480,1481,5,313,0,0,1481,1482,3,22,11,0,1482,1483,
        5,314,0,0,1483,65,1,0,0,0,1484,1485,7,11,0,0,1485,67,1,0,0,0,1486,
        1491,3,120,60,0,1487,1489,5,11,0,0,1488,1487,1,0,0,0,1488,1489,1,
        0,0,0,1489,1490,1,0,0,0,1490,1492,3,244,122,0,1491,1488,1,0,0,0,
        1491,1492,1,0,0,0,1492,1502,1,0,0,0,1493,1494,3,128,64,0,1494,1495,
        5,310,0,0,1495,1498,5,304,0,0,1496,1497,5,11,0,0,1497,1499,3,102,
        51,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,
        1502,5,304,0,0,1501,1486,1,0,0,0,1501,1493,1,0,0,0,1501,1500,1,0,
        0,0,1502,69,1,0,0,0,1503,1504,6,35,-1,0,1504,1505,3,76,38,0,1505,
        1524,1,0,0,0,1506,1520,10,2,0,0,1507,1508,5,37,0,0,1508,1509,5,119,
        0,0,1509,1521,3,76,38,0,1510,1511,3,72,36,0,1511,1512,5,119,0,0,
        1512,1513,3,70,35,0,1513,1514,3,74,37,0,1514,1521,1,0,0,0,1515,1516,
        5,155,0,0,1516,1517,3,72,36,0,1517,1518,5,119,0,0,1518,1519,3,76,
        38,0,1519,1521,1,0,0,0,1520,1507,1,0,0,0,1520,1510,1,0,0,0,1520,
        1515,1,0,0,0,1521,1523,1,0,0,0,1522,1506,1,0,0,0,1523,1526,1,0,0,
        0,1524,1522,1,0,0,0,1524,1525,1,0,0,0,1525,71,1,0,0,0,1526,1524,
        1,0,0,0,1527,1529,5,108,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,
        1529,1535,1,0,0,0,1530,1532,7,12,0,0,1531,1533,5,180,0,0,1532,1531,
        1,0,0,0,1532,1533,1,0,0,0,1533,1535,1,0,0,0,1534,1528,1,0,0,0,1534,
        1530,1,0,0,0,1535,73,1,0,0,0,1536,1537,5,173,0,0,1537,1551,3,122,
        61,0,1538,1539,5,274,0,0,1539,1540,5,313,0,0,1540,1545,3,244,122,
        0,1541,1542,5,312,0,0,1542,1544,3,244,122,0,1543,1541,1,0,0,0,1544,
        1547,1,0,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1548,1,0,0,
        0,1547,1545,1,0,0,0,1548,1549,5,314,0,0,1549,1551,1,0,0,0,1550,1536,
        1,0,0,0,1550,1538,1,0,0,0,1551,75,1,0,0,0,1552,1559,3,86,43,0,1553,
        1554,5,246,0,0,1554,1555,3,78,39,0,1555,1556,5,313,0,0,1556,1557,
        3,120,60,0,1557,1558,5,314,0,0,1558,1560,1,0,0,0,1559,1553,1,0,0,
        0,1559,1560,1,0,0,0,1560,77,1,0,0,0,1561,1562,7,13,0,0,1562,79,1,
        0,0,0,1563,1564,7,14,0,0,1564,81,1,0,0,0,1565,1572,5,72,0,0,1566,
        1568,5,258,0,0,1567,1569,3,152,76,0,1568,1567,1,0,0,0,1568,1569,
        1,0,0,0,1569,1570,1,0,0,0,1570,1572,3,84,42,0,1571,1565,1,0,0,0,
        1571,1566,1,0,0,0,1572,83,1,0,0,0,1573,1574,7,15,0,0,1574,1575,5,
        34,0,0,1575,85,1,0,0,0,1576,1659,3,100,50,0,1577,1578,5,149,0,0,
        1578,1589,5,313,0,0,1579,1580,5,184,0,0,1580,1581,5,19,0,0,1581,
        1586,3,120,60,0,1582,1583,5,312,0,0,1583,1585,3,120,60,0,1584,1582,
        1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,
        1590,1,0,0,0,1588,1586,1,0,0,0,1589,1579,1,0,0,0,1589,1590,1,0,0,
        0,1590,1601,1,0,0,0,1591,1592,5,178,0,0,1592,1593,5,19,0,0,1593,
        1598,3,50,25,0,1594,1595,5,312,0,0,1595,1597,3,50,25,0,1596,1594,
        1,0,0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,
        1602,1,0,0,0,1600,1598,1,0,0,0,1601,1591,1,0,0,0,1601,1602,1,0,0,
        0,1602,1612,1,0,0,0,1603,1604,5,151,0,0,1604,1609,3,88,44,0,1605,
        1606,5,312,0,0,1606,1608,3,88,44,0,1607,1605,1,0,0,0,1608,1611,1,
        0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,1613,1,0,0,0,1611,
        1609,1,0,0,0,1612,1603,1,0,0,0,1612,1613,1,0,0,0,1613,1615,1,0,0,
        0,1614,1616,3,90,45,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1620,
        1,0,0,0,1617,1618,5,4,0,0,1618,1619,5,146,0,0,1619,1621,3,94,47,
        0,1620,1617,1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1624,
        7,16,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,
        1626,5,189,0,0,1626,1627,5,313,0,0,1627,1628,3,188,94,0,1628,1638,
        5,314,0,0,1629,1630,5,241,0,0,1630,1635,3,96,48,0,1631,1632,5,312,
        0,0,1632,1634,3,96,48,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,1635,
        1633,1,0,0,0,1635,1636,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,
        0,1638,1629,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1641,
        5,54,0,0,1641,1646,3,98,49,0,1642,1643,5,312,0,0,1643,1645,3,98,
        49,0,1644,1642,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,
        1647,1,0,0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,0,1649,1657,5,314,
        0,0,1650,1652,5,11,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,
        1653,1,0,0,0,1653,1655,3,244,122,0,1654,1656,3,102,51,0,1655,1654,
        1,0,0,0,1655,1656,1,0,0,0,1656,1658,1,0,0,0,1657,1651,1,0,0,0,1657,
        1658,1,0,0,0,1658,1660,1,0,0,0,1659,1577,1,0,0,0,1659,1660,1,0,0,
        0,1660,87,1,0,0,0,1661,1662,3,120,60,0,1662,1663,5,11,0,0,1663,1664,
        3,244,122,0,1664,89,1,0,0,0,1665,1666,5,174,0,0,1666,1667,5,222,
        0,0,1667,1668,5,190,0,0,1668,1677,5,146,0,0,1669,1670,5,5,0,0,1670,
        1671,5,223,0,0,1671,1672,5,190,0,0,1672,1674,5,146,0,0,1673,1675,
        3,92,46,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1677,1,0,0,0,
        1676,1665,1,0,0,0,1676,1669,1,0,0,0,1677,91,1,0,0,0,1678,1679,5,
        236,0,0,1679,1680,5,68,0,0,1680,1688,5,148,0,0,1681,1682,5,172,0,
        0,1682,1683,5,68,0,0,1683,1688,5,148,0,0,1684,1685,5,288,0,0,1685,
        1686,5,268,0,0,1686,1688,5,223,0,0,1687,1678,1,0,0,0,1687,1681,1,
        0,0,0,1687,1684,1,0,0,0,1688,93,1,0,0,0,1689,1702,5,237,0,0,1690,
        1697,5,253,0,0,1691,1692,5,157,0,0,1692,1698,5,222,0,0,1693,1695,
        7,10,0,0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,1696,
        1698,3,244,122,0,1697,1691,1,0,0,0,1697,1694,1,0,0,0,1698,1703,1,
        0,0,0,1699,1700,5,187,0,0,1700,1701,5,131,0,0,1701,1703,5,222,0,
        0,1702,1690,1,0,0,0,1702,1699,1,0,0,0,1703,95,1,0,0,0,1704,1705,
        3,244,122,0,1705,1706,5,296,0,0,1706,1707,5,313,0,0,1707,1712,3,
        244,122,0,1708,1709,5,312,0,0,1709,1711,3,244,122,0,1710,1708,1,
        0,0,0,1711,1714,1,0,0,0,1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,
        1715,1,0,0,0,1714,1712,1,0,0,0,1715,1716,5,314,0,0,1716,97,1,0,0,
        0,1717,1718,3,244,122,0,1718,1719,5,11,0,0,1719,1720,3,120,60,0,
        1720,99,1,0,0,0,1721,1729,3,104,52,0,1722,1724,5,11,0,0,1723,1722,
        1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,1727,3,244,122,
        0,1726,1728,3,102,51,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,
        1730,1,0,0,0,1729,1723,1,0,0,0,1729,1730,1,0,0,0,1730,101,1,0,0,
        0,1731,1732,5,313,0,0,1732,1737,3,244,122,0,1733,1734,5,312,0,0,
        1734,1736,3,244,122,0,1735,1733,1,0,0,0,1736,1739,1,0,0,0,1737,1735,
        1,0,0,0,1737,1738,1,0,0,0,1738,1740,1,0,0,0,1739,1737,1,0,0,0,1740,
        1741,5,314,0,0,1741,103,1,0,0,0,1742,1744,3,232,116,0,1743,1745,
        3,234,117,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1780,1,0,0,
        0,1746,1747,5,313,0,0,1747,1748,3,22,11,0,1748,1749,5,314,0,0,1749,
        1780,1,0,0,0,1750,1751,5,269,0,0,1751,1752,5,313,0,0,1752,1757,3,
        120,60,0,1753,1754,5,312,0,0,1754,1756,3,120,60,0,1755,1753,1,0,
        0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,1760,
        1,0,0,0,1759,1757,1,0,0,0,1760,1763,5,314,0,0,1761,1762,5,288,0,
        0,1762,1764,5,179,0,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,1780,
        1,0,0,0,1765,1766,5,132,0,0,1766,1767,5,313,0,0,1767,1768,3,22,11,
        0,1768,1769,5,314,0,0,1769,1780,1,0,0,0,1770,1771,5,244,0,0,1771,
        1772,5,313,0,0,1772,1773,3,106,53,0,1773,1774,5,314,0,0,1774,1780,
        1,0,0,0,1775,1776,5,313,0,0,1776,1777,3,70,35,0,1777,1778,5,314,
        0,0,1778,1780,1,0,0,0,1779,1742,1,0,0,0,1779,1746,1,0,0,0,1779,1750,
        1,0,0,0,1779,1765,1,0,0,0,1779,1770,1,0,0,0,1779,1775,1,0,0,0,1780,
        105,1,0,0,0,1781,1782,3,232,116,0,1782,1791,5,313,0,0,1783,1788,
        3,108,54,0,1784,1785,5,312,0,0,1785,1787,3,108,54,0,1786,1784,1,
        0,0,0,1787,1790,1,0,0,0,1788,1786,1,0,0,0,1788,1789,1,0,0,0,1789,
        1792,1,0,0,0,1790,1788,1,0,0,0,1791,1783,1,0,0,0,1791,1792,1,0,0,
        0,1792,1802,1,0,0,0,1793,1794,5,35,0,0,1794,1799,3,118,59,0,1795,
        1796,5,312,0,0,1796,1798,3,118,59,0,1797,1795,1,0,0,0,1798,1801,
        1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,1803,1,0,0,0,1801,
        1799,1,0,0,0,1802,1793,1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,
        0,1804,1805,5,314,0,0,1805,107,1,0,0,0,1806,1807,3,244,122,0,1807,
        1808,5,323,0,0,1808,1810,1,0,0,0,1809,1806,1,0,0,0,1809,1810,1,0,
        0,0,1810,1814,1,0,0,0,1811,1815,3,110,55,0,1812,1815,3,114,57,0,
        1813,1815,3,120,60,0,1814,1811,1,0,0,0,1814,1812,1,0,0,0,1814,1813,
        1,0,0,0,1815,109,1,0,0,0,1816,1834,3,112,56,0,1817,1818,5,184,0,
        0,1818,1832,5,19,0,0,1819,1828,5,313,0,0,1820,1825,3,120,60,0,1821,
        1822,5,312,0,0,1822,1824,3,120,60,0,1823,1821,1,0,0,0,1824,1827,
        1,0,0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,1829,1,0,0,0,1827,
        1825,1,0,0,0,1828,1820,1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,
        0,1830,1833,5,314,0,0,1831,1833,3,120,60,0,1832,1819,1,0,0,0,1832,
        1831,1,0,0,0,1833,1835,1,0,0,0,1834,1817,1,0,0,0,1834,1835,1,0,0,
        0,1835,1842,1,0,0,0,1836,1837,5,200,0,0,1837,1838,5,284,0,0,1838,
        1843,5,68,0,0,1839,1840,5,127,0,0,1840,1841,5,284,0,0,1841,1843,
        5,68,0,0,1842,1836,1,0,0,0,1842,1839,1,0,0,0,1842,1843,1,0,0,0,1843,
        1860,1,0,0,0,1844,1845,5,178,0,0,1845,1858,5,19,0,0,1846,1847,5,
        313,0,0,1847,1852,3,50,25,0,1848,1849,5,312,0,0,1849,1851,3,50,25,
        0,1850,1848,1,0,0,0,1851,1854,1,0,0,0,1852,1850,1,0,0,0,1852,1853,
        1,0,0,0,1853,1855,1,0,0,0,1854,1852,1,0,0,0,1855,1856,5,314,0,0,
        1856,1859,1,0,0,0,1857,1859,3,50,25,0,1858,1846,1,0,0,0,1858,1857,
        1,0,0,0,1859,1861,1,0,0,0,1860,1844,1,0,0,0,1860,1861,1,0,0,0,1861,
        111,1,0,0,0,1862,1863,5,244,0,0,1863,1864,5,313,0,0,1864,1865,3,
        232,116,0,1865,1873,5,314,0,0,1866,1868,5,11,0,0,1867,1866,1,0,0,
        0,1867,1868,1,0,0,0,1868,1869,1,0,0,0,1869,1871,3,244,122,0,1870,
        1872,3,102,51,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,
        0,0,0,1873,1867,1,0,0,0,1873,1874,1,0,0,0,1874,1889,1,0,0,0,1875,
        1876,5,244,0,0,1876,1877,5,313,0,0,1877,1878,3,22,11,0,1878,1886,
        5,314,0,0,1879,1881,5,11,0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,
        1881,1882,1,0,0,0,1882,1884,3,244,122,0,1883,1885,3,102,51,0,1884,
        1883,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1880,1,0,0,
        0,1886,1887,1,0,0,0,1887,1889,1,0,0,0,1888,1862,1,0,0,0,1888,1875,
        1,0,0,0,1889,113,1,0,0,0,1890,1891,5,60,0,0,1891,1892,5,313,0,0,
        1892,1897,3,116,58,0,1893,1894,5,312,0,0,1894,1896,3,116,58,0,1895,
        1893,1,0,0,0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,
        0,1898,1900,1,0,0,0,1899,1897,1,0,0,0,1900,1901,5,314,0,0,1901,1909,
        1,0,0,0,1902,1903,5,24,0,0,1903,1904,5,313,0,0,1904,1905,5,166,0,
        0,1905,1906,5,11,0,0,1906,1907,5,60,0,0,1907,1909,5,314,0,0,1908,
        1890,1,0,0,0,1908,1902,1,0,0,0,1909,115,1,0,0,0,1910,1912,3,244,
        122,0,1911,1913,3,168,84,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,
        117,1,0,0,0,1914,1915,5,313,0,0,1915,1916,3,232,116,0,1916,1917,
        5,312,0,0,1917,1922,3,232,116,0,1918,1919,5,312,0,0,1919,1921,3,
        232,116,0,1920,1918,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,
        1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1922,1,0,0,0,1925,1926,
        5,314,0,0,1926,119,1,0,0,0,1927,1928,3,122,61,0,1928,121,1,0,0,0,
        1929,1930,6,61,-1,0,1930,1932,3,126,63,0,1931,1933,3,124,62,0,1932,
        1931,1,0,0,0,1932,1933,1,0,0,0,1933,1937,1,0,0,0,1934,1935,5,165,
        0,0,1935,1937,3,122,61,3,1936,1929,1,0,0,0,1936,1934,1,0,0,0,1937,
        1946,1,0,0,0,1938,1939,10,2,0,0,1939,1940,5,8,0,0,1940,1945,3,122,
        61,3,1941,1942,10,1,0,0,1942,1943,5,177,0,0,1943,1945,3,122,61,2,
        1944,1938,1,0,0,0,1944,1941,1,0,0,0,1945,1948,1,0,0,0,1946,1944,
        1,0,0,0,1946,1947,1,0,0,0,1947,123,1,0,0,0,1948,1946,1,0,0,0,1949,
        1950,3,156,78,0,1950,1951,3,126,63,0,1951,2011,1,0,0,0,1952,1953,
        3,156,78,0,1953,1954,3,158,79,0,1954,1955,5,313,0,0,1955,1956,3,
        22,11,0,1956,1957,5,314,0,0,1957,2011,1,0,0,0,1958,1960,5,165,0,
        0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,0,0,1961,1962,
        5,17,0,0,1962,1963,3,126,63,0,1963,1964,5,8,0,0,1964,1965,3,126,
        63,0,1965,2011,1,0,0,0,1966,1968,5,165,0,0,1967,1966,1,0,0,0,1967,
        1968,1,0,0,0,1968,1969,1,0,0,0,1969,1970,5,105,0,0,1970,1971,5,313,
        0,0,1971,1976,3,120,60,0,1972,1973,5,312,0,0,1973,1975,3,120,60,
        0,1974,1972,1,0,0,0,1975,1978,1,0,0,0,1976,1974,1,0,0,0,1976,1977,
        1,0,0,0,1977,1979,1,0,0,0,1978,1976,1,0,0,0,1979,1980,5,314,0,0,
        1980,2011,1,0,0,0,1981,1983,5,165,0,0,1982,1981,1,0,0,0,1982,1983,
        1,0,0,0,1983,1984,1,0,0,0,1984,1985,5,105,0,0,1985,1986,5,313,0,
        0,1986,1987,3,22,11,0,1987,1988,5,314,0,0,1988,2011,1,0,0,0,1989,
        1991,5,165,0,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,
        0,0,1992,1993,5,137,0,0,1993,1996,3,126,63,0,1994,1995,5,73,0,0,
        1995,1997,3,126,63,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,2011,
        1,0,0,0,1998,2000,5,116,0,0,1999,2001,5,165,0,0,2000,1999,1,0,0,
        0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2011,5,166,0,0,2003,2005,
        5,116,0,0,2004,2006,5,165,0,0,2005,2004,1,0,0,0,2005,2006,1,0,0,
        0,2006,2007,1,0,0,0,2007,2008,5,62,0,0,2008,2009,5,88,0,0,2009,2011,
        3,126,63,0,2010,1949,1,0,0,0,2010,1952,1,0,0,0,2010,1959,1,0,0,0,
        2010,1967,1,0,0,0,2010,1982,1,0,0,0,2010,1990,1,0,0,0,2010,1998,
        1,0,0,0,2010,2003,1,0,0,0,2011,125,1,0,0,0,2012,2013,6,63,-1,0,2013,
        2017,3,128,64,0,2014,2015,7,17,0,0,2015,2017,3,126,63,4,2016,2012,
        1,0,0,0,2016,2014,1,0,0,0,2017,2032,1,0,0,0,2018,2019,10,3,0,0,2019,
        2020,7,18,0,0,2020,2031,3,126,63,4,2021,2022,10,2,0,0,2022,2023,
        7,17,0,0,2023,2031,3,126,63,3,2024,2025,10,1,0,0,2025,2026,5,307,
        0,0,2026,2031,3,126,63,2,2027,2028,10,5,0,0,2028,2029,5,13,0,0,2029,
        2031,3,154,77,0,2030,2018,1,0,0,0,2030,2021,1,0,0,0,2030,2024,1,
        0,0,0,2030,2027,1,0,0,0,2031,2034,1,0,0,0,2032,2030,1,0,0,0,2032,
        2033,1,0,0,0,2033,127,1,0,0,0,2034,2032,1,0,0,0,2035,2036,6,64,-1,
        0,2036,2489,5,166,0,0,2037,2489,3,162,81,0,2038,2039,3,244,122,0,
        2039,2040,3,152,76,0,2040,2489,1,0,0,0,2041,2042,5,65,0,0,2042,2043,
        5,196,0,0,2043,2489,3,152,76,0,2044,2489,3,246,123,0,2045,2489,3,
        160,80,0,2046,2489,3,152,76,0,2047,2489,5,329,0,0,2048,2489,5,308,
        0,0,2049,2050,5,194,0,0,2050,2051,5,313,0,0,2051,2052,3,126,63,0,
        2052,2053,5,105,0,0,2053,2054,3,126,63,0,2054,2055,5,314,0,0,2055,
        2489,1,0,0,0,2056,2057,5,313,0,0,2057,2060,3,120,60,0,2058,2059,
        5,312,0,0,2059,2061,3,120,60,0,2060,2058,1,0,0,0,2061,2062,1,0,0,
        0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,2064,1,0,0,0,2064,2065,
        5,314,0,0,2065,2489,1,0,0,0,2066,2067,5,222,0,0,2067,2068,5,313,
        0,0,2068,2073,3,120,60,0,2069,2070,5,312,0,0,2070,2072,3,120,60,
        0,2071,2069,1,0,0,0,2072,2075,1,0,0,0,2073,2071,1,0,0,0,2073,2074,
        1,0,0,0,2074,2076,1,0,0,0,2075,2073,1,0,0,0,2076,2077,5,314,0,0,
        2077,2489,1,0,0,0,2078,2079,5,139,0,0,2079,2081,5,313,0,0,2080,2082,
        3,66,33,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2083,1,0,0,0,
        2083,2086,3,120,60,0,2084,2085,5,312,0,0,2085,2087,3,152,76,0,2086,
        2084,1,0,0,0,2086,2087,1,0,0,0,2087,2091,1,0,0,0,2088,2089,5,173,
        0,0,2089,2090,5,183,0,0,2090,2092,3,82,41,0,2091,2088,1,0,0,0,2091,
        2092,1,0,0,0,2092,2093,1,0,0,0,2093,2094,5,314,0,0,2094,2095,5,289,
        0,0,2095,2096,5,97,0,0,2096,2097,5,313,0,0,2097,2098,5,178,0,0,2098,
        2099,5,19,0,0,2099,2104,3,50,25,0,2100,2101,5,312,0,0,2101,2103,
        3,50,25,0,2102,2100,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,
        2104,2105,1,0,0,0,2105,2107,1,0,0,0,2106,2104,1,0,0,0,2107,2108,
        5,314,0,0,2108,2110,1,0,0,0,2109,2111,3,176,88,0,2110,2109,1,0,0,
        0,2110,2111,1,0,0,0,2111,2489,1,0,0,0,2112,2114,3,148,74,0,2113,
        2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2116,3,232,
        116,0,2116,2120,5,313,0,0,2117,2118,3,244,122,0,2118,2119,5,310,
        0,0,2119,2121,1,0,0,0,2120,2117,1,0,0,0,2120,2121,1,0,0,0,2121,2122,
        1,0,0,0,2122,2123,5,304,0,0,2123,2125,5,314,0,0,2124,2126,3,176,
        88,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,2128,1,0,0,0,2127,
        2129,3,180,90,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2489,1,
        0,0,0,2130,2132,3,148,74,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,
        2133,1,0,0,0,2133,2134,3,232,116,0,2134,2146,5,313,0,0,2135,2137,
        3,66,33,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,
        2138,2143,3,120,60,0,2139,2140,5,312,0,0,2140,2142,3,120,60,0,2141,
        2139,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,0,0,0,2143,2144,1,0,0,
        0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2146,2136,1,0,0,0,2146,2147,
        1,0,0,0,2147,2158,1,0,0,0,2148,2149,5,178,0,0,2149,2150,5,19,0,0,
        2150,2155,3,50,25,0,2151,2152,5,312,0,0,2152,2154,3,50,25,0,2153,
        2151,1,0,0,0,2154,2157,1,0,0,0,2155,2153,1,0,0,0,2155,2156,1,0,0,
        0,2156,2159,1,0,0,0,2157,2155,1,0,0,0,2158,2148,1,0,0,0,2158,2159,
        1,0,0,0,2159,2160,1,0,0,0,2160,2162,5,314,0,0,2161,2163,3,176,88,
        0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2168,1,0,0,0,2164,2166,
        3,150,75,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,
        2167,2169,3,180,90,0,2168,2165,1,0,0,0,2168,2169,1,0,0,0,2169,2489,
        1,0,0,0,2170,2171,3,244,122,0,2171,2172,3,180,90,0,2172,2489,1,0,
        0,0,2173,2174,3,244,122,0,2174,2175,5,322,0,0,2175,2176,3,120,60,
        0,2176,2489,1,0,0,0,2177,2186,5,313,0,0,2178,2183,3,244,122,0,2179,
        2180,5,312,0,0,2180,2182,3,244,122,0,2181,2179,1,0,0,0,2182,2185,
        1,0,0,0,2183,2181,1,0,0,0,2183,2184,1,0,0,0,2184,2187,1,0,0,0,2185,
        2183,1,0,0,0,2186,2178,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,
        0,2188,2189,5,314,0,0,2189,2190,5,322,0,0,2190,2489,3,120,60,0,2191,
        2192,5,313,0,0,2192,2193,3,22,11,0,2193,2194,5,314,0,0,2194,2489,
        1,0,0,0,2195,2196,5,77,0,0,2196,2197,5,313,0,0,2197,2198,3,22,11,
        0,2198,2199,5,314,0,0,2199,2489,1,0,0,0,2200,2201,5,23,0,0,2201,
        2203,3,120,60,0,2202,2204,3,174,87,0,2203,2202,1,0,0,0,2204,2205,
        1,0,0,0,2205,2203,1,0,0,0,2205,2206,1,0,0,0,2206,2209,1,0,0,0,2207,
        2208,5,67,0,0,2208,2210,3,120,60,0,2209,2207,1,0,0,0,2209,2210,1,
        0,0,0,2210,2211,1,0,0,0,2211,2212,5,71,0,0,2212,2489,1,0,0,0,2213,
        2215,5,23,0,0,2214,2216,3,174,87,0,2215,2214,1,0,0,0,2216,2217,1,
        0,0,0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,2221,1,0,0,0,2219,
        2220,5,67,0,0,2220,2222,3,120,60,0,2221,2219,1,0,0,0,2221,2222,1,
        0,0,0,2222,2223,1,0,0,0,2223,2224,5,71,0,0,2224,2489,1,0,0,0,2225,
        2226,5,24,0,0,2226,2227,5,313,0,0,2227,2228,3,120,60,0,2228,2229,
        5,11,0,0,2229,2230,3,168,84,0,2230,2231,5,314,0,0,2231,2489,1,0,
        0,0,2232,2233,5,259,0,0,2233,2234,5,313,0,0,2234,2235,3,120,60,0,
        2235,2236,5,11,0,0,2236,2237,3,168,84,0,2237,2238,5,314,0,0,2238,
        2489,1,0,0,0,2239,2240,5,10,0,0,2240,2249,5,315,0,0,2241,2246,3,
        120,60,0,2242,2243,5,312,0,0,2243,2245,3,120,60,0,2244,2242,1,0,
        0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,2247,2250,
        1,0,0,0,2248,2246,1,0,0,0,2249,2241,1,0,0,0,2249,2250,1,0,0,0,2250,
        2251,1,0,0,0,2251,2489,5,316,0,0,2252,2489,3,244,122,0,2253,2489,
        5,41,0,0,2254,2258,5,45,0,0,2255,2256,5,313,0,0,2256,2257,5,330,
        0,0,2257,2259,5,314,0,0,2258,2255,1,0,0,0,2258,2259,1,0,0,0,2259,
        2489,1,0,0,0,2260,2264,5,46,0,0,2261,2262,5,313,0,0,2262,2263,5,
        330,0,0,2263,2265,5,314,0,0,2264,2261,1,0,0,0,2264,2265,1,0,0,0,
        2265,2489,1,0,0,0,2266,2270,5,141,0,0,2267,2268,5,313,0,0,2268,2269,
        5,330,0,0,2269,2271,5,314,0,0,2270,2267,1,0,0,0,2270,2271,1,0,0,
        0,2271,2489,1,0,0,0,2272,2276,5,142,0,0,2273,2274,5,313,0,0,2274,
        2275,5,330,0,0,2275,2277,5,314,0,0,2276,2273,1,0,0,0,2276,2277,1,
        0,0,0,2277,2489,1,0,0,0,2278,2489,5,47,0,0,2279,2489,5,40,0,0,2280,
        2489,5,44,0,0,2281,2489,5,42,0,0,2282,2283,5,256,0,0,2283,2291,5,
        313,0,0,2284,2286,3,80,40,0,2285,2284,1,0,0,0,2285,2286,1,0,0,0,
        2286,2288,1,0,0,0,2287,2289,3,126,63,0,2288,2287,1,0,0,0,2288,2289,
        1,0,0,0,2289,2290,1,0,0,0,2290,2292,5,88,0,0,2291,2285,1,0,0,0,2291,
        2292,1,0,0,0,2292,2293,1,0,0,0,2293,2294,3,126,63,0,2294,2295,5,
        314,0,0,2295,2489,1,0,0,0,2296,2297,5,256,0,0,2297,2298,5,313,0,
        0,2298,2299,3,126,63,0,2299,2300,5,312,0,0,2300,2301,3,126,63,0,
        2301,2302,5,314,0,0,2302,2489,1,0,0,0,2303,2304,5,242,0,0,2304,2305,
        5,313,0,0,2305,2306,3,126,63,0,2306,2307,5,88,0,0,2307,2310,3,126,
        63,0,2308,2309,5,86,0,0,2309,2311,3,126,63,0,2310,2308,1,0,0,0,2310,
        2311,1,0,0,0,2311,2312,1,0,0,0,2312,2313,5,314,0,0,2313,2489,1,0,
        0,0,2314,2315,5,164,0,0,2315,2316,5,313,0,0,2316,2319,3,126,63,0,
        2317,2318,5,312,0,0,2318,2320,3,166,83,0,2319,2317,1,0,0,0,2319,
        2320,1,0,0,0,2320,2321,1,0,0,0,2321,2322,5,314,0,0,2322,2489,1,0,
        0,0,2323,2324,5,79,0,0,2324,2325,5,313,0,0,2325,2326,3,244,122,0,
        2326,2327,5,88,0,0,2327,2328,3,126,63,0,2328,2329,5,314,0,0,2329,
        2489,1,0,0,0,2330,2331,5,313,0,0,2331,2332,3,120,60,0,2332,2333,
        5,314,0,0,2333,2489,1,0,0,0,2334,2335,5,98,0,0,2335,2344,5,313,0,
        0,2336,2341,3,232,116,0,2337,2338,5,312,0,0,2338,2340,3,232,116,
        0,2339,2337,1,0,0,0,2340,2343,1,0,0,0,2341,2339,1,0,0,0,2341,2342,
        1,0,0,0,2342,2345,1,0,0,0,2343,2341,1,0,0,0,2344,2336,1,0,0,0,2344,
        2345,1,0,0,0,2345,2346,1,0,0,0,2346,2489,5,314,0,0,2347,2348,5,122,
        0,0,2348,2349,5,313,0,0,2349,2354,3,130,65,0,2350,2351,3,138,69,
        0,2351,2352,5,173,0,0,2352,2353,5,72,0,0,2353,2355,1,0,0,0,2354,
        2350,1,0,0,0,2354,2355,1,0,0,0,2355,2356,1,0,0,0,2356,2357,5,314,
        0,0,2357,2489,1,0,0,0,2358,2359,5,126,0,0,2359,2360,5,313,0,0,2360,
        2363,3,130,65,0,2361,2362,5,214,0,0,2362,2364,3,168,84,0,2363,2361,
        1,0,0,0,2363,2364,1,0,0,0,2364,2369,1,0,0,0,2365,2366,3,140,70,0,
        2366,2367,5,173,0,0,2367,2368,5,68,0,0,2368,2370,1,0,0,0,2369,2365,
        1,0,0,0,2369,2370,1,0,0,0,2370,2375,1,0,0,0,2371,2372,3,140,70,0,
        2372,2373,5,173,0,0,2373,2374,5,72,0,0,2374,2376,1,0,0,0,2375,2371,
        1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2378,5,314,0,0,
        2378,2489,1,0,0,0,2379,2380,5,124,0,0,2380,2381,5,313,0,0,2381,2388,
        3,130,65,0,2382,2383,5,214,0,0,2383,2386,3,168,84,0,2384,2385,5,
        87,0,0,2385,2387,3,134,67,0,2386,2384,1,0,0,0,2386,2387,1,0,0,0,
        2387,2389,1,0,0,0,2388,2382,1,0,0,0,2388,2389,1,0,0,0,2389,2393,
        1,0,0,0,2390,2391,3,142,71,0,2391,2392,5,292,0,0,2392,2394,1,0,0,
        0,2393,2390,1,0,0,0,2393,2394,1,0,0,0,2394,2402,1,0,0,0,2395,2396,
        7,19,0,0,2396,2400,5,201,0,0,2397,2398,5,173,0,0,2398,2399,5,225,
        0,0,2399,2401,5,248,0,0,2400,2397,1,0,0,0,2400,2401,1,0,0,0,2401,
        2403,1,0,0,0,2402,2395,1,0,0,0,2402,2403,1,0,0,0,2403,2408,1,0,0,
        0,2404,2405,3,144,72,0,2405,2406,5,173,0,0,2406,2407,5,68,0,0,2407,
        2409,1,0,0,0,2408,2404,1,0,0,0,2408,2409,1,0,0,0,2409,2414,1,0,0,
        0,2410,2411,3,144,72,0,2411,2412,5,173,0,0,2412,2413,5,72,0,0,2413,
        2415,1,0,0,0,2414,2410,1,0,0,0,2414,2415,1,0,0,0,2415,2416,1,0,0,
        0,2416,2417,5,314,0,0,2417,2489,1,0,0,0,2418,2419,5,123,0,0,2419,
        2448,5,313,0,0,2420,2425,3,146,73,0,2421,2422,5,312,0,0,2422,2424,
        3,146,73,0,2423,2421,1,0,0,0,2424,2427,1,0,0,0,2425,2423,1,0,0,0,
        2425,2426,1,0,0,0,2426,2434,1,0,0,0,2427,2425,1,0,0,0,2428,2429,
        5,166,0,0,2429,2430,5,173,0,0,2430,2435,5,166,0,0,2431,2432,5,1,
        0,0,2432,2433,5,173,0,0,2433,2435,5,166,0,0,2434,2428,1,0,0,0,2434,
        2431,1,0,0,0,2434,2435,1,0,0,0,2435,2446,1,0,0,0,2436,2437,5,288,
        0,0,2437,2439,5,266,0,0,2438,2440,5,129,0,0,2439,2438,1,0,0,0,2439,
        2440,1,0,0,0,2440,2447,1,0,0,0,2441,2442,5,290,0,0,2442,2444,5,266,
        0,0,2443,2445,5,129,0,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,
        2447,1,0,0,0,2446,2436,1,0,0,0,2446,2441,1,0,0,0,2446,2447,1,0,0,
        0,2447,2449,1,0,0,0,2448,2420,1,0,0,0,2448,2449,1,0,0,0,2449,2456,
        1,0,0,0,2450,2451,5,214,0,0,2451,2454,3,168,84,0,2452,2453,5,87,
        0,0,2453,2455,3,134,67,0,2454,2452,1,0,0,0,2454,2455,1,0,0,0,2455,
        2457,1,0,0,0,2456,2450,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,0,
        0,2458,2489,5,314,0,0,2459,2460,5,121,0,0,2460,2477,5,313,0,0,2461,
        2466,3,132,66,0,2462,2463,5,312,0,0,2463,2465,3,132,66,0,2464,2462,
        1,0,0,0,2465,2468,1,0,0,0,2466,2464,1,0,0,0,2466,2467,1,0,0,0,2467,
        2475,1,0,0,0,2468,2466,1,0,0,0,2469,2470,5,166,0,0,2470,2471,5,173,
        0,0,2471,2476,5,166,0,0,2472,2473,5,1,0,0,2473,2474,5,173,0,0,2474,
        2476,5,166,0,0,2475,2469,1,0,0,0,2475,2472,1,0,0,0,2475,2476,1,0,
        0,0,2476,2478,1,0,0,0,2477,2461,1,0,0,0,2477,2478,1,0,0,0,2478,2485,
        1,0,0,0,2479,2480,5,214,0,0,2480,2483,3,168,84,0,2481,2482,5,87,
        0,0,2482,2484,3,134,67,0,2483,2481,1,0,0,0,2483,2484,1,0,0,0,2484,
        2486,1,0,0,0,2485,2479,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,
        0,2487,2489,5,314,0,0,2488,2035,1,0,0,0,2488,2037,1,0,0,0,2488,2038,
        1,0,0,0,2488,2041,1,0,0,0,2488,2044,1,0,0,0,2488,2045,1,0,0,0,2488,
        2046,1,0,0,0,2488,2047,1,0,0,0,2488,2048,1,0,0,0,2488,2049,1,0,0,
        0,2488,2056,1,0,0,0,2488,2066,1,0,0,0,2488,2078,1,0,0,0,2488,2113,
        1,0,0,0,2488,2131,1,0,0,0,2488,2170,1,0,0,0,2488,2173,1,0,0,0,2488,
        2177,1,0,0,0,2488,2191,1,0,0,0,2488,2195,1,0,0,0,2488,2200,1,0,0,
        0,2488,2213,1,0,0,0,2488,2225,1,0,0,0,2488,2232,1,0,0,0,2488,2239,
        1,0,0,0,2488,2252,1,0,0,0,2488,2253,1,0,0,0,2488,2254,1,0,0,0,2488,
        2260,1,0,0,0,2488,2266,1,0,0,0,2488,2272,1,0,0,0,2488,2278,1,0,0,
        0,2488,2279,1,0,0,0,2488,2280,1,0,0,0,2488,2281,1,0,0,0,2488,2282,
        1,0,0,0,2488,2296,1,0,0,0,2488,2303,1,0,0,0,2488,2314,1,0,0,0,2488,
        2323,1,0,0,0,2488,2330,1,0,0,0,2488,2334,1,0,0,0,2488,2347,1,0,0,
        0,2488,2358,1,0,0,0,2488,2379,1,0,0,0,2488,2418,1,0,0,0,2488,2459,
        1,0,0,0,2489,2500,1,0,0,0,2490,2491,10,24,0,0,2491,2492,5,315,0,
        0,2492,2493,3,126,63,0,2493,2494,5,316,0,0,2494,2499,1,0,0,0,2495,
        2496,10,22,0,0,2496,2497,5,310,0,0,2497,2499,3,244,122,0,2498,2490,
        1,0,0,0,2498,2495,1,0,0,0,2499,2502,1,0,0,0,2500,2498,1,0,0,0,2500,
        2501,1,0,0,0,2501,129,1,0,0,0,2502,2500,1,0,0,0,2503,2504,3,132,
        66,0,2504,2505,5,312,0,0,2505,2515,3,152,76,0,2506,2507,5,186,0,
        0,2507,2512,3,136,68,0,2508,2509,5,312,0,0,2509,2511,3,136,68,0,
        2510,2508,1,0,0,0,2511,2514,1,0,0,0,2512,2510,1,0,0,0,2512,2513,
        1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2515,2506,1,0,0,0,2515,
        2516,1,0,0,0,2516,131,1,0,0,0,2517,2520,3,120,60,0,2518,2519,5,87,
        0,0,2519,2521,3,134,67,0,2520,2518,1,0,0,0,2520,2521,1,0,0,0,2521,
        133,1,0,0,0,2522,2525,5,120,0,0,2523,2524,5,70,0,0,2524,2526,7,20,
        0,0,2525,2523,1,0,0,0,2525,2526,1,0,0,0,2526,135,1,0,0,0,2527,2528,
        3,132,66,0,2528,2529,5,11,0,0,2529,2530,3,244,122,0,2530,137,1,0,
        0,0,2531,2532,7,21,0,0,2532,139,1,0,0,0,2533,2538,5,72,0,0,2534,
        2538,5,166,0,0,2535,2536,5,53,0,0,2536,2538,3,120,60,0,2537,2533,
        1,0,0,0,2537,2534,1,0,0,0,2537,2535,1,0,0,0,2538,141,1,0,0,0,2539,
        2541,5,290,0,0,2540,2542,5,10,0,0,2541,2540,1,0,0,0,2541,2542,1,
        0,0,0,2542,2551,1,0,0,0,2543,2545,5,288,0,0,2544,2546,7,22,0,0,2545,
        2544,1,0,0,0,2545,2546,1,0,0,0,2546,2548,1,0,0,0,2547,2549,5,10,
        0,0,2548,2547,1,0,0,0,2548,2549,1,0,0,0,2549,2551,1,0,0,0,2550,2539,
        1,0,0,0,2550,2543,1,0,0,0,2551,143,1,0,0,0,2552,2557,5,72,0,0,2553,
        2557,5,166,0,0,2554,2555,5,68,0,0,2555,2557,7,23,0,0,2556,2552,1,
        0,0,0,2556,2553,1,0,0,0,2556,2554,1,0,0,0,2557,145,1,0,0,0,2558,
        2560,5,128,0,0,2559,2558,1,0,0,0,2559,2560,1,0,0,0,2560,2561,1,0,
        0,0,2561,2562,3,120,60,0,2562,2563,5,279,0,0,2563,2564,3,132,66,
        0,2564,2570,1,0,0,0,2565,2566,3,120,60,0,2566,2567,5,311,0,0,2567,
        2568,3,132,66,0,2568,2570,1,0,0,0,2569,2559,1,0,0,0,2569,2565,1,
        0,0,0,2570,147,1,0,0,0,2571,2572,7,24,0,0,2572,149,1,0,0,0,2573,
        2574,5,103,0,0,2574,2578,5,168,0,0,2575,2576,5,211,0,0,2576,2578,
        5,168,0,0,2577,2573,1,0,0,0,2577,2575,1,0,0,0,2578,151,1,0,0,0,2579,
        2586,5,327,0,0,2580,2583,5,328,0,0,2581,2582,5,261,0,0,2582,2584,
        5,327,0,0,2583,2581,1,0,0,0,2583,2584,1,0,0,0,2584,2586,1,0,0,0,
        2585,2579,1,0,0,0,2585,2580,1,0,0,0,2586,153,1,0,0,0,2587,2588,5,
        251,0,0,2588,2589,5,295,0,0,2589,2594,3,162,81,0,2590,2591,5,251,
        0,0,2591,2592,5,295,0,0,2592,2594,3,152,76,0,2593,2587,1,0,0,0,2593,
        2590,1,0,0,0,2594,155,1,0,0,0,2595,2596,7,25,0,0,2596,157,1,0,0,
        0,2597,2598,7,26,0,0,2598,159,1,0,0,0,2599,2600,7,27,0,0,2600,161,
        1,0,0,0,2601,2603,5,112,0,0,2602,2604,7,17,0,0,2603,2602,1,0,0,0,
        2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2606,3,152,76,0,2606,2609,
        3,164,82,0,2607,2608,5,253,0,0,2608,2610,3,164,82,0,2609,2607,1,
        0,0,0,2609,2610,1,0,0,0,2610,163,1,0,0,0,2611,2612,7,28,0,0,2612,
        165,1,0,0,0,2613,2614,7,29,0,0,2614,167,1,0,0,0,2615,2616,6,84,-1,
        0,2616,2617,5,222,0,0,2617,2618,5,313,0,0,2618,2623,3,170,85,0,2619,
        2620,5,312,0,0,2620,2622,3,170,85,0,2621,2619,1,0,0,0,2622,2625,
        1,0,0,0,2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,2626,1,0,0,0,2625,
        2623,1,0,0,0,2626,2627,5,314,0,0,2627,2707,1,0,0,0,2628,2629,5,112,
        0,0,2629,2632,3,164,82,0,2630,2631,5,253,0,0,2631,2633,3,164,82,
        0,2632,2630,1,0,0,0,2632,2633,1,0,0,0,2633,2707,1,0,0,0,2634,2639,
        5,252,0,0,2635,2636,5,313,0,0,2636,2637,3,172,86,0,2637,2638,5,314,
        0,0,2638,2640,1,0,0,0,2639,2635,1,0,0,0,2639,2640,1,0,0,0,2640,2644,
        1,0,0,0,2641,2642,5,290,0,0,2642,2643,5,251,0,0,2643,2645,5,295,
        0,0,2644,2641,1,0,0,0,2644,2645,1,0,0,0,2645,2707,1,0,0,0,2646,2651,
        5,252,0,0,2647,2648,5,313,0,0,2648,2649,3,172,86,0,2649,2650,5,314,
        0,0,2650,2652,1,0,0,0,2651,2647,1,0,0,0,2651,2652,1,0,0,0,2652,2653,
        1,0,0,0,2653,2654,5,288,0,0,2654,2655,5,251,0,0,2655,2707,5,295,
        0,0,2656,2661,5,251,0,0,2657,2658,5,313,0,0,2658,2659,3,172,86,0,
        2659,2660,5,314,0,0,2660,2662,1,0,0,0,2661,2657,1,0,0,0,2661,2662,
        1,0,0,0,2662,2666,1,0,0,0,2663,2664,5,290,0,0,2664,2665,5,251,0,
        0,2665,2667,5,295,0,0,2666,2663,1,0,0,0,2666,2667,1,0,0,0,2667,2707,
        1,0,0,0,2668,2673,5,251,0,0,2669,2670,5,313,0,0,2670,2671,3,172,
        86,0,2671,2672,5,314,0,0,2672,2674,1,0,0,0,2673,2669,1,0,0,0,2673,
        2674,1,0,0,0,2674,2675,1,0,0,0,2675,2676,5,288,0,0,2676,2677,5,251,
        0,0,2677,2707,5,295,0,0,2678,2679,5,65,0,0,2679,2707,5,196,0,0,2680,
        2681,5,10,0,0,2681,2682,5,298,0,0,2682,2683,3,168,84,0,2683,2684,
        5,300,0,0,2684,2707,1,0,0,0,2685,2686,5,145,0,0,2686,2687,5,298,
        0,0,2687,2688,3,168,84,0,2688,2689,5,312,0,0,2689,2690,3,168,84,
        0,2690,2691,5,300,0,0,2691,2707,1,0,0,0,2692,2704,3,244,122,0,2693,
        2694,5,313,0,0,2694,2699,3,172,86,0,2695,2696,5,312,0,0,2696,2698,
        3,172,86,0,2697,2695,1,0,0,0,2698,2701,1,0,0,0,2699,2697,1,0,0,0,
        2699,2700,1,0,0,0,2700,2702,1,0,0,0,2701,2699,1,0,0,0,2702,2703,
        5,314,0,0,2703,2705,1,0,0,0,2704,2693,1,0,0,0,2704,2705,1,0,0,0,
        2705,2707,1,0,0,0,2706,2615,1,0,0,0,2706,2628,1,0,0,0,2706,2634,
        1,0,0,0,2706,2646,1,0,0,0,2706,2656,1,0,0,0,2706,2668,1,0,0,0,2706,
        2678,1,0,0,0,2706,2680,1,0,0,0,2706,2685,1,0,0,0,2706,2692,1,0,0,
        0,2707,2717,1,0,0,0,2708,2709,10,2,0,0,2709,2713,5,10,0,0,2710,2711,
        5,315,0,0,2711,2712,5,330,0,0,2712,2714,5,316,0,0,2713,2710,1,0,
        0,0,2713,2714,1,0,0,0,2714,2716,1,0,0,0,2715,2708,1,0,0,0,2716,2719,
        1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,0,2718,169,1,0,0,0,2719,
        2717,1,0,0,0,2720,2725,3,168,84,0,2721,2722,3,244,122,0,2722,2723,
        3,168,84,0,2723,2725,1,0,0,0,2724,2720,1,0,0,0,2724,2721,1,0,0,0,
        2725,171,1,0,0,0,2726,2729,5,330,0,0,2727,2729,3,168,84,0,2728,2726,
        1,0,0,0,2728,2727,1,0,0,0,2729,173,1,0,0,0,2730,2731,5,284,0,0,2731,
        2732,3,120,60,0,2732,2733,5,249,0,0,2733,2734,3,120,60,0,2734,175,
        1,0,0,0,2735,2736,5,82,0,0,2736,2737,5,313,0,0,2737,2738,5,285,0,
        0,2738,2739,3,122,61,0,2739,2740,5,314,0,0,2740,177,1,0,0,0,2741,
        2742,5,284,0,0,2742,2745,5,147,0,0,2743,2744,5,8,0,0,2744,2746,3,
        120,60,0,2745,2743,1,0,0,0,2745,2746,1,0,0,0,2746,2747,1,0,0,0,2747,
        2748,5,249,0,0,2748,2749,5,271,0,0,2749,2750,5,234,0,0,2750,2751,
        3,244,122,0,2751,2752,5,296,0,0,2752,2760,3,120,60,0,2753,2754,5,
        312,0,0,2754,2755,3,244,122,0,2755,2756,5,296,0,0,2756,2757,3,120,
        60,0,2757,2759,1,0,0,0,2758,2753,1,0,0,0,2759,2762,1,0,0,0,2760,
        2758,1,0,0,0,2760,2761,1,0,0,0,2761,2806,1,0,0,0,2762,2760,1,0,0,
        0,2763,2764,5,284,0,0,2764,2767,5,147,0,0,2765,2766,5,8,0,0,2766,
        2768,3,120,60,0,2767,2765,1,0,0,0,2767,2768,1,0,0,0,2768,2769,1,
        0,0,0,2769,2770,5,249,0,0,2770,2806,5,56,0,0,2771,2772,5,284,0,0,
        2772,2773,5,165,0,0,2773,2776,5,147,0,0,2774,2775,5,8,0,0,2775,2777,
        3,120,60,0,2776,2774,1,0,0,0,2776,2777,1,0,0,0,2777,2778,1,0,0,0,
        2778,2779,5,249,0,0,2779,2791,5,110,0,0,2780,2781,5,313,0,0,2781,
        2786,3,244,122,0,2782,2783,5,312,0,0,2783,2785,3,244,122,0,2784,
        2782,1,0,0,0,2785,2788,1,0,0,0,2786,2784,1,0,0,0,2786,2787,1,0,0,
        0,2787,2789,1,0,0,0,2788,2786,1,0,0,0,2789,2790,5,314,0,0,2790,2792,
        1,0,0,0,2791,2780,1,0,0,0,2791,2792,1,0,0,0,2792,2793,1,0,0,0,2793,
        2794,5,280,0,0,2794,2795,5,313,0,0,2795,2800,3,120,60,0,2796,2797,
        5,312,0,0,2797,2799,3,120,60,0,2798,2796,1,0,0,0,2799,2802,1,0,0,
        0,2800,2798,1,0,0,0,2800,2801,1,0,0,0,2801,2803,1,0,0,0,2802,2800,
        1,0,0,0,2803,2804,5,314,0,0,2804,2806,1,0,0,0,2805,2741,1,0,0,0,
        2805,2763,1,0,0,0,2805,2771,1,0,0,0,2806,179,1,0,0,0,2807,2813,5,
        182,0,0,2808,2814,3,244,122,0,2809,2810,5,313,0,0,2810,2811,3,62,
        31,0,2811,2812,5,314,0,0,2812,2814,1,0,0,0,2813,2808,1,0,0,0,2813,
        2809,1,0,0,0,2814,181,1,0,0,0,2815,2816,5,151,0,0,2816,2821,3,88,
        44,0,2817,2818,5,312,0,0,2818,2820,3,88,44,0,2819,2817,1,0,0,0,2820,
        2823,1,0,0,0,2821,2819,1,0,0,0,2821,2822,1,0,0,0,2822,2825,1,0,0,
        0,2823,2821,1,0,0,0,2824,2815,1,0,0,0,2824,2825,1,0,0,0,2825,2826,
        1,0,0,0,2826,2830,3,184,92,0,2827,2828,5,4,0,0,2828,2829,5,146,0,
        0,2829,2831,3,94,47,0,2830,2827,1,0,0,0,2830,2831,1,0,0,0,2831,2833,
        1,0,0,0,2832,2834,7,16,0,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,
        2840,1,0,0,0,2835,2836,5,189,0,0,2836,2837,5,313,0,0,2837,2838,3,
        188,94,0,2838,2839,5,314,0,0,2839,2841,1,0,0,0,2840,2835,1,0,0,0,
        2840,2841,1,0,0,0,2841,2851,1,0,0,0,2842,2843,5,241,0,0,2843,2848,
        3,96,48,0,2844,2845,5,312,0,0,2845,2847,3,96,48,0,2846,2844,1,0,
        0,0,2847,2850,1,0,0,0,2848,2846,1,0,0,0,2848,2849,1,0,0,0,2849,2852,
        1,0,0,0,2850,2848,1,0,0,0,2851,2842,1,0,0,0,2851,2852,1,0,0,0,2852,
        2862,1,0,0,0,2853,2854,5,54,0,0,2854,2859,3,98,49,0,2855,2856,5,
        312,0,0,2856,2858,3,98,49,0,2857,2855,1,0,0,0,2858,2861,1,0,0,0,
        2859,2857,1,0,0,0,2859,2860,1,0,0,0,2860,2863,1,0,0,0,2861,2859,
        1,0,0,0,2862,2853,1,0,0,0,2862,2863,1,0,0,0,2863,183,1,0,0,0,2864,
        2865,5,202,0,0,2865,2889,3,186,93,0,2866,2867,5,223,0,0,2867,2889,
        3,186,93,0,2868,2869,5,99,0,0,2869,2889,3,186,93,0,2870,2871,5,202,
        0,0,2871,2872,5,17,0,0,2872,2873,3,186,93,0,2873,2874,5,8,0,0,2874,
        2875,3,186,93,0,2875,2889,1,0,0,0,2876,2877,5,223,0,0,2877,2878,
        5,17,0,0,2878,2879,3,186,93,0,2879,2880,5,8,0,0,2880,2881,3,186,
        93,0,2881,2889,1,0,0,0,2882,2883,5,99,0,0,2883,2884,5,17,0,0,2884,
        2885,3,186,93,0,2885,2886,5,8,0,0,2886,2887,3,186,93,0,2887,2889,
        1,0,0,0,2888,2864,1,0,0,0,2888,2866,1,0,0,0,2888,2868,1,0,0,0,2888,
        2870,1,0,0,0,2888,2876,1,0,0,0,2888,2882,1,0,0,0,2889,185,1,0,0,
        0,2890,2891,5,262,0,0,2891,2900,5,195,0,0,2892,2893,5,262,0,0,2893,
        2900,5,85,0,0,2894,2895,5,39,0,0,2895,2900,5,222,0,0,2896,2897,3,
        120,60,0,2897,2898,7,30,0,0,2898,2900,1,0,0,0,2899,2890,1,0,0,0,
        2899,2892,1,0,0,0,2899,2894,1,0,0,0,2899,2896,1,0,0,0,2900,187,1,
        0,0,0,2901,2902,6,94,-1,0,2902,2904,3,190,95,0,2903,2905,3,192,96,
        0,2904,2903,1,0,0,0,2904,2905,1,0,0,0,2905,2913,1,0,0,0,2906,2907,
        10,2,0,0,2907,2912,3,188,94,3,2908,2909,10,1,0,0,2909,2910,5,324,
        0,0,2910,2912,3,188,94,2,2911,2906,1,0,0,0,2911,2908,1,0,0,0,2912,
        2915,1,0,0,0,2913,2911,1,0,0,0,2913,2914,1,0,0,0,2914,189,1,0,0,
        0,2915,2913,1,0,0,0,2916,2942,3,244,122,0,2917,2918,5,313,0,0,2918,
        2942,5,314,0,0,2919,2920,5,192,0,0,2920,2921,5,313,0,0,2921,2926,
        3,188,94,0,2922,2923,5,312,0,0,2923,2925,3,188,94,0,2924,2922,1,
        0,0,0,2925,2928,1,0,0,0,2926,2924,1,0,0,0,2926,2927,1,0,0,0,2927,
        2929,1,0,0,0,2928,2926,1,0,0,0,2929,2930,5,314,0,0,2930,2942,1,0,
        0,0,2931,2932,5,313,0,0,2932,2933,3,188,94,0,2933,2934,5,314,0,0,
        2934,2942,1,0,0,0,2935,2942,5,326,0,0,2936,2942,5,325,0,0,2937,2938,
        5,319,0,0,2938,2939,3,188,94,0,2939,2940,5,320,0,0,2940,2942,1,0,
        0,0,2941,2916,1,0,0,0,2941,2917,1,0,0,0,2941,2919,1,0,0,0,2941,2931,
        1,0,0,0,2941,2935,1,0,0,0,2941,2936,1,0,0,0,2941,2937,1,0,0,0,2942,
        191,1,0,0,0,2943,2945,5,304,0,0,2944,2946,5,308,0,0,2945,2944,1,
        0,0,0,2945,2946,1,0,0,0,2946,2974,1,0,0,0,2947,2949,5,302,0,0,2948,
        2950,5,308,0,0,2949,2948,1,0,0,0,2949,2950,1,0,0,0,2950,2974,1,0,
        0,0,2951,2953,5,308,0,0,2952,2954,5,308,0,0,2953,2952,1,0,0,0,2953,
        2954,1,0,0,0,2954,2974,1,0,0,0,2955,2956,5,317,0,0,2956,2957,5,330,
        0,0,2957,2959,5,318,0,0,2958,2960,5,308,0,0,2959,2958,1,0,0,0,2959,
        2960,1,0,0,0,2960,2974,1,0,0,0,2961,2963,5,317,0,0,2962,2964,5,330,
        0,0,2963,2962,1,0,0,0,2963,2964,1,0,0,0,2964,2965,1,0,0,0,2965,2967,
        5,312,0,0,2966,2968,5,330,0,0,2967,2966,1,0,0,0,2967,2968,1,0,0,
        0,2968,2969,1,0,0,0,2969,2971,5,318,0,0,2970,2972,5,308,0,0,2971,
        2970,1,0,0,0,2971,2972,1,0,0,0,2972,2974,1,0,0,0,2973,2943,1,0,0,
        0,2973,2947,1,0,0,0,2973,2951,1,0,0,0,2973,2955,1,0,0,0,2973,2961,
        1,0,0,0,2974,193,1,0,0,0,2975,2976,3,244,122,0,2976,2977,5,296,0,
        0,2977,2978,3,120,60,0,2978,195,1,0,0,0,2979,2980,5,87,0,0,2980,
        2984,7,31,0,0,2981,2982,5,260,0,0,2982,2984,7,32,0,0,2983,2979,1,
        0,0,0,2983,2981,1,0,0,0,2984,197,1,0,0,0,2985,2986,5,117,0,0,2986,
        2987,5,136,0,0,2987,2991,3,200,100,0,2988,2989,5,203,0,0,2989,2991,
        7,33,0,0,2990,2985,1,0,0,0,2990,2988,1,0,0,0,2991,199,1,0,0,0,2992,
        2993,5,203,0,0,2993,3000,5,263,0,0,2994,2995,5,203,0,0,2995,3000,
        5,31,0,0,2996,2997,5,208,0,0,2997,3000,5,203,0,0,2998,3000,5,232,
        0,0,2999,2992,1,0,0,0,2999,2994,1,0,0,0,2999,2996,1,0,0,0,2999,2998,
        1,0,0,0,3000,201,1,0,0,0,3001,3007,3,120,60,0,3002,3003,3,244,122,
        0,3003,3004,5,323,0,0,3004,3005,3,120,60,0,3005,3007,1,0,0,0,3006,
        3001,1,0,0,0,3006,3002,1,0,0,0,3007,203,1,0,0,0,3008,3009,3,244,
        122,0,3009,3010,5,310,0,0,3010,3011,3,244,122,0,3011,3014,1,0,0,
        0,3012,3014,3,244,122,0,3013,3008,1,0,0,0,3013,3012,1,0,0,0,3014,
        205,1,0,0,0,3015,3020,3,204,102,0,3016,3017,5,312,0,0,3017,3019,
        3,204,102,0,3018,3016,1,0,0,0,3019,3022,1,0,0,0,3020,3018,1,0,0,
        0,3020,3021,1,0,0,0,3021,207,1,0,0,0,3022,3020,1,0,0,0,3023,3024,
        5,90,0,0,3024,3025,3,210,105,0,3025,3029,3,214,107,0,3026,3028,3,
        216,108,0,3027,3026,1,0,0,0,3028,3031,1,0,0,0,3029,3027,1,0,0,0,
        3029,3030,1,0,0,0,3030,3032,1,0,0,0,3031,3029,1,0,0,0,3032,3033,
        3,218,109,0,3033,209,1,0,0,0,3034,3035,3,232,116,0,3035,3044,5,313,
        0,0,3036,3041,3,212,106,0,3037,3038,5,312,0,0,3038,3040,3,212,106,
        0,3039,3037,1,0,0,0,3040,3043,1,0,0,0,3041,3039,1,0,0,0,3041,3042,
        1,0,0,0,3042,3045,1,0,0,0,3043,3041,1,0,0,0,3044,3036,1,0,0,0,3044,
        3045,1,0,0,0,3045,3046,1,0,0,0,3046,3047,5,314,0,0,3047,211,1,0,
        0,0,3048,3050,3,244,122,0,3049,3048,1,0,0,0,3049,3050,1,0,0,0,3050,
        3051,1,0,0,0,3051,3052,3,168,84,0,3052,213,1,0,0,0,3053,3054,5,215,
        0,0,3054,3055,3,168,84,0,3055,215,1,0,0,0,3056,3057,5,130,0,0,3057,
        3076,3,244,122,0,3058,3060,5,165,0,0,3059,3058,1,0,0,0,3059,3060,
        1,0,0,0,3060,3061,1,0,0,0,3061,3076,5,61,0,0,3062,3063,5,215,0,0,
        3063,3064,5,166,0,0,3064,3065,5,173,0,0,3065,3066,5,166,0,0,3066,
        3076,5,109,0,0,3067,3068,5,21,0,0,3068,3069,5,173,0,0,3069,3070,
        5,166,0,0,3070,3076,5,109,0,0,3071,3072,5,229,0,0,3072,3076,7,1,
        0,0,3073,3074,5,29,0,0,3074,3076,3,152,76,0,3075,3056,1,0,0,0,3075,
        3059,1,0,0,0,3075,3062,1,0,0,0,3075,3067,1,0,0,0,3075,3071,1,0,0,
        0,3075,3073,1,0,0,0,3076,217,1,0,0,0,3077,3078,5,213,0,0,3078,3177,
        3,126,63,0,3079,3080,5,234,0,0,3080,3081,3,244,122,0,3081,3082,5,
        296,0,0,3082,3083,3,120,60,0,3083,3177,1,0,0,0,3084,3085,5,23,0,
        0,3085,3087,3,120,60,0,3086,3088,3,220,110,0,3087,3086,1,0,0,0,3088,
        3089,1,0,0,0,3089,3087,1,0,0,0,3089,3090,1,0,0,0,3090,3092,1,0,0,
        0,3091,3093,3,224,112,0,3092,3091,1,0,0,0,3092,3093,1,0,0,0,3093,
        3094,1,0,0,0,3094,3095,5,71,0,0,3095,3096,5,23,0,0,3096,3177,1,0,
        0,0,3097,3099,5,23,0,0,3098,3100,3,220,110,0,3099,3098,1,0,0,0,3100,
        3101,1,0,0,0,3101,3099,1,0,0,0,3101,3102,1,0,0,0,3102,3104,1,0,0,
        0,3103,3105,3,224,112,0,3104,3103,1,0,0,0,3104,3105,1,0,0,0,3105,
        3106,1,0,0,0,3106,3107,5,71,0,0,3107,3108,5,23,0,0,3108,3177,1,0,
        0,0,3109,3110,5,102,0,0,3110,3111,3,120,60,0,3111,3112,5,249,0,0,
        3112,3116,3,228,114,0,3113,3115,3,222,111,0,3114,3113,1,0,0,0,3115,
        3118,1,0,0,0,3116,3114,1,0,0,0,3116,3117,1,0,0,0,3117,3120,1,0,0,
        0,3118,3116,1,0,0,0,3119,3121,3,224,112,0,3120,3119,1,0,0,0,3120,
        3121,1,0,0,0,3121,3122,1,0,0,0,3122,3123,5,71,0,0,3123,3124,5,102,
        0,0,3124,3177,1,0,0,0,3125,3126,5,118,0,0,3126,3177,3,244,122,0,
        3127,3128,5,134,0,0,3128,3177,3,244,122,0,3129,3135,5,15,0,0,3130,
        3131,3,226,113,0,3131,3132,5,309,0,0,3132,3134,1,0,0,0,3133,3130,
        1,0,0,0,3134,3137,1,0,0,0,3135,3133,1,0,0,0,3135,3136,1,0,0,0,3136,
        3139,1,0,0,0,3137,3135,1,0,0,0,3138,3140,3,228,114,0,3139,3138,1,
        0,0,0,3139,3140,1,0,0,0,3140,3141,1,0,0,0,3141,3177,5,71,0,0,3142,
        3143,3,244,122,0,3143,3144,5,311,0,0,3144,3146,1,0,0,0,3145,3142,
        1,0,0,0,3145,3146,1,0,0,0,3146,3147,1,0,0,0,3147,3148,5,144,0,0,
        3148,3149,3,228,114,0,3149,3150,5,71,0,0,3150,3151,5,144,0,0,3151,
        3177,1,0,0,0,3152,3153,3,244,122,0,3153,3154,5,311,0,0,3154,3156,
        1,0,0,0,3155,3152,1,0,0,0,3155,3156,1,0,0,0,3156,3157,1,0,0,0,3157,
        3158,5,286,0,0,3158,3159,3,120,60,0,3159,3160,5,64,0,0,3160,3161,
        3,228,114,0,3161,3162,5,71,0,0,3162,3163,5,286,0,0,3163,3177,1,0,
        0,0,3164,3165,3,244,122,0,3165,3166,5,311,0,0,3166,3168,1,0,0,0,
        3167,3164,1,0,0,0,3167,3168,1,0,0,0,3168,3169,1,0,0,0,3169,3170,
        5,207,0,0,3170,3171,3,228,114,0,3171,3172,5,270,0,0,3172,3173,3,
        120,60,0,3173,3174,5,71,0,0,3174,3175,5,207,0,0,3175,3177,1,0,0,
        0,3176,3077,1,0,0,0,3176,3079,1,0,0,0,3176,3084,1,0,0,0,3176,3097,
        1,0,0,0,3176,3109,1,0,0,0,3176,3125,1,0,0,0,3176,3127,1,0,0,0,3176,
        3129,1,0,0,0,3176,3145,1,0,0,0,3176,3155,1,0,0,0,3176,3167,1,0,0,
        0,3177,219,1,0,0,0,3178,3179,5,284,0,0,3179,3180,3,120,60,0,3180,
        3181,5,249,0,0,3181,3182,3,228,114,0,3182,221,1,0,0,0,3183,3184,
        5,69,0,0,3184,3185,3,120,60,0,3185,3186,5,249,0,0,3186,3187,3,228,
        114,0,3187,223,1,0,0,0,3188,3189,5,67,0,0,3189,3190,3,228,114,0,
        3190,225,1,0,0,0,3191,3192,5,52,0,0,3192,3197,3,244,122,0,3193,3194,
        5,312,0,0,3194,3196,3,244,122,0,3195,3193,1,0,0,0,3196,3199,1,0,
        0,0,3197,3195,1,0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,0,3199,3197,
        1,0,0,0,3200,3203,3,168,84,0,3201,3202,5,53,0,0,3202,3204,3,126,
        63,0,3203,3201,1,0,0,0,3203,3204,1,0,0,0,3204,227,1,0,0,0,3205,3206,
        3,218,109,0,3206,3207,5,309,0,0,3207,3209,1,0,0,0,3208,3205,1,0,
        0,0,3209,3210,1,0,0,0,3210,3208,1,0,0,0,3210,3211,1,0,0,0,3211,229,
        1,0,0,0,3212,3213,7,34,0,0,3213,231,1,0,0,0,3214,3219,3,244,122,
        0,3215,3216,5,310,0,0,3216,3218,3,244,122,0,3217,3215,1,0,0,0,3218,
        3221,1,0,0,0,3219,3217,1,0,0,0,3219,3220,1,0,0,0,3220,233,1,0,0,
        0,3221,3219,1,0,0,0,3222,3223,5,86,0,0,3223,3224,3,236,118,0,3224,
        3225,5,11,0,0,3225,3226,5,170,0,0,3226,3227,3,126,63,0,3227,235,
        1,0,0,0,3228,3229,7,35,0,0,3229,237,1,0,0,0,3230,3234,3,240,120,
        0,3231,3234,5,47,0,0,3232,3234,5,43,0,0,3233,3230,1,0,0,0,3233,3231,
        1,0,0,0,3233,3232,1,0,0,0,3234,239,1,0,0,0,3235,3241,3,244,122,0,
        3236,3237,5,273,0,0,3237,3241,3,244,122,0,3238,3239,5,218,0,0,3239,
        3241,3,244,122,0,3240,3235,1,0,0,0,3240,3236,1,0,0,0,3240,3238,1,
        0,0,0,3241,241,1,0,0,0,3242,3247,3,244,122,0,3243,3244,5,312,0,0,
        3244,3246,3,244,122,0,3245,3243,1,0,0,0,3246,3249,1,0,0,0,3247,3245,
        1,0,0,0,3247,3248,1,0,0,0,3248,243,1,0,0,0,3249,3247,1,0,0,0,3250,
        3256,5,333,0,0,3251,3256,5,335,0,0,3252,3256,3,250,125,0,3253,3256,
        5,336,0,0,3254,3256,5,334,0,0,3255,3250,1,0,0,0,3255,3251,1,0,0,
        0,3255,3252,1,0,0,0,3255,3253,1,0,0,0,3255,3254,1,0,0,0,3256,245,
        1,0,0,0,3257,3259,5,303,0,0,3258,3257,1,0,0,0,3258,3259,1,0,0,0,
        3259,3260,1,0,0,0,3260,3270,5,331,0,0,3261,3263,5,303,0,0,3262,3261,
        1,0,0,0,3262,3263,1,0,0,0,3263,3264,1,0,0,0,3264,3270,5,332,0,0,
        3265,3267,5,303,0,0,3266,3265,1,0,0,0,3266,3267,1,0,0,0,3267,3268,
        1,0,0,0,3268,3270,5,330,0,0,3269,3258,1,0,0,0,3269,3262,1,0,0,0,
        3269,3266,1,0,0,0,3270,247,1,0,0,0,3271,3274,3,244,122,0,3272,3274,
        3,152,76,0,3273,3271,1,0,0,0,3273,3272,1,0,0,0,3274,249,1,0,0,0,
        3275,3276,7,36,0,0,3276,251,1,0,0,0,434,255,266,269,302,309,313,
        317,323,327,334,339,343,349,353,372,378,382,386,390,398,402,405,
        410,416,425,431,435,441,448,457,469,478,487,493,504,512,520,527,
        537,544,552,588,591,594,598,604,609,616,622,626,630,638,644,648,
        662,670,689,714,717,724,731,740,744,751,761,767,772,776,782,791,
        797,801,808,812,820,825,829,837,845,850,854,864,871,876,880,890,
        893,902,907,913,937,943,945,951,957,959,967,969,975,981,983,998,
        1003,1010,1020,1026,1028,1036,1038,1063,1066,1070,1074,1092,1095,
        1106,1109,1125,1135,1140,1146,1149,1158,1160,1163,1173,1177,1183,
        1190,1195,1201,1205,1209,1215,1226,1235,1245,1248,1253,1255,1262,
        1268,1270,1274,1284,1290,1293,1295,1307,1314,1318,1322,1326,1333,
        1342,1345,1349,1354,1358,1366,1369,1372,1379,1390,1393,1403,1406,
        1417,1422,1430,1433,1437,1446,1455,1458,1467,1470,1473,1477,1488,
        1491,1498,1501,1520,1524,1528,1532,1534,1545,1550,1559,1568,1571,
        1586,1589,1598,1601,1609,1612,1615,1620,1623,1635,1638,1646,1651,
        1655,1657,1659,1674,1676,1687,1694,1697,1702,1712,1723,1727,1729,
        1737,1744,1757,1763,1779,1788,1791,1799,1802,1809,1814,1825,1828,
        1832,1834,1842,1852,1858,1860,1867,1871,1873,1880,1884,1886,1888,
        1897,1908,1912,1922,1932,1936,1944,1946,1959,1967,1976,1982,1990,
        1996,2000,2005,2010,2016,2030,2032,2062,2073,2081,2086,2091,2104,
        2110,2113,2120,2125,2128,2131,2136,2143,2146,2155,2158,2162,2165,
        2168,2183,2186,2205,2209,2217,2221,2246,2249,2258,2264,2270,2276,
        2285,2288,2291,2310,2319,2341,2344,2354,2363,2369,2375,2386,2388,
        2393,2400,2402,2408,2414,2425,2434,2439,2444,2446,2448,2454,2456,
        2466,2475,2477,2483,2485,2488,2498,2500,2512,2515,2520,2525,2537,
        2541,2545,2548,2550,2556,2559,2569,2577,2583,2585,2593,2603,2609,
        2623,2632,2639,2644,2651,2661,2666,2673,2699,2704,2706,2713,2717,
        2724,2728,2745,2760,2767,2776,2786,2791,2800,2805,2813,2821,2824,
        2830,2833,2840,2848,2851,2859,2862,2888,2899,2904,2911,2913,2926,
        2941,2945,2949,2953,2959,2963,2967,2971,2973,2983,2990,2999,3006,
        3013,3020,3029,3041,3044,3049,3059,3075,3089,3092,3101,3104,3116,
        3120,3135,3139,3145,3155,3167,3176,3197,3203,3210,3219,3233,3240,
        3247,3255,3258,3262,3266,3269,3273
    ]

class TrinoParser ( Parser ):

    grammarFileName = "TrinoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABSENT'", "'ADD'", "'ADMIN'", "'AFTER'", 
                     "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", 
                     "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", "'BY'", 
                     "'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CATALOG'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONDITIONAL'", 
                     "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", "'CREATE'", 
                     "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", 
                     "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", 
                     "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", 
                     "'DECLARE'", "'DEFAULT'", "'DEFINE'", "'DEFINER'", 
                     "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", 
                     "'DETERMINISTIC'", "'DISTINCT'", "'DISTRIBUTED'", "'DO'", 
                     "'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", "'ELSEIF'", 
                     "'ENCODING'", "'END'", "'ERROR'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", 
                     "'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", 
                     "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", 
                     "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", 
                     "'IMMEDIATE'", "'IN'", "'INCLUDING'", "'INITIAL'", 
                     "'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", 
                     "'ITERATE'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_EXISTS'", 
                     "'JSON_OBJECT'", "'JSON_QUERY'", "'JSON_TABLE'", "'JSON_VALUE'", 
                     "'KEEP'", "'KEY'", "'KEYS'", "'LANGUAGE'", "'LAST'", 
                     "'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LEVEL'", 
                     "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", "'LOCALTIME'", 
                     "'LOCALTIMESTAMP'", "'LOGICAL'", "'LOOP'", "'MAP'", 
                     "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", 
                     "'MATERIALIZED'", "'MEASURES'", "'MERGE'", "'MINUTE'", 
                     "'MONTH'", "'NATURAL'", "'NESTED'", "'NEXT'", "'NFC'", 
                     "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", 
                     "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", 
                     "'OF'", "'OFFSET'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", 
                     "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", 
                     "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", 
                     "'PARTITIONS'", "'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", 
                     "'PER'", "'PERIOD'", "'PERMUTE'", "'PLAN'", "'POSITION'", 
                     "'PRECEDING'", "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", 
                     "'PROPERTIES'", "'PRUNE'", "'QUOTES'", "'RANGE'", "'READ'", 
                     "'RECURSIVE'", "'REFRESH'", "'RENAME'", "'REPEAT'", 
                     "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
                     "'RESTRICT'", "'RETURN'", "'RETURNING'", "'RETURNS'", 
                     "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
                     "'ROLLUP'", "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", 
                     "'SEEK'", "'SELECT'", "'SERIALIZABLE'", "'SESSION'", 
                     "'SET'", "'SETS'", "'SHOW'", "'SKIP'", "'SOME'", "'START'", 
                     "'STATS'", "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", 
                     "'TABLES'", "'TABLESAMPLE'", "'TEXT'", "'STRING'", 
                     "'THEN'", "'TIES'", "'TIME'", "'TIMESTAMP'", "'TO'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", 
                     "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", 
                     "'UNBOUNDED'", "'UNCOMMITTED'", "'UNCONDITIONAL'", 
                     "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNMATCHED'", 
                     "'UNNEST'", "'UNTIL'", "'UPDATE'", "'USE'", "'USER'", 
                     "'USING'", "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", 
                     "'VALUE'", "'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", 
                     "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOW'", "'WITH'", 
                     "'WITHIN'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", 
                     "'YEAR'", "'ZONE'", "'='", "<INVALID>", "'<'", "'<='", 
                     "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", 
                     "'?'", "';'", "'.'", "'_:'", "','", "'('", "')'", "'['", 
                     "']'", "'{'", "'}'", "'{-'", "'-}'", "'<-'", "'->'", 
                     "'=>'", "'|'", "'$'", "'^'" ]

    symbolicNames = [ "<INVALID>", "ABSENT_", "ADD_", "ADMIN_", "AFTER_", 
                      "ALL_", "ALTER_", "ANALYZE_", "AND_", "ANY_", "ARRAY_", 
                      "AS_", "ASC_", "AT_", "AUTHORIZATION_", "BEGIN_", 
                      "BERNOULLI_", "BETWEEN_", "BOTH_", "BY_", "CALL_", 
                      "CALLED_", "CASCADE_", "CASE_", "CAST_", "CATALOG_", 
                      "CATALOGS_", "COLUMN_", "COLUMNS_", "COMMENT_", "COMMIT_", 
                      "COMMITTED_", "CONDITIONAL_", "CONSTRAINT_", "COUNT_", 
                      "COPARTITION_", "CREATE_", "CROSS_", "CUBE_", "CURRENT_", 
                      "CURRENT_CATALOG_", "CURRENT_DATE_", "CURRENT_PATH_", 
                      "CURRENT_ROLE_", "CURRENT_SCHEMA_", "CURRENT_TIME_", 
                      "CURRENT_TIMESTAMP_", "CURRENT_USER_", "DATA_", "DATE_", 
                      "DAY_", "DEALLOCATE_", "DECLARE_", "DEFAULT_", "DEFINE_", 
                      "DEFINER_", "DELETE_", "DENY_", "DESC_", "DESCRIBE_", 
                      "DESCRIPTOR_", "DETERMINISTIC_", "DISTINCT_", "DISTRIBUTED_", 
                      "DO_", "DOUBLE_", "DROP_", "ELSE_", "EMPTY_", "ELSEIF_", 
                      "ENCODING_", "END_", "ERROR_", "ESCAPE_", "EXCEPT_", 
                      "EXCLUDING_", "EXECUTE_", "EXISTS_", "EXPLAIN_", "EXTRACT_", 
                      "FALSE_", "FETCH_", "FILTER_", "FINAL_", "FIRST_", 
                      "FOLLOWING_", "FOR_", "FORMAT_", "FROM_", "FULL_", 
                      "FUNCTION_", "FUNCTIONS_", "GRACE_", "GRANT_", "GRANTED_", 
                      "GRANTS_", "GRAPHVIZ_", "GROUP_", "GROUPING_", "GROUPS_", 
                      "HAVING_", "HOUR_", "IF_", "IGNORE_", "IMMEDIATE_", 
                      "IN_", "INCLUDING_", "INITIAL_", "INNER_", "INPUT_", 
                      "INSERT_", "INTERSECT_", "INTERVAL_", "INTO_", "INVOKER_", 
                      "IO_", "IS_", "ISOLATION_", "ITERATE_", "JOIN_", "JSON_", 
                      "JSON_ARRAY_", "JSON_EXISTS_", "JSON_OBJECT_", "JSON_QUERY_", 
                      "JSON_TABLE_", "JSON_VALUE_", "KEEP_", "KEY_", "KEYS_", 
                      "LANGUAGE_", "LAST_", "LATERAL_", "LEADING_", "LEAVE_", 
                      "LEFT_", "LEVEL_", "LIKE_", "LIMIT_", "LISTAGG_", 
                      "LOCAL_", "LOCALTIME_", "LOCALTIMESTAMP_", "LOGICAL_", 
                      "LOOP_", "MAP_", "MATCH_", "MATCHED_", "MATCHES_", 
                      "MATCH_RECOGNIZE_", "MATERIALIZED_", "MEASURES_", 
                      "MERGE_", "MINUTE_", "MONTH_", "NATURAL_", "NESTED_", 
                      "NEXT_", "NFC_", "NFD_", "NFKC_", "NFKD_", "NO_", 
                      "NONE_", "NORMALIZE_", "NOT_", "NULL_", "NULLIF_", 
                      "NULLS_", "OBJECT_", "OF_", "OFFSET_", "OMIT_", "ON_", 
                      "ONE_", "ONLY_", "OPTION_", "OR_", "ORDER_", "ORDINALITY_", 
                      "OUTER_", "OUTPUT_", "OVER_", "OVERFLOW_", "PARTITION_", 
                      "PARTITIONS_", "PASSING_", "PAST_", "PATH_", "PATTERN_", 
                      "PER_", "PERIOD_", "PERMUTE_", "PLAN_", "POSITION_", 
                      "PRECEDING_", "PRECISION_", "PREPARE_", "PRIVILEGES_", 
                      "PROPERTIES_", "PRUNE_", "QUOTES_", "RANGE_", "READ_", 
                      "RECURSIVE_", "REFRESH_", "RENAME_", "REPEAT_", "REPEATABLE_", 
                      "REPLACE_", "RESET_", "RESPECT_", "RESTRICT_", "RETURN_", 
                      "RETURNING_", "RETURNS_", "REVOKE_", "RIGHT_", "ROLE_", 
                      "ROLES_", "ROLLBACK_", "ROLLUP_", "ROW_", "ROWS_", 
                      "RUNNING_", "SCALAR_", "SCHEMA_", "SCHEMAS_", "SECOND_", 
                      "SECURITY_", "SEEK_", "SELECT_", "SERIALIZABLE_", 
                      "SESSION_", "SET_", "SETS_", "SHOW_", "SKIP_", "SOME_", 
                      "START_", "STATS_", "SUBSET_", "SUBSTRING_", "SYSTEM_", 
                      "TABLE_", "TABLES_", "TABLESAMPLE_", "TEXT_", "TEXT_STRING_", 
                      "THEN_", "TIES_", "TIME_", "TIMESTAMP_", "TO_", "TRAILING_", 
                      "TRANSACTION_", "TRIM_", "TRUE_", "TRUNCATE_", "TRY_CAST_", 
                      "TYPE_", "UESCAPE_", "UNBOUNDED_", "UNCOMMITTED_", 
                      "UNCONDITIONAL_", "UNION_", "UNIQUE_", "UNKNOWN_", 
                      "UNMATCHED_", "UNNEST_", "UNTIL_", "UPDATE_", "USE_", 
                      "USER_", "USING_", "UTF16_", "UTF32_", "UTF8_", "VALIDATE_", 
                      "VALUE_", "VALUES_", "VERBOSE_", "VERSION_", "VIEW_", 
                      "WHEN_", "WHERE_", "WHILE_", "WINDOW_", "WITH_", "WITHIN_", 
                      "WITHOUT_", "WORK_", "WRAPPER_", "WRITE_", "YEAR_", 
                      "ZONE_", "EQ_", "NEQ_", "LT_", "LTE_", "GT_", "GTE_", 
                      "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "PERCENT_", 
                      "CONCAT_", "QUESTION_MARK_", "SEMICOLON_", "DOT_", 
                      "COLON_", "COMMA_", "LPAREN_", "RPAREN_", "LSQUARE_", 
                      "RSQUARE_", "LCURLY_", "RCURLY_", "LCURLYHYPHEN_", 
                      "RCURLYHYPHEN_", "LARROW_", "RARROW_", "RDOUBLEARROW_", 
                      "VBAR_", "DOLLAR_", "CARET_", "STRING_", "UNICODE_STRING_", 
                      "BINARY_LITERAL_", "INTEGER_VALUE_", "DECIMAL_VALUE_", 
                      "DOUBLE_VALUE_", "IDENTIFIER_", "DIGIT_IDENTIFIER_", 
                      "QUOTED_IDENTIFIER_", "BACKQUOTED_IDENTIFIER_", "SIMPLE_COMMENT_", 
                      "BRACKETED_COMMENT_", "WS_", "UNRECOGNIZED_" ]

    RULE_parse = 0
    RULE_statements = 1
    RULE_singleStatement = 2
    RULE_standaloneExpression = 3
    RULE_standalonePathSpecification = 4
    RULE_standaloneType = 5
    RULE_standaloneRowPattern = 6
    RULE_standaloneFunctionSpecification = 7
    RULE_statement = 8
    RULE_rootQuery = 9
    RULE_withFunction = 10
    RULE_query = 11
    RULE_with = 12
    RULE_tableElement = 13
    RULE_columnDefinition = 14
    RULE_likeClause = 15
    RULE_properties = 16
    RULE_propertyAssignments = 17
    RULE_property = 18
    RULE_propertyValue = 19
    RULE_queryNoWith = 20
    RULE_limitRowCount = 21
    RULE_rowCount = 22
    RULE_queryTerm = 23
    RULE_queryPrimary = 24
    RULE_sortItem = 25
    RULE_querySpecification = 26
    RULE_groupBy = 27
    RULE_groupingElement = 28
    RULE_groupingSet = 29
    RULE_windowDefinition = 30
    RULE_windowSpecification = 31
    RULE_namedQuery = 32
    RULE_setQuantifier = 33
    RULE_selectItem = 34
    RULE_relation = 35
    RULE_joinType = 36
    RULE_joinCriteria = 37
    RULE_sampledRelation = 38
    RULE_sampleType = 39
    RULE_trimsSpecification = 40
    RULE_listAggOverflowBehavior = 41
    RULE_listaggCountIndication = 42
    RULE_patternRecognition = 43
    RULE_measureDefinition = 44
    RULE_rowsPerMatch = 45
    RULE_emptyMatchHandling = 46
    RULE_skipTo = 47
    RULE_subsetDefinition = 48
    RULE_variableDefinition = 49
    RULE_aliasedRelation = 50
    RULE_columnAliases = 51
    RULE_relationPrimary = 52
    RULE_tableFunctionCall = 53
    RULE_tableFunctionArgument = 54
    RULE_tableArgument = 55
    RULE_tableArgumentRelation = 56
    RULE_descriptorArgument = 57
    RULE_descriptorField = 58
    RULE_copartitionTables = 59
    RULE_expression = 60
    RULE_booleanExpression = 61
    RULE_predicate_ = 62
    RULE_valueExpression = 63
    RULE_primaryExpression = 64
    RULE_jsonPathInvocation = 65
    RULE_jsonValueExpression = 66
    RULE_jsonRepresentation = 67
    RULE_jsonArgument = 68
    RULE_jsonExistsErrorBehavior = 69
    RULE_jsonValueBehavior = 70
    RULE_jsonQueryWrapperBehavior = 71
    RULE_jsonQueryBehavior = 72
    RULE_jsonObjectMember = 73
    RULE_processingMode = 74
    RULE_nullTreatment = 75
    RULE_string_ = 76
    RULE_timeZoneSpecifier = 77
    RULE_comparisonOperator = 78
    RULE_comparisonQuantifier = 79
    RULE_booleanValue = 80
    RULE_interval = 81
    RULE_intervalField = 82
    RULE_normalForm = 83
    RULE_type = 84
    RULE_rowField = 85
    RULE_typeParameter = 86
    RULE_whenClause = 87
    RULE_filter = 88
    RULE_mergeCase = 89
    RULE_over = 90
    RULE_windowFrame = 91
    RULE_frameExtent = 92
    RULE_frameBound = 93
    RULE_rowPattern = 94
    RULE_patternPrimary = 95
    RULE_patternQuantifier = 96
    RULE_updateAssignment = 97
    RULE_explainOption = 98
    RULE_transactionMode = 99
    RULE_levelOfIsolation = 100
    RULE_callArgument = 101
    RULE_pathElement = 102
    RULE_pathSpecification = 103
    RULE_functionSpecification = 104
    RULE_functionDeclaration = 105
    RULE_parameterDeclaration = 106
    RULE_returnsClause = 107
    RULE_routineCharacteristic = 108
    RULE_controlStatement = 109
    RULE_caseStatementWhenClause = 110
    RULE_elseIfClause = 111
    RULE_elseClause = 112
    RULE_variableDeclaration = 113
    RULE_sqlStatementList = 114
    RULE_privilege = 115
    RULE_qualifiedName = 116
    RULE_queryPeriod = 117
    RULE_rangeType = 118
    RULE_grantor = 119
    RULE_principal = 120
    RULE_roles = 121
    RULE_identifier = 122
    RULE_number = 123
    RULE_authorizationUser = 124
    RULE_nonReserved = 125

    ruleNames =  [ "parse", "statements", "singleStatement", "standaloneExpression", 
                   "standalonePathSpecification", "standaloneType", "standaloneRowPattern", 
                   "standaloneFunctionSpecification", "statement", "rootQuery", 
                   "withFunction", "query", "with", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "propertyAssignments", "property", 
                   "propertyValue", "queryNoWith", "limitRowCount", "rowCount", 
                   "queryTerm", "queryPrimary", "sortItem", "querySpecification", 
                   "groupBy", "groupingElement", "groupingSet", "windowDefinition", 
                   "windowSpecification", "namedQuery", "setQuantifier", 
                   "selectItem", "relation", "joinType", "joinCriteria", 
                   "sampledRelation", "sampleType", "trimsSpecification", 
                   "listAggOverflowBehavior", "listaggCountIndication", 
                   "patternRecognition", "measureDefinition", "rowsPerMatch", 
                   "emptyMatchHandling", "skipTo", "subsetDefinition", "variableDefinition", 
                   "aliasedRelation", "columnAliases", "relationPrimary", 
                   "tableFunctionCall", "tableFunctionArgument", "tableArgument", 
                   "tableArgumentRelation", "descriptorArgument", "descriptorField", 
                   "copartitionTables", "expression", "booleanExpression", 
                   "predicate_", "valueExpression", "primaryExpression", 
                   "jsonPathInvocation", "jsonValueExpression", "jsonRepresentation", 
                   "jsonArgument", "jsonExistsErrorBehavior", "jsonValueBehavior", 
                   "jsonQueryWrapperBehavior", "jsonQueryBehavior", "jsonObjectMember", 
                   "processingMode", "nullTreatment", "string_", "timeZoneSpecifier", 
                   "comparisonOperator", "comparisonQuantifier", "booleanValue", 
                   "interval", "intervalField", "normalForm", "type", "rowField", 
                   "typeParameter", "whenClause", "filter", "mergeCase", 
                   "over", "windowFrame", "frameExtent", "frameBound", "rowPattern", 
                   "patternPrimary", "patternQuantifier", "updateAssignment", 
                   "explainOption", "transactionMode", "levelOfIsolation", 
                   "callArgument", "pathElement", "pathSpecification", "functionSpecification", 
                   "functionDeclaration", "parameterDeclaration", "returnsClause", 
                   "routineCharacteristic", "controlStatement", "caseStatementWhenClause", 
                   "elseIfClause", "elseClause", "variableDeclaration", 
                   "sqlStatementList", "privilege", "qualifiedName", "queryPeriod", 
                   "rangeType", "grantor", "principal", "roles", "identifier", 
                   "number", "authorizationUser", "nonReserved" ]

    EOF = Token.EOF
    ABSENT_=1
    ADD_=2
    ADMIN_=3
    AFTER_=4
    ALL_=5
    ALTER_=6
    ANALYZE_=7
    AND_=8
    ANY_=9
    ARRAY_=10
    AS_=11
    ASC_=12
    AT_=13
    AUTHORIZATION_=14
    BEGIN_=15
    BERNOULLI_=16
    BETWEEN_=17
    BOTH_=18
    BY_=19
    CALL_=20
    CALLED_=21
    CASCADE_=22
    CASE_=23
    CAST_=24
    CATALOG_=25
    CATALOGS_=26
    COLUMN_=27
    COLUMNS_=28
    COMMENT_=29
    COMMIT_=30
    COMMITTED_=31
    CONDITIONAL_=32
    CONSTRAINT_=33
    COUNT_=34
    COPARTITION_=35
    CREATE_=36
    CROSS_=37
    CUBE_=38
    CURRENT_=39
    CURRENT_CATALOG_=40
    CURRENT_DATE_=41
    CURRENT_PATH_=42
    CURRENT_ROLE_=43
    CURRENT_SCHEMA_=44
    CURRENT_TIME_=45
    CURRENT_TIMESTAMP_=46
    CURRENT_USER_=47
    DATA_=48
    DATE_=49
    DAY_=50
    DEALLOCATE_=51
    DECLARE_=52
    DEFAULT_=53
    DEFINE_=54
    DEFINER_=55
    DELETE_=56
    DENY_=57
    DESC_=58
    DESCRIBE_=59
    DESCRIPTOR_=60
    DETERMINISTIC_=61
    DISTINCT_=62
    DISTRIBUTED_=63
    DO_=64
    DOUBLE_=65
    DROP_=66
    ELSE_=67
    EMPTY_=68
    ELSEIF_=69
    ENCODING_=70
    END_=71
    ERROR_=72
    ESCAPE_=73
    EXCEPT_=74
    EXCLUDING_=75
    EXECUTE_=76
    EXISTS_=77
    EXPLAIN_=78
    EXTRACT_=79
    FALSE_=80
    FETCH_=81
    FILTER_=82
    FINAL_=83
    FIRST_=84
    FOLLOWING_=85
    FOR_=86
    FORMAT_=87
    FROM_=88
    FULL_=89
    FUNCTION_=90
    FUNCTIONS_=91
    GRACE_=92
    GRANT_=93
    GRANTED_=94
    GRANTS_=95
    GRAPHVIZ_=96
    GROUP_=97
    GROUPING_=98
    GROUPS_=99
    HAVING_=100
    HOUR_=101
    IF_=102
    IGNORE_=103
    IMMEDIATE_=104
    IN_=105
    INCLUDING_=106
    INITIAL_=107
    INNER_=108
    INPUT_=109
    INSERT_=110
    INTERSECT_=111
    INTERVAL_=112
    INTO_=113
    INVOKER_=114
    IO_=115
    IS_=116
    ISOLATION_=117
    ITERATE_=118
    JOIN_=119
    JSON_=120
    JSON_ARRAY_=121
    JSON_EXISTS_=122
    JSON_OBJECT_=123
    JSON_QUERY_=124
    JSON_TABLE_=125
    JSON_VALUE_=126
    KEEP_=127
    KEY_=128
    KEYS_=129
    LANGUAGE_=130
    LAST_=131
    LATERAL_=132
    LEADING_=133
    LEAVE_=134
    LEFT_=135
    LEVEL_=136
    LIKE_=137
    LIMIT_=138
    LISTAGG_=139
    LOCAL_=140
    LOCALTIME_=141
    LOCALTIMESTAMP_=142
    LOGICAL_=143
    LOOP_=144
    MAP_=145
    MATCH_=146
    MATCHED_=147
    MATCHES_=148
    MATCH_RECOGNIZE_=149
    MATERIALIZED_=150
    MEASURES_=151
    MERGE_=152
    MINUTE_=153
    MONTH_=154
    NATURAL_=155
    NESTED_=156
    NEXT_=157
    NFC_=158
    NFD_=159
    NFKC_=160
    NFKD_=161
    NO_=162
    NONE_=163
    NORMALIZE_=164
    NOT_=165
    NULL_=166
    NULLIF_=167
    NULLS_=168
    OBJECT_=169
    OF_=170
    OFFSET_=171
    OMIT_=172
    ON_=173
    ONE_=174
    ONLY_=175
    OPTION_=176
    OR_=177
    ORDER_=178
    ORDINALITY_=179
    OUTER_=180
    OUTPUT_=181
    OVER_=182
    OVERFLOW_=183
    PARTITION_=184
    PARTITIONS_=185
    PASSING_=186
    PAST_=187
    PATH_=188
    PATTERN_=189
    PER_=190
    PERIOD_=191
    PERMUTE_=192
    PLAN_=193
    POSITION_=194
    PRECEDING_=195
    PRECISION_=196
    PREPARE_=197
    PRIVILEGES_=198
    PROPERTIES_=199
    PRUNE_=200
    QUOTES_=201
    RANGE_=202
    READ_=203
    RECURSIVE_=204
    REFRESH_=205
    RENAME_=206
    REPEAT_=207
    REPEATABLE_=208
    REPLACE_=209
    RESET_=210
    RESPECT_=211
    RESTRICT_=212
    RETURN_=213
    RETURNING_=214
    RETURNS_=215
    REVOKE_=216
    RIGHT_=217
    ROLE_=218
    ROLES_=219
    ROLLBACK_=220
    ROLLUP_=221
    ROW_=222
    ROWS_=223
    RUNNING_=224
    SCALAR_=225
    SCHEMA_=226
    SCHEMAS_=227
    SECOND_=228
    SECURITY_=229
    SEEK_=230
    SELECT_=231
    SERIALIZABLE_=232
    SESSION_=233
    SET_=234
    SETS_=235
    SHOW_=236
    SKIP_=237
    SOME_=238
    START_=239
    STATS_=240
    SUBSET_=241
    SUBSTRING_=242
    SYSTEM_=243
    TABLE_=244
    TABLES_=245
    TABLESAMPLE_=246
    TEXT_=247
    TEXT_STRING_=248
    THEN_=249
    TIES_=250
    TIME_=251
    TIMESTAMP_=252
    TO_=253
    TRAILING_=254
    TRANSACTION_=255
    TRIM_=256
    TRUE_=257
    TRUNCATE_=258
    TRY_CAST_=259
    TYPE_=260
    UESCAPE_=261
    UNBOUNDED_=262
    UNCOMMITTED_=263
    UNCONDITIONAL_=264
    UNION_=265
    UNIQUE_=266
    UNKNOWN_=267
    UNMATCHED_=268
    UNNEST_=269
    UNTIL_=270
    UPDATE_=271
    USE_=272
    USER_=273
    USING_=274
    UTF16_=275
    UTF32_=276
    UTF8_=277
    VALIDATE_=278
    VALUE_=279
    VALUES_=280
    VERBOSE_=281
    VERSION_=282
    VIEW_=283
    WHEN_=284
    WHERE_=285
    WHILE_=286
    WINDOW_=287
    WITH_=288
    WITHIN_=289
    WITHOUT_=290
    WORK_=291
    WRAPPER_=292
    WRITE_=293
    YEAR_=294
    ZONE_=295
    EQ_=296
    NEQ_=297
    LT_=298
    LTE_=299
    GT_=300
    GTE_=301
    PLUS_=302
    MINUS_=303
    ASTERISK_=304
    SLASH_=305
    PERCENT_=306
    CONCAT_=307
    QUESTION_MARK_=308
    SEMICOLON_=309
    DOT_=310
    COLON_=311
    COMMA_=312
    LPAREN_=313
    RPAREN_=314
    LSQUARE_=315
    RSQUARE_=316
    LCURLY_=317
    RCURLY_=318
    LCURLYHYPHEN_=319
    RCURLYHYPHEN_=320
    LARROW_=321
    RARROW_=322
    RDOUBLEARROW_=323
    VBAR_=324
    DOLLAR_=325
    CARET_=326
    STRING_=327
    UNICODE_STRING_=328
    BINARY_LITERAL_=329
    INTEGER_VALUE_=330
    DECIMAL_VALUE_=331
    DOUBLE_VALUE_=332
    IDENTIFIER_=333
    DIGIT_IDENTIFIER_=334
    QUOTED_IDENTIFIER_=335
    BACKQUOTED_IDENTIFIER_=336
    SIMPLE_COMMENT_=337
    BRACKETED_COMMENT_=338
    WS_=339
    UNRECOGNIZED_=340

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TrinoParser.EOF, 0)

        def statements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.StatementsContext)
            else:
                return self.getTypedRuleContext(TrinoParser.StatementsContext,i)


        def getRuleIndex(self):
            return TrinoParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = TrinoParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611695235427862786) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347098961875043977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -144150373018374145) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -9074541044212965921) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & 4095) != 0):
                self.state = 252
                self.statements()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 258
            self.match(TrinoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleStatement(self):
            return self.getTypedRuleContext(TrinoParser.SingleStatementContext,0)


        def standaloneExpression(self):
            return self.getTypedRuleContext(TrinoParser.StandaloneExpressionContext,0)


        def standalonePathSpecification(self):
            return self.getTypedRuleContext(TrinoParser.StandalonePathSpecificationContext,0)


        def standaloneType(self):
            return self.getTypedRuleContext(TrinoParser.StandaloneTypeContext,0)


        def standaloneRowPattern(self):
            return self.getTypedRuleContext(TrinoParser.StandaloneRowPatternContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def standaloneFunctionSpecification(self):
            return self.getTypedRuleContext(TrinoParser.StandaloneFunctionSpecificationContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = TrinoParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self.singleStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.standaloneExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 262
                self.standalonePathSpecification()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 263
                self.standaloneType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 264
                self.standaloneRowPattern()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==309:
                    self.state = 265
                    self.match(TrinoParser.SEMICOLON_)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 268
                self.standaloneFunctionSpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(TrinoParser.StatementContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = TrinoParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.statement()
            self.state = 272
            self.match(TrinoParser.SEMICOLON_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_standaloneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneExpression" ):
                listener.enterStandaloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneExpression" ):
                listener.exitStandaloneExpression(self)




    def standaloneExpression(self):

        localctx = TrinoParser.StandaloneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_standaloneExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.expression()
            self.state = 275
            self.match(TrinoParser.SEMICOLON_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandalonePathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSpecification(self):
            return self.getTypedRuleContext(TrinoParser.PathSpecificationContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_standalonePathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalonePathSpecification" ):
                listener.enterStandalonePathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalonePathSpecification" ):
                listener.exitStandalonePathSpecification(self)




    def standalonePathSpecification(self):

        localctx = TrinoParser.StandalonePathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_standalonePathSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.pathSpecification()
            self.state = 278
            self.match(TrinoParser.SEMICOLON_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_standaloneType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneType" ):
                listener.enterStandaloneType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneType" ):
                listener.exitStandaloneType(self)




    def standaloneType(self):

        localctx = TrinoParser.StandaloneTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_standaloneType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.type_(0)
            self.state = 281
            self.match(TrinoParser.SEMICOLON_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneRowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowPattern(self):
            return self.getTypedRuleContext(TrinoParser.RowPatternContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_standaloneRowPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneRowPattern" ):
                listener.enterStandaloneRowPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneRowPattern" ):
                listener.exitStandaloneRowPattern(self)




    def standaloneRowPattern(self):

        localctx = TrinoParser.StandaloneRowPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_standaloneRowPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.rowPattern(0)
            self.state = 284
            self.match(TrinoParser.SEMICOLON_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneFunctionSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSpecification(self):
            return self.getTypedRuleContext(TrinoParser.FunctionSpecificationContext,0)


        def SEMICOLON_(self):
            return self.getToken(TrinoParser.SEMICOLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_standaloneFunctionSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneFunctionSpecification" ):
                listener.enterStandaloneFunctionSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneFunctionSpecification" ):
                listener.exitStandaloneFunctionSpecification(self)




    def standaloneFunctionSpecification(self):

        localctx = TrinoParser.StandaloneFunctionSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_standaloneFunctionSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.functionSpecification()
            self.state = 287
            self.match(TrinoParser.SEMICOLON_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN_(self):
            return self.getToken(TrinoParser.EXPLAIN_, 0)
        def statement(self):
            return self.getTypedRuleContext(TrinoParser.StatementContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExplainOptionContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE_(self):
            return self.getToken(TrinoParser.PREPARE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def statement(self):
            return self.getTypedRuleContext(TrinoParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)


    class DropMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedView" ):
                listener.enterDropMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedView" ):
                listener.exitDropMaterializedView(self)


    class SetMaterializedViewPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def PROPERTIES_(self):
            return self.getToken(TrinoParser.PROPERTIES_, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(TrinoParser.PropertyAssignmentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetMaterializedViewProperties" ):
                listener.enterSetMaterializedViewProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetMaterializedViewProperties" ):
                listener.exitSetMaterializedViewProperties(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE_(self):
            return self.getToken(TrinoParser.USE_, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def DOT_(self):
            return self.getToken(TrinoParser.DOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE_(self):
            return self.getToken(TrinoParser.DEALLOCATE_, 0)
        def PREPARE_(self):
            return self.getToken(TrinoParser.PREPARE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def RENAME_(self):
            return self.getToken(TrinoParser.RENAME_, 0)
        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT_(self):
            return self.getToken(TrinoParser.COMMIT_, 0)
        def WORK_(self):
            return self.getToken(TrinoParser.WORK_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)


    class CreateRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def ROLE_(self):
            return self.getToken(TrinoParser.ROLE_, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def ADMIN_(self):
            return self.getToken(TrinoParser.ADMIN_, 0)
        def grantor(self):
            return self.getTypedRuleContext(TrinoParser.GrantorContext,0)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)


    class DropColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def COLUMN_(self):
            return self.getToken(TrinoParser.COLUMN_, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)

        def IF_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.IF_)
            else:
                return self.getToken(TrinoParser.IF_, i)
        def EXISTS_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.EXISTS_)
            else:
                return self.getToken(TrinoParser.EXISTS_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.pattern = None # String_Context
            self.escape = None # String_Context
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def TABLES_(self):
            return self.getToken(TrinoParser.TABLES_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.String_Context)
            else:
                return self.getTypedRuleContext(TrinoParser.String_Context,i)

        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class SetViewAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetViewAuthorization" ):
                listener.enterSetViewAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetViewAuthorization" ):
                listener.exitSetViewAuthorization(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.pattern = None # String_Context
            self.escape = None # String_Context
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def CATALOGS_(self):
            return self.getToken(TrinoParser.CATALOGS_, 0)
        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.String_Context)
            else:
                return self.getTypedRuleContext(TrinoParser.String_Context,i)

        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)


    class ShowRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def ROLES_(self):
            return self.getToken(TrinoParser.ROLES_, 0)
        def CURRENT_(self):
            return self.getToken(TrinoParser.CURRENT_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)


    class MergeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MERGE_(self):
            return self.getToken(TrinoParser.MERGE_, 0)
        def INTO_(self):
            return self.getToken(TrinoParser.INTO_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def USING_(self):
            return self.getToken(TrinoParser.USING_, 0)
        def relation(self):
            return self.getTypedRuleContext(TrinoParser.RelationContext,0)

        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def mergeCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.MergeCaseContext)
            else:
                return self.getTypedRuleContext(TrinoParser.MergeCaseContext,i)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge" ):
                listener.enterMerge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge" ):
                listener.exitMerge(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.from_ = None # QualifiedNameContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def RENAME_(self):
            return self.getToken(TrinoParser.RENAME_, 0)
        def COLUMN_(self):
            return self.getToken(TrinoParser.COLUMN_, 0)
        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def IF_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.IF_)
            else:
                return self.getToken(TrinoParser.IF_, i)
        def EXISTS_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.EXISTS_)
            else:
                return self.getToken(TrinoParser.EXISTS_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)


    class CommentColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def COLUMN_(self):
            return self.getToken(TrinoParser.COLUMN_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IS_(self):
            return self.getToken(TrinoParser.IS_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumn" ):
                listener.enterCommentColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumn" ):
                listener.exitCommentColumn(self)


    class RevokeRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def REVOKE_(self):
            return self.getToken(TrinoParser.REVOKE_, 0)
        def roles(self):
            return self.getTypedRuleContext(TrinoParser.RolesContext,0)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PrincipalContext,i)

        def ADMIN_(self):
            return self.getToken(TrinoParser.ADMIN_, 0)
        def OPTION_(self):
            return self.getToken(TrinoParser.OPTION_, 0)
        def FOR_(self):
            return self.getToken(TrinoParser.FOR_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def GRANTED_(self):
            return self.getToken(TrinoParser.GRANTED_, 0)
        def BY_(self):
            return self.getToken(TrinoParser.BY_, 0)
        def grantor(self):
            return self.getTypedRuleContext(TrinoParser.GrantorContext,0)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoles" ):
                listener.enterRevokeRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoles" ):
                listener.exitRevokeRoles(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.pattern = None # String_Context
            self.escape = None # String_Context
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def COLUMNS_(self):
            return self.getToken(TrinoParser.COLUMNS_, 0)
        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.String_Context)
            else:
                return self.getTypedRuleContext(TrinoParser.String_Context,i)

        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)
        def DESCRIBE_(self):
            return self.getToken(TrinoParser.DESCRIBE_, 0)
        def DESC_(self):
            return self.getToken(TrinoParser.DESC_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class ShowRoleGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def ROLE_(self):
            return self.getToken(TrinoParser.ROLE_, 0)
        def GRANTS_(self):
            return self.getToken(TrinoParser.GRANTS_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def ADD_(self):
            return self.getToken(TrinoParser.ADD_, 0)
        def COLUMN_(self):
            return self.getToken(TrinoParser.COLUMN_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(TrinoParser.ColumnDefinitionContext,0)

        def IF_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.IF_)
            else:
                return self.getToken(TrinoParser.IF_, i)
        def EXISTS_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.EXISTS_)
            else:
                return self.getToken(TrinoParser.EXISTS_, i)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)


    class DenyContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def DENY_(self):
            return self.getToken(TrinoParser.DENY_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PrivilegeContext,i)

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)
        def PRIVILEGES_(self):
            return self.getToken(TrinoParser.PRIVILEGES_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeny" ):
                listener.enterDeny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeny" ):
                listener.exitDeny(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET_(self):
            return self.getToken(TrinoParser.RESET_, 0)
        def SESSION_(self):
            return self.getToken(TrinoParser.SESSION_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT_(self):
            return self.getToken(TrinoParser.INSERT_, 0)
        def INTO_(self):
            return self.getToken(TrinoParser.INTO_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def rootQuery(self):
            return self.getTypedRuleContext(TrinoParser.RootQueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.pattern = None # String_Context
            self.escape = None # String_Context
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def SESSION_(self):
            return self.getToken(TrinoParser.SESSION_, 0)
        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.String_Context)
            else:
                return self.getTypedRuleContext(TrinoParser.String_Context,i)

        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)


    class SetSessionAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def SESSION_(self):
            return self.getToken(TrinoParser.SESSION_, 0)
        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)
        def authorizationUser(self):
            return self.getTypedRuleContext(TrinoParser.AuthorizationUserContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSessionAuthorization" ):
                listener.enterSetSessionAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSessionAuthorization" ):
                listener.exitSetSessionAuthorization(self)


    class ExplainAnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN_(self):
            return self.getToken(TrinoParser.EXPLAIN_, 0)
        def ANALYZE_(self):
            return self.getToken(TrinoParser.ANALYZE_, 0)
        def statement(self):
            return self.getTypedRuleContext(TrinoParser.StatementContext,0)

        def VERBOSE_(self):
            return self.getToken(TrinoParser.VERBOSE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainAnalyze" ):
                listener.enterExplainAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainAnalyze" ):
                listener.exitExplainAnalyze(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE_(self):
            return self.getToken(TrinoParser.EXECUTE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def USING_(self):
            return self.getToken(TrinoParser.USING_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def RENAME_(self):
            return self.getToken(TrinoParser.RENAME_, 0)
        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)


    class DropRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def ROLE_(self):
            return self.getToken(TrinoParser.ROLE_, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE_(self):
            return self.getToken(TrinoParser.ANALYZE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class SetRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.role = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def ROLE_(self):
            return self.getToken(TrinoParser.ROLE_, 0)
        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)
        def NONE_(self):
            return self.getToken(TrinoParser.NONE_, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def functionSpecification(self):
            return self.getTypedRuleContext(TrinoParser.FunctionSpecificationContext,0)

        def OR_(self):
            return self.getToken(TrinoParser.OR_, 0)
        def REPLACE_(self):
            return self.getToken(TrinoParser.REPLACE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class DropCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def CATALOG_(self):
            return self.getToken(TrinoParser.CATALOG_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def CASCADE_(self):
            return self.getToken(TrinoParser.CASCADE_, 0)
        def RESTRICT_(self):
            return self.getToken(TrinoParser.RESTRICT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCatalog" ):
                listener.enterDropCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCatalog" ):
                listener.exitDropCatalog(self)


    class ShowGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def GRANTS_(self):
            return self.getToken(TrinoParser.GRANTS_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def CASCADE_(self):
            return self.getToken(TrinoParser.CASCADE_, 0)
        def RESTRICT_(self):
            return self.getToken(TrinoParser.RESTRICT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)


    class ResetSessionAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET_(self):
            return self.getToken(TrinoParser.RESET_, 0)
        def SESSION_(self):
            return self.getToken(TrinoParser.SESSION_, 0)
        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSessionAuthorization" ):
                listener.enterResetSessionAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSessionAuthorization" ):
                listener.exitResetSessionAuthorization(self)


    class SetTableAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableAuthorization" ):
                listener.enterSetTableAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableAuthorization" ):
                listener.exitSetTableAuthorization(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.TableElementContext)
            else:
                return self.getTypedRuleContext(TrinoParser.TableElementContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def OR_(self):
            return self.getToken(TrinoParser.OR_, 0)
        def REPLACE_(self):
            return self.getToken(TrinoParser.REPLACE_, 0)
        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START_(self):
            return self.getToken(TrinoParser.START_, 0)
        def TRANSACTION_(self):
            return self.getToken(TrinoParser.TRANSACTION_, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(TrinoParser.TransactionModeContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def rootQuery(self):
            return self.getTypedRuleContext(TrinoParser.RootQueryContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def OR_(self):
            return self.getToken(TrinoParser.OR_, 0)
        def REPLACE_(self):
            return self.getToken(TrinoParser.REPLACE_, 0)
        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def WITH_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.WITH_)
            else:
                return self.getToken(TrinoParser.WITH_, i)
        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)

        def DATA_(self):
            return self.getToken(TrinoParser.DATA_, 0)
        def NO_(self):
            return self.getToken(TrinoParser.NO_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)


    class CommentViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IS_(self):
            return self.getToken(TrinoParser.IS_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentView" ):
                listener.enterCommentView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentView" ):
                listener.exitCommentView(self)


    class ShowStatsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def STATS_(self):
            return self.getToken(TrinoParser.STATS_, 0)
        def FOR_(self):
            return self.getToken(TrinoParser.FOR_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStats" ):
                listener.enterShowStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStats" ):
                listener.exitShowStats(self)


    class ShowCreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateSchema" ):
                listener.enterShowCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateSchema" ):
                listener.exitShowCreateSchema(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def FUNCTION_(self):
            return self.getToken(TrinoParser.FUNCTION_, 0)
        def functionDeclaration(self):
            return self.getTypedRuleContext(TrinoParser.FunctionDeclarationContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def REVOKE_(self):
            return self.getToken(TrinoParser.REVOKE_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PrivilegeContext,i)

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)
        def PRIVILEGES_(self):
            return self.getToken(TrinoParser.PRIVILEGES_, 0)
        def GRANT_(self):
            return self.getToken(TrinoParser.GRANT_, 0)
        def OPTION_(self):
            return self.getToken(TrinoParser.OPTION_, 0)
        def FOR_(self):
            return self.getToken(TrinoParser.FOR_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def UPDATE_(self):
            return self.getToken(TrinoParser.UPDATE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def updateAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.UpdateAssignmentContext)
            else:
                return self.getTypedRuleContext(TrinoParser.UpdateAssignmentContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def WHERE_(self):
            return self.getToken(TrinoParser.WHERE_, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)


    class TableExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.procedureName = None # IdentifierContext
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def EXECUTE_(self):
            return self.getToken(TrinoParser.EXECUTE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def WHERE_(self):
            return self.getToken(TrinoParser.WHERE_, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(TrinoParser.CallArgumentContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExecute" ):
                listener.enterTableExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExecute" ):
                listener.exitTableExecute(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE_(self):
            return self.getToken(TrinoParser.DELETE_, 0)
        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def WHERE_(self):
            return self.getToken(TrinoParser.WHERE_, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE_(self):
            return self.getToken(TrinoParser.DESCRIBE_, 0)
        def INPUT_(self):
            return self.getToken(TrinoParser.INPUT_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)


    class ShowStatsForQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def STATS_(self):
            return self.getToken(TrinoParser.STATS_, 0)
        def FOR_(self):
            return self.getToken(TrinoParser.FOR_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def rootQuery(self):
            return self.getTypedRuleContext(TrinoParser.RootQueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsForQuery" ):
                listener.enterShowStatsForQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsForQuery" ):
                listener.exitShowStatsForQuery(self)


    class SetColumnTypeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.columnName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.ALTER_)
            else:
                return self.getToken(TrinoParser.ALTER_, i)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def COLUMN_(self):
            return self.getToken(TrinoParser.COLUMN_, 0)
        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def DATA_(self):
            return self.getToken(TrinoParser.DATA_, 0)
        def TYPE_(self):
            return self.getToken(TrinoParser.TYPE_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetColumnType" ):
                listener.enterSetColumnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetColumnType" ):
                listener.exitSetColumnType(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rootQuery(self):
            return self.getTypedRuleContext(TrinoParser.RootQueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def TIME_(self):
            return self.getToken(TrinoParser.TIME_, 0)
        def ZONE_(self):
            return self.getToken(TrinoParser.ZONE_, 0)
        def LOCAL_(self):
            return self.getToken(TrinoParser.LOCAL_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE_(self):
            return self.getToken(TrinoParser.TRUNCATE_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)


    class CreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def rootQuery(self):
            return self.getTypedRuleContext(TrinoParser.RootQueryContext,0)

        def OR_(self):
            return self.getToken(TrinoParser.OR_, 0)
        def REPLACE_(self):
            return self.getToken(TrinoParser.REPLACE_, 0)
        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def GRACE_(self):
            return self.getToken(TrinoParser.GRACE_, 0)
        def PERIOD_(self):
            return self.getToken(TrinoParser.PERIOD_, 0)
        def interval(self):
            return self.getTypedRuleContext(TrinoParser.IntervalContext,0)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def SESSION_(self):
            return self.getToken(TrinoParser.SESSION_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def EQ_(self):
            return self.getToken(TrinoParser.EQ_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def rootQuery(self):
            return self.getTypedRuleContext(TrinoParser.RootQueryContext,0)

        def OR_(self):
            return self.getToken(TrinoParser.OR_, 0)
        def REPLACE_(self):
            return self.getToken(TrinoParser.REPLACE_, 0)
        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def SECURITY_(self):
            return self.getToken(TrinoParser.SECURITY_, 0)
        def DEFINER_(self):
            return self.getToken(TrinoParser.DEFINER_, 0)
        def INVOKER_(self):
            return self.getToken(TrinoParser.INVOKER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class RenameMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def RENAME_(self):
            return self.getToken(TrinoParser.RENAME_, 0)
        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameMaterializedView" ):
                listener.enterRenameMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameMaterializedView" ):
                listener.exitRenameMaterializedView(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.pattern = None # String_Context
            self.escape = None # String_Context
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def SCHEMAS_(self):
            return self.getToken(TrinoParser.SCHEMAS_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.String_Context)
            else:
                return self.getTypedRuleContext(TrinoParser.String_Context,i)

        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP_(self):
            return self.getToken(TrinoParser.DROP_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class SetSchemaAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSchemaAuthorization" ):
                listener.enterSetSchemaAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSchemaAuthorization" ):
                listener.exitSetSchemaAuthorization(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK_(self):
            return self.getToken(TrinoParser.ROLLBACK_, 0)
        def WORK_(self):
            return self.getToken(TrinoParser.WORK_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def IS_(self):
            return self.getToken(TrinoParser.IS_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)


    class ExecuteImmediateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE_(self):
            return self.getToken(TrinoParser.EXECUTE_, 0)
        def IMMEDIATE_(self):
            return self.getToken(TrinoParser.IMMEDIATE_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def USING_(self):
            return self.getToken(TrinoParser.USING_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediate" ):
                listener.enterExecuteImmediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediate" ):
                listener.exitExecuteImmediate(self)


    class RenameViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def RENAME_(self):
            return self.getToken(TrinoParser.RENAME_, 0)
        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameView" ):
                listener.enterRenameView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameView" ):
                listener.exitRenameView(self)


    class SetPathContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def PATH_(self):
            return self.getToken(TrinoParser.PATH_, 0)
        def pathSpecification(self):
            return self.getTypedRuleContext(TrinoParser.PathSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPath" ):
                listener.enterSetPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPath" ):
                listener.exitSetPath(self)


    class GrantRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def GRANT_(self):
            return self.getToken(TrinoParser.GRANT_, 0)
        def roles(self):
            return self.getTypedRuleContext(TrinoParser.RolesContext,0)

        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PrincipalContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def ADMIN_(self):
            return self.getToken(TrinoParser.ADMIN_, 0)
        def OPTION_(self):
            return self.getToken(TrinoParser.OPTION_, 0)
        def GRANTED_(self):
            return self.getToken(TrinoParser.GRANTED_, 0)
        def BY_(self):
            return self.getToken(TrinoParser.BY_, 0)
        def grantor(self):
            return self.getTypedRuleContext(TrinoParser.GrantorContext,0)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoles" ):
                listener.enterGrantRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoles" ):
                listener.exitGrantRoles(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL_(self):
            return self.getToken(TrinoParser.CALL_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(TrinoParser.CallArgumentContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)


    class RefreshMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH_(self):
            return self.getToken(TrinoParser.REFRESH_, 0)
        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshMaterializedView" ):
                listener.enterRefreshMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshMaterializedView" ):
                listener.exitRefreshMaterializedView(self)


    class ShowCreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)
        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateMaterializedView" ):
                listener.enterShowCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateMaterializedView" ):
                listener.exitShowCreateMaterializedView(self)


    class CreateCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.connectorName = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)
        def CATALOG_(self):
            return self.getToken(TrinoParser.CATALOG_, 0)
        def USING_(self):
            return self.getToken(TrinoParser.USING_, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateCatalog" ):
                listener.enterCreateCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateCatalog" ):
                listener.exitCreateCatalog(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.pattern = None # String_Context
            self.escape = None # String_Context
            self.copyFrom(ctx)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)
        def FUNCTIONS_(self):
            return self.getToken(TrinoParser.FUNCTIONS_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.String_Context)
            else:
                return self.getTypedRuleContext(TrinoParser.String_Context,i)

        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE_(self):
            return self.getToken(TrinoParser.DESCRIBE_, 0)
        def OUTPUT_(self):
            return self.getToken(TrinoParser.OUTPUT_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def GRANT_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.GRANT_)
            else:
                return self.getToken(TrinoParser.GRANT_, i)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)
        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PrivilegeContext,i)

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)
        def PRIVILEGES_(self):
            return self.getToken(TrinoParser.PRIVILEGES_, 0)
        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def OPTION_(self):
            return self.getToken(TrinoParser.OPTION_, 0)
        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER_(self):
            return self.getToken(TrinoParser.ALTER_, 0)
        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def PROPERTIES_(self):
            return self.getToken(TrinoParser.PROPERTIES_, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(TrinoParser.PropertyAssignmentsContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)



    def statement(self):

        localctx = TrinoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.rootQuery()
                pass

            elif la_ == 2:
                localctx = TrinoParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.match(TrinoParser.USE_)
                self.state = 291
                localctx.schema = self.identifier()
                pass

            elif la_ == 3:
                localctx = TrinoParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.match(TrinoParser.USE_)
                self.state = 293
                localctx.catalog = self.identifier()
                self.state = 294
                self.match(TrinoParser.DOT_)
                self.state = 295
                localctx.schema = self.identifier()
                pass

            elif la_ == 4:
                localctx = TrinoParser.CreateCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 297
                self.match(TrinoParser.CREATE_)
                self.state = 298
                self.match(TrinoParser.CATALOG_)
                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 299
                    self.match(TrinoParser.IF_)
                    self.state = 300
                    self.match(TrinoParser.NOT_)
                    self.state = 301
                    self.match(TrinoParser.EXISTS_)


                self.state = 304
                localctx.catalog = self.identifier()
                self.state = 305
                self.match(TrinoParser.USING_)
                self.state = 306
                localctx.connectorName = self.identifier()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 307
                    self.match(TrinoParser.COMMENT_)
                    self.state = 308
                    self.string_()


                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 311
                    self.match(TrinoParser.AUTHORIZATION_)
                    self.state = 312
                    self.principal()


                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 315
                    self.match(TrinoParser.WITH_)
                    self.state = 316
                    self.properties()


                pass

            elif la_ == 5:
                localctx = TrinoParser.DropCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 319
                self.match(TrinoParser.DROP_)
                self.state = 320
                self.match(TrinoParser.CATALOG_)
                self.state = 323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 321
                    self.match(TrinoParser.IF_)
                    self.state = 322
                    self.match(TrinoParser.EXISTS_)


                self.state = 325
                localctx.catalog = self.identifier()
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22 or _la==212:
                    self.state = 326
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==212):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = TrinoParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 329
                self.match(TrinoParser.CREATE_)
                self.state = 330
                self.match(TrinoParser.SCHEMA_)
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 331
                    self.match(TrinoParser.IF_)
                    self.state = 332
                    self.match(TrinoParser.NOT_)
                    self.state = 333
                    self.match(TrinoParser.EXISTS_)


                self.state = 336
                self.qualifiedName()
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 337
                    self.match(TrinoParser.AUTHORIZATION_)
                    self.state = 338
                    self.principal()


                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 341
                    self.match(TrinoParser.WITH_)
                    self.state = 342
                    self.properties()


                pass

            elif la_ == 7:
                localctx = TrinoParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 345
                self.match(TrinoParser.DROP_)
                self.state = 346
                self.match(TrinoParser.SCHEMA_)
                self.state = 349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.match(TrinoParser.IF_)
                    self.state = 348
                    self.match(TrinoParser.EXISTS_)


                self.state = 351
                self.qualifiedName()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22 or _la==212:
                    self.state = 352
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==212):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = TrinoParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 355
                self.match(TrinoParser.ALTER_)
                self.state = 356
                self.match(TrinoParser.SCHEMA_)
                self.state = 357
                self.qualifiedName()
                self.state = 358
                self.match(TrinoParser.RENAME_)
                self.state = 359
                self.match(TrinoParser.TO_)
                self.state = 360
                self.identifier()
                pass

            elif la_ == 9:
                localctx = TrinoParser.SetSchemaAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 362
                self.match(TrinoParser.ALTER_)
                self.state = 363
                self.match(TrinoParser.SCHEMA_)
                self.state = 364
                self.qualifiedName()
                self.state = 365
                self.match(TrinoParser.SET_)
                self.state = 366
                self.match(TrinoParser.AUTHORIZATION_)
                self.state = 367
                self.principal()
                pass

            elif la_ == 10:
                localctx = TrinoParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 369
                self.match(TrinoParser.CREATE_)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 370
                    self.match(TrinoParser.OR_)
                    self.state = 371
                    self.match(TrinoParser.REPLACE_)


                self.state = 374
                self.match(TrinoParser.TABLE_)
                self.state = 378
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 375
                    self.match(TrinoParser.IF_)
                    self.state = 376
                    self.match(TrinoParser.NOT_)
                    self.state = 377
                    self.match(TrinoParser.EXISTS_)


                self.state = 380
                self.qualifiedName()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==313:
                    self.state = 381
                    self.columnAliases()


                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 384
                    self.match(TrinoParser.COMMENT_)
                    self.state = 385
                    self.string_()


                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 388
                    self.match(TrinoParser.WITH_)
                    self.state = 389
                    self.properties()


                self.state = 392
                self.match(TrinoParser.AS_)
                self.state = 398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 393
                    self.rootQuery()
                    pass

                elif la_ == 2:
                    self.state = 394
                    self.match(TrinoParser.LPAREN_)
                    self.state = 395
                    self.rootQuery()
                    self.state = 396
                    self.match(TrinoParser.RPAREN_)
                    pass


                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 400
                    self.match(TrinoParser.WITH_)
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==162:
                        self.state = 401
                        self.match(TrinoParser.NO_)


                    self.state = 404
                    self.match(TrinoParser.DATA_)


                pass

            elif la_ == 11:
                localctx = TrinoParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 407
                self.match(TrinoParser.CREATE_)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 408
                    self.match(TrinoParser.OR_)
                    self.state = 409
                    self.match(TrinoParser.REPLACE_)


                self.state = 412
                self.match(TrinoParser.TABLE_)
                self.state = 416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 413
                    self.match(TrinoParser.IF_)
                    self.state = 414
                    self.match(TrinoParser.NOT_)
                    self.state = 415
                    self.match(TrinoParser.EXISTS_)


                self.state = 418
                self.qualifiedName()
                self.state = 419
                self.match(TrinoParser.LPAREN_)
                self.state = 420
                self.tableElement()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 421
                    self.match(TrinoParser.COMMA_)
                    self.state = 422
                    self.tableElement()
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 428
                self.match(TrinoParser.RPAREN_)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 429
                    self.match(TrinoParser.COMMENT_)
                    self.state = 430
                    self.string_()


                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 433
                    self.match(TrinoParser.WITH_)
                    self.state = 434
                    self.properties()


                pass

            elif la_ == 12:
                localctx = TrinoParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 437
                self.match(TrinoParser.DROP_)
                self.state = 438
                self.match(TrinoParser.TABLE_)
                self.state = 441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.match(TrinoParser.IF_)
                    self.state = 440
                    self.match(TrinoParser.EXISTS_)


                self.state = 443
                self.qualifiedName()
                pass

            elif la_ == 13:
                localctx = TrinoParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 444
                self.match(TrinoParser.INSERT_)
                self.state = 445
                self.match(TrinoParser.INTO_)
                self.state = 446
                self.qualifiedName()
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 447
                    self.columnAliases()


                self.state = 450
                self.rootQuery()
                pass

            elif la_ == 14:
                localctx = TrinoParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 452
                self.match(TrinoParser.DELETE_)
                self.state = 453
                self.match(TrinoParser.FROM_)
                self.state = 454
                self.qualifiedName()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==285:
                    self.state = 455
                    self.match(TrinoParser.WHERE_)
                    self.state = 456
                    self.booleanExpression(0)


                pass

            elif la_ == 15:
                localctx = TrinoParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 459
                self.match(TrinoParser.TRUNCATE_)
                self.state = 460
                self.match(TrinoParser.TABLE_)
                self.state = 461
                self.qualifiedName()
                pass

            elif la_ == 16:
                localctx = TrinoParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 462
                self.match(TrinoParser.COMMENT_)
                self.state = 463
                self.match(TrinoParser.ON_)
                self.state = 464
                self.match(TrinoParser.TABLE_)
                self.state = 465
                self.qualifiedName()
                self.state = 466
                self.match(TrinoParser.IS_)
                self.state = 469
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [327, 328]:
                    self.state = 467
                    self.string_()
                    pass
                elif token in [166]:
                    self.state = 468
                    self.match(TrinoParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = TrinoParser.CommentViewContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 471
                self.match(TrinoParser.COMMENT_)
                self.state = 472
                self.match(TrinoParser.ON_)
                self.state = 473
                self.match(TrinoParser.VIEW_)
                self.state = 474
                self.qualifiedName()
                self.state = 475
                self.match(TrinoParser.IS_)
                self.state = 478
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [327, 328]:
                    self.state = 476
                    self.string_()
                    pass
                elif token in [166]:
                    self.state = 477
                    self.match(TrinoParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                localctx = TrinoParser.CommentColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 480
                self.match(TrinoParser.COMMENT_)
                self.state = 481
                self.match(TrinoParser.ON_)
                self.state = 482
                self.match(TrinoParser.COLUMN_)
                self.state = 483
                self.qualifiedName()
                self.state = 484
                self.match(TrinoParser.IS_)
                self.state = 487
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [327, 328]:
                    self.state = 485
                    self.string_()
                    pass
                elif token in [166]:
                    self.state = 486
                    self.match(TrinoParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                localctx = TrinoParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 489
                self.match(TrinoParser.ALTER_)
                self.state = 490
                self.match(TrinoParser.TABLE_)
                self.state = 493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 491
                    self.match(TrinoParser.IF_)
                    self.state = 492
                    self.match(TrinoParser.EXISTS_)


                self.state = 495
                localctx.from_ = self.qualifiedName()
                self.state = 496
                self.match(TrinoParser.RENAME_)
                self.state = 497
                self.match(TrinoParser.TO_)
                self.state = 498
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 20:
                localctx = TrinoParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 500
                self.match(TrinoParser.ALTER_)
                self.state = 501
                self.match(TrinoParser.TABLE_)
                self.state = 504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 502
                    self.match(TrinoParser.IF_)
                    self.state = 503
                    self.match(TrinoParser.EXISTS_)


                self.state = 506
                localctx.tableName = self.qualifiedName()
                self.state = 507
                self.match(TrinoParser.ADD_)
                self.state = 508
                self.match(TrinoParser.COLUMN_)
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 509
                    self.match(TrinoParser.IF_)
                    self.state = 510
                    self.match(TrinoParser.NOT_)
                    self.state = 511
                    self.match(TrinoParser.EXISTS_)


                self.state = 514
                localctx.column = self.columnDefinition()
                pass

            elif la_ == 21:
                localctx = TrinoParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 516
                self.match(TrinoParser.ALTER_)
                self.state = 517
                self.match(TrinoParser.TABLE_)
                self.state = 520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 518
                    self.match(TrinoParser.IF_)
                    self.state = 519
                    self.match(TrinoParser.EXISTS_)


                self.state = 522
                localctx.tableName = self.qualifiedName()
                self.state = 523
                self.match(TrinoParser.RENAME_)
                self.state = 524
                self.match(TrinoParser.COLUMN_)
                self.state = 527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.match(TrinoParser.IF_)
                    self.state = 526
                    self.match(TrinoParser.EXISTS_)


                self.state = 529
                localctx.from_ = self.qualifiedName()
                self.state = 530
                self.match(TrinoParser.TO_)
                self.state = 531
                localctx.to = self.identifier()
                pass

            elif la_ == 22:
                localctx = TrinoParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 533
                self.match(TrinoParser.ALTER_)
                self.state = 534
                self.match(TrinoParser.TABLE_)
                self.state = 537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 535
                    self.match(TrinoParser.IF_)
                    self.state = 536
                    self.match(TrinoParser.EXISTS_)


                self.state = 539
                localctx.tableName = self.qualifiedName()
                self.state = 540
                self.match(TrinoParser.DROP_)
                self.state = 541
                self.match(TrinoParser.COLUMN_)
                self.state = 544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 542
                    self.match(TrinoParser.IF_)
                    self.state = 543
                    self.match(TrinoParser.EXISTS_)


                self.state = 546
                localctx.column = self.qualifiedName()
                pass

            elif la_ == 23:
                localctx = TrinoParser.SetColumnTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 548
                self.match(TrinoParser.ALTER_)
                self.state = 549
                self.match(TrinoParser.TABLE_)
                self.state = 552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 550
                    self.match(TrinoParser.IF_)
                    self.state = 551
                    self.match(TrinoParser.EXISTS_)


                self.state = 554
                localctx.tableName = self.qualifiedName()
                self.state = 555
                self.match(TrinoParser.ALTER_)
                self.state = 556
                self.match(TrinoParser.COLUMN_)
                self.state = 557
                localctx.columnName = self.qualifiedName()
                self.state = 558
                self.match(TrinoParser.SET_)
                self.state = 559
                self.match(TrinoParser.DATA_)
                self.state = 560
                self.match(TrinoParser.TYPE_)
                self.state = 561
                self.type_(0)
                pass

            elif la_ == 24:
                localctx = TrinoParser.SetTableAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 563
                self.match(TrinoParser.ALTER_)
                self.state = 564
                self.match(TrinoParser.TABLE_)
                self.state = 565
                localctx.tableName = self.qualifiedName()
                self.state = 566
                self.match(TrinoParser.SET_)
                self.state = 567
                self.match(TrinoParser.AUTHORIZATION_)
                self.state = 568
                self.principal()
                pass

            elif la_ == 25:
                localctx = TrinoParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 570
                self.match(TrinoParser.ALTER_)
                self.state = 571
                self.match(TrinoParser.TABLE_)
                self.state = 572
                localctx.tableName = self.qualifiedName()
                self.state = 573
                self.match(TrinoParser.SET_)
                self.state = 574
                self.match(TrinoParser.PROPERTIES_)
                self.state = 575
                self.propertyAssignments()
                pass

            elif la_ == 26:
                localctx = TrinoParser.TableExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 577
                self.match(TrinoParser.ALTER_)
                self.state = 578
                self.match(TrinoParser.TABLE_)
                self.state = 579
                localctx.tableName = self.qualifiedName()
                self.state = 580
                self.match(TrinoParser.EXECUTE_)
                self.state = 581
                localctx.procedureName = self.identifier()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==313:
                    self.state = 582
                    self.match(TrinoParser.LPAREN_)
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                        self.state = 583
                        self.callArgument()
                        self.state = 588
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==312:
                            self.state = 584
                            self.match(TrinoParser.COMMA_)
                            self.state = 585
                            self.callArgument()
                            self.state = 590
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 593
                    self.match(TrinoParser.RPAREN_)


                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==285:
                    self.state = 596
                    self.match(TrinoParser.WHERE_)
                    self.state = 597
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 27:
                localctx = TrinoParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 600
                self.match(TrinoParser.ANALYZE_)
                self.state = 601
                self.qualifiedName()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 602
                    self.match(TrinoParser.WITH_)
                    self.state = 603
                    self.properties()


                pass

            elif la_ == 28:
                localctx = TrinoParser.CreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 606
                self.match(TrinoParser.CREATE_)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 607
                    self.match(TrinoParser.OR_)
                    self.state = 608
                    self.match(TrinoParser.REPLACE_)


                self.state = 611
                self.match(TrinoParser.MATERIALIZED_)
                self.state = 612
                self.match(TrinoParser.VIEW_)
                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 613
                    self.match(TrinoParser.IF_)
                    self.state = 614
                    self.match(TrinoParser.NOT_)
                    self.state = 615
                    self.match(TrinoParser.EXISTS_)


                self.state = 618
                self.qualifiedName()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 619
                    self.match(TrinoParser.GRACE_)
                    self.state = 620
                    self.match(TrinoParser.PERIOD_)
                    self.state = 621
                    self.interval()


                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 624
                    self.match(TrinoParser.COMMENT_)
                    self.state = 625
                    self.string_()


                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 628
                    self.match(TrinoParser.WITH_)
                    self.state = 629
                    self.properties()


                self.state = 632
                self.match(TrinoParser.AS_)
                self.state = 633
                self.rootQuery()
                pass

            elif la_ == 29:
                localctx = TrinoParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 635
                self.match(TrinoParser.CREATE_)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 636
                    self.match(TrinoParser.OR_)
                    self.state = 637
                    self.match(TrinoParser.REPLACE_)


                self.state = 640
                self.match(TrinoParser.VIEW_)
                self.state = 641
                self.qualifiedName()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 642
                    self.match(TrinoParser.COMMENT_)
                    self.state = 643
                    self.string_()


                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 646
                    self.match(TrinoParser.SECURITY_)
                    self.state = 647
                    _la = self._input.LA(1)
                    if not(_la==55 or _la==114):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 650
                self.match(TrinoParser.AS_)
                self.state = 651
                self.rootQuery()
                pass

            elif la_ == 30:
                localctx = TrinoParser.RefreshMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 653
                self.match(TrinoParser.REFRESH_)
                self.state = 654
                self.match(TrinoParser.MATERIALIZED_)
                self.state = 655
                self.match(TrinoParser.VIEW_)
                self.state = 656
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = TrinoParser.DropMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 657
                self.match(TrinoParser.DROP_)
                self.state = 658
                self.match(TrinoParser.MATERIALIZED_)
                self.state = 659
                self.match(TrinoParser.VIEW_)
                self.state = 662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 660
                    self.match(TrinoParser.IF_)
                    self.state = 661
                    self.match(TrinoParser.EXISTS_)


                self.state = 664
                self.qualifiedName()
                pass

            elif la_ == 32:
                localctx = TrinoParser.RenameMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 665
                self.match(TrinoParser.ALTER_)
                self.state = 666
                self.match(TrinoParser.MATERIALIZED_)
                self.state = 667
                self.match(TrinoParser.VIEW_)
                self.state = 670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 668
                    self.match(TrinoParser.IF_)
                    self.state = 669
                    self.match(TrinoParser.EXISTS_)


                self.state = 672
                localctx.from_ = self.qualifiedName()
                self.state = 673
                self.match(TrinoParser.RENAME_)
                self.state = 674
                self.match(TrinoParser.TO_)
                self.state = 675
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 33:
                localctx = TrinoParser.SetMaterializedViewPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 677
                self.match(TrinoParser.ALTER_)
                self.state = 678
                self.match(TrinoParser.MATERIALIZED_)
                self.state = 679
                self.match(TrinoParser.VIEW_)
                self.state = 680
                self.qualifiedName()
                self.state = 681
                self.match(TrinoParser.SET_)
                self.state = 682
                self.match(TrinoParser.PROPERTIES_)
                self.state = 683
                self.propertyAssignments()
                pass

            elif la_ == 34:
                localctx = TrinoParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 685
                self.match(TrinoParser.DROP_)
                self.state = 686
                self.match(TrinoParser.VIEW_)
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 687
                    self.match(TrinoParser.IF_)
                    self.state = 688
                    self.match(TrinoParser.EXISTS_)


                self.state = 691
                self.qualifiedName()
                pass

            elif la_ == 35:
                localctx = TrinoParser.RenameViewContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 692
                self.match(TrinoParser.ALTER_)
                self.state = 693
                self.match(TrinoParser.VIEW_)
                self.state = 694
                localctx.from_ = self.qualifiedName()
                self.state = 695
                self.match(TrinoParser.RENAME_)
                self.state = 696
                self.match(TrinoParser.TO_)
                self.state = 697
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 36:
                localctx = TrinoParser.SetViewAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 699
                self.match(TrinoParser.ALTER_)
                self.state = 700
                self.match(TrinoParser.VIEW_)
                self.state = 701
                localctx.from_ = self.qualifiedName()
                self.state = 702
                self.match(TrinoParser.SET_)
                self.state = 703
                self.match(TrinoParser.AUTHORIZATION_)
                self.state = 704
                self.principal()
                pass

            elif la_ == 37:
                localctx = TrinoParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 706
                self.match(TrinoParser.CALL_)
                self.state = 707
                self.qualifiedName()
                self.state = 708
                self.match(TrinoParser.LPAREN_)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                    self.state = 709
                    self.callArgument()
                    self.state = 714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 710
                        self.match(TrinoParser.COMMA_)
                        self.state = 711
                        self.callArgument()
                        self.state = 716
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 719
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 38:
                localctx = TrinoParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 721
                self.match(TrinoParser.CREATE_)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 722
                    self.match(TrinoParser.OR_)
                    self.state = 723
                    self.match(TrinoParser.REPLACE_)


                self.state = 726
                self.functionSpecification()
                pass

            elif la_ == 39:
                localctx = TrinoParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 727
                self.match(TrinoParser.DROP_)
                self.state = 728
                self.match(TrinoParser.FUNCTION_)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 729
                    self.match(TrinoParser.IF_)
                    self.state = 730
                    self.match(TrinoParser.EXISTS_)


                self.state = 733
                self.functionDeclaration()
                pass

            elif la_ == 40:
                localctx = TrinoParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 734
                self.match(TrinoParser.CREATE_)
                self.state = 735
                self.match(TrinoParser.ROLE_)
                self.state = 736
                localctx.name = self.identifier()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 737
                    self.match(TrinoParser.WITH_)
                    self.state = 738
                    self.match(TrinoParser.ADMIN_)
                    self.state = 739
                    self.grantor()


                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 742
                    self.match(TrinoParser.IN_)
                    self.state = 743
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 41:
                localctx = TrinoParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 746
                self.match(TrinoParser.DROP_)
                self.state = 747
                self.match(TrinoParser.ROLE_)
                self.state = 748
                localctx.name = self.identifier()
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 749
                    self.match(TrinoParser.IN_)
                    self.state = 750
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 42:
                localctx = TrinoParser.GrantRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 753
                self.match(TrinoParser.GRANT_)
                self.state = 754
                self.roles()
                self.state = 755
                self.match(TrinoParser.TO_)
                self.state = 756
                self.principal()
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 757
                    self.match(TrinoParser.COMMA_)
                    self.state = 758
                    self.principal()
                    self.state = 763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 764
                    self.match(TrinoParser.WITH_)
                    self.state = 765
                    self.match(TrinoParser.ADMIN_)
                    self.state = 766
                    self.match(TrinoParser.OPTION_)


                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 769
                    self.match(TrinoParser.GRANTED_)
                    self.state = 770
                    self.match(TrinoParser.BY_)
                    self.state = 771
                    self.grantor()


                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 774
                    self.match(TrinoParser.IN_)
                    self.state = 775
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 43:
                localctx = TrinoParser.RevokeRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 778
                self.match(TrinoParser.REVOKE_)
                self.state = 782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 779
                    self.match(TrinoParser.ADMIN_)
                    self.state = 780
                    self.match(TrinoParser.OPTION_)
                    self.state = 781
                    self.match(TrinoParser.FOR_)


                self.state = 784
                self.roles()
                self.state = 785
                self.match(TrinoParser.FROM_)
                self.state = 786
                self.principal()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 787
                    self.match(TrinoParser.COMMA_)
                    self.state = 788
                    self.principal()
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 794
                    self.match(TrinoParser.GRANTED_)
                    self.state = 795
                    self.match(TrinoParser.BY_)
                    self.state = 796
                    self.grantor()


                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 799
                    self.match(TrinoParser.IN_)
                    self.state = 800
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 44:
                localctx = TrinoParser.SetRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 803
                self.match(TrinoParser.SET_)
                self.state = 804
                self.match(TrinoParser.ROLE_)
                self.state = 808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 805
                    self.match(TrinoParser.ALL_)
                    pass

                elif la_ == 2:
                    self.state = 806
                    self.match(TrinoParser.NONE_)
                    pass

                elif la_ == 3:
                    self.state = 807
                    localctx.role = self.identifier()
                    pass


                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 810
                    self.match(TrinoParser.IN_)
                    self.state = 811
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 45:
                localctx = TrinoParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 814
                self.match(TrinoParser.GRANT_)
                self.state = 825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [36, 56, 110, 231, 271]:
                    self.state = 815
                    self.privilege()
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 816
                        self.match(TrinoParser.COMMA_)
                        self.state = 817
                        self.privilege()
                        self.state = 822
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [5]:
                    self.state = 823
                    self.match(TrinoParser.ALL_)
                    self.state = 824
                    self.match(TrinoParser.PRIVILEGES_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 827
                self.match(TrinoParser.ON_)
                self.state = 829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 828
                    _la = self._input.LA(1)
                    if not(_la==226 or _la==244):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 831
                self.qualifiedName()
                self.state = 832
                self.match(TrinoParser.TO_)
                self.state = 833
                localctx.grantee = self.principal()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 834
                    self.match(TrinoParser.WITH_)
                    self.state = 835
                    self.match(TrinoParser.GRANT_)
                    self.state = 836
                    self.match(TrinoParser.OPTION_)


                pass

            elif la_ == 46:
                localctx = TrinoParser.DenyContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 839
                self.match(TrinoParser.DENY_)
                self.state = 850
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [36, 56, 110, 231, 271]:
                    self.state = 840
                    self.privilege()
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 841
                        self.match(TrinoParser.COMMA_)
                        self.state = 842
                        self.privilege()
                        self.state = 847
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [5]:
                    self.state = 848
                    self.match(TrinoParser.ALL_)
                    self.state = 849
                    self.match(TrinoParser.PRIVILEGES_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 852
                self.match(TrinoParser.ON_)
                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 853
                    _la = self._input.LA(1)
                    if not(_la==226 or _la==244):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 856
                self.qualifiedName()
                self.state = 857
                self.match(TrinoParser.TO_)
                self.state = 858
                localctx.grantee = self.principal()
                pass

            elif la_ == 47:
                localctx = TrinoParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 860
                self.match(TrinoParser.REVOKE_)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 861
                    self.match(TrinoParser.GRANT_)
                    self.state = 862
                    self.match(TrinoParser.OPTION_)
                    self.state = 863
                    self.match(TrinoParser.FOR_)


                self.state = 876
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [36, 56, 110, 231, 271]:
                    self.state = 866
                    self.privilege()
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 867
                        self.match(TrinoParser.COMMA_)
                        self.state = 868
                        self.privilege()
                        self.state = 873
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [5]:
                    self.state = 874
                    self.match(TrinoParser.ALL_)
                    self.state = 875
                    self.match(TrinoParser.PRIVILEGES_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 878
                self.match(TrinoParser.ON_)
                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 879
                    _la = self._input.LA(1)
                    if not(_la==226 or _la==244):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 882
                self.qualifiedName()
                self.state = 883
                self.match(TrinoParser.FROM_)
                self.state = 884
                localctx.grantee = self.principal()
                pass

            elif la_ == 48:
                localctx = TrinoParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 886
                self.match(TrinoParser.SHOW_)
                self.state = 887
                self.match(TrinoParser.GRANTS_)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 888
                    self.match(TrinoParser.ON_)
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==244:
                        self.state = 889
                        self.match(TrinoParser.TABLE_)


                    self.state = 892
                    self.qualifiedName()


                pass

            elif la_ == 49:
                localctx = TrinoParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 895
                self.match(TrinoParser.EXPLAIN_)
                self.state = 907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 896
                    self.match(TrinoParser.LPAREN_)
                    self.state = 897
                    self.explainOption()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 898
                        self.match(TrinoParser.COMMA_)
                        self.state = 899
                        self.explainOption()
                        self.state = 904
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 905
                    self.match(TrinoParser.RPAREN_)


                self.state = 909
                self.statement()
                pass

            elif la_ == 50:
                localctx = TrinoParser.ExplainAnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 910
                self.match(TrinoParser.EXPLAIN_)
                self.state = 911
                self.match(TrinoParser.ANALYZE_)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==281:
                    self.state = 912
                    self.match(TrinoParser.VERBOSE_)


                self.state = 915
                self.statement()
                pass

            elif la_ == 51:
                localctx = TrinoParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 916
                self.match(TrinoParser.SHOW_)
                self.state = 917
                self.match(TrinoParser.CREATE_)
                self.state = 918
                self.match(TrinoParser.TABLE_)
                self.state = 919
                self.qualifiedName()
                pass

            elif la_ == 52:
                localctx = TrinoParser.ShowCreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 920
                self.match(TrinoParser.SHOW_)
                self.state = 921
                self.match(TrinoParser.CREATE_)
                self.state = 922
                self.match(TrinoParser.SCHEMA_)
                self.state = 923
                self.qualifiedName()
                pass

            elif la_ == 53:
                localctx = TrinoParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 924
                self.match(TrinoParser.SHOW_)
                self.state = 925
                self.match(TrinoParser.CREATE_)
                self.state = 926
                self.match(TrinoParser.VIEW_)
                self.state = 927
                self.qualifiedName()
                pass

            elif la_ == 54:
                localctx = TrinoParser.ShowCreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 928
                self.match(TrinoParser.SHOW_)
                self.state = 929
                self.match(TrinoParser.CREATE_)
                self.state = 930
                self.match(TrinoParser.MATERIALIZED_)
                self.state = 931
                self.match(TrinoParser.VIEW_)
                self.state = 932
                self.qualifiedName()
                pass

            elif la_ == 55:
                localctx = TrinoParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 933
                self.match(TrinoParser.SHOW_)
                self.state = 934
                self.match(TrinoParser.TABLES_)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==105:
                    self.state = 935
                    _la = self._input.LA(1)
                    if not(_la==88 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 936
                    self.qualifiedName()


                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 939
                    self.match(TrinoParser.LIKE_)
                    self.state = 940
                    localctx.pattern = self.string_()
                    self.state = 943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 941
                        self.match(TrinoParser.ESCAPE_)
                        self.state = 942
                        localctx.escape = self.string_()




                pass

            elif la_ == 56:
                localctx = TrinoParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 947
                self.match(TrinoParser.SHOW_)
                self.state = 948
                self.match(TrinoParser.SCHEMAS_)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==105:
                    self.state = 949
                    _la = self._input.LA(1)
                    if not(_la==88 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 950
                    self.identifier()


                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 953
                    self.match(TrinoParser.LIKE_)
                    self.state = 954
                    localctx.pattern = self.string_()
                    self.state = 957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 955
                        self.match(TrinoParser.ESCAPE_)
                        self.state = 956
                        localctx.escape = self.string_()




                pass

            elif la_ == 57:
                localctx = TrinoParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 961
                self.match(TrinoParser.SHOW_)
                self.state = 962
                self.match(TrinoParser.CATALOGS_)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 963
                    self.match(TrinoParser.LIKE_)
                    self.state = 964
                    localctx.pattern = self.string_()
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 965
                        self.match(TrinoParser.ESCAPE_)
                        self.state = 966
                        localctx.escape = self.string_()




                pass

            elif la_ == 58:
                localctx = TrinoParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 971
                self.match(TrinoParser.SHOW_)
                self.state = 972
                self.match(TrinoParser.COLUMNS_)
                self.state = 973
                _la = self._input.LA(1)
                if not(_la==88 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                    self.state = 974
                    self.qualifiedName()


                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 977
                    self.match(TrinoParser.LIKE_)
                    self.state = 978
                    localctx.pattern = self.string_()
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 979
                        self.match(TrinoParser.ESCAPE_)
                        self.state = 980
                        localctx.escape = self.string_()




                pass

            elif la_ == 59:
                localctx = TrinoParser.ShowStatsContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 985
                self.match(TrinoParser.SHOW_)
                self.state = 986
                self.match(TrinoParser.STATS_)
                self.state = 987
                self.match(TrinoParser.FOR_)
                self.state = 988
                self.qualifiedName()
                pass

            elif la_ == 60:
                localctx = TrinoParser.ShowStatsForQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 989
                self.match(TrinoParser.SHOW_)
                self.state = 990
                self.match(TrinoParser.STATS_)
                self.state = 991
                self.match(TrinoParser.FOR_)
                self.state = 992
                self.match(TrinoParser.LPAREN_)
                self.state = 993
                self.rootQuery()
                self.state = 994
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 61:
                localctx = TrinoParser.ShowRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 996
                self.match(TrinoParser.SHOW_)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39:
                    self.state = 997
                    self.match(TrinoParser.CURRENT_)


                self.state = 1000
                self.match(TrinoParser.ROLES_)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==105:
                    self.state = 1001
                    _la = self._input.LA(1)
                    if not(_la==88 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1002
                    self.identifier()


                pass

            elif la_ == 62:
                localctx = TrinoParser.ShowRoleGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1005
                self.match(TrinoParser.SHOW_)
                self.state = 1006
                self.match(TrinoParser.ROLE_)
                self.state = 1007
                self.match(TrinoParser.GRANTS_)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==105:
                    self.state = 1008
                    _la = self._input.LA(1)
                    if not(_la==88 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1009
                    self.identifier()


                pass

            elif la_ == 63:
                localctx = TrinoParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1012
                self.match(TrinoParser.DESCRIBE_)
                self.state = 1013
                self.qualifiedName()
                pass

            elif la_ == 64:
                localctx = TrinoParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1014
                self.match(TrinoParser.DESC_)
                self.state = 1015
                self.qualifiedName()
                pass

            elif la_ == 65:
                localctx = TrinoParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1016
                self.match(TrinoParser.SHOW_)
                self.state = 1017
                self.match(TrinoParser.FUNCTIONS_)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==105:
                    self.state = 1018
                    _la = self._input.LA(1)
                    if not(_la==88 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1019
                    self.qualifiedName()


                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1022
                    self.match(TrinoParser.LIKE_)
                    self.state = 1023
                    localctx.pattern = self.string_()
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 1024
                        self.match(TrinoParser.ESCAPE_)
                        self.state = 1025
                        localctx.escape = self.string_()




                pass

            elif la_ == 66:
                localctx = TrinoParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1030
                self.match(TrinoParser.SHOW_)
                self.state = 1031
                self.match(TrinoParser.SESSION_)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1032
                    self.match(TrinoParser.LIKE_)
                    self.state = 1033
                    localctx.pattern = self.string_()
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 1034
                        self.match(TrinoParser.ESCAPE_)
                        self.state = 1035
                        localctx.escape = self.string_()




                pass

            elif la_ == 67:
                localctx = TrinoParser.SetSessionAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1040
                self.match(TrinoParser.SET_)
                self.state = 1041
                self.match(TrinoParser.SESSION_)
                self.state = 1042
                self.match(TrinoParser.AUTHORIZATION_)
                self.state = 1043
                self.authorizationUser()
                pass

            elif la_ == 68:
                localctx = TrinoParser.ResetSessionAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1044
                self.match(TrinoParser.RESET_)
                self.state = 1045
                self.match(TrinoParser.SESSION_)
                self.state = 1046
                self.match(TrinoParser.AUTHORIZATION_)
                pass

            elif la_ == 69:
                localctx = TrinoParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1047
                self.match(TrinoParser.SET_)
                self.state = 1048
                self.match(TrinoParser.SESSION_)
                self.state = 1049
                self.qualifiedName()
                self.state = 1050
                self.match(TrinoParser.EQ_)
                self.state = 1051
                self.expression()
                pass

            elif la_ == 70:
                localctx = TrinoParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1053
                self.match(TrinoParser.RESET_)
                self.state = 1054
                self.match(TrinoParser.SESSION_)
                self.state = 1055
                self.qualifiedName()
                pass

            elif la_ == 71:
                localctx = TrinoParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1056
                self.match(TrinoParser.START_)
                self.state = 1057
                self.match(TrinoParser.TRANSACTION_)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117 or _la==203:
                    self.state = 1058
                    self.transactionMode()
                    self.state = 1063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1059
                        self.match(TrinoParser.COMMA_)
                        self.state = 1060
                        self.transactionMode()
                        self.state = 1065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 72:
                localctx = TrinoParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1068
                self.match(TrinoParser.COMMIT_)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 1069
                    self.match(TrinoParser.WORK_)


                pass

            elif la_ == 73:
                localctx = TrinoParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1072
                self.match(TrinoParser.ROLLBACK_)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 1073
                    self.match(TrinoParser.WORK_)


                pass

            elif la_ == 74:
                localctx = TrinoParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1076
                self.match(TrinoParser.PREPARE_)
                self.state = 1077
                self.identifier()
                self.state = 1078
                self.match(TrinoParser.FROM_)
                self.state = 1079
                self.statement()
                pass

            elif la_ == 75:
                localctx = TrinoParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1081
                self.match(TrinoParser.DEALLOCATE_)
                self.state = 1082
                self.match(TrinoParser.PREPARE_)
                self.state = 1083
                self.identifier()
                pass

            elif la_ == 76:
                localctx = TrinoParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1084
                self.match(TrinoParser.EXECUTE_)
                self.state = 1085
                self.identifier()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 1086
                    self.match(TrinoParser.USING_)
                    self.state = 1087
                    self.expression()
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1088
                        self.match(TrinoParser.COMMA_)
                        self.state = 1089
                        self.expression()
                        self.state = 1094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 77:
                localctx = TrinoParser.ExecuteImmediateContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1097
                self.match(TrinoParser.EXECUTE_)
                self.state = 1098
                self.match(TrinoParser.IMMEDIATE_)
                self.state = 1099
                self.string_()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 1100
                    self.match(TrinoParser.USING_)
                    self.state = 1101
                    self.expression()
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1102
                        self.match(TrinoParser.COMMA_)
                        self.state = 1103
                        self.expression()
                        self.state = 1108
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 78:
                localctx = TrinoParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 1111
                self.match(TrinoParser.DESCRIBE_)
                self.state = 1112
                self.match(TrinoParser.INPUT_)
                self.state = 1113
                self.identifier()
                pass

            elif la_ == 79:
                localctx = TrinoParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 79)
                self.state = 1114
                self.match(TrinoParser.DESCRIBE_)
                self.state = 1115
                self.match(TrinoParser.OUTPUT_)
                self.state = 1116
                self.identifier()
                pass

            elif la_ == 80:
                localctx = TrinoParser.SetPathContext(self, localctx)
                self.enterOuterAlt(localctx, 80)
                self.state = 1117
                self.match(TrinoParser.SET_)
                self.state = 1118
                self.match(TrinoParser.PATH_)
                self.state = 1119
                self.pathSpecification()
                pass

            elif la_ == 81:
                localctx = TrinoParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 81)
                self.state = 1120
                self.match(TrinoParser.SET_)
                self.state = 1121
                self.match(TrinoParser.TIME_)
                self.state = 1122
                self.match(TrinoParser.ZONE_)
                self.state = 1125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1123
                    self.match(TrinoParser.LOCAL_)
                    pass

                elif la_ == 2:
                    self.state = 1124
                    self.expression()
                    pass


                pass

            elif la_ == 82:
                localctx = TrinoParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 82)
                self.state = 1127
                self.match(TrinoParser.UPDATE_)
                self.state = 1128
                self.qualifiedName()
                self.state = 1129
                self.match(TrinoParser.SET_)
                self.state = 1130
                self.updateAssignment()
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1131
                    self.match(TrinoParser.COMMA_)
                    self.state = 1132
                    self.updateAssignment()
                    self.state = 1137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==285:
                    self.state = 1138
                    self.match(TrinoParser.WHERE_)
                    self.state = 1139
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 83:
                localctx = TrinoParser.MergeContext(self, localctx)
                self.enterOuterAlt(localctx, 83)
                self.state = 1142
                self.match(TrinoParser.MERGE_)
                self.state = 1143
                self.match(TrinoParser.INTO_)
                self.state = 1144
                self.qualifiedName()
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699600706) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==11:
                        self.state = 1145
                        self.match(TrinoParser.AS_)


                    self.state = 1148
                    self.identifier()


                self.state = 1151
                self.match(TrinoParser.USING_)
                self.state = 1152
                self.relation(0)
                self.state = 1153
                self.match(TrinoParser.ON_)
                self.state = 1154
                self.expression()
                self.state = 1156 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1155
                    self.mergeCase()
                    self.state = 1158 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==284):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RootQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)


        def withFunction(self):
            return self.getTypedRuleContext(TrinoParser.WithFunctionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_rootQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRootQuery" ):
                listener.enterRootQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRootQuery" ):
                listener.exitRootQuery(self)




    def rootQuery(self):

        localctx = TrinoParser.RootQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_rootQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1162
                self.withFunction()


            self.state = 1165
            self.query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def functionSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.FunctionSpecificationContext)
            else:
                return self.getTypedRuleContext(TrinoParser.FunctionSpecificationContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_withFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithFunction" ):
                listener.enterWithFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithFunction" ):
                listener.exitWithFunction(self)




    def withFunction(self):

        localctx = TrinoParser.WithFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_withFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(TrinoParser.WITH_)
            self.state = 1168
            self.functionSpecification()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 1169
                self.match(TrinoParser.COMMA_)
                self.state = 1170
                self.functionSpecification()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(TrinoParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(TrinoParser.WithContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = TrinoParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==288:
                self.state = 1176
                self.with_()


            self.state = 1179
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(TrinoParser.NamedQueryContext,i)


        def RECURSIVE_(self):
            return self.getToken(TrinoParser.RECURSIVE_, 0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)




    def with_(self):

        localctx = TrinoParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(TrinoParser.WITH_)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 1182
                self.match(TrinoParser.RECURSIVE_)


            self.state = 1185
            self.namedQuery()
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 1186
                self.match(TrinoParser.COMMA_)
                self.state = 1187
                self.namedQuery()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(TrinoParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(TrinoParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)




    def tableElement(self):

        localctx = TrinoParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_tableElement)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 333, 334, 335, 336]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.columnDefinition()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.likeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)

        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def properties(self):
            return self.getTypedRuleContext(TrinoParser.PropertiesContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = TrinoParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.identifier()
            self.state = 1198
            self.type_(0)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==165:
                self.state = 1199
                self.match(TrinoParser.NOT_)
                self.state = 1200
                self.match(TrinoParser.NULL_)


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 1203
                self.match(TrinoParser.COMMENT_)
                self.state = 1204
                self.string_()


            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==288:
                self.state = 1207
                self.match(TrinoParser.WITH_)
                self.state = 1208
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def PROPERTIES_(self):
            return self.getToken(TrinoParser.PROPERTIES_, 0)

        def INCLUDING_(self):
            return self.getToken(TrinoParser.INCLUDING_, 0)

        def EXCLUDING_(self):
            return self.getToken(TrinoParser.EXCLUDING_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)




    def likeClause(self):

        localctx = TrinoParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(TrinoParser.LIKE_)
            self.state = 1212
            self.qualifiedName()
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==106:
                self.state = 1213
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==75 or _la==106):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1214
                self.match(TrinoParser.PROPERTIES_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def propertyAssignments(self):
            return self.getTypedRuleContext(TrinoParser.PropertyAssignmentsContext,0)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)




    def properties(self):

        localctx = TrinoParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(TrinoParser.LPAREN_)
            self.state = 1218
            self.propertyAssignments()
            self.state = 1219
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PropertyContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PropertyContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_propertyAssignments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAssignments" ):
                listener.enterPropertyAssignments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAssignments" ):
                listener.exitPropertyAssignments(self)




    def propertyAssignments(self):

        localctx = TrinoParser.PropertyAssignmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_propertyAssignments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.property_()
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 1222
                self.match(TrinoParser.COMMA_)
                self.state = 1223
                self.property_()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def EQ_(self):
            return self.getToken(TrinoParser.EQ_, 0)

        def propertyValue(self):
            return self.getTypedRuleContext(TrinoParser.PropertyValueContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)




    def property_(self):

        localctx = TrinoParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.identifier()
            self.state = 1230
            self.match(TrinoParser.EQ_)
            self.state = 1231
            self.propertyValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_propertyValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefaultPropertyValueContext(PropertyValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PropertyValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT_(self):
            return self.getToken(TrinoParser.DEFAULT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultPropertyValue" ):
                listener.enterDefaultPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultPropertyValue" ):
                listener.exitDefaultPropertyValue(self)


    class NonDefaultPropertyValueContext(PropertyValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PropertyValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonDefaultPropertyValue" ):
                listener.enterNonDefaultPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonDefaultPropertyValue" ):
                listener.exitNonDefaultPropertyValue(self)



    def propertyValue(self):

        localctx = TrinoParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_propertyValue)
        try:
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.DefaultPropertyValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                self.match(TrinoParser.DEFAULT_)
                pass

            elif la_ == 2:
                localctx = TrinoParser.NonDefaultPropertyValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # RowCountContext
            self.limit = None # LimitRowCountContext
            self.fetchFirst = None # RowCountContext

        def queryTerm(self):
            return self.getTypedRuleContext(TrinoParser.QueryTermContext,0)


        def ORDER_(self):
            return self.getToken(TrinoParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(TrinoParser.BY_, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SortItemContext,i)


        def OFFSET_(self):
            return self.getToken(TrinoParser.OFFSET_, 0)

        def LIMIT_(self):
            return self.getToken(TrinoParser.LIMIT_, 0)

        def FETCH_(self):
            return self.getToken(TrinoParser.FETCH_, 0)

        def rowCount(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RowCountContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RowCountContext,i)


        def limitRowCount(self):
            return self.getTypedRuleContext(TrinoParser.LimitRowCountContext,0)


        def FIRST_(self):
            return self.getToken(TrinoParser.FIRST_, 0)

        def NEXT_(self):
            return self.getToken(TrinoParser.NEXT_, 0)

        def ROW_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.ROW_)
            else:
                return self.getToken(TrinoParser.ROW_, i)

        def ROWS_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.ROWS_)
            else:
                return self.getToken(TrinoParser.ROWS_, i)

        def ONLY_(self):
            return self.getToken(TrinoParser.ONLY_, 0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def TIES_(self):
            return self.getToken(TrinoParser.TIES_, 0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)




    def queryNoWith(self):

        localctx = TrinoParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.queryTerm(0)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1238
                self.match(TrinoParser.ORDER_)
                self.state = 1239
                self.match(TrinoParser.BY_)
                self.state = 1240
                self.sortItem()
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1241
                    self.match(TrinoParser.COMMA_)
                    self.state = 1242
                    self.sortItem()
                    self.state = 1247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==171:
                self.state = 1250
                self.match(TrinoParser.OFFSET_)
                self.state = 1251
                localctx.offset = self.rowCount()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==222 or _la==223:
                    self.state = 1252
                    _la = self._input.LA(1)
                    if not(_la==222 or _la==223):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 1270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.state = 1257
                self.match(TrinoParser.LIMIT_)
                self.state = 1258
                localctx.limit = self.limitRowCount()
                pass
            elif token in [81]:
                self.state = 1259
                self.match(TrinoParser.FETCH_)
                self.state = 1260
                _la = self._input.LA(1)
                if not(_la==84 or _la==157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308 or _la==330:
                    self.state = 1261
                    localctx.fetchFirst = self.rowCount()


                self.state = 1264
                _la = self._input.LA(1)
                if not(_la==222 or _la==223):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [175]:
                    self.state = 1265
                    self.match(TrinoParser.ONLY_)
                    pass
                elif token in [288]:
                    self.state = 1266
                    self.match(TrinoParser.WITH_)
                    self.state = 1267
                    self.match(TrinoParser.TIES_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [288, 309, 314]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitRowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)

        def rowCount(self):
            return self.getTypedRuleContext(TrinoParser.RowCountContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_limitRowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitRowCount" ):
                listener.enterLimitRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitRowCount" ):
                listener.exitLimitRowCount(self)




    def limitRowCount(self):

        localctx = TrinoParser.LimitRowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_limitRowCount)
        try:
            self.state = 1274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1272
                self.match(TrinoParser.ALL_)
                pass
            elif token in [308, 330]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1273
                self.rowCount()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE_(self):
            return self.getToken(TrinoParser.INTEGER_VALUE_, 0)

        def QUESTION_MARK_(self):
            return self.getToken(TrinoParser.QUESTION_MARK_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_rowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowCount" ):
                listener.enterRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowCount" ):
                listener.exitRowCount(self)




    def rowCount(self):

        localctx = TrinoParser.RowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rowCount)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            _la = self._input.LA(1)
            if not(_la==308 or _la==330):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(TrinoParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QueryTermContext,i)

        def INTERSECT_(self):
            return self.getToken(TrinoParser.INTERSECT_, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.SetQuantifierContext,0)

        def UNION_(self):
            return self.getToken(TrinoParser.UNION_, 0)
        def EXCEPT_(self):
            return self.getToken(TrinoParser.EXCEPT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = TrinoParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1279
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1293
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        localctx = TrinoParser.SetOperationContext(self, TrinoParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1281
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1282
                        localctx.operator = self.match(TrinoParser.INTERSECT_)
                        self.state = 1284
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==5 or _la==62:
                            self.state = 1283
                            self.setQuantifier()


                        self.state = 1286
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 2:
                        localctx = TrinoParser.SetOperationContext(self, TrinoParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1287
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1288
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==74 or _la==265):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1290
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==5 or _la==62:
                            self.state = 1289
                            self.setQuantifier()


                        self.state = 1292
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def queryNoWith(self):
            return self.getTypedRuleContext(TrinoParser.QueryNoWithContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(TrinoParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES_(self):
            return self.getToken(TrinoParser.VALUES_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)



    def queryPrimary(self):

        localctx = TrinoParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_queryPrimary)
        try:
            self.state = 1314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [231]:
                localctx = TrinoParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.querySpecification()
                pass
            elif token in [244]:
                localctx = TrinoParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.match(TrinoParser.TABLE_)
                self.state = 1300
                self.qualifiedName()
                pass
            elif token in [280]:
                localctx = TrinoParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1301
                self.match(TrinoParser.VALUES_)
                self.state = 1302
                self.expression()
                self.state = 1307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1303
                        self.match(TrinoParser.COMMA_)
                        self.state = 1304
                        self.expression() 
                    self.state = 1309
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                pass
            elif token in [313]:
                localctx = TrinoParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1310
                self.match(TrinoParser.LPAREN_)
                self.state = 1311
                self.queryNoWith()
                self.state = 1312
                self.match(TrinoParser.RPAREN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def NULLS_(self):
            return self.getToken(TrinoParser.NULLS_, 0)

        def ASC_(self):
            return self.getToken(TrinoParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(TrinoParser.DESC_, 0)

        def FIRST_(self):
            return self.getToken(TrinoParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(TrinoParser.LAST_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = TrinoParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.expression()
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==58:
                self.state = 1317
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==12 or _la==58):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==168:
                self.state = 1320
                self.match(TrinoParser.NULLS_)
                self.state = 1321
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==84 or _la==131):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT_(self):
            return self.getToken(TrinoParser.SELECT_, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.SetQuantifierContext,0)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RelationContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RelationContext,i)


        def WHERE_(self):
            return self.getToken(TrinoParser.WHERE_, 0)

        def GROUP_(self):
            return self.getToken(TrinoParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(TrinoParser.BY_, 0)

        def groupBy(self):
            return self.getTypedRuleContext(TrinoParser.GroupByContext,0)


        def HAVING_(self):
            return self.getToken(TrinoParser.HAVING_, 0)

        def WINDOW_(self):
            return self.getToken(TrinoParser.WINDOW_, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.WindowDefinitionContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return TrinoParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = TrinoParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(TrinoParser.SELECT_)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.setQuantifier()


            self.state = 1328
            self.selectItem()
            self.state = 1333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1329
                    self.match(TrinoParser.COMMA_)
                    self.state = 1330
                    self.selectItem() 
                self.state = 1335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1336
                self.match(TrinoParser.FROM_)
                self.state = 1337
                self.relation(0)
                self.state = 1342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1338
                        self.match(TrinoParser.COMMA_)
                        self.state = 1339
                        self.relation(0) 
                    self.state = 1344
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)



            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1347
                self.match(TrinoParser.WHERE_)
                self.state = 1348
                localctx.where = self.booleanExpression(0)


            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1351
                self.match(TrinoParser.GROUP_)
                self.state = 1352
                self.match(TrinoParser.BY_)
                self.state = 1353
                self.groupBy()


            self.state = 1358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1356
                self.match(TrinoParser.HAVING_)
                self.state = 1357
                localctx.having = self.booleanExpression(0)


            self.state = 1369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1360
                self.match(TrinoParser.WINDOW_)
                self.state = 1361
                self.windowDefinition()
                self.state = 1366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1362
                        self.match(TrinoParser.COMMA_)
                        self.state = 1363
                        self.windowDefinition() 
                    self.state = 1368
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(TrinoParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.SetQuantifierContext,0)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)




    def groupBy(self):

        localctx = TrinoParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_groupBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1371
                self.setQuantifier()


            self.state = 1374
            self.groupingElement()
            self.state = 1379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1375
                    self.match(TrinoParser.COMMA_)
                    self.state = 1376
                    self.groupingElement() 
                self.state = 1381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING_(self):
            return self.getToken(TrinoParser.GROUPING_, 0)
        def SETS_(self):
            return self.getToken(TrinoParser.SETS_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(TrinoParser.GroupingSetContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingSet(self):
            return self.getTypedRuleContext(TrinoParser.GroupingSetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE_(self):
            return self.getToken(TrinoParser.CUBE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP_(self):
            return self.getToken(TrinoParser.ROLLUP_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)



    def groupingElement(self):

        localctx = TrinoParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1382
                self.groupingSet()
                pass

            elif la_ == 2:
                localctx = TrinoParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1383
                self.match(TrinoParser.ROLLUP_)
                self.state = 1384
                self.match(TrinoParser.LPAREN_)
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                    self.state = 1385
                    self.expression()
                    self.state = 1390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1386
                        self.match(TrinoParser.COMMA_)
                        self.state = 1387
                        self.expression()
                        self.state = 1392
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1395
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1396
                self.match(TrinoParser.CUBE_)
                self.state = 1397
                self.match(TrinoParser.LPAREN_)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                    self.state = 1398
                    self.expression()
                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1399
                        self.match(TrinoParser.COMMA_)
                        self.state = 1400
                        self.expression()
                        self.state = 1405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1408
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 4:
                localctx = TrinoParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1409
                self.match(TrinoParser.GROUPING_)
                self.state = 1410
                self.match(TrinoParser.SETS_)
                self.state = 1411
                self.match(TrinoParser.LPAREN_)
                self.state = 1412
                self.groupingSet()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1413
                    self.match(TrinoParser.COMMA_)
                    self.state = 1414
                    self.groupingSet()
                    self.state = 1419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1420
                self.match(TrinoParser.RPAREN_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = TrinoParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.match(TrinoParser.LPAREN_)
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                    self.state = 1425
                    self.expression()
                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1426
                        self.match(TrinoParser.COMMA_)
                        self.state = 1427
                        self.expression()
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1435
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(TrinoParser.WindowSpecificationContext,0)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)




    def windowDefinition(self):

        localctx = TrinoParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            localctx.name = self.identifier()
            self.state = 1440
            self.match(TrinoParser.AS_)
            self.state = 1441
            self.match(TrinoParser.LPAREN_)
            self.state = 1442
            self.windowSpecification()
            self.state = 1443
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.existingWindowName = None # IdentifierContext
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def PARTITION_(self):
            return self.getToken(TrinoParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.BY_)
            else:
                return self.getToken(TrinoParser.BY_, i)

        def ORDER_(self):
            return self.getToken(TrinoParser.ORDER_, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(TrinoParser.WindowFrameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_windowSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecification" ):
                listener.enterWindowSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecification" ):
                listener.exitWindowSpecification(self)




    def windowSpecification(self):

        localctx = TrinoParser.WindowSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_windowSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1445
                localctx.existingWindowName = self.identifier()


            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 1448
                self.match(TrinoParser.PARTITION_)
                self.state = 1449
                self.match(TrinoParser.BY_)
                self.state = 1450
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1451
                    self.match(TrinoParser.COMMA_)
                    self.state = 1452
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1460
                self.match(TrinoParser.ORDER_)
                self.state = 1461
                self.match(TrinoParser.BY_)
                self.state = 1462
                self.sortItem()
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1463
                    self.match(TrinoParser.COMMA_)
                    self.state = 1464
                    self.sortItem()
                    self.state = 1469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99 or _la==151 or _la==202 or _la==223:
                self.state = 1472
                self.windowFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = TrinoParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            localctx.name = self.identifier()
            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==313:
                self.state = 1476
                self.columnAliases()


            self.state = 1479
            self.match(TrinoParser.AS_)
            self.state = 1480
            self.match(TrinoParser.LPAREN_)
            self.state = 1481
            self.query()
            self.state = 1482
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT_(self):
            return self.getToken(TrinoParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = TrinoParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            _la = self._input.LA(1)
            if not(_la==5 or _la==62):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(TrinoParser.PrimaryExpressionContext,0)

        def DOT_(self):
            return self.getToken(TrinoParser.DOT_, 0)
        def ASTERISK_(self):
            return self.getToken(TrinoParser.ASTERISK_, 0)
        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)



    def selectItem(self):

        localctx = TrinoParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1486
                self.expression()
                self.state = 1491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==11:
                        self.state = 1487
                        self.match(TrinoParser.AS_)


                    self.state = 1490
                    self.identifier()


                pass

            elif la_ == 2:
                localctx = TrinoParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1493
                self.primaryExpression(0)
                self.state = 1494
                self.match(TrinoParser.DOT_)
                self.state = 1495
                self.match(TrinoParser.ASTERISK_)
                self.state = 1498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1496
                    self.match(TrinoParser.AS_)
                    self.state = 1497
                    self.columnAliases()


                pass

            elif la_ == 3:
                localctx = TrinoParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1500
                self.match(TrinoParser.ASTERISK_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(TrinoParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RelationContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RelationContext,i)

        def CROSS_(self):
            return self.getToken(TrinoParser.CROSS_, 0)
        def JOIN_(self):
            return self.getToken(TrinoParser.JOIN_, 0)
        def joinType(self):
            return self.getTypedRuleContext(TrinoParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(TrinoParser.JoinCriteriaContext,0)

        def NATURAL_(self):
            return self.getToken(TrinoParser.NATURAL_, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(TrinoParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = TrinoParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1504
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TrinoParser.JoinRelationContext(self, TrinoParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1506
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1520
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [37]:
                        self.state = 1507
                        self.match(TrinoParser.CROSS_)
                        self.state = 1508
                        self.match(TrinoParser.JOIN_)
                        self.state = 1509
                        localctx.right = self.sampledRelation()
                        pass
                    elif token in [89, 108, 119, 135, 217]:
                        self.state = 1510
                        self.joinType()
                        self.state = 1511
                        self.match(TrinoParser.JOIN_)
                        self.state = 1512
                        localctx.rightRelation = self.relation(0)
                        self.state = 1513
                        self.joinCriteria()
                        pass
                    elif token in [155]:
                        self.state = 1515
                        self.match(TrinoParser.NATURAL_)
                        self.state = 1516
                        self.joinType()
                        self.state = 1517
                        self.match(TrinoParser.JOIN_)
                        self.state = 1518
                        localctx.right = self.sampledRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER_(self):
            return self.getToken(TrinoParser.INNER_, 0)

        def LEFT_(self):
            return self.getToken(TrinoParser.LEFT_, 0)

        def RIGHT_(self):
            return self.getToken(TrinoParser.RIGHT_, 0)

        def FULL_(self):
            return self.getToken(TrinoParser.FULL_, 0)

        def OUTER_(self):
            return self.getToken(TrinoParser.OUTER_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = TrinoParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108, 119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 1527
                    self.match(TrinoParser.INNER_)


                pass
            elif token in [89, 135, 217]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                _la = self._input.LA(1)
                if not(_la==89 or _la==135 or _la==217):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 1531
                    self.match(TrinoParser.OUTER_)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)


        def USING_(self):
            return self.getToken(TrinoParser.USING_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = TrinoParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1536
                self.match(TrinoParser.ON_)
                self.state = 1537
                self.booleanExpression(0)
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.match(TrinoParser.USING_)
                self.state = 1539
                self.match(TrinoParser.LPAREN_)
                self.state = 1540
                self.identifier()
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1541
                    self.match(TrinoParser.COMMA_)
                    self.state = 1542
                    self.identifier()
                    self.state = 1547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1548
                self.match(TrinoParser.RPAREN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def patternRecognition(self):
            return self.getTypedRuleContext(TrinoParser.PatternRecognitionContext,0)


        def TABLESAMPLE_(self):
            return self.getToken(TrinoParser.TABLESAMPLE_, 0)

        def sampleType(self):
            return self.getTypedRuleContext(TrinoParser.SampleTypeContext,0)


        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)




    def sampledRelation(self):

        localctx = TrinoParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.patternRecognition()
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1553
                self.match(TrinoParser.TABLESAMPLE_)
                self.state = 1554
                self.sampleType()
                self.state = 1555
                self.match(TrinoParser.LPAREN_)
                self.state = 1556
                localctx.percentage = self.expression()
                self.state = 1557
                self.match(TrinoParser.RPAREN_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI_(self):
            return self.getToken(TrinoParser.BERNOULLI_, 0)

        def SYSTEM_(self):
            return self.getToken(TrinoParser.SYSTEM_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)




    def sampleType(self):

        localctx = TrinoParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            _la = self._input.LA(1)
            if not(_la==16 or _la==243):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimsSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING_(self):
            return self.getToken(TrinoParser.LEADING_, 0)

        def TRAILING_(self):
            return self.getToken(TrinoParser.TRAILING_, 0)

        def BOTH_(self):
            return self.getToken(TrinoParser.BOTH_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_trimsSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimsSpecification" ):
                listener.enterTrimsSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimsSpecification" ):
                listener.exitTrimsSpecification(self)




    def trimsSpecification(self):

        localctx = TrinoParser.TrimsSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_trimsSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            _la = self._input.LA(1)
            if not(_la==18 or _la==133 or _la==254):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListAggOverflowBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)

        def TRUNCATE_(self):
            return self.getToken(TrinoParser.TRUNCATE_, 0)

        def listaggCountIndication(self):
            return self.getTypedRuleContext(TrinoParser.ListaggCountIndicationContext,0)


        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_listAggOverflowBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAggOverflowBehavior" ):
                listener.enterListAggOverflowBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAggOverflowBehavior" ):
                listener.exitListAggOverflowBehavior(self)




    def listAggOverflowBehavior(self):

        localctx = TrinoParser.ListAggOverflowBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_listAggOverflowBehavior)
        self._la = 0 # Token type
        try:
            self.state = 1571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.match(TrinoParser.ERROR_)
                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.match(TrinoParser.TRUNCATE_)
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327 or _la==328:
                    self.state = 1567
                    self.string_()


                self.state = 1570
                self.listaggCountIndication()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListaggCountIndicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT_(self):
            return self.getToken(TrinoParser.COUNT_, 0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def WITHOUT_(self):
            return self.getToken(TrinoParser.WITHOUT_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_listaggCountIndication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListaggCountIndication" ):
                listener.enterListaggCountIndication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListaggCountIndication" ):
                listener.exitListaggCountIndication(self)




    def listaggCountIndication(self):

        localctx = TrinoParser.ListaggCountIndicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_listaggCountIndication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            _la = self._input.LA(1)
            if not(_la==288 or _la==290):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1574
            self.match(TrinoParser.COUNT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternRecognitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def aliasedRelation(self):
            return self.getTypedRuleContext(TrinoParser.AliasedRelationContext,0)


        def MATCH_RECOGNIZE_(self):
            return self.getToken(TrinoParser.MATCH_RECOGNIZE_, 0)

        def LPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.LPAREN_)
            else:
                return self.getToken(TrinoParser.LPAREN_, i)

        def PATTERN_(self):
            return self.getToken(TrinoParser.PATTERN_, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(TrinoParser.RowPatternContext,0)


        def RPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.RPAREN_)
            else:
                return self.getToken(TrinoParser.RPAREN_, i)

        def DEFINE_(self):
            return self.getToken(TrinoParser.DEFINE_, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.VariableDefinitionContext,i)


        def PARTITION_(self):
            return self.getToken(TrinoParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.BY_)
            else:
                return self.getToken(TrinoParser.BY_, i)

        def ORDER_(self):
            return self.getToken(TrinoParser.ORDER_, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SortItemContext,i)


        def MEASURES_(self):
            return self.getToken(TrinoParser.MEASURES_, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.MeasureDefinitionContext,i)


        def rowsPerMatch(self):
            return self.getTypedRuleContext(TrinoParser.RowsPerMatchContext,0)


        def AFTER_(self):
            return self.getToken(TrinoParser.AFTER_, 0)

        def MATCH_(self):
            return self.getToken(TrinoParser.MATCH_, 0)

        def skipTo(self):
            return self.getTypedRuleContext(TrinoParser.SkipToContext,0)


        def SUBSET_(self):
            return self.getToken(TrinoParser.SUBSET_, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SubsetDefinitionContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)


        def INITIAL_(self):
            return self.getToken(TrinoParser.INITIAL_, 0)

        def SEEK_(self):
            return self.getToken(TrinoParser.SEEK_, 0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_patternRecognition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternRecognition" ):
                listener.enterPatternRecognition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternRecognition" ):
                listener.exitPatternRecognition(self)




    def patternRecognition(self):

        localctx = TrinoParser.PatternRecognitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_patternRecognition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.aliasedRelation()
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.match(TrinoParser.MATCH_RECOGNIZE_)
                self.state = 1578
                self.match(TrinoParser.LPAREN_)
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 1579
                    self.match(TrinoParser.PARTITION_)
                    self.state = 1580
                    self.match(TrinoParser.BY_)
                    self.state = 1581
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1582
                        self.match(TrinoParser.COMMA_)
                        self.state = 1583
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1588
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 1591
                    self.match(TrinoParser.ORDER_)
                    self.state = 1592
                    self.match(TrinoParser.BY_)
                    self.state = 1593
                    self.sortItem()
                    self.state = 1598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1594
                        self.match(TrinoParser.COMMA_)
                        self.state = 1595
                        self.sortItem()
                        self.state = 1600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1603
                    self.match(TrinoParser.MEASURES_)
                    self.state = 1604
                    self.measureDefinition()
                    self.state = 1609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1605
                        self.match(TrinoParser.COMMA_)
                        self.state = 1606
                        self.measureDefinition()
                        self.state = 1611
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==174:
                    self.state = 1614
                    self.rowsPerMatch()


                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1617
                    self.match(TrinoParser.AFTER_)
                    self.state = 1618
                    self.match(TrinoParser.MATCH_)
                    self.state = 1619
                    self.skipTo()


                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107 or _la==230:
                    self.state = 1622
                    _la = self._input.LA(1)
                    if not(_la==107 or _la==230):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1625
                self.match(TrinoParser.PATTERN_)
                self.state = 1626
                self.match(TrinoParser.LPAREN_)
                self.state = 1627
                self.rowPattern(0)
                self.state = 1628
                self.match(TrinoParser.RPAREN_)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==241:
                    self.state = 1629
                    self.match(TrinoParser.SUBSET_)
                    self.state = 1630
                    self.subsetDefinition()
                    self.state = 1635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1631
                        self.match(TrinoParser.COMMA_)
                        self.state = 1632
                        self.subsetDefinition()
                        self.state = 1637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1640
                self.match(TrinoParser.DEFINE_)
                self.state = 1641
                self.variableDefinition()
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1642
                    self.match(TrinoParser.COMMA_)
                    self.state = 1643
                    self.variableDefinition()
                    self.state = 1648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1649
                self.match(TrinoParser.RPAREN_)
                self.state = 1657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==11:
                        self.state = 1650
                        self.match(TrinoParser.AS_)


                    self.state = 1653
                    self.identifier()
                    self.state = 1655
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                    if la_ == 1:
                        self.state = 1654
                        self.columnAliases()






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_measureDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureDefinition" ):
                listener.enterMeasureDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureDefinition" ):
                listener.exitMeasureDefinition(self)




    def measureDefinition(self):

        localctx = TrinoParser.MeasureDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_measureDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.expression()
            self.state = 1662
            self.match(TrinoParser.AS_)
            self.state = 1663
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsPerMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE_(self):
            return self.getToken(TrinoParser.ONE_, 0)

        def ROW_(self):
            return self.getToken(TrinoParser.ROW_, 0)

        def PER_(self):
            return self.getToken(TrinoParser.PER_, 0)

        def MATCH_(self):
            return self.getToken(TrinoParser.MATCH_, 0)

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)

        def ROWS_(self):
            return self.getToken(TrinoParser.ROWS_, 0)

        def emptyMatchHandling(self):
            return self.getTypedRuleContext(TrinoParser.EmptyMatchHandlingContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_rowsPerMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsPerMatch" ):
                listener.enterRowsPerMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsPerMatch" ):
                listener.exitRowsPerMatch(self)




    def rowsPerMatch(self):

        localctx = TrinoParser.RowsPerMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_rowsPerMatch)
        self._la = 0 # Token type
        try:
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [174]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1665
                self.match(TrinoParser.ONE_)
                self.state = 1666
                self.match(TrinoParser.ROW_)
                self.state = 1667
                self.match(TrinoParser.PER_)
                self.state = 1668
                self.match(TrinoParser.MATCH_)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1669
                self.match(TrinoParser.ALL_)
                self.state = 1670
                self.match(TrinoParser.ROWS_)
                self.state = 1671
                self.match(TrinoParser.PER_)
                self.state = 1672
                self.match(TrinoParser.MATCH_)
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172 or _la==236 or _la==288:
                    self.state = 1673
                    self.emptyMatchHandling()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyMatchHandlingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)

        def EMPTY_(self):
            return self.getToken(TrinoParser.EMPTY_, 0)

        def MATCHES_(self):
            return self.getToken(TrinoParser.MATCHES_, 0)

        def OMIT_(self):
            return self.getToken(TrinoParser.OMIT_, 0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def UNMATCHED_(self):
            return self.getToken(TrinoParser.UNMATCHED_, 0)

        def ROWS_(self):
            return self.getToken(TrinoParser.ROWS_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_emptyMatchHandling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyMatchHandling" ):
                listener.enterEmptyMatchHandling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyMatchHandling" ):
                listener.exitEmptyMatchHandling(self)




    def emptyMatchHandling(self):

        localctx = TrinoParser.EmptyMatchHandlingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_emptyMatchHandling)
        try:
            self.state = 1687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.match(TrinoParser.SHOW_)
                self.state = 1679
                self.match(TrinoParser.EMPTY_)
                self.state = 1680
                self.match(TrinoParser.MATCHES_)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1681
                self.match(TrinoParser.OMIT_)
                self.state = 1682
                self.match(TrinoParser.EMPTY_)
                self.state = 1683
                self.match(TrinoParser.MATCHES_)
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1684
                self.match(TrinoParser.WITH_)
                self.state = 1685
                self.match(TrinoParser.UNMATCHED_)
                self.state = 1686
                self.match(TrinoParser.ROWS_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(TrinoParser.SKIP_, 0)

        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)

        def PAST_(self):
            return self.getToken(TrinoParser.PAST_, 0)

        def LAST_(self):
            return self.getToken(TrinoParser.LAST_, 0)

        def ROW_(self):
            return self.getToken(TrinoParser.ROW_, 0)

        def NEXT_(self):
            return self.getToken(TrinoParser.NEXT_, 0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def FIRST_(self):
            return self.getToken(TrinoParser.FIRST_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_skipTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipTo" ):
                listener.enterSkipTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipTo" ):
                listener.exitSkipTo(self)




    def skipTo(self):

        localctx = TrinoParser.SkipToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_skipTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.match(TrinoParser.SKIP_)
            self.state = 1702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [253]:
                self.state = 1690
                self.match(TrinoParser.TO_)
                self.state = 1697
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1691
                    self.match(TrinoParser.NEXT_)
                    self.state = 1692
                    self.match(TrinoParser.ROW_)
                    pass

                elif la_ == 2:
                    self.state = 1694
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                    if la_ == 1:
                        self.state = 1693
                        _la = self._input.LA(1)
                        if not(_la==84 or _la==131):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1696
                    self.identifier()
                    pass


                pass
            elif token in [187]:
                self.state = 1699
                self.match(TrinoParser.PAST_)
                self.state = 1700
                self.match(TrinoParser.LAST_)
                self.state = 1701
                self.match(TrinoParser.ROW_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.union = list() # of IdentifierContexts

        def EQ_(self):
            return self.getToken(TrinoParser.EQ_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_subsetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsetDefinition" ):
                listener.enterSubsetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsetDefinition" ):
                listener.exitSubsetDefinition(self)




    def subsetDefinition(self):

        localctx = TrinoParser.SubsetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_subsetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            localctx.name = self.identifier()
            self.state = 1705
            self.match(TrinoParser.EQ_)
            self.state = 1706
            self.match(TrinoParser.LPAREN_)
            self.state = 1707
            localctx._identifier = self.identifier()
            localctx.union.append(localctx._identifier)
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 1708
                self.match(TrinoParser.COMMA_)
                self.state = 1709
                localctx._identifier = self.identifier()
                localctx.union.append(localctx._identifier)
                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1715
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_variableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinition" ):
                listener.enterVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinition" ):
                listener.exitVariableDefinition(self)




    def variableDefinition(self):

        localctx = TrinoParser.VariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_variableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.identifier()
            self.state = 1718
            self.match(TrinoParser.AS_)
            self.state = 1719
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(TrinoParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)




    def aliasedRelation(self):

        localctx = TrinoParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.relationPrimary()
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1722
                    self.match(TrinoParser.AS_)


                self.state = 1725
                self.identifier()
                self.state = 1727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1726
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)




    def columnAliases(self):

        localctx = TrinoParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.match(TrinoParser.LPAREN_)
            self.state = 1732
            self.identifier()
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 1733
                self.match(TrinoParser.COMMA_)
                self.state = 1734
                self.identifier()
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1740
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def relation(self):
            return self.getTypedRuleContext(TrinoParser.RelationContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST_(self):
            return self.getToken(TrinoParser.UNNEST_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def ORDINALITY_(self):
            return self.getToken(TrinoParser.ORDINALITY_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)


    class TableFunctionInvocationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def tableFunctionCall(self):
            return self.getTypedRuleContext(TrinoParser.TableFunctionCallContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionInvocation" ):
                listener.enterTableFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionInvocation" ):
                listener.exitTableFunctionInvocation(self)


    class LateralContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL_(self):
            return self.getToken(TrinoParser.LATERAL_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral" ):
                listener.enterLateral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral" ):
                listener.exitLateral(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def queryPeriod(self):
            return self.getTypedRuleContext(TrinoParser.QueryPeriodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = TrinoParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1742
                self.qualifiedName()
                self.state = 1744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1743
                    self.queryPeriod()


                pass

            elif la_ == 2:
                localctx = TrinoParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1746
                self.match(TrinoParser.LPAREN_)
                self.state = 1747
                self.query()
                self.state = 1748
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1750
                self.match(TrinoParser.UNNEST_)
                self.state = 1751
                self.match(TrinoParser.LPAREN_)
                self.state = 1752
                self.expression()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1753
                    self.match(TrinoParser.COMMA_)
                    self.state = 1754
                    self.expression()
                    self.state = 1759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1760
                self.match(TrinoParser.RPAREN_)
                self.state = 1763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1761
                    self.match(TrinoParser.WITH_)
                    self.state = 1762
                    self.match(TrinoParser.ORDINALITY_)


                pass

            elif la_ == 4:
                localctx = TrinoParser.LateralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1765
                self.match(TrinoParser.LATERAL_)
                self.state = 1766
                self.match(TrinoParser.LPAREN_)
                self.state = 1767
                self.query()
                self.state = 1768
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 5:
                localctx = TrinoParser.TableFunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1770
                self.match(TrinoParser.TABLE_)
                self.state = 1771
                self.match(TrinoParser.LPAREN_)
                self.state = 1772
                self.tableFunctionCall()
                self.state = 1773
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 6:
                localctx = TrinoParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1775
                self.match(TrinoParser.LPAREN_)
                self.state = 1776
                self.relation(0)
                self.state = 1777
                self.match(TrinoParser.RPAREN_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def tableFunctionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.TableFunctionArgumentContext)
            else:
                return self.getTypedRuleContext(TrinoParser.TableFunctionArgumentContext,i)


        def COPARTITION_(self):
            return self.getToken(TrinoParser.COPARTITION_, 0)

        def copartitionTables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.CopartitionTablesContext)
            else:
                return self.getTypedRuleContext(TrinoParser.CopartitionTablesContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_tableFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionCall" ):
                listener.enterTableFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionCall" ):
                listener.exitTableFunctionCall(self)




    def tableFunctionCall(self):

        localctx = TrinoParser.TableFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_tableFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.qualifiedName()
            self.state = 1782
            self.match(TrinoParser.LPAREN_)
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1783
                self.tableFunctionArgument()
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1784
                    self.match(TrinoParser.COMMA_)
                    self.state = 1785
                    self.tableFunctionArgument()
                    self.state = 1790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1793
                self.match(TrinoParser.COPARTITION_)
                self.state = 1794
                self.copartitionTables()
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1795
                    self.match(TrinoParser.COMMA_)
                    self.state = 1796
                    self.copartitionTables()
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1804
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgument(self):
            return self.getTypedRuleContext(TrinoParser.TableArgumentContext,0)


        def descriptorArgument(self):
            return self.getTypedRuleContext(TrinoParser.DescriptorArgumentContext,0)


        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def RDOUBLEARROW_(self):
            return self.getToken(TrinoParser.RDOUBLEARROW_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_tableFunctionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionArgument" ):
                listener.enterTableFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionArgument" ):
                listener.exitTableFunctionArgument(self)




    def tableFunctionArgument(self):

        localctx = TrinoParser.TableFunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_tableFunctionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1806
                self.identifier()
                self.state = 1807
                self.match(TrinoParser.RDOUBLEARROW_)


            self.state = 1814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1811
                self.tableArgument()
                pass

            elif la_ == 2:
                self.state = 1812
                self.descriptorArgument()
                pass

            elif la_ == 3:
                self.state = 1813
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgumentRelation(self):
            return self.getTypedRuleContext(TrinoParser.TableArgumentRelationContext,0)


        def PARTITION_(self):
            return self.getToken(TrinoParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.BY_)
            else:
                return self.getToken(TrinoParser.BY_, i)

        def PRUNE_(self):
            return self.getToken(TrinoParser.PRUNE_, 0)

        def WHEN_(self):
            return self.getToken(TrinoParser.WHEN_, 0)

        def EMPTY_(self):
            return self.getToken(TrinoParser.EMPTY_, 0)

        def KEEP_(self):
            return self.getToken(TrinoParser.KEEP_, 0)

        def ORDER_(self):
            return self.getToken(TrinoParser.ORDER_, 0)

        def LPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.LPAREN_)
            else:
                return self.getToken(TrinoParser.LPAREN_, i)

        def RPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.RPAREN_)
            else:
                return self.getToken(TrinoParser.RPAREN_, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)


        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SortItemContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_tableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgument" ):
                listener.enterTableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgument" ):
                listener.exitTableArgument(self)




    def tableArgument(self):

        localctx = TrinoParser.TableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_tableArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.tableArgumentRelation()
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 1817
                self.match(TrinoParser.PARTITION_)
                self.state = 1818
                self.match(TrinoParser.BY_)
                self.state = 1832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1819
                    self.match(TrinoParser.LPAREN_)
                    self.state = 1828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                        self.state = 1820
                        self.expression()
                        self.state = 1825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==312:
                            self.state = 1821
                            self.match(TrinoParser.COMMA_)
                            self.state = 1822
                            self.expression()
                            self.state = 1827
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1830
                    self.match(TrinoParser.RPAREN_)
                    pass

                elif la_ == 2:
                    self.state = 1831
                    self.expression()
                    pass




            self.state = 1842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [200]:
                self.state = 1836
                self.match(TrinoParser.PRUNE_)
                self.state = 1837
                self.match(TrinoParser.WHEN_)
                self.state = 1838
                self.match(TrinoParser.EMPTY_)
                pass
            elif token in [127]:
                self.state = 1839
                self.match(TrinoParser.KEEP_)
                self.state = 1840
                self.match(TrinoParser.WHEN_)
                self.state = 1841
                self.match(TrinoParser.EMPTY_)
                pass
            elif token in [35, 178, 312, 314]:
                pass
            else:
                pass
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1844
                self.match(TrinoParser.ORDER_)
                self.state = 1845
                self.match(TrinoParser.BY_)
                self.state = 1858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1846
                    self.match(TrinoParser.LPAREN_)
                    self.state = 1847
                    self.sortItem()
                    self.state = 1852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 1848
                        self.match(TrinoParser.COMMA_)
                        self.state = 1849
                        self.sortItem()
                        self.state = 1854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1855
                    self.match(TrinoParser.RPAREN_)
                    pass

                elif la_ == 2:
                    self.state = 1857
                    self.sortItem()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_tableArgumentRelation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableArgumentQueryContext(TableArgumentRelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TableArgumentRelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentQuery" ):
                listener.enterTableArgumentQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentQuery" ):
                listener.exitTableArgumentQuery(self)


    class TableArgumentTableContext(TableArgumentRelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TableArgumentRelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_(self):
            return self.getToken(TrinoParser.TABLE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(TrinoParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentTable" ):
                listener.enterTableArgumentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentTable" ):
                listener.exitTableArgumentTable(self)



    def tableArgumentRelation(self):

        localctx = TrinoParser.TableArgumentRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_tableArgumentRelation)
        self._la = 0 # Token type
        try:
            self.state = 1888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.TableArgumentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1862
                self.match(TrinoParser.TABLE_)
                self.state = 1863
                self.match(TrinoParser.LPAREN_)
                self.state = 1864
                self.qualifiedName()
                self.state = 1865
                self.match(TrinoParser.RPAREN_)
                self.state = 1873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==11:
                        self.state = 1866
                        self.match(TrinoParser.AS_)


                    self.state = 1869
                    self.identifier()
                    self.state = 1871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==313:
                        self.state = 1870
                        self.columnAliases()




                pass

            elif la_ == 2:
                localctx = TrinoParser.TableArgumentQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1875
                self.match(TrinoParser.TABLE_)
                self.state = 1876
                self.match(TrinoParser.LPAREN_)
                self.state = 1877
                self.query()
                self.state = 1878
                self.match(TrinoParser.RPAREN_)
                self.state = 1886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==11:
                        self.state = 1879
                        self.match(TrinoParser.AS_)


                    self.state = 1882
                    self.identifier()
                    self.state = 1884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==313:
                        self.state = 1883
                        self.columnAliases()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptorArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTOR_(self):
            return self.getToken(TrinoParser.DESCRIPTOR_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def descriptorField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.DescriptorFieldContext)
            else:
                return self.getTypedRuleContext(TrinoParser.DescriptorFieldContext,i)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def CAST_(self):
            return self.getToken(TrinoParser.CAST_, 0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_descriptorArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescriptorArgument" ):
                listener.enterDescriptorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescriptorArgument" ):
                listener.exitDescriptorArgument(self)




    def descriptorArgument(self):

        localctx = TrinoParser.DescriptorArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_descriptorArgument)
        self._la = 0 # Token type
        try:
            self.state = 1908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1890
                self.match(TrinoParser.DESCRIPTOR_)
                self.state = 1891
                self.match(TrinoParser.LPAREN_)
                self.state = 1892
                self.descriptorField()
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1893
                    self.match(TrinoParser.COMMA_)
                    self.state = 1894
                    self.descriptorField()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1900
                self.match(TrinoParser.RPAREN_)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.match(TrinoParser.CAST_)
                self.state = 1903
                self.match(TrinoParser.LPAREN_)
                self.state = 1904
                self.match(TrinoParser.NULL_)
                self.state = 1905
                self.match(TrinoParser.AS_)
                self.state = 1906
                self.match(TrinoParser.DESCRIPTOR_)
                self.state = 1907
                self.match(TrinoParser.RPAREN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptorFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_descriptorField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescriptorField" ):
                listener.enterDescriptorField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescriptorField" ):
                listener.exitDescriptorField(self)




    def descriptorField(self):

        localctx = TrinoParser.DescriptorFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_descriptorField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.identifier()
            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                self.state = 1911
                self.type_(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopartitionTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_copartitionTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopartitionTables" ):
                listener.enterCopartitionTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopartitionTables" ):
                listener.exitCopartitionTables(self)




    def copartitionTables(self):

        localctx = TrinoParser.CopartitionTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_copartitionTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(TrinoParser.LPAREN_)
            self.state = 1915
            self.qualifiedName()
            self.state = 1916
            self.match(TrinoParser.COMMA_)
            self.state = 1917
            self.qualifiedName()
            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 1918
                self.match(TrinoParser.COMMA_)
                self.state = 1919
                self.qualifiedName()
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1925
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = TrinoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)

        def predicate_(self):
            return self.getTypedRuleContext(TrinoParser.Predicate_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)


    class OrContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,i)

        def OR_(self):
            return self.getToken(TrinoParser.OR_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)


    class AndContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,i)

        def AND_(self):
            return self.getToken(TrinoParser.AND_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 302, 303, 308, 313, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336]:
                localctx = TrinoParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1930
                self.valueExpression(0)
                self.state = 1932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 1931
                    self.predicate_()


                pass
            elif token in [165]:
                localctx = TrinoParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1934
                self.match(TrinoParser.NOT_)
                self.state = 1935
                self.booleanExpression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                    if la_ == 1:
                        localctx = TrinoParser.AndContext(self, TrinoParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1938
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1939
                        self.match(TrinoParser.AND_)
                        self.state = 1940
                        self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = TrinoParser.OrContext(self, TrinoParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1941
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1942
                        self.match(TrinoParser.OR_)
                        self.state = 1943
                        self.booleanExpression(2)
                        pass

             
                self.state = 1948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Predicate_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_predicate_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComparisonContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(TrinoParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class LikeContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE_(self):
            return self.getToken(TrinoParser.LIKE_, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)

        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def ESCAPE_(self):
            return self.getToken(TrinoParser.ESCAPE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)


    class InSubqueryContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)


    class DistinctFromContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS_(self):
            return self.getToken(TrinoParser.IS_, 0)
        def DISTINCT_(self):
            return self.getToken(TrinoParser.DISTINCT_, 0)
        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)

        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)


    class InListContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)


    class NullPredicateContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS_(self):
            return self.getToken(TrinoParser.IS_, 0)
        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)


    class BetweenContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN_(self):
            return self.getToken(TrinoParser.BETWEEN_, 0)
        def AND_(self):
            return self.getToken(TrinoParser.AND_, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)

        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class QuantifiedComparisonContext(Predicate_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.Predicate_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(TrinoParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.ComparisonQuantifierContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)



    def predicate_(self):

        localctx = TrinoParser.Predicate_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_predicate_)
        self._la = 0 # Token type
        try:
            self.state = 2010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1949
                self.comparisonOperator()
                self.state = 1950
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = TrinoParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1952
                self.comparisonOperator()
                self.state = 1953
                self.comparisonQuantifier()
                self.state = 1954
                self.match(TrinoParser.LPAREN_)
                self.state = 1955
                self.query()
                self.state = 1956
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 1958
                    self.match(TrinoParser.NOT_)


                self.state = 1961
                self.match(TrinoParser.BETWEEN_)
                self.state = 1962
                localctx.lower = self.valueExpression(0)
                self.state = 1963
                self.match(TrinoParser.AND_)
                self.state = 1964
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = TrinoParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 1966
                    self.match(TrinoParser.NOT_)


                self.state = 1969
                self.match(TrinoParser.IN_)
                self.state = 1970
                self.match(TrinoParser.LPAREN_)
                self.state = 1971
                self.expression()
                self.state = 1976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 1972
                    self.match(TrinoParser.COMMA_)
                    self.state = 1973
                    self.expression()
                    self.state = 1978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1979
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 5:
                localctx = TrinoParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 1981
                    self.match(TrinoParser.NOT_)


                self.state = 1984
                self.match(TrinoParser.IN_)
                self.state = 1985
                self.match(TrinoParser.LPAREN_)
                self.state = 1986
                self.query()
                self.state = 1987
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 6:
                localctx = TrinoParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 1989
                    self.match(TrinoParser.NOT_)


                self.state = 1992
                self.match(TrinoParser.LIKE_)
                self.state = 1993
                localctx.pattern = self.valueExpression(0)
                self.state = 1996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1994
                    self.match(TrinoParser.ESCAPE_)
                    self.state = 1995
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 7:
                localctx = TrinoParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1998
                self.match(TrinoParser.IS_)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 1999
                    self.match(TrinoParser.NOT_)


                self.state = 2002
                self.match(TrinoParser.NULL_)
                pass

            elif la_ == 8:
                localctx = TrinoParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2003
                self.match(TrinoParser.IS_)
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 2004
                    self.match(TrinoParser.NOT_)


                self.state = 2007
                self.match(TrinoParser.DISTINCT_)
                self.state = 2008
                self.match(TrinoParser.FROM_)
                self.state = 2009
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(TrinoParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT_(self):
            return self.getToken(TrinoParser.CONCAT_, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)

        def ASTERISK_(self):
            return self.getToken(TrinoParser.ASTERISK_, 0)
        def SLASH_(self):
            return self.getToken(TrinoParser.SLASH_, 0)
        def PERCENT_(self):
            return self.getToken(TrinoParser.PERCENT_, 0)
        def PLUS_(self):
            return self.getToken(TrinoParser.PLUS_, 0)
        def MINUS_(self):
            return self.getToken(TrinoParser.MINUS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)

        def MINUS_(self):
            return self.getToken(TrinoParser.MINUS_, 0)
        def PLUS_(self):
            return self.getToken(TrinoParser.PLUS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)

        def AT_(self):
            return self.getToken(TrinoParser.AT_, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(TrinoParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2013
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = TrinoParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2014
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==302 or _la==303):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2015
                self.valueExpression(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2030
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        localctx = TrinoParser.ArithmeticBinaryContext(self, TrinoParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2018
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2019
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2020
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = TrinoParser.ArithmeticBinaryContext(self, TrinoParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2021
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2022
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==302 or _la==303):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2023
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 3:
                        localctx = TrinoParser.ConcatenationContext(self, TrinoParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2024
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2025
                        self.match(TrinoParser.CONCAT_)
                        self.state = 2026
                        localctx.right = self.valueExpression(2)
                        pass

                    elif la_ == 4:
                        localctx = TrinoParser.AtTimeZoneContext(self, TrinoParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2027
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2028
                        self.match(TrinoParser.AT_)
                        self.state = 2029
                        self.timeZoneSpecifier()
                        pass

             
                self.state = 2034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base_ = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def DOT_(self):
            return self.getToken(TrinoParser.DOT_, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(TrinoParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def DOUBLE_(self):
            return self.getToken(TrinoParser.DOUBLE_, 0)
        def PRECISION_(self):
            return self.getToken(TrinoParser.PRECISION_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class JsonValueContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonValueBehaviorContext
            self.errorBehavior = None # JsonValueBehaviorContext
            self.copyFrom(ctx)

        def JSON_VALUE_(self):
            return self.getToken(TrinoParser.JSON_VALUE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(TrinoParser.JsonPathInvocationContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def RETURNING_(self):
            return self.getToken(TrinoParser.RETURNING_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.ON_)
            else:
                return self.getToken(TrinoParser.ON_, i)
        def EMPTY_(self):
            return self.getToken(TrinoParser.EMPTY_, 0)
        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)
        def jsonValueBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.JsonValueBehaviorContext)
            else:
                return self.getTypedRuleContext(TrinoParser.JsonValueBehaviorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE_(self):
            return self.getToken(TrinoParser.CURRENT_DATE_, 0)
        def CURRENT_TIME_(self):
            return self.getToken(TrinoParser.CURRENT_TIME_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def INTEGER_VALUE_(self):
            return self.getToken(TrinoParser.INTEGER_VALUE_, 0)
        def CURRENT_TIMESTAMP_(self):
            return self.getToken(TrinoParser.CURRENT_TIMESTAMP_, 0)
        def LOCALTIME_(self):
            return self.getToken(TrinoParser.LOCALTIME_, 0)
        def LOCALTIMESTAMP_(self):
            return self.getToken(TrinoParser.LOCALTIMESTAMP_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING_(self):
            return self.getToken(TrinoParser.SUBSTRING_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def FOR_(self):
            return self.getToken(TrinoParser.FOR_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST_(self):
            return self.getToken(TrinoParser.CAST_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def TRY_CAST_(self):
            return self.getToken(TrinoParser.TRY_CAST_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def RARROW_(self):
            return self.getToken(TrinoParser.RARROW_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimChar = None # ValueExpressionContext
            self.trimSource = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM_(self):
            return self.getToken(TrinoParser.TRIM_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def trimsSpecification(self):
            return self.getTypedRuleContext(TrinoParser.TrimsSpecificationContext,0)

        def COMMA_(self):
            return self.getToken(TrinoParser.COMMA_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION_MARK_(self):
            return self.getToken(TrinoParser.QUESTION_MARK_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE_(self):
            return self.getToken(TrinoParser.NORMALIZE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self):
            return self.getToken(TrinoParser.COMMA_, 0)
        def normalForm(self):
            return self.getTypedRuleContext(TrinoParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)


    class JsonObjectContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_OBJECT_(self):
            return self.getToken(TrinoParser.JSON_OBJECT_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def jsonObjectMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.JsonObjectMemberContext)
            else:
                return self.getTypedRuleContext(TrinoParser.JsonObjectMemberContext,i)

        def RETURNING_(self):
            return self.getToken(TrinoParser.RETURNING_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.NULL_)
            else:
                return self.getToken(TrinoParser.NULL_, i)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def ABSENT_(self):
            return self.getToken(TrinoParser.ABSENT_, 0)
        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)
        def UNIQUE_(self):
            return self.getToken(TrinoParser.UNIQUE_, 0)
        def WITHOUT_(self):
            return self.getToken(TrinoParser.WITHOUT_, 0)
        def FORMAT_(self):
            return self.getToken(TrinoParser.FORMAT_, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(TrinoParser.JsonRepresentationContext,0)

        def KEYS_(self):
            return self.getToken(TrinoParser.KEYS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObject" ):
                listener.enterJsonObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObject" ):
                listener.exitJsonObject(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(TrinoParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(TrinoParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(TrinoParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class JsonArrayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_ARRAY_(self):
            return self.getToken(TrinoParser.JSON_ARRAY_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def jsonValueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.JsonValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.JsonValueExpressionContext,i)

        def RETURNING_(self):
            return self.getToken(TrinoParser.RETURNING_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.NULL_)
            else:
                return self.getToken(TrinoParser.NULL_, i)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def ABSENT_(self):
            return self.getToken(TrinoParser.ABSENT_, 0)
        def FORMAT_(self):
            return self.getToken(TrinoParser.FORMAT_, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(TrinoParser.JsonRepresentationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArray" ):
                listener.enterJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArray" ):
                listener.exitJsonArray(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.operand = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE_(self):
            return self.getToken(TrinoParser.CASE_, 0)
        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(TrinoParser.WhenClauseContext,i)

        def ELSE_(self):
            return self.getToken(TrinoParser.ELSE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def ROW_(self):
            return self.getToken(TrinoParser.ROW_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LSQUARE_(self):
            return self.getToken(TrinoParser.LSQUARE_, 0)
        def RSQUARE_(self):
            return self.getToken(TrinoParser.RSQUARE_, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(TrinoParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class JsonExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_EXISTS_(self):
            return self.getToken(TrinoParser.JSON_EXISTS_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(TrinoParser.JsonPathInvocationContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def jsonExistsErrorBehavior(self):
            return self.getTypedRuleContext(TrinoParser.JsonExistsErrorBehaviorContext,0)

        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExists" ):
                listener.enterJsonExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExists" ):
                listener.exitJsonExists(self)


    class CurrentPathContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_PATH_(self):
            return self.getToken(TrinoParser.CURRENT_PATH_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentPath" ):
                listener.enterCurrentPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentPath" ):
                listener.exitCurrentPath(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL_(self):
            return self.getToken(TrinoParser.BINARY_LITERAL_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)


    class CurrentUserContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_USER_(self):
            return self.getToken(TrinoParser.CURRENT_USER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)


    class JsonQueryContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonQueryBehaviorContext
            self.errorBehavior = None # JsonQueryBehaviorContext
            self.copyFrom(ctx)

        def JSON_QUERY_(self):
            return self.getToken(TrinoParser.JSON_QUERY_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(TrinoParser.JsonPathInvocationContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def RETURNING_(self):
            return self.getToken(TrinoParser.RETURNING_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def jsonQueryWrapperBehavior(self):
            return self.getTypedRuleContext(TrinoParser.JsonQueryWrapperBehaviorContext,0)

        def WRAPPER_(self):
            return self.getToken(TrinoParser.WRAPPER_, 0)
        def QUOTES_(self):
            return self.getToken(TrinoParser.QUOTES_, 0)
        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.ON_)
            else:
                return self.getToken(TrinoParser.ON_, i)
        def EMPTY_(self):
            return self.getToken(TrinoParser.EMPTY_, 0)
        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)
        def KEEP_(self):
            return self.getToken(TrinoParser.KEEP_, 0)
        def OMIT_(self):
            return self.getToken(TrinoParser.OMIT_, 0)
        def jsonQueryBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.JsonQueryBehaviorContext)
            else:
                return self.getTypedRuleContext(TrinoParser.JsonQueryBehaviorContext,i)

        def FORMAT_(self):
            return self.getToken(TrinoParser.FORMAT_, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(TrinoParser.JsonRepresentationContext,0)

        def SCALAR_(self):
            return self.getToken(TrinoParser.SCALAR_, 0)
        def TEXT_STRING_(self):
            return self.getToken(TrinoParser.TEXT_STRING_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQuery" ):
                listener.enterJsonQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQuery" ):
                listener.exitJsonQuery(self)


    class MeasureContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def over(self):
            return self.getTypedRuleContext(TrinoParser.OverContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasure" ):
                listener.enterMeasure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasure" ):
                listener.exitMeasure(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT_(self):
            return self.getToken(TrinoParser.EXTRACT_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def FROM_(self):
            return self.getToken(TrinoParser.FROM_, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY_(self):
            return self.getToken(TrinoParser.ARRAY_, 0)
        def LSQUARE_(self):
            return self.getToken(TrinoParser.LSQUARE_, 0)
        def RSQUARE_(self):
            return self.getToken(TrinoParser.RSQUARE_, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def ASTERISK_(self):
            return self.getToken(TrinoParser.ASTERISK_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def processingMode(self):
            return self.getTypedRuleContext(TrinoParser.ProcessingModeContext,0)

        def DOT_(self):
            return self.getToken(TrinoParser.DOT_, 0)
        def filter_(self):
            return self.getTypedRuleContext(TrinoParser.FilterContext,0)

        def over(self):
            return self.getTypedRuleContext(TrinoParser.OverContext,0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def ORDER_(self):
            return self.getToken(TrinoParser.ORDER_, 0)
        def BY_(self):
            return self.getToken(TrinoParser.BY_, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.SetQuantifierContext,0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def nullTreatment(self):
            return self.getTypedRuleContext(TrinoParser.NullTreatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class CurrentSchemaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_SCHEMA_(self):
            return self.getToken(TrinoParser.CURRENT_SCHEMA_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchema" ):
                listener.enterCurrentSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchema" ):
                listener.exitCurrentSchema(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS_(self):
            return self.getToken(TrinoParser.EXISTS_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def query(self):
            return self.getTypedRuleContext(TrinoParser.QueryContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION_(self):
            return self.getToken(TrinoParser.POSITION_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,i)

        def IN_(self):
            return self.getToken(TrinoParser.IN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)


    class ListaggContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.LPAREN_)
            else:
                return self.getToken(TrinoParser.LPAREN_, i)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def RPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.RPAREN_)
            else:
                return self.getToken(TrinoParser.RPAREN_, i)
        def LISTAGG_(self):
            return self.getToken(TrinoParser.LISTAGG_, 0)
        def WITHIN_(self):
            return self.getToken(TrinoParser.WITHIN_, 0)
        def GROUP_(self):
            return self.getToken(TrinoParser.GROUP_, 0)
        def ORDER_(self):
            return self.getToken(TrinoParser.ORDER_, 0)
        def BY_(self):
            return self.getToken(TrinoParser.BY_, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.SetQuantifierContext,0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)

        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def OVERFLOW_(self):
            return self.getToken(TrinoParser.OVERFLOW_, 0)
        def listAggOverflowBehavior(self):
            return self.getTypedRuleContext(TrinoParser.ListAggOverflowBehaviorContext,0)

        def filter_(self):
            return self.getTypedRuleContext(TrinoParser.FilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListagg" ):
                listener.enterListagg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListagg" ):
                listener.exitListagg(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE_(self):
            return self.getToken(TrinoParser.CASE_, 0)
        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(TrinoParser.WhenClauseContext,i)

        def ELSE_(self):
            return self.getToken(TrinoParser.ELSE_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class CurrentCatalogContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_CATALOG_(self):
            return self.getToken(TrinoParser.CURRENT_CATALOG_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentCatalog" ):
                listener.enterCurrentCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentCatalog" ):
                listener.exitCurrentCatalog(self)


    class GroupingOperationContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING_(self):
            return self.getToken(TrinoParser.GROUPING_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,i)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2036
                self.match(TrinoParser.NULL_)
                pass

            elif la_ == 2:
                localctx = TrinoParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2037
                self.interval()
                pass

            elif la_ == 3:
                localctx = TrinoParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2038
                self.identifier()
                self.state = 2039
                self.string_()
                pass

            elif la_ == 4:
                localctx = TrinoParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2041
                self.match(TrinoParser.DOUBLE_)
                self.state = 2042
                self.match(TrinoParser.PRECISION_)
                self.state = 2043
                self.string_()
                pass

            elif la_ == 5:
                localctx = TrinoParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2044
                self.number()
                pass

            elif la_ == 6:
                localctx = TrinoParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2045
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = TrinoParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2046
                self.string_()
                pass

            elif la_ == 8:
                localctx = TrinoParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2047
                self.match(TrinoParser.BINARY_LITERAL_)
                pass

            elif la_ == 9:
                localctx = TrinoParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2048
                self.match(TrinoParser.QUESTION_MARK_)
                pass

            elif la_ == 10:
                localctx = TrinoParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2049
                self.match(TrinoParser.POSITION_)
                self.state = 2050
                self.match(TrinoParser.LPAREN_)
                self.state = 2051
                self.valueExpression(0)
                self.state = 2052
                self.match(TrinoParser.IN_)
                self.state = 2053
                self.valueExpression(0)
                self.state = 2054
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 11:
                localctx = TrinoParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2056
                self.match(TrinoParser.LPAREN_)
                self.state = 2057
                self.expression()
                self.state = 2060 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2058
                    self.match(TrinoParser.COMMA_)
                    self.state = 2059
                    self.expression()
                    self.state = 2062 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==312):
                        break

                self.state = 2064
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 12:
                localctx = TrinoParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2066
                self.match(TrinoParser.ROW_)
                self.state = 2067
                self.match(TrinoParser.LPAREN_)
                self.state = 2068
                self.expression()
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2069
                    self.match(TrinoParser.COMMA_)
                    self.state = 2070
                    self.expression()
                    self.state = 2075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2076
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 13:
                localctx = TrinoParser.ListaggContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2078
                localctx.name = self.match(TrinoParser.LISTAGG_)
                self.state = 2079
                self.match(TrinoParser.LPAREN_)
                self.state = 2081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 2080
                    self.setQuantifier()


                self.state = 2083
                self.expression()
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 2084
                    self.match(TrinoParser.COMMA_)
                    self.state = 2085
                    self.string_()


                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 2088
                    self.match(TrinoParser.ON_)
                    self.state = 2089
                    self.match(TrinoParser.OVERFLOW_)
                    self.state = 2090
                    self.listAggOverflowBehavior()


                self.state = 2093
                self.match(TrinoParser.RPAREN_)

                self.state = 2094
                self.match(TrinoParser.WITHIN_)
                self.state = 2095
                self.match(TrinoParser.GROUP_)
                self.state = 2096
                self.match(TrinoParser.LPAREN_)
                self.state = 2097
                self.match(TrinoParser.ORDER_)
                self.state = 2098
                self.match(TrinoParser.BY_)
                self.state = 2099
                self.sortItem()
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2100
                    self.match(TrinoParser.COMMA_)
                    self.state = 2101
                    self.sortItem()
                    self.state = 2106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2107
                self.match(TrinoParser.RPAREN_)
                self.state = 2110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 2109
                    self.filter_()


                pass

            elif la_ == 14:
                localctx = TrinoParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2112
                    self.processingMode()


                self.state = 2115
                self.qualifiedName()
                self.state = 2116
                self.match(TrinoParser.LPAREN_)
                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                    self.state = 2117
                    localctx.label = self.identifier()
                    self.state = 2118
                    self.match(TrinoParser.DOT_)


                self.state = 2122
                self.match(TrinoParser.ASTERISK_)
                self.state = 2123
                self.match(TrinoParser.RPAREN_)
                self.state = 2125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2124
                    self.filter_()


                self.state = 2128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 2127
                    self.over()


                pass

            elif la_ == 15:
                localctx = TrinoParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                if la_ == 1:
                    self.state = 2130
                    self.processingMode()


                self.state = 2133
                self.qualifiedName()
                self.state = 2134
                self.match(TrinoParser.LPAREN_)
                self.state = 2146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -650779431874988354) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                    self.state = 2136
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                    if la_ == 1:
                        self.state = 2135
                        self.setQuantifier()


                    self.state = 2138
                    self.expression()
                    self.state = 2143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2139
                        self.match(TrinoParser.COMMA_)
                        self.state = 2140
                        self.expression()
                        self.state = 2145
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 2148
                    self.match(TrinoParser.ORDER_)
                    self.state = 2149
                    self.match(TrinoParser.BY_)
                    self.state = 2150
                    self.sortItem()
                    self.state = 2155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2151
                        self.match(TrinoParser.COMMA_)
                        self.state = 2152
                        self.sortItem()
                        self.state = 2157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2160
                self.match(TrinoParser.RPAREN_)
                self.state = 2162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2161
                    self.filter_()


                self.state = 2168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==103 or _la==211:
                        self.state = 2164
                        self.nullTreatment()


                    self.state = 2167
                    self.over()


                pass

            elif la_ == 16:
                localctx = TrinoParser.MeasureContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2170
                self.identifier()
                self.state = 2171
                self.over()
                pass

            elif la_ == 17:
                localctx = TrinoParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2173
                self.identifier()
                self.state = 2174
                self.match(TrinoParser.RARROW_)
                self.state = 2175
                self.expression()
                pass

            elif la_ == 18:
                localctx = TrinoParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2177
                self.match(TrinoParser.LPAREN_)
                self.state = 2186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                    self.state = 2178
                    self.identifier()
                    self.state = 2183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2179
                        self.match(TrinoParser.COMMA_)
                        self.state = 2180
                        self.identifier()
                        self.state = 2185
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2188
                self.match(TrinoParser.RPAREN_)
                self.state = 2189
                self.match(TrinoParser.RARROW_)
                self.state = 2190
                self.expression()
                pass

            elif la_ == 19:
                localctx = TrinoParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2191
                self.match(TrinoParser.LPAREN_)
                self.state = 2192
                self.query()
                self.state = 2193
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 20:
                localctx = TrinoParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2195
                self.match(TrinoParser.EXISTS_)
                self.state = 2196
                self.match(TrinoParser.LPAREN_)
                self.state = 2197
                self.query()
                self.state = 2198
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 21:
                localctx = TrinoParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2200
                self.match(TrinoParser.CASE_)
                self.state = 2201
                localctx.operand = self.expression()
                self.state = 2203 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2202
                    self.whenClause()
                    self.state = 2205 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==284):
                        break

                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 2207
                    self.match(TrinoParser.ELSE_)
                    self.state = 2208
                    localctx.elseExpression = self.expression()


                self.state = 2211
                self.match(TrinoParser.END_)
                pass

            elif la_ == 22:
                localctx = TrinoParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2213
                self.match(TrinoParser.CASE_)
                self.state = 2215 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2214
                    self.whenClause()
                    self.state = 2217 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==284):
                        break

                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 2219
                    self.match(TrinoParser.ELSE_)
                    self.state = 2220
                    localctx.elseExpression = self.expression()


                self.state = 2223
                self.match(TrinoParser.END_)
                pass

            elif la_ == 23:
                localctx = TrinoParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2225
                self.match(TrinoParser.CAST_)
                self.state = 2226
                self.match(TrinoParser.LPAREN_)
                self.state = 2227
                self.expression()
                self.state = 2228
                self.match(TrinoParser.AS_)
                self.state = 2229
                self.type_(0)
                self.state = 2230
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 24:
                localctx = TrinoParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2232
                self.match(TrinoParser.TRY_CAST_)
                self.state = 2233
                self.match(TrinoParser.LPAREN_)
                self.state = 2234
                self.expression()
                self.state = 2235
                self.match(TrinoParser.AS_)
                self.state = 2236
                self.type_(0)
                self.state = 2237
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 25:
                localctx = TrinoParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2239
                self.match(TrinoParser.ARRAY_)
                self.state = 2240
                self.match(TrinoParser.LSQUARE_)
                self.state = 2249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227633993941633) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                    self.state = 2241
                    self.expression()
                    self.state = 2246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2242
                        self.match(TrinoParser.COMMA_)
                        self.state = 2243
                        self.expression()
                        self.state = 2248
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2251
                self.match(TrinoParser.RSQUARE_)
                pass

            elif la_ == 26:
                localctx = TrinoParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2252
                self.identifier()
                pass

            elif la_ == 27:
                localctx = TrinoParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2253
                localctx.name = self.match(TrinoParser.CURRENT_DATE_)
                pass

            elif la_ == 28:
                localctx = TrinoParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2254
                localctx.name = self.match(TrinoParser.CURRENT_TIME_)
                self.state = 2258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                if la_ == 1:
                    self.state = 2255
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2256
                    localctx.precision = self.match(TrinoParser.INTEGER_VALUE_)
                    self.state = 2257
                    self.match(TrinoParser.RPAREN_)


                pass

            elif la_ == 29:
                localctx = TrinoParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2260
                localctx.name = self.match(TrinoParser.CURRENT_TIMESTAMP_)
                self.state = 2264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2261
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2262
                    localctx.precision = self.match(TrinoParser.INTEGER_VALUE_)
                    self.state = 2263
                    self.match(TrinoParser.RPAREN_)


                pass

            elif la_ == 30:
                localctx = TrinoParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2266
                localctx.name = self.match(TrinoParser.LOCALTIME_)
                self.state = 2270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 2267
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2268
                    localctx.precision = self.match(TrinoParser.INTEGER_VALUE_)
                    self.state = 2269
                    self.match(TrinoParser.RPAREN_)


                pass

            elif la_ == 31:
                localctx = TrinoParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2272
                localctx.name = self.match(TrinoParser.LOCALTIMESTAMP_)
                self.state = 2276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2273
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2274
                    localctx.precision = self.match(TrinoParser.INTEGER_VALUE_)
                    self.state = 2275
                    self.match(TrinoParser.RPAREN_)


                pass

            elif la_ == 32:
                localctx = TrinoParser.CurrentUserContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2278
                localctx.name = self.match(TrinoParser.CURRENT_USER_)
                pass

            elif la_ == 33:
                localctx = TrinoParser.CurrentCatalogContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2279
                localctx.name = self.match(TrinoParser.CURRENT_CATALOG_)
                pass

            elif la_ == 34:
                localctx = TrinoParser.CurrentSchemaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2280
                localctx.name = self.match(TrinoParser.CURRENT_SCHEMA_)
                pass

            elif la_ == 35:
                localctx = TrinoParser.CurrentPathContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2281
                localctx.name = self.match(TrinoParser.CURRENT_PATH_)
                pass

            elif la_ == 36:
                localctx = TrinoParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2282
                self.match(TrinoParser.TRIM_)
                self.state = 2283
                self.match(TrinoParser.LPAREN_)
                self.state = 2291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 2285
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                    if la_ == 1:
                        self.state = 2284
                        self.trimsSpecification()


                    self.state = 2288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262465450302376258) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2347169330619225741) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6227771432895105) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 148830988330065375) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 1023) != 0):
                        self.state = 2287
                        localctx.trimChar = self.valueExpression(0)


                    self.state = 2290
                    self.match(TrinoParser.FROM_)


                self.state = 2293
                localctx.trimSource = self.valueExpression(0)
                self.state = 2294
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 37:
                localctx = TrinoParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2296
                self.match(TrinoParser.TRIM_)
                self.state = 2297
                self.match(TrinoParser.LPAREN_)
                self.state = 2298
                localctx.trimSource = self.valueExpression(0)
                self.state = 2299
                self.match(TrinoParser.COMMA_)
                self.state = 2300
                localctx.trimChar = self.valueExpression(0)
                self.state = 2301
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 38:
                localctx = TrinoParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2303
                self.match(TrinoParser.SUBSTRING_)
                self.state = 2304
                self.match(TrinoParser.LPAREN_)
                self.state = 2305
                self.valueExpression(0)
                self.state = 2306
                self.match(TrinoParser.FROM_)
                self.state = 2307
                self.valueExpression(0)
                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2308
                    self.match(TrinoParser.FOR_)
                    self.state = 2309
                    self.valueExpression(0)


                self.state = 2312
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 39:
                localctx = TrinoParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2314
                self.match(TrinoParser.NORMALIZE_)
                self.state = 2315
                self.match(TrinoParser.LPAREN_)
                self.state = 2316
                self.valueExpression(0)
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 2317
                    self.match(TrinoParser.COMMA_)
                    self.state = 2318
                    self.normalForm()


                self.state = 2321
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 40:
                localctx = TrinoParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2323
                self.match(TrinoParser.EXTRACT_)
                self.state = 2324
                self.match(TrinoParser.LPAREN_)
                self.state = 2325
                self.identifier()
                self.state = 2326
                self.match(TrinoParser.FROM_)
                self.state = 2327
                self.valueExpression(0)
                self.state = 2328
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 41:
                localctx = TrinoParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2330
                self.match(TrinoParser.LPAREN_)
                self.state = 2331
                self.expression()
                self.state = 2332
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 42:
                localctx = TrinoParser.GroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2334
                self.match(TrinoParser.GROUPING_)
                self.state = 2335
                self.match(TrinoParser.LPAREN_)
                self.state = 2344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                    self.state = 2336
                    self.qualifiedName()
                    self.state = 2341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2337
                        self.match(TrinoParser.COMMA_)
                        self.state = 2338
                        self.qualifiedName()
                        self.state = 2343
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2346
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 43:
                localctx = TrinoParser.JsonExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2347
                self.match(TrinoParser.JSON_EXISTS_)
                self.state = 2348
                self.match(TrinoParser.LPAREN_)
                self.state = 2349
                self.jsonPathInvocation()
                self.state = 2354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72 or _la==80 or _la==257 or _la==267:
                    self.state = 2350
                    self.jsonExistsErrorBehavior()
                    self.state = 2351
                    self.match(TrinoParser.ON_)
                    self.state = 2352
                    self.match(TrinoParser.ERROR_)


                self.state = 2356
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 44:
                localctx = TrinoParser.JsonValueContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2358
                self.match(TrinoParser.JSON_VALUE_)
                self.state = 2359
                self.match(TrinoParser.LPAREN_)
                self.state = 2360
                self.jsonPathInvocation()
                self.state = 2363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2361
                    self.match(TrinoParser.RETURNING_)
                    self.state = 2362
                    self.type_(0)


                self.state = 2369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 2365
                    localctx.emptyBehavior = self.jsonValueBehavior()
                    self.state = 2366
                    self.match(TrinoParser.ON_)
                    self.state = 2367
                    self.match(TrinoParser.EMPTY_)


                self.state = 2375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==72 or _la==166:
                    self.state = 2371
                    localctx.errorBehavior = self.jsonValueBehavior()
                    self.state = 2372
                    self.match(TrinoParser.ON_)
                    self.state = 2373
                    self.match(TrinoParser.ERROR_)


                self.state = 2377
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 45:
                localctx = TrinoParser.JsonQueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2379
                self.match(TrinoParser.JSON_QUERY_)
                self.state = 2380
                self.match(TrinoParser.LPAREN_)
                self.state = 2381
                self.jsonPathInvocation()
                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2382
                    self.match(TrinoParser.RETURNING_)
                    self.state = 2383
                    self.type_(0)
                    self.state = 2386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==87:
                        self.state = 2384
                        self.match(TrinoParser.FORMAT_)
                        self.state = 2385
                        self.jsonRepresentation()




                self.state = 2393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288 or _la==290:
                    self.state = 2390
                    self.jsonQueryWrapperBehavior()
                    self.state = 2391
                    self.match(TrinoParser.WRAPPER_)


                self.state = 2402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127 or _la==172:
                    self.state = 2395
                    _la = self._input.LA(1)
                    if not(_la==127 or _la==172):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2396
                    self.match(TrinoParser.QUOTES_)
                    self.state = 2400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==173:
                        self.state = 2397
                        self.match(TrinoParser.ON_)
                        self.state = 2398
                        self.match(TrinoParser.SCALAR_)
                        self.state = 2399
                        self.match(TrinoParser.TEXT_STRING_)




                self.state = 2408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2404
                    localctx.emptyBehavior = self.jsonQueryBehavior()
                    self.state = 2405
                    self.match(TrinoParser.ON_)
                    self.state = 2406
                    self.match(TrinoParser.EMPTY_)


                self.state = 2414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==72 or _la==166:
                    self.state = 2410
                    localctx.errorBehavior = self.jsonQueryBehavior()
                    self.state = 2411
                    self.match(TrinoParser.ON_)
                    self.state = 2412
                    self.match(TrinoParser.ERROR_)


                self.state = 2416
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 46:
                localctx = TrinoParser.JsonObjectContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2418
                self.match(TrinoParser.JSON_OBJECT_)
                self.state = 2419
                self.match(TrinoParser.LPAREN_)
                self.state = 2448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                if la_ == 1:
                    self.state = 2420
                    self.jsonObjectMember()
                    self.state = 2425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2421
                        self.match(TrinoParser.COMMA_)
                        self.state = 2422
                        self.jsonObjectMember()
                        self.state = 2427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2434
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [166]:
                        self.state = 2428
                        self.match(TrinoParser.NULL_)
                        self.state = 2429
                        self.match(TrinoParser.ON_)
                        self.state = 2430
                        self.match(TrinoParser.NULL_)
                        pass
                    elif token in [1]:
                        self.state = 2431
                        self.match(TrinoParser.ABSENT_)
                        self.state = 2432
                        self.match(TrinoParser.ON_)
                        self.state = 2433
                        self.match(TrinoParser.NULL_)
                        pass
                    elif token in [214, 288, 290, 314]:
                        pass
                    else:
                        pass
                    self.state = 2446
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [288]:
                        self.state = 2436
                        self.match(TrinoParser.WITH_)
                        self.state = 2437
                        self.match(TrinoParser.UNIQUE_)
                        self.state = 2439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==129:
                            self.state = 2438
                            self.match(TrinoParser.KEYS_)


                        pass
                    elif token in [290]:
                        self.state = 2441
                        self.match(TrinoParser.WITHOUT_)
                        self.state = 2442
                        self.match(TrinoParser.UNIQUE_)
                        self.state = 2444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==129:
                            self.state = 2443
                            self.match(TrinoParser.KEYS_)


                        pass
                    elif token in [214, 314]:
                        pass
                    else:
                        pass


                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2450
                    self.match(TrinoParser.RETURNING_)
                    self.state = 2451
                    self.type_(0)
                    self.state = 2454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==87:
                        self.state = 2452
                        self.match(TrinoParser.FORMAT_)
                        self.state = 2453
                        self.jsonRepresentation()




                self.state = 2458
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 47:
                localctx = TrinoParser.JsonArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2459
                self.match(TrinoParser.JSON_ARRAY_)
                self.state = 2460
                self.match(TrinoParser.LPAREN_)
                self.state = 2477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                if la_ == 1:
                    self.state = 2461
                    self.jsonValueExpression()
                    self.state = 2466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2462
                        self.match(TrinoParser.COMMA_)
                        self.state = 2463
                        self.jsonValueExpression()
                        self.state = 2468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2475
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [166]:
                        self.state = 2469
                        self.match(TrinoParser.NULL_)
                        self.state = 2470
                        self.match(TrinoParser.ON_)
                        self.state = 2471
                        self.match(TrinoParser.NULL_)
                        pass
                    elif token in [1]:
                        self.state = 2472
                        self.match(TrinoParser.ABSENT_)
                        self.state = 2473
                        self.match(TrinoParser.ON_)
                        self.state = 2474
                        self.match(TrinoParser.NULL_)
                        pass
                    elif token in [214, 314]:
                        pass
                    else:
                        pass


                self.state = 2485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2479
                    self.match(TrinoParser.RETURNING_)
                    self.state = 2480
                    self.type_(0)
                    self.state = 2483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==87:
                        self.state = 2481
                        self.match(TrinoParser.FORMAT_)
                        self.state = 2482
                        self.jsonRepresentation()




                self.state = 2487
                self.match(TrinoParser.RPAREN_)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2498
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                    if la_ == 1:
                        localctx = TrinoParser.SubscriptContext(self, TrinoParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2490
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 2491
                        self.match(TrinoParser.LSQUARE_)
                        self.state = 2492
                        localctx.index = self.valueExpression(0)
                        self.state = 2493
                        self.match(TrinoParser.RSQUARE_)
                        pass

                    elif la_ == 2:
                        localctx = TrinoParser.DereferenceContext(self, TrinoParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base_ = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2495
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 2496
                        self.match(TrinoParser.DOT_)
                        self.state = 2497
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JsonPathInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # String_Context

        def jsonValueExpression(self):
            return self.getTypedRuleContext(TrinoParser.JsonValueExpressionContext,0)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def PASSING_(self):
            return self.getToken(TrinoParser.PASSING_, 0)

        def jsonArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.JsonArgumentContext)
            else:
                return self.getTypedRuleContext(TrinoParser.JsonArgumentContext,i)


        def getRuleIndex(self):
            return TrinoParser.RULE_jsonPathInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPathInvocation" ):
                listener.enterJsonPathInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPathInvocation" ):
                listener.exitJsonPathInvocation(self)




    def jsonPathInvocation(self):

        localctx = TrinoParser.JsonPathInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_jsonPathInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            self.jsonValueExpression()
            self.state = 2504
            self.match(TrinoParser.COMMA_)
            self.state = 2505
            localctx.path = self.string_()
            self.state = 2515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 2506
                self.match(TrinoParser.PASSING_)
                self.state = 2507
                self.jsonArgument()
                self.state = 2512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2508
                    self.match(TrinoParser.COMMA_)
                    self.state = 2509
                    self.jsonArgument()
                    self.state = 2514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def FORMAT_(self):
            return self.getToken(TrinoParser.FORMAT_, 0)

        def jsonRepresentation(self):
            return self.getTypedRuleContext(TrinoParser.JsonRepresentationContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_jsonValueExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueExpression" ):
                listener.enterJsonValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueExpression" ):
                listener.exitJsonValueExpression(self)




    def jsonValueExpression(self):

        localctx = TrinoParser.JsonValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_jsonValueExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2517
            self.expression()
            self.state = 2520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 2518
                self.match(TrinoParser.FORMAT_)
                self.state = 2519
                self.jsonRepresentation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonRepresentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_(self):
            return self.getToken(TrinoParser.JSON_, 0)

        def ENCODING_(self):
            return self.getToken(TrinoParser.ENCODING_, 0)

        def UTF8_(self):
            return self.getToken(TrinoParser.UTF8_, 0)

        def UTF16_(self):
            return self.getToken(TrinoParser.UTF16_, 0)

        def UTF32_(self):
            return self.getToken(TrinoParser.UTF32_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_jsonRepresentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRepresentation" ):
                listener.enterJsonRepresentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRepresentation" ):
                listener.exitJsonRepresentation(self)




    def jsonRepresentation(self):

        localctx = TrinoParser.JsonRepresentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_jsonRepresentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2522
            self.match(TrinoParser.JSON_)
            self.state = 2525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 2523
                self.match(TrinoParser.ENCODING_)
                self.state = 2524
                _la = self._input.LA(1)
                if not(((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonValueExpression(self):
            return self.getTypedRuleContext(TrinoParser.JsonValueExpressionContext,0)


        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_jsonArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArgument" ):
                listener.enterJsonArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArgument" ):
                listener.exitJsonArgument(self)




    def jsonArgument(self):

        localctx = TrinoParser.JsonArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_jsonArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.jsonValueExpression()
            self.state = 2528
            self.match(TrinoParser.AS_)
            self.state = 2529
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonExistsErrorBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_(self):
            return self.getToken(TrinoParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(TrinoParser.FALSE_, 0)

        def UNKNOWN_(self):
            return self.getToken(TrinoParser.UNKNOWN_, 0)

        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_jsonExistsErrorBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistsErrorBehavior" ):
                listener.enterJsonExistsErrorBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistsErrorBehavior" ):
                listener.exitJsonExistsErrorBehavior(self)




    def jsonExistsErrorBehavior(self):

        localctx = TrinoParser.JsonExistsErrorBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_jsonExistsErrorBehavior)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2531
            _la = self._input.LA(1)
            if not(_la==72 or _la==80 or _la==257 or _la==267):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def DEFAULT_(self):
            return self.getToken(TrinoParser.DEFAULT_, 0)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_jsonValueBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueBehavior" ):
                listener.enterJsonValueBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueBehavior" ):
                listener.exitJsonValueBehavior(self)




    def jsonValueBehavior(self):

        localctx = TrinoParser.JsonValueBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_jsonValueBehavior)
        try:
            self.state = 2537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2533
                self.match(TrinoParser.ERROR_)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2534
                self.match(TrinoParser.NULL_)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2535
                self.match(TrinoParser.DEFAULT_)
                self.state = 2536
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonQueryWrapperBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHOUT_(self):
            return self.getToken(TrinoParser.WITHOUT_, 0)

        def ARRAY_(self):
            return self.getToken(TrinoParser.ARRAY_, 0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def CONDITIONAL_(self):
            return self.getToken(TrinoParser.CONDITIONAL_, 0)

        def UNCONDITIONAL_(self):
            return self.getToken(TrinoParser.UNCONDITIONAL_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_jsonQueryWrapperBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQueryWrapperBehavior" ):
                listener.enterJsonQueryWrapperBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQueryWrapperBehavior" ):
                listener.exitJsonQueryWrapperBehavior(self)




    def jsonQueryWrapperBehavior(self):

        localctx = TrinoParser.JsonQueryWrapperBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_jsonQueryWrapperBehavior)
        self._la = 0 # Token type
        try:
            self.state = 2550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [290]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2539
                self.match(TrinoParser.WITHOUT_)
                self.state = 2541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 2540
                    self.match(TrinoParser.ARRAY_)


                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2543
                self.match(TrinoParser.WITH_)
                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32 or _la==264:
                    self.state = 2544
                    _la = self._input.LA(1)
                    if not(_la==32 or _la==264):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 2547
                    self.match(TrinoParser.ARRAY_)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonQueryBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)

        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)

        def EMPTY_(self):
            return self.getToken(TrinoParser.EMPTY_, 0)

        def ARRAY_(self):
            return self.getToken(TrinoParser.ARRAY_, 0)

        def OBJECT_(self):
            return self.getToken(TrinoParser.OBJECT_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_jsonQueryBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQueryBehavior" ):
                listener.enterJsonQueryBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQueryBehavior" ):
                listener.exitJsonQueryBehavior(self)




    def jsonQueryBehavior(self):

        localctx = TrinoParser.JsonQueryBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_jsonQueryBehavior)
        self._la = 0 # Token type
        try:
            self.state = 2556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2552
                self.match(TrinoParser.ERROR_)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2553
                self.match(TrinoParser.NULL_)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2554
                self.match(TrinoParser.EMPTY_)
                self.state = 2555
                _la = self._input.LA(1)
                if not(_la==10 or _la==169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjectMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def VALUE_(self):
            return self.getToken(TrinoParser.VALUE_, 0)

        def jsonValueExpression(self):
            return self.getTypedRuleContext(TrinoParser.JsonValueExpressionContext,0)


        def KEY_(self):
            return self.getToken(TrinoParser.KEY_, 0)

        def COLON_(self):
            return self.getToken(TrinoParser.COLON_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_jsonObjectMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)




    def jsonObjectMember(self):

        localctx = TrinoParser.JsonObjectMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_jsonObjectMember)
        try:
            self.state = 2569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2558
                    self.match(TrinoParser.KEY_)


                self.state = 2561
                self.expression()
                self.state = 2562
                self.match(TrinoParser.VALUE_)
                self.state = 2563
                self.jsonValueExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2565
                self.expression()
                self.state = 2566
                self.match(TrinoParser.COLON_)
                self.state = 2567
                self.jsonValueExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcessingModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNNING_(self):
            return self.getToken(TrinoParser.RUNNING_, 0)

        def FINAL_(self):
            return self.getToken(TrinoParser.FINAL_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_processingMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessingMode" ):
                listener.enterProcessingMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessingMode" ):
                listener.exitProcessingMode(self)




    def processingMode(self):

        localctx = TrinoParser.ProcessingModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_processingMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2571
            _la = self._input.LA(1)
            if not(_la==83 or _la==224):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_(self):
            return self.getToken(TrinoParser.IGNORE_, 0)

        def NULLS_(self):
            return self.getToken(TrinoParser.NULLS_, 0)

        def RESPECT_(self):
            return self.getToken(TrinoParser.RESPECT_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)




    def nullTreatment(self):

        localctx = TrinoParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_nullTreatment)
        try:
            self.state = 2577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2573
                self.match(TrinoParser.IGNORE_)
                self.state = 2574
                self.match(TrinoParser.NULLS_)
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2575
                self.match(TrinoParser.RESPECT_)
                self.state = 2576
                self.match(TrinoParser.NULLS_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_string_

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnicodeStringLiteralContext(String_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.String_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNICODE_STRING_(self):
            return self.getToken(TrinoParser.UNICODE_STRING_, 0)
        def UESCAPE_(self):
            return self.getToken(TrinoParser.UESCAPE_, 0)
        def STRING_(self):
            return self.getToken(TrinoParser.STRING_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)


    class BasicStringLiteralContext(String_Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.String_Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING_(self):
            return self.getToken(TrinoParser.STRING_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicStringLiteral" ):
                listener.enterBasicStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicStringLiteral" ):
                listener.exitBasicStringLiteral(self)



    def string_(self):

        localctx = TrinoParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_string_)
        try:
            self.state = 2585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [327]:
                localctx = TrinoParser.BasicStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2579
                self.match(TrinoParser.STRING_)
                pass
            elif token in [328]:
                localctx = TrinoParser.UnicodeStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2580
                self.match(TrinoParser.UNICODE_STRING_)
                self.state = 2583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 2581
                    self.match(TrinoParser.UESCAPE_)
                    self.state = 2582
                    self.match(TrinoParser.STRING_)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME_(self):
            return self.getToken(TrinoParser.TIME_, 0)
        def ZONE_(self):
            return self.getToken(TrinoParser.ZONE_, 0)
        def interval(self):
            return self.getTypedRuleContext(TrinoParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME_(self):
            return self.getToken(TrinoParser.TIME_, 0)
        def ZONE_(self):
            return self.getToken(TrinoParser.ZONE_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)



    def timeZoneSpecifier(self):

        localctx = TrinoParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_timeZoneSpecifier)
        try:
            self.state = 2593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2587
                self.match(TrinoParser.TIME_)
                self.state = 2588
                self.match(TrinoParser.ZONE_)
                self.state = 2589
                self.interval()
                pass

            elif la_ == 2:
                localctx = TrinoParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2590
                self.match(TrinoParser.TIME_)
                self.state = 2591
                self.match(TrinoParser.ZONE_)
                self.state = 2592
                self.string_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ_(self):
            return self.getToken(TrinoParser.EQ_, 0)

        def NEQ_(self):
            return self.getToken(TrinoParser.NEQ_, 0)

        def LT_(self):
            return self.getToken(TrinoParser.LT_, 0)

        def LTE_(self):
            return self.getToken(TrinoParser.LTE_, 0)

        def GT_(self):
            return self.getToken(TrinoParser.GT_, 0)

        def GTE_(self):
            return self.getToken(TrinoParser.GTE_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = TrinoParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2595
            _la = self._input.LA(1)
            if not(((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)

        def SOME_(self):
            return self.getToken(TrinoParser.SOME_, 0)

        def ANY_(self):
            return self.getToken(TrinoParser.ANY_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)




    def comparisonQuantifier(self):

        localctx = TrinoParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            _la = self._input.LA(1)
            if not(_la==5 or _la==9 or _la==238):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_(self):
            return self.getToken(TrinoParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(TrinoParser.FALSE_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = TrinoParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            _la = self._input.LA(1)
            if not(_la==80 or _la==257):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL_(self):
            return self.getToken(TrinoParser.INTERVAL_, 0)

        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IntervalFieldContext,i)


        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)

        def PLUS_(self):
            return self.getToken(TrinoParser.PLUS_, 0)

        def MINUS_(self):
            return self.getToken(TrinoParser.MINUS_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = TrinoParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.match(TrinoParser.INTERVAL_)
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==302 or _la==303:
                self.state = 2602
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==302 or _la==303):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2605
            self.string_()
            self.state = 2606
            localctx.from_ = self.intervalField()
            self.state = 2609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2607
                self.match(TrinoParser.TO_)
                self.state = 2608
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR_(self):
            return self.getToken(TrinoParser.YEAR_, 0)

        def MONTH_(self):
            return self.getToken(TrinoParser.MONTH_, 0)

        def DAY_(self):
            return self.getToken(TrinoParser.DAY_, 0)

        def HOUR_(self):
            return self.getToken(TrinoParser.HOUR_, 0)

        def MINUTE_(self):
            return self.getToken(TrinoParser.MINUTE_, 0)

        def SECOND_(self):
            return self.getToken(TrinoParser.SECOND_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)




    def intervalField(self):

        localctx = TrinoParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            _la = self._input.LA(1)
            if not(_la==50 or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 13510798882111489) != 0) or _la==228 or _la==294):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD_(self):
            return self.getToken(TrinoParser.NFD_, 0)

        def NFC_(self):
            return self.getToken(TrinoParser.NFC_, 0)

        def NFKD_(self):
            return self.getToken(TrinoParser.NFKD_, 0)

        def NFKC_(self):
            return self.getToken(TrinoParser.NFKC_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)




    def normalForm(self):

        localctx = TrinoParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            _la = self._input.LA(1)
            if not(((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RowTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW_(self):
            return self.getToken(TrinoParser.ROW_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def rowField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RowFieldContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RowFieldContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowType" ):
                listener.enterRowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowType" ):
                listener.exitRowType(self)


    class IntervalTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext
            self.copyFrom(ctx)

        def INTERVAL_(self):
            return self.getToken(TrinoParser.INTERVAL_, 0)
        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IntervalFieldContext,i)

        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)


    class ArrayTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def ARRAY_(self):
            return self.getToken(TrinoParser.ARRAY_, 0)
        def LSQUARE_(self):
            return self.getToken(TrinoParser.LSQUARE_, 0)
        def INTEGER_VALUE_(self):
            return self.getToken(TrinoParser.INTEGER_VALUE_, 0)
        def RSQUARE_(self):
            return self.getToken(TrinoParser.RSQUARE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)


    class DoublePrecisionTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_(self):
            return self.getToken(TrinoParser.DOUBLE_, 0)
        def PRECISION_(self):
            return self.getToken(TrinoParser.PRECISION_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoublePrecisionType" ):
                listener.enterDoublePrecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoublePrecisionType" ):
                listener.exitDoublePrecisionType(self)


    class LegacyArrayTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY_(self):
            return self.getToken(TrinoParser.ARRAY_, 0)
        def LT_(self):
            return self.getToken(TrinoParser.LT_, 0)
        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)

        def GT_(self):
            return self.getToken(TrinoParser.GT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyArrayType" ):
                listener.enterLegacyArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyArrayType" ):
                listener.exitLegacyArrayType(self)


    class GenericTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(TrinoParser.TypeParameterContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericType" ):
                listener.enterGenericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericType" ):
                listener.exitGenericType(self)


    class DateTimeTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.base_ = None # Token
            self.precision = None # TypeParameterContext
            self.copyFrom(ctx)

        def TIMESTAMP_(self):
            return self.getToken(TrinoParser.TIMESTAMP_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def WITHOUT_(self):
            return self.getToken(TrinoParser.WITHOUT_, 0)
        def TIME_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.TIME_)
            else:
                return self.getToken(TrinoParser.TIME_, i)
        def ZONE_(self):
            return self.getToken(TrinoParser.ZONE_, 0)
        def typeParameter(self):
            return self.getTypedRuleContext(TrinoParser.TypeParameterContext,0)

        def WITH_(self):
            return self.getToken(TrinoParser.WITH_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)


    class LegacyMapTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TypeContext
            super().__init__(parser)
            self.keyType = None # TypeContext
            self.valueType = None # TypeContext
            self.copyFrom(ctx)

        def MAP_(self):
            return self.getToken(TrinoParser.MAP_, 0)
        def LT_(self):
            return self.getToken(TrinoParser.LT_, 0)
        def COMMA_(self):
            return self.getToken(TrinoParser.COMMA_, 0)
        def GT_(self):
            return self.getToken(TrinoParser.GT_, 0)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.TypeContext)
            else:
                return self.getTypedRuleContext(TrinoParser.TypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyMapType" ):
                listener.enterLegacyMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyMapType" ):
                listener.exitLegacyMapType(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.TypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_type, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.RowTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2616
                self.match(TrinoParser.ROW_)
                self.state = 2617
                self.match(TrinoParser.LPAREN_)
                self.state = 2618
                self.rowField()
                self.state = 2623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2619
                    self.match(TrinoParser.COMMA_)
                    self.state = 2620
                    self.rowField()
                    self.state = 2625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2626
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 2:
                localctx = TrinoParser.IntervalTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2628
                self.match(TrinoParser.INTERVAL_)
                self.state = 2629
                localctx.from_ = self.intervalField()
                self.state = 2632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 2630
                    self.match(TrinoParser.TO_)
                    self.state = 2631
                    localctx.to = self.intervalField()


                pass

            elif la_ == 3:
                localctx = TrinoParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2634
                localctx.base_ = self.match(TrinoParser.TIMESTAMP_)
                self.state = 2639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 2635
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2636
                    localctx.precision = self.typeParameter()
                    self.state = 2637
                    self.match(TrinoParser.RPAREN_)


                self.state = 2644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 2641
                    self.match(TrinoParser.WITHOUT_)
                    self.state = 2642
                    self.match(TrinoParser.TIME_)
                    self.state = 2643
                    self.match(TrinoParser.ZONE_)


                pass

            elif la_ == 4:
                localctx = TrinoParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2646
                localctx.base_ = self.match(TrinoParser.TIMESTAMP_)
                self.state = 2651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==313:
                    self.state = 2647
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2648
                    localctx.precision = self.typeParameter()
                    self.state = 2649
                    self.match(TrinoParser.RPAREN_)


                self.state = 2653
                self.match(TrinoParser.WITH_)
                self.state = 2654
                self.match(TrinoParser.TIME_)
                self.state = 2655
                self.match(TrinoParser.ZONE_)
                pass

            elif la_ == 5:
                localctx = TrinoParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2656
                localctx.base_ = self.match(TrinoParser.TIME_)
                self.state = 2661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 2657
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2658
                    localctx.precision = self.typeParameter()
                    self.state = 2659
                    self.match(TrinoParser.RPAREN_)


                self.state = 2666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self.match(TrinoParser.WITHOUT_)
                    self.state = 2664
                    self.match(TrinoParser.TIME_)
                    self.state = 2665
                    self.match(TrinoParser.ZONE_)


                pass

            elif la_ == 6:
                localctx = TrinoParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2668
                localctx.base_ = self.match(TrinoParser.TIME_)
                self.state = 2673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==313:
                    self.state = 2669
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2670
                    localctx.precision = self.typeParameter()
                    self.state = 2671
                    self.match(TrinoParser.RPAREN_)


                self.state = 2675
                self.match(TrinoParser.WITH_)
                self.state = 2676
                self.match(TrinoParser.TIME_)
                self.state = 2677
                self.match(TrinoParser.ZONE_)
                pass

            elif la_ == 7:
                localctx = TrinoParser.DoublePrecisionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2678
                self.match(TrinoParser.DOUBLE_)
                self.state = 2679
                self.match(TrinoParser.PRECISION_)
                pass

            elif la_ == 8:
                localctx = TrinoParser.LegacyArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2680
                self.match(TrinoParser.ARRAY_)
                self.state = 2681
                self.match(TrinoParser.LT_)
                self.state = 2682
                self.type_(0)
                self.state = 2683
                self.match(TrinoParser.GT_)
                pass

            elif la_ == 9:
                localctx = TrinoParser.LegacyMapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2685
                self.match(TrinoParser.MAP_)
                self.state = 2686
                self.match(TrinoParser.LT_)
                self.state = 2687
                localctx.keyType = self.type_(0)
                self.state = 2688
                self.match(TrinoParser.COMMA_)
                self.state = 2689
                localctx.valueType = self.type_(0)
                self.state = 2690
                self.match(TrinoParser.GT_)
                pass

            elif la_ == 10:
                localctx = TrinoParser.GenericTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2692
                self.identifier()
                self.state = 2704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2693
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2694
                    self.typeParameter()
                    self.state = 2699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2695
                        self.match(TrinoParser.COMMA_)
                        self.state = 2696
                        self.typeParameter()
                        self.state = 2701
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2702
                    self.match(TrinoParser.RPAREN_)


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TrinoParser.ArrayTypeContext(self, TrinoParser.TypeContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                    self.state = 2708
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2709
                    self.match(TrinoParser.ARRAY_)
                    self.state = 2713
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                    if la_ == 1:
                        self.state = 2710
                        self.match(TrinoParser.LSQUARE_)
                        self.state = 2711
                        self.match(TrinoParser.INTEGER_VALUE_)
                        self.state = 2712
                        self.match(TrinoParser.RSQUARE_)

             
                self.state = 2719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RowFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_rowField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowField" ):
                listener.enterRowField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowField" ):
                listener.exitRowField(self)




    def rowField(self):

        localctx = TrinoParser.RowFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_rowField)
        try:
            self.state = 2724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2720
                self.type_(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2721
                self.identifier()
                self.state = 2722
                self.type_(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE_(self):
            return self.getToken(TrinoParser.INTEGER_VALUE_, 0)

        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = TrinoParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_typeParameter)
        try:
            self.state = 2728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2726
                self.match(TrinoParser.INTEGER_VALUE_)
                pass
            elif token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 333, 334, 335, 336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2727
                self.type_(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN_(self):
            return self.getToken(TrinoParser.WHEN_, 0)

        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TrinoParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = TrinoParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2730
            self.match(TrinoParser.WHEN_)
            self.state = 2731
            localctx.condition = self.expression()
            self.state = 2732
            self.match(TrinoParser.THEN_)
            self.state = 2733
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(TrinoParser.FILTER_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def WHERE_(self):
            return self.getToken(TrinoParser.WHERE_, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(TrinoParser.BooleanExpressionContext,0)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter" ):
                listener.enterFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter" ):
                listener.exitFilter(self)




    def filter_(self):

        localctx = TrinoParser.FilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2735
            self.match(TrinoParser.FILTER_)
            self.state = 2736
            self.match(TrinoParser.LPAREN_)
            self.state = 2737
            self.match(TrinoParser.WHERE_)
            self.state = 2738
            self.booleanExpression(0)
            self.state = 2739
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_mergeCase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MergeInsertContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN_(self):
            return self.getToken(TrinoParser.WHEN_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)
        def MATCHED_(self):
            return self.getToken(TrinoParser.MATCHED_, 0)
        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)
        def INSERT_(self):
            return self.getToken(TrinoParser.INSERT_, 0)
        def VALUES_(self):
            return self.getToken(TrinoParser.VALUES_, 0)
        def LPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.LPAREN_)
            else:
                return self.getToken(TrinoParser.LPAREN_, i)
        def RPAREN_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.RPAREN_)
            else:
                return self.getToken(TrinoParser.RPAREN_, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def AND_(self):
            return self.getToken(TrinoParser.AND_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeInsert" ):
                listener.enterMergeInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeInsert" ):
                listener.exitMergeInsert(self)


    class MergeUpdateContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN_(self):
            return self.getToken(TrinoParser.WHEN_, 0)
        def MATCHED_(self):
            return self.getToken(TrinoParser.MATCHED_, 0)
        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)
        def UPDATE_(self):
            return self.getToken(TrinoParser.UPDATE_, 0)
        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def EQ_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.EQ_)
            else:
                return self.getToken(TrinoParser.EQ_, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ExpressionContext,i)

        def AND_(self):
            return self.getToken(TrinoParser.AND_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeUpdate" ):
                listener.enterMergeUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeUpdate" ):
                listener.exitMergeUpdate(self)


    class MergeDeleteContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self.copyFrom(ctx)

        def WHEN_(self):
            return self.getToken(TrinoParser.WHEN_, 0)
        def MATCHED_(self):
            return self.getToken(TrinoParser.MATCHED_, 0)
        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)
        def DELETE_(self):
            return self.getToken(TrinoParser.DELETE_, 0)
        def AND_(self):
            return self.getToken(TrinoParser.AND_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeDelete" ):
                listener.enterMergeDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeDelete" ):
                listener.exitMergeDelete(self)



    def mergeCase(self):

        localctx = TrinoParser.MergeCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_mergeCase)
        self._la = 0 # Token type
        try:
            self.state = 2805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.MergeUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2741
                self.match(TrinoParser.WHEN_)
                self.state = 2742
                self.match(TrinoParser.MATCHED_)
                self.state = 2745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 2743
                    self.match(TrinoParser.AND_)
                    self.state = 2744
                    localctx.condition = self.expression()


                self.state = 2747
                self.match(TrinoParser.THEN_)
                self.state = 2748
                self.match(TrinoParser.UPDATE_)
                self.state = 2749
                self.match(TrinoParser.SET_)
                self.state = 2750
                localctx._identifier = self.identifier()
                localctx.targets.append(localctx._identifier)
                self.state = 2751
                self.match(TrinoParser.EQ_)
                self.state = 2752
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2753
                    self.match(TrinoParser.COMMA_)
                    self.state = 2754
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2755
                    self.match(TrinoParser.EQ_)
                    self.state = 2756
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = TrinoParser.MergeDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2763
                self.match(TrinoParser.WHEN_)
                self.state = 2764
                self.match(TrinoParser.MATCHED_)
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 2765
                    self.match(TrinoParser.AND_)
                    self.state = 2766
                    localctx.condition = self.expression()


                self.state = 2769
                self.match(TrinoParser.THEN_)
                self.state = 2770
                self.match(TrinoParser.DELETE_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.MergeInsertContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2771
                self.match(TrinoParser.WHEN_)
                self.state = 2772
                self.match(TrinoParser.NOT_)
                self.state = 2773
                self.match(TrinoParser.MATCHED_)
                self.state = 2776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 2774
                    self.match(TrinoParser.AND_)
                    self.state = 2775
                    localctx.condition = self.expression()


                self.state = 2778
                self.match(TrinoParser.THEN_)
                self.state = 2779
                self.match(TrinoParser.INSERT_)
                self.state = 2791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==313:
                    self.state = 2780
                    self.match(TrinoParser.LPAREN_)
                    self.state = 2781
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==312:
                        self.state = 2782
                        self.match(TrinoParser.COMMA_)
                        self.state = 2783
                        localctx._identifier = self.identifier()
                        localctx.targets.append(localctx._identifier)
                        self.state = 2788
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2789
                    self.match(TrinoParser.RPAREN_)


                self.state = 2793
                self.match(TrinoParser.VALUES_)
                self.state = 2794
                self.match(TrinoParser.LPAREN_)
                self.state = 2795
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2796
                    self.match(TrinoParser.COMMA_)
                    self.state = 2797
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2803
                self.match(TrinoParser.RPAREN_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowName = None # IdentifierContext

        def OVER_(self):
            return self.getToken(TrinoParser.OVER_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(TrinoParser.WindowSpecificationContext,0)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)




    def over(self):

        localctx = TrinoParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2807
            self.match(TrinoParser.OVER_)
            self.state = 2813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 333, 334, 335, 336]:
                self.state = 2808
                localctx.windowName = self.identifier()
                pass
            elif token in [313]:
                self.state = 2809
                self.match(TrinoParser.LPAREN_)
                self.state = 2810
                self.windowSpecification()
                self.state = 2811
                self.match(TrinoParser.RPAREN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExtent(self):
            return self.getTypedRuleContext(TrinoParser.FrameExtentContext,0)


        def MEASURES_(self):
            return self.getToken(TrinoParser.MEASURES_, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.MeasureDefinitionContext,i)


        def AFTER_(self):
            return self.getToken(TrinoParser.AFTER_, 0)

        def MATCH_(self):
            return self.getToken(TrinoParser.MATCH_, 0)

        def skipTo(self):
            return self.getTypedRuleContext(TrinoParser.SkipToContext,0)


        def PATTERN_(self):
            return self.getToken(TrinoParser.PATTERN_, 0)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(TrinoParser.RowPatternContext,0)


        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def SUBSET_(self):
            return self.getToken(TrinoParser.SUBSET_, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.SubsetDefinitionContext,i)


        def DEFINE_(self):
            return self.getToken(TrinoParser.DEFINE_, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(TrinoParser.VariableDefinitionContext,i)


        def INITIAL_(self):
            return self.getToken(TrinoParser.INITIAL_, 0)

        def SEEK_(self):
            return self.getToken(TrinoParser.SEEK_, 0)

        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = TrinoParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_windowFrame)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2815
                self.match(TrinoParser.MEASURES_)
                self.state = 2816
                self.measureDefinition()
                self.state = 2821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2817
                    self.match(TrinoParser.COMMA_)
                    self.state = 2818
                    self.measureDefinition()
                    self.state = 2823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2826
            self.frameExtent()
            self.state = 2830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 2827
                self.match(TrinoParser.AFTER_)
                self.state = 2828
                self.match(TrinoParser.MATCH_)
                self.state = 2829
                self.skipTo()


            self.state = 2833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107 or _la==230:
                self.state = 2832
                _la = self._input.LA(1)
                if not(_la==107 or _la==230):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 2835
                self.match(TrinoParser.PATTERN_)
                self.state = 2836
                self.match(TrinoParser.LPAREN_)
                self.state = 2837
                self.rowPattern(0)
                self.state = 2838
                self.match(TrinoParser.RPAREN_)


            self.state = 2851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==241:
                self.state = 2842
                self.match(TrinoParser.SUBSET_)
                self.state = 2843
                self.subsetDefinition()
                self.state = 2848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2844
                    self.match(TrinoParser.COMMA_)
                    self.state = 2845
                    self.subsetDefinition()
                    self.state = 2850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 2853
                self.match(TrinoParser.DEFINE_)
                self.state = 2854
                self.variableDefinition()
                self.state = 2859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2855
                    self.match(TrinoParser.COMMA_)
                    self.state = 2856
                    self.variableDefinition()
                    self.state = 2861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start_ = None # FrameBoundContext
            self.end_ = None # FrameBoundContext

        def RANGE_(self):
            return self.getToken(TrinoParser.RANGE_, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(TrinoParser.FrameBoundContext,i)


        def ROWS_(self):
            return self.getToken(TrinoParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(TrinoParser.GROUPS_, 0)

        def BETWEEN_(self):
            return self.getToken(TrinoParser.BETWEEN_, 0)

        def AND_(self):
            return self.getToken(TrinoParser.AND_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)




    def frameExtent(self):

        localctx = TrinoParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_frameExtent)
        try:
            self.state = 2888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2864
                localctx.frameType = self.match(TrinoParser.RANGE_)
                self.state = 2865
                localctx.start_ = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2866
                localctx.frameType = self.match(TrinoParser.ROWS_)
                self.state = 2867
                localctx.start_ = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2868
                localctx.frameType = self.match(TrinoParser.GROUPS_)
                self.state = 2869
                localctx.start_ = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2870
                localctx.frameType = self.match(TrinoParser.RANGE_)
                self.state = 2871
                self.match(TrinoParser.BETWEEN_)
                self.state = 2872
                localctx.start_ = self.frameBound()
                self.state = 2873
                self.match(TrinoParser.AND_)
                self.state = 2874
                localctx.end_ = self.frameBound()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2876
                localctx.frameType = self.match(TrinoParser.ROWS_)
                self.state = 2877
                self.match(TrinoParser.BETWEEN_)
                self.state = 2878
                localctx.start_ = self.frameBound()
                self.state = 2879
                self.match(TrinoParser.AND_)
                self.state = 2880
                localctx.end_ = self.frameBound()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2882
                localctx.frameType = self.match(TrinoParser.GROUPS_)
                self.state = 2883
                self.match(TrinoParser.BETWEEN_)
                self.state = 2884
                localctx.start_ = self.frameBound()
                self.state = 2885
                self.match(TrinoParser.AND_)
                self.state = 2886
                localctx.end_ = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def PRECEDING_(self):
            return self.getToken(TrinoParser.PRECEDING_, 0)
        def FOLLOWING_(self):
            return self.getToken(TrinoParser.FOLLOWING_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED_(self):
            return self.getToken(TrinoParser.UNBOUNDED_, 0)
        def PRECEDING_(self):
            return self.getToken(TrinoParser.PRECEDING_, 0)
        def FOLLOWING_(self):
            return self.getToken(TrinoParser.FOLLOWING_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_(self):
            return self.getToken(TrinoParser.CURRENT_, 0)
        def ROW_(self):
            return self.getToken(TrinoParser.ROW_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)



    def frameBound(self):

        localctx = TrinoParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2890
                self.match(TrinoParser.UNBOUNDED_)
                self.state = 2891
                localctx.boundType = self.match(TrinoParser.PRECEDING_)
                pass

            elif la_ == 2:
                localctx = TrinoParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2892
                self.match(TrinoParser.UNBOUNDED_)
                self.state = 2893
                localctx.boundType = self.match(TrinoParser.FOLLOWING_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2894
                self.match(TrinoParser.CURRENT_)
                self.state = 2895
                self.match(TrinoParser.ROW_)
                pass

            elif la_ == 4:
                localctx = TrinoParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2896
                self.expression()
                self.state = 2897
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==85 or _la==195):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_rowPattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QuantifiedPrimaryContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def patternPrimary(self):
            return self.getTypedRuleContext(TrinoParser.PatternPrimaryContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(TrinoParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedPrimary" ):
                listener.enterQuantifiedPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedPrimary" ):
                listener.exitQuantifiedPrimary(self)


    class PatternConcatenationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternConcatenation" ):
                listener.enterPatternConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternConcatenation" ):
                listener.exitPatternConcatenation(self)


    class PatternAlternationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RowPatternContext,i)

        def VBAR_(self):
            return self.getToken(TrinoParser.VBAR_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternAlternation" ):
                listener.enterPatternAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternAlternation" ):
                listener.exitPatternAlternation(self)



    def rowPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TrinoParser.RowPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_rowPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = TrinoParser.QuantifiedPrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2902
            self.patternPrimary()
            self.state = 2904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2903
                self.patternQuantifier()


            self._ctx.stop = self._input.LT(-1)
            self.state = 2913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,386,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2911
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                    if la_ == 1:
                        localctx = TrinoParser.PatternConcatenationContext(self, TrinoParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2906
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2907
                        self.rowPattern(3)
                        pass

                    elif la_ == 2:
                        localctx = TrinoParser.PatternAlternationContext(self, TrinoParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2908
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2909
                        self.match(TrinoParser.VBAR_)
                        self.state = 2910
                        self.rowPattern(2)
                        pass

             
                self.state = 2915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,386,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_patternPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PatternPermutationContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERMUTE_(self):
            return self.getToken(TrinoParser.PERMUTE_, 0)
        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RowPatternContext,i)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)
        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPermutation" ):
                listener.enterPatternPermutation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPermutation" ):
                listener.exitPatternPermutation(self)


    class PartitionEndAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_(self):
            return self.getToken(TrinoParser.DOLLAR_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionEndAnchor" ):
                listener.enterPartitionEndAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionEndAnchor" ):
                listener.exitPartitionEndAnchor(self)


    class PatternVariableContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternVariable" ):
                listener.enterPatternVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternVariable" ):
                listener.exitPatternVariable(self)


    class ExcludedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LCURLYHYPHEN_(self):
            return self.getToken(TrinoParser.LCURLYHYPHEN_, 0)
        def rowPattern(self):
            return self.getTypedRuleContext(TrinoParser.RowPatternContext,0)

        def RCURLYHYPHEN_(self):
            return self.getToken(TrinoParser.RCURLYHYPHEN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcludedPattern" ):
                listener.enterExcludedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcludedPattern" ):
                listener.exitExcludedPattern(self)


    class PartitionStartAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CARET_(self):
            return self.getToken(TrinoParser.CARET_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionStartAnchor" ):
                listener.enterPartitionStartAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionStartAnchor" ):
                listener.exitPartitionStartAnchor(self)


    class EmptyPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyPattern" ):
                listener.enterEmptyPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyPattern" ):
                listener.exitEmptyPattern(self)


    class GroupedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)
        def rowPattern(self):
            return self.getTypedRuleContext(TrinoParser.RowPatternContext,0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedPattern" ):
                listener.enterGroupedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedPattern" ):
                listener.exitGroupedPattern(self)



    def patternPrimary(self):

        localctx = TrinoParser.PatternPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_patternPrimary)
        self._la = 0 # Token type
        try:
            self.state = 2941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.PatternVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2916
                self.identifier()
                pass

            elif la_ == 2:
                localctx = TrinoParser.EmptyPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2917
                self.match(TrinoParser.LPAREN_)
                self.state = 2918
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.PatternPermutationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2919
                self.match(TrinoParser.PERMUTE_)
                self.state = 2920
                self.match(TrinoParser.LPAREN_)
                self.state = 2921
                self.rowPattern(0)
                self.state = 2926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 2922
                    self.match(TrinoParser.COMMA_)
                    self.state = 2923
                    self.rowPattern(0)
                    self.state = 2928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2929
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 4:
                localctx = TrinoParser.GroupedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2931
                self.match(TrinoParser.LPAREN_)
                self.state = 2932
                self.rowPattern(0)
                self.state = 2933
                self.match(TrinoParser.RPAREN_)
                pass

            elif la_ == 5:
                localctx = TrinoParser.PartitionStartAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2935
                self.match(TrinoParser.CARET_)
                pass

            elif la_ == 6:
                localctx = TrinoParser.PartitionEndAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2936
                self.match(TrinoParser.DOLLAR_)
                pass

            elif la_ == 7:
                localctx = TrinoParser.ExcludedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2937
                self.match(TrinoParser.LCURLYHYPHEN_)
                self.state = 2938
                self.rowPattern(0)
                self.state = 2939
                self.match(TrinoParser.RCURLYHYPHEN_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_patternQuantifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ZeroOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def ASTERISK_(self):
            return self.getToken(TrinoParser.ASTERISK_, 0)
        def QUESTION_MARK_(self):
            return self.getToken(TrinoParser.QUESTION_MARK_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrMoreQuantifier" ):
                listener.enterZeroOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrMoreQuantifier" ):
                listener.exitZeroOrMoreQuantifier(self)


    class OneOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def PLUS_(self):
            return self.getToken(TrinoParser.PLUS_, 0)
        def QUESTION_MARK_(self):
            return self.getToken(TrinoParser.QUESTION_MARK_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneOrMoreQuantifier" ):
                listener.enterOneOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneOrMoreQuantifier" ):
                listener.exitOneOrMoreQuantifier(self)


    class ZeroOrOneQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def QUESTION_MARK_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.QUESTION_MARK_)
            else:
                return self.getToken(TrinoParser.QUESTION_MARK_, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrOneQuantifier" ):
                listener.enterZeroOrOneQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrOneQuantifier" ):
                listener.exitZeroOrOneQuantifier(self)


    class RangeQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PatternQuantifierContext
            super().__init__(parser)
            self.exactly = None # Token
            self.reluctant = None # Token
            self.atLeast = None # Token
            self.atMost = None # Token
            self.copyFrom(ctx)

        def LCURLY_(self):
            return self.getToken(TrinoParser.LCURLY_, 0)
        def RCURLY_(self):
            return self.getToken(TrinoParser.RCURLY_, 0)
        def INTEGER_VALUE_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.INTEGER_VALUE_)
            else:
                return self.getToken(TrinoParser.INTEGER_VALUE_, i)
        def QUESTION_MARK_(self):
            return self.getToken(TrinoParser.QUESTION_MARK_, 0)
        def COMMA_(self):
            return self.getToken(TrinoParser.COMMA_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeQuantifier" ):
                listener.enterRangeQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeQuantifier" ):
                listener.exitRangeQuantifier(self)



    def patternQuantifier(self):

        localctx = TrinoParser.PatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_patternQuantifier)
        self._la = 0 # Token type
        try:
            self.state = 2973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.ZeroOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2943
                self.match(TrinoParser.ASTERISK_)
                self.state = 2945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                if la_ == 1:
                    self.state = 2944
                    localctx.reluctant = self.match(TrinoParser.QUESTION_MARK_)


                pass

            elif la_ == 2:
                localctx = TrinoParser.OneOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2947
                self.match(TrinoParser.PLUS_)
                self.state = 2949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 2948
                    localctx.reluctant = self.match(TrinoParser.QUESTION_MARK_)


                pass

            elif la_ == 3:
                localctx = TrinoParser.ZeroOrOneQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2951
                self.match(TrinoParser.QUESTION_MARK_)
                self.state = 2953
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
                if la_ == 1:
                    self.state = 2952
                    localctx.reluctant = self.match(TrinoParser.QUESTION_MARK_)


                pass

            elif la_ == 4:
                localctx = TrinoParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2955
                self.match(TrinoParser.LCURLY_)
                self.state = 2956
                localctx.exactly = self.match(TrinoParser.INTEGER_VALUE_)
                self.state = 2957
                self.match(TrinoParser.RCURLY_)
                self.state = 2959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 2958
                    localctx.reluctant = self.match(TrinoParser.QUESTION_MARK_)


                pass

            elif la_ == 5:
                localctx = TrinoParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2961
                self.match(TrinoParser.LCURLY_)
                self.state = 2963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 2962
                    localctx.atLeast = self.match(TrinoParser.INTEGER_VALUE_)


                self.state = 2965
                self.match(TrinoParser.COMMA_)
                self.state = 2967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 2966
                    localctx.atMost = self.match(TrinoParser.INTEGER_VALUE_)


                self.state = 2969
                self.match(TrinoParser.RCURLY_)
                self.state = 2971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 2970
                    localctx.reluctant = self.match(TrinoParser.QUESTION_MARK_)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def EQ_(self):
            return self.getToken(TrinoParser.EQ_, 0)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_updateAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateAssignment" ):
                listener.enterUpdateAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateAssignment" ):
                listener.exitUpdateAssignment(self)




    def updateAssignment(self):

        localctx = TrinoParser.UpdateAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_updateAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            self.identifier()
            self.state = 2976
            self.match(TrinoParser.EQ_)
            self.state = 2977
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT_(self):
            return self.getToken(TrinoParser.FORMAT_, 0)
        def TEXT_(self):
            return self.getToken(TrinoParser.TEXT_, 0)
        def GRAPHVIZ_(self):
            return self.getToken(TrinoParser.GRAPHVIZ_, 0)
        def JSON_(self):
            return self.getToken(TrinoParser.JSON_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE_(self):
            return self.getToken(TrinoParser.TYPE_, 0)
        def LOGICAL_(self):
            return self.getToken(TrinoParser.LOGICAL_, 0)
        def DISTRIBUTED_(self):
            return self.getToken(TrinoParser.DISTRIBUTED_, 0)
        def VALIDATE_(self):
            return self.getToken(TrinoParser.VALIDATE_, 0)
        def IO_(self):
            return self.getToken(TrinoParser.IO_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)



    def explainOption(self):

        localctx = TrinoParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 2983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                localctx = TrinoParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2979
                self.match(TrinoParser.FORMAT_)
                self.state = 2980
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==96 or _la==120 or _la==247):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [260]:
                localctx = TrinoParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2981
                self.match(TrinoParser.TYPE_)
                self.state = 2982
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==63 or _la==115 or _la==143 or _la==278):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ_(self):
            return self.getToken(TrinoParser.READ_, 0)
        def ONLY_(self):
            return self.getToken(TrinoParser.ONLY_, 0)
        def WRITE_(self):
            return self.getToken(TrinoParser.WRITE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION_(self):
            return self.getToken(TrinoParser.ISOLATION_, 0)
        def LEVEL_(self):
            return self.getToken(TrinoParser.LEVEL_, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(TrinoParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)



    def transactionMode(self):

        localctx = TrinoParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 2990
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                localctx = TrinoParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2985
                self.match(TrinoParser.ISOLATION_)
                self.state = 2986
                self.match(TrinoParser.LEVEL_)
                self.state = 2987
                self.levelOfIsolation()
                pass
            elif token in [203]:
                localctx = TrinoParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2988
                self.match(TrinoParser.READ_)
                self.state = 2989
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==175 or _la==293):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ_(self):
            return self.getToken(TrinoParser.READ_, 0)
        def UNCOMMITTED_(self):
            return self.getToken(TrinoParser.UNCOMMITTED_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE_(self):
            return self.getToken(TrinoParser.SERIALIZABLE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ_(self):
            return self.getToken(TrinoParser.READ_, 0)
        def COMMITTED_(self):
            return self.getToken(TrinoParser.COMMITTED_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE_(self):
            return self.getToken(TrinoParser.REPEATABLE_, 0)
        def READ_(self):
            return self.getToken(TrinoParser.READ_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)



    def levelOfIsolation(self):

        localctx = TrinoParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_levelOfIsolation)
        try:
            self.state = 2999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2992
                self.match(TrinoParser.READ_)
                self.state = 2993
                self.match(TrinoParser.UNCOMMITTED_)
                pass

            elif la_ == 2:
                localctx = TrinoParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2994
                self.match(TrinoParser.READ_)
                self.state = 2995
                self.match(TrinoParser.COMMITTED_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2996
                self.match(TrinoParser.REPEATABLE_)
                self.state = 2997
                self.match(TrinoParser.READ_)
                pass

            elif la_ == 4:
                localctx = TrinoParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2998
                self.match(TrinoParser.SERIALIZABLE_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def RDOUBLEARROW_(self):
            return self.getToken(TrinoParser.RDOUBLEARROW_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)



    def callArgument(self):

        localctx = TrinoParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_callArgument)
        try:
            self.state = 3006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3001
                self.expression()
                pass

            elif la_ == 2:
                localctx = TrinoParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3002
                self.identifier()
                self.state = 3003
                self.match(TrinoParser.RDOUBLEARROW_)
                self.state = 3004
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_pathElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)

        def DOT_(self):
            return self.getToken(TrinoParser.DOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedArgument" ):
                listener.enterQualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedArgument" ):
                listener.exitQualifiedArgument(self)


    class UnqualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedArgument" ):
                listener.enterUnqualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedArgument" ):
                listener.exitUnqualifiedArgument(self)



    def pathElement(self):

        localctx = TrinoParser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pathElement)
        try:
            self.state = 3013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.QualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3008
                self.identifier()
                self.state = 3009
                self.match(TrinoParser.DOT_)
                self.state = 3010
                self.identifier()
                pass

            elif la_ == 2:
                localctx = TrinoParser.UnqualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3012
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.PathElementContext)
            else:
                return self.getTypedRuleContext(TrinoParser.PathElementContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_pathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSpecification" ):
                listener.enterPathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSpecification" ):
                listener.exitPathSpecification(self)




    def pathSpecification(self):

        localctx = TrinoParser.PathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_pathSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3015
            self.pathElement()
            self.state = 3020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 3016
                self.match(TrinoParser.COMMA_)
                self.state = 3017
                self.pathElement()
                self.state = 3022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_(self):
            return self.getToken(TrinoParser.FUNCTION_, 0)

        def functionDeclaration(self):
            return self.getTypedRuleContext(TrinoParser.FunctionDeclarationContext,0)


        def returnsClause(self):
            return self.getTypedRuleContext(TrinoParser.ReturnsClauseContext,0)


        def controlStatement(self):
            return self.getTypedRuleContext(TrinoParser.ControlStatementContext,0)


        def routineCharacteristic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.RoutineCharacteristicContext)
            else:
                return self.getTypedRuleContext(TrinoParser.RoutineCharacteristicContext,i)


        def getRuleIndex(self):
            return TrinoParser.RULE_functionSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecification" ):
                listener.enterFunctionSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecification" ):
                listener.exitFunctionSpecification(self)




    def functionSpecification(self):

        localctx = TrinoParser.FunctionSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_functionSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            self.match(TrinoParser.FUNCTION_)
            self.state = 3024
            self.functionDeclaration()
            self.state = 3025
            self.returnsClause()
            self.state = 3029
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,403,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3026
                    self.routineCharacteristic() 
                self.state = 3031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

            self.state = 3032
            self.controlStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(TrinoParser.QualifiedNameContext,0)


        def LPAREN_(self):
            return self.getToken(TrinoParser.LPAREN_, 0)

        def RPAREN_(self):
            return self.getToken(TrinoParser.RPAREN_, 0)

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ParameterDeclarationContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = TrinoParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3034
            self.qualifiedName()
            self.state = 3035
            self.match(TrinoParser.LPAREN_)
            self.state = 3044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                self.state = 3036
                self.parameterDeclaration()
                self.state = 3041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==312:
                    self.state = 3037
                    self.match(TrinoParser.COMMA_)
                    self.state = 3038
                    self.parameterDeclaration()
                    self.state = 3043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3046
            self.match(TrinoParser.RPAREN_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = TrinoParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_parameterDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 3048
                self.identifier()


            self.state = 3051
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS_(self):
            return self.getToken(TrinoParser.RETURNS_, 0)

        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_returnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnsClause" ):
                listener.enterReturnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnsClause" ):
                listener.exitReturnsClause(self)




    def returnsClause(self):

        localctx = TrinoParser.ReturnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_returnsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.match(TrinoParser.RETURNS_)
            self.state = 3054
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCharacteristicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_routineCharacteristic

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReturnsNullOnNullInputCharacteristicContext(RoutineCharacteristicContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RoutineCharacteristicContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURNS_(self):
            return self.getToken(TrinoParser.RETURNS_, 0)
        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.NULL_)
            else:
                return self.getToken(TrinoParser.NULL_, i)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def INPUT_(self):
            return self.getToken(TrinoParser.INPUT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnsNullOnNullInputCharacteristic" ):
                listener.enterReturnsNullOnNullInputCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnsNullOnNullInputCharacteristic" ):
                listener.exitReturnsNullOnNullInputCharacteristic(self)


    class SecurityCharacteristicContext(RoutineCharacteristicContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RoutineCharacteristicContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SECURITY_(self):
            return self.getToken(TrinoParser.SECURITY_, 0)
        def DEFINER_(self):
            return self.getToken(TrinoParser.DEFINER_, 0)
        def INVOKER_(self):
            return self.getToken(TrinoParser.INVOKER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurityCharacteristic" ):
                listener.enterSecurityCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurityCharacteristic" ):
                listener.exitSecurityCharacteristic(self)


    class CalledOnNullInputCharacteristicContext(RoutineCharacteristicContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RoutineCharacteristicContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALLED_(self):
            return self.getToken(TrinoParser.CALLED_, 0)
        def ON_(self):
            return self.getToken(TrinoParser.ON_, 0)
        def NULL_(self):
            return self.getToken(TrinoParser.NULL_, 0)
        def INPUT_(self):
            return self.getToken(TrinoParser.INPUT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalledOnNullInputCharacteristic" ):
                listener.enterCalledOnNullInputCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalledOnNullInputCharacteristic" ):
                listener.exitCalledOnNullInputCharacteristic(self)


    class CommentCharacteristicContext(RoutineCharacteristicContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RoutineCharacteristicContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)
        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentCharacteristic" ):
                listener.enterCommentCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentCharacteristic" ):
                listener.exitCommentCharacteristic(self)


    class LanguageCharacteristicContext(RoutineCharacteristicContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RoutineCharacteristicContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE_(self):
            return self.getToken(TrinoParser.LANGUAGE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguageCharacteristic" ):
                listener.enterLanguageCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguageCharacteristic" ):
                listener.exitLanguageCharacteristic(self)


    class DeterministicCharacteristicContext(RoutineCharacteristicContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.RoutineCharacteristicContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC_(self):
            return self.getToken(TrinoParser.DETERMINISTIC_, 0)
        def NOT_(self):
            return self.getToken(TrinoParser.NOT_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeterministicCharacteristic" ):
                listener.enterDeterministicCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeterministicCharacteristic" ):
                listener.exitDeterministicCharacteristic(self)



    def routineCharacteristic(self):

        localctx = TrinoParser.RoutineCharacteristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_routineCharacteristic)
        self._la = 0 # Token type
        try:
            self.state = 3075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                localctx = TrinoParser.LanguageCharacteristicContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3056
                self.match(TrinoParser.LANGUAGE_)
                self.state = 3057
                self.identifier()
                pass
            elif token in [61, 165]:
                localctx = TrinoParser.DeterministicCharacteristicContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==165:
                    self.state = 3058
                    self.match(TrinoParser.NOT_)


                self.state = 3061
                self.match(TrinoParser.DETERMINISTIC_)
                pass
            elif token in [215]:
                localctx = TrinoParser.ReturnsNullOnNullInputCharacteristicContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3062
                self.match(TrinoParser.RETURNS_)
                self.state = 3063
                self.match(TrinoParser.NULL_)
                self.state = 3064
                self.match(TrinoParser.ON_)
                self.state = 3065
                self.match(TrinoParser.NULL_)
                self.state = 3066
                self.match(TrinoParser.INPUT_)
                pass
            elif token in [21]:
                localctx = TrinoParser.CalledOnNullInputCharacteristicContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3067
                self.match(TrinoParser.CALLED_)
                self.state = 3068
                self.match(TrinoParser.ON_)
                self.state = 3069
                self.match(TrinoParser.NULL_)
                self.state = 3070
                self.match(TrinoParser.INPUT_)
                pass
            elif token in [229]:
                localctx = TrinoParser.SecurityCharacteristicContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3071
                self.match(TrinoParser.SECURITY_)
                self.state = 3072
                _la = self._input.LA(1)
                if not(_la==55 or _la==114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [29]:
                localctx = TrinoParser.CommentCharacteristicContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3073
                self.match(TrinoParser.COMMENT_)
                self.state = 3074
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_controlStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WhileStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def WHILE_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.WHILE_)
            else:
                return self.getToken(TrinoParser.WHILE_, i)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def DO_(self):
            return self.getToken(TrinoParser.DO_, 0)
        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)

        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def COLON_(self):
            return self.getToken(TrinoParser.COLON_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class SimpleCaseStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.CASE_)
            else:
                return self.getToken(TrinoParser.CASE_, i)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def caseStatementWhenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.CaseStatementWhenClauseContext)
            else:
                return self.getTypedRuleContext(TrinoParser.CaseStatementWhenClauseContext,i)

        def elseClause(self):
            return self.getTypedRuleContext(TrinoParser.ElseClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStatement" ):
                listener.enterSimpleCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStatement" ):
                listener.exitSimpleCaseStatement(self)


    class RepeatStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def REPEAT_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.REPEAT_)
            else:
                return self.getToken(TrinoParser.REPEAT_, i)
        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)

        def UNTIL_(self):
            return self.getToken(TrinoParser.UNTIL_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def COLON_(self):
            return self.getToken(TrinoParser.COLON_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)


    class AssignmentStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)

        def EQ_(self):
            return self.getToken(TrinoParser.EQ_, 0)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)


    class LeaveStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEAVE_(self):
            return self.getToken(TrinoParser.LEAVE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)


    class CompoundStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN_(self):
            return self.getToken(TrinoParser.BEGIN_, 0)
        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(TrinoParser.VariableDeclarationContext,i)

        def SEMICOLON_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.SEMICOLON_)
            else:
                return self.getToken(TrinoParser.SEMICOLON_, i)
        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)


    class IterateStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITERATE_(self):
            return self.getToken(TrinoParser.ITERATE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)


    class LoopStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def LOOP_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.LOOP_)
            else:
                return self.getToken(TrinoParser.LOOP_, i)
        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)

        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def COLON_(self):
            return self.getToken(TrinoParser.COLON_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)


    class ReturnStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN_(self):
            return self.getToken(TrinoParser.RETURN_, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)


    class IfStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.IF_)
            else:
                return self.getToken(TrinoParser.IF_, i)
        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)

        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)
        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)

        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def elseIfClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ElseIfClauseContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ElseIfClauseContext,i)

        def elseClause(self):
            return self.getTypedRuleContext(TrinoParser.ElseClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)


    class SearchedCaseStatementContext(ControlStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.ControlStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.CASE_)
            else:
                return self.getToken(TrinoParser.CASE_, i)
        def END_(self):
            return self.getToken(TrinoParser.END_, 0)
        def caseStatementWhenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.CaseStatementWhenClauseContext)
            else:
                return self.getTypedRuleContext(TrinoParser.CaseStatementWhenClauseContext,i)

        def elseClause(self):
            return self.getTypedRuleContext(TrinoParser.ElseClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCaseStatement" ):
                listener.enterSearchedCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCaseStatement" ):
                listener.exitSearchedCaseStatement(self)



    def controlStatement(self):

        localctx = TrinoParser.ControlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_controlStatement)
        self._la = 0 # Token type
        try:
            self.state = 3176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3077
                self.match(TrinoParser.RETURN_)
                self.state = 3078
                self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = TrinoParser.AssignmentStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3079
                self.match(TrinoParser.SET_)
                self.state = 3080
                self.identifier()
                self.state = 3081
                self.match(TrinoParser.EQ_)
                self.state = 3082
                self.expression()
                pass

            elif la_ == 3:
                localctx = TrinoParser.SimpleCaseStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3084
                self.match(TrinoParser.CASE_)
                self.state = 3085
                self.expression()
                self.state = 3087 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3086
                    self.caseStatementWhenClause()
                    self.state = 3089 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==284):
                        break

                self.state = 3092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 3091
                    self.elseClause()


                self.state = 3094
                self.match(TrinoParser.END_)
                self.state = 3095
                self.match(TrinoParser.CASE_)
                pass

            elif la_ == 4:
                localctx = TrinoParser.SearchedCaseStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3097
                self.match(TrinoParser.CASE_)
                self.state = 3099 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3098
                    self.caseStatementWhenClause()
                    self.state = 3101 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==284):
                        break

                self.state = 3104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 3103
                    self.elseClause()


                self.state = 3106
                self.match(TrinoParser.END_)
                self.state = 3107
                self.match(TrinoParser.CASE_)
                pass

            elif la_ == 5:
                localctx = TrinoParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3109
                self.match(TrinoParser.IF_)
                self.state = 3110
                self.expression()
                self.state = 3111
                self.match(TrinoParser.THEN_)
                self.state = 3112
                self.sqlStatementList()
                self.state = 3116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==69:
                    self.state = 3113
                    self.elseIfClause()
                    self.state = 3118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 3119
                    self.elseClause()


                self.state = 3122
                self.match(TrinoParser.END_)
                self.state = 3123
                self.match(TrinoParser.IF_)
                pass

            elif la_ == 6:
                localctx = TrinoParser.IterateStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3125
                self.match(TrinoParser.ITERATE_)
                self.state = 3126
                self.identifier()
                pass

            elif la_ == 7:
                localctx = TrinoParser.LeaveStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3127
                self.match(TrinoParser.LEAVE_)
                self.state = 3128
                self.identifier()
                pass

            elif la_ == 8:
                localctx = TrinoParser.CompoundStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3129
                self.match(TrinoParser.BEGIN_)
                self.state = 3135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3130
                        self.variableDeclaration()
                        self.state = 3131
                        self.match(TrinoParser.SEMICOLON_) 
                    self.state = 3137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

                self.state = 3139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029691214146) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 15) != 0):
                    self.state = 3138
                    self.sqlStatementList()


                self.state = 3141
                self.match(TrinoParser.END_)
                pass

            elif la_ == 9:
                localctx = TrinoParser.LoopStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 3142
                    localctx.label = self.identifier()
                    self.state = 3143
                    self.match(TrinoParser.COLON_)


                self.state = 3147
                self.match(TrinoParser.LOOP_)
                self.state = 3148
                self.sqlStatementList()
                self.state = 3149
                self.match(TrinoParser.END_)
                self.state = 3150
                self.match(TrinoParser.LOOP_)
                pass

            elif la_ == 10:
                localctx = TrinoParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 3155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 3152
                    localctx.label = self.identifier()
                    self.state = 3153
                    self.match(TrinoParser.COLON_)


                self.state = 3157
                self.match(TrinoParser.WHILE_)
                self.state = 3158
                self.expression()
                self.state = 3159
                self.match(TrinoParser.DO_)
                self.state = 3160
                self.sqlStatementList()
                self.state = 3161
                self.match(TrinoParser.END_)
                self.state = 3162
                self.match(TrinoParser.WHILE_)
                pass

            elif la_ == 11:
                localctx = TrinoParser.RepeatStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 3167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                if la_ == 1:
                    self.state = 3164
                    localctx.label = self.identifier()
                    self.state = 3165
                    self.match(TrinoParser.COLON_)


                self.state = 3169
                self.match(TrinoParser.REPEAT_)
                self.state = 3170
                self.sqlStatementList()
                self.state = 3171
                self.match(TrinoParser.UNTIL_)
                self.state = 3172
                self.expression()
                self.state = 3173
                self.match(TrinoParser.END_)
                self.state = 3174
                self.match(TrinoParser.REPEAT_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementWhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_(self):
            return self.getToken(TrinoParser.WHEN_, 0)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)

        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_caseStatementWhenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatementWhenClause" ):
                listener.enterCaseStatementWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatementWhenClause" ):
                listener.exitCaseStatementWhenClause(self)




    def caseStatementWhenClause(self):

        localctx = TrinoParser.CaseStatementWhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_caseStatementWhenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3178
            self.match(TrinoParser.WHEN_)
            self.state = 3179
            self.expression()
            self.state = 3180
            self.match(TrinoParser.THEN_)
            self.state = 3181
            self.sqlStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF_(self):
            return self.getToken(TrinoParser.ELSEIF_, 0)

        def expression(self):
            return self.getTypedRuleContext(TrinoParser.ExpressionContext,0)


        def THEN_(self):
            return self.getToken(TrinoParser.THEN_, 0)

        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_elseIfClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfClause" ):
                listener.enterElseIfClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfClause" ):
                listener.exitElseIfClause(self)




    def elseIfClause(self):

        localctx = TrinoParser.ElseIfClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_elseIfClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3183
            self.match(TrinoParser.ELSEIF_)
            self.state = 3184
            self.expression()
            self.state = 3185
            self.match(TrinoParser.THEN_)
            self.state = 3186
            self.sqlStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_(self):
            return self.getToken(TrinoParser.ELSE_, 0)

        def sqlStatementList(self):
            return self.getTypedRuleContext(TrinoParser.SqlStatementListContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_elseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseClause" ):
                listener.enterElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseClause" ):
                listener.exitElseClause(self)




    def elseClause(self):

        localctx = TrinoParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_elseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self.match(TrinoParser.ELSE_)
            self.state = 3189
            self.sqlStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_(self):
            return self.getToken(TrinoParser.DECLARE_, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def type_(self):
            return self.getTypedRuleContext(TrinoParser.TypeContext,0)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def DEFAULT_(self):
            return self.getToken(TrinoParser.DEFAULT_, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = TrinoParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3191
            self.match(TrinoParser.DECLARE_)
            self.state = 3192
            self.identifier()
            self.state = 3197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 3193
                self.match(TrinoParser.COMMA_)
                self.state = 3194
                self.identifier()
                self.state = 3199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3200
            self.type_(0)
            self.state = 3203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 3201
                self.match(TrinoParser.DEFAULT_)
                self.state = 3202
                self.valueExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.ControlStatementContext)
            else:
                return self.getTypedRuleContext(TrinoParser.ControlStatementContext,i)


        def SEMICOLON_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.SEMICOLON_)
            else:
                return self.getToken(TrinoParser.SEMICOLON_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_sqlStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatementList" ):
                listener.enterSqlStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatementList" ):
                listener.exitSqlStatementList(self)




    def sqlStatementList(self):

        localctx = TrinoParser.SqlStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_sqlStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3205
                    self.controlStatement()
                    self.state = 3206
                    self.match(TrinoParser.SEMICOLON_)

                else:
                    raise NoViableAltException(self)
                self.state = 3210 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(TrinoParser.CREATE_, 0)

        def SELECT_(self):
            return self.getToken(TrinoParser.SELECT_, 0)

        def DELETE_(self):
            return self.getToken(TrinoParser.DELETE_, 0)

        def INSERT_(self):
            return self.getToken(TrinoParser.INSERT_, 0)

        def UPDATE_(self):
            return self.getToken(TrinoParser.UPDATE_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = TrinoParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            _la = self._input.LA(1)
            if not(_la==36 or _la==56 or _la==110 or _la==231 or _la==271):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.DOT_)
            else:
                return self.getToken(TrinoParser.DOT_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = TrinoParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.identifier()
            self.state = 3219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,424,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3215
                    self.match(TrinoParser.DOT_)
                    self.state = 3216
                    self.identifier() 
                self.state = 3221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,424,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPeriodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.end = None # ValueExpressionContext

        def FOR_(self):
            return self.getToken(TrinoParser.FOR_, 0)

        def rangeType(self):
            return self.getTypedRuleContext(TrinoParser.RangeTypeContext,0)


        def AS_(self):
            return self.getToken(TrinoParser.AS_, 0)

        def OF_(self):
            return self.getToken(TrinoParser.OF_, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(TrinoParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return TrinoParser.RULE_queryPeriod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPeriod" ):
                listener.enterQueryPeriod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPeriod" ):
                listener.exitQueryPeriod(self)




    def queryPeriod(self):

        localctx = TrinoParser.QueryPeriodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_queryPeriod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3222
            self.match(TrinoParser.FOR_)
            self.state = 3223
            self.rangeType()
            self.state = 3224
            self.match(TrinoParser.AS_)
            self.state = 3225
            self.match(TrinoParser.OF_)
            self.state = 3226
            localctx.end = self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_(self):
            return self.getToken(TrinoParser.TIMESTAMP_, 0)

        def VERSION_(self):
            return self.getToken(TrinoParser.VERSION_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_rangeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeType" ):
                listener.enterRangeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeType" ):
                listener.exitRangeType(self)




    def rangeType(self):

        localctx = TrinoParser.RangeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_rangeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3228
            _la = self._input.LA(1)
            if not(_la==252 or _la==282):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_grantor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurrentUserGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER_(self):
            return self.getToken(TrinoParser.CURRENT_USER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUserGrantor" ):
                listener.enterCurrentUserGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUserGrantor" ):
                listener.exitCurrentUserGrantor(self)


    class SpecifiedPrincipalContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def principal(self):
            return self.getTypedRuleContext(TrinoParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifiedPrincipal" ):
                listener.enterSpecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifiedPrincipal" ):
                listener.exitSpecifiedPrincipal(self)


    class CurrentRoleGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_ROLE_(self):
            return self.getToken(TrinoParser.CURRENT_ROLE_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRoleGrantor" ):
                listener.enterCurrentRoleGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRoleGrantor" ):
                listener.exitCurrentRoleGrantor(self)



    def grantor(self):

        localctx = TrinoParser.GrantorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_grantor)
        try:
            self.state = 3233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 333, 334, 335, 336]:
                localctx = TrinoParser.SpecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3230
                self.principal()
                pass
            elif token in [47]:
                localctx = TrinoParser.CurrentUserGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3231
                self.match(TrinoParser.CURRENT_USER_)
                pass
            elif token in [43]:
                localctx = TrinoParser.CurrentRoleGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3232
                self.match(TrinoParser.CURRENT_ROLE_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_principal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnspecifiedPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnspecifiedPrincipal" ):
                listener.enterUnspecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnspecifiedPrincipal" ):
                listener.exitUnspecifiedPrincipal(self)


    class UserPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER_(self):
            return self.getToken(TrinoParser.USER_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPrincipal" ):
                listener.enterUserPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPrincipal" ):
                listener.exitUserPrincipal(self)


    class RolePrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLE_(self):
            return self.getToken(TrinoParser.ROLE_, 0)
        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolePrincipal" ):
                listener.enterRolePrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolePrincipal" ):
                listener.exitRolePrincipal(self)



    def principal(self):

        localctx = TrinoParser.PrincipalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_principal)
        try:
            self.state = 3240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.UnspecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3235
                self.identifier()
                pass

            elif la_ == 2:
                localctx = TrinoParser.UserPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3236
                self.match(TrinoParser.USER_)
                self.state = 3237
                self.identifier()
                pass

            elif la_ == 3:
                localctx = TrinoParser.RolePrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3238
                self.match(TrinoParser.ROLE_)
                self.state = 3239
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TrinoParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TrinoParser.IdentifierContext,i)


        def COMMA_(self, i:int=None):
            if i is None:
                return self.getTokens(TrinoParser.COMMA_)
            else:
                return self.getToken(TrinoParser.COMMA_, i)

        def getRuleIndex(self):
            return TrinoParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)




    def roles(self):

        localctx = TrinoParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3242
            self.identifier()
            self.state = 3247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 3243
                self.match(TrinoParser.COMMA_)
                self.state = 3244
                self.identifier()
                self.state = 3249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER_(self):
            return self.getToken(TrinoParser.BACKQUOTED_IDENTIFIER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)


    class QuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER_(self):
            return self.getToken(TrinoParser.QUOTED_IDENTIFIER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER_(self):
            return self.getToken(TrinoParser.DIGIT_IDENTIFIER_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER_(self):
            return self.getToken(TrinoParser.IDENTIFIER_, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(TrinoParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def identifier(self):

        localctx = TrinoParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_identifier)
        try:
            self.state = 3255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [333]:
                localctx = TrinoParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3250
                self.match(TrinoParser.IDENTIFIER_)
                pass
            elif token in [335]:
                localctx = TrinoParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3251
                self.match(TrinoParser.QUOTED_IDENTIFIER_)
                pass
            elif token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295]:
                localctx = TrinoParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3252
                self.nonReserved()
                pass
            elif token in [336]:
                localctx = TrinoParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3253
                self.match(TrinoParser.BACKQUOTED_IDENTIFIER_)
                pass
            elif token in [334]:
                localctx = TrinoParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3254
                self.match(TrinoParser.DIGIT_IDENTIFIER_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE_(self):
            return self.getToken(TrinoParser.DECIMAL_VALUE_, 0)
        def MINUS_(self):
            return self.getToken(TrinoParser.MINUS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE_(self):
            return self.getToken(TrinoParser.DOUBLE_VALUE_, 0)
        def MINUS_(self):
            return self.getToken(TrinoParser.MINUS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE_(self):
            return self.getToken(TrinoParser.INTEGER_VALUE_, 0)
        def MINUS_(self):
            return self.getToken(TrinoParser.MINUS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)



    def number(self):

        localctx = TrinoParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                localctx = TrinoParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3257
                    self.match(TrinoParser.MINUS_)


                self.state = 3260
                self.match(TrinoParser.DECIMAL_VALUE_)
                pass

            elif la_ == 2:
                localctx = TrinoParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3261
                    self.match(TrinoParser.MINUS_)


                self.state = 3264
                self.match(TrinoParser.DOUBLE_VALUE_)
                pass

            elif la_ == 3:
                localctx = TrinoParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3265
                    self.match(TrinoParser.MINUS_)


                self.state = 3268
                self.match(TrinoParser.INTEGER_VALUE_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthorizationUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TrinoParser.RULE_authorizationUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringUserContext(AuthorizationUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.AuthorizationUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_(self):
            return self.getTypedRuleContext(TrinoParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringUser" ):
                listener.enterStringUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringUser" ):
                listener.exitStringUser(self)


    class IdentifierUserContext(AuthorizationUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TrinoParser.AuthorizationUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TrinoParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierUser" ):
                listener.enterIdentifierUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierUser" ):
                listener.exitIdentifierUser(self)



    def authorizationUser(self):

        localctx = TrinoParser.AuthorizationUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_authorizationUser)
        try:
            self.state = 3273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 72, 75, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 109, 112, 114, 115, 117, 118, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 333, 334, 335, 336]:
                localctx = TrinoParser.IdentifierUserContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3271
                self.identifier()
                pass
            elif token in [327, 328]:
                localctx = TrinoParser.StringUserContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3272
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSENT_(self):
            return self.getToken(TrinoParser.ABSENT_, 0)

        def ADD_(self):
            return self.getToken(TrinoParser.ADD_, 0)

        def ADMIN_(self):
            return self.getToken(TrinoParser.ADMIN_, 0)

        def AFTER_(self):
            return self.getToken(TrinoParser.AFTER_, 0)

        def ALL_(self):
            return self.getToken(TrinoParser.ALL_, 0)

        def ANALYZE_(self):
            return self.getToken(TrinoParser.ANALYZE_, 0)

        def ANY_(self):
            return self.getToken(TrinoParser.ANY_, 0)

        def ARRAY_(self):
            return self.getToken(TrinoParser.ARRAY_, 0)

        def ASC_(self):
            return self.getToken(TrinoParser.ASC_, 0)

        def AT_(self):
            return self.getToken(TrinoParser.AT_, 0)

        def AUTHORIZATION_(self):
            return self.getToken(TrinoParser.AUTHORIZATION_, 0)

        def BEGIN_(self):
            return self.getToken(TrinoParser.BEGIN_, 0)

        def BERNOULLI_(self):
            return self.getToken(TrinoParser.BERNOULLI_, 0)

        def BOTH_(self):
            return self.getToken(TrinoParser.BOTH_, 0)

        def CALL_(self):
            return self.getToken(TrinoParser.CALL_, 0)

        def CALLED_(self):
            return self.getToken(TrinoParser.CALLED_, 0)

        def CASCADE_(self):
            return self.getToken(TrinoParser.CASCADE_, 0)

        def CATALOG_(self):
            return self.getToken(TrinoParser.CATALOG_, 0)

        def CATALOGS_(self):
            return self.getToken(TrinoParser.CATALOGS_, 0)

        def COLUMN_(self):
            return self.getToken(TrinoParser.COLUMN_, 0)

        def COLUMNS_(self):
            return self.getToken(TrinoParser.COLUMNS_, 0)

        def COMMENT_(self):
            return self.getToken(TrinoParser.COMMENT_, 0)

        def COMMIT_(self):
            return self.getToken(TrinoParser.COMMIT_, 0)

        def COMMITTED_(self):
            return self.getToken(TrinoParser.COMMITTED_, 0)

        def CONDITIONAL_(self):
            return self.getToken(TrinoParser.CONDITIONAL_, 0)

        def COPARTITION_(self):
            return self.getToken(TrinoParser.COPARTITION_, 0)

        def COUNT_(self):
            return self.getToken(TrinoParser.COUNT_, 0)

        def CURRENT_(self):
            return self.getToken(TrinoParser.CURRENT_, 0)

        def DATA_(self):
            return self.getToken(TrinoParser.DATA_, 0)

        def DATE_(self):
            return self.getToken(TrinoParser.DATE_, 0)

        def DAY_(self):
            return self.getToken(TrinoParser.DAY_, 0)

        def DECLARE_(self):
            return self.getToken(TrinoParser.DECLARE_, 0)

        def DEFAULT_(self):
            return self.getToken(TrinoParser.DEFAULT_, 0)

        def DEFINE_(self):
            return self.getToken(TrinoParser.DEFINE_, 0)

        def DEFINER_(self):
            return self.getToken(TrinoParser.DEFINER_, 0)

        def DENY_(self):
            return self.getToken(TrinoParser.DENY_, 0)

        def DESC_(self):
            return self.getToken(TrinoParser.DESC_, 0)

        def DESCRIPTOR_(self):
            return self.getToken(TrinoParser.DESCRIPTOR_, 0)

        def DETERMINISTIC_(self):
            return self.getToken(TrinoParser.DETERMINISTIC_, 0)

        def DISTRIBUTED_(self):
            return self.getToken(TrinoParser.DISTRIBUTED_, 0)

        def DO_(self):
            return self.getToken(TrinoParser.DO_, 0)

        def DOUBLE_(self):
            return self.getToken(TrinoParser.DOUBLE_, 0)

        def ELSEIF_(self):
            return self.getToken(TrinoParser.ELSEIF_, 0)

        def EMPTY_(self):
            return self.getToken(TrinoParser.EMPTY_, 0)

        def ENCODING_(self):
            return self.getToken(TrinoParser.ENCODING_, 0)

        def ERROR_(self):
            return self.getToken(TrinoParser.ERROR_, 0)

        def EXCLUDING_(self):
            return self.getToken(TrinoParser.EXCLUDING_, 0)

        def EXPLAIN_(self):
            return self.getToken(TrinoParser.EXPLAIN_, 0)

        def FETCH_(self):
            return self.getToken(TrinoParser.FETCH_, 0)

        def FILTER_(self):
            return self.getToken(TrinoParser.FILTER_, 0)

        def FINAL_(self):
            return self.getToken(TrinoParser.FINAL_, 0)

        def FIRST_(self):
            return self.getToken(TrinoParser.FIRST_, 0)

        def FOLLOWING_(self):
            return self.getToken(TrinoParser.FOLLOWING_, 0)

        def FORMAT_(self):
            return self.getToken(TrinoParser.FORMAT_, 0)

        def FUNCTION_(self):
            return self.getToken(TrinoParser.FUNCTION_, 0)

        def FUNCTIONS_(self):
            return self.getToken(TrinoParser.FUNCTIONS_, 0)

        def GRACE_(self):
            return self.getToken(TrinoParser.GRACE_, 0)

        def GRANT_(self):
            return self.getToken(TrinoParser.GRANT_, 0)

        def GRANTED_(self):
            return self.getToken(TrinoParser.GRANTED_, 0)

        def GRANTS_(self):
            return self.getToken(TrinoParser.GRANTS_, 0)

        def GRAPHVIZ_(self):
            return self.getToken(TrinoParser.GRAPHVIZ_, 0)

        def GROUPS_(self):
            return self.getToken(TrinoParser.GROUPS_, 0)

        def HOUR_(self):
            return self.getToken(TrinoParser.HOUR_, 0)

        def IF_(self):
            return self.getToken(TrinoParser.IF_, 0)

        def IGNORE_(self):
            return self.getToken(TrinoParser.IGNORE_, 0)

        def IMMEDIATE_(self):
            return self.getToken(TrinoParser.IMMEDIATE_, 0)

        def INCLUDING_(self):
            return self.getToken(TrinoParser.INCLUDING_, 0)

        def INITIAL_(self):
            return self.getToken(TrinoParser.INITIAL_, 0)

        def INPUT_(self):
            return self.getToken(TrinoParser.INPUT_, 0)

        def INTERVAL_(self):
            return self.getToken(TrinoParser.INTERVAL_, 0)

        def INVOKER_(self):
            return self.getToken(TrinoParser.INVOKER_, 0)

        def IO_(self):
            return self.getToken(TrinoParser.IO_, 0)

        def ITERATE_(self):
            return self.getToken(TrinoParser.ITERATE_, 0)

        def ISOLATION_(self):
            return self.getToken(TrinoParser.ISOLATION_, 0)

        def JSON_(self):
            return self.getToken(TrinoParser.JSON_, 0)

        def KEEP_(self):
            return self.getToken(TrinoParser.KEEP_, 0)

        def KEY_(self):
            return self.getToken(TrinoParser.KEY_, 0)

        def KEYS_(self):
            return self.getToken(TrinoParser.KEYS_, 0)

        def LANGUAGE_(self):
            return self.getToken(TrinoParser.LANGUAGE_, 0)

        def LAST_(self):
            return self.getToken(TrinoParser.LAST_, 0)

        def LATERAL_(self):
            return self.getToken(TrinoParser.LATERAL_, 0)

        def LEADING_(self):
            return self.getToken(TrinoParser.LEADING_, 0)

        def LEAVE_(self):
            return self.getToken(TrinoParser.LEAVE_, 0)

        def LEVEL_(self):
            return self.getToken(TrinoParser.LEVEL_, 0)

        def LIMIT_(self):
            return self.getToken(TrinoParser.LIMIT_, 0)

        def LOCAL_(self):
            return self.getToken(TrinoParser.LOCAL_, 0)

        def LOGICAL_(self):
            return self.getToken(TrinoParser.LOGICAL_, 0)

        def LOOP_(self):
            return self.getToken(TrinoParser.LOOP_, 0)

        def MAP_(self):
            return self.getToken(TrinoParser.MAP_, 0)

        def MATCH_(self):
            return self.getToken(TrinoParser.MATCH_, 0)

        def MATCHED_(self):
            return self.getToken(TrinoParser.MATCHED_, 0)

        def MATCHES_(self):
            return self.getToken(TrinoParser.MATCHES_, 0)

        def MATCH_RECOGNIZE_(self):
            return self.getToken(TrinoParser.MATCH_RECOGNIZE_, 0)

        def MATERIALIZED_(self):
            return self.getToken(TrinoParser.MATERIALIZED_, 0)

        def MEASURES_(self):
            return self.getToken(TrinoParser.MEASURES_, 0)

        def MERGE_(self):
            return self.getToken(TrinoParser.MERGE_, 0)

        def MINUTE_(self):
            return self.getToken(TrinoParser.MINUTE_, 0)

        def MONTH_(self):
            return self.getToken(TrinoParser.MONTH_, 0)

        def NESTED_(self):
            return self.getToken(TrinoParser.NESTED_, 0)

        def NEXT_(self):
            return self.getToken(TrinoParser.NEXT_, 0)

        def NFC_(self):
            return self.getToken(TrinoParser.NFC_, 0)

        def NFD_(self):
            return self.getToken(TrinoParser.NFD_, 0)

        def NFKC_(self):
            return self.getToken(TrinoParser.NFKC_, 0)

        def NFKD_(self):
            return self.getToken(TrinoParser.NFKD_, 0)

        def NO_(self):
            return self.getToken(TrinoParser.NO_, 0)

        def NONE_(self):
            return self.getToken(TrinoParser.NONE_, 0)

        def NULLIF_(self):
            return self.getToken(TrinoParser.NULLIF_, 0)

        def NULLS_(self):
            return self.getToken(TrinoParser.NULLS_, 0)

        def OBJECT_(self):
            return self.getToken(TrinoParser.OBJECT_, 0)

        def OF_(self):
            return self.getToken(TrinoParser.OF_, 0)

        def OFFSET_(self):
            return self.getToken(TrinoParser.OFFSET_, 0)

        def OMIT_(self):
            return self.getToken(TrinoParser.OMIT_, 0)

        def ONE_(self):
            return self.getToken(TrinoParser.ONE_, 0)

        def ONLY_(self):
            return self.getToken(TrinoParser.ONLY_, 0)

        def OPTION_(self):
            return self.getToken(TrinoParser.OPTION_, 0)

        def ORDINALITY_(self):
            return self.getToken(TrinoParser.ORDINALITY_, 0)

        def OUTPUT_(self):
            return self.getToken(TrinoParser.OUTPUT_, 0)

        def OVER_(self):
            return self.getToken(TrinoParser.OVER_, 0)

        def OVERFLOW_(self):
            return self.getToken(TrinoParser.OVERFLOW_, 0)

        def PARTITION_(self):
            return self.getToken(TrinoParser.PARTITION_, 0)

        def PARTITIONS_(self):
            return self.getToken(TrinoParser.PARTITIONS_, 0)

        def PASSING_(self):
            return self.getToken(TrinoParser.PASSING_, 0)

        def PAST_(self):
            return self.getToken(TrinoParser.PAST_, 0)

        def PATH_(self):
            return self.getToken(TrinoParser.PATH_, 0)

        def PATTERN_(self):
            return self.getToken(TrinoParser.PATTERN_, 0)

        def PER_(self):
            return self.getToken(TrinoParser.PER_, 0)

        def PERIOD_(self):
            return self.getToken(TrinoParser.PERIOD_, 0)

        def PERMUTE_(self):
            return self.getToken(TrinoParser.PERMUTE_, 0)

        def PLAN_(self):
            return self.getToken(TrinoParser.PLAN_, 0)

        def POSITION_(self):
            return self.getToken(TrinoParser.POSITION_, 0)

        def PRECEDING_(self):
            return self.getToken(TrinoParser.PRECEDING_, 0)

        def PRECISION_(self):
            return self.getToken(TrinoParser.PRECISION_, 0)

        def PRIVILEGES_(self):
            return self.getToken(TrinoParser.PRIVILEGES_, 0)

        def PROPERTIES_(self):
            return self.getToken(TrinoParser.PROPERTIES_, 0)

        def PRUNE_(self):
            return self.getToken(TrinoParser.PRUNE_, 0)

        def QUOTES_(self):
            return self.getToken(TrinoParser.QUOTES_, 0)

        def RANGE_(self):
            return self.getToken(TrinoParser.RANGE_, 0)

        def READ_(self):
            return self.getToken(TrinoParser.READ_, 0)

        def REFRESH_(self):
            return self.getToken(TrinoParser.REFRESH_, 0)

        def RENAME_(self):
            return self.getToken(TrinoParser.RENAME_, 0)

        def REPEAT_(self):
            return self.getToken(TrinoParser.REPEAT_, 0)

        def REPEATABLE_(self):
            return self.getToken(TrinoParser.REPEATABLE_, 0)

        def REPLACE_(self):
            return self.getToken(TrinoParser.REPLACE_, 0)

        def RESET_(self):
            return self.getToken(TrinoParser.RESET_, 0)

        def RESPECT_(self):
            return self.getToken(TrinoParser.RESPECT_, 0)

        def RESTRICT_(self):
            return self.getToken(TrinoParser.RESTRICT_, 0)

        def RETURN_(self):
            return self.getToken(TrinoParser.RETURN_, 0)

        def RETURNING_(self):
            return self.getToken(TrinoParser.RETURNING_, 0)

        def RETURNS_(self):
            return self.getToken(TrinoParser.RETURNS_, 0)

        def REVOKE_(self):
            return self.getToken(TrinoParser.REVOKE_, 0)

        def ROLE_(self):
            return self.getToken(TrinoParser.ROLE_, 0)

        def ROLES_(self):
            return self.getToken(TrinoParser.ROLES_, 0)

        def ROLLBACK_(self):
            return self.getToken(TrinoParser.ROLLBACK_, 0)

        def ROW_(self):
            return self.getToken(TrinoParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(TrinoParser.ROWS_, 0)

        def RUNNING_(self):
            return self.getToken(TrinoParser.RUNNING_, 0)

        def SCALAR_(self):
            return self.getToken(TrinoParser.SCALAR_, 0)

        def SCHEMA_(self):
            return self.getToken(TrinoParser.SCHEMA_, 0)

        def SCHEMAS_(self):
            return self.getToken(TrinoParser.SCHEMAS_, 0)

        def SECOND_(self):
            return self.getToken(TrinoParser.SECOND_, 0)

        def SECURITY_(self):
            return self.getToken(TrinoParser.SECURITY_, 0)

        def SEEK_(self):
            return self.getToken(TrinoParser.SEEK_, 0)

        def SERIALIZABLE_(self):
            return self.getToken(TrinoParser.SERIALIZABLE_, 0)

        def SESSION_(self):
            return self.getToken(TrinoParser.SESSION_, 0)

        def SET_(self):
            return self.getToken(TrinoParser.SET_, 0)

        def SETS_(self):
            return self.getToken(TrinoParser.SETS_, 0)

        def SHOW_(self):
            return self.getToken(TrinoParser.SHOW_, 0)

        def SOME_(self):
            return self.getToken(TrinoParser.SOME_, 0)

        def START_(self):
            return self.getToken(TrinoParser.START_, 0)

        def STATS_(self):
            return self.getToken(TrinoParser.STATS_, 0)

        def SUBSET_(self):
            return self.getToken(TrinoParser.SUBSET_, 0)

        def SUBSTRING_(self):
            return self.getToken(TrinoParser.SUBSTRING_, 0)

        def SYSTEM_(self):
            return self.getToken(TrinoParser.SYSTEM_, 0)

        def TABLES_(self):
            return self.getToken(TrinoParser.TABLES_, 0)

        def TABLESAMPLE_(self):
            return self.getToken(TrinoParser.TABLESAMPLE_, 0)

        def TEXT_(self):
            return self.getToken(TrinoParser.TEXT_, 0)

        def TEXT_STRING_(self):
            return self.getToken(TrinoParser.TEXT_STRING_, 0)

        def TIES_(self):
            return self.getToken(TrinoParser.TIES_, 0)

        def TIME_(self):
            return self.getToken(TrinoParser.TIME_, 0)

        def TIMESTAMP_(self):
            return self.getToken(TrinoParser.TIMESTAMP_, 0)

        def TO_(self):
            return self.getToken(TrinoParser.TO_, 0)

        def TRAILING_(self):
            return self.getToken(TrinoParser.TRAILING_, 0)

        def TRANSACTION_(self):
            return self.getToken(TrinoParser.TRANSACTION_, 0)

        def TRUNCATE_(self):
            return self.getToken(TrinoParser.TRUNCATE_, 0)

        def TRY_CAST_(self):
            return self.getToken(TrinoParser.TRY_CAST_, 0)

        def TYPE_(self):
            return self.getToken(TrinoParser.TYPE_, 0)

        def UNBOUNDED_(self):
            return self.getToken(TrinoParser.UNBOUNDED_, 0)

        def UNCOMMITTED_(self):
            return self.getToken(TrinoParser.UNCOMMITTED_, 0)

        def UNCONDITIONAL_(self):
            return self.getToken(TrinoParser.UNCONDITIONAL_, 0)

        def UNIQUE_(self):
            return self.getToken(TrinoParser.UNIQUE_, 0)

        def UNKNOWN_(self):
            return self.getToken(TrinoParser.UNKNOWN_, 0)

        def UNMATCHED_(self):
            return self.getToken(TrinoParser.UNMATCHED_, 0)

        def UNTIL_(self):
            return self.getToken(TrinoParser.UNTIL_, 0)

        def UPDATE_(self):
            return self.getToken(TrinoParser.UPDATE_, 0)

        def USE_(self):
            return self.getToken(TrinoParser.USE_, 0)

        def USER_(self):
            return self.getToken(TrinoParser.USER_, 0)

        def UTF16_(self):
            return self.getToken(TrinoParser.UTF16_, 0)

        def UTF32_(self):
            return self.getToken(TrinoParser.UTF32_, 0)

        def UTF8_(self):
            return self.getToken(TrinoParser.UTF8_, 0)

        def VALIDATE_(self):
            return self.getToken(TrinoParser.VALIDATE_, 0)

        def VALUE_(self):
            return self.getToken(TrinoParser.VALUE_, 0)

        def VERBOSE_(self):
            return self.getToken(TrinoParser.VERBOSE_, 0)

        def VERSION_(self):
            return self.getToken(TrinoParser.VERSION_, 0)

        def VIEW_(self):
            return self.getToken(TrinoParser.VIEW_, 0)

        def WHILE_(self):
            return self.getToken(TrinoParser.WHILE_, 0)

        def WINDOW_(self):
            return self.getToken(TrinoParser.WINDOW_, 0)

        def WITHIN_(self):
            return self.getToken(TrinoParser.WITHIN_, 0)

        def WITHOUT_(self):
            return self.getToken(TrinoParser.WITHOUT_, 0)

        def WORK_(self):
            return self.getToken(TrinoParser.WORK_, 0)

        def WRAPPER_(self):
            return self.getToken(TrinoParser.WRAPPER_, 0)

        def WRITE_(self):
            return self.getToken(TrinoParser.WRITE_, 0)

        def YEAR_(self):
            return self.getToken(TrinoParser.YEAR_, 0)

        def ZONE_(self):
            return self.getToken(TrinoParser.ZONE_, 0)

        def getRuleIndex(self):
            return TrinoParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = TrinoParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -5262737029699602754) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9120583187364427405) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -6228115030305409) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -148654522401558561) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 273598576503) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[23] = self.queryTerm_sempred
        self._predicates[35] = self.relation_sempred
        self._predicates[61] = self.booleanExpression_sempred
        self._predicates[63] = self.valueExpression_sempred
        self._predicates[64] = self.primaryExpression_sempred
        self._predicates[84] = self.type_sempred
        self._predicates[94] = self.rowPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 22)
         

    def type_sempred(self, localctx:TypeContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def rowPattern_sempred(self, localctx:RowPatternContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




