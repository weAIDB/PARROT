# Generated from sql/starrocks/StarRocksParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,506,7093,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,1,0,4,0,882,8,0,11,0,12,0,883,1,0,1,0,1,1,1,1,1,1,1,1,3,1,
        892,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        1099,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        3,7,1115,8,7,1,7,1,7,1,7,1,7,3,7,1121,8,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,1129,8,7,3,7,1131,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1149,8,8,1,9,1,9,1,9,1,9,1,9,3,9,
        1156,8,9,1,9,1,9,1,9,3,9,1161,8,9,1,9,1,9,3,9,1165,8,9,1,9,3,9,1168,
        8,9,1,9,3,9,1171,8,9,1,10,1,10,1,10,1,10,3,10,1177,8,10,1,10,1,10,
        1,10,3,10,1182,8,10,1,10,1,10,3,10,1186,8,10,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,3,14,1209,8,14,1,15,1,15,3,15,1213,8,15,1,15,
        1,15,1,15,1,15,3,15,1219,8,15,1,15,1,15,1,15,1,15,1,15,5,15,1226,
        8,15,10,15,12,15,1229,9,15,1,15,1,15,5,15,1233,8,15,10,15,12,15,
        1236,9,15,1,15,1,15,3,15,1240,8,15,1,15,3,15,1243,8,15,1,15,3,15,
        1246,8,15,1,15,3,15,1249,8,15,1,15,3,15,1252,8,15,1,15,3,15,1255,
        8,15,1,15,3,15,1258,8,15,1,15,3,15,1261,8,15,1,15,3,15,1264,8,15,
        1,15,3,15,1267,8,15,1,16,1,16,1,16,3,16,1272,8,16,1,16,3,16,1275,
        8,16,1,16,3,16,1278,8,16,1,16,1,16,1,16,3,16,1283,8,16,1,16,1,16,
        1,16,3,16,1288,8,16,1,16,3,16,1291,8,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,3,17,1301,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,3,18,1313,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,3,20,1323,8,20,3,20,1325,8,20,1,20,3,20,1328,8,20,1,21,1,21,
        1,21,1,21,1,22,3,22,1335,8,22,1,22,1,22,1,22,1,22,1,22,3,22,1342,
        8,22,1,22,3,22,1345,8,22,1,22,1,22,1,23,3,23,1350,8,23,1,23,1,23,
        3,23,1354,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,1373,8,27,10,27,12,27,1376,
        9,27,1,27,1,27,1,28,1,28,1,28,3,28,1383,8,28,1,28,3,28,1386,8,28,
        1,28,3,28,1389,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        3,31,1400,8,31,1,32,1,32,1,32,3,32,1405,8,32,1,33,1,33,3,33,1409,
        8,33,1,33,1,33,1,33,1,33,3,33,1415,8,33,1,33,1,33,1,33,1,33,1,33,
        5,33,1422,8,33,10,33,12,33,1425,9,33,1,33,1,33,5,33,1429,8,33,10,
        33,12,33,1432,9,33,1,33,1,33,1,33,5,33,1437,8,33,10,33,12,33,1440,
        9,33,3,33,1442,8,33,1,33,1,33,3,33,1446,8,33,1,33,3,33,1449,8,33,
        1,33,3,33,1452,8,33,1,33,3,33,1455,8,33,1,33,3,33,1458,8,33,1,33,
        3,33,1461,8,33,1,33,3,33,1464,8,33,1,33,1,33,1,33,1,34,1,34,3,34,
        1471,8,34,1,34,1,34,1,34,3,34,1476,8,34,1,34,1,34,3,34,1480,8,34,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,
        5,36,1495,8,36,10,36,12,36,1498,9,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,5,36,1508,8,36,10,36,12,36,1511,9,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,5,36,1521,8,36,10,36,12,36,1524,9,36,3,
        36,1526,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1536,8,
        37,3,37,1538,8,37,1,37,3,37,1541,8,37,1,38,1,38,1,38,1,38,1,38,1,
        38,1,39,1,39,1,39,1,40,1,40,3,40,1554,8,40,1,40,1,40,1,40,3,40,1559,
        8,40,1,40,1,40,1,40,1,40,3,40,1565,8,40,1,41,1,41,1,41,1,41,1,41,
        3,41,1572,8,41,1,41,1,41,1,41,1,41,3,41,1578,8,41,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,1586,8,42,1,42,1,42,1,43,1,43,3,43,1592,8,43,
        1,43,1,43,1,43,1,43,1,43,1,43,3,43,1600,8,43,1,43,1,43,1,43,1,43,
        3,43,1606,8,43,1,44,1,44,1,44,1,44,1,44,3,44,1613,8,44,1,44,1,44,
        1,44,1,44,3,44,1619,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,5,45,1630,8,45,10,45,12,45,1633,9,45,1,45,1,45,3,45,1637,8,
        45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1645,8,46,1,46,1,46,3,46,1649,
        8,46,1,46,1,46,1,46,1,46,1,46,5,46,1656,8,46,10,46,12,46,1659,9,
        46,3,46,1661,8,46,1,46,3,46,1664,8,46,1,46,1,46,1,46,1,46,1,46,1,
        46,3,46,1672,8,46,1,46,1,46,3,46,1676,8,46,1,46,1,46,1,46,1,46,1,
        46,5,46,1683,8,46,10,46,12,46,1686,9,46,3,46,1688,8,46,1,46,3,46,
        1691,8,46,3,46,1693,8,46,1,47,1,47,1,47,3,47,1698,8,47,1,48,1,48,
        3,48,1702,8,48,1,48,1,48,1,48,1,48,3,48,1708,8,48,1,48,1,48,3,48,
        1712,8,48,1,48,3,48,1715,8,48,1,48,3,48,1718,8,48,1,48,1,48,1,48,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1730,8,49,1,50,1,50,1,50,
        1,50,1,51,1,51,1,51,1,51,3,51,1740,8,51,1,52,1,52,1,52,1,52,3,52,
        1746,8,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1754,8,52,10,52,12,
        52,1757,9,52,1,52,3,52,1760,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,
        52,1768,8,52,1,53,1,53,3,53,1772,8,53,1,53,1,53,1,53,1,53,1,53,3,
        53,1779,8,53,1,53,1,53,1,53,1,53,1,53,5,53,1786,8,53,10,53,12,53,
        1789,9,53,3,53,1791,8,53,1,53,3,53,1794,8,53,1,54,1,54,1,54,1,54,
        1,54,1,54,1,55,1,55,1,55,3,55,1805,8,55,1,55,1,55,1,55,1,55,3,55,
        1811,8,55,1,55,1,55,1,55,1,55,1,55,5,55,1818,8,55,10,55,12,55,1821,
        9,55,1,55,1,55,3,55,1825,8,55,1,55,3,55,1828,8,55,1,55,1,55,1,55,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,1840,8,56,10,56,12,56,1843,
        9,56,1,56,1,56,3,56,1847,8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
        3,57,1856,8,57,1,57,1,57,1,58,1,58,3,58,1862,8,58,1,59,1,59,1,59,
        3,59,1867,8,59,1,59,5,59,1870,8,59,10,59,12,59,1873,9,59,1,59,1,
        59,1,59,1,59,3,59,1879,8,59,1,60,1,60,3,60,1883,8,60,1,61,1,61,1,
        61,1,61,3,61,1889,8,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1897,8,
        62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1910,
        8,63,1,63,1,63,1,63,1,63,1,63,5,63,1917,8,63,10,63,12,63,1920,9,
        63,1,63,1,63,5,63,1924,8,63,10,63,12,63,1927,9,63,1,63,1,63,3,63,
        1931,8,63,1,63,3,63,1934,8,63,1,63,5,63,1937,8,63,10,63,12,63,1940,
        9,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1952,
        8,64,1,65,1,65,1,65,1,65,1,65,3,65,1959,8,65,1,65,1,65,1,65,1,65,
        3,65,1965,8,65,1,66,1,66,1,66,1,66,1,66,3,66,1972,8,66,1,66,1,66,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1984,8,67,1,67,1,67,
        1,67,1,67,1,67,1,67,3,67,1992,8,67,1,68,1,68,1,68,1,68,1,68,1,68,
        3,68,2000,8,68,1,68,3,68,2003,8,68,1,68,1,68,1,68,3,68,2008,8,68,
        1,69,1,69,1,69,1,69,1,69,1,69,3,69,2016,8,69,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,
        1,72,1,72,1,72,3,72,2038,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,2047,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2056,8,74,
        1,74,1,74,3,74,2060,8,74,1,75,1,75,1,75,1,75,1,75,3,75,2067,8,75,
        1,76,1,76,1,76,1,76,1,76,1,76,3,76,2075,8,76,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,
        2093,8,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,3,79,2102,8,79,1,79,
        3,79,2105,8,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,
        1,82,1,82,1,82,1,82,5,82,2121,8,82,10,82,12,82,2124,9,82,1,83,1,
        83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2136,8,84,1,84,1,
        84,3,84,2140,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,
        86,1,86,3,86,2153,8,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,
        88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2171,8,89,1,89,1,89,1,
        89,1,89,3,89,2177,8,89,1,89,3,89,2180,8,89,1,90,1,90,1,90,1,90,1,
        91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,3,92,2195,8,92,1,93,1,
        93,1,93,1,93,1,93,3,93,2202,8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,
        94,1,94,1,94,5,94,2213,8,94,10,94,12,94,2216,9,94,1,95,1,95,3,95,
        2220,8,95,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,
        1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,3,100,2248,8,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,3,100,2257,8,100,1,100,1,100,1,100,3,100,2262,8,100,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,2271,8,100,1,100,
        1,100,1,100,3,100,2276,8,100,3,100,2278,8,100,1,101,1,101,1,101,
        1,101,3,101,2284,8,101,1,101,1,101,1,101,3,101,2289,8,101,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,5,102,2300,8,102,
        10,102,12,102,2303,9,102,1,102,1,102,3,102,2307,8,102,1,103,1,103,
        1,103,1,103,3,103,2313,8,103,1,104,1,104,1,104,1,104,1,105,1,105,
        1,105,3,105,2322,8,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,
        1,107,1,107,1,107,1,107,3,107,2335,8,107,1,108,1,108,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,3,109,2380,8,109,1,110,1,110,
        1,110,1,110,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,113,1,113,1,113,1,113,1,113,5,113,2402,8,113,10,113,
        12,113,2405,9,113,1,114,1,114,1,114,1,114,1,114,5,114,2412,8,114,
        10,114,12,114,2415,9,114,1,114,3,114,2418,8,114,1,115,1,115,1,115,
        1,115,1,115,5,115,2425,8,115,10,115,12,115,2428,9,115,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        3,116,2443,8,116,1,117,1,117,1,117,1,117,1,117,1,117,5,117,2451,
        8,117,10,117,12,117,2454,9,117,1,118,1,118,1,118,1,118,1,118,1,118,
        5,118,2462,8,118,10,118,12,118,2465,9,118,1,119,1,119,1,119,1,119,
        1,119,1,119,5,119,2473,8,119,10,119,12,119,2476,9,119,1,119,1,119,
        1,119,1,119,1,119,1,119,5,119,2484,8,119,10,119,12,119,2487,9,119,
        1,119,1,119,1,119,1,119,3,119,2493,8,119,1,120,1,120,1,120,1,120,
        1,120,3,120,2500,8,120,1,121,1,121,1,121,1,122,1,122,1,122,1,122,
        1,122,1,123,1,123,1,123,1,123,1,123,5,123,2515,8,123,10,123,12,123,
        2518,9,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,
        1,124,5,124,2530,8,124,10,124,12,124,2533,9,124,1,124,1,124,1,124,
        1,124,1,125,1,125,1,125,1,125,1,125,5,125,2544,8,125,10,125,12,125,
        2547,9,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,
        1,126,5,126,2559,8,126,10,126,12,126,2562,9,126,1,126,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2574,8,127,3,127,
        2576,8,127,1,127,3,127,2579,8,127,1,128,1,128,1,128,1,128,1,129,
        1,129,1,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,132,1,132,
        1,132,1,132,1,133,3,133,2600,8,133,1,133,3,133,2603,8,133,1,133,
        3,133,2606,8,133,1,133,3,133,2609,8,133,1,133,3,133,2612,8,133,1,
        134,1,134,1,134,1,134,1,134,1,134,3,134,2620,8,134,1,134,1,134,3,
        134,2624,8,134,1,134,3,134,2627,8,134,1,135,1,135,1,135,1,135,1,
        135,1,135,5,135,2635,8,135,10,135,12,135,2638,9,135,1,135,1,135,
        1,135,3,135,2643,8,135,1,135,3,135,2646,8,135,1,136,1,136,1,136,
        1,136,1,136,3,136,2653,8,136,1,136,3,136,2656,8,136,1,137,1,137,
        1,137,1,137,1,137,1,137,3,137,2664,8,137,1,137,1,137,3,137,2668,
        8,137,1,137,3,137,2671,8,137,1,138,1,138,1,138,1,138,1,138,1,138,
        1,139,1,139,1,139,1,139,1,139,3,139,2684,8,139,1,139,3,139,2687,
        8,139,1,140,1,140,1,140,1,140,1,140,1,141,3,141,2695,8,141,1,141,
        1,141,1,141,3,141,2700,8,141,1,142,1,142,3,142,2704,8,142,1,143,
        1,143,1,143,1,143,5,143,2710,8,143,10,143,12,143,2713,9,143,1,144,
        1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,2724,8,144,
        1,144,3,144,2727,8,144,1,145,1,145,1,145,1,145,1,145,1,145,1,145,
        3,145,2736,8,145,1,146,1,146,3,146,2740,8,146,1,146,1,146,1,146,
        3,146,2745,8,146,1,146,3,146,2748,8,146,1,146,3,146,2751,8,146,1,
        146,1,146,3,146,2755,8,146,1,146,1,146,3,146,2759,8,146,1,146,3,
        146,2762,8,146,1,146,3,146,2765,8,146,3,146,2767,8,146,1,147,1,147,
        3,147,2771,8,147,1,147,1,147,1,147,3,147,2776,8,147,1,147,1,147,
        3,147,2780,8,147,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,
        1,149,1,149,3,149,2792,8,149,1,149,1,149,1,149,1,149,1,149,3,149,
        2799,8,149,1,150,1,150,1,150,1,150,1,150,3,150,2806,8,150,1,151,
        1,151,1,151,1,151,1,151,1,152,3,152,2814,8,152,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,3,152,2824,8,152,1,152,3,152,2827,
        8,152,1,152,1,152,1,152,3,152,2832,8,152,1,152,3,152,2835,8,152,
        1,152,1,152,1,152,1,152,1,152,5,152,2842,8,152,10,152,12,152,2845,
        9,152,3,152,2847,8,152,1,153,3,153,2850,8,153,1,153,3,153,2853,8,
        153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,2862,8,153,1,
        154,3,154,2865,8,154,1,154,3,154,2868,8,154,1,154,1,154,1,154,1,
        154,3,154,2874,8,154,1,154,1,154,3,154,2878,8,154,1,154,1,154,3,
        154,2882,8,154,1,155,1,155,1,155,1,155,1,155,1,155,3,155,2890,8,
        155,1,155,1,155,1,155,1,155,1,155,1,155,5,155,2898,8,155,10,155,
        12,155,2901,9,155,3,155,2903,8,155,1,155,3,155,2906,8,155,1,155,
        1,155,1,155,3,155,2911,8,155,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,3,156,2920,8,156,1,156,1,156,1,156,1,156,5,156,2926,8,156,
        10,156,12,156,2929,9,156,3,156,2931,8,156,1,156,3,156,2934,8,156,
        1,156,3,156,2937,8,156,1,157,1,157,1,157,1,157,1,158,1,158,1,158,
        1,158,1,158,1,158,3,158,2949,8,158,1,159,1,159,1,159,1,159,1,159,
        1,160,1,160,1,160,1,160,1,160,1,161,1,161,1,161,1,162,1,162,1,162,
        3,162,2967,8,162,1,162,1,162,1,162,3,162,2972,8,162,5,162,2974,8,
        162,10,162,12,162,2977,9,162,1,162,1,162,1,163,1,163,1,164,1,164,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,2992,8,165,1,165,
        1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3003,8,166,
        1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,3,167,3014,
        8,167,1,167,1,167,1,168,1,168,3,168,3020,8,168,1,168,1,168,1,168,
        1,168,1,168,1,168,3,168,3028,8,168,1,168,3,168,3031,8,168,1,168,
        1,168,3,168,3035,8,168,1,168,1,168,3,168,3039,8,168,1,168,1,168,
        1,168,1,168,1,168,5,168,3046,8,168,10,168,12,168,3049,9,168,3,168,
        3051,8,168,1,168,3,168,3054,8,168,1,169,1,169,1,169,1,169,1,169,
        1,169,3,169,3062,8,169,1,169,1,169,1,169,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,3,170,3074,8,170,1,170,1,170,1,171,1,171,3,171,
        3080,8,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3088,8,171,
        1,171,3,171,3091,8,171,1,171,1,171,3,171,3095,8,171,1,171,1,171,
        3,171,3099,8,171,1,171,1,171,1,171,1,171,1,171,5,171,3106,8,171,
        10,171,12,171,3109,9,171,3,171,3111,8,171,1,171,3,171,3114,8,171,
        1,172,1,172,3,172,3118,8,172,1,172,1,172,1,172,1,172,1,172,1,172,
        5,172,3126,8,172,10,172,12,172,3129,9,172,1,172,1,172,3,172,3133,
        8,172,1,172,1,172,1,172,3,172,3138,8,172,1,172,3,172,3141,8,172,
        1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,5,174,3156,8,174,10,174,12,174,3159,9,174,1,174,1,174,
        1,174,3,174,3164,8,174,1,174,1,174,1,174,3,174,3169,8,174,1,174,
        3,174,3172,8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,5,175,3183,8,175,10,175,12,175,3186,9,175,1,176,1,176,1,176,
        3,176,3191,8,176,1,176,1,176,3,176,3195,8,176,1,176,1,176,1,176,
        3,176,3200,8,176,1,176,1,176,1,176,3,176,3205,8,176,1,176,1,176,
        1,176,3,176,3210,8,176,1,176,1,176,1,176,1,176,1,176,1,176,5,176,
        3218,8,176,10,176,12,176,3221,9,176,1,176,1,176,3,176,3225,8,176,
        1,176,3,176,3228,8,176,3,176,3230,8,176,1,177,1,177,1,177,1,177,
        1,178,1,178,1,178,3,178,3239,8,178,1,178,1,178,3,178,3243,8,178,
        1,179,1,179,1,179,1,179,1,179,3,179,3250,8,179,1,180,1,180,1,180,
        1,180,1,180,3,180,3257,8,180,1,181,1,181,1,181,1,181,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,5,182,
        3275,8,182,10,182,12,182,3278,9,182,3,182,3280,8,182,1,183,1,183,
        1,183,1,183,1,183,1,183,3,183,3288,8,183,1,183,1,183,3,183,3292,
        8,183,1,183,1,183,1,183,1,183,1,183,5,183,3299,8,183,10,183,12,183,
        3302,9,183,3,183,3304,8,183,1,183,1,183,1,183,1,183,1,183,5,183,
        3311,8,183,10,183,12,183,3314,9,183,1,183,1,183,1,184,1,184,1,184,
        1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,5,185,
        3331,8,185,10,185,12,185,3334,9,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,5,185,3345,8,185,10,185,12,185,3348,9,185,
        1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,1,185,1,185,1,185,5,185,3368,8,185,10,185,
        12,185,3371,9,185,1,185,1,185,3,185,3375,8,185,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,3,186,3385,8,186,3,186,3387,8,186,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3398,
        8,187,1,188,1,188,3,188,3402,8,188,1,188,1,188,1,188,3,188,3407,
        8,188,1,189,1,189,1,189,1,189,1,189,1,189,1,190,1,190,1,190,1,190,
        1,191,1,191,1,191,1,192,1,192,1,192,1,192,1,193,1,193,3,193,3428,
        8,193,1,193,3,193,3431,8,193,1,193,1,193,1,193,3,193,3436,8,193,
        1,193,1,193,1,193,1,193,3,193,3442,8,193,1,194,1,194,3,194,3446,
        8,194,1,194,1,194,1,194,1,194,1,194,1,194,1,195,1,195,3,195,3456,
        8,195,1,195,3,195,3459,8,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,3,195,3470,8,195,1,195,3,195,3473,8,195,1,196,
        3,196,3476,8,196,1,196,1,196,5,196,3480,8,196,10,196,12,196,3483,
        9,196,1,196,1,196,3,196,3487,8,196,1,197,1,197,1,197,1,197,3,197,
        3493,8,197,1,197,3,197,3496,8,197,1,197,1,197,3,197,3500,8,197,1,
        197,1,197,3,197,3504,8,197,1,197,1,197,1,197,1,197,3,197,3510,8,
        197,1,197,1,197,1,197,3,197,3515,8,197,3,197,3517,8,197,1,198,1,
        198,1,198,3,198,3522,8,198,1,198,1,198,1,199,1,199,1,199,1,199,5,
        199,3530,8,199,10,199,12,199,3533,9,199,1,199,1,199,1,200,1,200,
        1,200,1,200,3,200,3541,8,200,1,200,1,200,1,200,1,200,3,200,3547,
        8,200,1,200,1,200,1,200,1,200,3,200,3553,8,200,1,200,1,200,1,200,
        1,200,3,200,3559,8,200,1,200,3,200,3562,8,200,1,200,3,200,3565,8,
        200,1,200,3,200,3568,8,200,1,200,1,200,1,200,1,200,1,200,3,200,3575,
        8,200,1,200,1,200,3,200,3579,8,200,1,200,1,200,3,200,3583,8,200,
        1,200,1,200,1,200,1,200,1,200,3,200,3590,8,200,1,200,1,200,1,200,
        1,200,3,200,3596,8,200,1,200,1,200,3,200,3600,8,200,1,200,1,200,
        3,200,3604,8,200,3,200,3606,8,200,1,201,1,201,1,201,1,201,3,201,
        3612,8,201,1,201,1,201,1,201,3,201,3617,8,201,1,201,1,201,1,201,
        3,201,3622,8,201,1,201,1,201,1,201,3,201,3627,8,201,1,201,1,201,
        1,202,1,202,1,202,3,202,3634,8,202,1,202,1,202,1,202,1,202,3,202,
        3640,8,202,3,202,3642,8,202,1,203,1,203,1,203,1,203,3,203,3648,8,
        203,1,204,1,204,1,204,3,204,3653,8,204,1,204,1,204,3,204,3657,8,
        204,1,204,1,204,3,204,3661,8,204,1,204,1,204,1,204,1,204,1,204,5,
        204,3668,8,204,10,204,12,204,3671,9,204,3,204,3673,8,204,1,204,3,
        204,3676,8,204,1,205,1,205,1,205,1,205,1,205,3,205,3683,8,205,1,
        205,1,205,3,205,3687,8,205,1,205,3,205,3690,8,205,1,205,1,205,1,
        205,1,205,1,205,3,205,3697,8,205,1,206,1,206,1,206,1,206,3,206,3703,
        8,206,1,206,1,206,3,206,3707,8,206,1,207,1,207,1,207,1,207,1,207,
        1,207,3,207,3715,8,207,1,207,1,207,3,207,3719,8,207,1,208,1,208,
        1,208,1,208,1,208,1,209,1,209,1,209,1,210,1,210,1,210,1,211,1,211,
        1,211,1,212,1,212,1,212,1,212,1,212,1,212,3,212,3741,8,212,1,212,
        1,212,1,212,1,212,3,212,3747,8,212,1,213,1,213,1,213,1,213,1,213,
        1,213,3,213,3755,8,213,1,214,1,214,1,214,1,214,3,214,3761,8,214,
        1,215,1,215,1,215,1,215,1,215,1,215,3,215,3769,8,215,1,216,1,216,
        1,216,1,216,3,216,3775,8,216,1,216,1,216,1,216,1,216,3,216,3781,
        8,216,1,217,1,217,1,217,1,218,1,218,1,218,1,219,1,219,1,219,1,220,
        1,220,1,220,1,221,1,221,1,221,1,221,1,222,1,222,1,222,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,3,223,3809,8,223,1,224,1,224,1,224,
        1,224,1,225,1,225,3,225,3817,8,225,1,225,1,225,1,225,3,225,3822,
        8,225,1,226,1,226,1,226,1,226,3,226,3828,8,226,1,227,1,227,1,227,
        1,227,1,227,3,227,3835,8,227,1,228,1,228,3,228,3839,8,228,1,228,
        1,228,1,228,1,228,1,228,3,228,3846,8,228,1,229,1,229,1,229,1,229,
        1,229,1,229,1,229,1,229,3,229,3856,8,229,1,229,1,229,3,229,3860,
        8,229,1,229,1,229,1,229,1,229,1,229,5,229,3867,8,229,10,229,12,229,
        3870,9,229,3,229,3872,8,229,1,229,3,229,3875,8,229,3,229,3877,8,
        229,1,230,1,230,1,230,1,230,3,230,3883,8,230,1,230,1,230,3,230,3887,
        8,230,1,231,1,231,3,231,3891,8,231,1,231,1,231,1,231,3,231,3896,
        8,231,1,231,1,231,1,231,1,231,3,231,3902,8,231,1,232,1,232,1,232,
        1,232,3,232,3908,8,232,1,232,1,232,3,232,3912,8,232,1,233,1,233,
        3,233,3916,8,233,1,233,1,233,1,233,1,233,1,233,3,233,3923,8,233,
        1,234,1,234,1,234,3,234,3928,8,234,1,235,1,235,1,235,1,236,1,236,
        1,236,1,236,1,236,3,236,3938,8,236,1,236,1,236,3,236,3942,8,236,
        1,236,1,236,1,236,3,236,3947,8,236,1,237,1,237,1,237,1,237,3,237,
        3953,8,237,1,237,1,237,1,238,1,238,1,238,1,238,3,238,3961,8,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,3970,8,238,1,238,
        1,238,1,238,1,238,1,238,1,238,3,238,3978,8,238,3,238,3980,8,238,
        1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,
        3992,8,240,3,240,3994,8,240,1,241,1,241,1,241,1,241,1,241,1,241,
        3,241,4002,8,241,1,242,1,242,1,242,1,242,1,242,3,242,4009,8,242,
        1,242,1,242,3,242,4013,8,242,1,243,1,243,1,243,1,243,3,243,4019,
        8,243,1,243,1,243,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,
        3,244,4031,8,244,1,244,1,244,1,245,1,245,1,245,1,246,1,246,1,246,
        1,246,3,246,4042,8,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,3,246,4052,8,246,1,247,1,247,1,247,1,247,3,247,4058,8,247,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,4068,8,247,
        1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,
        3,248,4081,8,248,1,248,1,248,1,248,3,248,4086,8,248,1,249,1,249,
        1,249,1,249,1,249,1,249,3,249,4094,8,249,1,249,1,249,1,249,1,250,
        3,250,4100,8,250,1,250,1,250,1,250,3,250,4105,8,250,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,5,251,4114,8,251,10,251,12,251,4117,
        9,251,1,251,1,251,1,251,1,251,1,251,3,251,4124,8,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,4135,8,251,1,251,
        1,251,1,251,1,251,3,251,4141,8,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,3,251,4150,8,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,3,251,4161,8,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,3,251,4173,8,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,4186,8,251,
        1,251,1,251,1,251,1,251,1,251,3,251,4193,8,251,3,251,4195,8,251,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,5,252,4204,8,252,10,252,
        12,252,4207,9,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,1,252,1,252,1,252,3,252,4223,8,252,1,252,1,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,4256,8,252,1,252,
        1,252,1,252,3,252,4261,8,252,1,253,1,253,1,253,1,253,1,253,1,253,
        3,253,4269,8,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,4277,
        8,253,1,254,1,254,1,254,3,254,4282,8,254,1,254,1,254,1,254,1,254,
        1,254,1,254,3,254,4290,8,254,3,254,4292,8,254,1,255,1,255,1,255,
        3,255,4297,8,255,1,256,1,256,1,256,5,256,4302,8,256,10,256,12,256,
        4305,9,256,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,
        1,257,5,257,4317,8,257,10,257,12,257,4320,9,257,1,258,1,258,1,258,
        5,258,4325,8,258,10,258,12,258,4328,9,258,1,259,1,259,3,259,4332,
        8,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,
        4354,8,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,3,259,4371,8,259,1,260,1,260,
        1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,
        3,260,4386,8,260,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,3,261,4405,
        8,261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        5,262,4417,8,262,10,262,12,262,4420,9,262,1,262,1,262,3,262,4424,
        8,262,1,262,1,262,3,262,4428,8,262,1,263,1,263,1,263,1,263,3,263,
        4434,8,263,1,264,1,264,1,264,1,264,3,264,4440,8,264,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,5,265,4452,8,265,
        10,265,12,265,4455,9,265,1,265,1,265,3,265,4459,8,265,1,265,1,265,
        3,265,4463,8,265,1,266,1,266,1,266,1,266,3,266,4469,8,266,1,267,
        1,267,1,267,1,267,3,267,4475,8,267,1,267,1,267,3,267,4479,8,267,
        1,268,1,268,1,268,1,268,1,268,1,268,3,268,4487,8,268,1,269,1,269,
        1,269,3,269,4492,8,269,1,269,1,269,1,269,1,269,1,269,3,269,4499,
        8,269,1,269,1,269,1,269,1,269,1,269,3,269,4506,8,269,1,270,1,270,
        1,270,1,270,1,271,1,271,1,271,1,271,1,272,1,272,1,272,1,272,1,272,
        5,272,4521,8,272,10,272,12,272,4524,9,272,1,273,1,273,1,273,1,274,
        1,274,1,274,1,275,1,275,1,275,1,275,1,275,1,275,5,275,4538,8,275,
        10,275,12,275,4541,9,275,1,276,1,276,1,276,1,276,1,276,1,276,5,276,
        4549,8,276,10,276,12,276,4552,9,276,1,277,1,277,1,277,1,277,1,278,
        1,278,1,278,1,278,1,278,1,278,1,279,1,279,1,279,1,279,1,279,1,279,
        3,279,4570,8,279,1,279,1,279,1,279,3,279,4575,8,279,1,279,1,279,
        3,279,4579,8,279,1,280,1,280,1,280,1,280,1,281,1,281,1,281,1,281,
        1,281,1,282,1,282,1,282,1,282,1,283,1,283,1,283,1,283,1,283,5,283,
        4599,8,283,10,283,12,283,4602,9,283,1,283,1,283,1,283,1,283,3,283,
        4608,8,283,1,283,3,283,4611,8,283,1,284,1,284,1,284,1,284,3,284,
        4617,8,284,1,284,1,284,1,284,1,284,1,284,3,284,4624,8,284,1,284,
        3,284,4627,8,284,1,284,3,284,4630,8,284,1,285,1,285,1,285,1,285,
        3,285,4636,8,285,1,285,1,285,1,285,1,285,3,285,4642,8,285,1,286,
        1,286,1,286,1,286,3,286,4648,8,286,1,286,1,286,1,286,1,286,3,286,
        4654,8,286,1,286,1,286,1,286,1,286,1,286,5,286,4661,8,286,10,286,
        12,286,4664,9,286,3,286,4666,8,286,1,286,3,286,4669,8,286,1,287,
        1,287,1,287,1,287,1,287,3,287,4676,8,287,1,288,1,288,1,288,1,288,
        1,289,1,289,1,289,1,289,1,289,3,289,4687,8,289,1,289,1,289,1,290,
        1,290,1,290,1,290,1,290,3,290,4696,8,290,1,290,1,290,1,291,1,291,
        1,291,1,291,3,291,4704,8,291,1,292,1,292,1,292,1,292,1,292,1,292,
        3,292,4712,8,292,1,292,1,292,1,292,1,293,1,293,1,293,1,293,3,293,
        4721,8,293,1,293,1,293,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
        1,294,1,294,3,294,4734,8,294,1,295,1,295,1,295,1,295,1,295,1,296,
        1,296,1,296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,
        3,297,4753,8,297,1,297,1,297,1,297,1,297,1,297,5,297,4760,8,297,
        10,297,12,297,4763,9,297,3,297,4765,8,297,1,297,3,297,4768,8,297,
        1,298,1,298,1,298,1,298,5,298,4774,8,298,10,298,12,298,4777,9,298,
        1,299,1,299,1,299,1,299,1,299,3,299,4784,8,299,1,299,1,299,3,299,
        4788,8,299,1,299,1,299,1,299,3,299,4793,8,299,1,299,1,299,1,299,
        3,299,4798,8,299,3,299,4800,8,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,3,299,4810,8,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,3,299,4822,8,299,1,299,1,299,1,299,
        1,299,1,299,3,299,4829,8,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,3,299,4840,8,299,1,299,1,299,3,299,4844,8,299,
        1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,300,
        4856,8,300,1,301,1,301,1,301,1,301,3,301,4862,8,301,1,302,1,302,
        1,302,1,302,1,303,1,303,1,303,1,303,1,303,1,303,1,303,3,303,4875,
        8,303,1,304,1,304,1,304,1,304,3,304,4881,8,304,1,305,1,305,1,305,
        1,305,3,305,4887,8,305,1,305,1,305,1,306,1,306,1,306,5,306,4894,
        8,306,10,306,12,306,4897,9,306,1,307,1,307,1,307,1,307,1,307,1,307,
        1,308,1,308,1,308,1,308,1,308,3,308,4910,8,308,1,308,1,308,3,308,
        4914,8,308,1,308,1,308,3,308,4918,8,308,1,308,1,308,3,308,4922,8,
        308,1,308,3,308,4925,8,308,1,308,3,308,4928,8,308,1,308,3,308,4931,
        8,308,1,308,1,308,3,308,4935,8,308,1,308,1,308,3,308,4939,8,308,
        1,308,3,308,4942,8,308,1,308,3,308,4945,8,308,1,308,3,308,4948,8,
        308,1,308,1,308,1,308,1,308,1,308,5,308,4955,8,308,10,308,12,308,
        4958,9,308,1,308,1,308,3,308,4962,8,308,1,309,1,309,3,309,4966,8,
        309,1,309,3,309,4969,8,309,1,309,1,309,1,310,1,310,3,310,4975,8,
        310,1,310,3,310,4978,8,310,1,310,3,310,4981,8,310,1,311,1,311,3,
        311,4985,8,311,1,311,1,311,3,311,4989,8,311,1,312,3,312,4992,8,312,
        1,312,1,312,1,313,1,313,1,313,1,313,5,313,5000,8,313,10,313,12,313,
        5003,9,313,1,314,1,314,1,314,1,314,1,314,1,314,5,314,5011,8,314,
        10,314,12,314,5014,9,314,3,314,5016,8,314,1,314,3,314,5019,8,314,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,5052,
        8,315,1,316,1,316,1,316,3,316,5057,8,316,1,316,1,316,1,316,3,316,
        5062,8,316,1,316,1,316,1,316,1,316,3,316,5068,8,316,1,316,5,316,
        5071,8,316,10,316,12,316,5074,9,316,1,317,1,317,1,317,1,317,1,318,
        1,318,1,318,1,318,1,319,1,319,3,319,5086,8,319,1,319,1,319,3,319,
        5090,8,319,1,320,1,320,1,320,1,320,3,320,5096,8,320,1,320,1,320,
        1,320,1,320,3,320,5102,8,320,1,321,1,321,3,321,5106,8,321,1,321,
        1,321,1,321,5,321,5111,8,321,10,321,12,321,5114,9,321,1,321,1,321,
        1,321,3,321,5119,8,321,1,321,1,321,1,321,3,321,5124,8,321,1,321,
        1,321,3,321,5128,8,321,1,321,1,321,1,321,1,321,1,321,3,321,5135,
        8,321,1,322,1,322,1,322,3,322,5140,8,322,3,322,5142,8,322,1,322,
        1,322,3,322,5146,8,322,1,323,1,323,1,323,3,323,5151,8,323,1,323,
        1,323,1,323,1,323,3,323,5157,8,323,1,323,1,323,1,323,1,323,1,323,
        1,323,1,323,5,323,5166,8,323,10,323,12,323,5169,9,323,1,323,1,323,
        1,323,3,323,5174,8,323,1,324,1,324,3,324,5178,8,324,1,324,1,324,
        5,324,5182,8,324,10,324,12,324,5185,9,324,1,324,1,324,1,325,1,325,
        3,325,5191,8,325,1,325,1,325,1,325,1,325,1,325,1,326,1,326,1,327,
        1,327,3,327,5202,8,327,1,327,1,327,3,327,5206,8,327,3,327,5208,8,
        327,1,327,1,327,1,327,1,327,1,327,3,327,5215,8,327,1,328,1,328,1,
        328,3,328,5220,8,328,1,328,5,328,5223,8,328,10,328,12,328,5226,9,
        328,1,329,1,329,5,329,5230,8,329,10,329,12,329,5233,9,329,1,329,
        1,329,1,329,5,329,5238,8,329,10,329,12,329,5241,9,329,1,329,1,329,
        3,329,5245,8,329,1,330,1,330,3,330,5249,8,330,1,330,3,330,5252,8,
        330,1,330,3,330,5255,8,330,1,330,3,330,5258,8,330,1,330,3,330,5261,
        8,330,1,330,3,330,5264,8,330,1,330,3,330,5267,8,330,1,330,1,330,
        1,330,1,330,1,330,5,330,5274,8,330,10,330,12,330,5277,9,330,1,330,
        1,330,3,330,5281,8,330,1,330,1,330,3,330,5285,8,330,3,330,5287,8,
        330,1,330,1,330,3,330,5291,8,330,1,330,1,330,3,330,5295,8,330,3,
        330,5297,8,330,1,330,1,330,1,330,1,330,1,330,3,330,5304,8,330,1,
        330,1,330,3,330,5308,8,330,3,330,5310,8,330,1,330,1,330,1,330,1,
        330,1,330,1,330,1,330,1,330,3,330,5320,8,330,1,330,1,330,3,330,5324,
        8,330,3,330,5326,8,330,1,330,1,330,1,330,3,330,5331,8,330,1,330,
        1,330,3,330,5335,8,330,3,330,5337,8,330,1,330,1,330,1,330,1,330,
        3,330,5343,8,330,1,331,1,331,1,331,1,331,1,331,5,331,5350,8,331,
        10,331,12,331,5353,9,331,1,331,1,331,1,331,3,331,5358,8,331,1,331,
        1,331,1,331,1,331,1,331,5,331,5365,8,331,10,331,12,331,5368,9,331,
        1,331,1,331,1,331,1,332,1,332,3,332,5375,8,332,1,332,1,332,3,332,
        5379,8,332,3,332,5381,8,332,1,333,1,333,3,333,5385,8,333,1,333,3,
        333,5388,8,333,1,333,1,333,3,333,5392,8,333,3,333,5394,8,333,1,334,
        1,334,1,335,1,335,3,335,5400,8,335,1,335,3,335,5403,8,335,1,335,
        1,335,3,335,5407,8,335,1,335,1,335,3,335,5411,8,335,1,335,3,335,
        5414,8,335,1,335,1,335,1,335,3,335,5419,8,335,1,336,1,336,1,336,
        1,336,1,336,1,336,3,336,5427,8,336,1,337,1,337,1,337,1,337,1,337,
        1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
        1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
        3,337,5456,8,337,1,338,1,338,1,338,1,338,5,338,5462,8,338,10,338,
        12,338,5465,9,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        1,338,3,338,5476,8,338,1,339,1,339,1,339,1,339,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,5,340,5489,8,340,10,340,12,340,5492,9,340,
        1,340,1,340,3,340,5496,8,340,1,341,1,341,1,341,1,341,5,341,5502,
        8,341,10,341,12,341,5505,9,341,1,341,1,341,1,342,3,342,5510,8,342,
        1,342,1,342,1,342,1,342,1,342,5,342,5517,8,342,10,342,12,342,5520,
        9,342,1,342,1,342,1,342,3,342,5525,8,342,1,342,1,342,1,342,3,342,
        5530,8,342,1,343,1,343,1,343,1,343,1,343,5,343,5537,8,343,10,343,
        12,343,5540,9,343,1,343,1,343,1,344,1,344,1,344,1,344,1,344,5,344,
        5549,8,344,10,344,12,344,5552,9,344,1,344,1,344,1,345,1,345,1,345,
        1,345,1,345,1,346,1,346,3,346,5563,8,346,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,5,347,5573,8,347,10,347,12,347,5576,9,347,
        3,347,5578,8,347,1,348,1,348,1,348,1,348,1,349,1,349,1,349,1,349,
        1,349,5,349,5589,8,349,10,349,12,349,5592,9,349,1,349,1,349,1,350,
        1,350,1,350,1,350,5,350,5600,8,350,10,350,12,350,5603,9,350,1,350,
        1,350,1,351,1,351,3,351,5609,8,351,1,352,1,352,1,352,5,352,5614,
        8,352,10,352,12,352,5617,9,352,1,353,1,353,1,353,1,353,1,354,1,354,
        1,354,1,355,1,355,3,355,5628,8,355,1,355,1,355,1,355,3,355,5633,
        8,355,1,355,1,355,1,355,1,355,1,355,1,355,5,355,5641,8,355,10,355,
        12,355,5644,9,355,1,356,1,356,1,356,5,356,5649,8,356,10,356,12,356,
        5652,9,356,1,357,1,357,1,357,1,357,1,357,1,357,3,357,5660,8,357,
        1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,
        5,357,5673,8,357,10,357,12,357,5676,9,357,1,358,1,358,3,358,5680,
        8,358,1,358,3,358,5683,8,358,1,359,1,359,1,359,1,359,4,359,5689,
        8,359,11,359,12,359,5690,1,359,1,359,3,359,5695,8,359,1,359,1,359,
        1,359,1,359,1,359,1,360,3,360,5703,8,360,1,360,1,360,1,360,1,360,
        1,360,1,360,3,360,5711,8,360,1,360,1,360,1,360,1,360,1,360,1,360,
        3,360,5719,8,360,1,360,1,360,1,360,1,360,1,360,1,360,3,360,5727,
        8,360,1,360,1,360,3,360,5731,8,360,1,361,1,361,1,361,1,361,1,361,
        1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
        1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
        5,361,5760,8,361,10,361,12,361,5763,9,361,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,4,362,
        5812,8,362,11,362,12,362,5813,1,362,1,362,3,362,5818,8,362,1,362,
        1,362,1,362,1,362,4,362,5824,8,362,11,362,12,362,5825,1,362,1,362,
        3,362,5830,8,362,1,362,1,362,1,362,3,362,5835,8,362,1,362,1,362,
        3,362,5839,8,362,1,362,1,362,1,362,1,362,3,362,5845,8,362,1,362,
        1,362,1,362,1,362,1,362,3,362,5852,8,362,1,362,1,362,1,362,3,362,
        5857,8,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,5866,
        8,362,1,362,1,362,3,362,5870,8,362,1,362,1,362,1,362,1,362,1,362,
        3,362,5877,8,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,5885,
        8,362,1,362,1,362,1,362,1,362,3,362,5891,8,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,3,362,5901,8,362,1,362,1,362,3,362,
        5905,8,362,1,362,1,362,1,362,1,362,5,362,5911,8,362,10,362,12,362,
        5914,9,362,1,363,1,363,1,363,1,363,1,363,1,363,1,363,1,363,1,363,
        1,363,3,363,5926,8,363,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,5,364,5940,8,364,10,364,12,364,5943,
        9,364,3,364,5945,8,364,1,364,1,364,1,364,1,364,1,364,1,364,5,364,
        5953,8,364,10,364,12,364,5956,9,364,3,364,5958,8,364,1,364,1,364,
        1,364,1,364,1,364,1,364,3,364,5966,8,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,5,364,5976,8,364,10,364,12,364,5979,9,364,
        3,364,5981,8,364,1,364,1,364,3,364,5985,8,364,3,364,5987,8,364,1,
        365,1,365,1,365,3,365,5992,8,365,1,365,1,365,1,365,1,365,1,365,1,
        365,3,365,6000,8,365,1,365,1,365,1,365,1,365,1,365,3,365,6007,8,
        365,3,365,6009,8,365,1,365,1,365,1,365,5,365,6014,8,365,10,365,12,
        365,6017,9,365,3,365,6019,8,365,1,365,1,365,1,365,1,365,3,365,6025,
        8,365,1,365,1,365,1,365,1,365,1,365,1,365,3,365,6033,8,365,1,365,
        1,365,1,365,1,365,1,365,1,365,3,365,6041,8,365,1,365,1,365,1,365,
        1,365,1,365,1,365,3,365,6049,8,365,1,365,1,365,1,365,1,365,1,365,
        1,365,5,365,6057,8,365,10,365,12,365,6060,9,365,3,365,6062,8,365,
        1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,5,365,
        6074,8,365,10,365,12,365,6077,9,365,3,365,6079,8,365,1,365,1,365,
        1,365,1,365,1,365,3,365,6086,8,365,1,365,1,365,1,365,5,365,6091,
        8,365,10,365,12,365,6094,9,365,1,365,1,365,1,365,1,365,1,365,5,365,
        6101,8,365,10,365,12,365,6104,9,365,3,365,6106,8,365,1,365,1,365,
        3,365,6110,8,365,1,365,1,365,3,365,6114,8,365,1,366,1,366,1,366,
        1,367,1,367,1,367,1,367,1,367,3,367,6124,8,367,1,367,1,367,1,368,
        1,368,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,
        1,369,1,369,1,369,1,369,1,369,3,369,6145,8,369,1,369,1,369,1,369,
        3,369,6150,8,369,3,369,6152,8,369,1,370,1,370,1,370,3,370,6157,8,
        370,1,370,1,370,1,370,3,370,6162,8,370,1,370,1,370,1,370,3,370,6167,
        8,370,1,370,1,370,1,370,3,370,6172,8,370,1,370,1,370,1,370,3,370,
        6177,8,370,3,370,6179,8,370,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,5,371,6201,8,371,10,371,12,371,6204,9,371,3,371,
        6206,8,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,5,371,6257,8,371,10,371,
        12,371,6260,9,371,3,371,6262,8,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,1,371,3,371,6322,
        8,371,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
        1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,3,372,6342,8,372,
        1,372,1,372,1,372,1,372,1,372,3,372,6349,8,372,1,372,1,372,5,372,
        6353,8,372,10,372,12,372,6356,9,372,3,372,6358,8,372,1,372,1,372,
        3,372,6362,8,372,1,372,1,372,1,372,1,372,3,372,6368,8,372,1,372,
        1,372,5,372,6372,8,372,10,372,12,372,6375,9,372,3,372,6377,8,372,
        1,372,1,372,3,372,6381,8,372,1,372,1,372,1,372,1,372,3,372,6387,
        8,372,1,372,1,372,5,372,6391,8,372,10,372,12,372,6394,9,372,3,372,
        6396,8,372,1,372,1,372,3,372,6400,8,372,1,372,1,372,1,372,1,372,
        3,372,6406,8,372,1,372,1,372,5,372,6410,8,372,10,372,12,372,6413,
        9,372,3,372,6415,8,372,1,372,1,372,3,372,6419,8,372,3,372,6421,8,
        372,1,373,1,373,1,373,1,373,1,373,1,374,1,374,1,374,3,374,6431,8,
        374,1,374,1,374,1,374,1,374,1,374,5,374,6438,8,374,10,374,12,374,
        6441,9,374,3,374,6443,8,374,1,374,1,374,1,374,1,374,1,374,5,374,
        6450,8,374,10,374,12,374,6453,9,374,3,374,6455,8,374,1,374,3,374,
        6458,8,374,1,374,1,374,1,375,1,375,1,375,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,3,376,6481,8,376,1,377,1,377,1,377,1,377,1,377,1,377,1,377,
        1,377,1,377,3,377,6492,8,377,1,378,1,378,3,378,6496,8,378,1,379,
        1,379,3,379,6500,8,379,1,379,1,379,3,379,6504,8,379,1,380,1,380,
        3,380,6508,8,380,1,381,1,381,1,381,3,381,6513,8,381,1,382,1,382,
        1,382,1,382,1,382,1,382,1,382,1,382,5,382,6523,8,382,10,382,12,382,
        6526,9,382,3,382,6528,8,382,1,382,1,382,1,382,1,382,1,382,1,382,
        1,382,1,382,1,382,1,382,5,382,6540,8,382,10,382,12,382,6543,9,382,
        3,382,6545,8,382,1,382,1,382,1,382,1,382,1,382,3,382,6552,8,382,
        1,382,1,382,1,382,1,382,1,382,5,382,6559,8,382,10,382,12,382,6562,
        9,382,3,382,6564,8,382,1,382,1,382,1,382,1,382,1,382,3,382,6571,
        8,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,5,382,6581,
        8,382,10,382,12,382,6584,9,382,3,382,6586,8,382,1,382,1,382,1,382,
        1,382,1,382,3,382,6593,8,382,1,383,1,383,3,383,6597,8,383,1,384,
        1,384,1,384,1,384,3,384,6603,8,384,1,384,1,384,1,384,1,384,1,384,
        3,384,6610,8,384,1,385,1,385,1,385,1,385,3,385,6616,8,385,1,385,
        1,385,1,385,1,385,1,385,1,385,1,385,5,385,6625,8,385,10,385,12,385,
        6628,9,385,1,385,1,385,3,385,6632,8,385,1,386,1,386,1,386,1,386,
        5,386,6638,8,386,10,386,12,386,6641,9,386,1,386,1,386,1,387,1,387,
        3,387,6647,8,387,1,388,1,388,1,388,1,388,5,388,6653,8,388,10,388,
        12,388,6656,9,388,1,388,1,388,1,389,1,389,1,389,1,389,5,389,6664,
        8,389,10,389,12,389,6667,9,389,1,389,1,389,1,390,1,390,3,390,6673,
        8,390,1,391,1,391,1,391,1,391,3,391,6679,8,391,1,391,1,391,1,391,
        1,391,3,391,6685,8,391,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,6713,8,392,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,394,1,394,
        1,394,1,394,3,394,6728,8,394,1,394,1,394,1,394,1,394,1,394,1,394,
        3,394,6736,8,394,1,395,1,395,1,395,1,395,5,395,6742,8,395,10,395,
        12,395,6745,9,395,1,395,1,395,1,396,1,396,1,396,1,396,1,397,1,397,
        3,397,6755,8,397,1,398,1,398,1,398,1,398,1,398,1,398,3,398,6763,
        8,398,1,398,1,398,1,398,1,398,3,398,6769,8,398,1,399,1,399,1,399,
        1,399,1,399,1,399,3,399,6777,8,399,1,399,1,399,1,399,1,399,1,399,
        1,399,1,399,1,399,1,399,3,399,6788,8,399,3,399,6790,8,399,1,400,
        1,400,3,400,6794,8,400,1,400,1,400,1,400,1,400,1,400,1,400,1,400,
        3,400,6803,8,400,1,400,1,400,1,400,1,400,1,400,1,400,1,400,3,400,
        6812,8,400,1,401,1,401,1,402,1,402,1,402,1,402,1,402,5,402,6821,
        8,402,10,402,12,402,6824,9,402,1,402,1,402,1,403,1,403,1,403,1,404,
        1,404,1,404,1,404,5,404,6835,8,404,10,404,12,404,6838,9,404,1,404,
        1,404,1,405,1,405,1,405,5,405,6845,8,405,10,405,12,405,6848,9,405,
        1,406,1,406,1,406,1,406,1,407,1,407,1,408,1,408,1,408,1,409,1,409,
        1,409,1,409,3,409,6863,8,409,1,409,3,409,6866,8,409,1,410,1,410,
        1,410,1,410,3,410,6872,8,410,1,411,1,411,1,412,1,412,1,413,1,413,
        1,414,1,414,1,415,1,415,1,415,1,415,1,416,1,416,1,416,1,416,1,417,
        1,417,1,418,1,418,1,419,1,419,1,420,1,420,1,420,1,420,1,420,3,420,
        6901,8,420,1,421,1,421,1,421,1,421,1,421,1,422,1,422,1,422,1,422,
        1,422,1,422,1,422,1,423,1,423,3,423,6917,8,423,1,423,1,423,1,424,
        1,424,1,424,5,424,6924,8,424,10,424,12,424,6927,9,424,1,425,1,425,
        1,425,1,425,1,425,1,426,1,426,1,426,1,426,1,427,1,427,1,427,3,427,
        6941,8,427,1,427,1,427,3,427,6945,8,427,1,427,1,427,3,427,6949,8,
        427,1,427,1,427,3,427,6953,8,427,1,427,1,427,3,427,6957,8,427,1,
        427,1,427,3,427,6961,8,427,1,427,1,427,3,427,6965,8,427,1,427,1,
        427,3,427,6969,8,427,1,427,1,427,3,427,6973,8,427,1,427,1,427,3,
        427,6977,8,427,1,427,1,427,1,427,1,427,1,427,1,427,1,427,3,427,6986,
        8,427,1,427,1,427,3,427,6990,8,427,1,427,1,427,1,427,1,427,1,427,
        1,427,1,427,1,427,3,427,7000,8,427,1,427,1,427,3,427,7004,8,427,
        3,427,7006,8,427,1,428,1,428,1,428,1,428,1,428,3,428,7013,8,428,
        1,428,3,428,7016,8,428,1,429,1,429,1,429,1,429,5,429,7022,8,429,
        10,429,12,429,7025,9,429,1,430,1,430,1,430,1,430,3,430,7031,8,430,
        1,431,1,431,1,431,1,431,5,431,7037,8,431,10,431,12,431,7040,9,431,
        1,431,1,431,1,432,1,432,3,432,7046,8,432,1,433,1,433,1,433,5,433,
        7051,8,433,10,433,12,433,7054,9,433,1,434,1,434,1,434,3,434,7059,
        8,434,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,3,435,7072,8,435,1,436,1,436,1,436,1,436,1,437,1,437,1,437,
        5,437,7081,8,437,10,437,12,437,7084,9,437,1,438,1,438,1,438,3,438,
        7089,8,438,1,439,1,439,1,439,0,5,632,710,714,722,724,440,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
        258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
        290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
        322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
        354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,
        386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,
        418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
        450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,
        482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,
        514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,
        546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
        578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,
        610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,
        642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,
        674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,
        706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,
        738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,
        770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,
        802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,
        834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
        866,868,870,872,874,876,878,0,56,1,1,495,495,2,0,153,153,182,182,
        2,0,88,88,357,357,2,0,132,132,396,396,4,0,7,7,116,116,297,297,418,
        418,7,0,33,33,172,172,237,237,242,242,287,287,328,329,384,384,3,
        0,32,32,199,199,253,253,2,0,62,62,138,138,3,0,61,61,270,270,346,
        346,1,0,107,108,2,0,185,186,206,207,2,0,19,19,386,386,2,0,148,148,
        263,263,2,0,182,182,407,407,2,0,27,27,79,79,2,0,198,198,200,200,
        2,0,156,156,354,354,2,0,203,203,377,377,2,0,41,41,159,159,2,0,7,
        7,391,391,2,0,157,157,302,302,1,0,393,394,2,0,124,124,441,441,1,
        0,425,426,2,0,17,17,42,42,2,0,154,154,481,481,3,0,127,127,244,244,
        417,417,2,0,18,18,107,107,2,0,142,142,212,212,2,0,278,278,481,481,
        2,0,8,8,110,110,1,0,279,280,2,0,93,93,114,114,2,0,11,11,469,469,
        2,0,273,273,468,468,3,0,219,219,322,322,342,342,3,0,246,246,465,
        467,471,471,1,0,463,464,2,0,463,464,475,475,1,0,90,91,2,0,147,147,
        295,295,2,0,107,108,130,130,5,0,10,10,73,73,229,229,356,356,433,
        433,5,0,8,8,228,228,318,318,401,401,429,429,2,0,103,103,179,179,
        2,0,3,3,183,183,4,0,159,159,223,223,365,365,433,433,1,0,484,485,
        1,0,486,487,1,0,455,461,2,0,137,137,411,411,4,0,92,92,174,174,243,
        243,359,359,9,0,92,92,174,174,240,241,243,243,249,249,309,309,359,
        359,442,442,449,449,2,0,49,49,145,145,2,0,94,98,261,262,93,0,2,3,
        5,7,12,13,15,16,19,28,31,31,33,37,39,41,43,44,46,50,53,53,55,58,
        60,60,62,66,68,71,73,74,78,80,86,87,90,93,99,99,104,105,109,109,
        111,112,116,117,119,126,128,128,131,136,138,139,141,142,145,148,
        151,152,154,155,158,159,161,161,166,167,169,170,172,176,178,178,
        181,181,183,184,186,186,189,189,193,195,197,197,200,200,202,203,
        209,209,212,212,217,218,221,221,223,223,226,237,239,239,242,245,
        247,257,260,265,267,269,271,272,280,285,287,295,298,301,303,314,
        316,316,318,321,324,324,326,327,329,338,340,340,343,348,351,356,
        359,360,362,365,367,367,369,370,373,381,383,386,388,390,392,396,
        398,398,400,404,406,406,408,410,412,416,419,420,423,423,425,426,
        428,428,430,430,432,442,445,445,447,454,462,462,496,496,8017,0,881,
        1,0,0,0,2,891,1,0,0,0,4,893,1,0,0,0,6,1098,1,0,0,0,8,1100,1,0,0,
        0,10,1103,1,0,0,0,12,1106,1,0,0,0,14,1130,1,0,0,0,16,1148,1,0,0,
        0,18,1150,1,0,0,0,20,1172,1,0,0,0,22,1187,1,0,0,0,24,1192,1,0,0,
        0,26,1198,1,0,0,0,28,1208,1,0,0,0,30,1210,1,0,0,0,32,1268,1,0,0,
        0,34,1300,1,0,0,0,36,1302,1,0,0,0,38,1314,1,0,0,0,40,1317,1,0,0,
        0,42,1329,1,0,0,0,44,1334,1,0,0,0,46,1349,1,0,0,0,48,1357,1,0,0,
        0,50,1361,1,0,0,0,52,1365,1,0,0,0,54,1367,1,0,0,0,56,1379,1,0,0,
        0,58,1390,1,0,0,0,60,1394,1,0,0,0,62,1399,1,0,0,0,64,1404,1,0,0,
        0,66,1406,1,0,0,0,68,1468,1,0,0,0,70,1481,1,0,0,0,72,1525,1,0,0,
        0,74,1527,1,0,0,0,76,1542,1,0,0,0,78,1548,1,0,0,0,80,1551,1,0,0,
        0,82,1566,1,0,0,0,84,1579,1,0,0,0,86,1589,1,0,0,0,88,1607,1,0,0,
        0,90,1620,1,0,0,0,92,1692,1,0,0,0,94,1694,1,0,0,0,96,1699,1,0,0,
        0,98,1722,1,0,0,0,100,1731,1,0,0,0,102,1735,1,0,0,0,104,1767,1,0,
        0,0,106,1769,1,0,0,0,108,1795,1,0,0,0,110,1801,1,0,0,0,112,1832,
        1,0,0,0,114,1851,1,0,0,0,116,1859,1,0,0,0,118,1863,1,0,0,0,120,1882,
        1,0,0,0,122,1884,1,0,0,0,124,1890,1,0,0,0,126,1903,1,0,0,0,128,1951,
        1,0,0,0,130,1953,1,0,0,0,132,1966,1,0,0,0,134,1991,1,0,0,0,136,1993,
        1,0,0,0,138,2009,1,0,0,0,140,2017,1,0,0,0,142,2025,1,0,0,0,144,2031,
        1,0,0,0,146,2039,1,0,0,0,148,2048,1,0,0,0,150,2061,1,0,0,0,152,2068,
        1,0,0,0,154,2076,1,0,0,0,156,2084,1,0,0,0,158,2099,1,0,0,0,160,2108,
        1,0,0,0,162,2110,1,0,0,0,164,2114,1,0,0,0,166,2125,1,0,0,0,168,2129,
        1,0,0,0,170,2143,1,0,0,0,172,2148,1,0,0,0,174,2156,1,0,0,0,176,2159,
        1,0,0,0,178,2164,1,0,0,0,180,2181,1,0,0,0,182,2185,1,0,0,0,184,2189,
        1,0,0,0,186,2196,1,0,0,0,188,2205,1,0,0,0,190,2219,1,0,0,0,192,2221,
        1,0,0,0,194,2224,1,0,0,0,196,2228,1,0,0,0,198,2233,1,0,0,0,200,2277,
        1,0,0,0,202,2279,1,0,0,0,204,2290,1,0,0,0,206,2308,1,0,0,0,208,2314,
        1,0,0,0,210,2318,1,0,0,0,212,2323,1,0,0,0,214,2334,1,0,0,0,216,2336,
        1,0,0,0,218,2379,1,0,0,0,220,2381,1,0,0,0,222,2385,1,0,0,0,224,2389,
        1,0,0,0,226,2396,1,0,0,0,228,2406,1,0,0,0,230,2419,1,0,0,0,232,2442,
        1,0,0,0,234,2444,1,0,0,0,236,2455,1,0,0,0,238,2492,1,0,0,0,240,2494,
        1,0,0,0,242,2501,1,0,0,0,244,2504,1,0,0,0,246,2509,1,0,0,0,248,2523,
        1,0,0,0,250,2538,1,0,0,0,252,2552,1,0,0,0,254,2567,1,0,0,0,256,2580,
        1,0,0,0,258,2584,1,0,0,0,260,2587,1,0,0,0,262,2591,1,0,0,0,264,2594,
        1,0,0,0,266,2599,1,0,0,0,268,2613,1,0,0,0,270,2628,1,0,0,0,272,2647,
        1,0,0,0,274,2657,1,0,0,0,276,2672,1,0,0,0,278,2678,1,0,0,0,280,2688,
        1,0,0,0,282,2694,1,0,0,0,284,2703,1,0,0,0,286,2705,1,0,0,0,288,2714,
        1,0,0,0,290,2728,1,0,0,0,292,2766,1,0,0,0,294,2768,1,0,0,0,296,2781,
        1,0,0,0,298,2798,1,0,0,0,300,2800,1,0,0,0,302,2807,1,0,0,0,304,2813,
        1,0,0,0,306,2849,1,0,0,0,308,2864,1,0,0,0,310,2883,1,0,0,0,312,2912,
        1,0,0,0,314,2938,1,0,0,0,316,2948,1,0,0,0,318,2950,1,0,0,0,320,2955,
        1,0,0,0,322,2960,1,0,0,0,324,2963,1,0,0,0,326,2980,1,0,0,0,328,2982,
        1,0,0,0,330,2984,1,0,0,0,332,2995,1,0,0,0,334,3006,1,0,0,0,336,3017,
        1,0,0,0,338,3055,1,0,0,0,340,3066,1,0,0,0,342,3077,1,0,0,0,344,3115,
        1,0,0,0,346,3142,1,0,0,0,348,3146,1,0,0,0,350,3173,1,0,0,0,352,3229,
        1,0,0,0,354,3231,1,0,0,0,356,3235,1,0,0,0,358,3244,1,0,0,0,360,3251,
        1,0,0,0,362,3258,1,0,0,0,364,3279,1,0,0,0,366,3281,1,0,0,0,368,3317,
        1,0,0,0,370,3374,1,0,0,0,372,3386,1,0,0,0,374,3397,1,0,0,0,376,3399,
        1,0,0,0,378,3408,1,0,0,0,380,3414,1,0,0,0,382,3418,1,0,0,0,384,3421,
        1,0,0,0,386,3425,1,0,0,0,388,3443,1,0,0,0,390,3453,1,0,0,0,392,3475,
        1,0,0,0,394,3516,1,0,0,0,396,3521,1,0,0,0,398,3525,1,0,0,0,400,3605,
        1,0,0,0,402,3607,1,0,0,0,404,3641,1,0,0,0,406,3643,1,0,0,0,408,3649,
        1,0,0,0,410,3696,1,0,0,0,412,3698,1,0,0,0,414,3708,1,0,0,0,416,3720,
        1,0,0,0,418,3725,1,0,0,0,420,3728,1,0,0,0,422,3731,1,0,0,0,424,3734,
        1,0,0,0,426,3748,1,0,0,0,428,3756,1,0,0,0,430,3762,1,0,0,0,432,3770,
        1,0,0,0,434,3782,1,0,0,0,436,3785,1,0,0,0,438,3788,1,0,0,0,440,3791,
        1,0,0,0,442,3794,1,0,0,0,444,3798,1,0,0,0,446,3801,1,0,0,0,448,3810,
        1,0,0,0,450,3814,1,0,0,0,452,3823,1,0,0,0,454,3829,1,0,0,0,456,3836,
        1,0,0,0,458,3876,1,0,0,0,460,3878,1,0,0,0,462,3888,1,0,0,0,464,3903,
        1,0,0,0,466,3913,1,0,0,0,468,3924,1,0,0,0,470,3929,1,0,0,0,472,3932,
        1,0,0,0,474,3948,1,0,0,0,476,3979,1,0,0,0,478,3981,1,0,0,0,480,3993,
        1,0,0,0,482,3995,1,0,0,0,484,4003,1,0,0,0,486,4014,1,0,0,0,488,4026,
        1,0,0,0,490,4034,1,0,0,0,492,4051,1,0,0,0,494,4067,1,0,0,0,496,4085,
        1,0,0,0,498,4087,1,0,0,0,500,4104,1,0,0,0,502,4194,1,0,0,0,504,4260,
        1,0,0,0,506,4276,1,0,0,0,508,4291,1,0,0,0,510,4293,1,0,0,0,512,4298,
        1,0,0,0,514,4306,1,0,0,0,516,4321,1,0,0,0,518,4370,1,0,0,0,520,4385,
        1,0,0,0,522,4404,1,0,0,0,524,4406,1,0,0,0,526,4429,1,0,0,0,528,4435,
        1,0,0,0,530,4441,1,0,0,0,532,4464,1,0,0,0,534,4470,1,0,0,0,536,4480,
        1,0,0,0,538,4488,1,0,0,0,540,4507,1,0,0,0,542,4511,1,0,0,0,544,4515,
        1,0,0,0,546,4525,1,0,0,0,548,4528,1,0,0,0,550,4531,1,0,0,0,552,4542,
        1,0,0,0,554,4553,1,0,0,0,556,4557,1,0,0,0,558,4563,1,0,0,0,560,4580,
        1,0,0,0,562,4584,1,0,0,0,564,4589,1,0,0,0,566,4593,1,0,0,0,568,4612,
        1,0,0,0,570,4631,1,0,0,0,572,4643,1,0,0,0,574,4670,1,0,0,0,576,4677,
        1,0,0,0,578,4681,1,0,0,0,580,4690,1,0,0,0,582,4699,1,0,0,0,584,4705,
        1,0,0,0,586,4716,1,0,0,0,588,4733,1,0,0,0,590,4735,1,0,0,0,592,4740,
        1,0,0,0,594,4744,1,0,0,0,596,4769,1,0,0,0,598,4843,1,0,0,0,600,4855,
        1,0,0,0,602,4861,1,0,0,0,604,4863,1,0,0,0,606,4874,1,0,0,0,608,4880,
        1,0,0,0,610,4882,1,0,0,0,612,4890,1,0,0,0,614,4898,1,0,0,0,616,4961,
        1,0,0,0,618,4963,1,0,0,0,620,4980,1,0,0,0,622,4984,1,0,0,0,624,4991,
        1,0,0,0,626,4995,1,0,0,0,628,5004,1,0,0,0,630,5051,1,0,0,0,632,5056,
        1,0,0,0,634,5075,1,0,0,0,636,5079,1,0,0,0,638,5083,1,0,0,0,640,5101,
        1,0,0,0,642,5103,1,0,0,0,644,5145,1,0,0,0,646,5173,1,0,0,0,648,5175,
        1,0,0,0,650,5188,1,0,0,0,652,5197,1,0,0,0,654,5214,1,0,0,0,656,5216,
        1,0,0,0,658,5244,1,0,0,0,660,5342,1,0,0,0,662,5344,1,0,0,0,664,5372,
        1,0,0,0,666,5384,1,0,0,0,668,5395,1,0,0,0,670,5418,1,0,0,0,672,5426,
        1,0,0,0,674,5455,1,0,0,0,676,5475,1,0,0,0,678,5477,1,0,0,0,680,5495,
        1,0,0,0,682,5497,1,0,0,0,684,5529,1,0,0,0,686,5531,1,0,0,0,688,5543,
        1,0,0,0,690,5555,1,0,0,0,692,5562,1,0,0,0,694,5564,1,0,0,0,696,5579,
        1,0,0,0,698,5583,1,0,0,0,700,5595,1,0,0,0,702,5608,1,0,0,0,704,5610,
        1,0,0,0,706,5618,1,0,0,0,708,5622,1,0,0,0,710,5632,1,0,0,0,712,5645,
        1,0,0,0,714,5653,1,0,0,0,716,5682,1,0,0,0,718,5684,1,0,0,0,720,5730,
        1,0,0,0,722,5732,1,0,0,0,724,5869,1,0,0,0,726,5925,1,0,0,0,728,5986,
        1,0,0,0,730,6113,1,0,0,0,732,6115,1,0,0,0,734,6118,1,0,0,0,736,6127,
        1,0,0,0,738,6151,1,0,0,0,740,6178,1,0,0,0,742,6321,1,0,0,0,744,6420,
        1,0,0,0,746,6422,1,0,0,0,748,6427,1,0,0,0,750,6461,1,0,0,0,752,6480,
        1,0,0,0,754,6491,1,0,0,0,756,6493,1,0,0,0,758,6497,1,0,0,0,760,6505,
        1,0,0,0,762,6509,1,0,0,0,764,6592,1,0,0,0,766,6596,1,0,0,0,768,6598,
        1,0,0,0,770,6611,1,0,0,0,772,6633,1,0,0,0,774,6646,1,0,0,0,776,6648,
        1,0,0,0,778,6659,1,0,0,0,780,6672,1,0,0,0,782,6674,1,0,0,0,784,6712,
        1,0,0,0,786,6714,1,0,0,0,788,6735,1,0,0,0,790,6737,1,0,0,0,792,6748,
        1,0,0,0,794,6754,1,0,0,0,796,6768,1,0,0,0,798,6789,1,0,0,0,800,6791,
        1,0,0,0,802,6813,1,0,0,0,804,6815,1,0,0,0,806,6827,1,0,0,0,808,6830,
        1,0,0,0,810,6841,1,0,0,0,812,6849,1,0,0,0,814,6853,1,0,0,0,816,6855,
        1,0,0,0,818,6858,1,0,0,0,820,6867,1,0,0,0,822,6873,1,0,0,0,824,6875,
        1,0,0,0,826,6877,1,0,0,0,828,6879,1,0,0,0,830,6881,1,0,0,0,832,6885,
        1,0,0,0,834,6889,1,0,0,0,836,6891,1,0,0,0,838,6893,1,0,0,0,840,6900,
        1,0,0,0,842,6902,1,0,0,0,844,6907,1,0,0,0,846,6916,1,0,0,0,848,6920,
        1,0,0,0,850,6928,1,0,0,0,852,6933,1,0,0,0,854,7005,1,0,0,0,856,7007,
        1,0,0,0,858,7017,1,0,0,0,860,7030,1,0,0,0,862,7032,1,0,0,0,864,7045,
        1,0,0,0,866,7047,1,0,0,0,868,7058,1,0,0,0,870,7071,1,0,0,0,872,7073,
        1,0,0,0,874,7077,1,0,0,0,876,7088,1,0,0,0,878,7090,1,0,0,0,880,882,
        3,2,1,0,881,880,1,0,0,0,882,883,1,0,0,0,883,881,1,0,0,0,883,884,
        1,0,0,0,884,885,1,0,0,0,885,886,5,0,0,1,886,1,1,0,0,0,887,888,3,
        6,3,0,888,889,7,0,0,0,889,892,1,0,0,0,890,892,3,4,2,0,891,887,1,
        0,0,0,891,890,1,0,0,0,892,3,1,0,0,0,893,894,5,495,0,0,894,5,1,0,
        0,0,895,1099,3,622,311,0,896,1099,3,8,4,0,897,1099,3,10,5,0,898,
        1099,3,12,6,0,899,1099,3,14,7,0,900,1099,3,16,8,0,901,1099,3,18,
        9,0,902,1099,3,20,10,0,903,1099,3,22,11,0,904,1099,3,24,12,0,905,
        1099,3,26,13,0,906,1099,3,28,14,0,907,1099,3,30,15,0,908,1099,3,
        66,33,0,909,1099,3,96,48,0,910,1099,3,84,42,0,911,1099,3,68,34,0,
        912,1099,3,70,35,0,913,1099,3,100,50,0,914,1099,3,102,51,0,915,1099,
        3,80,40,0,916,1099,3,94,47,0,917,1099,3,88,44,0,918,1099,3,86,43,
        0,919,1099,3,90,45,0,920,1099,3,72,36,0,921,1099,3,104,52,0,922,
        1099,3,92,46,0,923,1099,3,82,41,0,924,1099,3,110,55,0,925,1099,3,
        112,56,0,926,1099,3,114,57,0,927,1099,3,106,53,0,928,1099,3,108,
        54,0,929,1099,3,74,37,0,930,1099,3,76,38,0,931,1099,3,98,49,0,932,
        1099,3,118,59,0,933,1099,3,122,61,0,934,1099,3,126,63,0,935,1099,
        3,130,65,0,936,1099,3,132,66,0,937,1099,3,134,67,0,938,1099,3,136,
        68,0,939,1099,3,138,69,0,940,1099,3,168,84,0,941,1099,3,172,86,0,
        942,1099,3,174,87,0,943,1099,3,170,85,0,944,1099,3,176,88,0,945,
        1099,3,304,152,0,946,1099,3,306,153,0,947,1099,3,308,154,0,948,1099,
        3,310,155,0,949,1099,3,312,156,0,950,1099,3,330,165,0,951,1099,3,
        332,166,0,952,1099,3,334,167,0,953,1099,3,336,168,0,954,1099,3,338,
        169,0,955,1099,3,340,170,0,956,1099,3,342,171,0,957,1099,3,140,70,
        0,958,1099,3,142,71,0,959,1099,3,144,72,0,960,1099,3,146,73,0,961,
        1099,3,148,74,0,962,1099,3,150,75,0,963,1099,3,152,76,0,964,1099,
        3,154,77,0,965,1099,3,156,78,0,966,1099,3,158,79,0,967,1099,3,160,
        80,0,968,1099,3,614,307,0,969,1099,3,162,81,0,970,1099,3,164,82,
        0,971,1099,3,166,83,0,972,1099,3,344,172,0,973,1099,3,346,173,0,
        974,1099,3,352,176,0,975,1099,3,354,177,0,976,1099,3,348,174,0,977,
        1099,3,350,175,0,978,1099,3,356,178,0,979,1099,3,358,179,0,980,1099,
        3,360,180,0,981,1099,3,362,181,0,982,1099,3,364,182,0,983,1099,3,
        366,183,0,984,1099,3,368,184,0,985,1099,3,370,185,0,986,1099,3,372,
        186,0,987,1099,3,374,187,0,988,1099,3,376,188,0,989,1099,3,378,189,
        0,990,1099,3,380,190,0,991,1099,3,382,191,0,992,1099,3,386,193,0,
        993,1099,3,388,194,0,994,1099,3,390,195,0,995,1099,3,394,197,0,996,
        1099,3,408,204,0,997,1099,3,410,205,0,998,1099,3,412,206,0,999,1099,
        3,414,207,0,1000,1099,3,418,209,0,1001,1099,3,420,210,0,1002,1099,
        3,422,211,0,1003,1099,3,424,212,0,1004,1099,3,426,213,0,1005,1099,
        3,428,214,0,1006,1099,3,430,215,0,1007,1099,3,432,216,0,1008,1099,
        3,434,217,0,1009,1099,3,436,218,0,1010,1099,3,438,219,0,1011,1099,
        3,440,220,0,1012,1099,3,442,221,0,1013,1099,3,444,222,0,1014,1099,
        3,446,223,0,1015,1099,3,448,224,0,1016,1099,3,450,225,0,1017,1099,
        3,452,226,0,1018,1099,3,454,227,0,1019,1099,3,456,228,0,1020,1099,
        3,458,229,0,1021,1099,3,460,230,0,1022,1099,3,462,231,0,1023,1099,
        3,464,232,0,1024,1099,3,466,233,0,1025,1099,3,468,234,0,1026,1099,
        3,470,235,0,1027,1099,3,472,236,0,1028,1099,3,474,237,0,1029,1099,
        3,476,238,0,1030,1099,3,478,239,0,1031,1099,3,480,240,0,1032,1099,
        3,482,241,0,1033,1099,3,484,242,0,1034,1099,3,486,243,0,1035,1099,
        3,488,244,0,1036,1099,3,490,245,0,1037,1099,3,492,246,0,1038,1099,
        3,494,247,0,1039,1099,3,496,248,0,1040,1099,3,498,249,0,1041,1099,
        3,502,251,0,1042,1099,3,504,252,0,1043,1099,3,506,253,0,1044,1099,
        3,524,262,0,1045,1099,3,526,263,0,1046,1099,3,528,264,0,1047,1099,
        3,530,265,0,1048,1099,3,532,266,0,1049,1099,3,534,267,0,1050,1099,
        3,536,268,0,1051,1099,3,538,269,0,1052,1099,3,540,270,0,1053,1099,
        3,542,271,0,1054,1099,3,544,272,0,1055,1099,3,546,273,0,1056,1099,
        3,548,274,0,1057,1099,3,550,275,0,1058,1099,3,552,276,0,1059,1099,
        3,554,277,0,1060,1099,3,558,279,0,1061,1099,3,560,280,0,1062,1099,
        3,562,281,0,1063,1099,3,564,282,0,1064,1099,3,566,283,0,1065,1099,
        3,568,284,0,1066,1099,3,570,285,0,1067,1099,3,572,286,0,1068,1099,
        3,574,287,0,1069,1099,3,576,288,0,1070,1099,3,578,289,0,1071,1099,
        3,580,290,0,1072,1099,3,582,291,0,1073,1099,3,596,298,0,1074,1099,
        3,610,305,0,1075,1099,3,178,89,0,1076,1099,3,188,94,0,1077,1099,
        3,186,93,0,1078,1099,3,184,92,0,1079,1099,3,196,98,0,1080,1099,3,
        198,99,0,1081,1099,3,584,292,0,1082,1099,3,586,293,0,1083,1099,3,
        590,295,0,1084,1099,3,594,297,0,1085,1099,3,592,296,0,1086,1099,
        3,416,208,0,1087,1099,3,200,100,0,1088,1099,3,202,101,0,1089,1099,
        3,690,345,0,1090,1099,3,694,347,0,1091,1099,3,696,348,0,1092,1099,
        3,204,102,0,1093,1099,3,206,103,0,1094,1099,3,208,104,0,1095,1099,
        3,210,105,0,1096,1099,3,212,106,0,1097,1099,3,616,308,0,1098,895,
        1,0,0,0,1098,896,1,0,0,0,1098,897,1,0,0,0,1098,898,1,0,0,0,1098,
        899,1,0,0,0,1098,900,1,0,0,0,1098,901,1,0,0,0,1098,902,1,0,0,0,1098,
        903,1,0,0,0,1098,904,1,0,0,0,1098,905,1,0,0,0,1098,906,1,0,0,0,1098,
        907,1,0,0,0,1098,908,1,0,0,0,1098,909,1,0,0,0,1098,910,1,0,0,0,1098,
        911,1,0,0,0,1098,912,1,0,0,0,1098,913,1,0,0,0,1098,914,1,0,0,0,1098,
        915,1,0,0,0,1098,916,1,0,0,0,1098,917,1,0,0,0,1098,918,1,0,0,0,1098,
        919,1,0,0,0,1098,920,1,0,0,0,1098,921,1,0,0,0,1098,922,1,0,0,0,1098,
        923,1,0,0,0,1098,924,1,0,0,0,1098,925,1,0,0,0,1098,926,1,0,0,0,1098,
        927,1,0,0,0,1098,928,1,0,0,0,1098,929,1,0,0,0,1098,930,1,0,0,0,1098,
        931,1,0,0,0,1098,932,1,0,0,0,1098,933,1,0,0,0,1098,934,1,0,0,0,1098,
        935,1,0,0,0,1098,936,1,0,0,0,1098,937,1,0,0,0,1098,938,1,0,0,0,1098,
        939,1,0,0,0,1098,940,1,0,0,0,1098,941,1,0,0,0,1098,942,1,0,0,0,1098,
        943,1,0,0,0,1098,944,1,0,0,0,1098,945,1,0,0,0,1098,946,1,0,0,0,1098,
        947,1,0,0,0,1098,948,1,0,0,0,1098,949,1,0,0,0,1098,950,1,0,0,0,1098,
        951,1,0,0,0,1098,952,1,0,0,0,1098,953,1,0,0,0,1098,954,1,0,0,0,1098,
        955,1,0,0,0,1098,956,1,0,0,0,1098,957,1,0,0,0,1098,958,1,0,0,0,1098,
        959,1,0,0,0,1098,960,1,0,0,0,1098,961,1,0,0,0,1098,962,1,0,0,0,1098,
        963,1,0,0,0,1098,964,1,0,0,0,1098,965,1,0,0,0,1098,966,1,0,0,0,1098,
        967,1,0,0,0,1098,968,1,0,0,0,1098,969,1,0,0,0,1098,970,1,0,0,0,1098,
        971,1,0,0,0,1098,972,1,0,0,0,1098,973,1,0,0,0,1098,974,1,0,0,0,1098,
        975,1,0,0,0,1098,976,1,0,0,0,1098,977,1,0,0,0,1098,978,1,0,0,0,1098,
        979,1,0,0,0,1098,980,1,0,0,0,1098,981,1,0,0,0,1098,982,1,0,0,0,1098,
        983,1,0,0,0,1098,984,1,0,0,0,1098,985,1,0,0,0,1098,986,1,0,0,0,1098,
        987,1,0,0,0,1098,988,1,0,0,0,1098,989,1,0,0,0,1098,990,1,0,0,0,1098,
        991,1,0,0,0,1098,992,1,0,0,0,1098,993,1,0,0,0,1098,994,1,0,0,0,1098,
        995,1,0,0,0,1098,996,1,0,0,0,1098,997,1,0,0,0,1098,998,1,0,0,0,1098,
        999,1,0,0,0,1098,1000,1,0,0,0,1098,1001,1,0,0,0,1098,1002,1,0,0,
        0,1098,1003,1,0,0,0,1098,1004,1,0,0,0,1098,1005,1,0,0,0,1098,1006,
        1,0,0,0,1098,1007,1,0,0,0,1098,1008,1,0,0,0,1098,1009,1,0,0,0,1098,
        1010,1,0,0,0,1098,1011,1,0,0,0,1098,1012,1,0,0,0,1098,1013,1,0,0,
        0,1098,1014,1,0,0,0,1098,1015,1,0,0,0,1098,1016,1,0,0,0,1098,1017,
        1,0,0,0,1098,1018,1,0,0,0,1098,1019,1,0,0,0,1098,1020,1,0,0,0,1098,
        1021,1,0,0,0,1098,1022,1,0,0,0,1098,1023,1,0,0,0,1098,1024,1,0,0,
        0,1098,1025,1,0,0,0,1098,1026,1,0,0,0,1098,1027,1,0,0,0,1098,1028,
        1,0,0,0,1098,1029,1,0,0,0,1098,1030,1,0,0,0,1098,1031,1,0,0,0,1098,
        1032,1,0,0,0,1098,1033,1,0,0,0,1098,1034,1,0,0,0,1098,1035,1,0,0,
        0,1098,1036,1,0,0,0,1098,1037,1,0,0,0,1098,1038,1,0,0,0,1098,1039,
        1,0,0,0,1098,1040,1,0,0,0,1098,1041,1,0,0,0,1098,1042,1,0,0,0,1098,
        1043,1,0,0,0,1098,1044,1,0,0,0,1098,1045,1,0,0,0,1098,1046,1,0,0,
        0,1098,1047,1,0,0,0,1098,1048,1,0,0,0,1098,1049,1,0,0,0,1098,1050,
        1,0,0,0,1098,1051,1,0,0,0,1098,1052,1,0,0,0,1098,1053,1,0,0,0,1098,
        1054,1,0,0,0,1098,1055,1,0,0,0,1098,1056,1,0,0,0,1098,1057,1,0,0,
        0,1098,1058,1,0,0,0,1098,1059,1,0,0,0,1098,1060,1,0,0,0,1098,1061,
        1,0,0,0,1098,1062,1,0,0,0,1098,1063,1,0,0,0,1098,1064,1,0,0,0,1098,
        1065,1,0,0,0,1098,1066,1,0,0,0,1098,1067,1,0,0,0,1098,1068,1,0,0,
        0,1098,1069,1,0,0,0,1098,1070,1,0,0,0,1098,1071,1,0,0,0,1098,1072,
        1,0,0,0,1098,1073,1,0,0,0,1098,1074,1,0,0,0,1098,1075,1,0,0,0,1098,
        1076,1,0,0,0,1098,1077,1,0,0,0,1098,1078,1,0,0,0,1098,1079,1,0,0,
        0,1098,1080,1,0,0,0,1098,1081,1,0,0,0,1098,1082,1,0,0,0,1098,1083,
        1,0,0,0,1098,1084,1,0,0,0,1098,1085,1,0,0,0,1098,1086,1,0,0,0,1098,
        1087,1,0,0,0,1098,1088,1,0,0,0,1098,1089,1,0,0,0,1098,1090,1,0,0,
        0,1098,1091,1,0,0,0,1098,1092,1,0,0,0,1098,1093,1,0,0,0,1098,1094,
        1,0,0,0,1098,1095,1,0,0,0,1098,1096,1,0,0,0,1098,1097,1,0,0,0,1099,
        7,1,0,0,0,1100,1101,5,424,0,0,1101,1102,3,858,429,0,1102,9,1,0,0,
        0,1103,1104,5,424,0,0,1104,1105,3,822,411,0,1105,11,1,0,0,0,1106,
        1107,5,366,0,0,1107,1108,5,47,0,0,1108,1109,3,864,432,0,1109,13,
        1,0,0,0,1110,1111,5,371,0,0,1111,1114,5,89,0,0,1112,1113,7,1,0,0,
        1113,1115,3,858,429,0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,1120,
        1,0,0,0,1116,1117,5,219,0,0,1117,1121,3,822,411,0,1118,1119,5,444,
        0,0,1119,1121,3,710,355,0,1120,1116,1,0,0,0,1120,1118,1,0,0,0,1120,
        1121,1,0,0,0,1121,1131,1,0,0,0,1122,1123,5,371,0,0,1123,1128,5,358,
        0,0,1124,1125,5,219,0,0,1125,1129,3,822,411,0,1126,1127,5,444,0,
        0,1127,1129,3,710,355,0,1128,1124,1,0,0,0,1128,1126,1,0,0,0,1128,
        1129,1,0,0,0,1129,1131,1,0,0,0,1130,1110,1,0,0,0,1130,1122,1,0,0,
        0,1131,15,1,0,0,0,1132,1133,5,9,0,0,1133,1134,5,88,0,0,1134,1135,
        3,860,430,0,1135,1136,5,366,0,0,1136,1137,5,86,0,0,1137,1138,5,313,
        0,0,1138,1139,3,860,430,0,1139,1149,1,0,0,0,1140,1141,5,9,0,0,1141,
        1142,5,88,0,0,1142,1143,3,860,430,0,1143,1144,5,366,0,0,1144,1145,
        5,330,0,0,1145,1146,5,313,0,0,1146,1147,5,481,0,0,1147,1149,1,0,
        0,0,1148,1132,1,0,0,0,1148,1140,1,0,0,0,1149,17,1,0,0,0,1150,1151,
        5,75,0,0,1151,1155,7,2,0,0,1152,1153,5,177,0,0,1153,1154,5,258,0,
        0,1154,1156,5,129,0,0,1155,1152,1,0,0,0,1155,1156,1,0,0,0,1156,1160,
        1,0,0,0,1157,1158,3,860,430,0,1158,1159,5,501,0,0,1159,1161,1,0,
        0,0,1160,1157,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1164,
        3,860,430,0,1163,1165,3,44,22,0,1164,1163,1,0,0,0,1164,1165,1,0,
        0,0,1165,1167,1,0,0,0,1166,1168,3,46,23,0,1167,1166,1,0,0,0,1167,
        1168,1,0,0,0,1168,1170,1,0,0,0,1169,1171,3,804,402,0,1170,1169,1,
        0,0,0,1170,1171,1,0,0,0,1171,19,1,0,0,0,1172,1173,5,114,0,0,1173,
        1176,7,2,0,0,1174,1175,5,177,0,0,1175,1177,5,129,0,0,1176,1174,1,
        0,0,0,1176,1177,1,0,0,0,1177,1181,1,0,0,0,1178,1179,3,860,430,0,
        1179,1180,5,501,0,0,1180,1182,1,0,0,0,1181,1178,1,0,0,0,1181,1182,
        1,0,0,0,1182,1183,1,0,0,0,1183,1185,3,860,430,0,1184,1186,5,150,
        0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,21,1,0,0,0,1187,1188,
        5,371,0,0,1188,1189,5,75,0,0,1189,1190,7,2,0,0,1190,1191,3,860,430,
        0,1191,23,1,0,0,0,1192,1193,5,9,0,0,1193,1194,5,88,0,0,1194,1195,
        3,860,430,0,1195,1196,5,325,0,0,1196,1197,3,860,430,0,1197,25,1,
        0,0,0,1198,1199,5,319,0,0,1199,1200,7,2,0,0,1200,1201,3,860,430,
        0,1201,27,1,0,0,0,1202,1203,5,371,0,0,1203,1209,5,86,0,0,1204,1205,
        5,371,0,0,1205,1206,5,86,0,0,1206,1207,5,153,0,0,1207,1209,3,858,
        429,0,1208,1202,1,0,0,0,1208,1204,1,0,0,0,1209,29,1,0,0,0,1210,1212,
        5,75,0,0,1211,1213,7,3,0,0,1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,
        1214,1,0,0,0,1214,1218,5,391,0,0,1215,1216,5,177,0,0,1216,1217,5,
        258,0,0,1217,1219,5,129,0,0,1218,1215,1,0,0,0,1218,1219,1,0,0,0,
        1219,1220,1,0,0,0,1220,1221,3,858,429,0,1221,1222,5,498,0,0,1222,
        1227,3,32,16,0,1223,1224,5,500,0,0,1224,1226,3,32,16,0,1225,1223,
        1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,1228,1,0,0,0,1228,
        1234,1,0,0,0,1229,1227,1,0,0,0,1230,1231,5,500,0,0,1231,1233,3,40,
        20,0,1232,1230,1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,0,0,0,1234,
        1235,1,0,0,0,1235,1237,1,0,0,0,1236,1234,1,0,0,0,1237,1239,5,499,
        0,0,1238,1240,3,42,21,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,
        1242,1,0,0,0,1241,1243,3,44,22,0,1242,1241,1,0,0,0,1242,1243,1,0,
        0,0,1243,1245,1,0,0,0,1244,1246,3,48,24,0,1245,1244,1,0,0,0,1245,
        1246,1,0,0,0,1246,1248,1,0,0,0,1247,1249,3,816,408,0,1248,1247,1,
        0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1252,3,764,382,0,
        1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1254,1,0,0,0,1253,1255,
        3,798,399,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,
        0,1256,1258,3,50,25,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1260,
        1,0,0,0,1259,1261,3,54,27,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,
        1261,1263,1,0,0,0,1262,1264,3,804,402,0,1263,1262,1,0,0,0,1263,1264,
        1,0,0,0,1264,1266,1,0,0,0,1265,1267,3,806,403,0,1266,1265,1,0,0,
        0,1266,1267,1,0,0,0,1267,31,1,0,0,0,1268,1269,3,860,430,0,1269,1271,
        3,840,420,0,1270,1272,3,34,17,0,1271,1270,1,0,0,0,1271,1272,1,0,
        0,0,1272,1274,1,0,0,0,1273,1275,5,206,0,0,1274,1273,1,0,0,0,1274,
        1275,1,0,0,0,1275,1277,1,0,0,0,1276,1278,3,52,26,0,1277,1276,1,0,
        0,0,1277,1278,1,0,0,0,1278,1282,1,0,0,0,1279,1283,5,259,0,0,1280,
        1281,5,258,0,0,1281,1283,5,259,0,0,1282,1279,1,0,0,0,1282,1280,1,
        0,0,0,1282,1283,1,0,0,0,1283,1287,1,0,0,0,1284,1288,3,36,18,0,1285,
        1288,5,22,0,0,1286,1288,3,38,19,0,1287,1284,1,0,0,0,1287,1285,1,
        0,0,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,1290,1,0,0,0,1289,
        1291,3,816,408,0,1290,1289,1,0,0,0,1290,1291,1,0,0,0,1291,33,1,0,
        0,0,1292,1293,5,51,0,0,1293,1294,5,366,0,0,1294,1301,3,860,430,0,
        1295,1296,5,53,0,0,1296,1301,3,860,430,0,1297,1298,5,52,0,0,1298,
        1299,5,366,0,0,1299,1301,3,860,430,0,1300,1292,1,0,0,0,1300,1295,
        1,0,0,0,1300,1297,1,0,0,0,1301,35,1,0,0,0,1302,1312,5,100,0,0,1303,
        1313,3,822,411,0,1304,1313,5,259,0,0,1305,1313,5,84,0,0,1306,1307,
        5,498,0,0,1307,1308,3,858,429,0,1308,1309,5,498,0,0,1309,1310,5,
        499,0,0,1310,1311,5,499,0,0,1311,1313,1,0,0,0,1312,1303,1,0,0,0,
        1312,1304,1,0,0,0,1312,1305,1,0,0,0,1312,1306,1,0,0,0,1313,37,1,
        0,0,0,1314,1315,5,17,0,0,1315,1316,3,710,355,0,1316,39,1,0,0,0,1317,
        1318,5,185,0,0,1318,1319,3,860,430,0,1319,1324,3,862,431,0,1320,
        1322,3,78,39,0,1321,1323,3,808,404,0,1322,1321,1,0,0,0,1322,1323,
        1,0,0,0,1323,1325,1,0,0,0,1324,1320,1,0,0,0,1324,1325,1,0,0,0,1325,
        1327,1,0,0,0,1326,1328,3,816,408,0,1327,1326,1,0,0,0,1327,1328,1,
        0,0,0,1328,41,1,0,0,0,1329,1330,5,122,0,0,1330,1331,5,455,0,0,1331,
        1332,3,860,430,0,1332,43,1,0,0,0,1333,1335,5,100,0,0,1334,1333,1,
        0,0,0,1334,1335,1,0,0,0,1335,1341,1,0,0,0,1336,1337,5,51,0,0,1337,
        1342,5,366,0,0,1338,1342,5,53,0,0,1339,1340,5,52,0,0,1340,1342,5,
        366,0,0,1341,1336,1,0,0,0,1341,1338,1,0,0,0,1341,1339,1,0,0,0,1342,
        1344,1,0,0,0,1343,1345,5,455,0,0,1344,1343,1,0,0,0,1344,1345,1,0,
        0,0,1345,1346,1,0,0,0,1346,1347,3,864,432,0,1347,45,1,0,0,0,1348,
        1350,5,100,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1351,1,0,
        0,0,1351,1353,5,59,0,0,1352,1354,5,455,0,0,1353,1352,1,0,0,0,1353,
        1354,1,0,0,0,1354,1355,1,0,0,0,1355,1356,3,864,432,0,1356,47,1,0,
        0,0,1357,1358,7,4,0,0,1358,1359,5,206,0,0,1359,1360,3,862,431,0,
        1360,49,1,0,0,0,1361,1362,5,274,0,0,1362,1363,5,42,0,0,1363,1364,
        3,862,431,0,1364,51,1,0,0,0,1365,1366,7,5,0,0,1366,53,1,0,0,0,1367,
        1368,5,346,0,0,1368,1369,5,498,0,0,1369,1374,3,56,28,0,1370,1371,
        5,500,0,0,1371,1373,3,56,28,0,1372,1370,1,0,0,0,1373,1376,1,0,0,
        0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,1377,1,0,0,0,1376,1374,
        1,0,0,0,1377,1378,5,499,0,0,1378,55,1,0,0,0,1379,1380,3,860,430,
        0,1380,1382,3,862,431,0,1381,1383,3,58,29,0,1382,1381,1,0,0,0,1382,
        1383,1,0,0,0,1383,1385,1,0,0,0,1384,1386,3,60,30,0,1385,1384,1,0,
        0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,1389,3,804,402,0,1388,
        1387,1,0,0,0,1388,1389,1,0,0,0,1389,57,1,0,0,0,1390,1391,5,116,0,
        0,1391,1392,5,206,0,0,1392,1393,3,862,431,0,1393,59,1,0,0,0,1394,
        1395,5,153,0,0,1395,1396,3,860,430,0,1396,61,1,0,0,0,1397,1398,5,
        273,0,0,1398,1400,5,328,0,0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,
        1400,63,1,0,0,0,1401,1402,5,177,0,0,1402,1403,5,258,0,0,1403,1405,
        5,129,0,0,1404,1401,1,0,0,0,1404,1405,1,0,0,0,1405,65,1,0,0,0,1406,
        1408,5,75,0,0,1407,1409,5,396,0,0,1408,1407,1,0,0,0,1408,1409,1,
        0,0,0,1409,1410,1,0,0,0,1410,1414,5,391,0,0,1411,1412,5,177,0,0,
        1412,1413,5,258,0,0,1413,1415,5,129,0,0,1414,1411,1,0,0,0,1414,1415,
        1,0,0,0,1415,1416,1,0,0,0,1416,1445,3,858,429,0,1417,1441,5,498,
        0,0,1418,1423,3,860,430,0,1419,1420,5,500,0,0,1420,1422,3,860,430,
        0,1421,1419,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,
        1,0,0,0,1424,1430,1,0,0,0,1425,1423,1,0,0,0,1426,1427,5,500,0,0,
        1427,1429,3,40,20,0,1428,1426,1,0,0,0,1429,1432,1,0,0,0,1430,1428,
        1,0,0,0,1430,1431,1,0,0,0,1431,1442,1,0,0,0,1432,1430,1,0,0,0,1433,
        1438,3,40,20,0,1434,1435,5,500,0,0,1435,1437,3,40,20,0,1436,1434,
        1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,
        1442,1,0,0,0,1440,1438,1,0,0,0,1441,1418,1,0,0,0,1441,1433,1,0,0,
        0,1442,1443,1,0,0,0,1443,1444,5,499,0,0,1444,1446,1,0,0,0,1445,1417,
        1,0,0,0,1445,1446,1,0,0,0,1446,1448,1,0,0,0,1447,1449,3,48,24,0,
        1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1451,1,0,0,0,1450,1452,
        3,816,408,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,
        0,1453,1455,3,764,382,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,
        1457,1,0,0,0,1456,1458,3,798,399,0,1457,1456,1,0,0,0,1457,1458,1,
        0,0,0,1458,1460,1,0,0,0,1459,1461,3,50,25,0,1460,1459,1,0,0,0,1460,
        1461,1,0,0,0,1461,1463,1,0,0,0,1462,1464,3,804,402,0,1463,1462,1,
        0,0,0,1463,1464,1,0,0,0,1464,1465,1,0,0,0,1465,1466,5,17,0,0,1466,
        1467,3,622,311,0,1467,67,1,0,0,0,1468,1470,5,114,0,0,1469,1471,5,
        396,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,
        1475,5,391,0,0,1473,1474,5,177,0,0,1474,1476,5,129,0,0,1475,1473,
        1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1479,3,858,429,
        0,1478,1480,5,150,0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,69,
        1,0,0,0,1481,1482,5,55,0,0,1482,1483,5,396,0,0,1483,1484,5,391,0,
        0,1484,1485,5,266,0,0,1485,1486,5,365,0,0,1486,1487,3,822,411,0,
        1487,71,1,0,0,0,1488,1489,5,9,0,0,1489,1490,5,391,0,0,1490,1491,
        3,858,429,0,1491,1496,3,218,109,0,1492,1493,5,500,0,0,1493,1495,
        3,218,109,0,1494,1492,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,
        0,1496,1497,1,0,0,0,1497,1526,1,0,0,0,1498,1496,1,0,0,0,1499,1500,
        5,9,0,0,1500,1501,5,391,0,0,1501,1502,3,858,429,0,1502,1503,5,4,
        0,0,1503,1504,5,346,0,0,1504,1509,3,56,28,0,1505,1506,5,500,0,0,
        1506,1508,3,56,28,0,1507,1505,1,0,0,0,1508,1511,1,0,0,0,1509,1507,
        1,0,0,0,1509,1510,1,0,0,0,1510,1526,1,0,0,0,1511,1509,1,0,0,0,1512,
        1513,5,9,0,0,1513,1514,5,391,0,0,1514,1515,3,858,429,0,1515,1516,
        5,114,0,0,1516,1517,5,346,0,0,1517,1522,3,860,430,0,1518,1519,5,
        500,0,0,1519,1521,3,860,430,0,1520,1518,1,0,0,0,1521,1524,1,0,0,
        0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,1526,1,0,0,0,1524,1522,
        1,0,0,0,1525,1488,1,0,0,0,1525,1499,1,0,0,0,1525,1512,1,0,0,0,1526,
        73,1,0,0,0,1527,1528,5,75,0,0,1528,1529,5,185,0,0,1529,1530,3,860,
        430,0,1530,1531,5,266,0,0,1531,1532,3,858,429,0,1532,1537,3,862,
        431,0,1533,1535,3,78,39,0,1534,1536,3,808,404,0,1535,1534,1,0,0,
        0,1535,1536,1,0,0,0,1536,1538,1,0,0,0,1537,1533,1,0,0,0,1537,1538,
        1,0,0,0,1538,1540,1,0,0,0,1539,1541,3,816,408,0,1540,1539,1,0,0,
        0,1540,1541,1,0,0,0,1541,75,1,0,0,0,1542,1543,5,114,0,0,1543,1544,
        5,185,0,0,1544,1545,3,860,430,0,1545,1546,5,266,0,0,1546,1547,3,
        858,429,0,1547,77,1,0,0,0,1548,1549,5,427,0,0,1549,1550,7,6,0,0,
        1550,79,1,0,0,0,1551,1553,5,371,0,0,1552,1554,5,156,0,0,1553,1552,
        1,0,0,0,1553,1554,1,0,0,0,1554,1555,1,0,0,0,1555,1558,5,392,0,0,
        1556,1557,7,1,0,0,1557,1559,3,858,429,0,1558,1556,1,0,0,0,1558,1559,
        1,0,0,0,1559,1564,1,0,0,0,1560,1561,5,219,0,0,1561,1565,3,822,411,
        0,1562,1563,5,444,0,0,1563,1565,3,710,355,0,1564,1560,1,0,0,0,1564,
        1562,1,0,0,0,1564,1565,1,0,0,0,1565,81,1,0,0,0,1566,1567,5,371,0,
        0,1567,1568,5,396,0,0,1568,1571,5,392,0,0,1569,1570,7,1,0,0,1570,
        1572,3,858,429,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,1577,1,
        0,0,0,1573,1574,5,219,0,0,1574,1578,3,822,411,0,1575,1576,5,444,
        0,0,1576,1578,3,710,355,0,1577,1573,1,0,0,0,1577,1575,1,0,0,0,1577,
        1578,1,0,0,0,1578,83,1,0,0,0,1579,1580,5,371,0,0,1580,1585,5,75,
        0,0,1581,1586,5,391,0,0,1582,1586,5,435,0,0,1583,1584,5,236,0,0,
        1584,1586,5,435,0,0,1585,1581,1,0,0,0,1585,1582,1,0,0,0,1585,1583,
        1,0,0,0,1586,1587,1,0,0,0,1587,1588,3,858,429,0,1588,85,1,0,0,0,
        1589,1591,5,371,0,0,1590,1592,5,156,0,0,1591,1590,1,0,0,0,1591,1592,
        1,0,0,0,1592,1593,1,0,0,0,1593,1594,7,7,0,0,1594,1595,7,1,0,0,1595,
        1596,3,858,429,0,1596,1599,1,0,0,0,1597,1598,7,1,0,0,1598,1600,3,
        858,429,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,1605,1,0,0,0,
        1601,1602,5,219,0,0,1602,1606,3,822,411,0,1603,1604,5,444,0,0,1604,
        1606,3,710,355,0,1605,1601,1,0,0,0,1605,1603,1,0,0,0,1605,1606,1,
        0,0,0,1606,87,1,0,0,0,1607,1608,5,371,0,0,1608,1609,5,391,0,0,1609,
        1612,5,377,0,0,1610,1611,7,1,0,0,1611,1613,3,858,429,0,1612,1610,
        1,0,0,0,1612,1613,1,0,0,0,1613,1618,1,0,0,0,1614,1615,5,219,0,0,
        1615,1619,3,822,411,0,1616,1617,5,444,0,0,1617,1619,3,710,355,0,
        1618,1614,1,0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,89,1,
        0,0,0,1620,1621,5,320,0,0,1621,1622,5,132,0,0,1622,1623,5,391,0,
        0,1623,1636,3,858,429,0,1624,1625,5,279,0,0,1625,1626,5,498,0,0,
        1626,1631,3,822,411,0,1627,1628,5,500,0,0,1628,1630,3,822,411,0,
        1629,1627,1,0,0,0,1630,1633,1,0,0,0,1631,1629,1,0,0,0,1631,1632,
        1,0,0,0,1632,1634,1,0,0,0,1633,1631,1,0,0,0,1634,1635,5,499,0,0,
        1635,1637,1,0,0,0,1636,1624,1,0,0,0,1636,1637,1,0,0,0,1637,91,1,
        0,0,0,1638,1639,5,371,0,0,1639,1640,5,9,0,0,1640,1641,5,391,0,0,
        1641,1644,7,8,0,0,1642,1643,7,1,0,0,1643,1645,3,858,429,0,1644,1642,
        1,0,0,0,1644,1645,1,0,0,0,1645,1648,1,0,0,0,1646,1647,5,444,0,0,
        1647,1649,3,710,355,0,1648,1646,1,0,0,0,1648,1649,1,0,0,0,1649,1660,
        1,0,0,0,1650,1651,5,274,0,0,1651,1652,5,42,0,0,1652,1657,3,638,319,
        0,1653,1654,5,500,0,0,1654,1656,3,638,319,0,1655,1653,1,0,0,0,1656,
        1659,1,0,0,0,1657,1655,1,0,0,0,1657,1658,1,0,0,0,1658,1661,1,0,0,
        0,1659,1657,1,0,0,0,1660,1650,1,0,0,0,1660,1661,1,0,0,0,1661,1663,
        1,0,0,0,1662,1664,3,640,320,0,1663,1662,1,0,0,0,1663,1664,1,0,0,
        0,1664,1693,1,0,0,0,1665,1666,5,371,0,0,1666,1667,5,9,0,0,1667,1668,
        5,236,0,0,1668,1671,5,435,0,0,1669,1670,7,1,0,0,1670,1672,3,858,
        429,0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1675,1,0,0,0,1673,
        1674,5,444,0,0,1674,1676,3,710,355,0,1675,1673,1,0,0,0,1675,1676,
        1,0,0,0,1676,1687,1,0,0,0,1677,1678,5,274,0,0,1678,1679,5,42,0,0,
        1679,1684,3,638,319,0,1680,1681,5,500,0,0,1681,1683,3,638,319,0,
        1682,1680,1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,0,0,0,1684,1685,
        1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1687,1677,1,0,0,0,1687,
        1688,1,0,0,0,1688,1690,1,0,0,0,1689,1691,3,640,320,0,1690,1689,1,
        0,0,0,1690,1691,1,0,0,0,1691,1693,1,0,0,0,1692,1638,1,0,0,0,1692,
        1665,1,0,0,0,1693,93,1,0,0,0,1694,1695,7,9,0,0,1695,1697,3,858,429,
        0,1696,1698,5,8,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,95,
        1,0,0,0,1699,1701,5,75,0,0,1700,1702,7,3,0,0,1701,1700,1,0,0,0,1701,
        1702,1,0,0,0,1702,1703,1,0,0,0,1703,1707,5,391,0,0,1704,1705,5,177,
        0,0,1705,1706,5,258,0,0,1706,1708,5,129,0,0,1707,1704,1,0,0,0,1707,
        1708,1,0,0,0,1708,1709,1,0,0,0,1709,1711,3,858,429,0,1710,1712,3,
        764,382,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1714,1,0,0,0,
        1713,1715,3,798,399,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1717,
        1,0,0,0,1716,1718,3,804,402,0,1717,1716,1,0,0,0,1717,1718,1,0,0,
        0,1718,1719,1,0,0,0,1719,1720,5,219,0,0,1720,1721,3,858,429,0,1721,
        97,1,0,0,0,1722,1723,5,371,0,0,1723,1724,7,10,0,0,1724,1725,7,1,
        0,0,1725,1726,3,858,429,0,1726,1729,1,0,0,0,1727,1728,7,1,0,0,1728,
        1730,3,858,429,0,1729,1727,1,0,0,0,1729,1730,1,0,0,0,1730,99,1,0,
        0,0,1731,1732,5,319,0,0,1732,1733,5,391,0,0,1733,1734,3,858,429,
        0,1734,101,1,0,0,0,1735,1736,5,412,0,0,1736,1737,5,391,0,0,1737,
        1739,3,858,429,0,1738,1740,3,684,342,0,1739,1738,1,0,0,0,1739,1740,
        1,0,0,0,1740,103,1,0,0,0,1741,1742,5,44,0,0,1742,1743,5,9,0,0,1743,
        1745,5,391,0,0,1744,1746,7,8,0,0,1745,1744,1,0,0,0,1745,1746,1,0,
        0,0,1746,1747,1,0,0,0,1747,1748,5,153,0,0,1748,1759,3,858,429,0,
        1749,1750,5,498,0,0,1750,1755,5,481,0,0,1751,1752,5,500,0,0,1752,
        1754,5,481,0,0,1753,1751,1,0,0,0,1754,1757,1,0,0,0,1755,1753,1,0,
        0,0,1755,1756,1,0,0,0,1756,1758,1,0,0,0,1757,1755,1,0,0,0,1758,1760,
        5,499,0,0,1759,1749,1,0,0,0,1759,1760,1,0,0,0,1760,1768,1,0,0,0,
        1761,1762,5,44,0,0,1762,1763,5,9,0,0,1763,1764,5,236,0,0,1764,1765,
        5,435,0,0,1765,1766,5,153,0,0,1766,1768,3,858,429,0,1767,1741,1,
        0,0,0,1767,1761,1,0,0,0,1768,105,1,0,0,0,1769,1771,5,371,0,0,1770,
        1772,5,396,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,
        0,0,1773,1774,5,280,0,0,1774,1775,5,153,0,0,1775,1778,3,858,429,
        0,1776,1777,5,444,0,0,1777,1779,3,710,355,0,1778,1776,1,0,0,0,1778,
        1779,1,0,0,0,1779,1790,1,0,0,0,1780,1781,5,274,0,0,1781,1782,5,42,
        0,0,1782,1787,3,638,319,0,1783,1784,5,500,0,0,1784,1786,3,638,319,
        0,1785,1783,1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,
        1,0,0,0,1788,1791,1,0,0,0,1789,1787,1,0,0,0,1790,1780,1,0,0,0,1790,
        1791,1,0,0,0,1791,1793,1,0,0,0,1792,1794,3,640,320,0,1793,1792,1,
        0,0,0,1793,1794,1,0,0,0,1794,107,1,0,0,0,1795,1796,5,319,0,0,1796,
        1797,5,279,0,0,1797,1798,3,860,430,0,1798,1799,5,153,0,0,1799,1800,
        3,858,429,0,1800,109,1,0,0,0,1801,1804,5,75,0,0,1802,1803,5,273,
        0,0,1803,1805,5,328,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,
        1806,1,0,0,0,1806,1810,5,435,0,0,1807,1808,5,177,0,0,1808,1809,5,
        258,0,0,1809,1811,5,129,0,0,1810,1807,1,0,0,0,1810,1811,1,0,0,0,
        1811,1812,1,0,0,0,1812,1824,3,858,429,0,1813,1814,5,498,0,0,1814,
        1819,3,116,58,0,1815,1816,5,500,0,0,1816,1818,3,116,58,0,1817,1815,
        1,0,0,0,1818,1821,1,0,0,0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,
        1822,1,0,0,0,1821,1819,1,0,0,0,1822,1823,5,499,0,0,1823,1825,1,0,
        0,0,1824,1813,1,0,0,0,1824,1825,1,0,0,0,1825,1827,1,0,0,0,1826,1828,
        3,816,408,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,
        0,1829,1830,5,17,0,0,1830,1831,3,622,311,0,1831,111,1,0,0,0,1832,
        1833,5,9,0,0,1833,1834,5,435,0,0,1834,1846,3,858,429,0,1835,1836,
        5,498,0,0,1836,1841,3,116,58,0,1837,1838,5,500,0,0,1838,1840,3,116,
        58,0,1839,1837,1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,0,0,0,1841,
        1842,1,0,0,0,1842,1844,1,0,0,0,1843,1841,1,0,0,0,1844,1845,5,499,
        0,0,1845,1847,1,0,0,0,1846,1835,1,0,0,0,1846,1847,1,0,0,0,1847,1848,
        1,0,0,0,1848,1849,5,17,0,0,1849,1850,3,622,311,0,1850,113,1,0,0,
        0,1851,1852,5,114,0,0,1852,1855,5,435,0,0,1853,1854,5,177,0,0,1854,
        1856,5,129,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,0,
        0,0,1857,1858,3,858,429,0,1858,115,1,0,0,0,1859,1861,3,860,430,0,
        1860,1862,3,816,408,0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,117,
        1,0,0,0,1863,1864,5,383,0,0,1864,1866,5,395,0,0,1865,1867,3,858,
        429,0,1866,1865,1,0,0,0,1866,1867,1,0,0,0,1867,1871,1,0,0,0,1868,
        1870,3,120,60,0,1869,1868,1,0,0,0,1870,1873,1,0,0,0,1871,1869,1,
        0,0,0,1871,1872,1,0,0,0,1872,1874,1,0,0,0,1873,1871,1,0,0,0,1874,
        1878,5,17,0,0,1875,1879,3,66,33,0,1876,1879,3,304,152,0,1877,1879,
        3,566,283,0,1878,1875,1,0,0,0,1878,1876,1,0,0,0,1878,1877,1,0,0,
        0,1879,119,1,0,0,0,1880,1883,3,804,402,0,1881,1883,3,124,62,0,1882,
        1880,1,0,0,0,1882,1881,1,0,0,0,1883,121,1,0,0,0,1884,1885,5,114,
        0,0,1885,1886,5,395,0,0,1886,1888,3,858,429,0,1887,1889,5,150,0,
        0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,123,1,0,0,0,1890,1896,
        5,355,0,0,1891,1892,5,375,0,0,1892,1893,5,498,0,0,1893,1894,3,822,
        411,0,1894,1895,5,499,0,0,1895,1897,1,0,0,0,1896,1891,1,0,0,0,1896,
        1897,1,0,0,0,1897,1898,1,0,0,0,1898,1899,5,134,0,0,1899,1900,5,498,
        0,0,1900,1901,3,832,416,0,1901,1902,5,499,0,0,1902,125,1,0,0,0,1903,
        1904,5,75,0,0,1904,1905,5,236,0,0,1905,1909,5,435,0,0,1906,1907,
        5,177,0,0,1907,1908,5,258,0,0,1908,1910,5,129,0,0,1909,1906,1,0,
        0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,1930,3,858,429,0,1912,
        1913,5,498,0,0,1913,1918,3,116,58,0,1914,1915,5,500,0,0,1915,1917,
        3,116,58,0,1916,1914,1,0,0,0,1917,1920,1,0,0,0,1918,1916,1,0,0,0,
        1918,1919,1,0,0,0,1919,1925,1,0,0,0,1920,1918,1,0,0,0,1921,1922,
        5,500,0,0,1922,1924,3,40,20,0,1923,1921,1,0,0,0,1924,1927,1,0,0,
        0,1925,1923,1,0,0,0,1925,1926,1,0,0,0,1926,1928,1,0,0,0,1927,1925,
        1,0,0,0,1928,1929,5,499,0,0,1929,1931,1,0,0,0,1930,1912,1,0,0,0,
        1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,1934,3,816,408,0,1933,1932,
        1,0,0,0,1933,1934,1,0,0,0,1934,1938,1,0,0,0,1935,1937,3,128,64,0,
        1936,1935,1,0,0,0,1937,1940,1,0,0,0,1938,1936,1,0,0,0,1938,1939,
        1,0,0,0,1939,1941,1,0,0,0,1940,1938,1,0,0,0,1941,1942,5,17,0,0,1942,
        1943,3,622,311,0,1943,127,1,0,0,0,1944,1945,5,279,0,0,1945,1946,
        5,42,0,0,1946,1952,3,724,362,0,1947,1952,3,798,399,0,1948,1952,3,
        50,25,0,1949,1952,3,800,400,0,1950,1952,3,804,402,0,1951,1944,1,
        0,0,0,1951,1947,1,0,0,0,1951,1948,1,0,0,0,1951,1949,1,0,0,0,1951,
        1950,1,0,0,0,1952,129,1,0,0,0,1953,1954,5,371,0,0,1954,1955,5,236,
        0,0,1955,1958,5,436,0,0,1956,1957,7,1,0,0,1957,1959,3,858,429,0,
        1958,1956,1,0,0,0,1958,1959,1,0,0,0,1959,1964,1,0,0,0,1960,1961,
        5,219,0,0,1961,1965,3,822,411,0,1962,1963,5,444,0,0,1963,1965,3,
        710,355,0,1964,1960,1,0,0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,
        1965,131,1,0,0,0,1966,1967,5,114,0,0,1967,1968,5,236,0,0,1968,1971,
        5,435,0,0,1969,1970,5,177,0,0,1970,1972,5,129,0,0,1971,1969,1,0,
        0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,858,429,0,1974,
        133,1,0,0,0,1975,1976,5,9,0,0,1976,1977,5,236,0,0,1977,1978,5,435,
        0,0,1978,1983,3,858,429,0,1979,1984,3,800,400,0,1980,1984,3,258,
        129,0,1981,1984,3,262,131,0,1982,1984,3,260,130,0,1983,1979,1,0,
        0,0,1983,1980,1,0,0,0,1983,1981,1,0,0,0,1983,1982,1,0,0,0,1984,1992,
        1,0,0,0,1985,1986,5,9,0,0,1986,1987,5,236,0,0,1987,1988,5,435,0,
        0,1988,1989,3,858,429,0,1989,1990,3,802,401,0,1990,1992,1,0,0,0,
        1991,1975,1,0,0,0,1991,1985,1,0,0,0,1992,135,1,0,0,0,1993,1994,5,
        320,0,0,1994,1995,5,236,0,0,1995,1996,5,435,0,0,1996,1999,3,858,
        429,0,1997,1998,5,279,0,0,1998,2000,3,786,393,0,1999,1997,1,0,0,
        0,1999,2000,1,0,0,0,2000,2002,1,0,0,0,2001,2003,5,150,0,0,2002,2001,
        1,0,0,0,2002,2003,1,0,0,0,2003,2007,1,0,0,0,2004,2005,5,446,0,0,
        2005,2006,7,11,0,0,2006,2008,5,247,0,0,2007,2004,1,0,0,0,2007,2008,
        1,0,0,0,2008,137,1,0,0,0,2009,2010,5,44,0,0,2010,2011,5,320,0,0,
        2011,2012,5,236,0,0,2012,2013,5,435,0,0,2013,2015,3,858,429,0,2014,
        2016,5,150,0,0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,139,1,0,
        0,0,2017,2018,5,5,0,0,2018,2019,5,366,0,0,2019,2020,5,154,0,0,2020,
        2021,5,69,0,0,2021,2022,5,498,0,0,2022,2023,3,812,406,0,2023,2024,
        5,499,0,0,2024,141,1,0,0,0,2025,2026,5,5,0,0,2026,2027,5,366,0,0,
        2027,2028,5,330,0,0,2028,2029,5,377,0,0,2029,2030,3,804,402,0,2030,
        143,1,0,0,0,2031,2032,5,5,0,0,2032,2033,5,371,0,0,2033,2034,5,154,
        0,0,2034,2037,5,69,0,0,2035,2036,5,219,0,0,2036,2038,3,822,411,0,
        2037,2035,1,0,0,0,2037,2038,1,0,0,0,2038,145,1,0,0,0,2039,2040,5,
        5,0,0,2040,2041,5,371,0,0,2041,2042,5,330,0,0,2042,2043,5,112,0,
        0,2043,2044,5,153,0,0,2044,2046,3,858,429,0,2045,2047,3,684,342,
        0,2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,147,1,0,0,0,2048,2049,
        5,5,0,0,2049,2050,5,371,0,0,2050,2051,5,330,0,0,2051,2052,5,377,
        0,0,2052,2053,5,153,0,0,2053,2055,3,858,429,0,2054,2056,3,684,342,
        0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2059,1,0,0,0,2057,2058,
        5,444,0,0,2058,2060,3,710,355,0,2059,2057,1,0,0,0,2059,2060,1,0,
        0,0,2060,149,1,0,0,0,2061,2062,5,5,0,0,2062,2063,5,326,0,0,2063,
        2064,5,391,0,0,2064,2066,3,858,429,0,2065,2067,3,684,342,0,2066,
        2065,1,0,0,0,2066,2067,1,0,0,0,2067,151,1,0,0,0,2068,2069,5,5,0,
        0,2069,2070,5,44,0,0,2070,2071,5,326,0,0,2071,2072,5,391,0,0,2072,
        2074,3,858,429,0,2073,2075,3,684,342,0,2074,2073,1,0,0,0,2074,2075,
        1,0,0,0,2075,153,1,0,0,0,2076,2077,5,5,0,0,2077,2078,5,54,0,0,2078,
        2079,3,688,344,0,2079,2080,5,306,0,0,2080,2081,5,498,0,0,2081,2082,
        3,812,406,0,2082,2083,5,499,0,0,2083,155,1,0,0,0,2084,2085,5,5,0,
        0,2085,2086,5,366,0,0,2086,2087,5,391,0,0,2087,2088,3,858,429,0,
        2088,2089,5,279,0,0,2089,2092,5,498,0,0,2090,2093,3,864,432,0,2091,
        2093,5,481,0,0,2092,2090,1,0,0,0,2092,2091,1,0,0,0,2093,2094,1,0,
        0,0,2094,2095,5,499,0,0,2095,2096,5,434,0,0,2096,2097,5,407,0,0,
        2097,2098,5,481,0,0,2098,157,1,0,0,0,2099,2104,5,208,0,0,2100,2102,
        5,70,0,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,2105,1,0,0,0,2103,
        2105,5,310,0,0,2104,2101,1,0,0,0,2104,2103,1,0,0,0,2105,2106,1,0,
        0,0,2106,2107,5,481,0,0,2107,159,1,0,0,0,2108,2109,5,386,0,0,2109,
        161,1,0,0,0,2110,2111,5,9,0,0,2111,2112,5,387,0,0,2112,2113,3,218,
        109,0,2113,163,1,0,0,0,2114,2115,5,44,0,0,2115,2116,5,99,0,0,2116,
        2117,5,24,0,0,2117,2122,3,822,411,0,2118,2119,5,500,0,0,2119,2121,
        3,822,411,0,2120,2118,1,0,0,0,2121,2124,1,0,0,0,2122,2120,1,0,0,
        0,2122,2123,1,0,0,0,2123,165,1,0,0,0,2124,2122,1,0,0,0,2125,2126,
        5,371,0,0,2126,2127,5,68,0,0,2127,2128,5,256,0,0,2128,167,1,0,0,
        0,2129,2130,5,75,0,0,2130,2131,5,132,0,0,2131,2135,5,47,0,0,2132,
        2133,5,177,0,0,2133,2134,5,258,0,0,2134,2136,5,129,0,0,2135,2132,
        1,0,0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2139,3,864,432,
        0,2138,2140,3,816,408,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,
        2141,1,0,0,0,2141,2142,3,804,402,0,2142,169,1,0,0,0,2143,2144,5,
        371,0,0,2144,2145,5,75,0,0,2145,2146,5,47,0,0,2146,2147,3,864,432,
        0,2147,171,1,0,0,0,2148,2149,5,114,0,0,2149,2152,5,47,0,0,2150,2151,
        5,177,0,0,2151,2153,5,129,0,0,2152,2150,1,0,0,0,2152,2153,1,0,0,
        0,2153,2154,1,0,0,0,2154,2155,3,864,432,0,2155,173,1,0,0,0,2156,
        2157,5,371,0,0,2157,2158,5,48,0,0,2158,175,1,0,0,0,2159,2160,5,9,
        0,0,2160,2161,5,47,0,0,2161,2162,3,864,432,0,2162,2163,3,262,131,
        0,2163,177,1,0,0,0,2164,2165,5,75,0,0,2165,2166,5,379,0,0,2166,2170,
        5,437,0,0,2167,2168,5,177,0,0,2168,2169,5,258,0,0,2169,2171,5,129,
        0,0,2170,2167,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,
        3,864,432,0,2173,2174,3,180,90,0,2174,2176,3,182,91,0,2175,2177,
        3,816,408,0,2176,2175,1,0,0,0,2176,2177,1,0,0,0,2177,2179,1,0,0,
        0,2178,2180,3,804,402,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,
        179,1,0,0,0,2181,2182,5,413,0,0,2182,2183,5,455,0,0,2183,2184,3,
        860,430,0,2184,181,1,0,0,0,2185,2186,5,227,0,0,2186,2187,5,455,0,
        0,2187,2188,3,776,388,0,2188,183,1,0,0,0,2189,2190,5,371,0,0,2190,
        2191,5,379,0,0,2191,2194,5,438,0,0,2192,2193,5,219,0,0,2193,2195,
        3,822,411,0,2194,2192,1,0,0,0,2194,2195,1,0,0,0,2195,185,1,0,0,0,
        2196,2197,5,114,0,0,2197,2198,5,379,0,0,2198,2201,5,437,0,0,2199,
        2200,5,177,0,0,2200,2202,5,129,0,0,2201,2199,1,0,0,0,2201,2202,1,
        0,0,0,2202,2203,1,0,0,0,2203,2204,3,864,432,0,2204,187,1,0,0,0,2205,
        2206,5,9,0,0,2206,2207,5,379,0,0,2207,2208,5,437,0,0,2208,2209,3,
        864,432,0,2209,2214,3,190,95,0,2210,2211,5,500,0,0,2211,2213,3,190,
        95,0,2212,2210,1,0,0,0,2213,2216,1,0,0,0,2214,2212,1,0,0,0,2214,
        2215,1,0,0,0,2215,189,1,0,0,0,2216,2214,1,0,0,0,2217,2220,3,194,
        97,0,2218,2220,3,192,96,0,2219,2217,1,0,0,0,2219,2218,1,0,0,0,2220,
        191,1,0,0,0,2221,2222,5,366,0,0,2222,2223,3,808,404,0,2223,193,1,
        0,0,0,2224,2225,5,63,0,0,2225,2226,5,455,0,0,2226,2227,3,822,411,
        0,2227,195,1,0,0,0,2228,2229,7,9,0,0,2229,2230,5,379,0,0,2230,2231,
        5,437,0,0,2231,2232,3,864,432,0,2232,197,1,0,0,0,2233,2234,5,366,
        0,0,2234,2235,3,864,432,0,2235,2236,5,17,0,0,2236,2237,5,100,0,0,
        2237,2238,5,379,0,0,2238,2239,5,437,0,0,2239,199,1,0,0,0,2240,2241,
        5,5,0,0,2241,2242,5,109,0,0,2242,2243,5,135,0,0,2243,2247,3,822,
        411,0,2244,2245,5,266,0,0,2245,2246,5,24,0,0,2246,2248,3,822,411,
        0,2247,2244,1,0,0,0,2247,2248,1,0,0,0,2248,2278,1,0,0,0,2249,2250,
        5,5,0,0,2250,2251,5,119,0,0,2251,2252,5,135,0,0,2252,2256,3,822,
        411,0,2253,2254,5,446,0,0,2254,2255,5,481,0,0,2255,2257,5,401,0,
        0,2256,2253,1,0,0,0,2256,2257,1,0,0,0,2257,2261,1,0,0,0,2258,2259,
        5,266,0,0,2259,2260,5,24,0,0,2260,2262,3,822,411,0,2261,2258,1,0,
        0,0,2261,2262,1,0,0,0,2262,2278,1,0,0,0,2263,2264,5,5,0,0,2264,2265,
        5,119,0,0,2265,2266,5,135,0,0,2266,2270,3,822,411,0,2267,2268,5,
        446,0,0,2268,2269,5,482,0,0,2269,2271,5,300,0,0,2270,2267,1,0,0,
        0,2270,2271,1,0,0,0,2271,2275,1,0,0,0,2272,2273,5,266,0,0,2273,2274,
        5,24,0,0,2274,2276,3,822,411,0,2275,2272,1,0,0,0,2275,2276,1,0,0,
        0,2276,2278,1,0,0,0,2277,2240,1,0,0,0,2277,2249,1,0,0,0,2277,2263,
        1,0,0,0,2278,201,1,0,0,0,2279,2280,5,371,0,0,2280,2283,5,136,0,0,
        2281,2282,5,219,0,0,2282,2284,3,822,411,0,2283,2281,1,0,0,0,2283,
        2284,1,0,0,0,2284,2288,1,0,0,0,2285,2286,5,266,0,0,2286,2287,5,24,
        0,0,2287,2289,3,822,411,0,2288,2285,1,0,0,0,2288,2289,1,0,0,0,2289,
        203,1,0,0,0,2290,2291,5,75,0,0,2291,2292,5,104,0,0,2292,2293,3,216,
        108,0,2293,2294,5,427,0,0,2294,2295,3,858,429,0,2295,2296,5,498,
        0,0,2296,2301,3,214,107,0,2297,2298,5,500,0,0,2298,2300,3,214,107,
        0,2299,2297,1,0,0,0,2300,2303,1,0,0,0,2301,2299,1,0,0,0,2301,2302,
        1,0,0,0,2302,2304,1,0,0,0,2303,2301,1,0,0,0,2304,2306,5,499,0,0,
        2305,2307,3,804,402,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,205,
        1,0,0,0,2308,2309,5,114,0,0,2309,2310,5,104,0,0,2310,2312,3,858,
        429,0,2311,2313,5,43,0,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,
        207,1,0,0,0,2314,2315,5,320,0,0,2315,2316,5,104,0,0,2316,2317,3,
        858,429,0,2317,209,1,0,0,0,2318,2319,5,371,0,0,2319,2321,5,104,0,
        0,2320,2322,3,858,429,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,
        211,1,0,0,0,2323,2324,5,44,0,0,2324,2325,5,320,0,0,2325,2326,5,104,
        0,0,2326,2327,3,858,429,0,2327,213,1,0,0,0,2328,2329,3,858,429,0,
        2329,2330,5,206,0,0,2330,2335,1,0,0,0,2331,2332,3,858,429,0,2332,
        2333,5,428,0,0,2333,2335,1,0,0,0,2334,2328,1,0,0,0,2334,2331,1,0,
        0,0,2335,215,1,0,0,0,2336,2337,3,858,429,0,2337,217,1,0,0,0,2338,
        2380,3,220,110,0,2339,2380,3,222,111,0,2340,2380,3,224,112,0,2341,
        2380,3,226,113,0,2342,2380,3,228,114,0,2343,2380,3,230,115,0,2344,
        2380,3,232,116,0,2345,2380,3,234,117,0,2346,2380,3,236,118,0,2347,
        2380,3,238,119,0,2348,2380,3,240,120,0,2349,2380,3,242,121,0,2350,
        2380,3,244,122,0,2351,2380,3,246,123,0,2352,2380,3,248,124,0,2353,
        2380,3,250,125,0,2354,2380,3,252,126,0,2355,2380,3,254,127,0,2356,
        2380,3,256,128,0,2357,2380,3,258,129,0,2358,2380,3,260,130,0,2359,
        2380,3,262,131,0,2360,2380,3,268,134,0,2361,2380,3,270,135,0,2362,
        2380,3,272,136,0,2363,2380,3,274,137,0,2364,2380,3,276,138,0,2365,
        2380,3,278,139,0,2366,2380,3,280,140,0,2367,2380,3,282,141,0,2368,
        2380,3,264,132,0,2369,2380,3,266,133,0,2370,2380,3,288,144,0,2371,
        2380,3,290,145,0,2372,2380,3,292,146,0,2373,2380,3,294,147,0,2374,
        2380,3,796,398,0,2375,2380,3,296,148,0,2376,2380,3,298,149,0,2377,
        2380,3,300,150,0,2378,2380,3,302,151,0,2379,2338,1,0,0,0,2379,2339,
        1,0,0,0,2379,2340,1,0,0,0,2379,2341,1,0,0,0,2379,2342,1,0,0,0,2379,
        2343,1,0,0,0,2379,2344,1,0,0,0,2379,2345,1,0,0,0,2379,2346,1,0,0,
        0,2379,2347,1,0,0,0,2379,2348,1,0,0,0,2379,2349,1,0,0,0,2379,2350,
        1,0,0,0,2379,2351,1,0,0,0,2379,2352,1,0,0,0,2379,2353,1,0,0,0,2379,
        2354,1,0,0,0,2379,2355,1,0,0,0,2379,2356,1,0,0,0,2379,2357,1,0,0,
        0,2379,2358,1,0,0,0,2379,2359,1,0,0,0,2379,2360,1,0,0,0,2379,2361,
        1,0,0,0,2379,2362,1,0,0,0,2379,2363,1,0,0,0,2379,2364,1,0,0,0,2379,
        2365,1,0,0,0,2379,2366,1,0,0,0,2379,2367,1,0,0,0,2379,2368,1,0,0,
        0,2379,2369,1,0,0,0,2379,2370,1,0,0,0,2379,2371,1,0,0,0,2379,2372,
        1,0,0,0,2379,2373,1,0,0,0,2379,2374,1,0,0,0,2379,2375,1,0,0,0,2379,
        2376,1,0,0,0,2379,2377,1,0,0,0,2379,2378,1,0,0,0,2380,219,1,0,0,
        0,2381,2382,5,4,0,0,2382,2383,7,12,0,0,2383,2384,3,822,411,0,2384,
        221,1,0,0,0,2385,2386,5,114,0,0,2386,2387,7,12,0,0,2387,2388,3,822,
        411,0,2388,223,1,0,0,0,2389,2390,5,248,0,0,2390,2391,5,154,0,0,2391,
        2392,5,173,0,0,2392,2393,3,822,411,0,2393,2394,5,407,0,0,2394,2395,
        3,822,411,0,2395,225,1,0,0,0,2396,2397,5,4,0,0,2397,2398,5,24,0,
        0,2398,2403,3,822,411,0,2399,2400,5,500,0,0,2400,2402,3,822,411,
        0,2401,2399,1,0,0,0,2402,2405,1,0,0,0,2403,2401,1,0,0,0,2403,2404,
        1,0,0,0,2404,227,1,0,0,0,2405,2403,1,0,0,0,2406,2407,5,114,0,0,2407,
        2408,5,24,0,0,2408,2413,3,822,411,0,2409,2410,5,500,0,0,2410,2412,
        3,822,411,0,2411,2409,1,0,0,0,2412,2415,1,0,0,0,2413,2411,1,0,0,
        0,2413,2414,1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,2416,2418,
        5,150,0,0,2417,2416,1,0,0,0,2417,2418,1,0,0,0,2418,229,1,0,0,0,2419,
        2420,5,99,0,0,2420,2421,5,24,0,0,2421,2426,3,822,411,0,2422,2423,
        5,500,0,0,2423,2425,3,822,411,0,2424,2422,1,0,0,0,2425,2428,1,0,
        0,0,2426,2424,1,0,0,0,2426,2427,1,0,0,0,2427,231,1,0,0,0,2428,2426,
        1,0,0,0,2429,2430,5,248,0,0,2430,2431,5,24,0,0,2431,2432,5,173,0,
        0,2432,2433,3,822,411,0,2433,2434,5,407,0,0,2434,2435,3,822,411,
        0,2435,2443,1,0,0,0,2436,2437,5,248,0,0,2437,2438,5,24,0,0,2438,
        2439,3,822,411,0,2439,2440,5,366,0,0,2440,2441,3,808,404,0,2441,
        2443,1,0,0,0,2442,2429,1,0,0,0,2442,2436,1,0,0,0,2443,233,1,0,0,
        0,2444,2445,5,4,0,0,2445,2446,5,68,0,0,2446,2447,5,255,0,0,2447,
        2452,3,822,411,0,2448,2449,5,500,0,0,2449,2451,3,822,411,0,2450,
        2448,1,0,0,0,2451,2454,1,0,0,0,2452,2450,1,0,0,0,2452,2453,1,0,0,
        0,2453,235,1,0,0,0,2454,2452,1,0,0,0,2455,2456,5,114,0,0,2456,2457,
        5,68,0,0,2457,2458,5,255,0,0,2458,2463,3,822,411,0,2459,2460,5,500,
        0,0,2460,2462,3,822,411,0,2461,2459,1,0,0,0,2462,2465,1,0,0,0,2463,
        2461,1,0,0,0,2463,2464,1,0,0,0,2464,237,1,0,0,0,2465,2463,1,0,0,
        0,2466,2467,5,4,0,0,2467,2468,5,39,0,0,2468,2469,3,864,432,0,2469,
        2474,3,822,411,0,2470,2471,5,500,0,0,2471,2473,3,822,411,0,2472,
        2470,1,0,0,0,2473,2476,1,0,0,0,2474,2472,1,0,0,0,2474,2475,1,0,0,
        0,2475,2493,1,0,0,0,2476,2474,1,0,0,0,2477,2478,5,114,0,0,2478,2479,
        5,39,0,0,2479,2480,3,864,432,0,2480,2485,3,822,411,0,2481,2482,5,
        500,0,0,2482,2484,3,822,411,0,2483,2481,1,0,0,0,2484,2487,1,0,0,
        0,2485,2483,1,0,0,0,2485,2486,1,0,0,0,2486,2493,1,0,0,0,2487,2485,
        1,0,0,0,2488,2489,5,114,0,0,2489,2490,5,8,0,0,2490,2491,5,39,0,0,
        2491,2493,3,864,432,0,2492,2466,1,0,0,0,2492,2477,1,0,0,0,2492,2488,
        1,0,0,0,2493,239,1,0,0,0,2494,2495,5,366,0,0,2495,2496,5,222,0,0,
        2496,2497,5,124,0,0,2497,2499,5,175,0,0,2498,2500,3,804,402,0,2499,
        2498,1,0,0,0,2499,2500,1,0,0,0,2500,241,1,0,0,0,2501,2502,5,75,0,
        0,2502,2503,5,181,0,0,2503,243,1,0,0,0,2504,2505,5,55,0,0,2505,2506,
        5,393,0,0,2506,2507,5,356,0,0,2507,2508,5,312,0,0,2508,245,1,0,0,
        0,2509,2510,5,99,0,0,2510,2511,5,453,0,0,2511,2516,3,822,411,0,2512,
        2513,5,500,0,0,2513,2515,3,822,411,0,2514,2512,1,0,0,0,2515,2518,
        1,0,0,0,2516,2514,1,0,0,0,2516,2517,1,0,0,0,2517,2519,1,0,0,0,2518,
        2516,1,0,0,0,2519,2520,5,266,0,0,2520,2521,5,24,0,0,2521,2522,3,
        822,411,0,2522,247,1,0,0,0,2523,2524,5,44,0,0,2524,2525,5,99,0,0,
        2525,2526,5,453,0,0,2526,2531,3,822,411,0,2527,2528,5,500,0,0,2528,
        2530,3,822,411,0,2529,2527,1,0,0,0,2530,2533,1,0,0,0,2531,2529,1,
        0,0,0,2531,2532,1,0,0,0,2532,2534,1,0,0,0,2533,2531,1,0,0,0,2534,
        2535,5,266,0,0,2535,2536,5,24,0,0,2536,2537,3,822,411,0,2537,249,
        1,0,0,0,2538,2539,5,109,0,0,2539,2540,5,453,0,0,2540,2545,3,822,
        411,0,2541,2542,5,500,0,0,2542,2544,3,822,411,0,2543,2541,1,0,0,
        0,2544,2547,1,0,0,0,2545,2543,1,0,0,0,2545,2546,1,0,0,0,2546,2548,
        1,0,0,0,2547,2545,1,0,0,0,2548,2549,5,266,0,0,2549,2550,5,24,0,0,
        2550,2551,3,822,411,0,2551,251,1,0,0,0,2552,2553,5,44,0,0,2553,2554,
        5,109,0,0,2554,2555,5,453,0,0,2555,2560,3,822,411,0,2556,2557,5,
        500,0,0,2557,2559,3,822,411,0,2558,2556,1,0,0,0,2559,2562,1,0,0,
        0,2560,2558,1,0,0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,2560,
        1,0,0,0,2563,2564,5,266,0,0,2564,2565,5,24,0,0,2565,2566,3,822,411,
        0,2566,253,1,0,0,0,2567,2568,5,4,0,0,2568,2569,5,185,0,0,2569,2570,
        3,860,430,0,2570,2575,3,862,431,0,2571,2573,3,78,39,0,2572,2574,
        3,808,404,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2576,1,0,0,
        0,2575,2571,1,0,0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,2579,
        3,816,408,0,2578,2577,1,0,0,0,2578,2579,1,0,0,0,2579,255,1,0,0,0,
        2580,2581,5,114,0,0,2581,2582,5,185,0,0,2582,2583,3,860,430,0,2583,
        257,1,0,0,0,2584,2585,5,325,0,0,2585,2586,3,860,430,0,2586,259,1,
        0,0,0,2587,2588,5,389,0,0,2588,2589,5,446,0,0,2589,2590,3,860,430,
        0,2590,261,1,0,0,0,2591,2592,5,366,0,0,2592,2593,3,808,404,0,2593,
        263,1,0,0,0,2594,2595,5,63,0,0,2595,2596,5,455,0,0,2596,2597,3,822,
        411,0,2597,265,1,0,0,0,2598,2600,3,684,342,0,2599,2598,1,0,0,0,2599,
        2600,1,0,0,0,2600,2602,1,0,0,0,2601,2603,3,48,24,0,2602,2601,1,0,
        0,0,2602,2603,1,0,0,0,2603,2605,1,0,0,0,2604,2606,3,764,382,0,2605,
        2604,1,0,0,0,2605,2606,1,0,0,0,2606,2608,1,0,0,0,2607,2609,3,50,
        25,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,2611,1,0,0,0,2610,
        2612,3,798,399,0,2611,2610,1,0,0,0,2611,2612,1,0,0,0,2612,267,1,
        0,0,0,2613,2614,5,4,0,0,2614,2615,5,61,0,0,2615,2619,3,32,16,0,2616,
        2620,5,142,0,0,2617,2618,5,6,0,0,2618,2620,3,860,430,0,2619,2616,
        1,0,0,0,2619,2617,1,0,0,0,2619,2620,1,0,0,0,2620,2623,1,0,0,0,2621,
        2622,7,13,0,0,2622,2624,3,860,430,0,2623,2621,1,0,0,0,2623,2624,
        1,0,0,0,2624,2626,1,0,0,0,2625,2627,3,804,402,0,2626,2625,1,0,0,
        0,2626,2627,1,0,0,0,2627,269,1,0,0,0,2628,2629,5,4,0,0,2629,2630,
        5,61,0,0,2630,2631,5,498,0,0,2631,2636,3,32,16,0,2632,2633,5,500,
        0,0,2633,2635,3,32,16,0,2634,2632,1,0,0,0,2635,2638,1,0,0,0,2636,
        2634,1,0,0,0,2636,2637,1,0,0,0,2637,2639,1,0,0,0,2638,2636,1,0,0,
        0,2639,2642,5,499,0,0,2640,2641,7,13,0,0,2641,2643,3,860,430,0,2642,
        2640,1,0,0,0,2642,2643,1,0,0,0,2643,2645,1,0,0,0,2644,2646,3,804,
        402,0,2645,2644,1,0,0,0,2645,2646,1,0,0,0,2646,271,1,0,0,0,2647,
        2648,5,114,0,0,2648,2649,5,61,0,0,2649,2652,3,860,430,0,2650,2651,
        5,153,0,0,2651,2653,3,860,430,0,2652,2650,1,0,0,0,2652,2653,1,0,
        0,0,2653,2655,1,0,0,0,2654,2656,3,804,402,0,2655,2654,1,0,0,0,2655,
        2656,1,0,0,0,2656,273,1,0,0,0,2657,2658,5,248,0,0,2658,2659,5,61,
        0,0,2659,2663,3,32,16,0,2660,2664,5,142,0,0,2661,2662,5,6,0,0,2662,
        2664,3,860,430,0,2663,2660,1,0,0,0,2663,2661,1,0,0,0,2663,2664,1,
        0,0,0,2664,2667,1,0,0,0,2665,2666,5,153,0,0,2666,2668,3,860,430,
        0,2667,2665,1,0,0,0,2667,2668,1,0,0,0,2668,2670,1,0,0,0,2669,2671,
        3,804,402,0,2670,2669,1,0,0,0,2670,2671,1,0,0,0,2671,275,1,0,0,0,
        2672,2673,5,325,0,0,2673,2674,5,61,0,0,2674,2675,3,860,430,0,2675,
        2676,5,407,0,0,2676,2677,3,860,430,0,2677,277,1,0,0,0,2678,2679,
        5,274,0,0,2679,2680,5,42,0,0,2680,2683,3,862,431,0,2681,2682,5,153,
        0,0,2682,2684,3,860,430,0,2683,2681,1,0,0,0,2683,2684,1,0,0,0,2684,
        2686,1,0,0,0,2685,2687,3,804,402,0,2686,2685,1,0,0,0,2686,2687,1,
        0,0,0,2687,279,1,0,0,0,2688,2689,5,325,0,0,2689,2690,5,346,0,0,2690,
        2691,3,860,430,0,2691,2692,3,860,430,0,2692,281,1,0,0,0,2693,2695,
        7,14,0,0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,2696,1,0,0,0,2696,
        2699,5,66,0,0,2697,2700,3,860,430,0,2698,2700,3,862,431,0,2699,2697,
        1,0,0,0,2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,283,1,0,0,0,2701,
        2704,3,860,430,0,2702,2704,5,462,0,0,2703,2701,1,0,0,0,2703,2702,
        1,0,0,0,2704,285,1,0,0,0,2705,2711,3,284,142,0,2706,2710,5,491,0,
        0,2707,2708,5,501,0,0,2708,2710,3,284,142,0,2709,2706,1,0,0,0,2709,
        2707,1,0,0,0,2710,2713,1,0,0,0,2711,2709,1,0,0,0,2711,2712,1,0,0,
        0,2712,287,1,0,0,0,2713,2711,1,0,0,0,2714,2715,5,248,0,0,2715,2716,
        5,61,0,0,2716,2717,3,860,430,0,2717,2718,5,4,0,0,2718,2719,5,454,
        0,0,2719,2723,3,846,423,0,2720,2724,5,142,0,0,2721,2722,5,6,0,0,
        2722,2724,3,860,430,0,2723,2720,1,0,0,0,2723,2721,1,0,0,0,2723,2724,
        1,0,0,0,2724,2726,1,0,0,0,2725,2727,3,804,402,0,2726,2725,1,0,0,
        0,2726,2727,1,0,0,0,2727,289,1,0,0,0,2728,2729,5,248,0,0,2729,2730,
        5,61,0,0,2730,2731,3,860,430,0,2731,2732,5,114,0,0,2732,2733,5,454,
        0,0,2733,2735,3,286,143,0,2734,2736,3,804,402,0,2735,2734,1,0,0,
        0,2735,2736,1,0,0,0,2736,291,1,0,0,0,2737,2739,5,4,0,0,2738,2740,
        5,396,0,0,2739,2738,1,0,0,0,2739,2740,1,0,0,0,2740,2744,1,0,0,0,
        2741,2745,3,782,391,0,2742,2743,5,280,0,0,2743,2745,3,784,392,0,
        2744,2741,1,0,0,0,2744,2742,1,0,0,0,2745,2747,1,0,0,0,2746,2748,
        3,798,399,0,2747,2746,1,0,0,0,2747,2748,1,0,0,0,2748,2750,1,0,0,
        0,2749,2751,3,804,402,0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,
        2767,1,0,0,0,2752,2754,5,4,0,0,2753,2755,5,396,0,0,2754,2753,1,0,
        0,0,2754,2755,1,0,0,0,2755,2758,1,0,0,0,2756,2759,3,768,384,0,2757,
        2759,3,770,385,0,2758,2756,1,0,0,0,2758,2757,1,0,0,0,2759,2761,1,
        0,0,0,2760,2762,3,798,399,0,2761,2760,1,0,0,0,2761,2762,1,0,0,0,
        2762,2764,1,0,0,0,2763,2765,3,804,402,0,2764,2763,1,0,0,0,2764,2765,
        1,0,0,0,2765,2767,1,0,0,0,2766,2737,1,0,0,0,2766,2752,1,0,0,0,2767,
        293,1,0,0,0,2768,2770,5,114,0,0,2769,2771,5,396,0,0,2770,2769,1,
        0,0,0,2770,2771,1,0,0,0,2771,2772,1,0,0,0,2772,2775,5,279,0,0,2773,
        2774,5,177,0,0,2774,2776,5,129,0,0,2775,2773,1,0,0,0,2775,2776,1,
        0,0,0,2776,2777,1,0,0,0,2777,2779,3,860,430,0,2778,2780,5,150,0,
        0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,295,1,0,0,0,2781,2782,
        5,412,0,0,2782,2783,3,684,342,0,2783,297,1,0,0,0,2784,2785,5,248,
        0,0,2785,2791,5,279,0,0,2786,2792,3,860,430,0,2787,2792,3,862,431,
        0,2788,2789,5,498,0,0,2789,2790,5,465,0,0,2790,2792,5,499,0,0,2791,
        2786,1,0,0,0,2791,2787,1,0,0,0,2791,2788,1,0,0,0,2792,2793,1,0,0,
        0,2793,2794,5,366,0,0,2794,2799,3,808,404,0,2795,2796,5,248,0,0,
        2796,2797,5,279,0,0,2797,2799,3,798,399,0,2798,2784,1,0,0,0,2798,
        2795,1,0,0,0,2799,299,1,0,0,0,2800,2801,5,328,0,0,2801,2802,3,684,
        342,0,2802,2803,5,446,0,0,2803,2805,3,684,342,0,2804,2806,3,804,
        402,0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,301,1,0,0,0,2807,
        2808,5,325,0,0,2808,2809,5,279,0,0,2809,2810,3,860,430,0,2810,2811,
        3,860,430,0,2811,303,1,0,0,0,2812,2814,3,760,380,0,2813,2812,1,0,
        0,0,2813,2814,1,0,0,0,2814,2815,1,0,0,0,2815,2816,5,190,0,0,2816,
        2823,7,15,0,0,2817,2824,3,858,429,0,2818,2819,5,140,0,0,2819,2824,
        3,808,404,0,2820,2821,5,34,0,0,2821,2822,5,498,0,0,2822,2824,5,499,
        0,0,2823,2817,1,0,0,0,2823,2818,1,0,0,0,2823,2820,1,0,0,0,2824,2826,
        1,0,0,0,2825,2827,3,684,342,0,2826,2825,1,0,0,0,2826,2827,1,0,0,
        0,2827,2831,1,0,0,0,2828,2829,5,446,0,0,2829,2830,5,209,0,0,2830,
        2832,3,860,430,0,2831,2828,1,0,0,0,2831,2832,1,0,0,0,2832,2834,1,
        0,0,0,2833,2835,3,682,341,0,2834,2833,1,0,0,0,2834,2835,1,0,0,0,
        2835,2846,1,0,0,0,2836,2847,3,622,311,0,2837,2838,5,429,0,0,2838,
        2843,3,700,350,0,2839,2840,5,500,0,0,2840,2842,3,700,350,0,2841,
        2839,1,0,0,0,2842,2845,1,0,0,0,2843,2841,1,0,0,0,2843,2844,1,0,0,
        0,2844,2847,1,0,0,0,2845,2843,1,0,0,0,2846,2836,1,0,0,0,2846,2837,
        1,0,0,0,2847,305,1,0,0,0,2848,2850,3,760,380,0,2849,2848,1,0,0,0,
        2849,2850,1,0,0,0,2850,2852,1,0,0,0,2851,2853,3,626,313,0,2852,2851,
        1,0,0,0,2852,2853,1,0,0,0,2853,2854,1,0,0,0,2854,2855,5,422,0,0,
        2855,2856,3,858,429,0,2856,2857,5,366,0,0,2857,2858,3,874,437,0,
        2858,2861,3,644,322,0,2859,2860,5,444,0,0,2860,2862,3,710,355,0,
        2861,2859,1,0,0,0,2861,2862,1,0,0,0,2862,307,1,0,0,0,2863,2865,3,
        760,380,0,2864,2863,1,0,0,0,2864,2865,1,0,0,0,2865,2867,1,0,0,0,
        2866,2868,3,626,313,0,2867,2866,1,0,0,0,2867,2868,1,0,0,0,2868,2869,
        1,0,0,0,2869,2870,5,101,0,0,2870,2871,5,153,0,0,2871,2873,3,858,
        429,0,2872,2874,3,684,342,0,2873,2872,1,0,0,0,2873,2874,1,0,0,0,
        2874,2877,1,0,0,0,2875,2876,5,427,0,0,2876,2878,3,656,328,0,2877,
        2875,1,0,0,0,2877,2878,1,0,0,0,2878,2881,1,0,0,0,2879,2880,5,444,
        0,0,2880,2882,3,710,355,0,2881,2879,1,0,0,0,2881,2882,1,0,0,0,2882,
        309,1,0,0,0,2883,2884,5,75,0,0,2884,2885,5,347,0,0,2885,2889,5,222,
        0,0,2886,2887,3,858,429,0,2887,2888,5,501,0,0,2888,2890,1,0,0,0,
        2889,2886,1,0,0,0,2889,2890,1,0,0,0,2890,2891,1,0,0,0,2891,2892,
        3,860,430,0,2892,2893,5,266,0,0,2893,2902,3,858,429,0,2894,2899,
        3,316,158,0,2895,2896,5,500,0,0,2896,2898,3,316,158,0,2897,2895,
        1,0,0,0,2898,2901,1,0,0,0,2899,2897,1,0,0,0,2899,2900,1,0,0,0,2900,
        2903,1,0,0,0,2901,2899,1,0,0,0,2902,2894,1,0,0,0,2902,2903,1,0,0,
        0,2903,2905,1,0,0,0,2904,2906,3,326,163,0,2905,2904,1,0,0,0,2905,
        2906,1,0,0,0,2906,2907,1,0,0,0,2907,2908,5,153,0,0,2908,2910,3,860,
        430,0,2909,2911,3,328,164,0,2910,2909,1,0,0,0,2910,2911,1,0,0,0,
        2911,311,1,0,0,0,2912,2913,5,9,0,0,2913,2914,5,347,0,0,2914,2915,
        5,222,0,0,2915,2919,5,149,0,0,2916,2917,3,858,429,0,2917,2918,5,
        501,0,0,2918,2920,1,0,0,0,2919,2916,1,0,0,0,2919,2920,1,0,0,0,2920,
        2921,1,0,0,0,2921,2930,3,860,430,0,2922,2927,3,316,158,0,2923,2924,
        5,500,0,0,2924,2926,3,316,158,0,2925,2923,1,0,0,0,2926,2929,1,0,
        0,0,2927,2925,1,0,0,0,2927,2928,1,0,0,0,2928,2931,1,0,0,0,2929,2927,
        1,0,0,0,2930,2922,1,0,0,0,2930,2931,1,0,0,0,2931,2933,1,0,0,0,2932,
        2934,3,326,163,0,2933,2932,1,0,0,0,2933,2934,1,0,0,0,2934,2936,1,
        0,0,0,2935,2937,3,314,157,0,2936,2935,1,0,0,0,2936,2937,1,0,0,0,
        2937,313,1,0,0,0,2938,2939,5,153,0,0,2939,2940,3,860,430,0,2940,
        2941,3,328,164,0,2941,315,1,0,0,0,2942,2949,3,318,159,0,2943,2949,
        3,320,160,0,2944,2949,3,322,161,0,2945,2946,5,444,0,0,2946,2949,
        3,710,355,0,2947,2949,3,684,342,0,2948,2942,1,0,0,0,2948,2943,1,
        0,0,0,2948,2944,1,0,0,0,2948,2945,1,0,0,0,2948,2947,1,0,0,0,2949,
        317,1,0,0,0,2950,2951,5,62,0,0,2951,2952,5,397,0,0,2952,2953,5,42,
        0,0,2953,2954,3,822,411,0,2954,319,1,0,0,0,2955,2956,5,349,0,0,2956,
        2957,5,397,0,0,2957,2958,5,42,0,0,2958,2959,3,822,411,0,2959,321,
        1,0,0,0,2960,2961,5,62,0,0,2961,2962,3,324,162,0,2962,323,1,0,0,
        0,2963,2966,5,498,0,0,2964,2967,3,858,429,0,2965,2967,3,872,436,
        0,2966,2964,1,0,0,0,2966,2965,1,0,0,0,2967,2975,1,0,0,0,2968,2971,
        5,500,0,0,2969,2972,3,858,429,0,2970,2972,3,872,436,0,2971,2969,
        1,0,0,0,2971,2970,1,0,0,0,2972,2974,1,0,0,0,2973,2968,1,0,0,0,2974,
        2977,1,0,0,0,2975,2973,1,0,0,0,2975,2976,1,0,0,0,2976,2978,1,0,0,
        0,2977,2975,1,0,0,0,2978,2979,5,499,0,0,2979,325,1,0,0,0,2980,2981,
        3,804,402,0,2981,327,1,0,0,0,2982,2983,3,808,404,0,2983,329,1,0,
        0,0,2984,2985,5,378,0,0,2985,2986,5,347,0,0,2986,2987,5,222,0,0,
        2987,2991,5,149,0,0,2988,2989,3,858,429,0,2989,2990,5,501,0,0,2990,
        2992,1,0,0,0,2991,2988,1,0,0,0,2991,2992,1,0,0,0,2992,2993,1,0,0,
        0,2993,2994,3,860,430,0,2994,331,1,0,0,0,2995,2996,5,336,0,0,2996,
        2997,5,347,0,0,2997,2998,5,222,0,0,2998,3002,5,149,0,0,2999,3000,
        3,858,429,0,3000,3001,5,501,0,0,3001,3003,1,0,0,0,3002,2999,1,0,
        0,0,3002,3003,1,0,0,0,3003,3004,1,0,0,0,3004,3005,3,860,430,0,3005,
        333,1,0,0,0,3006,3007,5,283,0,0,3007,3008,5,347,0,0,3008,3009,5,
        222,0,0,3009,3013,5,149,0,0,3010,3011,3,858,429,0,3011,3012,5,501,
        0,0,3012,3014,1,0,0,0,3013,3010,1,0,0,0,3013,3014,1,0,0,0,3014,3015,
        1,0,0,0,3015,3016,3,860,430,0,3016,335,1,0,0,0,3017,3019,5,371,0,
        0,3018,3020,5,8,0,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3021,
        1,0,0,0,3021,3022,5,347,0,0,3022,3030,5,222,0,0,3023,3027,5,149,
        0,0,3024,3025,3,858,429,0,3025,3026,5,501,0,0,3026,3028,1,0,0,0,
        3027,3024,1,0,0,0,3027,3028,1,0,0,0,3028,3029,1,0,0,0,3029,3031,
        3,860,430,0,3030,3023,1,0,0,0,3030,3031,1,0,0,0,3031,3034,1,0,0,
        0,3032,3033,5,153,0,0,3033,3035,3,858,429,0,3034,3032,1,0,0,0,3034,
        3035,1,0,0,0,3035,3038,1,0,0,0,3036,3037,5,444,0,0,3037,3039,3,710,
        355,0,3038,3036,1,0,0,0,3038,3039,1,0,0,0,3039,3050,1,0,0,0,3040,
        3041,5,274,0,0,3041,3042,5,42,0,0,3042,3047,3,638,319,0,3043,3044,
        5,500,0,0,3044,3046,3,638,319,0,3045,3043,1,0,0,0,3046,3049,1,0,
        0,0,3047,3045,1,0,0,0,3047,3048,1,0,0,0,3048,3051,1,0,0,0,3049,3047,
        1,0,0,0,3050,3040,1,0,0,0,3050,3051,1,0,0,0,3051,3053,1,0,0,0,3052,
        3054,3,640,320,0,3053,3052,1,0,0,0,3053,3054,1,0,0,0,3054,337,1,
        0,0,0,3055,3056,5,371,0,0,3056,3057,5,347,0,0,3057,3058,5,222,0,
        0,3058,3061,5,395,0,0,3059,3060,5,153,0,0,3060,3062,3,858,429,0,
        3061,3059,1,0,0,0,3061,3062,1,0,0,0,3062,3063,1,0,0,0,3063,3064,
        5,444,0,0,3064,3065,3,710,355,0,3065,339,1,0,0,0,3066,3067,5,371,
        0,0,3067,3068,5,75,0,0,3068,3069,5,347,0,0,3069,3073,5,222,0,0,3070,
        3071,3,858,429,0,3071,3072,5,501,0,0,3072,3074,1,0,0,0,3073,3070,
        1,0,0,0,3073,3074,1,0,0,0,3074,3075,1,0,0,0,3075,3076,3,860,430,
        0,3076,341,1,0,0,0,3077,3079,5,371,0,0,3078,3080,5,8,0,0,3079,3078,
        1,0,0,0,3079,3080,1,0,0,0,3080,3081,1,0,0,0,3081,3082,5,380,0,0,
        3082,3090,5,222,0,0,3083,3087,5,149,0,0,3084,3085,3,858,429,0,3085,
        3086,5,501,0,0,3086,3088,1,0,0,0,3087,3084,1,0,0,0,3087,3088,1,0,
        0,0,3088,3089,1,0,0,0,3089,3091,3,860,430,0,3090,3083,1,0,0,0,3090,
        3091,1,0,0,0,3091,3094,1,0,0,0,3092,3093,5,153,0,0,3093,3095,3,858,
        429,0,3094,3092,1,0,0,0,3094,3095,1,0,0,0,3095,3098,1,0,0,0,3096,
        3097,5,444,0,0,3097,3099,3,710,355,0,3098,3096,1,0,0,0,3098,3099,
        1,0,0,0,3099,3110,1,0,0,0,3100,3101,5,274,0,0,3101,3102,5,42,0,0,
        3102,3107,3,638,319,0,3103,3104,5,500,0,0,3104,3106,3,638,319,0,
        3105,3103,1,0,0,0,3106,3109,1,0,0,0,3107,3105,1,0,0,0,3107,3108,
        1,0,0,0,3108,3111,1,0,0,0,3109,3107,1,0,0,0,3110,3100,1,0,0,0,3110,
        3111,1,0,0,0,3111,3113,1,0,0,0,3112,3114,3,640,320,0,3113,3112,1,
        0,0,0,3113,3114,1,0,0,0,3114,343,1,0,0,0,3115,3117,5,10,0,0,3116,
        3118,7,16,0,0,3117,3116,1,0,0,0,3117,3118,1,0,0,0,3118,3119,1,0,
        0,0,3119,3120,5,391,0,0,3120,3132,3,858,429,0,3121,3122,5,498,0,
        0,3122,3127,3,858,429,0,3123,3124,5,500,0,0,3124,3126,3,858,429,
        0,3125,3123,1,0,0,0,3126,3129,1,0,0,0,3127,3125,1,0,0,0,3127,3128,
        1,0,0,0,3128,3130,1,0,0,0,3129,3127,1,0,0,0,3130,3131,5,499,0,0,
        3131,3133,1,0,0,0,3132,3121,1,0,0,0,3132,3133,1,0,0,0,3133,3137,
        1,0,0,0,3134,3135,5,446,0,0,3135,3136,7,11,0,0,3136,3138,5,247,0,
        0,3137,3134,1,0,0,0,3137,3138,1,0,0,0,3138,3140,1,0,0,0,3139,3141,
        3,804,402,0,3140,3139,1,0,0,0,3140,3141,1,0,0,0,3141,345,1,0,0,0,
        3142,3143,5,114,0,0,3143,3144,5,376,0,0,3144,3145,3,858,429,0,3145,
        347,1,0,0,0,3146,3147,5,10,0,0,3147,3148,5,391,0,0,3148,3149,3,858,
        429,0,3149,3150,5,422,0,0,3150,3151,5,170,0,0,3151,3152,5,266,0,
        0,3152,3157,3,858,429,0,3153,3154,5,500,0,0,3154,3156,3,858,429,
        0,3155,3153,1,0,0,0,3156,3159,1,0,0,0,3157,3155,1,0,0,0,3157,3158,
        1,0,0,0,3158,3163,1,0,0,0,3159,3157,1,0,0,0,3160,3161,5,446,0,0,
        3161,3162,7,11,0,0,3162,3164,5,247,0,0,3163,3160,1,0,0,0,3163,3164,
        1,0,0,0,3164,3168,1,0,0,0,3165,3166,5,446,0,0,3166,3167,5,481,0,
        0,3167,3169,5,40,0,0,3168,3165,1,0,0,0,3168,3169,1,0,0,0,3169,3171,
        1,0,0,0,3170,3172,3,804,402,0,3171,3170,1,0,0,0,3171,3172,1,0,0,
        0,3172,349,1,0,0,0,3173,3174,5,10,0,0,3174,3175,5,391,0,0,3175,3176,
        3,858,429,0,3176,3177,5,114,0,0,3177,3178,5,170,0,0,3178,3179,5,
        266,0,0,3179,3184,3,858,429,0,3180,3181,5,500,0,0,3181,3183,3,858,
        429,0,3182,3180,1,0,0,0,3183,3186,1,0,0,0,3184,3182,1,0,0,0,3184,
        3185,1,0,0,0,3185,351,1,0,0,0,3186,3184,1,0,0,0,3187,3188,5,75,0,
        0,3188,3190,5,10,0,0,3189,3191,7,16,0,0,3190,3189,1,0,0,0,3190,3191,
        1,0,0,0,3191,3192,1,0,0,0,3192,3194,5,8,0,0,3193,3195,3,804,402,
        0,3194,3193,1,0,0,0,3194,3195,1,0,0,0,3195,3230,1,0,0,0,3196,3197,
        5,75,0,0,3197,3199,5,10,0,0,3198,3200,7,16,0,0,3199,3198,1,0,0,0,
        3199,3200,1,0,0,0,3200,3201,1,0,0,0,3201,3202,5,88,0,0,3202,3204,
        3,860,430,0,3203,3205,3,804,402,0,3204,3203,1,0,0,0,3204,3205,1,
        0,0,0,3205,3230,1,0,0,0,3206,3207,5,75,0,0,3207,3209,5,10,0,0,3208,
        3210,7,16,0,0,3209,3208,1,0,0,0,3209,3210,1,0,0,0,3210,3211,1,0,
        0,0,3211,3212,5,391,0,0,3212,3224,3,858,429,0,3213,3214,5,498,0,
        0,3214,3219,3,858,429,0,3215,3216,5,500,0,0,3216,3218,3,858,429,
        0,3217,3215,1,0,0,0,3218,3221,1,0,0,0,3219,3217,1,0,0,0,3219,3220,
        1,0,0,0,3220,3222,1,0,0,0,3221,3219,1,0,0,0,3222,3223,5,499,0,0,
        3223,3225,1,0,0,0,3224,3213,1,0,0,0,3224,3225,1,0,0,0,3225,3227,
        1,0,0,0,3226,3228,3,804,402,0,3227,3226,1,0,0,0,3227,3228,1,0,0,
        0,3228,3230,1,0,0,0,3229,3187,1,0,0,0,3229,3196,1,0,0,0,3229,3206,
        1,0,0,0,3230,353,1,0,0,0,3231,3232,5,114,0,0,3232,3233,5,10,0,0,
        3233,3234,5,481,0,0,3234,355,1,0,0,0,3235,3236,5,371,0,0,3236,3238,
        5,10,0,0,3237,3239,7,17,0,0,3238,3237,1,0,0,0,3238,3239,1,0,0,0,
        3239,3242,1,0,0,0,3240,3241,5,444,0,0,3241,3243,3,710,355,0,3242,
        3240,1,0,0,0,3242,3243,1,0,0,0,3243,357,1,0,0,0,3244,3245,5,371,
        0,0,3245,3246,5,376,0,0,3246,3249,5,245,0,0,3247,3248,5,444,0,0,
        3248,3250,3,710,355,0,3249,3247,1,0,0,0,3249,3250,1,0,0,0,3250,359,
        1,0,0,0,3251,3252,5,371,0,0,3252,3253,5,170,0,0,3253,3256,5,245,
        0,0,3254,3255,5,444,0,0,3255,3257,3,710,355,0,3256,3254,1,0,0,0,
        3256,3257,1,0,0,0,3257,361,1,0,0,0,3258,3259,5,208,0,0,3259,3260,
        5,10,0,0,3260,3261,5,481,0,0,3261,363,1,0,0,0,3262,3263,5,10,0,0,
        3263,3264,5,304,0,0,3264,3265,5,153,0,0,3265,3280,3,822,411,0,3266,
        3267,5,10,0,0,3267,3268,5,304,0,0,3268,3269,5,153,0,0,3269,3270,
        3,822,411,0,3270,3271,5,500,0,0,3271,3276,5,481,0,0,3272,3273,5,
        500,0,0,3273,3275,5,481,0,0,3274,3272,1,0,0,0,3275,3278,1,0,0,0,
        3276,3274,1,0,0,0,3276,3277,1,0,0,0,3277,3280,1,0,0,0,3278,3276,
        1,0,0,0,3279,3262,1,0,0,0,3279,3266,1,0,0,0,3280,365,1,0,0,0,3281,
        3282,5,75,0,0,3282,3283,5,333,0,0,3283,3287,5,162,0,0,3284,3285,
        5,177,0,0,3285,3286,5,258,0,0,3286,3288,5,129,0,0,3287,3284,1,0,
        0,0,3287,3288,1,0,0,0,3288,3291,1,0,0,0,3289,3290,5,273,0,0,3290,
        3292,5,328,0,0,3291,3289,1,0,0,0,3291,3292,1,0,0,0,3292,3293,1,0,
        0,0,3293,3303,3,860,430,0,3294,3295,5,407,0,0,3295,3300,3,384,192,
        0,3296,3297,5,500,0,0,3297,3299,3,384,192,0,3298,3296,1,0,0,0,3299,
        3302,1,0,0,0,3300,3298,1,0,0,0,3300,3301,1,0,0,0,3301,3304,1,0,0,
        0,3302,3300,1,0,0,0,3303,3294,1,0,0,0,3303,3304,1,0,0,0,3304,3305,
        1,0,0,0,3305,3306,5,446,0,0,3306,3307,5,498,0,0,3307,3312,3,812,
        406,0,3308,3309,5,500,0,0,3309,3311,3,812,406,0,3310,3308,1,0,0,
        0,3311,3314,1,0,0,0,3312,3310,1,0,0,0,3312,3313,1,0,0,0,3313,3315,
        1,0,0,0,3314,3312,1,0,0,0,3315,3316,5,499,0,0,3316,367,1,0,0,0,3317,
        3318,5,114,0,0,3318,3319,5,333,0,0,3319,3320,5,162,0,0,3320,3321,
        3,860,430,0,3321,369,1,0,0,0,3322,3323,5,9,0,0,3323,3324,5,333,0,
        0,3324,3325,5,162,0,0,3325,3326,3,860,430,0,3326,3327,5,4,0,0,3327,
        3332,3,384,192,0,3328,3329,5,500,0,0,3329,3331,3,384,192,0,3330,
        3328,1,0,0,0,3331,3334,1,0,0,0,3332,3330,1,0,0,0,3332,3333,1,0,0,
        0,3333,3375,1,0,0,0,3334,3332,1,0,0,0,3335,3336,5,9,0,0,3336,3337,
        5,333,0,0,3337,3338,5,162,0,0,3338,3339,3,860,430,0,3339,3340,5,
        114,0,0,3340,3341,5,498,0,0,3341,3346,5,481,0,0,3342,3343,5,500,
        0,0,3343,3345,5,481,0,0,3344,3342,1,0,0,0,3345,3348,1,0,0,0,3346,
        3344,1,0,0,0,3346,3347,1,0,0,0,3347,3349,1,0,0,0,3348,3346,1,0,0,
        0,3349,3350,5,499,0,0,3350,3375,1,0,0,0,3351,3352,5,9,0,0,3352,3353,
        5,333,0,0,3353,3354,5,162,0,0,3354,3355,3,860,430,0,3355,3356,5,
        114,0,0,3356,3357,5,8,0,0,3357,3375,1,0,0,0,3358,3359,5,9,0,0,3359,
        3360,5,333,0,0,3360,3361,5,162,0,0,3361,3362,3,860,430,0,3362,3363,
        5,446,0,0,3363,3364,5,498,0,0,3364,3369,3,812,406,0,3365,3366,5,
        500,0,0,3366,3368,3,812,406,0,3367,3365,1,0,0,0,3368,3371,1,0,0,
        0,3369,3367,1,0,0,0,3369,3370,1,0,0,0,3370,3372,1,0,0,0,3371,3369,
        1,0,0,0,3372,3373,5,499,0,0,3373,3375,1,0,0,0,3374,3322,1,0,0,0,
        3374,3335,1,0,0,0,3374,3351,1,0,0,0,3374,3358,1,0,0,0,3375,371,1,
        0,0,0,3376,3377,5,371,0,0,3377,3378,5,333,0,0,3378,3379,5,162,0,
        0,3379,3387,3,860,430,0,3380,3381,5,371,0,0,3381,3382,5,333,0,0,
        3382,3384,5,163,0,0,3383,3385,5,8,0,0,3384,3383,1,0,0,0,3384,3385,
        1,0,0,0,3385,3387,1,0,0,0,3386,3376,1,0,0,0,3386,3380,1,0,0,0,3387,
        373,1,0,0,0,3388,3389,5,371,0,0,3389,3390,5,423,0,0,3390,3391,5,
        333,0,0,3391,3392,5,162,0,0,3392,3398,3,860,430,0,3393,3394,5,371,
        0,0,3394,3395,5,423,0,0,3395,3396,5,333,0,0,3396,3398,5,163,0,0,
        3397,3388,1,0,0,0,3397,3393,1,0,0,0,3398,375,1,0,0,0,3399,3401,5,
        75,0,0,3400,3402,5,132,0,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,
        3403,1,0,0,0,3403,3404,5,333,0,0,3404,3406,3,864,432,0,3405,3407,
        3,804,402,0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,377,1,0,0,0,
        3408,3409,5,9,0,0,3409,3410,5,333,0,0,3410,3411,3,864,432,0,3411,
        3412,5,366,0,0,3412,3413,3,804,402,0,3413,379,1,0,0,0,3414,3415,
        5,114,0,0,3415,3416,5,333,0,0,3416,3417,3,864,432,0,3417,381,1,0,
        0,0,3418,3419,5,371,0,0,3419,3420,5,334,0,0,3420,383,1,0,0,0,3421,
        3422,5,498,0,0,3422,3423,3,712,356,0,3423,3424,5,499,0,0,3424,385,
        1,0,0,0,3425,3427,5,371,0,0,3426,3428,5,156,0,0,3427,3426,1,0,0,
        0,3427,3428,1,0,0,0,3428,3430,1,0,0,0,3429,3431,7,18,0,0,3430,3429,
        1,0,0,0,3430,3431,1,0,0,0,3431,3432,1,0,0,0,3432,3435,5,158,0,0,
        3433,3434,7,1,0,0,3434,3436,3,858,429,0,3435,3433,1,0,0,0,3435,3436,
        1,0,0,0,3436,3441,1,0,0,0,3437,3438,5,219,0,0,3438,3442,3,822,411,
        0,3439,3440,5,444,0,0,3440,3442,3,710,355,0,3441,3437,1,0,0,0,3441,
        3439,1,0,0,0,3441,3442,1,0,0,0,3442,387,1,0,0,0,3443,3445,5,114,
        0,0,3444,3446,5,159,0,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,
        3447,1,0,0,0,3447,3448,5,157,0,0,3448,3449,3,858,429,0,3449,3450,
        5,498,0,0,3450,3451,3,392,196,0,3451,3452,5,499,0,0,3452,389,1,0,
        0,0,3453,3455,5,75,0,0,3454,3456,5,159,0,0,3455,3454,1,0,0,0,3455,
        3456,1,0,0,0,3456,3458,1,0,0,0,3457,3459,7,19,0,0,3458,3457,1,0,
        0,0,3458,3459,1,0,0,0,3459,3460,1,0,0,0,3460,3461,5,157,0,0,3461,
        3462,3,858,429,0,3462,3463,5,498,0,0,3463,3464,3,392,196,0,3464,
        3465,5,499,0,0,3465,3466,5,337,0,0,3466,3469,3,840,420,0,3467,3468,
        5,195,0,0,3468,3470,3,840,420,0,3469,3467,1,0,0,0,3469,3470,1,0,
        0,0,3470,3472,1,0,0,0,3471,3473,3,804,402,0,3472,3471,1,0,0,0,3472,
        3473,1,0,0,0,3473,391,1,0,0,0,3474,3476,3,840,420,0,3475,3474,1,
        0,0,0,3475,3476,1,0,0,0,3476,3481,1,0,0,0,3477,3478,5,500,0,0,3478,
        3480,3,840,420,0,3479,3477,1,0,0,0,3480,3483,1,0,0,0,3481,3479,1,
        0,0,0,3481,3482,1,0,0,0,3482,3486,1,0,0,0,3483,3481,1,0,0,0,3484,
        3485,5,500,0,0,3485,3487,5,496,0,0,3486,3484,1,0,0,0,3486,3487,1,
        0,0,0,3487,393,1,0,0,0,3488,3489,5,222,0,0,3489,3490,5,209,0,0,3490,
        3492,3,396,198,0,3491,3493,3,398,199,0,3492,3491,1,0,0,0,3492,3493,
        1,0,0,0,3493,3495,1,0,0,0,3494,3496,3,404,202,0,3495,3494,1,0,0,
        0,3495,3496,1,0,0,0,3496,3499,1,0,0,0,3497,3498,5,42,0,0,3498,3500,
        3,864,432,0,3499,3497,1,0,0,0,3499,3500,1,0,0,0,3500,3503,1,0,0,
        0,3501,3502,5,306,0,0,3502,3504,3,808,404,0,3503,3501,1,0,0,0,3503,
        3504,1,0,0,0,3504,3517,1,0,0,0,3505,3506,5,222,0,0,3506,3507,5,209,
        0,0,3507,3509,3,396,198,0,3508,3510,3,398,199,0,3509,3508,1,0,0,
        0,3509,3510,1,0,0,0,3510,3511,1,0,0,0,3511,3514,3,406,203,0,3512,
        3513,5,306,0,0,3513,3515,3,808,404,0,3514,3512,1,0,0,0,3514,3515,
        1,0,0,0,3515,3517,1,0,0,0,3516,3488,1,0,0,0,3516,3505,1,0,0,0,3517,
        395,1,0,0,0,3518,3519,3,860,430,0,3519,3520,5,501,0,0,3520,3522,
        1,0,0,0,3521,3518,1,0,0,0,3521,3522,1,0,0,0,3522,3523,1,0,0,0,3523,
        3524,3,860,430,0,3524,397,1,0,0,0,3525,3526,5,498,0,0,3526,3531,
        3,400,200,0,3527,3528,5,500,0,0,3528,3530,3,400,200,0,3529,3527,
        1,0,0,0,3530,3533,1,0,0,0,3531,3529,1,0,0,0,3531,3532,1,0,0,0,3532,
        3534,1,0,0,0,3533,3531,1,0,0,0,3534,3535,5,499,0,0,3535,399,1,0,
        0,0,3536,3537,5,86,0,0,3537,3538,5,187,0,0,3538,3540,3,776,388,0,
        3539,3541,5,252,0,0,3540,3539,1,0,0,0,3540,3541,1,0,0,0,3541,3542,
        1,0,0,0,3542,3543,5,198,0,0,3543,3544,5,391,0,0,3544,3546,3,860,
        430,0,3545,3547,3,684,342,0,3546,3545,1,0,0,0,3546,3547,1,0,0,0,
        3547,3552,1,0,0,0,3548,3549,5,62,0,0,3549,3550,5,397,0,0,3550,3551,
        5,42,0,0,3551,3553,3,822,411,0,3552,3548,1,0,0,0,3552,3553,1,0,0,
        0,3553,3558,1,0,0,0,3554,3555,5,349,0,0,3555,3556,5,397,0,0,3556,
        3557,5,42,0,0,3557,3559,3,822,411,0,3558,3554,1,0,0,0,3558,3559,
        1,0,0,0,3559,3561,1,0,0,0,3560,3562,3,820,410,0,3561,3560,1,0,0,
        0,3561,3562,1,0,0,0,3562,3564,1,0,0,0,3563,3565,3,402,201,0,3564,
        3563,1,0,0,0,3564,3565,1,0,0,0,3565,3567,1,0,0,0,3566,3568,3,682,
        341,0,3567,3566,1,0,0,0,3567,3568,1,0,0,0,3568,3574,1,0,0,0,3569,
        3570,5,62,0,0,3570,3571,5,153,0,0,3571,3572,5,282,0,0,3572,3573,
        5,17,0,0,3573,3575,3,862,431,0,3574,3569,1,0,0,0,3574,3575,1,0,0,
        0,3575,3578,1,0,0,0,3576,3577,5,366,0,0,3577,3579,3,384,192,0,3578,
        3576,1,0,0,0,3578,3579,1,0,0,0,3579,3582,1,0,0,0,3580,3581,5,444,
        0,0,3581,3583,3,710,355,0,3582,3580,1,0,0,0,3582,3583,1,0,0,0,3583,
        3606,1,0,0,0,3584,3585,5,86,0,0,3585,3586,5,153,0,0,3586,3587,5,
        391,0,0,3587,3589,3,860,430,0,3588,3590,5,252,0,0,3589,3588,1,0,
        0,0,3589,3590,1,0,0,0,3590,3591,1,0,0,0,3591,3592,5,198,0,0,3592,
        3593,5,391,0,0,3593,3595,3,860,430,0,3594,3596,3,684,342,0,3595,
        3594,1,0,0,0,3595,3596,1,0,0,0,3596,3599,1,0,0,0,3597,3598,5,366,
        0,0,3598,3600,3,384,192,0,3599,3597,1,0,0,0,3599,3600,1,0,0,0,3600,
        3603,1,0,0,0,3601,3602,5,444,0,0,3602,3604,3,710,355,0,3603,3601,
        1,0,0,0,3603,3604,1,0,0,0,3604,3606,1,0,0,0,3605,3536,1,0,0,0,3605,
        3584,1,0,0,0,3606,401,1,0,0,0,3607,3611,5,498,0,0,3608,3609,5,370,
        0,0,3609,3610,5,455,0,0,3610,3612,5,481,0,0,3611,3608,1,0,0,0,3611,
        3612,1,0,0,0,3612,3616,1,0,0,0,3613,3614,5,410,0,0,3614,3615,5,455,
        0,0,3615,3617,3,828,414,0,3616,3613,1,0,0,0,3616,3617,1,0,0,0,3617,
        3621,1,0,0,0,3618,3619,5,120,0,0,3619,3620,5,455,0,0,3620,3622,3,
        822,411,0,3621,3618,1,0,0,0,3621,3622,1,0,0,0,3622,3626,1,0,0,0,
        3623,3624,5,125,0,0,3624,3625,5,455,0,0,3625,3627,3,822,411,0,3626,
        3623,1,0,0,0,3626,3627,1,0,0,0,3627,3628,1,0,0,0,3628,3629,5,499,
        0,0,3629,403,1,0,0,0,3630,3631,5,446,0,0,3631,3633,5,39,0,0,3632,
        3634,3,808,404,0,3633,3632,1,0,0,0,3633,3634,1,0,0,0,3634,3642,1,
        0,0,0,3635,3636,5,446,0,0,3636,3637,5,39,0,0,3637,3639,3,864,432,
        0,3638,3640,3,808,404,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,
        3642,1,0,0,0,3641,3630,1,0,0,0,3641,3635,1,0,0,0,3642,405,1,0,0,
        0,3643,3644,5,446,0,0,3644,3645,5,333,0,0,3645,3647,3,864,432,0,
        3646,3648,3,808,404,0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,407,
        1,0,0,0,3649,3650,5,371,0,0,3650,3652,5,222,0,0,3651,3653,5,8,0,
        0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3656,1,0,0,0,3654,3655,
        5,153,0,0,3655,3657,3,860,430,0,3656,3654,1,0,0,0,3656,3657,1,0,
        0,0,3657,3660,1,0,0,0,3658,3659,5,444,0,0,3659,3661,3,710,355,0,
        3660,3658,1,0,0,0,3660,3661,1,0,0,0,3661,3672,1,0,0,0,3662,3663,
        5,274,0,0,3663,3664,5,42,0,0,3664,3669,3,638,319,0,3665,3666,5,500,
        0,0,3666,3668,3,638,319,0,3667,3665,1,0,0,0,3668,3671,1,0,0,0,3669,
        3667,1,0,0,0,3669,3670,1,0,0,0,3670,3673,1,0,0,0,3671,3669,1,0,0,
        0,3672,3662,1,0,0,0,3672,3673,1,0,0,0,3673,3675,1,0,0,0,3674,3676,
        3,640,320,0,3675,3674,1,0,0,0,3675,3676,1,0,0,0,3676,409,1,0,0,0,
        3677,3678,5,371,0,0,3678,3679,5,222,0,0,3679,3682,5,441,0,0,3680,
        3681,5,153,0,0,3681,3683,3,860,430,0,3682,3680,1,0,0,0,3682,3683,
        1,0,0,0,3683,3686,1,0,0,0,3684,3685,5,444,0,0,3685,3687,3,710,355,
        0,3686,3684,1,0,0,0,3686,3687,1,0,0,0,3687,3689,1,0,0,0,3688,3690,
        3,640,320,0,3689,3688,1,0,0,0,3689,3690,1,0,0,0,3690,3697,1,0,0,
        0,3691,3692,5,371,0,0,3692,3693,5,222,0,0,3693,3694,5,441,0,0,3694,
        3695,5,266,0,0,3695,3697,3,822,411,0,3696,3677,1,0,0,0,3696,3691,
        1,0,0,0,3697,411,1,0,0,0,3698,3699,5,44,0,0,3699,3702,5,222,0,0,
        3700,3701,5,153,0,0,3701,3703,3,860,430,0,3702,3700,1,0,0,0,3702,
        3703,1,0,0,0,3703,3706,1,0,0,0,3704,3705,5,444,0,0,3705,3707,3,710,
        355,0,3706,3704,1,0,0,0,3706,3707,1,0,0,0,3707,413,1,0,0,0,3708,
        3709,5,9,0,0,3709,3710,5,222,0,0,3710,3714,5,149,0,0,3711,3712,3,
        858,429,0,3712,3713,5,501,0,0,3713,3715,1,0,0,0,3714,3711,1,0,0,
        0,3714,3715,1,0,0,0,3715,3716,1,0,0,0,3716,3718,3,860,430,0,3717,
        3719,3,326,163,0,3718,3717,1,0,0,0,3718,3719,1,0,0,0,3719,415,1,
        0,0,0,3720,3721,5,44,0,0,3721,3722,5,67,0,0,3722,3723,5,444,0,0,
        3723,3724,3,710,355,0,3724,417,1,0,0,0,3725,3726,5,371,0,0,3726,
        3727,5,20,0,0,3727,419,1,0,0,0,3728,3729,5,371,0,0,3729,3730,5,25,
        0,0,3730,421,1,0,0,0,3731,3732,5,371,0,0,3732,3733,5,39,0,0,3733,
        423,1,0,0,0,3734,3740,5,371,0,0,3735,3736,5,51,0,0,3736,3741,5,366,
        0,0,3737,3741,5,53,0,0,3738,3739,5,52,0,0,3739,3741,5,366,0,0,3740,
        3735,1,0,0,0,3740,3737,1,0,0,0,3740,3738,1,0,0,0,3741,3746,1,0,0,
        0,3742,3743,5,219,0,0,3743,3747,3,822,411,0,3744,3745,5,444,0,0,
        3745,3747,3,710,355,0,3746,3742,1,0,0,0,3746,3744,1,0,0,0,3746,3747,
        1,0,0,0,3747,425,1,0,0,0,3748,3749,5,371,0,0,3749,3754,5,60,0,0,
        3750,3751,5,219,0,0,3751,3755,3,822,411,0,3752,3753,5,444,0,0,3753,
        3755,3,710,355,0,3754,3750,1,0,0,0,3754,3752,1,0,0,0,3754,3755,1,
        0,0,0,3755,427,1,0,0,0,3756,3757,5,371,0,0,3757,3760,5,101,0,0,3758,
        3759,7,1,0,0,3759,3761,3,858,429,0,3760,3758,1,0,0,0,3760,3761,1,
        0,0,0,3761,429,1,0,0,0,3762,3763,5,371,0,0,3763,3764,5,117,0,0,3764,
        3765,5,279,0,0,3765,3768,5,392,0,0,3766,3767,7,1,0,0,3767,3769,3,
        858,429,0,3768,3766,1,0,0,0,3768,3769,1,0,0,0,3769,431,1,0,0,0,3770,
        3771,5,371,0,0,3771,3774,5,126,0,0,3772,3773,7,1,0,0,3773,3775,3,
        858,429,0,3774,3772,1,0,0,0,3774,3775,1,0,0,0,3775,3780,1,0,0,0,
        3776,3777,5,219,0,0,3777,3781,3,822,411,0,3778,3779,5,444,0,0,3779,
        3781,3,710,355,0,3780,3776,1,0,0,0,3780,3778,1,0,0,0,3780,3781,1,
        0,0,0,3781,433,1,0,0,0,3782,3783,5,371,0,0,3783,3784,5,123,0,0,3784,
        435,1,0,0,0,3785,3786,5,371,0,0,3786,3787,5,155,0,0,3787,437,1,0,
        0,0,3788,3789,5,371,0,0,3789,3790,5,289,0,0,3790,439,1,0,0,0,3791,
        3792,5,371,0,0,3792,3793,5,332,0,0,3793,441,1,0,0,0,3794,3795,5,
        371,0,0,3795,3796,5,268,0,0,3796,3797,5,392,0,0,3797,443,1,0,0,0,
        3798,3799,5,371,0,0,3799,3800,5,299,0,0,3800,445,1,0,0,0,3801,3802,
        5,371,0,0,3802,3803,7,20,0,0,3803,3808,5,377,0,0,3804,3805,5,219,
        0,0,3805,3809,3,822,411,0,3806,3807,5,444,0,0,3807,3809,3,710,355,
        0,3808,3804,1,0,0,0,3808,3806,1,0,0,0,3808,3809,1,0,0,0,3809,447,
        1,0,0,0,3810,3811,5,371,0,0,3811,3812,5,301,0,0,3812,3813,3,822,
        411,0,3813,449,1,0,0,0,3814,3816,5,371,0,0,3815,3817,5,156,0,0,3816,
        3815,1,0,0,0,3816,3817,1,0,0,0,3817,3818,1,0,0,0,3818,3821,5,303,
        0,0,3819,3820,5,149,0,0,3820,3822,3,822,411,0,3821,3819,1,0,0,0,
        3821,3822,1,0,0,0,3822,451,1,0,0,0,3823,3824,5,371,0,0,3824,3827,
        5,305,0,0,3825,3826,5,220,0,0,3826,3828,5,481,0,0,3827,3825,1,0,
        0,0,3827,3828,1,0,0,0,3828,453,1,0,0,0,3829,3830,5,371,0,0,3830,
        3831,5,353,0,0,3831,3834,5,311,0,0,3832,3833,5,220,0,0,3833,3835,
        5,481,0,0,3834,3832,1,0,0,0,3834,3835,1,0,0,0,3835,455,1,0,0,0,3836,
        3838,5,371,0,0,3837,3839,3,814,407,0,3838,3837,1,0,0,0,3838,3839,
        1,0,0,0,3839,3840,1,0,0,0,3840,3845,5,377,0,0,3841,3842,5,219,0,
        0,3842,3846,3,822,411,0,3843,3844,5,444,0,0,3844,3846,3,710,355,
        0,3845,3841,1,0,0,0,3845,3843,1,0,0,0,3845,3846,1,0,0,0,3846,457,
        1,0,0,0,3847,3848,5,371,0,0,3848,3849,5,393,0,0,3849,3877,5,481,
        0,0,3850,3851,5,371,0,0,3851,3852,7,21,0,0,3852,3853,5,153,0,0,3853,
        3855,3,858,429,0,3854,3856,3,684,342,0,3855,3854,1,0,0,0,3855,3856,
        1,0,0,0,3856,3859,1,0,0,0,3857,3858,5,444,0,0,3858,3860,3,710,355,
        0,3859,3857,1,0,0,0,3859,3860,1,0,0,0,3860,3871,1,0,0,0,3861,3862,
        5,274,0,0,3862,3863,5,42,0,0,3863,3868,3,638,319,0,3864,3865,5,500,
        0,0,3865,3867,3,638,319,0,3866,3864,1,0,0,0,3867,3870,1,0,0,0,3868,
        3866,1,0,0,0,3868,3869,1,0,0,0,3869,3872,1,0,0,0,3870,3868,1,0,0,
        0,3871,3861,1,0,0,0,3871,3872,1,0,0,0,3872,3874,1,0,0,0,3873,3875,
        3,640,320,0,3874,3873,1,0,0,0,3874,3875,1,0,0,0,3875,3877,1,0,0,
        0,3876,3847,1,0,0,0,3876,3850,1,0,0,0,3877,459,1,0,0,0,3878,3879,
        5,371,0,0,3879,3882,5,406,0,0,3880,3881,7,1,0,0,3881,3883,3,858,
        429,0,3882,3880,1,0,0,0,3882,3883,1,0,0,0,3883,3886,1,0,0,0,3884,
        3885,5,444,0,0,3885,3887,3,710,355,0,3886,3884,1,0,0,0,3886,3887,
        1,0,0,0,3887,461,1,0,0,0,3888,3890,5,371,0,0,3889,3891,5,156,0,0,
        3890,3889,1,0,0,0,3890,3891,1,0,0,0,3891,3892,1,0,0,0,3892,3895,
        5,409,0,0,3893,3894,7,1,0,0,3894,3896,3,858,429,0,3895,3893,1,0,
        0,0,3895,3896,1,0,0,0,3896,3901,1,0,0,0,3897,3898,5,219,0,0,3898,
        3902,3,822,411,0,3899,3900,5,444,0,0,3900,3902,3,710,355,0,3901,
        3897,1,0,0,0,3901,3899,1,0,0,0,3901,3902,1,0,0,0,3902,463,1,0,0,
        0,3903,3904,5,371,0,0,3904,3907,5,307,0,0,3905,3906,5,149,0,0,3906,
        3908,3,822,411,0,3907,3905,1,0,0,0,3907,3908,1,0,0,0,3908,3911,1,
        0,0,0,3909,3910,5,219,0,0,3910,3912,3,822,411,0,3911,3909,1,0,0,
        0,3911,3912,1,0,0,0,3912,465,1,0,0,0,3913,3915,5,371,0,0,3914,3916,
        3,814,407,0,3915,3914,1,0,0,0,3915,3916,1,0,0,0,3916,3917,1,0,0,
        0,3917,3922,5,432,0,0,3918,3919,5,219,0,0,3919,3923,3,822,411,0,
        3920,3921,5,444,0,0,3921,3923,3,710,355,0,3922,3918,1,0,0,0,3922,
        3920,1,0,0,0,3922,3923,1,0,0,0,3923,467,1,0,0,0,3924,3925,5,371,
        0,0,3925,3927,7,22,0,0,3926,3928,3,640,320,0,3927,3926,1,0,0,0,3927,
        3928,1,0,0,0,3928,469,1,0,0,0,3929,3930,5,169,0,0,3930,3931,3,864,
        432,0,3931,471,1,0,0,0,3932,3933,5,75,0,0,3933,3937,5,425,0,0,3934,
        3935,5,177,0,0,3935,3936,5,258,0,0,3936,3938,5,129,0,0,3937,3934,
        1,0,0,0,3937,3938,1,0,0,0,3938,3939,1,0,0,0,3939,3941,3,870,435,
        0,3940,3942,3,508,254,0,3941,3940,1,0,0,0,3941,3942,1,0,0,0,3942,
        3946,1,0,0,0,3943,3944,5,100,0,0,3944,3945,5,343,0,0,3945,3947,3,
        612,306,0,3946,3943,1,0,0,0,3946,3947,1,0,0,0,3947,473,1,0,0,0,3948,
        3949,5,114,0,0,3949,3952,5,425,0,0,3950,3951,5,177,0,0,3951,3953,
        5,129,0,0,3952,3950,1,0,0,0,3952,3953,1,0,0,0,3953,3954,1,0,0,0,
        3954,3955,3,870,435,0,3955,475,1,0,0,0,3956,3957,5,9,0,0,3957,3960,
        5,425,0,0,3958,3959,5,177,0,0,3959,3961,5,129,0,0,3960,3958,1,0,
        0,0,3960,3961,1,0,0,0,3961,3962,1,0,0,0,3962,3963,3,870,435,0,3963,
        3964,3,508,254,0,3964,3980,1,0,0,0,3965,3966,5,9,0,0,3966,3969,5,
        425,0,0,3967,3968,5,177,0,0,3968,3970,5,129,0,0,3969,3967,1,0,0,
        0,3969,3970,1,0,0,0,3970,3971,1,0,0,0,3971,3972,3,870,435,0,3972,
        3973,5,100,0,0,3973,3977,5,343,0,0,3974,3978,5,257,0,0,3975,3978,
        5,8,0,0,3976,3978,3,612,306,0,3977,3974,1,0,0,0,3977,3975,1,0,0,
        0,3977,3976,1,0,0,0,3978,3980,1,0,0,0,3979,3956,1,0,0,0,3979,3965,
        1,0,0,0,3980,477,1,0,0,0,3981,3982,5,371,0,0,3982,3983,7,23,0,0,
        3983,479,1,0,0,0,3984,3985,5,371,0,0,3985,3986,5,8,0,0,3986,3994,
        5,21,0,0,3987,3988,5,371,0,0,3988,3991,5,21,0,0,3989,3990,5,149,
        0,0,3990,3992,3,870,435,0,3991,3989,1,0,0,0,3991,3992,1,0,0,0,3992,
        3994,1,0,0,0,3993,3984,1,0,0,0,3993,3987,1,0,0,0,3994,481,1,0,0,
        0,3995,3996,5,128,0,0,3996,3997,5,17,0,0,3997,4001,3,870,435,0,3998,
        3999,5,446,0,0,3999,4000,5,254,0,0,4000,4002,5,340,0,0,4001,3998,
        1,0,0,0,4001,4002,1,0,0,0,4002,483,1,0,0,0,4003,4004,5,75,0,0,4004,
        4008,5,343,0,0,4005,4006,5,177,0,0,4006,4007,5,258,0,0,4007,4009,
        5,129,0,0,4008,4005,1,0,0,0,4008,4009,1,0,0,0,4009,4010,1,0,0,0,
        4010,4012,3,612,306,0,4011,4013,3,816,408,0,4012,4011,1,0,0,0,4012,
        4013,1,0,0,0,4013,485,1,0,0,0,4014,4015,5,9,0,0,4015,4018,5,343,
        0,0,4016,4017,5,177,0,0,4017,4019,5,129,0,0,4018,4016,1,0,0,0,4018,
        4019,1,0,0,0,4019,4020,1,0,0,0,4020,4021,3,612,306,0,4021,4022,5,
        366,0,0,4022,4023,5,63,0,0,4023,4024,5,455,0,0,4024,4025,3,822,411,
        0,4025,487,1,0,0,0,4026,4027,5,114,0,0,4027,4030,5,343,0,0,4028,
        4029,5,177,0,0,4029,4031,5,129,0,0,4030,4028,1,0,0,0,4030,4031,1,
        0,0,0,4031,4032,1,0,0,0,4032,4033,3,612,306,0,4033,489,1,0,0,0,4034,
        4035,5,371,0,0,4035,4036,5,344,0,0,4036,491,1,0,0,0,4037,4038,5,
        160,0,0,4038,4039,3,866,433,0,4039,4041,5,407,0,0,4040,4042,5,425,
        0,0,4041,4040,1,0,0,0,4041,4042,1,0,0,0,4042,4043,1,0,0,0,4043,4044,
        3,870,435,0,4044,4052,1,0,0,0,4045,4046,5,160,0,0,4046,4047,3,866,
        433,0,4047,4048,5,407,0,0,4048,4049,5,343,0,0,4049,4050,3,864,432,
        0,4050,4052,1,0,0,0,4051,4037,1,0,0,0,4051,4045,1,0,0,0,4052,493,
        1,0,0,0,4053,4054,5,339,0,0,4054,4055,3,866,433,0,4055,4057,5,153,
        0,0,4056,4058,5,425,0,0,4057,4056,1,0,0,0,4057,4058,1,0,0,0,4058,
        4059,1,0,0,0,4059,4060,3,870,435,0,4060,4068,1,0,0,0,4061,4062,5,
        339,0,0,4062,4063,3,866,433,0,4063,4064,5,153,0,0,4064,4065,5,343,
        0,0,4065,4066,3,864,432,0,4066,4068,1,0,0,0,4067,4053,1,0,0,0,4067,
        4061,1,0,0,0,4068,495,1,0,0,0,4069,4070,5,366,0,0,4070,4071,5,343,
        0,0,4071,4086,5,100,0,0,4072,4073,5,366,0,0,4073,4074,5,343,0,0,
        4074,4086,5,257,0,0,4075,4076,5,366,0,0,4076,4077,5,343,0,0,4077,
        4080,5,8,0,0,4078,4079,5,127,0,0,4079,4081,3,612,306,0,4080,4078,
        1,0,0,0,4080,4081,1,0,0,0,4081,4086,1,0,0,0,4082,4083,5,366,0,0,
        4083,4084,5,343,0,0,4084,4086,3,612,306,0,4085,4069,1,0,0,0,4085,
        4072,1,0,0,0,4085,4075,1,0,0,0,4085,4082,1,0,0,0,4086,497,1,0,0,
        0,4087,4088,5,366,0,0,4088,4089,5,100,0,0,4089,4093,5,343,0,0,4090,
        4094,5,257,0,0,4091,4094,5,8,0,0,4092,4094,3,612,306,0,4093,4090,
        1,0,0,0,4093,4091,1,0,0,0,4093,4092,1,0,0,0,4094,4095,1,0,0,0,4095,
        4096,5,407,0,0,4096,4097,3,870,435,0,4097,499,1,0,0,0,4098,4100,
        5,425,0,0,4099,4098,1,0,0,0,4099,4100,1,0,0,0,4100,4101,1,0,0,0,
        4101,4105,3,870,435,0,4102,4103,5,343,0,0,4103,4105,3,864,432,0,
        4104,4099,1,0,0,0,4104,4102,1,0,0,0,4105,501,1,0,0,0,4106,4107,5,
        160,0,0,4107,4108,5,178,0,0,4108,4109,5,266,0,0,4109,4110,5,425,
        0,0,4110,4115,3,870,435,0,4111,4112,5,500,0,0,4112,4114,3,870,435,
        0,4113,4111,1,0,0,0,4114,4117,1,0,0,0,4115,4113,1,0,0,0,4115,4116,
        1,0,0,0,4116,4118,1,0,0,0,4117,4115,1,0,0,0,4118,4119,5,407,0,0,
        4119,4123,3,500,250,0,4120,4121,5,446,0,0,4121,4122,5,160,0,0,4122,
        4124,5,272,0,0,4123,4120,1,0,0,0,4123,4124,1,0,0,0,4124,4195,1,0,
        0,0,4125,4126,5,160,0,0,4126,4127,3,516,258,0,4127,4128,5,266,0,
        0,4128,4129,3,512,256,0,4129,4130,5,407,0,0,4130,4134,3,500,250,
        0,4131,4132,5,446,0,0,4132,4133,5,160,0,0,4133,4135,5,272,0,0,4134,
        4131,1,0,0,0,4134,4135,1,0,0,0,4135,4195,1,0,0,0,4136,4137,5,160,
        0,0,4137,4138,3,516,258,0,4138,4140,5,266,0,0,4139,4141,5,159,0,
        0,4140,4139,1,0,0,0,4140,4141,1,0,0,0,4141,4142,1,0,0,0,4142,4143,
        5,157,0,0,4143,4144,3,514,257,0,4144,4145,5,407,0,0,4145,4149,3,
        500,250,0,4146,4147,5,446,0,0,4147,4148,5,160,0,0,4148,4150,5,272,
        0,0,4149,4146,1,0,0,0,4149,4150,1,0,0,0,4150,4195,1,0,0,0,4151,4152,
        5,160,0,0,4152,4153,3,516,258,0,4153,4154,5,266,0,0,4154,4155,5,
        387,0,0,4155,4156,5,407,0,0,4156,4160,3,500,250,0,4157,4158,5,446,
        0,0,4158,4159,5,160,0,0,4159,4161,5,272,0,0,4160,4157,1,0,0,0,4160,
        4161,1,0,0,0,4161,4195,1,0,0,0,4162,4163,5,160,0,0,4163,4164,3,516,
        258,0,4164,4165,5,266,0,0,4165,4166,3,520,260,0,4166,4167,3,512,
        256,0,4167,4168,5,407,0,0,4168,4172,3,500,250,0,4169,4170,5,446,
        0,0,4170,4171,5,160,0,0,4171,4173,5,272,0,0,4172,4169,1,0,0,0,4172,
        4173,1,0,0,0,4173,4195,1,0,0,0,4174,4175,5,160,0,0,4175,4176,3,516,
        258,0,4176,4177,5,266,0,0,4177,4178,5,8,0,0,4178,4185,3,522,261,
        0,4179,4180,5,182,0,0,4180,4181,5,8,0,0,4181,4186,5,89,0,0,4182,
        4183,5,182,0,0,4183,4184,5,88,0,0,4184,4186,3,864,432,0,4185,4179,
        1,0,0,0,4185,4182,1,0,0,0,4185,4186,1,0,0,0,4186,4187,1,0,0,0,4187,
        4188,5,407,0,0,4188,4192,3,500,250,0,4189,4190,5,446,0,0,4190,4191,
        5,160,0,0,4191,4193,5,272,0,0,4192,4189,1,0,0,0,4192,4193,1,0,0,
        0,4193,4195,1,0,0,0,4194,4106,1,0,0,0,4194,4125,1,0,0,0,4194,4136,
        1,0,0,0,4194,4151,1,0,0,0,4194,4162,1,0,0,0,4194,4174,1,0,0,0,4195,
        503,1,0,0,0,4196,4197,5,339,0,0,4197,4198,5,178,0,0,4198,4199,5,
        266,0,0,4199,4200,5,425,0,0,4200,4205,3,870,435,0,4201,4202,5,500,
        0,0,4202,4204,3,870,435,0,4203,4201,1,0,0,0,4204,4207,1,0,0,0,4205,
        4203,1,0,0,0,4205,4206,1,0,0,0,4206,4208,1,0,0,0,4207,4205,1,0,0,
        0,4208,4209,5,153,0,0,4209,4210,3,500,250,0,4210,4261,1,0,0,0,4211,
        4212,5,339,0,0,4212,4213,3,516,258,0,4213,4214,5,266,0,0,4214,4215,
        3,512,256,0,4215,4216,5,153,0,0,4216,4217,3,500,250,0,4217,4261,
        1,0,0,0,4218,4219,5,339,0,0,4219,4220,3,516,258,0,4220,4222,5,266,
        0,0,4221,4223,5,159,0,0,4222,4221,1,0,0,0,4222,4223,1,0,0,0,4223,
        4224,1,0,0,0,4224,4225,5,157,0,0,4225,4226,3,514,257,0,4226,4227,
        5,153,0,0,4227,4228,3,500,250,0,4228,4261,1,0,0,0,4229,4230,5,339,
        0,0,4230,4231,3,516,258,0,4231,4232,5,266,0,0,4232,4233,5,387,0,
        0,4233,4234,5,153,0,0,4234,4235,3,500,250,0,4235,4261,1,0,0,0,4236,
        4237,5,339,0,0,4237,4238,3,516,258,0,4238,4239,5,266,0,0,4239,4240,
        3,520,260,0,4240,4241,3,512,256,0,4241,4242,5,153,0,0,4242,4243,
        3,500,250,0,4243,4261,1,0,0,0,4244,4245,5,339,0,0,4245,4246,3,516,
        258,0,4246,4247,5,266,0,0,4247,4248,5,8,0,0,4248,4255,3,522,261,
        0,4249,4250,5,182,0,0,4250,4251,5,8,0,0,4251,4256,5,89,0,0,4252,
        4253,5,182,0,0,4253,4254,5,88,0,0,4254,4256,3,864,432,0,4255,4249,
        1,0,0,0,4255,4252,1,0,0,0,4255,4256,1,0,0,0,4256,4257,1,0,0,0,4257,
        4258,5,153,0,0,4258,4259,3,500,250,0,4259,4261,1,0,0,0,4260,4196,
        1,0,0,0,4260,4211,1,0,0,0,4260,4218,1,0,0,0,4260,4229,1,0,0,0,4260,
        4236,1,0,0,0,4260,4244,1,0,0,0,4261,505,1,0,0,0,4262,4263,5,371,
        0,0,4263,4277,5,161,0,0,4264,4265,5,371,0,0,4265,4266,5,161,0,0,
        4266,4268,5,149,0,0,4267,4269,5,425,0,0,4268,4267,1,0,0,0,4268,4269,
        1,0,0,0,4269,4270,1,0,0,0,4270,4277,3,870,435,0,4271,4272,5,371,
        0,0,4272,4273,5,161,0,0,4273,4274,5,149,0,0,4274,4275,5,343,0,0,
        4275,4277,3,864,432,0,4276,4262,1,0,0,0,4276,4264,1,0,0,0,4276,4271,
        1,0,0,0,4277,507,1,0,0,0,4278,4279,5,176,0,0,4279,4281,5,42,0,0,
        4280,4282,5,281,0,0,4281,4280,1,0,0,0,4281,4282,1,0,0,0,4282,4283,
        1,0,0,0,4283,4292,3,822,411,0,4284,4285,5,176,0,0,4285,4286,5,446,
        0,0,4286,4289,3,864,432,0,4287,4288,7,24,0,0,4288,4290,3,822,411,
        0,4289,4287,1,0,0,0,4289,4290,1,0,0,0,4290,4292,1,0,0,0,4291,4278,
        1,0,0,0,4291,4284,1,0,0,0,4292,509,1,0,0,0,4293,4296,3,868,434,0,
        4294,4295,5,501,0,0,4295,4297,3,868,434,0,4296,4294,1,0,0,0,4296,
        4297,1,0,0,0,4297,511,1,0,0,0,4298,4303,3,510,255,0,4299,4300,5,
        500,0,0,4300,4302,3,510,255,0,4301,4299,1,0,0,0,4302,4305,1,0,0,
        0,4303,4301,1,0,0,0,4303,4304,1,0,0,0,4304,513,1,0,0,0,4305,4303,
        1,0,0,0,4306,4307,3,858,429,0,4307,4308,5,498,0,0,4308,4309,3,392,
        196,0,4309,4318,5,499,0,0,4310,4311,5,500,0,0,4311,4312,3,858,429,
        0,4312,4313,5,498,0,0,4313,4314,3,392,196,0,4314,4315,5,499,0,0,
        4315,4317,1,0,0,0,4316,4310,1,0,0,0,4317,4320,1,0,0,0,4318,4316,
        1,0,0,0,4318,4319,1,0,0,0,4319,515,1,0,0,0,4320,4318,1,0,0,0,4321,
        4326,3,518,259,0,4322,4323,5,500,0,0,4323,4325,3,518,259,0,4324,
        4322,1,0,0,0,4325,4328,1,0,0,0,4326,4324,1,0,0,0,4326,4327,1,0,0,
        0,4327,517,1,0,0,0,4328,4326,1,0,0,0,4329,4331,5,8,0,0,4330,4332,
        5,299,0,0,4331,4330,1,0,0,0,4331,4332,1,0,0,0,4332,4371,1,0,0,0,
        4333,4371,5,9,0,0,4334,4371,5,13,0,0,4335,4371,5,35,0,0,4336,4353,
        5,75,0,0,4337,4354,5,88,0,0,4338,4354,5,391,0,0,4339,4354,5,435,
        0,0,4340,4354,5,157,0,0,4341,4342,5,159,0,0,4342,4354,5,157,0,0,
        4343,4344,5,236,0,0,4344,4354,5,435,0,0,4345,4354,5,333,0,0,4346,
        4347,5,333,0,0,4347,4354,5,162,0,0,4348,4349,5,132,0,0,4349,4354,
        5,47,0,0,4350,4351,5,379,0,0,4351,4354,5,437,0,0,4352,4354,5,290,
        0,0,4353,4337,1,0,0,0,4353,4338,1,0,0,0,4353,4339,1,0,0,0,4353,4340,
        1,0,0,0,4353,4341,1,0,0,0,4353,4343,1,0,0,0,4353,4345,1,0,0,0,4353,
        4346,1,0,0,0,4353,4348,1,0,0,0,4353,4350,1,0,0,0,4353,4352,1,0,0,
        0,4354,4371,1,0,0,0,4355,4371,5,101,0,0,4356,4371,5,114,0,0,4357,
        4371,5,131,0,0,4358,4371,5,139,0,0,4359,4371,5,178,0,0,4360,4371,
        5,190,0,0,4361,4371,5,160,0,0,4362,4371,5,255,0,0,4363,4371,5,269,
        0,0,4364,4371,5,288,0,0,4365,4371,5,331,0,0,4366,4371,5,320,0,0,
        4367,4371,5,361,0,0,4368,4371,5,422,0,0,4369,4371,5,423,0,0,4370,
        4329,1,0,0,0,4370,4333,1,0,0,0,4370,4334,1,0,0,0,4370,4335,1,0,0,
        0,4370,4336,1,0,0,0,4370,4355,1,0,0,0,4370,4356,1,0,0,0,4370,4357,
        1,0,0,0,4370,4358,1,0,0,0,4370,4359,1,0,0,0,4370,4360,1,0,0,0,4370,
        4361,1,0,0,0,4370,4362,1,0,0,0,4370,4363,1,0,0,0,4370,4364,1,0,0,
        0,4370,4365,1,0,0,0,4370,4366,1,0,0,0,4370,4367,1,0,0,0,4370,4368,
        1,0,0,0,4370,4369,1,0,0,0,4371,519,1,0,0,0,4372,4386,5,47,0,0,4373,
        4386,5,88,0,0,4374,4375,5,236,0,0,4375,4386,5,435,0,0,4376,4386,
        5,333,0,0,4377,4378,5,333,0,0,4378,4386,5,162,0,0,4379,4380,5,379,
        0,0,4380,4386,5,437,0,0,4381,4386,5,387,0,0,4382,4386,5,391,0,0,
        4383,4386,5,435,0,0,4384,4386,5,290,0,0,4385,4372,1,0,0,0,4385,4373,
        1,0,0,0,4385,4374,1,0,0,0,4385,4376,1,0,0,0,4385,4377,1,0,0,0,4385,
        4379,1,0,0,0,4385,4381,1,0,0,0,4385,4382,1,0,0,0,4385,4383,1,0,0,
        0,4385,4384,1,0,0,0,4386,521,1,0,0,0,4387,4405,5,48,0,0,4388,4405,
        5,89,0,0,4389,4405,5,158,0,0,4390,4391,5,159,0,0,4391,4405,5,158,
        0,0,4392,4393,5,236,0,0,4393,4405,5,436,0,0,4394,4405,5,294,0,0,
        4395,4405,5,334,0,0,4396,4397,5,333,0,0,4397,4405,5,163,0,0,4398,
        4399,5,379,0,0,4399,4405,5,438,0,0,4400,4405,5,392,0,0,4401,4405,
        5,426,0,0,4402,4405,5,436,0,0,4403,4405,5,291,0,0,4404,4387,1,0,
        0,0,4404,4388,1,0,0,0,4404,4389,1,0,0,0,4404,4390,1,0,0,0,4404,4392,
        1,0,0,0,4404,4394,1,0,0,0,4404,4395,1,0,0,0,4404,4396,1,0,0,0,4404,
        4398,1,0,0,0,4404,4400,1,0,0,0,4404,4401,1,0,0,0,4404,4402,1,0,0,
        0,4404,4403,1,0,0,0,4405,523,1,0,0,0,4406,4407,5,26,0,0,4407,4408,
        5,373,0,0,4408,4409,3,858,429,0,4409,4410,5,407,0,0,4410,4423,3,
        860,430,0,4411,4412,5,266,0,0,4412,4413,5,498,0,0,4413,4418,3,756,
        378,0,4414,4415,5,500,0,0,4415,4417,3,756,378,0,4416,4414,1,0,0,
        0,4417,4420,1,0,0,0,4418,4416,1,0,0,0,4418,4419,1,0,0,0,4419,4421,
        1,0,0,0,4420,4418,1,0,0,0,4421,4422,5,499,0,0,4422,4424,1,0,0,0,
        4423,4411,1,0,0,0,4423,4424,1,0,0,0,4424,4427,1,0,0,0,4425,4426,
        5,306,0,0,4426,4428,3,808,404,0,4427,4425,1,0,0,0,4427,4428,1,0,
        0,0,4428,525,1,0,0,0,4429,4430,5,44,0,0,4430,4433,5,26,0,0,4431,
        4432,7,1,0,0,4432,4434,3,860,430,0,4433,4431,1,0,0,0,4433,4434,1,
        0,0,0,4434,527,1,0,0,0,4435,4436,5,371,0,0,4436,4439,5,26,0,0,4437,
        4438,7,1,0,0,4438,4440,3,860,430,0,4439,4437,1,0,0,0,4439,4440,1,
        0,0,0,4440,529,1,0,0,0,4441,4442,5,335,0,0,4442,4443,5,373,0,0,4443,
        4444,3,858,429,0,4444,4445,5,153,0,0,4445,4458,3,860,430,0,4446,
        4447,5,266,0,0,4447,4448,5,498,0,0,4448,4453,3,758,379,0,4449,4450,
        5,500,0,0,4450,4452,3,758,379,0,4451,4449,1,0,0,0,4452,4455,1,0,
        0,0,4453,4451,1,0,0,0,4453,4454,1,0,0,0,4454,4456,1,0,0,0,4455,4453,
        1,0,0,0,4456,4457,5,499,0,0,4457,4459,1,0,0,0,4458,4446,1,0,0,0,
        4458,4459,1,0,0,0,4459,4462,1,0,0,0,4460,4461,5,306,0,0,4461,4463,
        3,808,404,0,4462,4460,1,0,0,0,4462,4463,1,0,0,0,4463,531,1,0,0,0,
        4464,4465,5,44,0,0,4465,4468,5,335,0,0,4466,4467,7,1,0,0,4467,4469,
        3,860,430,0,4468,4466,1,0,0,0,4468,4469,1,0,0,0,4469,533,1,0,0,0,
        4470,4471,5,371,0,0,4471,4474,5,335,0,0,4472,4473,7,1,0,0,4473,4475,
        3,860,430,0,4474,4472,1,0,0,0,4474,4475,1,0,0,0,4475,4478,1,0,0,
        0,4476,4477,5,444,0,0,4477,4479,3,710,355,0,4478,4476,1,0,0,0,4478,
        4479,1,0,0,0,4479,535,1,0,0,0,4480,4481,5,371,0,0,4481,4482,5,373,
        0,0,4482,4483,5,266,0,0,4483,4486,3,860,430,0,4484,4485,5,444,0,
        0,4485,4487,3,710,355,0,4486,4484,1,0,0,0,4486,4487,1,0,0,0,4487,
        537,1,0,0,0,4488,4491,5,75,0,0,4489,4490,5,317,0,0,4490,4492,5,267,
        0,0,4491,4489,1,0,0,0,4491,4492,1,0,0,0,4492,4493,1,0,0,0,4493,4494,
        5,331,0,0,4494,4495,3,860,430,0,4495,4496,5,446,0,0,4496,4498,5,
        39,0,0,4497,4499,3,864,432,0,4498,4497,1,0,0,0,4498,4499,1,0,0,0,
        4499,4500,1,0,0,0,4500,4501,5,266,0,0,4501,4502,5,226,0,0,4502,4505,
        3,822,411,0,4503,4504,5,306,0,0,4504,4506,3,808,404,0,4505,4503,
        1,0,0,0,4505,4506,1,0,0,0,4506,539,1,0,0,0,4507,4508,5,114,0,0,4508,
        4509,5,331,0,0,4509,4510,3,860,430,0,4510,541,1,0,0,0,4511,4512,
        5,4,0,0,4512,4513,5,374,0,0,4513,4514,3,822,411,0,4514,543,1,0,0,
        0,4515,4516,5,101,0,0,4516,4517,5,374,0,0,4517,4522,5,481,0,0,4518,
        4519,5,500,0,0,4519,4521,5,481,0,0,4520,4518,1,0,0,0,4521,4524,1,
        0,0,0,4522,4520,1,0,0,0,4522,4523,1,0,0,0,4523,545,1,0,0,0,4524,
        4522,1,0,0,0,4525,4526,5,371,0,0,4526,4527,5,374,0,0,4527,547,1,
        0,0,0,4528,4529,5,371,0,0,4529,4530,5,445,0,0,4530,549,1,0,0,0,4531,
        4532,5,4,0,0,4532,4533,5,24,0,0,4533,4534,5,35,0,0,4534,4539,5,481,
        0,0,4535,4536,5,500,0,0,4536,4538,5,481,0,0,4537,4535,1,0,0,0,4538,
        4541,1,0,0,0,4539,4537,1,0,0,0,4539,4540,1,0,0,0,4540,551,1,0,0,
        0,4541,4539,1,0,0,0,4542,4543,5,101,0,0,4543,4544,5,24,0,0,4544,
        4545,5,35,0,0,4545,4550,5,481,0,0,4546,4547,5,500,0,0,4547,4549,
        5,481,0,0,4548,4546,1,0,0,0,4549,4552,1,0,0,0,4550,4548,1,0,0,0,
        4550,4551,1,0,0,0,4551,553,1,0,0,0,4552,4550,1,0,0,0,4553,4554,5,
        371,0,0,4554,4555,5,24,0,0,4555,4556,5,35,0,0,4556,555,1,0,0,0,4557,
        4558,3,868,434,0,4558,4559,5,501,0,0,4559,4560,3,868,434,0,4560,
        4561,5,501,0,0,4561,4562,3,868,434,0,4562,557,1,0,0,0,4563,4564,
        5,75,0,0,4564,4565,5,87,0,0,4565,4566,5,351,0,0,4566,4569,3,556,
        278,0,4567,4568,5,444,0,0,4568,4570,3,710,355,0,4569,4567,1,0,0,
        0,4569,4570,1,0,0,0,4570,4571,1,0,0,0,4571,4572,5,298,0,0,4572,4574,
        5,455,0,0,4573,4575,5,464,0,0,4574,4573,1,0,0,0,4574,4575,1,0,0,
        0,4575,4576,1,0,0,0,4576,4578,5,481,0,0,4577,4579,3,804,402,0,4578,
        4577,1,0,0,0,4578,4579,1,0,0,0,4579,559,1,0,0,0,4580,4581,5,371,
        0,0,4581,4582,5,87,0,0,4582,4583,5,352,0,0,4583,561,1,0,0,0,4584,
        4585,5,114,0,0,4585,4586,5,87,0,0,4586,4587,5,351,0,0,4587,4588,
        5,481,0,0,4588,563,1,0,0,0,4589,4590,5,56,0,0,4590,4591,5,87,0,0,
        4591,4592,5,352,0,0,4592,565,1,0,0,0,4593,4594,5,43,0,0,4594,4595,
        5,361,0,0,4595,4600,3,654,327,0,4596,4597,5,500,0,0,4597,4599,3,
        654,327,0,4598,4596,1,0,0,0,4599,4602,1,0,0,0,4600,4598,1,0,0,0,
        4600,4601,1,0,0,0,4601,4603,1,0,0,0,4602,4600,1,0,0,0,4603,4604,
        5,153,0,0,4604,4607,3,858,429,0,4605,4606,5,444,0,0,4606,4608,3,
        710,355,0,4607,4605,1,0,0,0,4607,4608,1,0,0,0,4608,4610,1,0,0,0,
        4609,4611,3,804,402,0,4610,4609,1,0,0,0,4610,4611,1,0,0,0,4611,567,
        1,0,0,0,4612,4613,5,131,0,0,4613,4614,5,391,0,0,4614,4616,3,756,
        378,0,4615,4617,3,682,341,0,4616,4615,1,0,0,0,4616,4617,1,0,0,0,
        4617,4618,1,0,0,0,4618,4619,5,407,0,0,4619,4623,3,822,411,0,4620,
        4621,5,446,0,0,4621,4622,7,11,0,0,4622,4624,5,247,0,0,4623,4620,
        1,0,0,0,4623,4624,1,0,0,0,4624,4626,1,0,0,0,4625,4627,3,804,402,
        0,4626,4625,1,0,0,0,4626,4627,1,0,0,0,4627,4629,1,0,0,0,4628,4630,
        3,404,202,0,4629,4628,1,0,0,0,4629,4630,1,0,0,0,4630,569,1,0,0,0,
        4631,4632,5,44,0,0,4632,4635,5,131,0,0,4633,4634,7,1,0,0,4634,4636,
        3,858,429,0,4635,4633,1,0,0,0,4635,4636,1,0,0,0,4636,4641,1,0,0,
        0,4637,4638,5,219,0,0,4638,4642,3,822,411,0,4639,4640,5,444,0,0,
        4640,4642,3,710,355,0,4641,4637,1,0,0,0,4641,4639,1,0,0,0,4641,4642,
        1,0,0,0,4642,571,1,0,0,0,4643,4644,5,371,0,0,4644,4647,5,131,0,0,
        4645,4646,7,1,0,0,4646,4648,3,858,429,0,4647,4645,1,0,0,0,4647,4648,
        1,0,0,0,4648,4653,1,0,0,0,4649,4650,5,219,0,0,4650,4654,3,822,411,
        0,4651,4652,5,444,0,0,4652,4654,3,710,355,0,4653,4649,1,0,0,0,4653,
        4651,1,0,0,0,4653,4654,1,0,0,0,4654,4665,1,0,0,0,4655,4656,5,274,
        0,0,4656,4657,5,42,0,0,4657,4662,3,638,319,0,4658,4659,5,500,0,0,
        4659,4661,3,638,319,0,4660,4658,1,0,0,0,4661,4664,1,0,0,0,4662,4660,
        1,0,0,0,4662,4663,1,0,0,0,4663,4666,1,0,0,0,4664,4662,1,0,0,0,4665,
        4655,1,0,0,0,4665,4666,1,0,0,0,4666,4668,1,0,0,0,4667,4669,3,640,
        320,0,4668,4667,1,0,0,0,4668,4669,1,0,0,0,4669,573,1,0,0,0,4670,
        4671,5,189,0,0,4671,4672,5,288,0,0,4672,4673,5,153,0,0,4673,4675,
        3,864,432,0,4674,4676,3,804,402,0,4675,4674,1,0,0,0,4675,4676,1,
        0,0,0,4676,575,1,0,0,0,4677,4678,5,419,0,0,4678,4679,5,288,0,0,4679,
        4680,3,864,432,0,4680,577,1,0,0,0,4681,4682,5,75,0,0,4682,4683,5,
        139,0,0,4683,4686,3,822,411,0,4684,4685,7,1,0,0,4685,4687,3,858,
        429,0,4686,4684,1,0,0,0,4686,4687,1,0,0,0,4687,4688,1,0,0,0,4688,
        4689,3,804,402,0,4689,579,1,0,0,0,4690,4691,5,114,0,0,4691,4692,
        5,139,0,0,4692,4695,3,822,411,0,4693,4694,7,1,0,0,4694,4696,3,858,
        429,0,4695,4693,1,0,0,0,4695,4696,1,0,0,0,4696,4697,1,0,0,0,4697,
        4698,3,804,402,0,4698,581,1,0,0,0,4699,4700,5,371,0,0,4700,4703,
        5,139,0,0,4701,4702,7,1,0,0,4702,4704,3,858,429,0,4703,4701,1,0,
        0,0,4703,4704,1,0,0,0,4704,583,1,0,0,0,4705,4706,5,75,0,0,4706,4707,
        3,62,31,0,4707,4708,5,290,0,0,4708,4709,3,64,32,0,4709,4711,3,858,
        429,0,4710,4712,3,804,402,0,4711,4710,1,0,0,0,4711,4712,1,0,0,0,
        4712,4713,1,0,0,0,4713,4714,5,17,0,0,4714,4715,3,304,152,0,4715,
        585,1,0,0,0,4716,4717,5,114,0,0,4717,4720,5,290,0,0,4718,4719,5,
        177,0,0,4719,4721,5,129,0,0,4720,4718,1,0,0,0,4720,4721,1,0,0,0,
        4721,4722,1,0,0,0,4722,4723,3,858,429,0,4723,587,1,0,0,0,4724,4734,
        5,385,0,0,4725,4734,5,336,0,0,4726,4727,5,338,0,0,4727,4734,5,8,
        0,0,4728,4729,5,338,0,0,4729,4730,5,139,0,0,4730,4734,3,822,411,
        0,4731,4732,5,366,0,0,4732,4734,3,808,404,0,4733,4724,1,0,0,0,4733,
        4725,1,0,0,0,4733,4726,1,0,0,0,4733,4728,1,0,0,0,4733,4731,1,0,0,
        0,4734,589,1,0,0,0,4735,4736,5,9,0,0,4736,4737,5,290,0,0,4737,4738,
        3,858,429,0,4738,4739,3,588,294,0,4739,591,1,0,0,0,4740,4741,7,9,
        0,0,4741,4742,5,290,0,0,4742,4743,3,858,429,0,4743,593,1,0,0,0,4744,
        4745,5,371,0,0,4745,4752,5,291,0,0,4746,4747,5,219,0,0,4747,4753,
        3,822,411,0,4748,4749,5,444,0,0,4749,4753,3,710,355,0,4750,4751,
        5,153,0,0,4751,4753,3,858,429,0,4752,4746,1,0,0,0,4752,4748,1,0,
        0,0,4752,4750,1,0,0,0,4752,4753,1,0,0,0,4753,4764,1,0,0,0,4754,4755,
        5,274,0,0,4755,4756,5,42,0,0,4756,4761,3,638,319,0,4757,4758,5,500,
        0,0,4758,4760,3,638,319,0,4759,4757,1,0,0,0,4760,4763,1,0,0,0,4761,
        4759,1,0,0,0,4761,4762,1,0,0,0,4762,4765,1,0,0,0,4763,4761,1,0,0,
        0,4764,4754,1,0,0,0,4764,4765,1,0,0,0,4765,4767,1,0,0,0,4766,4768,
        3,640,320,0,4767,4766,1,0,0,0,4767,4768,1,0,0,0,4768,595,1,0,0,0,
        4769,4770,5,366,0,0,4770,4775,3,598,299,0,4771,4772,5,500,0,0,4772,
        4774,3,598,299,0,4773,4771,1,0,0,0,4774,4777,1,0,0,0,4775,4773,1,
        0,0,0,4775,4776,1,0,0,0,4776,597,1,0,0,0,4777,4775,1,0,0,0,4778,
        4779,5,51,0,0,4779,4784,5,366,0,0,4780,4784,5,53,0,0,4781,4782,5,
        52,0,0,4782,4784,5,366,0,0,4783,4778,1,0,0,0,4783,4780,1,0,0,0,4783,
        4781,1,0,0,0,4784,4787,1,0,0,0,4785,4788,3,864,432,0,4786,4788,5,
        100,0,0,4787,4785,1,0,0,0,4787,4786,1,0,0,0,4788,4844,1,0,0,0,4789,
        4792,5,251,0,0,4790,4793,3,864,432,0,4791,4793,5,100,0,0,4792,4790,
        1,0,0,0,4792,4791,1,0,0,0,4793,4799,1,0,0,0,4794,4797,5,59,0,0,4795,
        4798,3,864,432,0,4796,4798,5,100,0,0,4797,4795,1,0,0,0,4797,4796,
        1,0,0,0,4798,4800,1,0,0,0,4799,4794,1,0,0,0,4799,4800,1,0,0,0,4800,
        4844,1,0,0,0,4801,4802,5,281,0,0,4802,4809,5,455,0,0,4803,4810,3,
        822,411,0,4804,4805,5,281,0,0,4805,4806,5,498,0,0,4806,4807,3,822,
        411,0,4807,4808,5,499,0,0,4808,4810,1,0,0,0,4809,4803,1,0,0,0,4809,
        4804,1,0,0,0,4810,4844,1,0,0,0,4811,4812,5,281,0,0,4812,4813,5,149,
        0,0,4813,4814,3,870,435,0,4814,4821,5,455,0,0,4815,4822,3,822,411,
        0,4816,4817,5,281,0,0,4817,4818,5,498,0,0,4818,4819,3,822,411,0,
        4819,4820,5,499,0,0,4820,4822,1,0,0,0,4821,4815,1,0,0,0,4821,4816,
        1,0,0,0,4822,4844,1,0,0,0,4823,4824,3,732,366,0,4824,4825,5,455,
        0,0,4825,4826,3,710,355,0,4826,4844,1,0,0,0,4827,4829,3,814,407,
        0,4828,4827,1,0,0,0,4828,4829,1,0,0,0,4829,4830,1,0,0,0,4830,4831,
        3,860,430,0,4831,4832,5,455,0,0,4832,4833,3,608,304,0,4833,4844,
        1,0,0,0,4834,4835,3,734,367,0,4835,4836,5,455,0,0,4836,4837,3,608,
        304,0,4837,4844,1,0,0,0,4838,4840,3,814,407,0,4839,4838,1,0,0,0,
        4839,4840,1,0,0,0,4840,4841,1,0,0,0,4841,4842,5,406,0,0,4842,4844,
        3,600,300,0,4843,4783,1,0,0,0,4843,4789,1,0,0,0,4843,4801,1,0,0,
        0,4843,4811,1,0,0,0,4843,4823,1,0,0,0,4843,4828,1,0,0,0,4843,4834,
        1,0,0,0,4843,4839,1,0,0,0,4844,599,1,0,0,0,4845,4856,3,602,301,0,
        4846,4856,3,604,302,0,4847,4848,3,602,301,0,4848,4849,5,500,0,0,
        4849,4850,3,604,302,0,4850,4856,1,0,0,0,4851,4852,3,604,302,0,4852,
        4853,5,500,0,0,4853,4854,3,602,301,0,4854,4856,1,0,0,0,4855,4845,
        1,0,0,0,4855,4846,1,0,0,0,4855,4847,1,0,0,0,4855,4851,1,0,0,0,4856,
        601,1,0,0,0,4857,4858,5,317,0,0,4858,4862,5,267,0,0,4859,4860,5,
        317,0,0,4860,4862,5,448,0,0,4861,4857,1,0,0,0,4861,4859,1,0,0,0,
        4862,603,1,0,0,0,4863,4864,5,202,0,0,4864,4865,5,218,0,0,4865,4866,
        3,606,303,0,4866,605,1,0,0,0,4867,4868,5,317,0,0,4868,4875,5,416,
        0,0,4869,4870,5,317,0,0,4870,4875,5,65,0,0,4871,4872,5,327,0,0,4872,
        4875,5,317,0,0,4873,4875,5,364,0,0,4874,4867,1,0,0,0,4874,4869,1,
        0,0,0,4874,4871,1,0,0,0,4874,4873,1,0,0,0,4875,607,1,0,0,0,4876,
        4881,5,100,0,0,4877,4881,5,266,0,0,4878,4881,5,8,0,0,4879,4881,3,
        710,355,0,4880,4876,1,0,0,0,4880,4877,1,0,0,0,4880,4878,1,0,0,0,
        4880,4879,1,0,0,0,4881,609,1,0,0,0,4882,4883,5,366,0,0,4883,4886,
        5,307,0,0,4884,4885,5,149,0,0,4885,4887,3,822,411,0,4886,4884,1,
        0,0,0,4886,4887,1,0,0,0,4887,4888,1,0,0,0,4888,4889,3,810,405,0,
        4889,611,1,0,0,0,4890,4895,3,864,432,0,4891,4892,5,500,0,0,4892,
        4894,3,864,432,0,4893,4891,1,0,0,0,4894,4897,1,0,0,0,4895,4893,1,
        0,0,0,4895,4896,1,0,0,0,4896,613,1,0,0,0,4897,4895,1,0,0,0,4898,
        4899,5,5,0,0,4899,4900,5,128,0,0,4900,4901,5,266,0,0,4901,4902,7,
        25,0,0,4902,4903,3,822,411,0,4903,615,1,0,0,0,4904,4905,5,375,0,
        0,4905,4909,5,406,0,0,4906,4907,5,446,0,0,4907,4908,5,71,0,0,4908,
        4910,5,373,0,0,4909,4906,1,0,0,0,4909,4910,1,0,0,0,4910,4962,1,0,
        0,0,4911,4913,5,28,0,0,4912,4914,5,447,0,0,4913,4912,1,0,0,0,4913,
        4914,1,0,0,0,4914,4962,1,0,0,0,4915,4917,5,64,0,0,4916,4918,5,447,
        0,0,4917,4916,1,0,0,0,4917,4918,1,0,0,0,4918,4924,1,0,0,0,4919,4921,
        5,11,0,0,4920,4922,5,254,0,0,4921,4920,1,0,0,0,4921,4922,1,0,0,0,
        4922,4923,1,0,0,0,4923,4925,5,50,0,0,4924,4919,1,0,0,0,4924,4925,
        1,0,0,0,4925,4930,1,0,0,0,4926,4928,5,254,0,0,4927,4926,1,0,0,0,
        4927,4928,1,0,0,0,4928,4929,1,0,0,0,4929,4931,5,323,0,0,4930,4927,
        1,0,0,0,4930,4931,1,0,0,0,4931,4962,1,0,0,0,4932,4934,5,345,0,0,
        4933,4935,5,447,0,0,4934,4933,1,0,0,0,4934,4935,1,0,0,0,4935,4941,
        1,0,0,0,4936,4938,5,11,0,0,4937,4939,5,254,0,0,4938,4937,1,0,0,0,
        4938,4939,1,0,0,0,4939,4940,1,0,0,0,4940,4942,5,50,0,0,4941,4936,
        1,0,0,0,4941,4942,1,0,0,0,4942,4947,1,0,0,0,4943,4945,5,254,0,0,
        4944,4943,1,0,0,0,4944,4945,1,0,0,0,4945,4946,1,0,0,0,4946,4948,
        5,323,0,0,4947,4944,1,0,0,0,4947,4948,1,0,0,0,4948,4962,1,0,0,0,
        4949,4950,5,450,0,0,4950,4951,5,392,0,0,4951,4956,3,618,309,0,4952,
        4953,5,500,0,0,4953,4955,3,618,309,0,4954,4952,1,0,0,0,4955,4958,
        1,0,0,0,4956,4954,1,0,0,0,4956,4957,1,0,0,0,4957,4962,1,0,0,0,4958,
        4956,1,0,0,0,4959,4960,5,451,0,0,4960,4962,5,392,0,0,4961,4904,1,
        0,0,0,4961,4911,1,0,0,0,4961,4915,1,0,0,0,4961,4932,1,0,0,0,4961,
        4949,1,0,0,0,4961,4959,1,0,0,0,4962,617,1,0,0,0,4963,4968,3,860,
        430,0,4964,4966,5,17,0,0,4965,4964,1,0,0,0,4965,4966,1,0,0,0,4966,
        4967,1,0,0,0,4967,4969,3,860,430,0,4968,4965,1,0,0,0,4968,4969,1,
        0,0,0,4969,4970,1,0,0,0,4970,4971,3,620,310,0,4971,619,1,0,0,0,4972,
        4974,5,317,0,0,4973,4975,5,223,0,0,4974,4973,1,0,0,0,4974,4975,1,
        0,0,0,4975,4981,1,0,0,0,4976,4978,5,452,0,0,4977,4976,1,0,0,0,4977,
        4978,1,0,0,0,4978,4979,1,0,0,0,4979,4981,5,448,0,0,4980,4972,1,0,
        0,0,4980,4977,1,0,0,0,4981,621,1,0,0,0,4982,4985,3,760,380,0,4983,
        4985,3,762,381,0,4984,4982,1,0,0,0,4984,4983,1,0,0,0,4984,4985,1,
        0,0,0,4985,4986,1,0,0,0,4986,4988,3,624,312,0,4987,4989,3,818,409,
        0,4988,4987,1,0,0,0,4988,4989,1,0,0,0,4989,623,1,0,0,0,4990,4992,
        3,626,313,0,4991,4990,1,0,0,0,4991,4992,1,0,0,0,4992,4993,1,0,0,
        0,4993,4994,3,628,314,0,4994,625,1,0,0,0,4995,4996,5,446,0,0,4996,
        5001,3,650,325,0,4997,4998,5,500,0,0,4998,5000,3,650,325,0,4999,
        4997,1,0,0,0,5000,5003,1,0,0,0,5001,4999,1,0,0,0,5001,5002,1,0,0,
        0,5002,627,1,0,0,0,5003,5001,1,0,0,0,5004,5015,3,632,316,0,5005,
        5006,5,274,0,0,5006,5007,5,42,0,0,5007,5012,3,638,319,0,5008,5009,
        5,500,0,0,5009,5011,3,638,319,0,5010,5008,1,0,0,0,5011,5014,1,0,
        0,0,5012,5010,1,0,0,0,5012,5013,1,0,0,0,5013,5016,1,0,0,0,5014,5012,
        1,0,0,0,5015,5005,1,0,0,0,5015,5016,1,0,0,0,5016,5018,1,0,0,0,5017,
        5019,3,640,320,0,5018,5017,1,0,0,0,5018,5019,1,0,0,0,5019,629,1,
        0,0,0,5020,5021,5,17,0,0,5021,5022,5,264,0,0,5022,5052,3,710,355,
        0,5023,5024,5,149,0,0,5024,5025,5,388,0,0,5025,5026,5,17,0,0,5026,
        5027,5,264,0,0,5027,5028,5,402,0,0,5028,5052,3,822,411,0,5029,5030,
        5,149,0,0,5030,5031,5,388,0,0,5031,5032,5,29,0,0,5032,5033,3,710,
        355,0,5033,5034,5,11,0,0,5034,5035,3,710,355,0,5035,5052,1,0,0,0,
        5036,5037,5,149,0,0,5037,5038,5,388,0,0,5038,5039,5,153,0,0,5039,
        5040,3,710,355,0,5040,5041,5,407,0,0,5041,5042,3,710,355,0,5042,
        5052,1,0,0,0,5043,5044,5,149,0,0,5044,5045,5,388,0,0,5045,5052,5,
        8,0,0,5046,5047,5,149,0,0,5047,5048,5,434,0,0,5048,5049,5,17,0,0,
        5049,5050,5,264,0,0,5050,5052,3,710,355,0,5051,5020,1,0,0,0,5051,
        5023,1,0,0,0,5051,5029,1,0,0,0,5051,5036,1,0,0,0,5051,5043,1,0,0,
        0,5051,5046,1,0,0,0,5052,631,1,0,0,0,5053,5054,6,316,-1,0,5054,5057,
        3,642,321,0,5055,5057,3,634,317,0,5056,5053,1,0,0,0,5056,5055,1,
        0,0,0,5057,5072,1,0,0,0,5058,5059,10,2,0,0,5059,5061,5,196,0,0,5060,
        5062,3,652,326,0,5061,5060,1,0,0,0,5061,5062,1,0,0,0,5062,5063,1,
        0,0,0,5063,5071,3,632,316,3,5064,5065,10,1,0,0,5065,5067,7,26,0,
        0,5066,5068,3,652,326,0,5067,5066,1,0,0,0,5067,5068,1,0,0,0,5068,
        5069,1,0,0,0,5069,5071,3,632,316,2,5070,5058,1,0,0,0,5070,5064,1,
        0,0,0,5071,5074,1,0,0,0,5072,5070,1,0,0,0,5072,5073,1,0,0,0,5073,
        633,1,0,0,0,5074,5072,1,0,0,0,5075,5076,5,498,0,0,5076,5077,3,624,
        312,0,5077,5078,5,499,0,0,5078,635,1,0,0,0,5079,5080,5,498,0,0,5080,
        5081,3,712,356,0,5081,5082,5,499,0,0,5082,637,1,0,0,0,5083,5085,
        3,710,355,0,5084,5086,7,27,0,0,5085,5084,1,0,0,0,5085,5086,1,0,0,
        0,5086,5089,1,0,0,0,5087,5088,5,260,0,0,5088,5090,7,28,0,0,5089,
        5087,1,0,0,0,5089,5090,1,0,0,0,5090,639,1,0,0,0,5091,5092,5,220,
        0,0,5092,5095,7,29,0,0,5093,5094,5,265,0,0,5094,5096,7,29,0,0,5095,
        5093,1,0,0,0,5095,5096,1,0,0,0,5096,5102,1,0,0,0,5097,5098,5,220,
        0,0,5098,5099,7,29,0,0,5099,5100,5,500,0,0,5100,5102,7,29,0,0,5101,
        5091,1,0,0,0,5101,5097,1,0,0,0,5102,641,1,0,0,0,5103,5105,5,361,
        0,0,5104,5106,3,652,326,0,5105,5104,1,0,0,0,5105,5106,1,0,0,0,5106,
        5107,1,0,0,0,5107,5112,3,654,327,0,5108,5109,5,500,0,0,5109,5111,
        3,654,327,0,5110,5108,1,0,0,0,5111,5114,1,0,0,0,5112,5110,1,0,0,
        0,5112,5113,1,0,0,0,5113,5115,1,0,0,0,5114,5112,1,0,0,0,5115,5118,
        3,644,322,0,5116,5117,5,444,0,0,5117,5119,3,710,355,0,5118,5116,
        1,0,0,0,5118,5119,1,0,0,0,5119,5123,1,0,0,0,5120,5121,5,162,0,0,
        5121,5122,5,42,0,0,5122,5124,3,646,323,0,5123,5120,1,0,0,0,5123,
        5124,1,0,0,0,5124,5127,1,0,0,0,5125,5126,5,168,0,0,5126,5128,3,710,
        355,0,5127,5125,1,0,0,0,5127,5128,1,0,0,0,5128,5134,1,0,0,0,5129,
        5130,5,308,0,0,5130,5131,3,654,327,0,5131,5132,3,826,413,0,5132,
        5133,5,481,0,0,5133,5135,1,0,0,0,5134,5129,1,0,0,0,5134,5135,1,0,
        0,0,5135,643,1,0,0,0,5136,5137,5,153,0,0,5137,5139,3,656,328,0,5138,
        5140,3,662,331,0,5139,5138,1,0,0,0,5139,5140,1,0,0,0,5140,5142,1,
        0,0,0,5141,5136,1,0,0,0,5141,5142,1,0,0,0,5142,5146,1,0,0,0,5143,
        5144,5,153,0,0,5144,5146,5,115,0,0,5145,5141,1,0,0,0,5145,5143,1,
        0,0,0,5146,645,1,0,0,0,5147,5148,5,346,0,0,5148,5150,5,498,0,0,5149,
        5151,3,712,356,0,5150,5149,1,0,0,0,5150,5151,1,0,0,0,5151,5152,1,
        0,0,0,5152,5174,5,499,0,0,5153,5154,5,77,0,0,5154,5156,5,498,0,0,
        5155,5157,3,712,356,0,5156,5155,1,0,0,0,5156,5157,1,0,0,0,5157,5158,
        1,0,0,0,5158,5174,5,499,0,0,5159,5160,5,164,0,0,5160,5161,5,367,
        0,0,5161,5162,5,498,0,0,5162,5167,3,648,324,0,5163,5164,5,500,0,
        0,5164,5166,3,648,324,0,5165,5163,1,0,0,0,5166,5169,1,0,0,0,5167,
        5165,1,0,0,0,5167,5168,1,0,0,0,5168,5170,1,0,0,0,5169,5167,1,0,0,
        0,5170,5171,5,499,0,0,5171,5174,1,0,0,0,5172,5174,3,712,356,0,5173,
        5147,1,0,0,0,5173,5153,1,0,0,0,5173,5159,1,0,0,0,5173,5172,1,0,0,
        0,5174,647,1,0,0,0,5175,5177,5,498,0,0,5176,5178,3,710,355,0,5177,
        5176,1,0,0,0,5177,5178,1,0,0,0,5178,5183,1,0,0,0,5179,5180,5,500,
        0,0,5180,5182,3,710,355,0,5181,5179,1,0,0,0,5182,5185,1,0,0,0,5183,
        5181,1,0,0,0,5183,5184,1,0,0,0,5184,5186,1,0,0,0,5185,5183,1,0,0,
        0,5186,5187,5,499,0,0,5187,649,1,0,0,0,5188,5190,3,860,430,0,5189,
        5191,3,682,341,0,5190,5189,1,0,0,0,5190,5191,1,0,0,0,5191,5192,1,
        0,0,0,5192,5193,5,17,0,0,5193,5194,5,498,0,0,5194,5195,3,624,312,
        0,5195,5196,5,499,0,0,5196,651,1,0,0,0,5197,5198,7,30,0,0,5198,653,
        1,0,0,0,5199,5207,3,710,355,0,5200,5202,5,17,0,0,5201,5200,1,0,0,
        0,5201,5202,1,0,0,0,5202,5205,1,0,0,0,5203,5206,3,860,430,0,5204,
        5206,3,822,411,0,5205,5203,1,0,0,0,5205,5204,1,0,0,0,5206,5208,1,
        0,0,0,5207,5201,1,0,0,0,5207,5208,1,0,0,0,5208,5215,1,0,0,0,5209,
        5210,3,858,429,0,5210,5211,5,501,0,0,5211,5212,5,465,0,0,5212,5215,
        1,0,0,0,5213,5215,5,465,0,0,5214,5199,1,0,0,0,5214,5209,1,0,0,0,
        5214,5213,1,0,0,0,5215,655,1,0,0,0,5216,5224,3,658,329,0,5217,5219,
        5,500,0,0,5218,5220,5,214,0,0,5219,5218,1,0,0,0,5219,5220,1,0,0,
        0,5220,5221,1,0,0,0,5221,5223,3,658,329,0,5222,5217,1,0,0,0,5223,
        5226,1,0,0,0,5224,5222,1,0,0,0,5224,5225,1,0,0,0,5225,657,1,0,0,
        0,5226,5224,1,0,0,0,5227,5231,3,660,330,0,5228,5230,3,670,335,0,
        5229,5228,1,0,0,0,5230,5233,1,0,0,0,5231,5229,1,0,0,0,5231,5232,
        1,0,0,0,5232,5245,1,0,0,0,5233,5231,1,0,0,0,5234,5235,5,498,0,0,
        5235,5239,3,660,330,0,5236,5238,3,670,335,0,5237,5236,1,0,0,0,5238,
        5241,1,0,0,0,5239,5237,1,0,0,0,5239,5240,1,0,0,0,5240,5242,1,0,0,
        0,5241,5239,1,0,0,0,5242,5243,5,499,0,0,5243,5245,1,0,0,0,5244,5227,
        1,0,0,0,5244,5234,1,0,0,0,5245,659,1,0,0,0,5246,5248,3,858,429,0,
        5247,5249,3,630,315,0,5248,5247,1,0,0,0,5248,5249,1,0,0,0,5249,5251,
        1,0,0,0,5250,5252,3,684,342,0,5251,5250,1,0,0,0,5251,5252,1,0,0,
        0,5252,5254,1,0,0,0,5253,5255,3,688,344,0,5254,5253,1,0,0,0,5254,
        5255,1,0,0,0,5255,5257,1,0,0,0,5256,5258,3,698,349,0,5257,5256,1,
        0,0,0,5257,5258,1,0,0,0,5258,5263,1,0,0,0,5259,5261,5,17,0,0,5260,
        5259,1,0,0,0,5260,5261,1,0,0,0,5261,5262,1,0,0,0,5262,5264,3,860,
        430,0,5263,5260,1,0,0,0,5263,5264,1,0,0,0,5264,5266,1,0,0,0,5265,
        5267,3,676,338,0,5266,5265,1,0,0,0,5266,5267,1,0,0,0,5267,5343,1,
        0,0,0,5268,5269,5,498,0,0,5269,5270,5,429,0,0,5270,5275,3,636,318,
        0,5271,5272,5,500,0,0,5272,5274,3,636,318,0,5273,5271,1,0,0,0,5274,
        5277,1,0,0,0,5275,5273,1,0,0,0,5275,5276,1,0,0,0,5276,5278,1,0,0,
        0,5277,5275,1,0,0,0,5278,5286,5,499,0,0,5279,5281,5,17,0,0,5280,
        5279,1,0,0,0,5280,5281,1,0,0,0,5281,5282,1,0,0,0,5282,5284,3,860,
        430,0,5283,5285,3,682,341,0,5284,5283,1,0,0,0,5284,5285,1,0,0,0,
        5285,5287,1,0,0,0,5286,5280,1,0,0,0,5286,5287,1,0,0,0,5287,5343,
        1,0,0,0,5288,5296,3,634,317,0,5289,5291,5,17,0,0,5290,5289,1,0,0,
        0,5290,5291,1,0,0,0,5291,5292,1,0,0,0,5292,5294,3,860,430,0,5293,
        5295,3,682,341,0,5294,5293,1,0,0,0,5294,5295,1,0,0,0,5295,5297,1,
        0,0,0,5296,5290,1,0,0,0,5296,5297,1,0,0,0,5297,5343,1,0,0,0,5298,
        5299,3,858,429,0,5299,5300,5,498,0,0,5300,5301,3,712,356,0,5301,
        5309,5,499,0,0,5302,5304,5,17,0,0,5303,5302,1,0,0,0,5303,5304,1,
        0,0,0,5304,5305,1,0,0,0,5305,5307,3,860,430,0,5306,5308,3,682,341,
        0,5307,5306,1,0,0,0,5307,5308,1,0,0,0,5308,5310,1,0,0,0,5309,5303,
        1,0,0,0,5309,5310,1,0,0,0,5310,5343,1,0,0,0,5311,5312,5,391,0,0,
        5312,5313,5,498,0,0,5313,5314,3,858,429,0,5314,5315,5,498,0,0,5315,
        5316,3,668,334,0,5316,5317,5,499,0,0,5317,5325,5,499,0,0,5318,5320,
        5,17,0,0,5319,5318,1,0,0,0,5319,5320,1,0,0,0,5320,5321,1,0,0,0,5321,
        5323,3,860,430,0,5322,5324,3,682,341,0,5323,5322,1,0,0,0,5323,5324,
        1,0,0,0,5324,5326,1,0,0,0,5325,5319,1,0,0,0,5325,5326,1,0,0,0,5326,
        5343,1,0,0,0,5327,5328,5,140,0,0,5328,5336,3,808,404,0,5329,5331,
        5,17,0,0,5330,5329,1,0,0,0,5330,5331,1,0,0,0,5331,5332,1,0,0,0,5332,
        5334,3,860,430,0,5333,5335,3,682,341,0,5334,5333,1,0,0,0,5334,5335,
        1,0,0,0,5335,5337,1,0,0,0,5336,5330,1,0,0,0,5336,5337,1,0,0,0,5337,
        5343,1,0,0,0,5338,5339,5,498,0,0,5339,5340,3,656,328,0,5340,5341,
        5,499,0,0,5341,5343,1,0,0,0,5342,5246,1,0,0,0,5342,5268,1,0,0,0,
        5342,5288,1,0,0,0,5342,5298,1,0,0,0,5342,5311,1,0,0,0,5342,5327,
        1,0,0,0,5342,5338,1,0,0,0,5343,661,1,0,0,0,5344,5345,5,292,0,0,5345,
        5346,5,498,0,0,5346,5351,3,664,332,0,5347,5348,5,500,0,0,5348,5350,
        3,664,332,0,5349,5347,1,0,0,0,5350,5353,1,0,0,0,5351,5349,1,0,0,
        0,5351,5352,1,0,0,0,5352,5354,1,0,0,0,5353,5351,1,0,0,0,5354,5357,
        5,149,0,0,5355,5358,3,860,430,0,5356,5358,3,862,431,0,5357,5355,
        1,0,0,0,5357,5356,1,0,0,0,5358,5359,1,0,0,0,5359,5360,5,182,0,0,
        5360,5361,5,498,0,0,5361,5366,3,666,333,0,5362,5363,5,500,0,0,5363,
        5365,3,666,333,0,5364,5362,1,0,0,0,5365,5368,1,0,0,0,5366,5364,1,
        0,0,0,5366,5367,1,0,0,0,5367,5369,1,0,0,0,5368,5366,1,0,0,0,5369,
        5370,5,499,0,0,5370,5371,5,499,0,0,5371,663,1,0,0,0,5372,5380,3,
        728,364,0,5373,5375,5,17,0,0,5374,5373,1,0,0,0,5374,5375,1,0,0,0,
        5375,5378,1,0,0,0,5376,5379,3,860,430,0,5377,5379,3,822,411,0,5378,
        5376,1,0,0,0,5378,5377,1,0,0,0,5379,5381,1,0,0,0,5380,5374,1,0,0,
        0,5380,5381,1,0,0,0,5381,665,1,0,0,0,5382,5385,3,726,363,0,5383,
        5385,3,778,389,0,5384,5382,1,0,0,0,5384,5383,1,0,0,0,5385,5393,1,
        0,0,0,5386,5388,5,17,0,0,5387,5386,1,0,0,0,5387,5388,1,0,0,0,5388,
        5391,1,0,0,0,5389,5392,3,860,430,0,5390,5392,3,822,411,0,5391,5389,
        1,0,0,0,5391,5390,1,0,0,0,5392,5394,1,0,0,0,5393,5387,1,0,0,0,5393,
        5394,1,0,0,0,5394,667,1,0,0,0,5395,5396,3,712,356,0,5396,669,1,0,
        0,0,5397,5399,3,672,336,0,5398,5400,3,676,338,0,5399,5398,1,0,0,
        0,5399,5400,1,0,0,0,5400,5402,1,0,0,0,5401,5403,5,214,0,0,5402,5401,
        1,0,0,0,5402,5403,1,0,0,0,5403,5404,1,0,0,0,5404,5406,3,660,330,
        0,5405,5407,3,680,340,0,5406,5405,1,0,0,0,5406,5407,1,0,0,0,5407,
        5419,1,0,0,0,5408,5410,3,674,337,0,5409,5411,3,676,338,0,5410,5409,
        1,0,0,0,5410,5411,1,0,0,0,5411,5413,1,0,0,0,5412,5414,5,214,0,0,
        5413,5412,1,0,0,0,5413,5414,1,0,0,0,5414,5415,1,0,0,0,5415,5416,
        3,660,330,0,5416,5417,3,680,340,0,5417,5419,1,0,0,0,5418,5397,1,
        0,0,0,5418,5408,1,0,0,0,5419,671,1,0,0,0,5420,5427,5,204,0,0,5421,
        5422,5,188,0,0,5422,5427,5,204,0,0,5423,5427,5,76,0,0,5424,5425,
        5,76,0,0,5425,5427,5,204,0,0,5426,5420,1,0,0,0,5426,5421,1,0,0,0,
        5426,5423,1,0,0,0,5426,5424,1,0,0,0,5427,673,1,0,0,0,5428,5429,5,
        216,0,0,5429,5456,5,204,0,0,5430,5431,5,341,0,0,5431,5456,5,204,
        0,0,5432,5433,5,156,0,0,5433,5456,5,204,0,0,5434,5435,5,216,0,0,
        5435,5436,5,275,0,0,5436,5456,5,204,0,0,5437,5438,5,341,0,0,5438,
        5439,5,275,0,0,5439,5456,5,204,0,0,5440,5441,5,156,0,0,5441,5442,
        5,275,0,0,5442,5456,5,204,0,0,5443,5444,5,216,0,0,5444,5445,5,362,
        0,0,5445,5456,5,204,0,0,5446,5447,5,341,0,0,5447,5448,5,362,0,0,
        5448,5456,5,204,0,0,5449,5450,5,216,0,0,5450,5451,5,12,0,0,5451,
        5456,5,204,0,0,5452,5453,5,341,0,0,5453,5454,5,12,0,0,5454,5456,
        5,204,0,0,5455,5428,1,0,0,0,5455,5430,1,0,0,0,5455,5432,1,0,0,0,
        5455,5434,1,0,0,0,5455,5437,1,0,0,0,5455,5440,1,0,0,0,5455,5443,
        1,0,0,0,5455,5446,1,0,0,0,5455,5449,1,0,0,0,5455,5452,1,0,0,0,5456,
        675,1,0,0,0,5457,5458,5,502,0,0,5458,5463,3,860,430,0,5459,5460,
        5,500,0,0,5460,5462,3,860,430,0,5461,5459,1,0,0,0,5462,5465,1,0,
        0,0,5463,5461,1,0,0,0,5463,5464,1,0,0,0,5464,5466,1,0,0,0,5465,5463,
        1,0,0,0,5466,5467,5,503,0,0,5467,5476,1,0,0,0,5468,5469,5,502,0,
        0,5469,5470,3,860,430,0,5470,5471,5,473,0,0,5471,5472,3,724,362,
        0,5472,5473,3,778,389,0,5473,5474,5,503,0,0,5474,5476,1,0,0,0,5475,
        5457,1,0,0,0,5475,5468,1,0,0,0,5476,677,1,0,0,0,5477,5478,3,864,
        432,0,5478,5479,5,455,0,0,5479,5480,3,726,363,0,5480,679,1,0,0,0,
        5481,5482,5,266,0,0,5482,5496,3,710,355,0,5483,5484,5,427,0,0,5484,
        5485,5,498,0,0,5485,5490,3,860,430,0,5486,5487,5,500,0,0,5487,5489,
        3,860,430,0,5488,5486,1,0,0,0,5489,5492,1,0,0,0,5490,5488,1,0,0,
        0,5490,5491,1,0,0,0,5491,5493,1,0,0,0,5492,5490,1,0,0,0,5493,5494,
        5,499,0,0,5494,5496,1,0,0,0,5495,5481,1,0,0,0,5495,5483,1,0,0,0,
        5496,681,1,0,0,0,5497,5498,5,498,0,0,5498,5503,3,860,430,0,5499,
        5500,5,500,0,0,5500,5502,3,860,430,0,5501,5499,1,0,0,0,5502,5505,
        1,0,0,0,5503,5501,1,0,0,0,5503,5504,1,0,0,0,5504,5506,1,0,0,0,5505,
        5503,1,0,0,0,5506,5507,5,499,0,0,5507,683,1,0,0,0,5508,5510,5,396,
        0,0,5509,5508,1,0,0,0,5509,5510,1,0,0,0,5510,5511,1,0,0,0,5511,5512,
        7,31,0,0,5512,5513,5,498,0,0,5513,5518,3,864,432,0,5514,5515,5,500,
        0,0,5515,5517,3,864,432,0,5516,5514,1,0,0,0,5517,5520,1,0,0,0,5518,
        5516,1,0,0,0,5518,5519,1,0,0,0,5519,5521,1,0,0,0,5520,5518,1,0,0,
        0,5521,5522,5,499,0,0,5522,5530,1,0,0,0,5523,5525,5,396,0,0,5524,
        5523,1,0,0,0,5524,5525,1,0,0,0,5525,5526,1,0,0,0,5526,5527,7,31,
        0,0,5527,5530,3,864,432,0,5528,5530,3,686,343,0,5529,5509,1,0,0,
        0,5529,5524,1,0,0,0,5529,5528,1,0,0,0,5530,685,1,0,0,0,5531,5532,
        5,279,0,0,5532,5533,5,498,0,0,5533,5538,3,792,396,0,5534,5535,5,
        500,0,0,5535,5537,3,792,396,0,5536,5534,1,0,0,0,5537,5540,1,0,0,
        0,5538,5536,1,0,0,0,5538,5539,1,0,0,0,5539,5541,1,0,0,0,5540,5538,
        1,0,0,0,5541,5542,5,499,0,0,5542,687,1,0,0,0,5543,5544,5,393,0,0,
        5544,5545,5,498,0,0,5545,5550,5,481,0,0,5546,5547,5,500,0,0,5547,
        5549,5,481,0,0,5548,5546,1,0,0,0,5549,5552,1,0,0,0,5550,5548,1,0,
        0,0,5550,5551,1,0,0,0,5551,5553,1,0,0,0,5552,5550,1,0,0,0,5553,5554,
        5,499,0,0,5554,689,1,0,0,0,5555,5556,5,296,0,0,5556,5557,3,860,430,
        0,5557,5558,5,153,0,0,5558,5559,3,692,346,0,5559,691,1,0,0,0,5560,
        5563,3,6,3,0,5561,5563,5,484,0,0,5562,5560,1,0,0,0,5562,5561,1,0,
        0,0,5563,693,1,0,0,0,5564,5565,5,128,0,0,5565,5577,3,860,430,0,5566,
        5567,5,427,0,0,5567,5568,5,480,0,0,5568,5574,3,864,432,0,5569,5570,
        5,500,0,0,5570,5571,5,480,0,0,5571,5573,3,864,432,0,5572,5569,1,
        0,0,0,5573,5576,1,0,0,0,5574,5572,1,0,0,0,5574,5575,1,0,0,0,5575,
        5578,1,0,0,0,5576,5574,1,0,0,0,5577,5566,1,0,0,0,5577,5578,1,0,0,
        0,5578,695,1,0,0,0,5579,5580,7,32,0,0,5580,5581,5,296,0,0,5581,5582,
        3,860,430,0,5582,697,1,0,0,0,5583,5584,5,330,0,0,5584,5585,5,498,
        0,0,5585,5590,5,481,0,0,5586,5587,5,500,0,0,5587,5589,5,481,0,0,
        5588,5586,1,0,0,0,5589,5592,1,0,0,0,5590,5588,1,0,0,0,5590,5591,
        1,0,0,0,5591,5593,1,0,0,0,5592,5590,1,0,0,0,5593,5594,5,499,0,0,
        5594,699,1,0,0,0,5595,5596,5,498,0,0,5596,5601,3,702,351,0,5597,
        5598,5,500,0,0,5598,5600,3,702,351,0,5599,5597,1,0,0,0,5600,5603,
        1,0,0,0,5601,5599,1,0,0,0,5601,5602,1,0,0,0,5602,5604,1,0,0,0,5603,
        5601,1,0,0,0,5604,5605,5,499,0,0,5605,701,1,0,0,0,5606,5609,3,710,
        355,0,5607,5609,5,100,0,0,5608,5606,1,0,0,0,5608,5607,1,0,0,0,5609,
        703,1,0,0,0,5610,5615,3,706,353,0,5611,5612,5,500,0,0,5612,5614,
        3,706,353,0,5613,5611,1,0,0,0,5614,5617,1,0,0,0,5615,5613,1,0,0,
        0,5615,5616,1,0,0,0,5616,705,1,0,0,0,5617,5615,1,0,0,0,5618,5619,
        3,710,355,0,5619,5620,5,497,0,0,5620,5621,3,710,355,0,5621,707,1,
        0,0,0,5622,5623,3,710,355,0,5623,5624,5,0,0,1,5624,709,1,0,0,0,5625,
        5627,6,355,-1,0,5626,5628,5,31,0,0,5627,5626,1,0,0,0,5627,5628,1,
        0,0,0,5628,5629,1,0,0,0,5629,5633,3,714,357,0,5630,5631,5,258,0,
        0,5631,5633,3,710,355,3,5632,5625,1,0,0,0,5632,5630,1,0,0,0,5633,
        5642,1,0,0,0,5634,5635,10,2,0,0,5635,5636,7,33,0,0,5636,5641,3,710,
        355,3,5637,5638,10,1,0,0,5638,5639,7,34,0,0,5639,5641,3,710,355,
        2,5640,5634,1,0,0,0,5640,5637,1,0,0,0,5641,5644,1,0,0,0,5642,5640,
        1,0,0,0,5642,5643,1,0,0,0,5643,711,1,0,0,0,5644,5642,1,0,0,0,5645,
        5650,3,710,355,0,5646,5647,5,500,0,0,5647,5649,3,710,355,0,5648,
        5646,1,0,0,0,5649,5652,1,0,0,0,5650,5648,1,0,0,0,5650,5651,1,0,0,
        0,5651,713,1,0,0,0,5652,5650,1,0,0,0,5653,5654,6,357,-1,0,5654,5655,
        3,716,358,0,5655,5674,1,0,0,0,5656,5657,10,3,0,0,5657,5659,5,201,
        0,0,5658,5660,5,258,0,0,5659,5658,1,0,0,0,5659,5660,1,0,0,0,5660,
        5661,1,0,0,0,5661,5673,5,259,0,0,5662,5663,10,2,0,0,5663,5664,3,
        826,413,0,5664,5665,3,716,358,0,5665,5673,1,0,0,0,5666,5667,10,1,
        0,0,5667,5668,3,826,413,0,5668,5669,5,498,0,0,5669,5670,3,624,312,
        0,5670,5671,5,499,0,0,5671,5673,1,0,0,0,5672,5656,1,0,0,0,5672,5662,
        1,0,0,0,5672,5666,1,0,0,0,5673,5676,1,0,0,0,5674,5672,1,0,0,0,5674,
        5675,1,0,0,0,5675,715,1,0,0,0,5676,5674,1,0,0,0,5677,5679,3,722,
        361,0,5678,5680,3,720,360,0,5679,5678,1,0,0,0,5679,5680,1,0,0,0,
        5680,5683,1,0,0,0,5681,5683,3,718,359,0,5682,5677,1,0,0,0,5682,5681,
        1,0,0,0,5683,717,1,0,0,0,5684,5685,5,498,0,0,5685,5688,3,710,355,
        0,5686,5687,5,500,0,0,5687,5689,3,710,355,0,5688,5686,1,0,0,0,5689,
        5690,1,0,0,0,5690,5688,1,0,0,0,5690,5691,1,0,0,0,5691,5692,1,0,0,
        0,5692,5694,5,499,0,0,5693,5695,5,258,0,0,5694,5693,1,0,0,0,5694,
        5695,1,0,0,0,5695,5696,1,0,0,0,5696,5697,5,182,0,0,5697,5698,5,498,
        0,0,5698,5699,3,624,312,0,5699,5700,5,499,0,0,5700,719,1,0,0,0,5701,
        5703,5,258,0,0,5702,5701,1,0,0,0,5702,5703,1,0,0,0,5703,5704,1,0,
        0,0,5704,5705,5,182,0,0,5705,5706,5,498,0,0,5706,5707,3,624,312,
        0,5707,5708,5,499,0,0,5708,5731,1,0,0,0,5709,5711,5,258,0,0,5710,
        5709,1,0,0,0,5710,5711,1,0,0,0,5711,5712,1,0,0,0,5712,5713,5,182,
        0,0,5713,5714,5,498,0,0,5714,5715,3,712,356,0,5715,5716,5,499,0,
        0,5716,5731,1,0,0,0,5717,5719,5,258,0,0,5718,5717,1,0,0,0,5718,5719,
        1,0,0,0,5719,5720,1,0,0,0,5720,5721,5,29,0,0,5721,5722,3,722,361,
        0,5722,5723,5,11,0,0,5723,5724,3,716,358,0,5724,5731,1,0,0,0,5725,
        5727,5,258,0,0,5726,5725,1,0,0,0,5726,5727,1,0,0,0,5727,5728,1,0,
        0,0,5728,5729,7,35,0,0,5729,5731,3,722,361,0,5730,5702,1,0,0,0,5730,
        5710,1,0,0,0,5730,5718,1,0,0,0,5730,5726,1,0,0,0,5731,721,1,0,0,
        0,5732,5733,6,361,-1,0,5733,5734,3,724,362,0,5734,5761,1,0,0,0,5735,
        5736,10,8,0,0,5736,5737,5,474,0,0,5737,5760,3,722,361,9,5738,5739,
        10,7,0,0,5739,5740,7,36,0,0,5740,5760,3,722,361,8,5741,5742,10,6,
        0,0,5742,5743,7,37,0,0,5743,5760,3,722,361,7,5744,5745,10,5,0,0,
        5745,5746,5,472,0,0,5746,5760,3,722,361,6,5747,5748,10,4,0,0,5748,
        5749,5,473,0,0,5749,5760,3,722,361,5,5750,5751,10,3,0,0,5751,5752,
        5,476,0,0,5752,5760,3,722,361,4,5753,5754,10,2,0,0,5754,5755,5,477,
        0,0,5755,5760,3,722,361,3,5756,5757,10,1,0,0,5757,5758,5,478,0,0,
        5758,5760,3,722,361,2,5759,5735,1,0,0,0,5759,5738,1,0,0,0,5759,5741,
        1,0,0,0,5759,5744,1,0,0,0,5759,5747,1,0,0,0,5759,5750,1,0,0,0,5759,
        5753,1,0,0,0,5759,5756,1,0,0,0,5760,5763,1,0,0,0,5761,5759,1,0,0,
        0,5761,5762,1,0,0,0,5762,723,1,0,0,0,5763,5761,1,0,0,0,5764,5765,
        6,362,-1,0,5765,5870,3,732,366,0,5766,5870,3,734,367,0,5767,5768,
        5,105,0,0,5768,5769,5,498,0,0,5769,5770,3,712,356,0,5770,5771,5,
        499,0,0,5771,5870,1,0,0,0,5772,5870,3,728,364,0,5773,5774,5,504,
        0,0,5774,5775,5,146,0,0,5775,5776,3,728,364,0,5776,5777,5,505,0,
        0,5777,5870,1,0,0,0,5778,5870,3,726,363,0,5779,5870,3,736,368,0,
        5780,5781,7,38,0,0,5781,5870,3,724,362,18,5782,5783,5,470,0,0,5783,
        5870,3,724,362,17,5784,5785,5,498,0,0,5785,5786,3,710,355,0,5786,
        5787,5,499,0,0,5787,5870,1,0,0,0,5788,5789,5,129,0,0,5789,5790,5,
        498,0,0,5790,5791,3,624,312,0,5791,5792,5,499,0,0,5792,5870,1,0,
        0,0,5793,5870,3,634,317,0,5794,5795,5,46,0,0,5795,5796,5,498,0,0,
        5796,5797,3,710,355,0,5797,5798,5,17,0,0,5798,5799,3,840,420,0,5799,
        5800,5,499,0,0,5800,5870,1,0,0,0,5801,5802,5,72,0,0,5802,5803,5,
        498,0,0,5803,5804,3,710,355,0,5804,5805,5,500,0,0,5805,5806,3,840,
        420,0,5806,5807,5,499,0,0,5807,5870,1,0,0,0,5808,5809,5,45,0,0,5809,
        5811,3,710,355,0,5810,5812,3,746,373,0,5811,5810,1,0,0,0,5812,5813,
        1,0,0,0,5813,5811,1,0,0,0,5813,5814,1,0,0,0,5814,5817,1,0,0,0,5815,
        5816,5,118,0,0,5816,5818,3,710,355,0,5817,5815,1,0,0,0,5817,5818,
        1,0,0,0,5818,5819,1,0,0,0,5819,5820,5,121,0,0,5820,5870,1,0,0,0,
        5821,5823,5,45,0,0,5822,5824,3,746,373,0,5823,5822,1,0,0,0,5824,
        5825,1,0,0,0,5825,5823,1,0,0,0,5825,5826,1,0,0,0,5826,5829,1,0,0,
        0,5827,5828,5,118,0,0,5828,5830,3,710,355,0,5829,5827,1,0,0,0,5829,
        5830,1,0,0,0,5830,5831,1,0,0,0,5831,5832,5,121,0,0,5832,5870,1,0,
        0,0,5833,5835,3,842,421,0,5834,5833,1,0,0,0,5834,5835,1,0,0,0,5835,
        5836,1,0,0,0,5836,5838,5,502,0,0,5837,5839,3,712,356,0,5838,5837,
        1,0,0,0,5838,5839,1,0,0,0,5839,5840,1,0,0,0,5840,5870,5,503,0,0,
        5841,5842,3,844,422,0,5842,5844,5,504,0,0,5843,5845,3,704,352,0,
        5844,5843,1,0,0,0,5844,5845,1,0,0,0,5845,5846,1,0,0,0,5846,5847,
        5,505,0,0,5847,5870,1,0,0,0,5848,5849,5,231,0,0,5849,5851,5,504,
        0,0,5850,5852,3,704,352,0,5851,5850,1,0,0,0,5851,5852,1,0,0,0,5852,
        5853,1,0,0,0,5853,5870,5,505,0,0,5854,5857,3,860,430,0,5855,5857,
        3,862,431,0,5856,5854,1,0,0,0,5856,5855,1,0,0,0,5857,5858,1,0,0,
        0,5858,5859,5,479,0,0,5859,5860,3,710,355,0,5860,5870,1,0,0,0,5861,
        5862,3,862,431,0,5862,5863,5,479,0,0,5863,5865,5,498,0,0,5864,5866,
        3,712,356,0,5865,5864,1,0,0,0,5865,5866,1,0,0,0,5866,5867,1,0,0,
        0,5867,5868,5,499,0,0,5868,5870,1,0,0,0,5869,5764,1,0,0,0,5869,5766,
        1,0,0,0,5869,5767,1,0,0,0,5869,5772,1,0,0,0,5869,5773,1,0,0,0,5869,
        5778,1,0,0,0,5869,5779,1,0,0,0,5869,5780,1,0,0,0,5869,5782,1,0,0,
        0,5869,5784,1,0,0,0,5869,5788,1,0,0,0,5869,5793,1,0,0,0,5869,5794,
        1,0,0,0,5869,5801,1,0,0,0,5869,5808,1,0,0,0,5869,5821,1,0,0,0,5869,
        5834,1,0,0,0,5869,5841,1,0,0,0,5869,5848,1,0,0,0,5869,5856,1,0,0,
        0,5869,5861,1,0,0,0,5870,5912,1,0,0,0,5871,5872,10,19,0,0,5872,5873,
        5,1,0,0,5873,5911,3,724,362,20,5874,5876,10,1,0,0,5875,5877,5,258,
        0,0,5876,5875,1,0,0,0,5876,5877,1,0,0,0,5877,5878,1,0,0,0,5878,5879,
        5,235,0,0,5879,5911,3,724,362,2,5880,5881,10,23,0,0,5881,5884,5,
        59,0,0,5882,5885,3,860,430,0,5883,5885,3,822,411,0,5884,5882,1,0,
        0,0,5884,5883,1,0,0,0,5885,5911,1,0,0,0,5886,5890,10,20,0,0,5887,
        5891,5,491,0,0,5888,5889,5,501,0,0,5889,5891,3,860,430,0,5890,5887,
        1,0,0,0,5890,5888,1,0,0,0,5891,5911,1,0,0,0,5892,5893,10,6,0,0,5893,
        5894,5,502,0,0,5894,5895,3,722,361,0,5895,5896,5,503,0,0,5896,5911,
        1,0,0,0,5897,5898,10,5,0,0,5898,5900,5,502,0,0,5899,5901,5,481,0,
        0,5900,5899,1,0,0,0,5900,5901,1,0,0,0,5901,5902,1,0,0,0,5902,5904,
        5,497,0,0,5903,5905,5,481,0,0,5904,5903,1,0,0,0,5904,5905,1,0,0,
        0,5905,5906,1,0,0,0,5906,5911,5,503,0,0,5907,5908,10,4,0,0,5908,
        5909,5,479,0,0,5909,5911,3,822,411,0,5910,5871,1,0,0,0,5910,5874,
        1,0,0,0,5910,5880,1,0,0,0,5910,5886,1,0,0,0,5910,5892,1,0,0,0,5910,
        5897,1,0,0,0,5910,5907,1,0,0,0,5911,5914,1,0,0,0,5912,5910,1,0,0,
        0,5912,5913,1,0,0,0,5913,725,1,0,0,0,5914,5912,1,0,0,0,5915,5926,
        5,259,0,0,5916,5926,3,828,414,0,5917,5926,3,876,438,0,5918,5919,
        7,39,0,0,5919,5926,3,822,411,0,5920,5926,3,822,411,0,5921,5926,3,
        830,415,0,5922,5926,3,838,419,0,5923,5926,3,824,412,0,5924,5926,
        5,278,0,0,5925,5915,1,0,0,0,5925,5916,1,0,0,0,5925,5917,1,0,0,0,
        5925,5918,1,0,0,0,5925,5920,1,0,0,0,5925,5921,1,0,0,0,5925,5922,
        1,0,0,0,5925,5923,1,0,0,0,5925,5924,1,0,0,0,5926,727,1,0,0,0,5927,
        5928,5,133,0,0,5928,5929,5,498,0,0,5929,5930,3,860,430,0,5930,5931,
        5,153,0,0,5931,5932,3,722,361,0,5932,5933,5,499,0,0,5933,5987,1,
        0,0,0,5934,5935,5,164,0,0,5935,5944,5,498,0,0,5936,5941,3,710,355,
        0,5937,5938,5,500,0,0,5938,5940,3,710,355,0,5939,5937,1,0,0,0,5940,
        5943,1,0,0,0,5941,5939,1,0,0,0,5941,5942,1,0,0,0,5942,5945,1,0,0,
        0,5943,5941,1,0,0,0,5944,5936,1,0,0,0,5944,5945,1,0,0,0,5945,5946,
        1,0,0,0,5946,5987,5,499,0,0,5947,5948,5,165,0,0,5948,5957,5,498,
        0,0,5949,5954,3,710,355,0,5950,5951,5,500,0,0,5951,5953,3,710,355,
        0,5952,5950,1,0,0,0,5953,5956,1,0,0,0,5954,5952,1,0,0,0,5954,5955,
        1,0,0,0,5955,5958,1,0,0,0,5956,5954,1,0,0,0,5957,5949,1,0,0,0,5957,
        5958,1,0,0,0,5958,5959,1,0,0,0,5959,5987,5,499,0,0,5960,5987,3,738,
        369,0,5961,5987,3,740,370,0,5962,5987,3,742,371,0,5963,5965,3,730,
        365,0,5964,5966,3,748,374,0,5965,5964,1,0,0,0,5965,5966,1,0,0,0,
        5966,5987,1,0,0,0,5967,5968,3,744,372,0,5968,5969,3,748,374,0,5969,
        5987,1,0,0,0,5970,5971,3,858,429,0,5971,5980,5,498,0,0,5972,5977,
        3,710,355,0,5973,5974,5,500,0,0,5974,5976,3,710,355,0,5975,5973,
        1,0,0,0,5976,5979,1,0,0,0,5977,5975,1,0,0,0,5977,5978,1,0,0,0,5978,
        5981,1,0,0,0,5979,5977,1,0,0,0,5980,5972,1,0,0,0,5980,5981,1,0,0,
        0,5981,5982,1,0,0,0,5982,5984,5,499,0,0,5983,5985,3,748,374,0,5984,
        5983,1,0,0,0,5984,5985,1,0,0,0,5985,5987,1,0,0,0,5986,5927,1,0,0,
        0,5986,5934,1,0,0,0,5986,5947,1,0,0,0,5986,5960,1,0,0,0,5986,5961,
        1,0,0,0,5986,5962,1,0,0,0,5986,5963,1,0,0,0,5986,5967,1,0,0,0,5986,
        5970,1,0,0,0,5987,729,1,0,0,0,5988,5989,5,23,0,0,5989,5991,5,498,
        0,0,5990,5992,3,652,326,0,5991,5990,1,0,0,0,5991,5992,1,0,0,0,5992,
        5993,1,0,0,0,5993,5994,3,710,355,0,5994,5995,5,499,0,0,5995,6114,
        1,0,0,0,5996,5997,5,74,0,0,5997,5999,5,498,0,0,5998,6000,5,465,0,
        0,5999,5998,1,0,0,0,5999,6000,1,0,0,0,6000,6001,1,0,0,0,6001,6114,
        5,499,0,0,6002,6003,5,74,0,0,6003,6008,5,498,0,0,6004,6006,3,652,
        326,0,6005,6007,3,676,338,0,6006,6005,1,0,0,0,6006,6007,1,0,0,0,
        6007,6009,1,0,0,0,6008,6004,1,0,0,0,6008,6009,1,0,0,0,6009,6018,
        1,0,0,0,6010,6015,3,710,355,0,6011,6012,5,500,0,0,6012,6014,3,710,
        355,0,6013,6011,1,0,0,0,6014,6017,1,0,0,0,6015,6013,1,0,0,0,6015,
        6016,1,0,0,0,6016,6019,1,0,0,0,6017,6015,1,0,0,0,6018,6010,1,0,0,
        0,6018,6019,1,0,0,0,6019,6020,1,0,0,0,6020,6114,5,499,0,0,6021,6022,
        5,237,0,0,6022,6024,5,498,0,0,6023,6025,3,652,326,0,6024,6023,1,
        0,0,0,6024,6025,1,0,0,0,6025,6026,1,0,0,0,6026,6027,3,710,355,0,
        6027,6028,5,499,0,0,6028,6114,1,0,0,0,6029,6030,5,242,0,0,6030,6032,
        5,498,0,0,6031,6033,3,652,326,0,6032,6031,1,0,0,0,6032,6033,1,0,
        0,0,6033,6034,1,0,0,0,6034,6035,3,710,355,0,6035,6036,5,499,0,0,
        6036,6114,1,0,0,0,6037,6038,5,384,0,0,6038,6040,5,498,0,0,6039,6041,
        3,652,326,0,6040,6039,1,0,0,0,6040,6041,1,0,0,0,6041,6042,1,0,0,
        0,6042,6043,3,710,355,0,6043,6044,5,499,0,0,6044,6114,1,0,0,0,6045,
        6046,5,15,0,0,6046,6048,5,498,0,0,6047,6049,3,652,326,0,6048,6047,
        1,0,0,0,6048,6049,1,0,0,0,6049,6050,1,0,0,0,6050,6061,3,710,355,
        0,6051,6052,5,274,0,0,6052,6053,5,42,0,0,6053,6058,3,638,319,0,6054,
        6055,5,500,0,0,6055,6057,3,638,319,0,6056,6054,1,0,0,0,6057,6060,
        1,0,0,0,6058,6056,1,0,0,0,6058,6059,1,0,0,0,6059,6062,1,0,0,0,6060,
        6058,1,0,0,0,6061,6051,1,0,0,0,6061,6062,1,0,0,0,6062,6063,1,0,0,
        0,6063,6064,5,499,0,0,6064,6114,1,0,0,0,6065,6066,5,16,0,0,6066,
        6067,5,498,0,0,6067,6078,3,710,355,0,6068,6069,5,274,0,0,6069,6070,
        5,42,0,0,6070,6075,3,638,319,0,6071,6072,5,500,0,0,6072,6074,3,638,
        319,0,6073,6071,1,0,0,0,6074,6077,1,0,0,0,6075,6073,1,0,0,0,6075,
        6076,1,0,0,0,6076,6079,1,0,0,0,6077,6075,1,0,0,0,6078,6068,1,0,0,
        0,6078,6079,1,0,0,0,6079,6080,1,0,0,0,6080,6081,5,499,0,0,6081,6114,
        1,0,0,0,6082,6083,5,166,0,0,6083,6085,5,498,0,0,6084,6086,3,652,
        326,0,6085,6084,1,0,0,0,6085,6086,1,0,0,0,6086,6087,1,0,0,0,6087,
        6092,3,710,355,0,6088,6089,5,500,0,0,6089,6091,3,710,355,0,6090,
        6088,1,0,0,0,6091,6094,1,0,0,0,6092,6090,1,0,0,0,6092,6093,1,0,0,
        0,6093,6105,1,0,0,0,6094,6092,1,0,0,0,6095,6096,5,274,0,0,6096,6097,
        5,42,0,0,6097,6102,3,638,319,0,6098,6099,5,500,0,0,6099,6101,3,638,
        319,0,6100,6098,1,0,0,0,6101,6104,1,0,0,0,6102,6100,1,0,0,0,6102,
        6103,1,0,0,0,6103,6106,1,0,0,0,6104,6102,1,0,0,0,6105,6095,1,0,0,
        0,6105,6106,1,0,0,0,6106,6109,1,0,0,0,6107,6108,5,363,0,0,6108,6110,
        3,710,355,0,6109,6107,1,0,0,0,6109,6110,1,0,0,0,6110,6111,1,0,0,
        0,6111,6112,5,499,0,0,6112,6114,1,0,0,0,6113,5988,1,0,0,0,6113,5996,
        1,0,0,0,6113,6002,1,0,0,0,6113,6021,1,0,0,0,6113,6029,1,0,0,0,6113,
        6037,1,0,0,0,6113,6045,1,0,0,0,6113,6065,1,0,0,0,6113,6082,1,0,0,
        0,6114,731,1,0,0,0,6115,6116,5,480,0,0,6116,6117,3,864,432,0,6117,
        733,1,0,0,0,6118,6119,5,480,0,0,6119,6123,5,480,0,0,6120,6121,3,
        814,407,0,6121,6122,5,501,0,0,6122,6124,1,0,0,0,6123,6120,1,0,0,
        0,6123,6124,1,0,0,0,6124,6125,1,0,0,0,6125,6126,3,860,430,0,6126,
        735,1,0,0,0,6127,6128,3,860,430,0,6128,737,1,0,0,0,6129,6130,5,47,
        0,0,6130,6131,5,498,0,0,6131,6152,5,499,0,0,6132,6133,5,88,0,0,6133,
        6134,5,498,0,0,6134,6152,5,499,0,0,6135,6136,5,357,0,0,6136,6137,
        5,498,0,0,6137,6152,5,499,0,0,6138,6139,5,425,0,0,6139,6140,5,498,
        0,0,6140,6152,5,499,0,0,6141,6144,5,85,0,0,6142,6143,5,498,0,0,6143,
        6145,5,499,0,0,6144,6142,1,0,0,0,6144,6145,1,0,0,0,6145,6152,1,0,
        0,0,6146,6149,5,82,0,0,6147,6148,5,498,0,0,6148,6150,5,499,0,0,6149,
        6147,1,0,0,0,6149,6150,1,0,0,0,6150,6152,1,0,0,0,6151,6129,1,0,0,
        0,6151,6132,1,0,0,0,6151,6135,1,0,0,0,6151,6138,1,0,0,0,6151,6141,
        1,0,0,0,6151,6146,1,0,0,0,6152,739,1,0,0,0,6153,6156,5,81,0,0,6154,
        6155,5,498,0,0,6155,6157,5,499,0,0,6156,6154,1,0,0,0,6156,6157,1,
        0,0,0,6157,6179,1,0,0,0,6158,6161,5,83,0,0,6159,6160,5,498,0,0,6160,
        6162,5,499,0,0,6161,6159,1,0,0,0,6161,6162,1,0,0,0,6162,6179,1,0,
        0,0,6163,6166,5,84,0,0,6164,6165,5,498,0,0,6165,6167,5,499,0,0,6166,
        6164,1,0,0,0,6166,6167,1,0,0,0,6167,6179,1,0,0,0,6168,6171,5,224,
        0,0,6169,6170,5,498,0,0,6170,6172,5,499,0,0,6171,6169,1,0,0,0,6171,
        6172,1,0,0,0,6172,6179,1,0,0,0,6173,6176,5,225,0,0,6174,6175,5,498,
        0,0,6175,6177,5,499,0,0,6176,6174,1,0,0,0,6176,6177,1,0,0,0,6177,
        6179,1,0,0,0,6178,6153,1,0,0,0,6178,6158,1,0,0,0,6178,6163,1,0,0,
        0,6178,6168,1,0,0,0,6178,6173,1,0,0,0,6179,741,1,0,0,0,6180,6181,
        5,51,0,0,6181,6182,5,498,0,0,6182,6183,3,710,355,0,6183,6184,5,499,
        0,0,6184,6322,1,0,0,0,6185,6186,5,92,0,0,6186,6187,5,498,0,0,6187,
        6188,3,710,355,0,6188,6189,5,499,0,0,6189,6322,1,0,0,0,6190,6191,
        5,174,0,0,6191,6192,5,498,0,0,6192,6193,3,710,355,0,6193,6194,5,
        499,0,0,6194,6322,1,0,0,0,6195,6196,5,177,0,0,6196,6205,5,498,0,
        0,6197,6202,3,710,355,0,6198,6199,5,500,0,0,6199,6201,3,710,355,
        0,6200,6198,1,0,0,0,6201,6204,1,0,0,0,6202,6200,1,0,0,0,6202,6203,
        1,0,0,0,6203,6206,1,0,0,0,6204,6202,1,0,0,0,6205,6197,1,0,0,0,6205,
        6206,1,0,0,0,6206,6207,1,0,0,0,6207,6322,5,499,0,0,6208,6209,5,216,
        0,0,6209,6210,5,498,0,0,6210,6211,3,710,355,0,6211,6212,5,500,0,
        0,6212,6213,3,710,355,0,6213,6214,5,499,0,0,6214,6322,1,0,0,0,6215,
        6216,5,219,0,0,6216,6217,5,498,0,0,6217,6218,3,710,355,0,6218,6219,
        5,500,0,0,6219,6220,3,710,355,0,6220,6221,5,499,0,0,6221,6322,1,
        0,0,0,6222,6223,5,243,0,0,6223,6224,5,498,0,0,6224,6225,3,710,355,
        0,6225,6226,5,499,0,0,6226,6322,1,0,0,0,6227,6228,5,246,0,0,6228,
        6229,5,498,0,0,6229,6230,3,710,355,0,6230,6231,5,500,0,0,6231,6232,
        3,710,355,0,6232,6233,5,499,0,0,6233,6322,1,0,0,0,6234,6235,5,249,
        0,0,6235,6236,5,498,0,0,6236,6237,3,710,355,0,6237,6238,5,499,0,
        0,6238,6322,1,0,0,0,6239,6240,5,309,0,0,6240,6241,5,498,0,0,6241,
        6242,3,710,355,0,6242,6243,5,499,0,0,6243,6322,1,0,0,0,6244,6245,
        5,322,0,0,6245,6246,5,498,0,0,6246,6247,3,710,355,0,6247,6248,5,
        500,0,0,6248,6249,3,710,355,0,6249,6250,5,499,0,0,6250,6322,1,0,
        0,0,6251,6252,5,328,0,0,6252,6261,5,498,0,0,6253,6258,3,710,355,
        0,6254,6255,5,500,0,0,6255,6257,3,710,355,0,6256,6254,1,0,0,0,6257,
        6260,1,0,0,0,6258,6256,1,0,0,0,6258,6259,1,0,0,0,6259,6262,1,0,0,
        0,6260,6258,1,0,0,0,6261,6253,1,0,0,0,6261,6262,1,0,0,0,6262,6263,
        1,0,0,0,6263,6322,5,499,0,0,6264,6265,5,341,0,0,6265,6266,5,498,
        0,0,6266,6267,3,710,355,0,6267,6268,5,500,0,0,6268,6269,3,710,355,
        0,6269,6270,5,499,0,0,6270,6322,1,0,0,0,6271,6272,5,342,0,0,6272,
        6273,5,498,0,0,6273,6274,3,710,355,0,6274,6275,5,500,0,0,6275,6276,
        3,710,355,0,6276,6277,5,499,0,0,6277,6322,1,0,0,0,6278,6279,5,359,
        0,0,6279,6280,5,498,0,0,6280,6281,3,710,355,0,6281,6282,5,499,0,
        0,6282,6322,1,0,0,0,6283,6284,5,403,0,0,6284,6285,5,498,0,0,6285,
        6286,3,836,418,0,6286,6287,5,500,0,0,6287,6288,3,710,355,0,6288,
        6289,5,500,0,0,6289,6290,3,710,355,0,6290,6291,5,499,0,0,6291,6322,
        1,0,0,0,6292,6293,5,404,0,0,6293,6294,5,498,0,0,6294,6295,3,836,
        418,0,6295,6296,5,500,0,0,6296,6297,3,710,355,0,6297,6298,5,500,
        0,0,6298,6299,3,710,355,0,6299,6300,5,499,0,0,6300,6322,1,0,0,0,
        6301,6302,5,449,0,0,6302,6303,5,498,0,0,6303,6304,3,710,355,0,6304,
        6305,5,499,0,0,6305,6322,1,0,0,0,6306,6307,5,281,0,0,6307,6308,5,
        498,0,0,6308,6309,3,822,411,0,6309,6310,5,499,0,0,6310,6322,1,0,
        0,0,6311,6312,5,145,0,0,6312,6313,5,498,0,0,6313,6314,3,710,355,
        0,6314,6315,5,499,0,0,6315,6322,1,0,0,0,6316,6317,5,49,0,0,6317,
        6318,5,498,0,0,6318,6319,3,710,355,0,6319,6320,5,499,0,0,6320,6322,
        1,0,0,0,6321,6180,1,0,0,0,6321,6185,1,0,0,0,6321,6190,1,0,0,0,6321,
        6195,1,0,0,0,6321,6208,1,0,0,0,6321,6215,1,0,0,0,6321,6222,1,0,0,
        0,6321,6227,1,0,0,0,6321,6234,1,0,0,0,6321,6239,1,0,0,0,6321,6244,
        1,0,0,0,6321,6251,1,0,0,0,6321,6264,1,0,0,0,6321,6271,1,0,0,0,6321,
        6278,1,0,0,0,6321,6283,1,0,0,0,6321,6292,1,0,0,0,6321,6301,1,0,0,
        0,6321,6306,1,0,0,0,6321,6311,1,0,0,0,6321,6316,1,0,0,0,6322,743,
        1,0,0,0,6323,6324,5,350,0,0,6324,6325,5,498,0,0,6325,6421,5,499,
        0,0,6326,6327,5,316,0,0,6327,6328,5,498,0,0,6328,6421,5,499,0,0,
        6329,6330,5,102,0,0,6330,6331,5,498,0,0,6331,6421,5,499,0,0,6332,
        6333,5,78,0,0,6333,6334,5,498,0,0,6334,6421,5,499,0,0,6335,6336,
        5,285,0,0,6336,6337,5,498,0,0,6337,6421,5,499,0,0,6338,6339,5,106,
        0,0,6339,6341,5,498,0,0,6340,6342,3,710,355,0,6341,6340,1,0,0,0,
        6341,6342,1,0,0,0,6342,6343,1,0,0,0,6343,6421,5,499,0,0,6344,6345,
        5,215,0,0,6345,6357,5,498,0,0,6346,6348,3,710,355,0,6347,6349,3,
        750,375,0,6348,6347,1,0,0,0,6348,6349,1,0,0,0,6349,6354,1,0,0,0,
        6350,6351,5,500,0,0,6351,6353,3,710,355,0,6352,6350,1,0,0,0,6353,
        6356,1,0,0,0,6354,6352,1,0,0,0,6354,6355,1,0,0,0,6355,6358,1,0,0,
        0,6356,6354,1,0,0,0,6357,6346,1,0,0,0,6357,6358,1,0,0,0,6358,6359,
        1,0,0,0,6359,6361,5,499,0,0,6360,6362,3,750,375,0,6361,6360,1,0,
        0,0,6361,6362,1,0,0,0,6362,6421,1,0,0,0,6363,6364,5,210,0,0,6364,
        6376,5,498,0,0,6365,6367,3,710,355,0,6366,6368,3,750,375,0,6367,
        6366,1,0,0,0,6367,6368,1,0,0,0,6368,6373,1,0,0,0,6369,6370,5,500,
        0,0,6370,6372,3,710,355,0,6371,6369,1,0,0,0,6372,6375,1,0,0,0,6373,
        6371,1,0,0,0,6373,6374,1,0,0,0,6374,6377,1,0,0,0,6375,6373,1,0,0,
        0,6376,6365,1,0,0,0,6376,6377,1,0,0,0,6377,6378,1,0,0,0,6378,6380,
        5,499,0,0,6379,6381,3,750,375,0,6380,6379,1,0,0,0,6380,6381,1,0,
        0,0,6381,6421,1,0,0,0,6382,6383,5,143,0,0,6383,6395,5,498,0,0,6384,
        6386,3,710,355,0,6385,6387,3,750,375,0,6386,6385,1,0,0,0,6386,6387,
        1,0,0,0,6387,6392,1,0,0,0,6388,6389,5,500,0,0,6389,6391,3,710,355,
        0,6390,6388,1,0,0,0,6391,6394,1,0,0,0,6392,6390,1,0,0,0,6392,6393,
        1,0,0,0,6393,6396,1,0,0,0,6394,6392,1,0,0,0,6395,6384,1,0,0,0,6395,
        6396,1,0,0,0,6396,6397,1,0,0,0,6397,6399,5,499,0,0,6398,6400,3,750,
        375,0,6399,6398,1,0,0,0,6399,6400,1,0,0,0,6400,6421,1,0,0,0,6401,
        6402,5,213,0,0,6402,6414,5,498,0,0,6403,6405,3,710,355,0,6404,6406,
        3,750,375,0,6405,6404,1,0,0,0,6405,6406,1,0,0,0,6406,6411,1,0,0,
        0,6407,6408,5,500,0,0,6408,6410,3,710,355,0,6409,6407,1,0,0,0,6410,
        6413,1,0,0,0,6411,6409,1,0,0,0,6411,6412,1,0,0,0,6412,6415,1,0,0,
        0,6413,6411,1,0,0,0,6414,6403,1,0,0,0,6414,6415,1,0,0,0,6415,6416,
        1,0,0,0,6416,6418,5,499,0,0,6417,6419,3,750,375,0,6418,6417,1,0,
        0,0,6418,6419,1,0,0,0,6419,6421,1,0,0,0,6420,6323,1,0,0,0,6420,6326,
        1,0,0,0,6420,6329,1,0,0,0,6420,6332,1,0,0,0,6420,6335,1,0,0,0,6420,
        6338,1,0,0,0,6420,6344,1,0,0,0,6420,6363,1,0,0,0,6420,6382,1,0,0,
        0,6420,6401,1,0,0,0,6421,745,1,0,0,0,6422,6423,5,443,0,0,6423,6424,
        3,710,355,0,6424,6425,5,399,0,0,6425,6426,3,710,355,0,6426,747,1,
        0,0,0,6427,6428,5,277,0,0,6428,6442,5,498,0,0,6429,6431,3,676,338,
        0,6430,6429,1,0,0,0,6430,6431,1,0,0,0,6431,6432,1,0,0,0,6432,6433,
        5,279,0,0,6433,6434,5,42,0,0,6434,6439,3,710,355,0,6435,6436,5,500,
        0,0,6436,6438,3,710,355,0,6437,6435,1,0,0,0,6438,6441,1,0,0,0,6439,
        6437,1,0,0,0,6439,6440,1,0,0,0,6440,6443,1,0,0,0,6441,6439,1,0,0,
        0,6442,6430,1,0,0,0,6442,6443,1,0,0,0,6443,6454,1,0,0,0,6444,6445,
        5,274,0,0,6445,6446,5,42,0,0,6446,6451,3,638,319,0,6447,6448,5,500,
        0,0,6448,6450,3,638,319,0,6449,6447,1,0,0,0,6450,6453,1,0,0,0,6451,
        6449,1,0,0,0,6451,6452,1,0,0,0,6452,6455,1,0,0,0,6453,6451,1,0,0,
        0,6454,6444,1,0,0,0,6454,6455,1,0,0,0,6455,6457,1,0,0,0,6456,6458,
        3,752,376,0,6457,6456,1,0,0,0,6457,6458,1,0,0,0,6458,6459,1,0,0,
        0,6459,6460,5,499,0,0,6460,749,1,0,0,0,6461,6462,5,180,0,0,6462,
        6463,5,260,0,0,6463,751,1,0,0,0,6464,6465,5,315,0,0,6465,6481,3,
        754,377,0,6466,6467,5,349,0,0,6467,6481,3,754,377,0,6468,6469,5,
        315,0,0,6469,6470,5,29,0,0,6470,6471,3,754,377,0,6471,6472,5,11,
        0,0,6472,6473,3,754,377,0,6473,6481,1,0,0,0,6474,6475,5,349,0,0,
        6475,6476,5,29,0,0,6476,6477,3,754,377,0,6477,6478,5,11,0,0,6478,
        6479,3,754,377,0,6479,6481,1,0,0,0,6480,6464,1,0,0,0,6480,6466,1,
        0,0,0,6480,6468,1,0,0,0,6480,6474,1,0,0,0,6481,753,1,0,0,0,6482,
        6483,5,415,0,0,6483,6492,5,295,0,0,6484,6485,5,415,0,0,6485,6492,
        5,147,0,0,6486,6487,5,80,0,0,6487,6492,5,348,0,0,6488,6489,3,710,
        355,0,6489,6490,7,40,0,0,6490,6492,1,0,0,0,6491,6482,1,0,0,0,6491,
        6484,1,0,0,0,6491,6486,1,0,0,0,6491,6488,1,0,0,0,6492,755,1,0,0,
        0,6493,6495,3,858,429,0,6494,6496,3,684,342,0,6495,6494,1,0,0,0,
        6495,6496,1,0,0,0,6496,757,1,0,0,0,6497,6499,3,858,429,0,6498,6500,
        3,684,342,0,6499,6498,1,0,0,0,6499,6500,1,0,0,0,6500,6503,1,0,0,
        0,6501,6502,5,17,0,0,6502,6504,3,860,430,0,6503,6501,1,0,0,0,6503,
        6504,1,0,0,0,6504,759,1,0,0,0,6505,6507,7,41,0,0,6506,6508,7,42,
        0,0,6507,6506,1,0,0,0,6507,6508,1,0,0,0,6508,761,1,0,0,0,6509,6510,
        5,408,0,0,6510,6512,7,43,0,0,6511,6513,3,860,430,0,6512,6511,1,0,
        0,0,6512,6513,1,0,0,0,6513,763,1,0,0,0,6514,6515,5,279,0,0,6515,
        6516,5,42,0,0,6516,6517,5,315,0,0,6517,6518,3,862,431,0,6518,6527,
        5,498,0,0,6519,6524,3,780,390,0,6520,6521,5,500,0,0,6521,6523,3,
        780,390,0,6522,6520,1,0,0,0,6523,6526,1,0,0,0,6524,6522,1,0,0,0,
        6524,6525,1,0,0,0,6525,6528,1,0,0,0,6526,6524,1,0,0,0,6527,6519,
        1,0,0,0,6527,6528,1,0,0,0,6528,6529,1,0,0,0,6529,6530,5,499,0,0,
        6530,6593,1,0,0,0,6531,6532,5,279,0,0,6532,6533,5,42,0,0,6533,6534,
        5,315,0,0,6534,6535,3,724,362,0,6535,6544,5,498,0,0,6536,6541,3,
        780,390,0,6537,6538,5,500,0,0,6538,6540,3,780,390,0,6539,6537,1,
        0,0,0,6540,6543,1,0,0,0,6541,6539,1,0,0,0,6541,6542,1,0,0,0,6542,
        6545,1,0,0,0,6543,6541,1,0,0,0,6544,6536,1,0,0,0,6544,6545,1,0,0,
        0,6545,6546,1,0,0,0,6546,6547,5,499,0,0,6547,6593,1,0,0,0,6548,6549,
        5,279,0,0,6549,6551,5,42,0,0,6550,6552,5,221,0,0,6551,6550,1,0,0,
        0,6551,6552,1,0,0,0,6552,6553,1,0,0,0,6553,6554,3,862,431,0,6554,
        6563,5,498,0,0,6555,6560,3,766,383,0,6556,6557,5,500,0,0,6557,6559,
        3,766,383,0,6558,6556,1,0,0,0,6559,6562,1,0,0,0,6560,6558,1,0,0,
        0,6560,6561,1,0,0,0,6561,6564,1,0,0,0,6562,6560,1,0,0,0,6563,6555,
        1,0,0,0,6563,6564,1,0,0,0,6564,6565,1,0,0,0,6565,6566,5,499,0,0,
        6566,6593,1,0,0,0,6567,6568,5,279,0,0,6568,6570,5,42,0,0,6569,6571,
        5,221,0,0,6570,6569,1,0,0,0,6570,6571,1,0,0,0,6571,6572,1,0,0,0,
        6572,6593,3,862,431,0,6573,6574,5,279,0,0,6574,6575,5,42,0,0,6575,
        6576,3,728,364,0,6576,6585,5,498,0,0,6577,6582,3,780,390,0,6578,
        6579,5,500,0,0,6579,6581,3,780,390,0,6580,6578,1,0,0,0,6581,6584,
        1,0,0,0,6582,6580,1,0,0,0,6582,6583,1,0,0,0,6583,6586,1,0,0,0,6584,
        6582,1,0,0,0,6585,6577,1,0,0,0,6585,6586,1,0,0,0,6586,6587,1,0,0,
        0,6587,6588,5,499,0,0,6588,6593,1,0,0,0,6589,6590,5,279,0,0,6590,
        6591,5,42,0,0,6591,6593,3,728,364,0,6592,6514,1,0,0,0,6592,6531,
        1,0,0,0,6592,6548,1,0,0,0,6592,6567,1,0,0,0,6592,6573,1,0,0,0,6592,
        6589,1,0,0,0,6593,765,1,0,0,0,6594,6597,3,768,384,0,6595,6597,3,
        770,385,0,6596,6594,1,0,0,0,6596,6595,1,0,0,0,6597,767,1,0,0,0,6598,
        6602,5,279,0,0,6599,6600,5,177,0,0,6600,6601,5,258,0,0,6601,6603,
        5,129,0,0,6602,6599,1,0,0,0,6602,6603,1,0,0,0,6603,6604,1,0,0,0,
        6604,6605,3,860,430,0,6605,6606,5,429,0,0,6606,6607,5,182,0,0,6607,
        6609,3,772,386,0,6608,6610,3,808,404,0,6609,6608,1,0,0,0,6609,6610,
        1,0,0,0,6610,769,1,0,0,0,6611,6615,5,279,0,0,6612,6613,5,177,0,0,
        6613,6614,5,258,0,0,6614,6616,5,129,0,0,6615,6612,1,0,0,0,6615,6616,
        1,0,0,0,6616,6617,1,0,0,0,6617,6618,3,860,430,0,6618,6619,5,429,
        0,0,6619,6620,5,182,0,0,6620,6621,5,498,0,0,6621,6626,3,772,386,
        0,6622,6623,5,500,0,0,6623,6625,3,772,386,0,6624,6622,1,0,0,0,6625,
        6628,1,0,0,0,6626,6624,1,0,0,0,6626,6627,1,0,0,0,6627,6629,1,0,0,
        0,6628,6626,1,0,0,0,6629,6631,5,499,0,0,6630,6632,3,808,404,0,6631,
        6630,1,0,0,0,6631,6632,1,0,0,0,6632,771,1,0,0,0,6633,6634,5,498,
        0,0,6634,6639,3,774,387,0,6635,6636,5,500,0,0,6636,6638,3,774,387,
        0,6637,6635,1,0,0,0,6638,6641,1,0,0,0,6639,6637,1,0,0,0,6639,6640,
        1,0,0,0,6640,6642,1,0,0,0,6641,6639,1,0,0,0,6642,6643,5,499,0,0,
        6643,773,1,0,0,0,6644,6647,5,259,0,0,6645,6647,3,822,411,0,6646,
        6644,1,0,0,0,6646,6645,1,0,0,0,6647,775,1,0,0,0,6648,6649,5,498,
        0,0,6649,6654,3,822,411,0,6650,6651,5,500,0,0,6651,6653,3,822,411,
        0,6652,6650,1,0,0,0,6653,6656,1,0,0,0,6654,6652,1,0,0,0,6654,6655,
        1,0,0,0,6655,6657,1,0,0,0,6656,6654,1,0,0,0,6657,6658,5,499,0,0,
        6658,777,1,0,0,0,6659,6660,5,498,0,0,6660,6665,3,726,363,0,6661,
        6662,5,500,0,0,6662,6664,3,726,363,0,6663,6661,1,0,0,0,6664,6667,
        1,0,0,0,6665,6663,1,0,0,0,6665,6666,1,0,0,0,6666,6668,1,0,0,0,6667,
        6665,1,0,0,0,6668,6669,5,499,0,0,6669,779,1,0,0,0,6670,6673,3,782,
        391,0,6671,6673,3,784,392,0,6672,6670,1,0,0,0,6672,6671,1,0,0,0,
        6673,781,1,0,0,0,6674,6678,5,279,0,0,6675,6676,5,177,0,0,6676,6677,
        5,258,0,0,6677,6679,5,129,0,0,6678,6675,1,0,0,0,6678,6679,1,0,0,
        0,6679,6680,1,0,0,0,6680,6681,3,860,430,0,6681,6682,5,429,0,0,6682,
        6684,3,788,394,0,6683,6685,3,808,404,0,6684,6683,1,0,0,0,6684,6685,
        1,0,0,0,6685,783,1,0,0,0,6686,6687,5,375,0,0,6687,6688,5,498,0,0,
        6688,6689,3,822,411,0,6689,6690,5,499,0,0,6690,6691,5,121,0,0,6691,
        6692,5,498,0,0,6692,6693,3,822,411,0,6693,6694,5,499,0,0,6694,6695,
        5,134,0,0,6695,6696,5,498,0,0,6696,6697,3,830,415,0,6697,6698,5,
        499,0,0,6698,6713,1,0,0,0,6699,6700,5,375,0,0,6700,6701,5,498,0,
        0,6701,6702,3,822,411,0,6702,6703,5,499,0,0,6703,6704,5,121,0,0,
        6704,6705,5,498,0,0,6705,6706,3,822,411,0,6706,6707,5,499,0,0,6707,
        6708,5,134,0,0,6708,6709,5,498,0,0,6709,6710,5,481,0,0,6710,6711,
        5,499,0,0,6711,6713,1,0,0,0,6712,6686,1,0,0,0,6712,6699,1,0,0,0,
        6713,785,1,0,0,0,6714,6715,5,375,0,0,6715,6716,5,498,0,0,6716,6717,
        3,822,411,0,6717,6718,5,499,0,0,6718,6719,5,121,0,0,6719,6720,5,
        498,0,0,6720,6721,3,822,411,0,6721,6722,5,499,0,0,6722,787,1,0,0,
        0,6723,6724,5,217,0,0,6724,6727,5,398,0,0,6725,6728,5,238,0,0,6726,
        6728,3,790,395,0,6727,6725,1,0,0,0,6727,6726,1,0,0,0,6728,6736,1,
        0,0,0,6729,6730,5,502,0,0,6730,6731,3,790,395,0,6731,6732,5,500,
        0,0,6732,6733,3,790,395,0,6733,6734,5,499,0,0,6734,6736,1,0,0,0,
        6735,6723,1,0,0,0,6735,6729,1,0,0,0,6736,789,1,0,0,0,6737,6738,5,
        498,0,0,6738,6743,3,794,397,0,6739,6740,5,500,0,0,6740,6742,3,794,
        397,0,6741,6739,1,0,0,0,6742,6745,1,0,0,0,6743,6741,1,0,0,0,6743,
        6744,1,0,0,0,6744,6746,1,0,0,0,6745,6743,1,0,0,0,6746,6747,5,499,
        0,0,6747,791,1,0,0,0,6748,6749,3,860,430,0,6749,6750,5,455,0,0,6750,
        6751,3,726,363,0,6751,793,1,0,0,0,6752,6755,5,238,0,0,6753,6755,
        3,822,411,0,6754,6752,1,0,0,0,6754,6753,1,0,0,0,6755,795,1,0,0,0,
        6756,6757,5,111,0,0,6757,6758,5,42,0,0,6758,6759,5,167,0,0,6759,
        6762,3,862,431,0,6760,6761,5,40,0,0,6761,6763,5,481,0,0,6762,6760,
        1,0,0,0,6762,6763,1,0,0,0,6763,6769,1,0,0,0,6764,6765,5,111,0,0,
        6765,6766,5,42,0,0,6766,6767,5,167,0,0,6767,6769,3,862,431,0,6768,
        6756,1,0,0,0,6768,6764,1,0,0,0,6769,797,1,0,0,0,6770,6771,5,111,
        0,0,6771,6772,5,42,0,0,6772,6773,5,167,0,0,6773,6776,3,862,431,0,
        6774,6775,5,40,0,0,6775,6777,5,481,0,0,6776,6774,1,0,0,0,6776,6777,
        1,0,0,0,6777,6790,1,0,0,0,6778,6779,5,111,0,0,6779,6780,5,42,0,0,
        6780,6781,5,167,0,0,6781,6790,3,862,431,0,6782,6783,5,111,0,0,6783,
        6784,5,42,0,0,6784,6787,5,314,0,0,6785,6786,5,40,0,0,6786,6788,5,
        481,0,0,6787,6785,1,0,0,0,6787,6788,1,0,0,0,6788,6790,1,0,0,0,6789,
        6770,1,0,0,0,6789,6778,1,0,0,0,6789,6782,1,0,0,0,6790,799,1,0,0,
        0,6791,6793,5,320,0,0,6792,6794,7,44,0,0,6793,6792,1,0,0,0,6793,
        6794,1,0,0,0,6794,6811,1,0,0,0,6795,6812,5,19,0,0,6796,6802,5,19,
        0,0,6797,6798,5,375,0,0,6798,6799,5,498,0,0,6799,6800,3,822,411,
        0,6800,6801,5,499,0,0,6801,6803,1,0,0,0,6802,6797,1,0,0,0,6802,6803,
        1,0,0,0,6803,6804,1,0,0,0,6804,6805,5,134,0,0,6805,6806,5,498,0,
        0,6806,6807,3,830,415,0,6807,6808,5,499,0,0,6808,6812,1,0,0,0,6809,
        6812,5,184,0,0,6810,6812,5,230,0,0,6811,6795,1,0,0,0,6811,6796,1,
        0,0,0,6811,6809,1,0,0,0,6811,6810,1,0,0,0,6812,801,1,0,0,0,6813,
        6814,7,45,0,0,6814,803,1,0,0,0,6815,6816,5,306,0,0,6816,6817,5,498,
        0,0,6817,6822,3,812,406,0,6818,6819,5,500,0,0,6819,6821,3,812,406,
        0,6820,6818,1,0,0,0,6821,6824,1,0,0,0,6822,6820,1,0,0,0,6822,6823,
        1,0,0,0,6823,6825,1,0,0,0,6824,6822,1,0,0,0,6825,6826,5,499,0,0,
        6826,805,1,0,0,0,6827,6828,5,39,0,0,6828,6829,3,804,402,0,6829,807,
        1,0,0,0,6830,6831,5,498,0,0,6831,6836,3,812,406,0,6832,6833,5,500,
        0,0,6833,6835,3,812,406,0,6834,6832,1,0,0,0,6835,6838,1,0,0,0,6836,
        6834,1,0,0,0,6836,6837,1,0,0,0,6837,6839,1,0,0,0,6838,6836,1,0,0,
        0,6839,6840,5,499,0,0,6840,809,1,0,0,0,6841,6846,3,812,406,0,6842,
        6843,5,500,0,0,6843,6845,3,812,406,0,6844,6842,1,0,0,0,6845,6848,
        1,0,0,0,6846,6844,1,0,0,0,6846,6847,1,0,0,0,6847,811,1,0,0,0,6848,
        6846,1,0,0,0,6849,6850,3,822,411,0,6850,6851,5,455,0,0,6851,6852,
        3,822,411,0,6852,813,1,0,0,0,6853,6854,7,46,0,0,6854,815,1,0,0,0,
        6855,6856,5,63,0,0,6856,6857,3,822,411,0,6857,817,1,0,0,0,6858,6859,
        5,198,0,0,6859,6860,5,276,0,0,6860,6862,3,822,411,0,6861,6863,3,
        820,410,0,6862,6861,1,0,0,0,6862,6863,1,0,0,0,6863,6865,1,0,0,0,
        6864,6866,3,804,402,0,6865,6864,1,0,0,0,6865,6866,1,0,0,0,6866,819,
        1,0,0,0,6867,6868,5,151,0,0,6868,6871,5,17,0,0,6869,6872,3,860,430,
        0,6870,6872,3,822,411,0,6871,6869,1,0,0,0,6871,6870,1,0,0,0,6872,
        821,1,0,0,0,6873,6874,7,47,0,0,6874,823,1,0,0,0,6875,6876,7,48,0,
        0,6876,825,1,0,0,0,6877,6878,7,49,0,0,6878,827,1,0,0,0,6879,6880,
        7,50,0,0,6880,829,1,0,0,0,6881,6882,5,197,0,0,6882,6883,3,710,355,
        0,6883,6884,3,836,418,0,6884,831,1,0,0,0,6885,6886,5,197,0,0,6886,
        6887,3,710,355,0,6887,6888,3,834,417,0,6888,833,1,0,0,0,6889,6890,
        7,51,0,0,6890,835,1,0,0,0,6891,6892,7,52,0,0,6892,837,1,0,0,0,6893,
        6894,7,53,0,0,6894,839,1,0,0,0,6895,6901,3,854,427,0,6896,6901,3,
        856,428,0,6897,6901,3,842,421,0,6898,6901,3,850,425,0,6899,6901,
        3,844,422,0,6900,6895,1,0,0,0,6900,6896,1,0,0,0,6900,6897,1,0,0,
        0,6900,6898,1,0,0,0,6900,6899,1,0,0,0,6901,841,1,0,0,0,6902,6903,
        5,14,0,0,6903,6904,5,457,0,0,6904,6905,3,840,420,0,6905,6906,5,459,
        0,0,6906,843,1,0,0,0,6907,6908,5,231,0,0,6908,6909,5,457,0,0,6909,
        6910,3,840,420,0,6910,6911,5,500,0,0,6911,6912,3,840,420,0,6912,
        6913,5,459,0,0,6913,845,1,0,0,0,6914,6917,3,860,430,0,6915,6917,
        3,286,143,0,6916,6914,1,0,0,0,6916,6915,1,0,0,0,6917,6918,1,0,0,
        0,6918,6919,3,840,420,0,6919,847,1,0,0,0,6920,6925,3,846,423,0,6921,
        6922,5,500,0,0,6922,6924,3,846,423,0,6923,6921,1,0,0,0,6924,6927,
        1,0,0,0,6925,6923,1,0,0,0,6925,6926,1,0,0,0,6926,849,1,0,0,0,6927,
        6925,1,0,0,0,6928,6929,5,390,0,0,6929,6930,5,457,0,0,6930,6931,3,
        848,424,0,6931,6932,5,459,0,0,6932,851,1,0,0,0,6933,6934,5,498,0,
        0,6934,6935,5,481,0,0,6935,6936,5,499,0,0,6936,853,1,0,0,0,6937,
        7006,5,37,0,0,6938,6940,5,405,0,0,6939,6941,3,852,426,0,6940,6939,
        1,0,0,0,6940,6941,1,0,0,0,6941,7006,1,0,0,0,6942,6944,5,372,0,0,
        6943,6945,3,852,426,0,6944,6943,1,0,0,0,6944,6945,1,0,0,0,6945,7006,
        1,0,0,0,6946,6948,5,369,0,0,6947,6949,5,191,0,0,6948,6947,1,0,0,
        0,6948,6949,1,0,0,0,6949,7006,1,0,0,0,6950,6952,5,369,0,0,6951,6953,
        5,192,0,0,6952,6951,1,0,0,0,6952,6953,1,0,0,0,6953,7006,1,0,0,0,
        6954,6956,5,421,0,0,6955,6957,5,191,0,0,6956,6955,1,0,0,0,6956,6957,
        1,0,0,0,6957,7006,1,0,0,0,6958,6960,5,421,0,0,6959,6961,5,192,0,
        0,6960,6959,1,0,0,0,6960,6961,1,0,0,0,6961,7006,1,0,0,0,6962,6964,
        5,191,0,0,6963,6965,3,852,426,0,6964,6963,1,0,0,0,6964,6965,1,0,
        0,0,6965,7006,1,0,0,0,6966,6968,5,192,0,0,6967,6969,3,852,426,0,
        6968,6967,1,0,0,0,6968,6969,1,0,0,0,6969,7006,1,0,0,0,6970,6972,
        5,30,0,0,6971,6973,3,852,426,0,6972,6971,1,0,0,0,6972,6973,1,0,0,
        0,6973,7006,1,0,0,0,6974,6976,5,211,0,0,6975,6977,3,852,426,0,6976,
        6975,1,0,0,0,6976,6977,1,0,0,0,6977,7006,1,0,0,0,6978,7006,5,144,
        0,0,6979,7006,5,113,0,0,6980,7006,5,90,0,0,6981,7006,5,91,0,0,6982,
        7006,5,400,0,0,6983,6985,5,51,0,0,6984,6986,3,852,426,0,6985,6984,
        1,0,0,0,6985,6986,1,0,0,0,6986,7006,1,0,0,0,6987,6989,5,431,0,0,
        6988,6990,3,852,426,0,6989,6988,1,0,0,0,6989,6990,1,0,0,0,6990,7006,
        1,0,0,0,6991,7006,5,381,0,0,6992,7006,5,382,0,0,6993,7006,5,32,0,
        0,6994,7006,5,171,0,0,6995,7006,5,286,0,0,6996,7006,5,205,0,0,6997,
        6999,5,430,0,0,6998,7000,3,852,426,0,6999,6998,1,0,0,0,6999,7000,
        1,0,0,0,7000,7006,1,0,0,0,7001,7003,5,31,0,0,7002,7004,3,852,426,
        0,7003,7002,1,0,0,0,7003,7004,1,0,0,0,7004,7006,1,0,0,0,7005,6937,
        1,0,0,0,7005,6938,1,0,0,0,7005,6942,1,0,0,0,7005,6946,1,0,0,0,7005,
        6950,1,0,0,0,7005,6954,1,0,0,0,7005,6958,1,0,0,0,7005,6962,1,0,0,
        0,7005,6966,1,0,0,0,7005,6970,1,0,0,0,7005,6974,1,0,0,0,7005,6978,
        1,0,0,0,7005,6979,1,0,0,0,7005,6980,1,0,0,0,7005,6981,1,0,0,0,7005,
        6982,1,0,0,0,7005,6983,1,0,0,0,7005,6987,1,0,0,0,7005,6991,1,0,0,
        0,7005,6992,1,0,0,0,7005,6993,1,0,0,0,7005,6994,1,0,0,0,7005,6995,
        1,0,0,0,7005,6996,1,0,0,0,7005,6997,1,0,0,0,7005,7001,1,0,0,0,7006,
        855,1,0,0,0,7007,7015,7,54,0,0,7008,7009,5,498,0,0,7009,7012,5,481,
        0,0,7010,7011,5,500,0,0,7011,7013,5,481,0,0,7012,7010,1,0,0,0,7012,
        7013,1,0,0,0,7013,7014,1,0,0,0,7014,7016,5,499,0,0,7015,7008,1,0,
        0,0,7015,7016,1,0,0,0,7016,857,1,0,0,0,7017,7023,3,860,430,0,7018,
        7022,5,491,0,0,7019,7020,5,501,0,0,7020,7022,3,860,430,0,7021,7018,
        1,0,0,0,7021,7019,1,0,0,0,7022,7025,1,0,0,0,7023,7021,1,0,0,0,7023,
        7024,1,0,0,0,7024,859,1,0,0,0,7025,7023,1,0,0,0,7026,7031,5,488,
        0,0,7027,7031,3,878,439,0,7028,7031,5,489,0,0,7029,7031,5,490,0,
        0,7030,7026,1,0,0,0,7030,7027,1,0,0,0,7030,7028,1,0,0,0,7030,7029,
        1,0,0,0,7031,861,1,0,0,0,7032,7033,5,498,0,0,7033,7038,3,860,430,
        0,7034,7035,5,500,0,0,7035,7037,3,860,430,0,7036,7034,1,0,0,0,7037,
        7040,1,0,0,0,7038,7036,1,0,0,0,7038,7039,1,0,0,0,7039,7041,1,0,0,
        0,7040,7038,1,0,0,0,7041,7042,5,499,0,0,7042,863,1,0,0,0,7043,7046,
        3,860,430,0,7044,7046,3,822,411,0,7045,7043,1,0,0,0,7045,7044,1,
        0,0,0,7046,865,1,0,0,0,7047,7052,3,864,432,0,7048,7049,5,500,0,0,
        7049,7051,3,864,432,0,7050,7048,1,0,0,0,7051,7054,1,0,0,0,7052,7050,
        1,0,0,0,7052,7053,1,0,0,0,7053,867,1,0,0,0,7054,7052,1,0,0,0,7055,
        7059,5,465,0,0,7056,7059,3,860,430,0,7057,7059,3,822,411,0,7058,
        7055,1,0,0,0,7058,7056,1,0,0,0,7058,7057,1,0,0,0,7059,869,1,0,0,
        0,7060,7072,3,864,432,0,7061,7062,3,864,432,0,7062,7063,5,480,0,
        0,7063,7064,3,864,432,0,7064,7072,1,0,0,0,7065,7066,3,864,432,0,
        7066,7067,5,480,0,0,7067,7068,5,502,0,0,7068,7069,3,864,432,0,7069,
        7070,5,503,0,0,7070,7072,1,0,0,0,7071,7060,1,0,0,0,7071,7061,1,0,
        0,0,7071,7065,1,0,0,0,7072,871,1,0,0,0,7073,7074,3,860,430,0,7074,
        7075,5,455,0,0,7075,7076,3,702,351,0,7076,873,1,0,0,0,7077,7082,
        3,872,436,0,7078,7079,5,500,0,0,7079,7081,3,872,436,0,7080,7078,
        1,0,0,0,7081,7084,1,0,0,0,7082,7080,1,0,0,0,7082,7083,1,0,0,0,7083,
        875,1,0,0,0,7084,7082,1,0,0,0,7085,7089,5,482,0,0,7086,7089,5,483,
        0,0,7087,7089,5,481,0,0,7088,7085,1,0,0,0,7088,7086,1,0,0,0,7088,
        7087,1,0,0,0,7089,877,1,0,0,0,7090,7091,7,55,0,0,7091,879,1,0,0,
        0,840,883,891,1098,1114,1120,1128,1130,1148,1155,1160,1164,1167,
        1170,1176,1181,1185,1208,1212,1218,1227,1234,1239,1242,1245,1248,
        1251,1254,1257,1260,1263,1266,1271,1274,1277,1282,1287,1290,1300,
        1312,1322,1324,1327,1334,1341,1344,1349,1353,1374,1382,1385,1388,
        1399,1404,1408,1414,1423,1430,1438,1441,1445,1448,1451,1454,1457,
        1460,1463,1470,1475,1479,1496,1509,1522,1525,1535,1537,1540,1553,
        1558,1564,1571,1577,1585,1591,1599,1605,1612,1618,1631,1636,1644,
        1648,1657,1660,1663,1671,1675,1684,1687,1690,1692,1697,1701,1707,
        1711,1714,1717,1729,1739,1745,1755,1759,1767,1771,1778,1787,1790,
        1793,1804,1810,1819,1824,1827,1841,1846,1855,1861,1866,1871,1878,
        1882,1888,1896,1909,1918,1925,1930,1933,1938,1951,1958,1964,1971,
        1983,1991,1999,2002,2007,2015,2037,2046,2055,2059,2066,2074,2092,
        2101,2104,2122,2135,2139,2152,2170,2176,2179,2194,2201,2214,2219,
        2247,2256,2261,2270,2275,2277,2283,2288,2301,2306,2312,2321,2334,
        2379,2403,2413,2417,2426,2442,2452,2463,2474,2485,2492,2499,2516,
        2531,2545,2560,2573,2575,2578,2599,2602,2605,2608,2611,2619,2623,
        2626,2636,2642,2645,2652,2655,2663,2667,2670,2683,2686,2694,2699,
        2703,2709,2711,2723,2726,2735,2739,2744,2747,2750,2754,2758,2761,
        2764,2766,2770,2775,2779,2791,2798,2805,2813,2823,2826,2831,2834,
        2843,2846,2849,2852,2861,2864,2867,2873,2877,2881,2889,2899,2902,
        2905,2910,2919,2927,2930,2933,2936,2948,2966,2971,2975,2991,3002,
        3013,3019,3027,3030,3034,3038,3047,3050,3053,3061,3073,3079,3087,
        3090,3094,3098,3107,3110,3113,3117,3127,3132,3137,3140,3157,3163,
        3168,3171,3184,3190,3194,3199,3204,3209,3219,3224,3227,3229,3238,
        3242,3249,3256,3276,3279,3287,3291,3300,3303,3312,3332,3346,3369,
        3374,3384,3386,3397,3401,3406,3427,3430,3435,3441,3445,3455,3458,
        3469,3472,3475,3481,3486,3492,3495,3499,3503,3509,3514,3516,3521,
        3531,3540,3546,3552,3558,3561,3564,3567,3574,3578,3582,3589,3595,
        3599,3603,3605,3611,3616,3621,3626,3633,3639,3641,3647,3652,3656,
        3660,3669,3672,3675,3682,3686,3689,3696,3702,3706,3714,3718,3740,
        3746,3754,3760,3768,3774,3780,3808,3816,3821,3827,3834,3838,3845,
        3855,3859,3868,3871,3874,3876,3882,3886,3890,3895,3901,3907,3911,
        3915,3922,3927,3937,3941,3946,3952,3960,3969,3977,3979,3991,3993,
        4001,4008,4012,4018,4030,4041,4051,4057,4067,4080,4085,4093,4099,
        4104,4115,4123,4134,4140,4149,4160,4172,4185,4192,4194,4205,4222,
        4255,4260,4268,4276,4281,4289,4291,4296,4303,4318,4326,4331,4353,
        4370,4385,4404,4418,4423,4427,4433,4439,4453,4458,4462,4468,4474,
        4478,4486,4491,4498,4505,4522,4539,4550,4569,4574,4578,4600,4607,
        4610,4616,4623,4626,4629,4635,4641,4647,4653,4662,4665,4668,4675,
        4686,4695,4703,4711,4720,4733,4752,4761,4764,4767,4775,4783,4787,
        4792,4797,4799,4809,4821,4828,4839,4843,4855,4861,4874,4880,4886,
        4895,4909,4913,4917,4921,4924,4927,4930,4934,4938,4941,4944,4947,
        4956,4961,4965,4968,4974,4977,4980,4984,4988,4991,5001,5012,5015,
        5018,5051,5056,5061,5067,5070,5072,5085,5089,5095,5101,5105,5112,
        5118,5123,5127,5134,5139,5141,5145,5150,5156,5167,5173,5177,5183,
        5190,5201,5205,5207,5214,5219,5224,5231,5239,5244,5248,5251,5254,
        5257,5260,5263,5266,5275,5280,5284,5286,5290,5294,5296,5303,5307,
        5309,5319,5323,5325,5330,5334,5336,5342,5351,5357,5366,5374,5378,
        5380,5384,5387,5391,5393,5399,5402,5406,5410,5413,5418,5426,5455,
        5463,5475,5490,5495,5503,5509,5518,5524,5529,5538,5550,5562,5574,
        5577,5590,5601,5608,5615,5627,5632,5640,5642,5650,5659,5672,5674,
        5679,5682,5690,5694,5702,5710,5718,5726,5730,5759,5761,5813,5817,
        5825,5829,5834,5838,5844,5851,5856,5865,5869,5876,5884,5890,5900,
        5904,5910,5912,5925,5941,5944,5954,5957,5965,5977,5980,5984,5986,
        5991,5999,6006,6008,6015,6018,6024,6032,6040,6048,6058,6061,6075,
        6078,6085,6092,6102,6105,6109,6113,6123,6144,6149,6151,6156,6161,
        6166,6171,6176,6178,6202,6205,6258,6261,6321,6341,6348,6354,6357,
        6361,6367,6373,6376,6380,6386,6392,6395,6399,6405,6411,6414,6418,
        6420,6430,6439,6442,6451,6454,6457,6480,6491,6495,6499,6503,6507,
        6512,6524,6527,6541,6544,6551,6560,6563,6570,6582,6585,6592,6596,
        6602,6609,6615,6626,6631,6639,6646,6654,6665,6672,6678,6684,6712,
        6727,6735,6743,6754,6762,6768,6776,6787,6789,6793,6802,6811,6822,
        6836,6846,6862,6865,6871,6900,6916,6925,6940,6944,6948,6952,6956,
        6960,6964,6968,6972,6976,6985,6989,6999,7003,7005,7012,7015,7021,
        7023,7030,7038,7045,7052,7058,7071,7082,7088
    ]

class StarRocksParser ( Parser ):

    grammarFileName = "StarRocksParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'ACCESS'", "'ACTIVE'", "'ADD'", 
                     "'ADMIN'", "'AFTER'", "'AGGREGATE'", "'ALL'", "'ALTER'", 
                     "'ANALYZE'", "'AND'", "'ANTI'", "'APPLY'", "'ARRAY'", 
                     "'ARRAY_AGG'", "'ARRAY_AGG_DISTINCT'", "'AS'", "'ASC'", 
                     "'ASYNC'", "'AUTHORS'", "'AUTHENTICATION'", "'AUTO_INCREMENT'", 
                     "'AVG'", "'BACKEND'", "'BACKENDS'", "'BACKUP'", "'BASE'", 
                     "'BEGIN'", "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BITMAP'", 
                     "'BITMAP_UNION'", "'BLACKHOLE'", "'BLACKLIST'", "'BODY'", 
                     "'BOOLEAN'", "'BOTH'", "'BROKER'", "'BUCKETS'", "'BUILTIN'", 
                     "'BY'", "'CACHE'", "'CANCEL'", "'CASE'", "'CAST'", 
                     "'CATALOG'", "'CATALOGS'", "'CEIL'", "'CHAIN'", "'CHAR'", 
                     "'CHARACTER'", "'CHARSET'", "'CHECK'", "'CLEAN'", "'CLEAR'", 
                     "'CLUSTER'", "'CLUSTERS'", "'COLLATE'", "'COLLATION'", 
                     "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
                     "'COMPACT'", "'COMPACTION'", "'COMPUTE'", "'CONFIG'", 
                     "'CONNECTION'", "'CONSISTENT'", "'CONVERT'", "'COSTS'", 
                     "'COUNT'", "'CREATE'", "'CROSS'", "'CUBE'", "'CUME_DIST'", 
                     "'CUMULATIVE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATACACHE'", "'DATABASE'", "'DATABASES'", 
                     "'DATE'", "'DATETIME'", "'DAY'", "'DEALLOCATE'", "'DECIMAL'", 
                     "'DECIMALV2'", "'DECIMAL32'", "'DECIMAL64'", "'DECIMAL128'", 
                     "'DECOMMISSION'", "'DEFAULT'", "'DELETE'", "'DENSE_RANK'", 
                     "'DEFERRED'", "'DICTIONARY'", "'DICTIONARY_GET'", "'NTILE'", 
                     "'DESC'", "'DESCRIBE'", "'DISABLE'", "'DISTINCT'", 
                     "'DISTRIBUTED'", "'DISTRIBUTION'", "'DOUBLE'", "'DROP'", 
                     "'DUAL'", "'DUPLICATE'", "'DYNAMIC'", "'ELSE'", "'ENABLE'", 
                     "'ENCLOSE'", "'END'", "'ENGINE'", "'ENGINES'", "'ERRORS'", 
                     "'ESCAPE'", "'EVENTS'", "'EXCEPT'", "'EXECUTE'", "'EXISTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXTERNAL'", "'EXTRACT'", 
                     "'EVERY'", "'FAILPOINT'", "'FAILPOINTS'", "'FALSE'", 
                     "'FIELDS'", "'FILE'", "'FILES'", "'FILTER'", "'FIRST'", 
                     "'FIRST_VALUE'", "'FLOAT'", "'FLOOR'", "'FN'", "'FOLLOWING'", 
                     "'FOLLOWER'", "'FOR'", "'FORCE'", "'FORMAT'", "'FREE'", 
                     "'FROM'", "'FRONTEND'", "'FRONTENDS'", "'FULL'", "'FUNCTION'", 
                     "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", "'GRANTS'", "'GROUP'", 
                     "'GROUPS'", "'GROUPING'", "'GROUPING_ID'", "'GROUP_CONCAT'", 
                     "'HASH'", "'HAVING'", "'HELP'", "'HISTOGRAM'", "'HLL'", 
                     "'HLL_UNION'", "'HOST'", "'HOUR'", "'HUB'", "'IDENTIFIED'", 
                     "'IF'", "'IMPERSONATE'", "'IMMEDIATE'", "'IGNORE'", 
                     "'IMAGE'", "'IN'", "'INACTIVE'", "'INCREMENTAL'", "'INDEX'", 
                     "'INDEXES'", "'INFILE'", "'INNER'", "'INSTALL'", "'INSERT'", 
                     "'INT'", "'INTEGER'", "'INTEGRATION'", "'INTEGRATIONS'", 
                     "'INTERMEDIATE'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
                     "'GIN'", "'OVERWRITE'", "'IS'", "'ISOLATION'", "'JOB'", 
                     "'JOIN'", "'JSON'", "'KEY'", "'KEYS'", "'KILL'", "'LABEL'", 
                     "'LAG'", "'LARGEINT'", "'LAST'", "'LAST_VALUE'", "'LATERAL'", 
                     "'LEAD'", "'LEFT'", "'LESS'", "'LEVEL'", "'LIKE'", 
                     "'LIMIT'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCALTIME'", 
                     "'LOCALTIMESTAMP'", "'LOCATION'", "'LOCATIONS'", "'LOGS'", 
                     "'LOGICAL'", "'MANUAL'", "'MAP'", "'MAPPING'", "'MAPPINGS'", 
                     "'MASKING'", "'MATCH'", "'MATERIALIZED'", "'MAX'", 
                     "'MAXVALUE'", "'MERGE'", "'MICROSECOND'", "'MILLISECOND'", 
                     "'MIN'", "'MINUTE'", "'MINUS'", "'META'", "'MOD'", 
                     "'MODE'", "'MODIFY'", "'MONTH'", "'NAME'", "'NAMES'", 
                     "'NEGATIVE'", "'NGRAMBF'", "'NO'", "'NODE'", "'NODES'", 
                     "'NONE'", "'NOT'", "'NULL'", "'NULLS'", "'NUMBER'", 
                     "'NUMERIC'", "'OBSERVER'", "'OF'", "'OFFSET'", "'ON'", 
                     "'ONLY'", "'OPEN'", "'OPERATE'", "'OPTIMIZE'", "'OPTIMIZER'", 
                     "'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OUTFILE'", 
                     "'OVER'", "'?'", "'PARTITION'", "'PARTITIONS'", "'PASSWORD'", 
                     "'PATH'", "'PAUSE'", "'PENDING'", "'PERCENT_RANK'", 
                     "'PERCENTILE'", "'PERCENTILE_UNION'", "'PLUGIN'", "'PLUGINS'", 
                     "'PIPE'", "'PIPES'", "'PIVOT'", "'POLICY'", "'POLICIES'", 
                     "'PRECEDING'", "'PREPARE'", "'PRIMARY'", "'PRIORITY'", 
                     "'PRIVILEGES'", "'PROBABILITY'", "'PROC'", "'PROCEDURE'", 
                     "'PROCESSLIST'", "'PROFILE'", "'PROFILELIST'", "'PROPERTIES'", 
                     "'PROPERTY'", "'QUALIFY'", "'QUARTER'", "'QUERY'", 
                     "'QUERIES'", "'QUEUE'", "'QUOTA'", "'RANDOM'", "'RANGE'", 
                     "'RANK'", "'READ'", "'REASON'", "'RECOVER'", "'REFRESH'", 
                     "'REWRITE'", "'REGEXP'", "'RELEASE'", "'REMOVE'", "'RENAME'", 
                     "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'REPLACE_IF_NOT_NULL'", 
                     "'REPLICA'", "'REPOSITORY'", "'REPOSITORIES'", "'RESOURCE'", 
                     "'RESOURCES'", "'RESTORE'", "'RESUME'", "'RETURNS'", 
                     "'RETRY'", "'REVOKE'", "'REVERT'", "'RIGHT'", "'RLIKE'", 
                     "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROUTINE'", 
                     "'ROW'", "'ROWS'", "'ROW_NUMBER'", "'RULE'", "'RULES'", 
                     "'RUNNING'", "'SAMPLE'", "'SCHEDULE'", "'SCHEDULER'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", 
                     "'SELECT'", "'SEMI'", "'SEPARATOR'", "'SERIALIZABLE'", 
                     "'SESSION'", "'SET'", "'SETS'", "'SET_VAR'", "'SIGNED'", 
                     "'SKIP_HEADER'", "'SHOW'", "'SMALLINT'", "'SNAPSHOT'", 
                     "'SQLBLACKLIST'", "'START'", "'STATS'", "'STATUS'", 
                     "'STOP'", "'STORAGE'", "'STREAM'", "'STRING'", "'TEXT'", 
                     "'SUBMIT'", "'SUM'", "'SUSPEND'", "'SYNC'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SWAP'", "'STRUCT'", "'TABLE'", "'TABLES'", 
                     "'TABLET'", "'TABLETS'", "'TASK'", "'TEMPORARY'", "'TERMINATED'", 
                     "'THAN'", "'THEN'", "'TIME'", "'TIMES'", "'TIMESTAMP'", 
                     "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TRANSACTION'", 
                     "'TO'", "'TRACE'", "'TRIGGERS'", "'TRIM_SPACE'", "'TRUE'", 
                     "'TRUNCATE'", "'TYPE'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNION'", "'UNIQUE'", "'UNINSTALL'", "'UNSET'", "'UNSIGNED'", 
                     "'UPDATE'", "'USAGE'", "'USE'", "'USER'", "'USERS'", 
                     "'USING'", "'VALUE'", "'VALUES'", "'VARBINARY'", "'VARCHAR'", 
                     "'VARIABLES'", "'VERBOSE'", "'VERSION'", "'VIEW'", 
                     "'VIEWS'", "'VOLUME'", "'VOLUMES'", "'WAREHOUSE'", 
                     "'WAREHOUSES'", "'WARNINGS'", "'WEEK'", "'WHEN'", "'WHERE'", 
                     "'WHITELIST'", "'WITH'", "'WORK'", "'WRITE'", "'YEAR'", 
                     "'LOCK'", "'UNLOCK'", "'LOW_PRIORITY'", "'DISK'", "'FIELD'", 
                     "'='", "<INVALID>", "'<'", "'<='", "'>'", "'>='", "'<=>'", 
                     "'[*]'", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", 
                     "'&&'", "'!'", "'DIV'", "'&'", "'|'", "'^'", "'~'", 
                     "'BITSHIFTLEFT'", "'BITSHIFTRIGHT'", "'BITSHIFTRIGHTLOGICAL'", 
                     "'->'", "'@'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "'...'", 
                     "':'", "'('", "')'", "','", "'.'", "'['", "']'", "'{'", 
                     "'}'" ]

    symbolicNames = [ "<INVALID>", "CONCAT", "ACCESS", "ACTIVE", "ADD", 
                      "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALTER", "ANALYZE", 
                      "AND", "ANTI", "APPLY", "ARRAY", "ARRAY_AGG", "ARRAY_AGG_DISTINCT", 
                      "AS", "ASC", "ASYNC", "AUTHORS", "AUTHENTICATION", 
                      "AUTO_INCREMENT", "AVG", "BACKEND", "BACKENDS", "BACKUP", 
                      "BASE", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BITMAP", 
                      "BITMAP_UNION", "BLACKHOLE", "BLACKLIST", "BODY", 
                      "BOOLEAN", "BOTH", "BROKER", "BUCKETS", "BUILTIN", 
                      "BY", "CACHE", "CANCEL", "CASE", "CAST", "CATALOG", 
                      "CATALOGS", "CEIL", "CHAIN", "CHAR", "CHARACTER", 
                      "CHARSET", "CHECK", "CLEAN", "CLEAR", "CLUSTER", "CLUSTERS", 
                      "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", 
                      "COMMIT", "COMMITTED", "COMPACT", "COMPACTION", "COMPUTE", 
                      "CONFIG", "CONNECTION", "CONSISTENT", "CONVERT", "COSTS", 
                      "COUNT", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CUMULATIVE", 
                      "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATACACHE", 
                      "DATABASE", "DATABASES", "DATE", "DATETIME", "DAY", 
                      "DEALLOCATE", "DECIMAL", "DECIMALV2", "DECIMAL32", 
                      "DECIMAL64", "DECIMAL128", "DECOMMISSION", "DEFAULT", 
                      "DELETE", "DENSE_RANK", "DEFERRED", "DICTIONARY", 
                      "DICTIONARY_GET", "NTILE", "DESC", "DESCRIBE", "DISABLE", 
                      "DISTINCT", "DISTRIBUTED", "DISTRIBUTION", "DOUBLE", 
                      "DROP", "DUAL", "DUPLICATE", "DYNAMIC", "ELSE", "ENABLE", 
                      "ENCLOSE", "END", "ENGINE", "ENGINES", "ERRORS", "ESCAPE", 
                      "EVENTS", "EXCEPT", "EXECUTE", "EXISTS", "EXPLAIN", 
                      "EXPORT", "EXTERNAL", "EXTRACT", "EVERY", "FAILPOINT", 
                      "FAILPOINTS", "FALSE", "FIELDS", "FILE", "FILES", 
                      "FILTER", "FIRST", "FIRST_VALUE", "FLOAT", "FLOOR", 
                      "FN", "FOLLOWING", "FOLLOWER", "FOR", "FORCE", "FORMAT", 
                      "FREE", "FROM", "FRONTEND", "FRONTENDS", "FULL", "FUNCTION", 
                      "FUNCTIONS", "GLOBAL", "GRANT", "GRANTS", "GROUP", 
                      "GROUPS", "GROUPING", "GROUPING_ID", "GROUP_CONCAT", 
                      "HASH", "HAVING", "HELP", "HISTOGRAM", "HLL", "HLL_UNION", 
                      "HOST", "HOUR", "HUB", "IDENTIFIED", "IF", "IMPERSONATE", 
                      "IMMEDIATE", "IGNORE", "IMAGE", "IN", "INACTIVE", 
                      "INCREMENTAL", "INDEX", "INDEXES", "INFILE", "INNER", 
                      "INSTALL", "INSERT", "INT", "INTEGER", "INTEGRATION", 
                      "INTEGRATIONS", "INTERMEDIATE", "INTERSECT", "INTERVAL", 
                      "INTO", "GIN", "OVERWRITE", "IS", "ISOLATION", "JOB", 
                      "JOIN", "JSON", "KEY", "KEYS", "KILL", "LABEL", "LAG", 
                      "LARGEINT", "LAST", "LAST_VALUE", "LATERAL", "LEAD", 
                      "LEFT", "LESS", "LEVEL", "LIKE", "LIMIT", "LIST", 
                      "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", 
                      "LOCATIONS", "LOGS", "LOGICAL", "MANUAL", "MAP", "MAPPING", 
                      "MAPPINGS", "MASKING", "MATCH", "MATERIALIZED", "MAX", 
                      "MAXVALUE", "MERGE", "MICROSECOND", "MILLISECOND", 
                      "MIN", "MINUTE", "MINUS", "META", "MOD", "MODE", "MODIFY", 
                      "MONTH", "NAME", "NAMES", "NEGATIVE", "NGRAMBF", "NO", 
                      "NODE", "NODES", "NONE", "NOT", "NULL_", "NULLS", 
                      "NUMBER", "NUMERIC", "OBSERVER", "OF", "OFFSET", "ON", 
                      "ONLY", "OPEN", "OPERATE", "OPTIMIZE", "OPTIMIZER", 
                      "OPTION", "OR", "ORDER", "OUTER", "OUTFILE", "OVER", 
                      "PARAMETER", "PARTITION", "PARTITIONS", "PASSWORD", 
                      "PATH", "PAUSE", "PENDING", "PERCENT_RANK", "PERCENTILE", 
                      "PERCENTILE_UNION", "PLUGIN", "PLUGINS", "PIPE", "PIPES", 
                      "PIVOT", "POLICY", "POLICIES", "PRECEDING", "PREPARE", 
                      "PRIMARY", "PRIORITY", "PRIVILEGES", "PROBABILITY", 
                      "PROC", "PROCEDURE", "PROCESSLIST", "PROFILE", "PROFILELIST", 
                      "PROPERTIES", "PROPERTY", "QUALIFY", "QUARTER", "QUERY", 
                      "QUERIES", "QUEUE", "QUOTA", "RANDOM", "RANGE", "RANK", 
                      "READ", "REASON", "RECOVER", "REFRESH", "REWRITE", 
                      "REGEXP", "RELEASE", "REMOVE", "RENAME", "REPAIR", 
                      "REPEATABLE", "REPLACE", "REPLACE_IF_NOT_NULL", "REPLICA", 
                      "REPOSITORY", "REPOSITORIES", "RESOURCE", "RESOURCES", 
                      "RESTORE", "RESUME", "RETURNS", "RETRY", "REVOKE", 
                      "REVERT", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", 
                      "ROLLUP", "ROUTINE", "ROW", "ROWS", "ROW_NUMBER", 
                      "RULE", "RULES", "RUNNING", "SAMPLE", "SCHEDULE", 
                      "SCHEDULER", "SCHEMA", "SCHEMAS", "SECOND", "SECURITY", 
                      "SELECT", "SEMI", "SEPARATOR", "SERIALIZABLE", "SESSION", 
                      "SET", "SETS", "SET_VAR", "SIGNED", "SKIP_HEADER", 
                      "SHOW", "SMALLINT", "SNAPSHOT", "SQLBLACKLIST", "START", 
                      "STATS", "STATUS", "STOP", "STORAGE", "STREAM", "STRING", 
                      "TEXT", "SUBMIT", "SUM", "SUSPEND", "SYNC", "SYSTEM", 
                      "SYSTEM_TIME", "SWAP", "STRUCT", "TABLE", "TABLES", 
                      "TABLET", "TABLETS", "TASK", "TEMPORARY", "TERMINATED", 
                      "THAN", "THEN", "TIME", "TIMES", "TIMESTAMP", "TIMESTAMPADD", 
                      "TIMESTAMPDIFF", "TINYINT", "TRANSACTION", "TO", "TRACE", 
                      "TRIGGERS", "TRIM_SPACE", "TRUE", "TRUNCATE", "TYPE", 
                      "TYPES", "UNBOUNDED", "UNCOMMITTED", "UNION", "UNIQUE", 
                      "UNINSTALL", "UNSET", "UNSIGNED", "UPDATE", "USAGE", 
                      "USE", "USER", "USERS", "USING", "VALUE", "VALUES", 
                      "VARBINARY", "VARCHAR", "VARIABLES", "VERBOSE", "VERSION", 
                      "VIEW", "VIEWS", "VOLUME", "VOLUMES", "WAREHOUSE", 
                      "WAREHOUSES", "WARNINGS", "WEEK", "WHEN", "WHERE", 
                      "WHITELIST", "WITH", "WORK", "WRITE", "YEAR", "LOCK", 
                      "UNLOCK", "LOW_PRIORITY", "DISK", "FIELD", "EQ", "NEQ", 
                      "LT", "LTE", "GT", "GTE", "EQ_FOR_NULL", "ARRAY_ELEMENT", 
                      "PLUS_SYMBOL", "MINUS_SYMBOL", "ASTERISK_SYMBOL", 
                      "SLASH_SYMBOL", "PERCENT_SYMBOL", "LOGICAL_OR", "LOGICAL_AND", 
                      "LOGICAL_NOT", "INT_DIV", "BITAND", "BITOR", "BITXOR", 
                      "BITNOT", "BIT_SHIFT_LEFT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_LOGICAL", 
                      "ARROW", "AT", "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", 
                      "SINGLE_QUOTED_TEXT", "DOUBLE_QUOTED_TEXT", "BINARY_SINGLE_QUOTED_TEXT", 
                      "BINARY_DOUBLE_QUOTED_TEXT", "LETTER_IDENTIFIER", 
                      "DIGIT_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "DOT_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "OPTIMIZER_HINT", 
                      "SEMICOLON", "DOTDOTDOT", "COLON", "LEFT_PAREN", "RIGHT_PAREN", 
                      "COMMA", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", 
                      "RIGHT_BRACE", "WS" ]

    RULE_sqlStatements = 0
    RULE_singleStatement = 1
    RULE_emptyStatement = 2
    RULE_statement = 3
    RULE_useDatabaseStatement = 4
    RULE_useCatalogStatement = 5
    RULE_setCatalogStatement = 6
    RULE_showDatabasesStatement = 7
    RULE_alterDbQuotaStatement = 8
    RULE_createDbStatement = 9
    RULE_dropDbStatement = 10
    RULE_showCreateDbStatement = 11
    RULE_alterDatabaseRenameStatement = 12
    RULE_recoverDbStmt = 13
    RULE_showDataStmt = 14
    RULE_createTableStatement = 15
    RULE_columnDesc = 16
    RULE_charsetName = 17
    RULE_defaultDesc = 18
    RULE_generatedColumnDesc = 19
    RULE_indexDesc = 20
    RULE_engineDesc = 21
    RULE_charsetDesc = 22
    RULE_collateDesc = 23
    RULE_keyDesc = 24
    RULE_orderByDesc = 25
    RULE_aggDesc = 26
    RULE_rollupDesc = 27
    RULE_rollupItem = 28
    RULE_dupKeys = 29
    RULE_fromRollup = 30
    RULE_orReplace = 31
    RULE_ifNotExists = 32
    RULE_createTableAsSelectStatement = 33
    RULE_dropTableStatement = 34
    RULE_cleanTemporaryTableStatement = 35
    RULE_alterTableStatement = 36
    RULE_createIndexStatement = 37
    RULE_dropIndexStatement = 38
    RULE_indexType = 39
    RULE_showTableStatement = 40
    RULE_showTemporaryTablesStatement = 41
    RULE_showCreateTableStatement = 42
    RULE_showColumnStatement = 43
    RULE_showTableStatusStatement = 44
    RULE_refreshTableStatement = 45
    RULE_showAlterStatement = 46
    RULE_descTableStatement = 47
    RULE_createTableLikeStatement = 48
    RULE_showIndexStatement = 49
    RULE_recoverTableStatement = 50
    RULE_truncateTableStatement = 51
    RULE_cancelAlterTableStatement = 52
    RULE_showPartitionsStatement = 53
    RULE_recoverPartitionStatement = 54
    RULE_createViewStatement = 55
    RULE_alterViewStatement = 56
    RULE_dropViewStatement = 57
    RULE_columnNameWithComment = 58
    RULE_submitTaskStatement = 59
    RULE_taskClause = 60
    RULE_dropTaskStatement = 61
    RULE_taskScheduleDesc = 62
    RULE_createMaterializedViewStatement = 63
    RULE_materializedViewDesc = 64
    RULE_showMaterializedViewsStatement = 65
    RULE_dropMaterializedViewStatement = 66
    RULE_alterMaterializedViewStatement = 67
    RULE_refreshMaterializedViewStatement = 68
    RULE_cancelRefreshMaterializedViewStatement = 69
    RULE_adminSetConfigStatement = 70
    RULE_adminSetReplicaStatusStatement = 71
    RULE_adminShowConfigStatement = 72
    RULE_adminShowReplicaDistributionStatement = 73
    RULE_adminShowReplicaStatusStatement = 74
    RULE_adminRepairTableStatement = 75
    RULE_adminCancelRepairTableStatement = 76
    RULE_adminCheckTabletsStatement = 77
    RULE_adminSetPartitionVersion = 78
    RULE_killStatement = 79
    RULE_syncStatement = 80
    RULE_alterSystemStatement = 81
    RULE_cancelAlterSystemStatement = 82
    RULE_showComputeNodesStatement = 83
    RULE_createExternalCatalogStatement = 84
    RULE_showCreateExternalCatalogStatement = 85
    RULE_dropExternalCatalogStatement = 86
    RULE_showCatalogsStatement = 87
    RULE_alterCatalogStatement = 88
    RULE_createStorageVolumeStatement = 89
    RULE_typeDesc = 90
    RULE_locationsDesc = 91
    RULE_showStorageVolumesStatement = 92
    RULE_dropStorageVolumeStatement = 93
    RULE_alterStorageVolumeStatement = 94
    RULE_alterStorageVolumeClause = 95
    RULE_modifyStorageVolumePropertiesClause = 96
    RULE_modifyStorageVolumeCommentClause = 97
    RULE_descStorageVolumeStatement = 98
    RULE_setDefaultStorageVolumeStatement = 99
    RULE_updateFailPointStatusStatement = 100
    RULE_showFailPointStatement = 101
    RULE_createDictionaryStatement = 102
    RULE_dropDictionaryStatement = 103
    RULE_refreshDictionaryStatement = 104
    RULE_showDictionaryStatement = 105
    RULE_cancelRefreshDictionaryStatement = 106
    RULE_dictionaryColumnDesc = 107
    RULE_dictionaryName = 108
    RULE_alterClause = 109
    RULE_addFrontendClause = 110
    RULE_dropFrontendClause = 111
    RULE_modifyFrontendHostClause = 112
    RULE_addBackendClause = 113
    RULE_dropBackendClause = 114
    RULE_decommissionBackendClause = 115
    RULE_modifyBackendClause = 116
    RULE_addComputeNodeClause = 117
    RULE_dropComputeNodeClause = 118
    RULE_modifyBrokerClause = 119
    RULE_alterLoadErrorUrlClause = 120
    RULE_createImageClause = 121
    RULE_cleanTabletSchedQClause = 122
    RULE_decommissionDiskClause = 123
    RULE_cancelDecommissionDiskClause = 124
    RULE_disableDiskClause = 125
    RULE_cancelDisableDiskClause = 126
    RULE_createIndexClause = 127
    RULE_dropIndexClause = 128
    RULE_tableRenameClause = 129
    RULE_swapTableClause = 130
    RULE_modifyPropertiesClause = 131
    RULE_modifyCommentClause = 132
    RULE_optimizeClause = 133
    RULE_addColumnClause = 134
    RULE_addColumnsClause = 135
    RULE_dropColumnClause = 136
    RULE_modifyColumnClause = 137
    RULE_columnRenameClause = 138
    RULE_reorderColumnsClause = 139
    RULE_rollupRenameClause = 140
    RULE_compactionClause = 141
    RULE_subfieldName = 142
    RULE_nestedFieldName = 143
    RULE_addFieldClause = 144
    RULE_dropFieldClause = 145
    RULE_addPartitionClause = 146
    RULE_dropPartitionClause = 147
    RULE_truncatePartitionClause = 148
    RULE_modifyPartitionClause = 149
    RULE_replacePartitionClause = 150
    RULE_partitionRenameClause = 151
    RULE_insertStatement = 152
    RULE_updateStatement = 153
    RULE_deleteStatement = 154
    RULE_createRoutineLoadStatement = 155
    RULE_alterRoutineLoadStatement = 156
    RULE_dataSource = 157
    RULE_loadProperties = 158
    RULE_colSeparatorProperty = 159
    RULE_rowDelimiterProperty = 160
    RULE_importColumns = 161
    RULE_columnProperties = 162
    RULE_jobProperties = 163
    RULE_dataSourceProperties = 164
    RULE_stopRoutineLoadStatement = 165
    RULE_resumeRoutineLoadStatement = 166
    RULE_pauseRoutineLoadStatement = 167
    RULE_showRoutineLoadStatement = 168
    RULE_showRoutineLoadTaskStatement = 169
    RULE_showCreateRoutineLoadStatement = 170
    RULE_showStreamLoadStatement = 171
    RULE_analyzeStatement = 172
    RULE_dropStatsStatement = 173
    RULE_analyzeHistogramStatement = 174
    RULE_dropHistogramStatement = 175
    RULE_createAnalyzeStatement = 176
    RULE_dropAnalyzeJobStatement = 177
    RULE_showAnalyzeStatement = 178
    RULE_showStatsMetaStatement = 179
    RULE_showHistogramMetaStatement = 180
    RULE_killAnalyzeStatement = 181
    RULE_analyzeProfileStatement = 182
    RULE_createResourceGroupStatement = 183
    RULE_dropResourceGroupStatement = 184
    RULE_alterResourceGroupStatement = 185
    RULE_showResourceGroupStatement = 186
    RULE_showResourceGroupUsageStatement = 187
    RULE_createResourceStatement = 188
    RULE_alterResourceStatement = 189
    RULE_dropResourceStatement = 190
    RULE_showResourceStatement = 191
    RULE_classifier = 192
    RULE_showFunctionsStatement = 193
    RULE_dropFunctionStatement = 194
    RULE_createFunctionStatement = 195
    RULE_typeList = 196
    RULE_loadStatement = 197
    RULE_labelName = 198
    RULE_dataDescList = 199
    RULE_dataDesc = 200
    RULE_formatProps = 201
    RULE_brokerDesc = 202
    RULE_resourceDesc = 203
    RULE_showLoadStatement = 204
    RULE_showLoadWarningsStatement = 205
    RULE_cancelLoadStatement = 206
    RULE_alterLoadStatement = 207
    RULE_cancelCompactionStatement = 208
    RULE_showAuthorStatement = 209
    RULE_showBackendsStatement = 210
    RULE_showBrokerStatement = 211
    RULE_showCharsetStatement = 212
    RULE_showCollationStatement = 213
    RULE_showDeleteStatement = 214
    RULE_showDynamicPartitionStatement = 215
    RULE_showEventsStatement = 216
    RULE_showEnginesStatement = 217
    RULE_showFrontendsStatement = 218
    RULE_showPluginsStatement = 219
    RULE_showRepositoriesStatement = 220
    RULE_showOpenTableStatement = 221
    RULE_showPrivilegesStatement = 222
    RULE_showProcedureStatement = 223
    RULE_showProcStatement = 224
    RULE_showProcesslistStatement = 225
    RULE_showProfilelistStatement = 226
    RULE_showRunningQueriesStatement = 227
    RULE_showStatusStatement = 228
    RULE_showTabletStatement = 229
    RULE_showTransactionStatement = 230
    RULE_showTriggersStatement = 231
    RULE_showUserPropertyStatement = 232
    RULE_showVariablesStatement = 233
    RULE_showWarningStatement = 234
    RULE_helpStatement = 235
    RULE_createUserStatement = 236
    RULE_dropUserStatement = 237
    RULE_alterUserStatement = 238
    RULE_showUserStatement = 239
    RULE_showAuthenticationStatement = 240
    RULE_executeAsStatement = 241
    RULE_createRoleStatement = 242
    RULE_alterRoleStatement = 243
    RULE_dropRoleStatement = 244
    RULE_showRolesStatement = 245
    RULE_grantRoleStatement = 246
    RULE_revokeRoleStatement = 247
    RULE_setRoleStatement = 248
    RULE_setDefaultRoleStatement = 249
    RULE_grantRevokeClause = 250
    RULE_grantPrivilegeStatement = 251
    RULE_revokePrivilegeStatement = 252
    RULE_showGrantsStatement = 253
    RULE_authOption = 254
    RULE_privObjectName = 255
    RULE_privObjectNameList = 256
    RULE_privFunctionObjectNameList = 257
    RULE_privilegeTypeList = 258
    RULE_privilegeType = 259
    RULE_privObjectType = 260
    RULE_privObjectTypePlural = 261
    RULE_backupStatement = 262
    RULE_cancelBackupStatement = 263
    RULE_showBackupStatement = 264
    RULE_restoreStatement = 265
    RULE_cancelRestoreStatement = 266
    RULE_showRestoreStatement = 267
    RULE_showSnapshotStatement = 268
    RULE_createRepositoryStatement = 269
    RULE_dropRepositoryStatement = 270
    RULE_addSqlBlackListStatement = 271
    RULE_delSqlBlackListStatement = 272
    RULE_showSqlBlackListStatement = 273
    RULE_showWhiteListStatement = 274
    RULE_addBackendBlackListStatement = 275
    RULE_delBackendBlackListStatement = 276
    RULE_showBackendBlackListStatement = 277
    RULE_dataCacheTarget = 278
    RULE_createDataCacheRuleStatement = 279
    RULE_showDataCacheRulesStatement = 280
    RULE_dropDataCacheRuleStatement = 281
    RULE_clearDataCacheRulesStatement = 282
    RULE_dataCacheSelectStatement = 283
    RULE_exportStatement = 284
    RULE_cancelExportStatement = 285
    RULE_showExportStatement = 286
    RULE_installPluginStatement = 287
    RULE_uninstallPluginStatement = 288
    RULE_createFileStatement = 289
    RULE_dropFileStatement = 290
    RULE_showSmallFilesStatement = 291
    RULE_createPipeStatement = 292
    RULE_dropPipeStatement = 293
    RULE_alterPipeClause = 294
    RULE_alterPipeStatement = 295
    RULE_descPipeStatement = 296
    RULE_showPipeStatement = 297
    RULE_setStatement = 298
    RULE_setVar = 299
    RULE_transaction_characteristics = 300
    RULE_transaction_access_mode = 301
    RULE_isolation_level = 302
    RULE_isolation_types = 303
    RULE_setExprOrDefault = 304
    RULE_setUserPropertyStatement = 305
    RULE_roleList = 306
    RULE_executeScriptStatement = 307
    RULE_unsupportedStatement = 308
    RULE_lock_item = 309
    RULE_lock_type = 310
    RULE_queryStatement = 311
    RULE_queryRelation = 312
    RULE_withClause = 313
    RULE_queryNoWith = 314
    RULE_temporalClause = 315
    RULE_queryPrimary = 316
    RULE_subquery = 317
    RULE_rowConstructor = 318
    RULE_sortItem = 319
    RULE_limitElement = 320
    RULE_querySpecification = 321
    RULE_fromClause = 322
    RULE_groupingElement = 323
    RULE_groupingSet = 324
    RULE_commonTableExpression = 325
    RULE_setQuantifier = 326
    RULE_selectItem = 327
    RULE_relations = 328
    RULE_relation = 329
    RULE_relationPrimary = 330
    RULE_pivotClause = 331
    RULE_pivotAggregationExpression = 332
    RULE_pivotValue = 333
    RULE_argumentList = 334
    RULE_joinRelation = 335
    RULE_crossOrInnerJoinType = 336
    RULE_outerAndSemiJoinType = 337
    RULE_bracketHint = 338
    RULE_hintMap = 339
    RULE_joinCriteria = 340
    RULE_columnAliases = 341
    RULE_partitionNames = 342
    RULE_keyPartitions = 343
    RULE_tabletList = 344
    RULE_prepareStatement = 345
    RULE_prepareSql = 346
    RULE_executeStatement = 347
    RULE_deallocateStatement = 348
    RULE_replicaList = 349
    RULE_expressionsWithDefault = 350
    RULE_expressionOrDefault = 351
    RULE_mapExpressionList = 352
    RULE_mapExpression = 353
    RULE_expressionSingleton = 354
    RULE_expression = 355
    RULE_expressionList = 356
    RULE_booleanExpression = 357
    RULE_predicate = 358
    RULE_tupleInSubquery = 359
    RULE_predicateOperations = 360
    RULE_valueExpression = 361
    RULE_primaryExpression = 362
    RULE_literalExpression = 363
    RULE_functionCall = 364
    RULE_aggregationFunction = 365
    RULE_userVariable = 366
    RULE_systemVariable = 367
    RULE_columnReference = 368
    RULE_informationFunctionExpression = 369
    RULE_specialDateTimeExpression = 370
    RULE_specialFunctionExpression = 371
    RULE_windowFunction = 372
    RULE_whenClause = 373
    RULE_over = 374
    RULE_ignoreNulls = 375
    RULE_windowFrame = 376
    RULE_frameBound = 377
    RULE_tableDesc = 378
    RULE_restoreTableDesc = 379
    RULE_explainDesc = 380
    RULE_optimizerTrace = 381
    RULE_partitionDesc = 382
    RULE_listPartitionDesc = 383
    RULE_singleItemListPartitionDesc = 384
    RULE_multiItemListPartitionDesc = 385
    RULE_listPartitionValueList = 386
    RULE_listPartitionValue = 387
    RULE_stringList = 388
    RULE_literalExpressionList = 389
    RULE_rangePartitionDesc = 390
    RULE_singleRangePartition = 391
    RULE_multiRangePartition = 392
    RULE_partitionRangeDesc = 393
    RULE_partitionKeyDesc = 394
    RULE_partitionValueList = 395
    RULE_keyPartition = 396
    RULE_partitionValue = 397
    RULE_distributionClause = 398
    RULE_distributionDesc = 399
    RULE_refreshSchemeDesc = 400
    RULE_statusDesc = 401
    RULE_properties = 402
    RULE_extProperties = 403
    RULE_propertyList = 404
    RULE_userPropertyList = 405
    RULE_property = 406
    RULE_varType = 407
    RULE_comment = 408
    RULE_outfile = 409
    RULE_fileFormat = 410
    RULE_string_ = 411
    RULE_binary = 412
    RULE_comparisonOperator = 413
    RULE_booleanValue = 414
    RULE_interval = 415
    RULE_taskInterval = 416
    RULE_taskUnitIdentifier = 417
    RULE_unitIdentifier = 418
    RULE_unitBoundary = 419
    RULE_type = 420
    RULE_arrayType = 421
    RULE_mapType = 422
    RULE_subfieldDesc = 423
    RULE_subfieldDescs = 424
    RULE_structType = 425
    RULE_typeParameter = 426
    RULE_baseType = 427
    RULE_decimalType = 428
    RULE_qualifiedName = 429
    RULE_identifier = 430
    RULE_identifierList = 431
    RULE_identifierOrString = 432
    RULE_identifierOrStringList = 433
    RULE_identifierOrStringOrStar = 434
    RULE_user = 435
    RULE_assignment = 436
    RULE_assignmentList = 437
    RULE_number = 438
    RULE_nonReserved = 439

    ruleNames =  [ "sqlStatements", "singleStatement", "emptyStatement", 
                   "statement", "useDatabaseStatement", "useCatalogStatement", 
                   "setCatalogStatement", "showDatabasesStatement", "alterDbQuotaStatement", 
                   "createDbStatement", "dropDbStatement", "showCreateDbStatement", 
                   "alterDatabaseRenameStatement", "recoverDbStmt", "showDataStmt", 
                   "createTableStatement", "columnDesc", "charsetName", 
                   "defaultDesc", "generatedColumnDesc", "indexDesc", "engineDesc", 
                   "charsetDesc", "collateDesc", "keyDesc", "orderByDesc", 
                   "aggDesc", "rollupDesc", "rollupItem", "dupKeys", "fromRollup", 
                   "orReplace", "ifNotExists", "createTableAsSelectStatement", 
                   "dropTableStatement", "cleanTemporaryTableStatement", 
                   "alterTableStatement", "createIndexStatement", "dropIndexStatement", 
                   "indexType", "showTableStatement", "showTemporaryTablesStatement", 
                   "showCreateTableStatement", "showColumnStatement", "showTableStatusStatement", 
                   "refreshTableStatement", "showAlterStatement", "descTableStatement", 
                   "createTableLikeStatement", "showIndexStatement", "recoverTableStatement", 
                   "truncateTableStatement", "cancelAlterTableStatement", 
                   "showPartitionsStatement", "recoverPartitionStatement", 
                   "createViewStatement", "alterViewStatement", "dropViewStatement", 
                   "columnNameWithComment", "submitTaskStatement", "taskClause", 
                   "dropTaskStatement", "taskScheduleDesc", "createMaterializedViewStatement", 
                   "materializedViewDesc", "showMaterializedViewsStatement", 
                   "dropMaterializedViewStatement", "alterMaterializedViewStatement", 
                   "refreshMaterializedViewStatement", "cancelRefreshMaterializedViewStatement", 
                   "adminSetConfigStatement", "adminSetReplicaStatusStatement", 
                   "adminShowConfigStatement", "adminShowReplicaDistributionStatement", 
                   "adminShowReplicaStatusStatement", "adminRepairTableStatement", 
                   "adminCancelRepairTableStatement", "adminCheckTabletsStatement", 
                   "adminSetPartitionVersion", "killStatement", "syncStatement", 
                   "alterSystemStatement", "cancelAlterSystemStatement", 
                   "showComputeNodesStatement", "createExternalCatalogStatement", 
                   "showCreateExternalCatalogStatement", "dropExternalCatalogStatement", 
                   "showCatalogsStatement", "alterCatalogStatement", "createStorageVolumeStatement", 
                   "typeDesc", "locationsDesc", "showStorageVolumesStatement", 
                   "dropStorageVolumeStatement", "alterStorageVolumeStatement", 
                   "alterStorageVolumeClause", "modifyStorageVolumePropertiesClause", 
                   "modifyStorageVolumeCommentClause", "descStorageVolumeStatement", 
                   "setDefaultStorageVolumeStatement", "updateFailPointStatusStatement", 
                   "showFailPointStatement", "createDictionaryStatement", 
                   "dropDictionaryStatement", "refreshDictionaryStatement", 
                   "showDictionaryStatement", "cancelRefreshDictionaryStatement", 
                   "dictionaryColumnDesc", "dictionaryName", "alterClause", 
                   "addFrontendClause", "dropFrontendClause", "modifyFrontendHostClause", 
                   "addBackendClause", "dropBackendClause", "decommissionBackendClause", 
                   "modifyBackendClause", "addComputeNodeClause", "dropComputeNodeClause", 
                   "modifyBrokerClause", "alterLoadErrorUrlClause", "createImageClause", 
                   "cleanTabletSchedQClause", "decommissionDiskClause", 
                   "cancelDecommissionDiskClause", "disableDiskClause", 
                   "cancelDisableDiskClause", "createIndexClause", "dropIndexClause", 
                   "tableRenameClause", "swapTableClause", "modifyPropertiesClause", 
                   "modifyCommentClause", "optimizeClause", "addColumnClause", 
                   "addColumnsClause", "dropColumnClause", "modifyColumnClause", 
                   "columnRenameClause", "reorderColumnsClause", "rollupRenameClause", 
                   "compactionClause", "subfieldName", "nestedFieldName", 
                   "addFieldClause", "dropFieldClause", "addPartitionClause", 
                   "dropPartitionClause", "truncatePartitionClause", "modifyPartitionClause", 
                   "replacePartitionClause", "partitionRenameClause", "insertStatement", 
                   "updateStatement", "deleteStatement", "createRoutineLoadStatement", 
                   "alterRoutineLoadStatement", "dataSource", "loadProperties", 
                   "colSeparatorProperty", "rowDelimiterProperty", "importColumns", 
                   "columnProperties", "jobProperties", "dataSourceProperties", 
                   "stopRoutineLoadStatement", "resumeRoutineLoadStatement", 
                   "pauseRoutineLoadStatement", "showRoutineLoadStatement", 
                   "showRoutineLoadTaskStatement", "showCreateRoutineLoadStatement", 
                   "showStreamLoadStatement", "analyzeStatement", "dropStatsStatement", 
                   "analyzeHistogramStatement", "dropHistogramStatement", 
                   "createAnalyzeStatement", "dropAnalyzeJobStatement", 
                   "showAnalyzeStatement", "showStatsMetaStatement", "showHistogramMetaStatement", 
                   "killAnalyzeStatement", "analyzeProfileStatement", "createResourceGroupStatement", 
                   "dropResourceGroupStatement", "alterResourceGroupStatement", 
                   "showResourceGroupStatement", "showResourceGroupUsageStatement", 
                   "createResourceStatement", "alterResourceStatement", 
                   "dropResourceStatement", "showResourceStatement", "classifier", 
                   "showFunctionsStatement", "dropFunctionStatement", "createFunctionStatement", 
                   "typeList", "loadStatement", "labelName", "dataDescList", 
                   "dataDesc", "formatProps", "brokerDesc", "resourceDesc", 
                   "showLoadStatement", "showLoadWarningsStatement", "cancelLoadStatement", 
                   "alterLoadStatement", "cancelCompactionStatement", "showAuthorStatement", 
                   "showBackendsStatement", "showBrokerStatement", "showCharsetStatement", 
                   "showCollationStatement", "showDeleteStatement", "showDynamicPartitionStatement", 
                   "showEventsStatement", "showEnginesStatement", "showFrontendsStatement", 
                   "showPluginsStatement", "showRepositoriesStatement", 
                   "showOpenTableStatement", "showPrivilegesStatement", 
                   "showProcedureStatement", "showProcStatement", "showProcesslistStatement", 
                   "showProfilelistStatement", "showRunningQueriesStatement", 
                   "showStatusStatement", "showTabletStatement", "showTransactionStatement", 
                   "showTriggersStatement", "showUserPropertyStatement", 
                   "showVariablesStatement", "showWarningStatement", "helpStatement", 
                   "createUserStatement", "dropUserStatement", "alterUserStatement", 
                   "showUserStatement", "showAuthenticationStatement", "executeAsStatement", 
                   "createRoleStatement", "alterRoleStatement", "dropRoleStatement", 
                   "showRolesStatement", "grantRoleStatement", "revokeRoleStatement", 
                   "setRoleStatement", "setDefaultRoleStatement", "grantRevokeClause", 
                   "grantPrivilegeStatement", "revokePrivilegeStatement", 
                   "showGrantsStatement", "authOption", "privObjectName", 
                   "privObjectNameList", "privFunctionObjectNameList", "privilegeTypeList", 
                   "privilegeType", "privObjectType", "privObjectTypePlural", 
                   "backupStatement", "cancelBackupStatement", "showBackupStatement", 
                   "restoreStatement", "cancelRestoreStatement", "showRestoreStatement", 
                   "showSnapshotStatement", "createRepositoryStatement", 
                   "dropRepositoryStatement", "addSqlBlackListStatement", 
                   "delSqlBlackListStatement", "showSqlBlackListStatement", 
                   "showWhiteListStatement", "addBackendBlackListStatement", 
                   "delBackendBlackListStatement", "showBackendBlackListStatement", 
                   "dataCacheTarget", "createDataCacheRuleStatement", "showDataCacheRulesStatement", 
                   "dropDataCacheRuleStatement", "clearDataCacheRulesStatement", 
                   "dataCacheSelectStatement", "exportStatement", "cancelExportStatement", 
                   "showExportStatement", "installPluginStatement", "uninstallPluginStatement", 
                   "createFileStatement", "dropFileStatement", "showSmallFilesStatement", 
                   "createPipeStatement", "dropPipeStatement", "alterPipeClause", 
                   "alterPipeStatement", "descPipeStatement", "showPipeStatement", 
                   "setStatement", "setVar", "transaction_characteristics", 
                   "transaction_access_mode", "isolation_level", "isolation_types", 
                   "setExprOrDefault", "setUserPropertyStatement", "roleList", 
                   "executeScriptStatement", "unsupportedStatement", "lock_item", 
                   "lock_type", "queryStatement", "queryRelation", "withClause", 
                   "queryNoWith", "temporalClause", "queryPrimary", "subquery", 
                   "rowConstructor", "sortItem", "limitElement", "querySpecification", 
                   "fromClause", "groupingElement", "groupingSet", "commonTableExpression", 
                   "setQuantifier", "selectItem", "relations", "relation", 
                   "relationPrimary", "pivotClause", "pivotAggregationExpression", 
                   "pivotValue", "argumentList", "joinRelation", "crossOrInnerJoinType", 
                   "outerAndSemiJoinType", "bracketHint", "hintMap", "joinCriteria", 
                   "columnAliases", "partitionNames", "keyPartitions", "tabletList", 
                   "prepareStatement", "prepareSql", "executeStatement", 
                   "deallocateStatement", "replicaList", "expressionsWithDefault", 
                   "expressionOrDefault", "mapExpressionList", "mapExpression", 
                   "expressionSingleton", "expression", "expressionList", 
                   "booleanExpression", "predicate", "tupleInSubquery", 
                   "predicateOperations", "valueExpression", "primaryExpression", 
                   "literalExpression", "functionCall", "aggregationFunction", 
                   "userVariable", "systemVariable", "columnReference", 
                   "informationFunctionExpression", "specialDateTimeExpression", 
                   "specialFunctionExpression", "windowFunction", "whenClause", 
                   "over", "ignoreNulls", "windowFrame", "frameBound", "tableDesc", 
                   "restoreTableDesc", "explainDesc", "optimizerTrace", 
                   "partitionDesc", "listPartitionDesc", "singleItemListPartitionDesc", 
                   "multiItemListPartitionDesc", "listPartitionValueList", 
                   "listPartitionValue", "stringList", "literalExpressionList", 
                   "rangePartitionDesc", "singleRangePartition", "multiRangePartition", 
                   "partitionRangeDesc", "partitionKeyDesc", "partitionValueList", 
                   "keyPartition", "partitionValue", "distributionClause", 
                   "distributionDesc", "refreshSchemeDesc", "statusDesc", 
                   "properties", "extProperties", "propertyList", "userPropertyList", 
                   "property", "varType", "comment", "outfile", "fileFormat", 
                   "string_", "binary", "comparisonOperator", "booleanValue", 
                   "interval", "taskInterval", "taskUnitIdentifier", "unitIdentifier", 
                   "unitBoundary", "type", "arrayType", "mapType", "subfieldDesc", 
                   "subfieldDescs", "structType", "typeParameter", "baseType", 
                   "decimalType", "qualifiedName", "identifier", "identifierList", 
                   "identifierOrString", "identifierOrStringList", "identifierOrStringOrStar", 
                   "user", "assignment", "assignmentList", "number", "nonReserved" ]

    EOF = Token.EOF
    CONCAT=1
    ACCESS=2
    ACTIVE=3
    ADD=4
    ADMIN=5
    AFTER=6
    AGGREGATE=7
    ALL=8
    ALTER=9
    ANALYZE=10
    AND=11
    ANTI=12
    APPLY=13
    ARRAY=14
    ARRAY_AGG=15
    ARRAY_AGG_DISTINCT=16
    AS=17
    ASC=18
    ASYNC=19
    AUTHORS=20
    AUTHENTICATION=21
    AUTO_INCREMENT=22
    AVG=23
    BACKEND=24
    BACKENDS=25
    BACKUP=26
    BASE=27
    BEGIN=28
    BETWEEN=29
    BIGINT=30
    BINARY=31
    BITMAP=32
    BITMAP_UNION=33
    BLACKHOLE=34
    BLACKLIST=35
    BODY=36
    BOOLEAN=37
    BOTH=38
    BROKER=39
    BUCKETS=40
    BUILTIN=41
    BY=42
    CACHE=43
    CANCEL=44
    CASE=45
    CAST=46
    CATALOG=47
    CATALOGS=48
    CEIL=49
    CHAIN=50
    CHAR=51
    CHARACTER=52
    CHARSET=53
    CHECK=54
    CLEAN=55
    CLEAR=56
    CLUSTER=57
    CLUSTERS=58
    COLLATE=59
    COLLATION=60
    COLUMN=61
    COLUMNS=62
    COMMENT=63
    COMMIT=64
    COMMITTED=65
    COMPACT=66
    COMPACTION=67
    COMPUTE=68
    CONFIG=69
    CONNECTION=70
    CONSISTENT=71
    CONVERT=72
    COSTS=73
    COUNT=74
    CREATE=75
    CROSS=76
    CUBE=77
    CUME_DIST=78
    CUMULATIVE=79
    CURRENT=80
    CURRENT_DATE=81
    CURRENT_ROLE=82
    CURRENT_TIME=83
    CURRENT_TIMESTAMP=84
    CURRENT_USER=85
    DATA=86
    DATACACHE=87
    DATABASE=88
    DATABASES=89
    DATE=90
    DATETIME=91
    DAY=92
    DEALLOCATE=93
    DECIMAL=94
    DECIMALV2=95
    DECIMAL32=96
    DECIMAL64=97
    DECIMAL128=98
    DECOMMISSION=99
    DEFAULT=100
    DELETE=101
    DENSE_RANK=102
    DEFERRED=103
    DICTIONARY=104
    DICTIONARY_GET=105
    NTILE=106
    DESC=107
    DESCRIBE=108
    DISABLE=109
    DISTINCT=110
    DISTRIBUTED=111
    DISTRIBUTION=112
    DOUBLE=113
    DROP=114
    DUAL=115
    DUPLICATE=116
    DYNAMIC=117
    ELSE=118
    ENABLE=119
    ENCLOSE=120
    END=121
    ENGINE=122
    ENGINES=123
    ERRORS=124
    ESCAPE=125
    EVENTS=126
    EXCEPT=127
    EXECUTE=128
    EXISTS=129
    EXPLAIN=130
    EXPORT=131
    EXTERNAL=132
    EXTRACT=133
    EVERY=134
    FAILPOINT=135
    FAILPOINTS=136
    FALSE=137
    FIELDS=138
    FILE=139
    FILES=140
    FILTER=141
    FIRST=142
    FIRST_VALUE=143
    FLOAT=144
    FLOOR=145
    FN=146
    FOLLOWING=147
    FOLLOWER=148
    FOR=149
    FORCE=150
    FORMAT=151
    FREE=152
    FROM=153
    FRONTEND=154
    FRONTENDS=155
    FULL=156
    FUNCTION=157
    FUNCTIONS=158
    GLOBAL=159
    GRANT=160
    GRANTS=161
    GROUP=162
    GROUPS=163
    GROUPING=164
    GROUPING_ID=165
    GROUP_CONCAT=166
    HASH=167
    HAVING=168
    HELP=169
    HISTOGRAM=170
    HLL=171
    HLL_UNION=172
    HOST=173
    HOUR=174
    HUB=175
    IDENTIFIED=176
    IF=177
    IMPERSONATE=178
    IMMEDIATE=179
    IGNORE=180
    IMAGE=181
    IN=182
    INACTIVE=183
    INCREMENTAL=184
    INDEX=185
    INDEXES=186
    INFILE=187
    INNER=188
    INSTALL=189
    INSERT=190
    INT=191
    INTEGER=192
    INTEGRATION=193
    INTEGRATIONS=194
    INTERMEDIATE=195
    INTERSECT=196
    INTERVAL=197
    INTO=198
    GIN=199
    OVERWRITE=200
    IS=201
    ISOLATION=202
    JOB=203
    JOIN=204
    JSON=205
    KEY=206
    KEYS=207
    KILL=208
    LABEL=209
    LAG=210
    LARGEINT=211
    LAST=212
    LAST_VALUE=213
    LATERAL=214
    LEAD=215
    LEFT=216
    LESS=217
    LEVEL=218
    LIKE=219
    LIMIT=220
    LIST=221
    LOAD=222
    LOCAL=223
    LOCALTIME=224
    LOCALTIMESTAMP=225
    LOCATION=226
    LOCATIONS=227
    LOGS=228
    LOGICAL=229
    MANUAL=230
    MAP=231
    MAPPING=232
    MAPPINGS=233
    MASKING=234
    MATCH=235
    MATERIALIZED=236
    MAX=237
    MAXVALUE=238
    MERGE=239
    MICROSECOND=240
    MILLISECOND=241
    MIN=242
    MINUTE=243
    MINUS=244
    META=245
    MOD=246
    MODE=247
    MODIFY=248
    MONTH=249
    NAME=250
    NAMES=251
    NEGATIVE=252
    NGRAMBF=253
    NO=254
    NODE=255
    NODES=256
    NONE=257
    NOT=258
    NULL_=259
    NULLS=260
    NUMBER=261
    NUMERIC=262
    OBSERVER=263
    OF=264
    OFFSET=265
    ON=266
    ONLY=267
    OPEN=268
    OPERATE=269
    OPTIMIZE=270
    OPTIMIZER=271
    OPTION=272
    OR=273
    ORDER=274
    OUTER=275
    OUTFILE=276
    OVER=277
    PARAMETER=278
    PARTITION=279
    PARTITIONS=280
    PASSWORD=281
    PATH=282
    PAUSE=283
    PENDING=284
    PERCENT_RANK=285
    PERCENTILE=286
    PERCENTILE_UNION=287
    PLUGIN=288
    PLUGINS=289
    PIPE=290
    PIPES=291
    PIVOT=292
    POLICY=293
    POLICIES=294
    PRECEDING=295
    PREPARE=296
    PRIMARY=297
    PRIORITY=298
    PRIVILEGES=299
    PROBABILITY=300
    PROC=301
    PROCEDURE=302
    PROCESSLIST=303
    PROFILE=304
    PROFILELIST=305
    PROPERTIES=306
    PROPERTY=307
    QUALIFY=308
    QUARTER=309
    QUERY=310
    QUERIES=311
    QUEUE=312
    QUOTA=313
    RANDOM=314
    RANGE=315
    RANK=316
    READ=317
    REASON=318
    RECOVER=319
    REFRESH=320
    REWRITE=321
    REGEXP=322
    RELEASE=323
    REMOVE=324
    RENAME=325
    REPAIR=326
    REPEATABLE=327
    REPLACE=328
    REPLACE_IF_NOT_NULL=329
    REPLICA=330
    REPOSITORY=331
    REPOSITORIES=332
    RESOURCE=333
    RESOURCES=334
    RESTORE=335
    RESUME=336
    RETURNS=337
    RETRY=338
    REVOKE=339
    REVERT=340
    RIGHT=341
    RLIKE=342
    ROLE=343
    ROLES=344
    ROLLBACK=345
    ROLLUP=346
    ROUTINE=347
    ROW=348
    ROWS=349
    ROW_NUMBER=350
    RULE=351
    RULES=352
    RUNNING=353
    SAMPLE=354
    SCHEDULE=355
    SCHEDULER=356
    SCHEMA=357
    SCHEMAS=358
    SECOND=359
    SECURITY=360
    SELECT=361
    SEMI=362
    SEPARATOR=363
    SERIALIZABLE=364
    SESSION=365
    SET=366
    SETS=367
    SET_VAR=368
    SIGNED=369
    SKIP_HEADER=370
    SHOW=371
    SMALLINT=372
    SNAPSHOT=373
    SQLBLACKLIST=374
    START=375
    STATS=376
    STATUS=377
    STOP=378
    STORAGE=379
    STREAM=380
    STRING=381
    TEXT=382
    SUBMIT=383
    SUM=384
    SUSPEND=385
    SYNC=386
    SYSTEM=387
    SYSTEM_TIME=388
    SWAP=389
    STRUCT=390
    TABLE=391
    TABLES=392
    TABLET=393
    TABLETS=394
    TASK=395
    TEMPORARY=396
    TERMINATED=397
    THAN=398
    THEN=399
    TIME=400
    TIMES=401
    TIMESTAMP=402
    TIMESTAMPADD=403
    TIMESTAMPDIFF=404
    TINYINT=405
    TRANSACTION=406
    TO=407
    TRACE=408
    TRIGGERS=409
    TRIM_SPACE=410
    TRUE=411
    TRUNCATE=412
    TYPE=413
    TYPES=414
    UNBOUNDED=415
    UNCOMMITTED=416
    UNION=417
    UNIQUE=418
    UNINSTALL=419
    UNSET=420
    UNSIGNED=421
    UPDATE=422
    USAGE=423
    USE=424
    USER=425
    USERS=426
    USING=427
    VALUE=428
    VALUES=429
    VARBINARY=430
    VARCHAR=431
    VARIABLES=432
    VERBOSE=433
    VERSION=434
    VIEW=435
    VIEWS=436
    VOLUME=437
    VOLUMES=438
    WAREHOUSE=439
    WAREHOUSES=440
    WARNINGS=441
    WEEK=442
    WHEN=443
    WHERE=444
    WHITELIST=445
    WITH=446
    WORK=447
    WRITE=448
    YEAR=449
    LOCK=450
    UNLOCK=451
    LOW_PRIORITY=452
    DISK=453
    FIELD=454
    EQ=455
    NEQ=456
    LT=457
    LTE=458
    GT=459
    GTE=460
    EQ_FOR_NULL=461
    ARRAY_ELEMENT=462
    PLUS_SYMBOL=463
    MINUS_SYMBOL=464
    ASTERISK_SYMBOL=465
    SLASH_SYMBOL=466
    PERCENT_SYMBOL=467
    LOGICAL_OR=468
    LOGICAL_AND=469
    LOGICAL_NOT=470
    INT_DIV=471
    BITAND=472
    BITOR=473
    BITXOR=474
    BITNOT=475
    BIT_SHIFT_LEFT=476
    BIT_SHIFT_RIGHT=477
    BIT_SHIFT_RIGHT_LOGICAL=478
    ARROW=479
    AT=480
    INTEGER_VALUE=481
    DECIMAL_VALUE=482
    DOUBLE_VALUE=483
    SINGLE_QUOTED_TEXT=484
    DOUBLE_QUOTED_TEXT=485
    BINARY_SINGLE_QUOTED_TEXT=486
    BINARY_DOUBLE_QUOTED_TEXT=487
    LETTER_IDENTIFIER=488
    DIGIT_IDENTIFIER=489
    BACKQUOTED_IDENTIFIER=490
    DOT_IDENTIFIER=491
    SIMPLE_COMMENT=492
    BRACKETED_COMMENT=493
    OPTIMIZER_HINT=494
    SEMICOLON=495
    DOTDOTDOT=496
    COLON=497
    LEFT_PAREN=498
    RIGHT_PAREN=499
    COMMA=500
    DOT=501
    LEFT_BRACKET=502
    RIGHT_BRACKET=503
    LEFT_BRACE=504
    RIGHT_BRACE=505
    WS=506

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SqlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(StarRocksParser.EOF, 0)

        def singleStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SingleStatementContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SingleStatementContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)




    def sqlStatements(self):

        localctx = StarRocksParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 880
                self.singleStatement()
                self.state = 883 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & 1159678553336316003) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 117094153019719681) != 0) or ((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & 4611967495014711809) != 0) or ((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & 4697254617505865729) != 0) or ((((_la - 361)) & ~0x3f) == 0 and ((1 << (_la - 361)) & -6626906114149432287) != 0) or ((((_la - 446)) & ~0x3f) == 0 and ((1 << (_la - 446)) & 5066549580791857) != 0)):
                    break

            self.state = 885
            self.match(StarRocksParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(StarRocksParser.StatementContext,0)


        def SEMICOLON(self):
            return self.getToken(StarRocksParser.SEMICOLON, 0)

        def EOF(self):
            return self.getToken(StarRocksParser.EOF, 0)

        def emptyStatement(self):
            return self.getTypedRuleContext(StarRocksParser.EmptyStatementContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = StarRocksParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.state = 891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 9, 10, 26, 28, 43, 44, 55, 56, 64, 75, 93, 101, 107, 108, 114, 128, 130, 131, 160, 169, 189, 190, 208, 222, 283, 296, 319, 320, 335, 336, 339, 345, 361, 366, 371, 375, 378, 383, 386, 408, 412, 419, 422, 424, 446, 450, 451, 498]:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.statement()
                self.state = 888
                _la = self._input.LA(1)
                if not(_la==-1 or _la==495):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [495]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(StarRocksParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = StarRocksParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(StarRocksParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.QueryStatementContext,0)


        def useDatabaseStatement(self):
            return self.getTypedRuleContext(StarRocksParser.UseDatabaseStatementContext,0)


        def useCatalogStatement(self):
            return self.getTypedRuleContext(StarRocksParser.UseCatalogStatementContext,0)


        def setCatalogStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SetCatalogStatementContext,0)


        def showDatabasesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowDatabasesStatementContext,0)


        def alterDbQuotaStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterDbQuotaStatementContext,0)


        def createDbStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateDbStatementContext,0)


        def dropDbStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropDbStatementContext,0)


        def showCreateDbStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCreateDbStatementContext,0)


        def alterDatabaseRenameStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterDatabaseRenameStatementContext,0)


        def recoverDbStmt(self):
            return self.getTypedRuleContext(StarRocksParser.RecoverDbStmtContext,0)


        def showDataStmt(self):
            return self.getTypedRuleContext(StarRocksParser.ShowDataStmtContext,0)


        def createTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateTableStatementContext,0)


        def createTableAsSelectStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateTableAsSelectStatementContext,0)


        def createTableLikeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateTableLikeStatementContext,0)


        def showCreateTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCreateTableStatementContext,0)


        def dropTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropTableStatementContext,0)


        def cleanTemporaryTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CleanTemporaryTableStatementContext,0)


        def recoverTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RecoverTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.TruncateTableStatementContext,0)


        def showTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowTableStatementContext,0)


        def descTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DescTableStatementContext,0)


        def showTableStatusStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowTableStatusStatementContext,0)


        def showColumnStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowColumnStatementContext,0)


        def refreshTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RefreshTableStatementContext,0)


        def alterTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterTableStatementContext,0)


        def cancelAlterTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelAlterTableStatementContext,0)


        def showAlterStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowAlterStatementContext,0)


        def showTemporaryTablesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowTemporaryTablesStatementContext,0)


        def createViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateViewStatementContext,0)


        def alterViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterViewStatementContext,0)


        def dropViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropViewStatementContext,0)


        def showPartitionsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowPartitionsStatementContext,0)


        def recoverPartitionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RecoverPartitionStatementContext,0)


        def createIndexStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateIndexStatementContext,0)


        def dropIndexStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropIndexStatementContext,0)


        def showIndexStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowIndexStatementContext,0)


        def submitTaskStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SubmitTaskStatementContext,0)


        def dropTaskStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropTaskStatementContext,0)


        def createMaterializedViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateMaterializedViewStatementContext,0)


        def showMaterializedViewsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowMaterializedViewsStatementContext,0)


        def dropMaterializedViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropMaterializedViewStatementContext,0)


        def alterMaterializedViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterMaterializedViewStatementContext,0)


        def refreshMaterializedViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RefreshMaterializedViewStatementContext,0)


        def cancelRefreshMaterializedViewStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelRefreshMaterializedViewStatementContext,0)


        def createExternalCatalogStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateExternalCatalogStatementContext,0)


        def dropExternalCatalogStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropExternalCatalogStatementContext,0)


        def showCatalogsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCatalogsStatementContext,0)


        def showCreateExternalCatalogStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCreateExternalCatalogStatementContext,0)


        def alterCatalogStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterCatalogStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(StarRocksParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(StarRocksParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DeleteStatementContext,0)


        def createRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateRoutineLoadStatementContext,0)


        def alterRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterRoutineLoadStatementContext,0)


        def stopRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.StopRoutineLoadStatementContext,0)


        def resumeRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ResumeRoutineLoadStatementContext,0)


        def pauseRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.PauseRoutineLoadStatementContext,0)


        def showRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowRoutineLoadStatementContext,0)


        def showRoutineLoadTaskStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowRoutineLoadTaskStatementContext,0)


        def showCreateRoutineLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCreateRoutineLoadStatementContext,0)


        def showStreamLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowStreamLoadStatementContext,0)


        def adminSetConfigStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminSetConfigStatementContext,0)


        def adminSetReplicaStatusStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminSetReplicaStatusStatementContext,0)


        def adminShowConfigStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminShowConfigStatementContext,0)


        def adminShowReplicaDistributionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminShowReplicaDistributionStatementContext,0)


        def adminShowReplicaStatusStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminShowReplicaStatusStatementContext,0)


        def adminRepairTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminRepairTableStatementContext,0)


        def adminCancelRepairTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminCancelRepairTableStatementContext,0)


        def adminCheckTabletsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AdminCheckTabletsStatementContext,0)


        def adminSetPartitionVersion(self):
            return self.getTypedRuleContext(StarRocksParser.AdminSetPartitionVersionContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(StarRocksParser.KillStatementContext,0)


        def syncStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SyncStatementContext,0)


        def executeScriptStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ExecuteScriptStatementContext,0)


        def alterSystemStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterSystemStatementContext,0)


        def cancelAlterSystemStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelAlterSystemStatementContext,0)


        def showComputeNodesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowComputeNodesStatementContext,0)


        def analyzeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AnalyzeStatementContext,0)


        def dropStatsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropStatsStatementContext,0)


        def createAnalyzeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateAnalyzeStatementContext,0)


        def dropAnalyzeJobStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropAnalyzeJobStatementContext,0)


        def analyzeHistogramStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AnalyzeHistogramStatementContext,0)


        def dropHistogramStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropHistogramStatementContext,0)


        def showAnalyzeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowAnalyzeStatementContext,0)


        def showStatsMetaStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowStatsMetaStatementContext,0)


        def showHistogramMetaStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowHistogramMetaStatementContext,0)


        def killAnalyzeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.KillAnalyzeStatementContext,0)


        def analyzeProfileStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AnalyzeProfileStatementContext,0)


        def createResourceGroupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateResourceGroupStatementContext,0)


        def dropResourceGroupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropResourceGroupStatementContext,0)


        def alterResourceGroupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterResourceGroupStatementContext,0)


        def showResourceGroupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowResourceGroupStatementContext,0)


        def showResourceGroupUsageStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowResourceGroupUsageStatementContext,0)


        def createResourceStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateResourceStatementContext,0)


        def alterResourceStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterResourceStatementContext,0)


        def dropResourceStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropResourceStatementContext,0)


        def showResourceStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowResourceStatementContext,0)


        def showFunctionsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowFunctionsStatementContext,0)


        def dropFunctionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropFunctionStatementContext,0)


        def createFunctionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateFunctionStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.LoadStatementContext,0)


        def showLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowLoadStatementContext,0)


        def showLoadWarningsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowLoadWarningsStatementContext,0)


        def cancelLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelLoadStatementContext,0)


        def alterLoadStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterLoadStatementContext,0)


        def showAuthorStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowAuthorStatementContext,0)


        def showBackendsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowBackendsStatementContext,0)


        def showBrokerStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowBrokerStatementContext,0)


        def showCharsetStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCharsetStatementContext,0)


        def showCollationStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowCollationStatementContext,0)


        def showDeleteStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowDeleteStatementContext,0)


        def showDynamicPartitionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowDynamicPartitionStatementContext,0)


        def showEventsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowEventsStatementContext,0)


        def showEnginesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowEnginesStatementContext,0)


        def showFrontendsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowFrontendsStatementContext,0)


        def showPluginsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowPluginsStatementContext,0)


        def showRepositoriesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowRepositoriesStatementContext,0)


        def showOpenTableStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowOpenTableStatementContext,0)


        def showPrivilegesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowPrivilegesStatementContext,0)


        def showProcedureStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowProcedureStatementContext,0)


        def showProcStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowProcStatementContext,0)


        def showProcesslistStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowProcesslistStatementContext,0)


        def showProfilelistStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowProfilelistStatementContext,0)


        def showRunningQueriesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowRunningQueriesStatementContext,0)


        def showStatusStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowStatusStatementContext,0)


        def showTabletStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowTabletStatementContext,0)


        def showTransactionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowTransactionStatementContext,0)


        def showTriggersStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowTriggersStatementContext,0)


        def showUserPropertyStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowUserPropertyStatementContext,0)


        def showVariablesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowVariablesStatementContext,0)


        def showWarningStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowWarningStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(StarRocksParser.HelpStatementContext,0)


        def createUserStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateUserStatementContext,0)


        def dropUserStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropUserStatementContext,0)


        def alterUserStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterUserStatementContext,0)


        def showUserStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowUserStatementContext,0)


        def showAuthenticationStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowAuthenticationStatementContext,0)


        def executeAsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ExecuteAsStatementContext,0)


        def createRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateRoleStatementContext,0)


        def alterRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterRoleStatementContext,0)


        def dropRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropRoleStatementContext,0)


        def showRolesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowRolesStatementContext,0)


        def grantRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRoleStatementContext,0)


        def revokeRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RevokeRoleStatementContext,0)


        def setRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SetRoleStatementContext,0)


        def setDefaultRoleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SetDefaultRoleStatementContext,0)


        def grantPrivilegeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.GrantPrivilegeStatementContext,0)


        def revokePrivilegeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RevokePrivilegeStatementContext,0)


        def showGrantsStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowGrantsStatementContext,0)


        def backupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.BackupStatementContext,0)


        def cancelBackupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelBackupStatementContext,0)


        def showBackupStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowBackupStatementContext,0)


        def restoreStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RestoreStatementContext,0)


        def cancelRestoreStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelRestoreStatementContext,0)


        def showRestoreStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowRestoreStatementContext,0)


        def showSnapshotStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowSnapshotStatementContext,0)


        def createRepositoryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateRepositoryStatementContext,0)


        def dropRepositoryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropRepositoryStatementContext,0)


        def addSqlBlackListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AddSqlBlackListStatementContext,0)


        def delSqlBlackListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DelSqlBlackListStatementContext,0)


        def showSqlBlackListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowSqlBlackListStatementContext,0)


        def showWhiteListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowWhiteListStatementContext,0)


        def addBackendBlackListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AddBackendBlackListStatementContext,0)


        def delBackendBlackListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DelBackendBlackListStatementContext,0)


        def showBackendBlackListStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowBackendBlackListStatementContext,0)


        def createDataCacheRuleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateDataCacheRuleStatementContext,0)


        def showDataCacheRulesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowDataCacheRulesStatementContext,0)


        def dropDataCacheRuleStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropDataCacheRuleStatementContext,0)


        def clearDataCacheRulesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ClearDataCacheRulesStatementContext,0)


        def dataCacheSelectStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DataCacheSelectStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ExportStatementContext,0)


        def cancelExportStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelExportStatementContext,0)


        def showExportStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowExportStatementContext,0)


        def installPluginStatement(self):
            return self.getTypedRuleContext(StarRocksParser.InstallPluginStatementContext,0)


        def uninstallPluginStatement(self):
            return self.getTypedRuleContext(StarRocksParser.UninstallPluginStatementContext,0)


        def createFileStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateFileStatementContext,0)


        def dropFileStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropFileStatementContext,0)


        def showSmallFilesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowSmallFilesStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SetStatementContext,0)


        def setUserPropertyStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SetUserPropertyStatementContext,0)


        def createStorageVolumeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateStorageVolumeStatementContext,0)


        def alterStorageVolumeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterStorageVolumeStatementContext,0)


        def dropStorageVolumeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropStorageVolumeStatementContext,0)


        def showStorageVolumesStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowStorageVolumesStatementContext,0)


        def descStorageVolumeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DescStorageVolumeStatementContext,0)


        def setDefaultStorageVolumeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.SetDefaultStorageVolumeStatementContext,0)


        def createPipeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreatePipeStatementContext,0)


        def dropPipeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropPipeStatementContext,0)


        def alterPipeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.AlterPipeStatementContext,0)


        def showPipeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowPipeStatementContext,0)


        def descPipeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DescPipeStatementContext,0)


        def cancelCompactionStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelCompactionStatementContext,0)


        def updateFailPointStatusStatement(self):
            return self.getTypedRuleContext(StarRocksParser.UpdateFailPointStatusStatementContext,0)


        def showFailPointStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowFailPointStatementContext,0)


        def prepareStatement(self):
            return self.getTypedRuleContext(StarRocksParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ExecuteStatementContext,0)


        def deallocateStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DeallocateStatementContext,0)


        def createDictionaryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateDictionaryStatementContext,0)


        def dropDictionaryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DropDictionaryStatementContext,0)


        def refreshDictionaryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.RefreshDictionaryStatementContext,0)


        def showDictionaryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.ShowDictionaryStatementContext,0)


        def cancelRefreshDictionaryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CancelRefreshDictionaryStatementContext,0)


        def unsupportedStatement(self):
            return self.getTypedRuleContext(StarRocksParser.UnsupportedStatementContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = StarRocksParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.queryStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self.useDatabaseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self.useCatalogStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 898
                self.setCatalogStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 899
                self.showDatabasesStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 900
                self.alterDbQuotaStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 901
                self.createDbStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 902
                self.dropDbStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 903
                self.showCreateDbStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 904
                self.alterDatabaseRenameStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 905
                self.recoverDbStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 906
                self.showDataStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 907
                self.createTableStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 908
                self.createTableAsSelectStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 909
                self.createTableLikeStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 910
                self.showCreateTableStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 911
                self.dropTableStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 912
                self.cleanTemporaryTableStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 913
                self.recoverTableStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 914
                self.truncateTableStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 915
                self.showTableStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 916
                self.descTableStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 917
                self.showTableStatusStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 918
                self.showColumnStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 919
                self.refreshTableStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 920
                self.alterTableStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 921
                self.cancelAlterTableStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 922
                self.showAlterStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 923
                self.showTemporaryTablesStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 924
                self.createViewStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 925
                self.alterViewStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 926
                self.dropViewStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 927
                self.showPartitionsStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 928
                self.recoverPartitionStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 929
                self.createIndexStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 930
                self.dropIndexStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 931
                self.showIndexStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 932
                self.submitTaskStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 933
                self.dropTaskStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 934
                self.createMaterializedViewStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 935
                self.showMaterializedViewsStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 936
                self.dropMaterializedViewStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 937
                self.alterMaterializedViewStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 938
                self.refreshMaterializedViewStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 939
                self.cancelRefreshMaterializedViewStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 940
                self.createExternalCatalogStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 941
                self.dropExternalCatalogStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 942
                self.showCatalogsStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 943
                self.showCreateExternalCatalogStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 944
                self.alterCatalogStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 945
                self.insertStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 946
                self.updateStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 947
                self.deleteStatement()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 948
                self.createRoutineLoadStatement()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 949
                self.alterRoutineLoadStatement()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 950
                self.stopRoutineLoadStatement()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 951
                self.resumeRoutineLoadStatement()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 952
                self.pauseRoutineLoadStatement()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 953
                self.showRoutineLoadStatement()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 954
                self.showRoutineLoadTaskStatement()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 955
                self.showCreateRoutineLoadStatement()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 956
                self.showStreamLoadStatement()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 957
                self.adminSetConfigStatement()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 958
                self.adminSetReplicaStatusStatement()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 959
                self.adminShowConfigStatement()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 960
                self.adminShowReplicaDistributionStatement()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 961
                self.adminShowReplicaStatusStatement()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 962
                self.adminRepairTableStatement()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 963
                self.adminCancelRepairTableStatement()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 964
                self.adminCheckTabletsStatement()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 965
                self.adminSetPartitionVersion()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 966
                self.killStatement()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 967
                self.syncStatement()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 968
                self.executeScriptStatement()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 969
                self.alterSystemStatement()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 970
                self.cancelAlterSystemStatement()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 971
                self.showComputeNodesStatement()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 972
                self.analyzeStatement()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 973
                self.dropStatsStatement()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 974
                self.createAnalyzeStatement()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 975
                self.dropAnalyzeJobStatement()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 976
                self.analyzeHistogramStatement()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 977
                self.dropHistogramStatement()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 978
                self.showAnalyzeStatement()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 979
                self.showStatsMetaStatement()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 980
                self.showHistogramMetaStatement()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 981
                self.killAnalyzeStatement()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 982
                self.analyzeProfileStatement()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 983
                self.createResourceGroupStatement()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 984
                self.dropResourceGroupStatement()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 985
                self.alterResourceGroupStatement()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 986
                self.showResourceGroupStatement()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 987
                self.showResourceGroupUsageStatement()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 988
                self.createResourceStatement()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 989
                self.alterResourceStatement()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 990
                self.dropResourceStatement()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 991
                self.showResourceStatement()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 992
                self.showFunctionsStatement()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 993
                self.dropFunctionStatement()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 994
                self.createFunctionStatement()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 995
                self.loadStatement()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 996
                self.showLoadStatement()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 997
                self.showLoadWarningsStatement()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 998
                self.cancelLoadStatement()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 999
                self.alterLoadStatement()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1000
                self.showAuthorStatement()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1001
                self.showBackendsStatement()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1002
                self.showBrokerStatement()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1003
                self.showCharsetStatement()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1004
                self.showCollationStatement()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 1005
                self.showDeleteStatement()
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 1006
                self.showDynamicPartitionStatement()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 1007
                self.showEventsStatement()
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 1008
                self.showEnginesStatement()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 1009
                self.showFrontendsStatement()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 1010
                self.showPluginsStatement()
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 1011
                self.showRepositoriesStatement()
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 1012
                self.showOpenTableStatement()
                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 1013
                self.showPrivilegesStatement()
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 1014
                self.showProcedureStatement()
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 1015
                self.showProcStatement()
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 1016
                self.showProcesslistStatement()
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 1017
                self.showProfilelistStatement()
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 1018
                self.showRunningQueriesStatement()
                pass

            elif la_ == 125:
                self.enterOuterAlt(localctx, 125)
                self.state = 1019
                self.showStatusStatement()
                pass

            elif la_ == 126:
                self.enterOuterAlt(localctx, 126)
                self.state = 1020
                self.showTabletStatement()
                pass

            elif la_ == 127:
                self.enterOuterAlt(localctx, 127)
                self.state = 1021
                self.showTransactionStatement()
                pass

            elif la_ == 128:
                self.enterOuterAlt(localctx, 128)
                self.state = 1022
                self.showTriggersStatement()
                pass

            elif la_ == 129:
                self.enterOuterAlt(localctx, 129)
                self.state = 1023
                self.showUserPropertyStatement()
                pass

            elif la_ == 130:
                self.enterOuterAlt(localctx, 130)
                self.state = 1024
                self.showVariablesStatement()
                pass

            elif la_ == 131:
                self.enterOuterAlt(localctx, 131)
                self.state = 1025
                self.showWarningStatement()
                pass

            elif la_ == 132:
                self.enterOuterAlt(localctx, 132)
                self.state = 1026
                self.helpStatement()
                pass

            elif la_ == 133:
                self.enterOuterAlt(localctx, 133)
                self.state = 1027
                self.createUserStatement()
                pass

            elif la_ == 134:
                self.enterOuterAlt(localctx, 134)
                self.state = 1028
                self.dropUserStatement()
                pass

            elif la_ == 135:
                self.enterOuterAlt(localctx, 135)
                self.state = 1029
                self.alterUserStatement()
                pass

            elif la_ == 136:
                self.enterOuterAlt(localctx, 136)
                self.state = 1030
                self.showUserStatement()
                pass

            elif la_ == 137:
                self.enterOuterAlt(localctx, 137)
                self.state = 1031
                self.showAuthenticationStatement()
                pass

            elif la_ == 138:
                self.enterOuterAlt(localctx, 138)
                self.state = 1032
                self.executeAsStatement()
                pass

            elif la_ == 139:
                self.enterOuterAlt(localctx, 139)
                self.state = 1033
                self.createRoleStatement()
                pass

            elif la_ == 140:
                self.enterOuterAlt(localctx, 140)
                self.state = 1034
                self.alterRoleStatement()
                pass

            elif la_ == 141:
                self.enterOuterAlt(localctx, 141)
                self.state = 1035
                self.dropRoleStatement()
                pass

            elif la_ == 142:
                self.enterOuterAlt(localctx, 142)
                self.state = 1036
                self.showRolesStatement()
                pass

            elif la_ == 143:
                self.enterOuterAlt(localctx, 143)
                self.state = 1037
                self.grantRoleStatement()
                pass

            elif la_ == 144:
                self.enterOuterAlt(localctx, 144)
                self.state = 1038
                self.revokeRoleStatement()
                pass

            elif la_ == 145:
                self.enterOuterAlt(localctx, 145)
                self.state = 1039
                self.setRoleStatement()
                pass

            elif la_ == 146:
                self.enterOuterAlt(localctx, 146)
                self.state = 1040
                self.setDefaultRoleStatement()
                pass

            elif la_ == 147:
                self.enterOuterAlt(localctx, 147)
                self.state = 1041
                self.grantPrivilegeStatement()
                pass

            elif la_ == 148:
                self.enterOuterAlt(localctx, 148)
                self.state = 1042
                self.revokePrivilegeStatement()
                pass

            elif la_ == 149:
                self.enterOuterAlt(localctx, 149)
                self.state = 1043
                self.showGrantsStatement()
                pass

            elif la_ == 150:
                self.enterOuterAlt(localctx, 150)
                self.state = 1044
                self.backupStatement()
                pass

            elif la_ == 151:
                self.enterOuterAlt(localctx, 151)
                self.state = 1045
                self.cancelBackupStatement()
                pass

            elif la_ == 152:
                self.enterOuterAlt(localctx, 152)
                self.state = 1046
                self.showBackupStatement()
                pass

            elif la_ == 153:
                self.enterOuterAlt(localctx, 153)
                self.state = 1047
                self.restoreStatement()
                pass

            elif la_ == 154:
                self.enterOuterAlt(localctx, 154)
                self.state = 1048
                self.cancelRestoreStatement()
                pass

            elif la_ == 155:
                self.enterOuterAlt(localctx, 155)
                self.state = 1049
                self.showRestoreStatement()
                pass

            elif la_ == 156:
                self.enterOuterAlt(localctx, 156)
                self.state = 1050
                self.showSnapshotStatement()
                pass

            elif la_ == 157:
                self.enterOuterAlt(localctx, 157)
                self.state = 1051
                self.createRepositoryStatement()
                pass

            elif la_ == 158:
                self.enterOuterAlt(localctx, 158)
                self.state = 1052
                self.dropRepositoryStatement()
                pass

            elif la_ == 159:
                self.enterOuterAlt(localctx, 159)
                self.state = 1053
                self.addSqlBlackListStatement()
                pass

            elif la_ == 160:
                self.enterOuterAlt(localctx, 160)
                self.state = 1054
                self.delSqlBlackListStatement()
                pass

            elif la_ == 161:
                self.enterOuterAlt(localctx, 161)
                self.state = 1055
                self.showSqlBlackListStatement()
                pass

            elif la_ == 162:
                self.enterOuterAlt(localctx, 162)
                self.state = 1056
                self.showWhiteListStatement()
                pass

            elif la_ == 163:
                self.enterOuterAlt(localctx, 163)
                self.state = 1057
                self.addBackendBlackListStatement()
                pass

            elif la_ == 164:
                self.enterOuterAlt(localctx, 164)
                self.state = 1058
                self.delBackendBlackListStatement()
                pass

            elif la_ == 165:
                self.enterOuterAlt(localctx, 165)
                self.state = 1059
                self.showBackendBlackListStatement()
                pass

            elif la_ == 166:
                self.enterOuterAlt(localctx, 166)
                self.state = 1060
                self.createDataCacheRuleStatement()
                pass

            elif la_ == 167:
                self.enterOuterAlt(localctx, 167)
                self.state = 1061
                self.showDataCacheRulesStatement()
                pass

            elif la_ == 168:
                self.enterOuterAlt(localctx, 168)
                self.state = 1062
                self.dropDataCacheRuleStatement()
                pass

            elif la_ == 169:
                self.enterOuterAlt(localctx, 169)
                self.state = 1063
                self.clearDataCacheRulesStatement()
                pass

            elif la_ == 170:
                self.enterOuterAlt(localctx, 170)
                self.state = 1064
                self.dataCacheSelectStatement()
                pass

            elif la_ == 171:
                self.enterOuterAlt(localctx, 171)
                self.state = 1065
                self.exportStatement()
                pass

            elif la_ == 172:
                self.enterOuterAlt(localctx, 172)
                self.state = 1066
                self.cancelExportStatement()
                pass

            elif la_ == 173:
                self.enterOuterAlt(localctx, 173)
                self.state = 1067
                self.showExportStatement()
                pass

            elif la_ == 174:
                self.enterOuterAlt(localctx, 174)
                self.state = 1068
                self.installPluginStatement()
                pass

            elif la_ == 175:
                self.enterOuterAlt(localctx, 175)
                self.state = 1069
                self.uninstallPluginStatement()
                pass

            elif la_ == 176:
                self.enterOuterAlt(localctx, 176)
                self.state = 1070
                self.createFileStatement()
                pass

            elif la_ == 177:
                self.enterOuterAlt(localctx, 177)
                self.state = 1071
                self.dropFileStatement()
                pass

            elif la_ == 178:
                self.enterOuterAlt(localctx, 178)
                self.state = 1072
                self.showSmallFilesStatement()
                pass

            elif la_ == 179:
                self.enterOuterAlt(localctx, 179)
                self.state = 1073
                self.setStatement()
                pass

            elif la_ == 180:
                self.enterOuterAlt(localctx, 180)
                self.state = 1074
                self.setUserPropertyStatement()
                pass

            elif la_ == 181:
                self.enterOuterAlt(localctx, 181)
                self.state = 1075
                self.createStorageVolumeStatement()
                pass

            elif la_ == 182:
                self.enterOuterAlt(localctx, 182)
                self.state = 1076
                self.alterStorageVolumeStatement()
                pass

            elif la_ == 183:
                self.enterOuterAlt(localctx, 183)
                self.state = 1077
                self.dropStorageVolumeStatement()
                pass

            elif la_ == 184:
                self.enterOuterAlt(localctx, 184)
                self.state = 1078
                self.showStorageVolumesStatement()
                pass

            elif la_ == 185:
                self.enterOuterAlt(localctx, 185)
                self.state = 1079
                self.descStorageVolumeStatement()
                pass

            elif la_ == 186:
                self.enterOuterAlt(localctx, 186)
                self.state = 1080
                self.setDefaultStorageVolumeStatement()
                pass

            elif la_ == 187:
                self.enterOuterAlt(localctx, 187)
                self.state = 1081
                self.createPipeStatement()
                pass

            elif la_ == 188:
                self.enterOuterAlt(localctx, 188)
                self.state = 1082
                self.dropPipeStatement()
                pass

            elif la_ == 189:
                self.enterOuterAlt(localctx, 189)
                self.state = 1083
                self.alterPipeStatement()
                pass

            elif la_ == 190:
                self.enterOuterAlt(localctx, 190)
                self.state = 1084
                self.showPipeStatement()
                pass

            elif la_ == 191:
                self.enterOuterAlt(localctx, 191)
                self.state = 1085
                self.descPipeStatement()
                pass

            elif la_ == 192:
                self.enterOuterAlt(localctx, 192)
                self.state = 1086
                self.cancelCompactionStatement()
                pass

            elif la_ == 193:
                self.enterOuterAlt(localctx, 193)
                self.state = 1087
                self.updateFailPointStatusStatement()
                pass

            elif la_ == 194:
                self.enterOuterAlt(localctx, 194)
                self.state = 1088
                self.showFailPointStatement()
                pass

            elif la_ == 195:
                self.enterOuterAlt(localctx, 195)
                self.state = 1089
                self.prepareStatement()
                pass

            elif la_ == 196:
                self.enterOuterAlt(localctx, 196)
                self.state = 1090
                self.executeStatement()
                pass

            elif la_ == 197:
                self.enterOuterAlt(localctx, 197)
                self.state = 1091
                self.deallocateStatement()
                pass

            elif la_ == 198:
                self.enterOuterAlt(localctx, 198)
                self.state = 1092
                self.createDictionaryStatement()
                pass

            elif la_ == 199:
                self.enterOuterAlt(localctx, 199)
                self.state = 1093
                self.dropDictionaryStatement()
                pass

            elif la_ == 200:
                self.enterOuterAlt(localctx, 200)
                self.state = 1094
                self.refreshDictionaryStatement()
                pass

            elif la_ == 201:
                self.enterOuterAlt(localctx, 201)
                self.state = 1095
                self.showDictionaryStatement()
                pass

            elif la_ == 202:
                self.enterOuterAlt(localctx, 202)
                self.state = 1096
                self.cancelRefreshDictionaryStatement()
                pass

            elif la_ == 203:
                self.enterOuterAlt(localctx, 203)
                self.state = 1097
                self.unsupportedStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(StarRocksParser.USE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_useDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDatabaseStatement" ):
                listener.enterUseDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDatabaseStatement" ):
                listener.exitUseDatabaseStatement(self)




    def useDatabaseStatement(self):

        localctx = StarRocksParser.UseDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_useDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(StarRocksParser.USE)
            self.state = 1101
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseCatalogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(StarRocksParser.USE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_useCatalogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseCatalogStatement" ):
                listener.enterUseCatalogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseCatalogStatement" ):
                listener.exitUseCatalogStatement(self)




    def useCatalogStatement(self):

        localctx = StarRocksParser.UseCatalogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_useCatalogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(StarRocksParser.USE)
            self.state = 1104
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCatalogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_setCatalogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCatalogStatement" ):
                listener.enterSetCatalogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCatalogStatement" ):
                listener.exitSetCatalogStatement(self)




    def setCatalogStatement(self):

        localctx = StarRocksParser.SetCatalogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_setCatalogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(StarRocksParser.SET)
            self.state = 1107
            self.match(StarRocksParser.CATALOG)
            self.state = 1108
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDatabasesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(StarRocksParser.DATABASES, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def SCHEMAS(self):
            return self.getToken(StarRocksParser.SCHEMAS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showDatabasesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDatabasesStatement" ):
                listener.enterShowDatabasesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDatabasesStatement" ):
                listener.exitShowDatabasesStatement(self)




    def showDatabasesStatement(self):

        localctx = StarRocksParser.ShowDatabasesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_showDatabasesStatement)
        self._la = 0 # Token type
        try:
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.match(StarRocksParser.SHOW)
                self.state = 1111
                self.match(StarRocksParser.DATABASES)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153 or _la==182:
                    self.state = 1112
                    _la = self._input.LA(1)
                    if not(_la==153 or _la==182):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1113
                    localctx.catalog = self.qualifiedName()


                self.state = 1120
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [219]:
                    self.state = 1116
                    self.match(StarRocksParser.LIKE)
                    self.state = 1117
                    localctx.pattern = self.string_()
                    pass
                elif token in [444]:
                    self.state = 1118
                    self.match(StarRocksParser.WHERE)
                    self.state = 1119
                    self.expression(0)
                    pass
                elif token in [-1, 495]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(StarRocksParser.SHOW)
                self.state = 1123
                self.match(StarRocksParser.SCHEMAS)
                self.state = 1128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [219]:
                    self.state = 1124
                    self.match(StarRocksParser.LIKE)
                    self.state = 1125
                    localctx.pattern = self.string_()
                    pass
                elif token in [444]:
                    self.state = 1126
                    self.match(StarRocksParser.WHERE)
                    self.state = 1127
                    self.expression(0)
                    pass
                elif token in [-1, 495]:
                    pass
                else:
                    pass
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDbQuotaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def DATA(self):
            return self.getToken(StarRocksParser.DATA, 0)

        def QUOTA(self):
            return self.getToken(StarRocksParser.QUOTA, 0)

        def REPLICA(self):
            return self.getToken(StarRocksParser.REPLICA, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_alterDbQuotaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDbQuotaStatement" ):
                listener.enterAlterDbQuotaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDbQuotaStatement" ):
                listener.exitAlterDbQuotaStatement(self)




    def alterDbQuotaStatement(self):

        localctx = StarRocksParser.AlterDbQuotaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alterDbQuotaStatement)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1132
                self.match(StarRocksParser.ALTER)
                self.state = 1133
                self.match(StarRocksParser.DATABASE)
                self.state = 1134
                self.identifier()
                self.state = 1135
                self.match(StarRocksParser.SET)
                self.state = 1136
                self.match(StarRocksParser.DATA)
                self.state = 1137
                self.match(StarRocksParser.QUOTA)
                self.state = 1138
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.match(StarRocksParser.ALTER)
                self.state = 1141
                self.match(StarRocksParser.DATABASE)
                self.state = 1142
                self.identifier()
                self.state = 1143
                self.match(StarRocksParser.SET)
                self.state = 1144
                self.match(StarRocksParser.REPLICA)
                self.state = 1145
                self.match(StarRocksParser.QUOTA)
                self.state = 1146
                self.match(StarRocksParser.INTEGER_VALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDbStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # IdentifierContext
            self.database = None # IdentifierContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(StarRocksParser.SCHEMA, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def charsetDesc(self):
            return self.getTypedRuleContext(StarRocksParser.CharsetDescContext,0)


        def collateDesc(self):
            return self.getTypedRuleContext(StarRocksParser.CollateDescContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createDbStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDbStatement" ):
                listener.enterCreateDbStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDbStatement" ):
                listener.exitCreateDbStatement(self)




    def createDbStatement(self):

        localctx = StarRocksParser.CreateDbStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_createDbStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(StarRocksParser.CREATE)
            self.state = 1151
            _la = self._input.LA(1)
            if not(_la==88 or _la==357):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1152
                self.match(StarRocksParser.IF)
                self.state = 1153
                self.match(StarRocksParser.NOT)
                self.state = 1154
                self.match(StarRocksParser.EXISTS)


            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 1157
                localctx.catalog = self.identifier()
                self.state = 1158
                self.match(StarRocksParser.DOT)


            self.state = 1162
            localctx.database = self.identifier()
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 1163
                self.charsetDesc()


            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59 or _la==100:
                self.state = 1166
                self.collateDesc()


            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 1169
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDbStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # IdentifierContext
            self.database = None # IdentifierContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(StarRocksParser.SCHEMA, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropDbStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDbStatement" ):
                listener.enterDropDbStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDbStatement" ):
                listener.exitDropDbStatement(self)




    def dropDbStatement(self):

        localctx = StarRocksParser.DropDbStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dropDbStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(StarRocksParser.DROP)
            self.state = 1173
            _la = self._input.LA(1)
            if not(_la==88 or _la==357):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1174
                self.match(StarRocksParser.IF)
                self.state = 1175
                self.match(StarRocksParser.EXISTS)


            self.state = 1181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 1178
                localctx.catalog = self.identifier()
                self.state = 1179
                self.match(StarRocksParser.DOT)


            self.state = 1183
            localctx.database = self.identifier()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1184
                self.match(StarRocksParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateDbStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(StarRocksParser.SCHEMA, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showCreateDbStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDbStatement" ):
                listener.enterShowCreateDbStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDbStatement" ):
                listener.exitShowCreateDbStatement(self)




    def showCreateDbStatement(self):

        localctx = StarRocksParser.ShowCreateDbStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_showCreateDbStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(StarRocksParser.SHOW)
            self.state = 1188
            self.match(StarRocksParser.CREATE)
            self.state = 1189
            _la = self._input.LA(1)
            if not(_la==88 or _la==357):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1190
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseRenameStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def RENAME(self):
            return self.getToken(StarRocksParser.RENAME, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_alterDatabaseRenameStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseRenameStatement" ):
                listener.enterAlterDatabaseRenameStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseRenameStatement" ):
                listener.exitAlterDatabaseRenameStatement(self)




    def alterDatabaseRenameStatement(self):

        localctx = StarRocksParser.AlterDatabaseRenameStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterDatabaseRenameStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(StarRocksParser.ALTER)
            self.state = 1193
            self.match(StarRocksParser.DATABASE)
            self.state = 1194
            self.identifier()
            self.state = 1195
            self.match(StarRocksParser.RENAME)
            self.state = 1196
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecoverDbStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVER(self):
            return self.getToken(StarRocksParser.RECOVER, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(StarRocksParser.SCHEMA, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_recoverDbStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverDbStmt" ):
                listener.enterRecoverDbStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverDbStmt" ):
                listener.exitRecoverDbStmt(self)




    def recoverDbStmt(self):

        localctx = StarRocksParser.RecoverDbStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_recoverDbStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(StarRocksParser.RECOVER)
            self.state = 1199
            _la = self._input.LA(1)
            if not(_la==88 or _la==357):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1200
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDataStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def DATA(self):
            return self.getToken(StarRocksParser.DATA, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showDataStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDataStmt" ):
                listener.enterShowDataStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDataStmt" ):
                listener.exitShowDataStmt(self)




    def showDataStmt(self):

        localctx = StarRocksParser.ShowDataStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_showDataStmt)
        try:
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(StarRocksParser.SHOW)
                self.state = 1203
                self.match(StarRocksParser.DATA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.match(StarRocksParser.SHOW)
                self.state = 1205
                self.match(StarRocksParser.DATA)
                self.state = 1206
                self.match(StarRocksParser.FROM)
                self.state = 1207
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def columnDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ColumnDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ColumnDescContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def indexDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IndexDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IndexDescContext,i)


        def engineDesc(self):
            return self.getTypedRuleContext(StarRocksParser.EngineDescContext,0)


        def charsetDesc(self):
            return self.getTypedRuleContext(StarRocksParser.CharsetDescContext,0)


        def keyDesc(self):
            return self.getTypedRuleContext(StarRocksParser.KeyDescContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def partitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionDescContext,0)


        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def orderByDesc(self):
            return self.getTypedRuleContext(StarRocksParser.OrderByDescContext,0)


        def rollupDesc(self):
            return self.getTypedRuleContext(StarRocksParser.RollupDescContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def extProperties(self):
            return self.getTypedRuleContext(StarRocksParser.ExtPropertiesContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableStatement" ):
                listener.enterCreateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableStatement" ):
                listener.exitCreateTableStatement(self)




    def createTableStatement(self):

        localctx = StarRocksParser.CreateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(StarRocksParser.CREATE)
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==396:
                self.state = 1211
                _la = self._input.LA(1)
                if not(_la==132 or _la==396):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1214
            self.match(StarRocksParser.TABLE)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1215
                self.match(StarRocksParser.IF)
                self.state = 1216
                self.match(StarRocksParser.NOT)
                self.state = 1217
                self.match(StarRocksParser.EXISTS)


            self.state = 1220
            self.qualifiedName()
            self.state = 1221
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 1222
            self.columnDesc()
            self.state = 1227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1223
                    self.match(StarRocksParser.COMMA)
                    self.state = 1224
                    self.columnDesc() 
                self.state = 1229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 1230
                self.match(StarRocksParser.COMMA)
                self.state = 1231
                self.indexDesc()
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1237
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 1238
                self.engineDesc()


            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 562949953421319) != 0):
                self.state = 1241
                self.charsetDesc()


            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==116 or _la==297 or _la==418:
                self.state = 1244
                self.keyDesc()


            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1247
                self.comment()


            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1250
                self.partitionDesc()


            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1253
                self.distributionDesc()


            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 1256
                self.orderByDesc()


            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==346:
                self.state = 1259
                self.rollupDesc()


            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 1262
                self.properties()


            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1265
                self.extProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(StarRocksParser.TypeContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(StarRocksParser.CharsetNameContext,0)


        def KEY(self):
            return self.getToken(StarRocksParser.KEY, 0)

        def aggDesc(self):
            return self.getTypedRuleContext(StarRocksParser.AggDescContext,0)


        def NULL_(self):
            return self.getToken(StarRocksParser.NULL_, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def defaultDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DefaultDescContext,0)


        def AUTO_INCREMENT(self):
            return self.getToken(StarRocksParser.AUTO_INCREMENT, 0)

        def generatedColumnDesc(self):
            return self.getTypedRuleContext(StarRocksParser.GeneratedColumnDescContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_columnDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDesc" ):
                listener.enterColumnDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDesc" ):
                listener.exitColumnDesc(self)




    def columnDesc(self):

        localctx = StarRocksParser.ColumnDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_columnDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.identifier()
            self.state = 1269
            self.type_()
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15762598695796736) != 0):
                self.state = 1270
                self.charsetName()


            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 1273
                self.match(StarRocksParser.KEY)


            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33 or _la==172 or ((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 1125899906842657) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 72057594037927939) != 0):
                self.state = 1276
                self.aggDesc()


            self.state = 1282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [259]:
                self.state = 1279
                self.match(StarRocksParser.NULL_)
                pass
            elif token in [258]:
                self.state = 1280
                self.match(StarRocksParser.NOT)
                self.state = 1281
                self.match(StarRocksParser.NULL_)
                pass
            elif token in [-1, 6, 17, 22, 63, 100, 142, 153, 182, 306, 407, 495, 499, 500]:
                pass
            else:
                pass
            self.state = 1287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.state = 1284
                self.defaultDesc()
                pass
            elif token in [22]:
                self.state = 1285
                self.match(StarRocksParser.AUTO_INCREMENT)
                pass
            elif token in [17]:
                self.state = 1286
                self.generatedColumnDesc()
                pass
            elif token in [-1, 6, 63, 142, 153, 182, 306, 407, 495, 499, 500]:
                pass
            else:
                pass
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1289
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(StarRocksParser.CHAR, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def CHARSET(self):
            return self.getToken(StarRocksParser.CHARSET, 0)

        def CHARACTER(self):
            return self.getToken(StarRocksParser.CHARACTER, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = StarRocksParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_charsetName)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.match(StarRocksParser.CHAR)
                self.state = 1293
                self.match(StarRocksParser.SET)
                self.state = 1294
                self.identifier()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.match(StarRocksParser.CHARSET)
                self.state = 1296
                self.identifier()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1297
                self.match(StarRocksParser.CHARACTER)
                self.state = 1298
                self.match(StarRocksParser.SET)
                self.state = 1299
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def NULL_(self):
            return self.getToken(StarRocksParser.NULL_, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(StarRocksParser.CURRENT_TIMESTAMP, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_defaultDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultDesc" ):
                listener.enterDefaultDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultDesc" ):
                listener.exitDefaultDesc(self)




    def defaultDesc(self):

        localctx = StarRocksParser.DefaultDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_defaultDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(StarRocksParser.DEFAULT)
            self.state = 1312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [484, 485]:
                self.state = 1303
                self.string_()
                pass
            elif token in [259]:
                self.state = 1304
                self.match(StarRocksParser.NULL_)
                pass
            elif token in [84]:
                self.state = 1305
                self.match(StarRocksParser.CURRENT_TIMESTAMP)
                pass
            elif token in [498]:
                self.state = 1306
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1307
                self.qualifiedName()
                self.state = 1308
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1309
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 1310
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratedColumnDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_generatedColumnDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratedColumnDesc" ):
                listener.enterGeneratedColumnDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratedColumnDesc" ):
                listener.exitGeneratedColumnDesc(self)




    def generatedColumnDesc(self):

        localctx = StarRocksParser.GeneratedColumnDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_generatedColumnDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(StarRocksParser.AS)
            self.state = 1315
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexName = None # IdentifierContext

        def INDEX(self):
            return self.getToken(StarRocksParser.INDEX, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def indexType(self):
            return self.getTypedRuleContext(StarRocksParser.IndexTypeContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_indexDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDesc" ):
                listener.enterIndexDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDesc" ):
                listener.exitIndexDesc(self)




    def indexDesc(self):

        localctx = StarRocksParser.IndexDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_indexDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self.match(StarRocksParser.INDEX)
            self.state = 1318
            localctx.indexName = self.identifier()
            self.state = 1319
            self.identifierList()
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==427:
                self.state = 1320
                self.indexType()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 1321
                    self.propertyList()




            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1326
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINE(self):
            return self.getToken(StarRocksParser.ENGINE, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_engineDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineDesc" ):
                listener.enterEngineDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineDesc" ):
                listener.exitEngineDesc(self)




    def engineDesc(self):

        localctx = StarRocksParser.EngineDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_engineDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(StarRocksParser.ENGINE)
            self.state = 1330
            self.match(StarRocksParser.EQ)
            self.state = 1331
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def CHAR(self):
            return self.getToken(StarRocksParser.CHAR, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def CHARSET(self):
            return self.getToken(StarRocksParser.CHARSET, 0)

        def CHARACTER(self):
            return self.getToken(StarRocksParser.CHARACTER, 0)

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_charsetDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetDesc" ):
                listener.enterCharsetDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetDesc" ):
                listener.exitCharsetDesc(self)




    def charsetDesc(self):

        localctx = StarRocksParser.CharsetDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_charsetDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 1333
                self.match(StarRocksParser.DEFAULT)


            self.state = 1341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 1336
                self.match(StarRocksParser.CHAR)
                self.state = 1337
                self.match(StarRocksParser.SET)
                pass
            elif token in [53]:
                self.state = 1338
                self.match(StarRocksParser.CHARSET)
                pass
            elif token in [52]:
                self.state = 1339
                self.match(StarRocksParser.CHARACTER)
                self.state = 1340
                self.match(StarRocksParser.SET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==455:
                self.state = 1343
                self.match(StarRocksParser.EQ)


            self.state = 1346
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollateDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(StarRocksParser.COLLATE, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_collateDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateDesc" ):
                listener.enterCollateDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateDesc" ):
                listener.exitCollateDesc(self)




    def collateDesc(self):

        localctx = StarRocksParser.CollateDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_collateDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 1348
                self.match(StarRocksParser.DEFAULT)


            self.state = 1351
            self.match(StarRocksParser.COLLATE)
            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==455:
                self.state = 1352
                self.match(StarRocksParser.EQ)


            self.state = 1355
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(StarRocksParser.KEY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def AGGREGATE(self):
            return self.getToken(StarRocksParser.AGGREGATE, 0)

        def UNIQUE(self):
            return self.getToken(StarRocksParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(StarRocksParser.PRIMARY, 0)

        def DUPLICATE(self):
            return self.getToken(StarRocksParser.DUPLICATE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_keyDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyDesc" ):
                listener.enterKeyDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyDesc" ):
                listener.exitKeyDesc(self)




    def keyDesc(self):

        localctx = StarRocksParser.KeyDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_keyDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            _la = self._input.LA(1)
            if not(_la==7 or _la==116 or _la==297 or _la==418):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1358
            self.match(StarRocksParser.KEY)
            self.state = 1359
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_orderByDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByDesc" ):
                listener.enterOrderByDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByDesc" ):
                listener.exitOrderByDesc(self)




    def orderByDesc(self):

        localctx = StarRocksParser.OrderByDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_orderByDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(StarRocksParser.ORDER)
            self.state = 1362
            self.match(StarRocksParser.BY)
            self.state = 1363
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(StarRocksParser.SUM, 0)

        def MAX(self):
            return self.getToken(StarRocksParser.MAX, 0)

        def MIN(self):
            return self.getToken(StarRocksParser.MIN, 0)

        def REPLACE(self):
            return self.getToken(StarRocksParser.REPLACE, 0)

        def HLL_UNION(self):
            return self.getToken(StarRocksParser.HLL_UNION, 0)

        def BITMAP_UNION(self):
            return self.getToken(StarRocksParser.BITMAP_UNION, 0)

        def PERCENTILE_UNION(self):
            return self.getToken(StarRocksParser.PERCENTILE_UNION, 0)

        def REPLACE_IF_NOT_NULL(self):
            return self.getToken(StarRocksParser.REPLACE_IF_NOT_NULL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_aggDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggDesc" ):
                listener.enterAggDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggDesc" ):
                listener.exitAggDesc(self)




    def aggDesc(self):

        localctx = StarRocksParser.AggDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_aggDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            _la = self._input.LA(1)
            if not(_la==33 or _la==172 or ((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 1125899906842657) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 72057594037927939) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def rollupItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.RollupItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.RollupItemContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_rollupDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupDesc" ):
                listener.enterRollupDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupDesc" ):
                listener.exitRollupDesc(self)




    def rollupDesc(self):

        localctx = StarRocksParser.RollupDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rollupDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(StarRocksParser.ROLLUP)
            self.state = 1368
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 1369
            self.rollupItem()
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 1370
                self.match(StarRocksParser.COMMA)
                self.state = 1371
                self.rollupItem()
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1377
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def dupKeys(self):
            return self.getTypedRuleContext(StarRocksParser.DupKeysContext,0)


        def fromRollup(self):
            return self.getTypedRuleContext(StarRocksParser.FromRollupContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_rollupItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupItem" ):
                listener.enterRollupItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupItem" ):
                listener.exitRollupItem(self)




    def rollupItem(self):

        localctx = StarRocksParser.RollupItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rollupItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            localctx.rollupName = self.identifier()
            self.state = 1380
            self.identifierList()
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1381
                self.dupKeys()


            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1384
                self.fromRollup()


            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 1387
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DupKeysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DUPLICATE(self):
            return self.getToken(StarRocksParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(StarRocksParser.KEY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dupKeys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDupKeys" ):
                listener.enterDupKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDupKeys" ):
                listener.exitDupKeys(self)




    def dupKeys(self):

        localctx = StarRocksParser.DupKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dupKeys)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(StarRocksParser.DUPLICATE)
            self.state = 1391
            self.match(StarRocksParser.KEY)
            self.state = 1392
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromRollupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_fromRollup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromRollup" ):
                listener.enterFromRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromRollup" ):
                listener.exitFromRollup(self)




    def fromRollup(self):

        localctx = StarRocksParser.FromRollupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fromRollup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(StarRocksParser.FROM)
            self.state = 1395
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(StarRocksParser.OR, 0)

        def REPLACE(self):
            return self.getToken(StarRocksParser.REPLACE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_orReplace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrReplace" ):
                listener.enterOrReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrReplace" ):
                listener.exitOrReplace(self)




    def orReplace(self):

        localctx = StarRocksParser.OrReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_orReplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 1397
                self.match(StarRocksParser.OR)
                self.state = 1398
                self.match(StarRocksParser.REPLACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = StarRocksParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_ifNotExists)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1401
                self.match(StarRocksParser.IF)
                self.state = 1402
                self.match(StarRocksParser.NOT)
                self.state = 1403
                self.match(StarRocksParser.EXISTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableAsSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def queryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.QueryStatementContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def keyDesc(self):
            return self.getTypedRuleContext(StarRocksParser.KeyDescContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def partitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionDescContext,0)


        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def orderByDesc(self):
            return self.getTypedRuleContext(StarRocksParser.OrderByDescContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def indexDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IndexDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IndexDescContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createTableAsSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelectStatement" ):
                listener.enterCreateTableAsSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelectStatement" ):
                listener.exitCreateTableAsSelectStatement(self)




    def createTableAsSelectStatement(self):

        localctx = StarRocksParser.CreateTableAsSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createTableAsSelectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(StarRocksParser.CREATE)
            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==396:
                self.state = 1407
                self.match(StarRocksParser.TEMPORARY)


            self.state = 1410
            self.match(StarRocksParser.TABLE)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1411
                self.match(StarRocksParser.IF)
                self.state = 1412
                self.match(StarRocksParser.NOT)
                self.state = 1413
                self.match(StarRocksParser.EXISTS)


            self.state = 1416
            self.qualifiedName()
            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 1417
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                    self.state = 1418
                    self.identifier()
                    self.state = 1423
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1419
                            self.match(StarRocksParser.COMMA)
                            self.state = 1420
                            self.identifier() 
                        self.state = 1425
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 1426
                        self.match(StarRocksParser.COMMA)
                        self.state = 1427
                        self.indexDesc()
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [185]:
                    self.state = 1433
                    self.indexDesc()
                    self.state = 1438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 1434
                        self.match(StarRocksParser.COMMA)
                        self.state = 1435
                        self.indexDesc()
                        self.state = 1440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1443
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==116 or _la==297 or _la==418:
                self.state = 1447
                self.keyDesc()


            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1450
                self.comment()


            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1453
                self.partitionDesc()


            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1456
                self.distributionDesc()


            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 1459
                self.orderByDesc()


            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 1462
                self.properties()


            self.state = 1465
            self.match(StarRocksParser.AS)
            self.state = 1466
            self.queryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableStatement" ):
                listener.enterDropTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableStatement" ):
                listener.exitDropTableStatement(self)




    def dropTableStatement(self):

        localctx = StarRocksParser.DropTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dropTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(StarRocksParser.DROP)
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==396:
                self.state = 1469
                self.match(StarRocksParser.TEMPORARY)


            self.state = 1472
            self.match(StarRocksParser.TABLE)
            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1473
                self.match(StarRocksParser.IF)
                self.state = 1474
                self.match(StarRocksParser.EXISTS)


            self.state = 1477
            self.qualifiedName()
            self.state = 1479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1478
                self.match(StarRocksParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CleanTemporaryTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEAN(self):
            return self.getToken(StarRocksParser.CLEAN, 0)

        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def SESSION(self):
            return self.getToken(StarRocksParser.SESSION, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_cleanTemporaryTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCleanTemporaryTableStatement" ):
                listener.enterCleanTemporaryTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCleanTemporaryTableStatement" ):
                listener.exitCleanTemporaryTableStatement(self)




    def cleanTemporaryTableStatement(self):

        localctx = StarRocksParser.CleanTemporaryTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_cleanTemporaryTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(StarRocksParser.CLEAN)
            self.state = 1482
            self.match(StarRocksParser.TEMPORARY)
            self.state = 1483
            self.match(StarRocksParser.TABLE)
            self.state = 1484
            self.match(StarRocksParser.ON)
            self.state = 1485
            self.match(StarRocksParser.SESSION)
            self.state = 1486
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def alterClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.AlterClauseContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.AlterClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)

        def rollupItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.RollupItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.RollupItemContext,i)


        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableStatement" ):
                listener.enterAlterTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableStatement" ):
                listener.exitAlterTableStatement(self)




    def alterTableStatement(self):

        localctx = StarRocksParser.AlterTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alterTableStatement)
        self._la = 0 # Token type
        try:
            self.state = 1525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.match(StarRocksParser.ALTER)
                self.state = 1489
                self.match(StarRocksParser.TABLE)
                self.state = 1490
                self.qualifiedName()
                self.state = 1491
                self.alterClause()
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1492
                    self.match(StarRocksParser.COMMA)
                    self.state = 1493
                    self.alterClause()
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self.match(StarRocksParser.ALTER)
                self.state = 1500
                self.match(StarRocksParser.TABLE)
                self.state = 1501
                self.qualifiedName()
                self.state = 1502
                self.match(StarRocksParser.ADD)
                self.state = 1503
                self.match(StarRocksParser.ROLLUP)
                self.state = 1504
                self.rollupItem()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1505
                    self.match(StarRocksParser.COMMA)
                    self.state = 1506
                    self.rollupItem()
                    self.state = 1511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1512
                self.match(StarRocksParser.ALTER)
                self.state = 1513
                self.match(StarRocksParser.TABLE)
                self.state = 1514
                self.qualifiedName()
                self.state = 1515
                self.match(StarRocksParser.DROP)
                self.state = 1516
                self.match(StarRocksParser.ROLLUP)
                self.state = 1517
                self.identifier()
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1518
                    self.match(StarRocksParser.COMMA)
                    self.state = 1519
                    self.identifier()
                    self.state = 1524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexName = None # IdentifierContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(StarRocksParser.INDEX, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def indexType(self):
            return self.getTypedRuleContext(StarRocksParser.IndexTypeContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndexStatement" ):
                listener.enterCreateIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndexStatement" ):
                listener.exitCreateIndexStatement(self)




    def createIndexStatement(self):

        localctx = StarRocksParser.CreateIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(StarRocksParser.CREATE)
            self.state = 1528
            self.match(StarRocksParser.INDEX)
            self.state = 1529
            localctx.indexName = self.identifier()
            self.state = 1530
            self.match(StarRocksParser.ON)
            self.state = 1531
            self.qualifiedName()
            self.state = 1532
            self.identifierList()
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==427:
                self.state = 1533
                self.indexType()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 1534
                    self.propertyList()




            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1539
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexName = None # IdentifierContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def INDEX(self):
            return self.getToken(StarRocksParser.INDEX, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndexStatement" ):
                listener.enterDropIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndexStatement" ):
                listener.exitDropIndexStatement(self)




    def dropIndexStatement(self):

        localctx = StarRocksParser.DropIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dropIndexStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.match(StarRocksParser.DROP)
            self.state = 1543
            self.match(StarRocksParser.INDEX)
            self.state = 1544
            localctx.indexName = self.identifier()
            self.state = 1545
            self.match(StarRocksParser.ON)
            self.state = 1546
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(StarRocksParser.USING, 0)

        def BITMAP(self):
            return self.getToken(StarRocksParser.BITMAP, 0)

        def GIN(self):
            return self.getToken(StarRocksParser.GIN, 0)

        def NGRAMBF(self):
            return self.getToken(StarRocksParser.NGRAMBF, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = StarRocksParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(StarRocksParser.USING)
            self.state = 1549
            _la = self._input.LA(1)
            if not(_la==32 or _la==199 or _la==253):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableStatement" ):
                listener.enterShowTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableStatement" ):
                listener.exitShowTableStatement(self)




    def showTableStatement(self):

        localctx = StarRocksParser.ShowTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_showTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(StarRocksParser.SHOW)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1552
                self.match(StarRocksParser.FULL)


            self.state = 1555
            self.match(StarRocksParser.TABLES)
            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 1556
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1557
                localctx.db = self.qualifiedName()


            self.state = 1564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 1560
                self.match(StarRocksParser.LIKE)
                self.state = 1561
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 1562
                self.match(StarRocksParser.WHERE)
                self.state = 1563
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTemporaryTablesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showTemporaryTablesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTemporaryTablesStatement" ):
                listener.enterShowTemporaryTablesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTemporaryTablesStatement" ):
                listener.exitShowTemporaryTablesStatement(self)




    def showTemporaryTablesStatement(self):

        localctx = StarRocksParser.ShowTemporaryTablesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_showTemporaryTablesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(StarRocksParser.SHOW)
            self.state = 1567
            self.match(StarRocksParser.TEMPORARY)
            self.state = 1568
            self.match(StarRocksParser.TABLES)
            self.state = 1571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 1569
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1570
                localctx.db = self.qualifiedName()


            self.state = 1577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 1573
                self.match(StarRocksParser.LIKE)
                self.state = 1574
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 1575
                self.match(StarRocksParser.WHERE)
                self.state = 1576
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showCreateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTableStatement" ):
                listener.enterShowCreateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTableStatement" ):
                listener.exitShowCreateTableStatement(self)




    def showCreateTableStatement(self):

        localctx = StarRocksParser.ShowCreateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_showCreateTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.match(StarRocksParser.SHOW)
            self.state = 1580
            self.match(StarRocksParser.CREATE)
            self.state = 1585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [391]:
                self.state = 1581
                self.match(StarRocksParser.TABLE)
                pass
            elif token in [435]:
                self.state = 1582
                self.match(StarRocksParser.VIEW)
                pass
            elif token in [236]:
                self.state = 1583
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 1584
                self.match(StarRocksParser.VIEW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1587
            localctx.table = self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowColumnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # QualifiedNameContext
            self.db = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def COLUMNS(self):
            return self.getToken(StarRocksParser.COLUMNS, 0)

        def FIELDS(self):
            return self.getToken(StarRocksParser.FIELDS, 0)

        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.FROM)
            else:
                return self.getToken(StarRocksParser.FROM, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.IN)
            else:
                return self.getToken(StarRocksParser.IN, i)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showColumnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumnStatement" ):
                listener.enterShowColumnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumnStatement" ):
                listener.exitShowColumnStatement(self)




    def showColumnStatement(self):

        localctx = StarRocksParser.ShowColumnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_showColumnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(StarRocksParser.SHOW)
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1590
                self.match(StarRocksParser.FULL)


            self.state = 1593
            _la = self._input.LA(1)
            if not(_la==62 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 1594
            _la = self._input.LA(1)
            if not(_la==153 or _la==182):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1595
            localctx.table = self.qualifiedName()
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 1597
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1598
                localctx.db = self.qualifiedName()


            self.state = 1605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 1601
                self.match(StarRocksParser.LIKE)
                self.state = 1602
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 1603
                self.match(StarRocksParser.WHERE)
                self.state = 1604
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTableStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showTableStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableStatusStatement" ):
                listener.enterShowTableStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableStatusStatement" ):
                listener.exitShowTableStatusStatement(self)




    def showTableStatusStatement(self):

        localctx = StarRocksParser.ShowTableStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_showTableStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.match(StarRocksParser.SHOW)
            self.state = 1608
            self.match(StarRocksParser.TABLE)
            self.state = 1609
            self.match(StarRocksParser.STATUS)
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 1610
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1611
                localctx.db = self.qualifiedName()


            self.state = 1618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 1614
                self.match(StarRocksParser.LIKE)
                self.state = 1615
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 1616
                self.match(StarRocksParser.WHERE)
                self.state = 1617
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefreshTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_refreshTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTableStatement" ):
                listener.enterRefreshTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTableStatement" ):
                listener.exitRefreshTableStatement(self)




    def refreshTableStatement(self):

        localctx = StarRocksParser.RefreshTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_refreshTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(StarRocksParser.REFRESH)
            self.state = 1621
            self.match(StarRocksParser.EXTERNAL)
            self.state = 1622
            self.match(StarRocksParser.TABLE)
            self.state = 1623
            self.qualifiedName()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1624
                self.match(StarRocksParser.PARTITION)
                self.state = 1625
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1626
                self.string_()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1627
                    self.match(StarRocksParser.COMMA)
                    self.state = 1628
                    self.string_()
                    self.state = 1633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1634
                self.match(StarRocksParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowAlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)

        def OPTIMIZE(self):
            return self.getToken(StarRocksParser.OPTIMIZE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showAlterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAlterStatement" ):
                listener.enterShowAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAlterStatement" ):
                listener.exitShowAlterStatement(self)




    def showAlterStatement(self):

        localctx = StarRocksParser.ShowAlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_showAlterStatement)
        self._la = 0 # Token type
        try:
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.match(StarRocksParser.SHOW)
                self.state = 1639
                self.match(StarRocksParser.ALTER)
                self.state = 1640
                self.match(StarRocksParser.TABLE)
                self.state = 1641
                _la = self._input.LA(1)
                if not(_la==61 or _la==270 or _la==346):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153 or _la==182:
                    self.state = 1642
                    _la = self._input.LA(1)
                    if not(_la==153 or _la==182):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1643
                    localctx.db = self.qualifiedName()


                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 1646
                    self.match(StarRocksParser.WHERE)
                    self.state = 1647
                    self.expression(0)


                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 1650
                    self.match(StarRocksParser.ORDER)
                    self.state = 1651
                    self.match(StarRocksParser.BY)
                    self.state = 1652
                    self.sortItem()
                    self.state = 1657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 1653
                        self.match(StarRocksParser.COMMA)
                        self.state = 1654
                        self.sortItem()
                        self.state = 1659
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 1662
                    self.limitElement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.match(StarRocksParser.SHOW)
                self.state = 1666
                self.match(StarRocksParser.ALTER)
                self.state = 1667
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 1668
                self.match(StarRocksParser.VIEW)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153 or _la==182:
                    self.state = 1669
                    _la = self._input.LA(1)
                    if not(_la==153 or _la==182):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1670
                    localctx.db = self.qualifiedName()


                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 1673
                    self.match(StarRocksParser.WHERE)
                    self.state = 1674
                    self.expression(0)


                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 1677
                    self.match(StarRocksParser.ORDER)
                    self.state = 1678
                    self.match(StarRocksParser.BY)
                    self.state = 1679
                    self.sortItem()
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 1680
                        self.match(StarRocksParser.COMMA)
                        self.state = 1681
                        self.sortItem()
                        self.state = 1686
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 1689
                    self.limitElement()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # QualifiedNameContext

        def DESC(self):
            return self.getToken(StarRocksParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(StarRocksParser.DESCRIBE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_descTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescTableStatement" ):
                listener.enterDescTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescTableStatement" ):
                listener.exitDescTableStatement(self)




    def descTableStatement(self):

        localctx = StarRocksParser.DescTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_descTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            _la = self._input.LA(1)
            if not(_la==107 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1695
            localctx.table = self.qualifiedName()
            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1696
                self.match(StarRocksParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableLikeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def partitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionDescContext,0)


        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createTableLikeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLikeStatement" ):
                listener.enterCreateTableLikeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLikeStatement" ):
                listener.exitCreateTableLikeStatement(self)




    def createTableLikeStatement(self):

        localctx = StarRocksParser.CreateTableLikeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_createTableLikeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.match(StarRocksParser.CREATE)
            self.state = 1701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==396:
                self.state = 1700
                _la = self._input.LA(1)
                if not(_la==132 or _la==396):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1703
            self.match(StarRocksParser.TABLE)
            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1704
                self.match(StarRocksParser.IF)
                self.state = 1705
                self.match(StarRocksParser.NOT)
                self.state = 1706
                self.match(StarRocksParser.EXISTS)


            self.state = 1709
            self.qualifiedName()
            self.state = 1711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1710
                self.partitionDesc()


            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1713
                self.distributionDesc()


            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 1716
                self.properties()


            self.state = 1719
            self.match(StarRocksParser.LIKE)
            self.state = 1720
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # QualifiedNameContext
            self.db = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def INDEX(self):
            return self.getToken(StarRocksParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(StarRocksParser.INDEXES, 0)

        def KEY(self):
            return self.getToken(StarRocksParser.KEY, 0)

        def KEYS(self):
            return self.getToken(StarRocksParser.KEYS, 0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.FROM)
            else:
                return self.getToken(StarRocksParser.FROM, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.IN)
            else:
                return self.getToken(StarRocksParser.IN, i)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexStatement" ):
                listener.enterShowIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexStatement" ):
                listener.exitShowIndexStatement(self)




    def showIndexStatement(self):

        localctx = StarRocksParser.ShowIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_showIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.match(StarRocksParser.SHOW)
            self.state = 1723
            _la = self._input.LA(1)
            if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 6291459) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 1724
            _la = self._input.LA(1)
            if not(_la==153 or _la==182):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1725
            localctx.table = self.qualifiedName()
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 1727
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1728
                localctx.db = self.qualifiedName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecoverTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVER(self):
            return self.getToken(StarRocksParser.RECOVER, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_recoverTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverTableStatement" ):
                listener.enterRecoverTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverTableStatement" ):
                listener.exitRecoverTableStatement(self)




    def recoverTableStatement(self):

        localctx = StarRocksParser.RecoverTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_recoverTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.match(StarRocksParser.RECOVER)
            self.state = 1732
            self.match(StarRocksParser.TABLE)
            self.state = 1733
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(StarRocksParser.TRUNCATE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_truncateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTableStatement" ):
                listener.enterTruncateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTableStatement" ):
                listener.exitTruncateTableStatement(self)




    def truncateTableStatement(self):

        localctx = StarRocksParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_truncateTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(StarRocksParser.TRUNCATE)
            self.state = 1736
            self.match(StarRocksParser.TABLE)
            self.state = 1737
            self.qualifiedName()
            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 1738
                self.partitionNames()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelAlterTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)

        def OPTIMIZE(self):
            return self.getToken(StarRocksParser.OPTIMIZE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelAlterTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelAlterTableStatement" ):
                listener.enterCancelAlterTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelAlterTableStatement" ):
                listener.exitCancelAlterTableStatement(self)




    def cancelAlterTableStatement(self):

        localctx = StarRocksParser.CancelAlterTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_cancelAlterTableStatement)
        self._la = 0 # Token type
        try:
            self.state = 1767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1741
                self.match(StarRocksParser.CANCEL)
                self.state = 1742
                self.match(StarRocksParser.ALTER)
                self.state = 1743
                self.match(StarRocksParser.TABLE)
                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61 or _la==270 or _la==346:
                    self.state = 1744
                    _la = self._input.LA(1)
                    if not(_la==61 or _la==270 or _la==346):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1747
                self.match(StarRocksParser.FROM)
                self.state = 1748
                self.qualifiedName()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 1749
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 1750
                    self.match(StarRocksParser.INTEGER_VALUE)
                    self.state = 1755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 1751
                        self.match(StarRocksParser.COMMA)
                        self.state = 1752
                        self.match(StarRocksParser.INTEGER_VALUE)
                        self.state = 1757
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1758
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1761
                self.match(StarRocksParser.CANCEL)
                self.state = 1762
                self.match(StarRocksParser.ALTER)
                self.state = 1763
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 1764
                self.match(StarRocksParser.VIEW)
                self.state = 1765
                self.match(StarRocksParser.FROM)
                self.state = 1766
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPartitionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PARTITIONS(self):
            return self.getToken(StarRocksParser.PARTITIONS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showPartitionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitionsStatement" ):
                listener.enterShowPartitionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitionsStatement" ):
                listener.exitShowPartitionsStatement(self)




    def showPartitionsStatement(self):

        localctx = StarRocksParser.ShowPartitionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_showPartitionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(StarRocksParser.SHOW)
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==396:
                self.state = 1770
                self.match(StarRocksParser.TEMPORARY)


            self.state = 1773
            self.match(StarRocksParser.PARTITIONS)
            self.state = 1774
            self.match(StarRocksParser.FROM)
            self.state = 1775
            localctx.table = self.qualifiedName()
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 1776
                self.match(StarRocksParser.WHERE)
                self.state = 1777
                self.expression(0)


            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 1780
                self.match(StarRocksParser.ORDER)
                self.state = 1781
                self.match(StarRocksParser.BY)
                self.state = 1782
                self.sortItem()
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1783
                    self.match(StarRocksParser.COMMA)
                    self.state = 1784
                    self.sortItem()
                    self.state = 1789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 1792
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecoverPartitionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # QualifiedNameContext

        def RECOVER(self):
            return self.getToken(StarRocksParser.RECOVER, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_recoverPartitionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitionStatement" ):
                listener.enterRecoverPartitionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitionStatement" ):
                listener.exitRecoverPartitionStatement(self)




    def recoverPartitionStatement(self):

        localctx = StarRocksParser.RecoverPartitionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_recoverPartitionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(StarRocksParser.RECOVER)
            self.state = 1796
            self.match(StarRocksParser.PARTITION)
            self.state = 1797
            self.identifier()
            self.state = 1798
            self.match(StarRocksParser.FROM)
            self.state = 1799
            localctx.table = self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def queryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.QueryStatementContext,0)


        def OR(self):
            return self.getToken(StarRocksParser.OR, 0)

        def REPLACE(self):
            return self.getToken(StarRocksParser.REPLACE, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def columnNameWithComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ColumnNameWithCommentContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ColumnNameWithCommentContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateViewStatement" ):
                listener.enterCreateViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateViewStatement" ):
                listener.exitCreateViewStatement(self)




    def createViewStatement(self):

        localctx = StarRocksParser.CreateViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_createViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(StarRocksParser.CREATE)
            self.state = 1804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 1802
                self.match(StarRocksParser.OR)
                self.state = 1803
                self.match(StarRocksParser.REPLACE)


            self.state = 1806
            self.match(StarRocksParser.VIEW)
            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1807
                self.match(StarRocksParser.IF)
                self.state = 1808
                self.match(StarRocksParser.NOT)
                self.state = 1809
                self.match(StarRocksParser.EXISTS)


            self.state = 1812
            self.qualifiedName()
            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 1813
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1814
                self.columnNameWithComment()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1815
                    self.match(StarRocksParser.COMMA)
                    self.state = 1816
                    self.columnNameWithComment()
                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1822
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 1827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1826
                self.comment()


            self.state = 1829
            self.match(StarRocksParser.AS)
            self.state = 1830
            self.queryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def queryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.QueryStatementContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def columnNameWithComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ColumnNameWithCommentContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ColumnNameWithCommentContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_alterViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewStatement" ):
                listener.enterAlterViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewStatement" ):
                listener.exitAlterViewStatement(self)




    def alterViewStatement(self):

        localctx = StarRocksParser.AlterViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alterViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(StarRocksParser.ALTER)
            self.state = 1833
            self.match(StarRocksParser.VIEW)
            self.state = 1834
            self.qualifiedName()
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 1835
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1836
                self.columnNameWithComment()
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1837
                    self.match(StarRocksParser.COMMA)
                    self.state = 1838
                    self.columnNameWithComment()
                    self.state = 1843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1844
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 1848
            self.match(StarRocksParser.AS)
            self.state = 1849
            self.queryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropViewStatement" ):
                listener.enterDropViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropViewStatement" ):
                listener.exitDropViewStatement(self)




    def dropViewStatement(self):

        localctx = StarRocksParser.DropViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dropViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            self.match(StarRocksParser.DROP)
            self.state = 1852
            self.match(StarRocksParser.VIEW)
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1853
                self.match(StarRocksParser.IF)
                self.state = 1854
                self.match(StarRocksParser.EXISTS)


            self.state = 1857
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameWithCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columnName = None # IdentifierContext

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_columnNameWithComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameWithComment" ):
                listener.enterColumnNameWithComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameWithComment" ):
                listener.exitColumnNameWithComment(self)




    def columnNameWithComment(self):

        localctx = StarRocksParser.ColumnNameWithCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_columnNameWithComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            localctx.columnName = self.identifier()
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1860
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubmitTaskStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBMIT(self):
            return self.getToken(StarRocksParser.SUBMIT, 0)

        def TASK(self):
            return self.getToken(StarRocksParser.TASK, 0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def createTableAsSelectStatement(self):
            return self.getTypedRuleContext(StarRocksParser.CreateTableAsSelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(StarRocksParser.InsertStatementContext,0)


        def dataCacheSelectStatement(self):
            return self.getTypedRuleContext(StarRocksParser.DataCacheSelectStatementContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def taskClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.TaskClauseContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.TaskClauseContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_submitTaskStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubmitTaskStatement" ):
                listener.enterSubmitTaskStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubmitTaskStatement" ):
                listener.exitSubmitTaskStatement(self)




    def submitTaskStatement(self):

        localctx = StarRocksParser.SubmitTaskStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_submitTaskStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.match(StarRocksParser.SUBMIT)
            self.state = 1864
            self.match(StarRocksParser.TASK)
            self.state = 1866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1865
                self.qualifiedName()


            self.state = 1871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==306 or _la==355:
                self.state = 1868
                self.taskClause()
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1874
            self.match(StarRocksParser.AS)
            self.state = 1878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.state = 1875
                self.createTableAsSelectStatement()
                pass
            elif token in [107, 108, 130, 190]:
                self.state = 1876
                self.insertStatement()
                pass
            elif token in [43]:
                self.state = 1877
                self.dataCacheSelectStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def taskScheduleDesc(self):
            return self.getTypedRuleContext(StarRocksParser.TaskScheduleDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_taskClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskClause" ):
                listener.enterTaskClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskClause" ):
                listener.exitTaskClause(self)




    def taskClause(self):

        localctx = StarRocksParser.TaskClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_taskClause)
        try:
            self.state = 1882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [306]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1880
                self.properties()
                pass
            elif token in [355]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1881
                self.taskScheduleDesc()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTaskStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def TASK(self):
            return self.getToken(StarRocksParser.TASK, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropTaskStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTaskStatement" ):
                listener.enterDropTaskStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTaskStatement" ):
                listener.exitDropTaskStatement(self)




    def dropTaskStatement(self):

        localctx = StarRocksParser.DropTaskStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_dropTaskStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.match(StarRocksParser.DROP)
            self.state = 1885
            self.match(StarRocksParser.TASK)
            self.state = 1886
            self.qualifiedName()
            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1887
                self.match(StarRocksParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskScheduleDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEDULE(self):
            return self.getToken(StarRocksParser.SCHEDULE, 0)

        def EVERY(self):
            return self.getToken(StarRocksParser.EVERY, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def taskInterval(self):
            return self.getTypedRuleContext(StarRocksParser.TaskIntervalContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def START(self):
            return self.getToken(StarRocksParser.START, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_taskScheduleDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskScheduleDesc" ):
                listener.enterTaskScheduleDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskScheduleDesc" ):
                listener.exitTaskScheduleDesc(self)




    def taskScheduleDesc(self):

        localctx = StarRocksParser.TaskScheduleDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_taskScheduleDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(StarRocksParser.SCHEDULE)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 1891
                self.match(StarRocksParser.START)
                self.state = 1892
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1893
                self.string_()
                self.state = 1894
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 1898
            self.match(StarRocksParser.EVERY)
            self.state = 1899
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 1900
            self.taskInterval()
            self.state = 1901
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mvName = None # QualifiedNameContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def queryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.QueryStatementContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def columnNameWithComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ColumnNameWithCommentContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ColumnNameWithCommentContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def materializedViewDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.MaterializedViewDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.MaterializedViewDescContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def indexDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IndexDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IndexDescContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedViewStatement" ):
                listener.enterCreateMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedViewStatement" ):
                listener.exitCreateMaterializedViewStatement(self)




    def createMaterializedViewStatement(self):

        localctx = StarRocksParser.CreateMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_createMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self.match(StarRocksParser.CREATE)
            self.state = 1904
            self.match(StarRocksParser.MATERIALIZED)
            self.state = 1905
            self.match(StarRocksParser.VIEW)
            self.state = 1909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1906
                self.match(StarRocksParser.IF)
                self.state = 1907
                self.match(StarRocksParser.NOT)
                self.state = 1908
                self.match(StarRocksParser.EXISTS)


            self.state = 1911
            localctx.mvName = self.qualifiedName()
            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 1912
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 1913
                self.columnNameWithComment()
                self.state = 1918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1914
                        self.match(StarRocksParser.COMMA)
                        self.state = 1915
                        self.columnNameWithComment() 
                    self.state = 1920
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 1921
                    self.match(StarRocksParser.COMMA)
                    self.state = 1922
                    self.indexDesc()
                    self.state = 1927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1928
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 1933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1932
                self.comment()


            self.state = 1938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==111 or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 70373039144993) != 0):
                self.state = 1935
                self.materializedViewDesc()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1941
            self.match(StarRocksParser.AS)
            self.state = 1942
            self.queryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)


        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def orderByDesc(self):
            return self.getTypedRuleContext(StarRocksParser.OrderByDescContext,0)


        def refreshSchemeDesc(self):
            return self.getTypedRuleContext(StarRocksParser.RefreshSchemeDescContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_materializedViewDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewDesc" ):
                listener.enterMaterializedViewDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewDesc" ):
                listener.exitMaterializedViewDesc(self)




    def materializedViewDesc(self):

        localctx = StarRocksParser.MaterializedViewDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_materializedViewDesc)
        try:
            self.state = 1951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [279]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1944
                self.match(StarRocksParser.PARTITION)
                self.state = 1945
                self.match(StarRocksParser.BY)
                self.state = 1946
                self.primaryExpression(0)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1947
                self.distributionDesc()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1948
                self.orderByDesc()
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1949
                self.refreshSchemeDesc()
                pass
            elif token in [306]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1950
                self.properties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowMaterializedViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEWS(self):
            return self.getToken(StarRocksParser.VIEWS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showMaterializedViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMaterializedViewsStatement" ):
                listener.enterShowMaterializedViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMaterializedViewsStatement" ):
                listener.exitShowMaterializedViewsStatement(self)




    def showMaterializedViewsStatement(self):

        localctx = StarRocksParser.ShowMaterializedViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_showMaterializedViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(StarRocksParser.SHOW)
            self.state = 1954
            self.match(StarRocksParser.MATERIALIZED)
            self.state = 1955
            self.match(StarRocksParser.VIEWS)
            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 1956
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1957
                localctx.db = self.qualifiedName()


            self.state = 1964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 1960
                self.match(StarRocksParser.LIKE)
                self.state = 1961
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 1962
                self.match(StarRocksParser.WHERE)
                self.state = 1963
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mvName = None # QualifiedNameContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedViewStatement" ):
                listener.enterDropMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedViewStatement" ):
                listener.exitDropMaterializedViewStatement(self)




    def dropMaterializedViewStatement(self):

        localctx = StarRocksParser.DropMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_dropMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.match(StarRocksParser.DROP)
            self.state = 1967
            self.match(StarRocksParser.MATERIALIZED)
            self.state = 1968
            self.match(StarRocksParser.VIEW)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1969
                self.match(StarRocksParser.IF)
                self.state = 1970
                self.match(StarRocksParser.EXISTS)


            self.state = 1973
            localctx.mvName = self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mvName = None # QualifiedNameContext

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def refreshSchemeDesc(self):
            return self.getTypedRuleContext(StarRocksParser.RefreshSchemeDescContext,0)


        def tableRenameClause(self):
            return self.getTypedRuleContext(StarRocksParser.TableRenameClauseContext,0)


        def modifyPropertiesClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyPropertiesClauseContext,0)


        def swapTableClause(self):
            return self.getTypedRuleContext(StarRocksParser.SwapTableClauseContext,0)


        def statusDesc(self):
            return self.getTypedRuleContext(StarRocksParser.StatusDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewStatement" ):
                listener.enterAlterMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewStatement" ):
                listener.exitAlterMaterializedViewStatement(self)




    def alterMaterializedViewStatement(self):

        localctx = StarRocksParser.AlterMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterMaterializedViewStatement)
        try:
            self.state = 1991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1975
                self.match(StarRocksParser.ALTER)
                self.state = 1976
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 1977
                self.match(StarRocksParser.VIEW)
                self.state = 1978
                localctx.mvName = self.qualifiedName()
                self.state = 1983
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [320]:
                    self.state = 1979
                    self.refreshSchemeDesc()
                    pass
                elif token in [325]:
                    self.state = 1980
                    self.tableRenameClause()
                    pass
                elif token in [366]:
                    self.state = 1981
                    self.modifyPropertiesClause()
                    pass
                elif token in [389]:
                    self.state = 1982
                    self.swapTableClause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.match(StarRocksParser.ALTER)
                self.state = 1986
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 1987
                self.match(StarRocksParser.VIEW)
                self.state = 1988
                localctx.mvName = self.qualifiedName()
                self.state = 1989
                self.statusDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefreshMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mvName = None # QualifiedNameContext

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def partitionRangeDesc(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionRangeDescContext,0)


        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def MODE(self):
            return self.getToken(StarRocksParser.MODE, 0)

        def SYNC(self):
            return self.getToken(StarRocksParser.SYNC, 0)

        def ASYNC(self):
            return self.getToken(StarRocksParser.ASYNC, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_refreshMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshMaterializedViewStatement" ):
                listener.enterRefreshMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshMaterializedViewStatement" ):
                listener.exitRefreshMaterializedViewStatement(self)




    def refreshMaterializedViewStatement(self):

        localctx = StarRocksParser.RefreshMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_refreshMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(StarRocksParser.REFRESH)
            self.state = 1994
            self.match(StarRocksParser.MATERIALIZED)
            self.state = 1995
            self.match(StarRocksParser.VIEW)
            self.state = 1996
            localctx.mvName = self.qualifiedName()
            self.state = 1999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1997
                self.match(StarRocksParser.PARTITION)
                self.state = 1998
                self.partitionRangeDesc()


            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 2001
                self.match(StarRocksParser.FORCE)


            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 2004
                self.match(StarRocksParser.WITH)
                self.state = 2005
                _la = self._input.LA(1)
                if not(_la==19 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2006
                self.match(StarRocksParser.MODE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelRefreshMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mvName = None # QualifiedNameContext

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelRefreshMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelRefreshMaterializedViewStatement" ):
                listener.enterCancelRefreshMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelRefreshMaterializedViewStatement" ):
                listener.exitCancelRefreshMaterializedViewStatement(self)




    def cancelRefreshMaterializedViewStatement(self):

        localctx = StarRocksParser.CancelRefreshMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cancelRefreshMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.match(StarRocksParser.CANCEL)
            self.state = 2010
            self.match(StarRocksParser.REFRESH)
            self.state = 2011
            self.match(StarRocksParser.MATERIALIZED)
            self.state = 2012
            self.match(StarRocksParser.VIEW)
            self.state = 2013
            localctx.mvName = self.qualifiedName()
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 2014
                self.match(StarRocksParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminSetConfigStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def FRONTEND(self):
            return self.getToken(StarRocksParser.FRONTEND, 0)

        def CONFIG(self):
            return self.getToken(StarRocksParser.CONFIG, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def property_(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_adminSetConfigStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminSetConfigStatement" ):
                listener.enterAdminSetConfigStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminSetConfigStatement" ):
                listener.exitAdminSetConfigStatement(self)




    def adminSetConfigStatement(self):

        localctx = StarRocksParser.AdminSetConfigStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_adminSetConfigStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            self.match(StarRocksParser.ADMIN)
            self.state = 2018
            self.match(StarRocksParser.SET)
            self.state = 2019
            self.match(StarRocksParser.FRONTEND)
            self.state = 2020
            self.match(StarRocksParser.CONFIG)
            self.state = 2021
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 2022
            self.property_()
            self.state = 2023
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminSetReplicaStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def REPLICA(self):
            return self.getToken(StarRocksParser.REPLICA, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminSetReplicaStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminSetReplicaStatusStatement" ):
                listener.enterAdminSetReplicaStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminSetReplicaStatusStatement" ):
                listener.exitAdminSetReplicaStatusStatement(self)




    def adminSetReplicaStatusStatement(self):

        localctx = StarRocksParser.AdminSetReplicaStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_adminSetReplicaStatusStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self.match(StarRocksParser.ADMIN)
            self.state = 2026
            self.match(StarRocksParser.SET)
            self.state = 2027
            self.match(StarRocksParser.REPLICA)
            self.state = 2028
            self.match(StarRocksParser.STATUS)
            self.state = 2029
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminShowConfigStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def FRONTEND(self):
            return self.getToken(StarRocksParser.FRONTEND, 0)

        def CONFIG(self):
            return self.getToken(StarRocksParser.CONFIG, 0)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminShowConfigStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminShowConfigStatement" ):
                listener.enterAdminShowConfigStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminShowConfigStatement" ):
                listener.exitAdminShowConfigStatement(self)




    def adminShowConfigStatement(self):

        localctx = StarRocksParser.AdminShowConfigStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_adminShowConfigStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.match(StarRocksParser.ADMIN)
            self.state = 2032
            self.match(StarRocksParser.SHOW)
            self.state = 2033
            self.match(StarRocksParser.FRONTEND)
            self.state = 2034
            self.match(StarRocksParser.CONFIG)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 2035
                self.match(StarRocksParser.LIKE)
                self.state = 2036
                localctx.pattern = self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminShowReplicaDistributionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def REPLICA(self):
            return self.getToken(StarRocksParser.REPLICA, 0)

        def DISTRIBUTION(self):
            return self.getToken(StarRocksParser.DISTRIBUTION, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminShowReplicaDistributionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminShowReplicaDistributionStatement" ):
                listener.enterAdminShowReplicaDistributionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminShowReplicaDistributionStatement" ):
                listener.exitAdminShowReplicaDistributionStatement(self)




    def adminShowReplicaDistributionStatement(self):

        localctx = StarRocksParser.AdminShowReplicaDistributionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_adminShowReplicaDistributionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.match(StarRocksParser.ADMIN)
            self.state = 2040
            self.match(StarRocksParser.SHOW)
            self.state = 2041
            self.match(StarRocksParser.REPLICA)
            self.state = 2042
            self.match(StarRocksParser.DISTRIBUTION)
            self.state = 2043
            self.match(StarRocksParser.FROM)
            self.state = 2044
            self.qualifiedName()
            self.state = 2046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 2045
                self.partitionNames()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminShowReplicaStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # ExpressionContext

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def REPLICA(self):
            return self.getToken(StarRocksParser.REPLICA, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminShowReplicaStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminShowReplicaStatusStatement" ):
                listener.enterAdminShowReplicaStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminShowReplicaStatusStatement" ):
                listener.exitAdminShowReplicaStatusStatement(self)




    def adminShowReplicaStatusStatement(self):

        localctx = StarRocksParser.AdminShowReplicaStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_adminShowReplicaStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(StarRocksParser.ADMIN)
            self.state = 2049
            self.match(StarRocksParser.SHOW)
            self.state = 2050
            self.match(StarRocksParser.REPLICA)
            self.state = 2051
            self.match(StarRocksParser.STATUS)
            self.state = 2052
            self.match(StarRocksParser.FROM)
            self.state = 2053
            self.qualifiedName()
            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 2054
                self.partitionNames()


            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 2057
                self.match(StarRocksParser.WHERE)
                self.state = 2058
                localctx.where = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminRepairTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def REPAIR(self):
            return self.getToken(StarRocksParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminRepairTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminRepairTableStatement" ):
                listener.enterAdminRepairTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminRepairTableStatement" ):
                listener.exitAdminRepairTableStatement(self)




    def adminRepairTableStatement(self):

        localctx = StarRocksParser.AdminRepairTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_adminRepairTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.match(StarRocksParser.ADMIN)
            self.state = 2062
            self.match(StarRocksParser.REPAIR)
            self.state = 2063
            self.match(StarRocksParser.TABLE)
            self.state = 2064
            self.qualifiedName()
            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 2065
                self.partitionNames()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminCancelRepairTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def REPAIR(self):
            return self.getToken(StarRocksParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminCancelRepairTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminCancelRepairTableStatement" ):
                listener.enterAdminCancelRepairTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminCancelRepairTableStatement" ):
                listener.exitAdminCancelRepairTableStatement(self)




    def adminCancelRepairTableStatement(self):

        localctx = StarRocksParser.AdminCancelRepairTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_adminCancelRepairTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.match(StarRocksParser.ADMIN)
            self.state = 2069
            self.match(StarRocksParser.CANCEL)
            self.state = 2070
            self.match(StarRocksParser.REPAIR)
            self.state = 2071
            self.match(StarRocksParser.TABLE)
            self.state = 2072
            self.qualifiedName()
            self.state = 2074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 2073
                self.partitionNames()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminCheckTabletsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def CHECK(self):
            return self.getToken(StarRocksParser.CHECK, 0)

        def tabletList(self):
            return self.getTypedRuleContext(StarRocksParser.TabletListContext,0)


        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def property_(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_adminCheckTabletsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminCheckTabletsStatement" ):
                listener.enterAdminCheckTabletsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminCheckTabletsStatement" ):
                listener.exitAdminCheckTabletsStatement(self)




    def adminCheckTabletsStatement(self):

        localctx = StarRocksParser.AdminCheckTabletsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_adminCheckTabletsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.match(StarRocksParser.ADMIN)
            self.state = 2077
            self.match(StarRocksParser.CHECK)
            self.state = 2078
            self.tabletList()
            self.state = 2079
            self.match(StarRocksParser.PROPERTIES)
            self.state = 2080
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 2081
            self.property_()
            self.state = 2082
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminSetPartitionVersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionName = None # IdentifierOrStringContext
            self.partitionId = None # Token
            self.version = None # Token

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def VERSION(self):
            return self.getToken(StarRocksParser.VERSION, 0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_adminSetPartitionVersion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminSetPartitionVersion" ):
                listener.enterAdminSetPartitionVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminSetPartitionVersion" ):
                listener.exitAdminSetPartitionVersion(self)




    def adminSetPartitionVersion(self):

        localctx = StarRocksParser.AdminSetPartitionVersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_adminSetPartitionVersion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2084
            self.match(StarRocksParser.ADMIN)
            self.state = 2085
            self.match(StarRocksParser.SET)
            self.state = 2086
            self.match(StarRocksParser.TABLE)
            self.state = 2087
            self.qualifiedName()
            self.state = 2088
            self.match(StarRocksParser.PARTITION)
            self.state = 2089
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 2092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 484, 485, 488, 489, 490, 496]:
                self.state = 2090
                localctx.partitionName = self.identifierOrString()
                pass
            elif token in [481]:
                self.state = 2091
                localctx.partitionId = self.match(StarRocksParser.INTEGER_VALUE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2094
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 2095
            self.match(StarRocksParser.VERSION)
            self.state = 2096
            self.match(StarRocksParser.TO)
            self.state = 2097
            localctx.version = self.match(StarRocksParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(StarRocksParser.KILL, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def QUERY(self):
            return self.getToken(StarRocksParser.QUERY, 0)

        def CONNECTION(self):
            return self.getToken(StarRocksParser.CONNECTION, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)




    def killStatement(self):

        localctx = StarRocksParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.match(StarRocksParser.KILL)
            self.state = 2104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 481]:
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 2100
                    self.match(StarRocksParser.CONNECTION)


                pass
            elif token in [310]:
                self.state = 2103
                self.match(StarRocksParser.QUERY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2106
            self.match(StarRocksParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyncStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNC(self):
            return self.getToken(StarRocksParser.SYNC, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_syncStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyncStatement" ):
                listener.enterSyncStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyncStatement" ):
                listener.exitSyncStatement(self)




    def syncStatement(self):

        localctx = StarRocksParser.SyncStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_syncStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(StarRocksParser.SYNC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSystemStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def SYSTEM(self):
            return self.getToken(StarRocksParser.SYSTEM, 0)

        def alterClause(self):
            return self.getTypedRuleContext(StarRocksParser.AlterClauseContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterSystemStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSystemStatement" ):
                listener.enterAlterSystemStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSystemStatement" ):
                listener.exitAlterSystemStatement(self)




    def alterSystemStatement(self):

        localctx = StarRocksParser.AlterSystemStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_alterSystemStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.match(StarRocksParser.ALTER)
            self.state = 2111
            self.match(StarRocksParser.SYSTEM)
            self.state = 2112
            self.alterClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelAlterSystemStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def DECOMMISSION(self):
            return self.getToken(StarRocksParser.DECOMMISSION, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelAlterSystemStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelAlterSystemStatement" ):
                listener.enterCancelAlterSystemStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelAlterSystemStatement" ):
                listener.exitCancelAlterSystemStatement(self)




    def cancelAlterSystemStatement(self):

        localctx = StarRocksParser.CancelAlterSystemStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_cancelAlterSystemStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.match(StarRocksParser.CANCEL)
            self.state = 2115
            self.match(StarRocksParser.DECOMMISSION)
            self.state = 2116
            self.match(StarRocksParser.BACKEND)
            self.state = 2117
            self.string_()
            self.state = 2122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2118
                self.match(StarRocksParser.COMMA)
                self.state = 2119
                self.string_()
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowComputeNodesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def COMPUTE(self):
            return self.getToken(StarRocksParser.COMPUTE, 0)

        def NODES(self):
            return self.getToken(StarRocksParser.NODES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showComputeNodesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowComputeNodesStatement" ):
                listener.enterShowComputeNodesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowComputeNodesStatement" ):
                listener.exitShowComputeNodesStatement(self)




    def showComputeNodesStatement(self):

        localctx = StarRocksParser.ShowComputeNodesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_showComputeNodesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.match(StarRocksParser.SHOW)
            self.state = 2126
            self.match(StarRocksParser.COMPUTE)
            self.state = 2127
            self.match(StarRocksParser.NODES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateExternalCatalogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalogName = None # IdentifierOrStringContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createExternalCatalogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateExternalCatalogStatement" ):
                listener.enterCreateExternalCatalogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateExternalCatalogStatement" ):
                listener.exitCreateExternalCatalogStatement(self)




    def createExternalCatalogStatement(self):

        localctx = StarRocksParser.CreateExternalCatalogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createExternalCatalogStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(StarRocksParser.CREATE)
            self.state = 2130
            self.match(StarRocksParser.EXTERNAL)
            self.state = 2131
            self.match(StarRocksParser.CATALOG)
            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 2132
                self.match(StarRocksParser.IF)
                self.state = 2133
                self.match(StarRocksParser.NOT)
                self.state = 2134
                self.match(StarRocksParser.EXISTS)


            self.state = 2137
            localctx.catalogName = self.identifierOrString()
            self.state = 2139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 2138
                self.comment()


            self.state = 2141
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateExternalCatalogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalogName = None # IdentifierOrStringContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showCreateExternalCatalogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateExternalCatalogStatement" ):
                listener.enterShowCreateExternalCatalogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateExternalCatalogStatement" ):
                listener.exitShowCreateExternalCatalogStatement(self)




    def showCreateExternalCatalogStatement(self):

        localctx = StarRocksParser.ShowCreateExternalCatalogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_showCreateExternalCatalogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(StarRocksParser.SHOW)
            self.state = 2144
            self.match(StarRocksParser.CREATE)
            self.state = 2145
            self.match(StarRocksParser.CATALOG)
            self.state = 2146
            localctx.catalogName = self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropExternalCatalogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalogName = None # IdentifierOrStringContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropExternalCatalogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropExternalCatalogStatement" ):
                listener.enterDropExternalCatalogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropExternalCatalogStatement" ):
                listener.exitDropExternalCatalogStatement(self)




    def dropExternalCatalogStatement(self):

        localctx = StarRocksParser.DropExternalCatalogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_dropExternalCatalogStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            self.match(StarRocksParser.DROP)
            self.state = 2149
            self.match(StarRocksParser.CATALOG)
            self.state = 2152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 2150
                self.match(StarRocksParser.IF)
                self.state = 2151
                self.match(StarRocksParser.EXISTS)


            self.state = 2154
            localctx.catalogName = self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCatalogsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def CATALOGS(self):
            return self.getToken(StarRocksParser.CATALOGS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showCatalogsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogsStatement" ):
                listener.enterShowCatalogsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogsStatement" ):
                listener.exitShowCatalogsStatement(self)




    def showCatalogsStatement(self):

        localctx = StarRocksParser.ShowCatalogsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_showCatalogsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.match(StarRocksParser.SHOW)
            self.state = 2157
            self.match(StarRocksParser.CATALOGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCatalogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalogName = None # IdentifierOrStringContext

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def modifyPropertiesClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyPropertiesClauseContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterCatalogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCatalogStatement" ):
                listener.enterAlterCatalogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCatalogStatement" ):
                listener.exitAlterCatalogStatement(self)




    def alterCatalogStatement(self):

        localctx = StarRocksParser.AlterCatalogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_alterCatalogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2159
            self.match(StarRocksParser.ALTER)
            self.state = 2160
            self.match(StarRocksParser.CATALOG)
            self.state = 2161
            localctx.catalogName = self.identifierOrString()
            self.state = 2162
            self.modifyPropertiesClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStorageVolumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.storageVolumeName = None # IdentifierOrStringContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(StarRocksParser.TypeDescContext,0)


        def locationsDesc(self):
            return self.getTypedRuleContext(StarRocksParser.LocationsDescContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createStorageVolumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateStorageVolumeStatement" ):
                listener.enterCreateStorageVolumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateStorageVolumeStatement" ):
                listener.exitCreateStorageVolumeStatement(self)




    def createStorageVolumeStatement(self):

        localctx = StarRocksParser.CreateStorageVolumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_createStorageVolumeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.match(StarRocksParser.CREATE)
            self.state = 2165
            self.match(StarRocksParser.STORAGE)
            self.state = 2166
            self.match(StarRocksParser.VOLUME)
            self.state = 2170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 2167
                self.match(StarRocksParser.IF)
                self.state = 2168
                self.match(StarRocksParser.NOT)
                self.state = 2169
                self.match(StarRocksParser.EXISTS)


            self.state = 2172
            localctx.storageVolumeName = self.identifierOrString()
            self.state = 2173
            self.typeDesc()
            self.state = 2174
            self.locationsDesc()
            self.state = 2176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 2175
                self.comment()


            self.state = 2179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2178
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(StarRocksParser.TYPE, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = StarRocksParser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.match(StarRocksParser.TYPE)
            self.state = 2182
            self.match(StarRocksParser.EQ)
            self.state = 2183
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationsDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATIONS(self):
            return self.getToken(StarRocksParser.LOCATIONS, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def stringList(self):
            return self.getTypedRuleContext(StarRocksParser.StringListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_locationsDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationsDesc" ):
                listener.enterLocationsDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationsDesc" ):
                listener.exitLocationsDesc(self)




    def locationsDesc(self):

        localctx = StarRocksParser.LocationsDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_locationsDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2185
            self.match(StarRocksParser.LOCATIONS)
            self.state = 2186
            self.match(StarRocksParser.EQ)
            self.state = 2187
            self.stringList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStorageVolumesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUMES(self):
            return self.getToken(StarRocksParser.VOLUMES, 0)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showStorageVolumesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStorageVolumesStatement" ):
                listener.enterShowStorageVolumesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStorageVolumesStatement" ):
                listener.exitShowStorageVolumesStatement(self)




    def showStorageVolumesStatement(self):

        localctx = StarRocksParser.ShowStorageVolumesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_showStorageVolumesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self.match(StarRocksParser.SHOW)
            self.state = 2190
            self.match(StarRocksParser.STORAGE)
            self.state = 2191
            self.match(StarRocksParser.VOLUMES)
            self.state = 2194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 2192
                self.match(StarRocksParser.LIKE)
                self.state = 2193
                localctx.pattern = self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStorageVolumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.storageVolumeName = None # IdentifierOrStringContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropStorageVolumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropStorageVolumeStatement" ):
                listener.enterDropStorageVolumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropStorageVolumeStatement" ):
                listener.exitDropStorageVolumeStatement(self)




    def dropStorageVolumeStatement(self):

        localctx = StarRocksParser.DropStorageVolumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dropStorageVolumeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            self.match(StarRocksParser.DROP)
            self.state = 2197
            self.match(StarRocksParser.STORAGE)
            self.state = 2198
            self.match(StarRocksParser.VOLUME)
            self.state = 2201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 2199
                self.match(StarRocksParser.IF)
                self.state = 2200
                self.match(StarRocksParser.EXISTS)


            self.state = 2203
            localctx.storageVolumeName = self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStorageVolumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def alterStorageVolumeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.AlterStorageVolumeClauseContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.AlterStorageVolumeClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_alterStorageVolumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStorageVolumeStatement" ):
                listener.enterAlterStorageVolumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStorageVolumeStatement" ):
                listener.exitAlterStorageVolumeStatement(self)




    def alterStorageVolumeStatement(self):

        localctx = StarRocksParser.AlterStorageVolumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_alterStorageVolumeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.match(StarRocksParser.ALTER)
            self.state = 2206
            self.match(StarRocksParser.STORAGE)
            self.state = 2207
            self.match(StarRocksParser.VOLUME)
            self.state = 2208
            self.identifierOrString()
            self.state = 2209
            self.alterStorageVolumeClause()
            self.state = 2214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2210
                self.match(StarRocksParser.COMMA)
                self.state = 2211
                self.alterStorageVolumeClause()
                self.state = 2216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStorageVolumeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifyStorageVolumeCommentClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyStorageVolumeCommentClauseContext,0)


        def modifyStorageVolumePropertiesClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyStorageVolumePropertiesClauseContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterStorageVolumeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStorageVolumeClause" ):
                listener.enterAlterStorageVolumeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStorageVolumeClause" ):
                listener.exitAlterStorageVolumeClause(self)




    def alterStorageVolumeClause(self):

        localctx = StarRocksParser.AlterStorageVolumeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_alterStorageVolumeClause)
        try:
            self.state = 2219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2217
                self.modifyStorageVolumeCommentClause()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2218
                self.modifyStorageVolumePropertiesClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyStorageVolumePropertiesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyStorageVolumePropertiesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyStorageVolumePropertiesClause" ):
                listener.enterModifyStorageVolumePropertiesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyStorageVolumePropertiesClause" ):
                listener.exitModifyStorageVolumePropertiesClause(self)




    def modifyStorageVolumePropertiesClause(self):

        localctx = StarRocksParser.ModifyStorageVolumePropertiesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_modifyStorageVolumePropertiesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            self.match(StarRocksParser.SET)
            self.state = 2222
            self.propertyList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyStorageVolumeCommentClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(StarRocksParser.COMMENT, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyStorageVolumeCommentClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyStorageVolumeCommentClause" ):
                listener.enterModifyStorageVolumeCommentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyStorageVolumeCommentClause" ):
                listener.exitModifyStorageVolumeCommentClause(self)




    def modifyStorageVolumeCommentClause(self):

        localctx = StarRocksParser.ModifyStorageVolumeCommentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_modifyStorageVolumeCommentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.match(StarRocksParser.COMMENT)
            self.state = 2225
            self.match(StarRocksParser.EQ)
            self.state = 2226
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescStorageVolumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def DESC(self):
            return self.getToken(StarRocksParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(StarRocksParser.DESCRIBE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_descStorageVolumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescStorageVolumeStatement" ):
                listener.enterDescStorageVolumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescStorageVolumeStatement" ):
                listener.exitDescStorageVolumeStatement(self)




    def descStorageVolumeStatement(self):

        localctx = StarRocksParser.DescStorageVolumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_descStorageVolumeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            _la = self._input.LA(1)
            if not(_la==107 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2229
            self.match(StarRocksParser.STORAGE)
            self.state = 2230
            self.match(StarRocksParser.VOLUME)
            self.state = 2231
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDefaultStorageVolumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_setDefaultStorageVolumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDefaultStorageVolumeStatement" ):
                listener.enterSetDefaultStorageVolumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDefaultStorageVolumeStatement" ):
                listener.exitSetDefaultStorageVolumeStatement(self)




    def setDefaultStorageVolumeStatement(self):

        localctx = StarRocksParser.SetDefaultStorageVolumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_setDefaultStorageVolumeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.match(StarRocksParser.SET)
            self.state = 2234
            self.identifierOrString()
            self.state = 2235
            self.match(StarRocksParser.AS)
            self.state = 2236
            self.match(StarRocksParser.DEFAULT)
            self.state = 2237
            self.match(StarRocksParser.STORAGE)
            self.state = 2238
            self.match(StarRocksParser.VOLUME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateFailPointStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def DISABLE(self):
            return self.getToken(StarRocksParser.DISABLE, 0)

        def FAILPOINT(self):
            return self.getToken(StarRocksParser.FAILPOINT, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def ENABLE(self):
            return self.getToken(StarRocksParser.ENABLE, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def TIMES(self):
            return self.getToken(StarRocksParser.TIMES, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(StarRocksParser.DECIMAL_VALUE, 0)

        def PROBABILITY(self):
            return self.getToken(StarRocksParser.PROBABILITY, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_updateFailPointStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateFailPointStatusStatement" ):
                listener.enterUpdateFailPointStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateFailPointStatusStatement" ):
                listener.exitUpdateFailPointStatusStatement(self)




    def updateFailPointStatusStatement(self):

        localctx = StarRocksParser.UpdateFailPointStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_updateFailPointStatusStatement)
        self._la = 0 # Token type
        try:
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2240
                self.match(StarRocksParser.ADMIN)
                self.state = 2241
                self.match(StarRocksParser.DISABLE)
                self.state = 2242
                self.match(StarRocksParser.FAILPOINT)
                self.state = 2243
                self.string_()
                self.state = 2247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==266:
                    self.state = 2244
                    self.match(StarRocksParser.ON)
                    self.state = 2245
                    self.match(StarRocksParser.BACKEND)
                    self.state = 2246
                    self.string_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2249
                self.match(StarRocksParser.ADMIN)
                self.state = 2250
                self.match(StarRocksParser.ENABLE)
                self.state = 2251
                self.match(StarRocksParser.FAILPOINT)
                self.state = 2252
                self.string_()
                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 2253
                    self.match(StarRocksParser.WITH)
                    self.state = 2254
                    self.match(StarRocksParser.INTEGER_VALUE)
                    self.state = 2255
                    self.match(StarRocksParser.TIMES)


                self.state = 2261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==266:
                    self.state = 2258
                    self.match(StarRocksParser.ON)
                    self.state = 2259
                    self.match(StarRocksParser.BACKEND)
                    self.state = 2260
                    self.string_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2263
                self.match(StarRocksParser.ADMIN)
                self.state = 2264
                self.match(StarRocksParser.ENABLE)
                self.state = 2265
                self.match(StarRocksParser.FAILPOINT)
                self.state = 2266
                self.string_()
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 2267
                    self.match(StarRocksParser.WITH)
                    self.state = 2268
                    self.match(StarRocksParser.DECIMAL_VALUE)
                    self.state = 2269
                    self.match(StarRocksParser.PROBABILITY)


                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==266:
                    self.state = 2272
                    self.match(StarRocksParser.ON)
                    self.state = 2273
                    self.match(StarRocksParser.BACKEND)
                    self.state = 2274
                    self.string_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFailPointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def FAILPOINTS(self):
            return self.getToken(StarRocksParser.FAILPOINTS, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showFailPointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFailPointStatement" ):
                listener.enterShowFailPointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFailPointStatement" ):
                listener.exitShowFailPointStatement(self)




    def showFailPointStatement(self):

        localctx = StarRocksParser.ShowFailPointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_showFailPointStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.match(StarRocksParser.SHOW)
            self.state = 2280
            self.match(StarRocksParser.FAILPOINTS)
            self.state = 2283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 2281
                self.match(StarRocksParser.LIKE)
                self.state = 2282
                localctx.pattern = self.string_()


            self.state = 2288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==266:
                self.state = 2285
                self.match(StarRocksParser.ON)
                self.state = 2286
                self.match(StarRocksParser.BACKEND)
                self.state = 2287
                self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDictionaryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def DICTIONARY(self):
            return self.getToken(StarRocksParser.DICTIONARY, 0)

        def dictionaryName(self):
            return self.getTypedRuleContext(StarRocksParser.DictionaryNameContext,0)


        def USING(self):
            return self.getToken(StarRocksParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def dictionaryColumnDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.DictionaryColumnDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.DictionaryColumnDescContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createDictionaryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDictionaryStatement" ):
                listener.enterCreateDictionaryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDictionaryStatement" ):
                listener.exitCreateDictionaryStatement(self)




    def createDictionaryStatement(self):

        localctx = StarRocksParser.CreateDictionaryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_createDictionaryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            self.match(StarRocksParser.CREATE)
            self.state = 2291
            self.match(StarRocksParser.DICTIONARY)
            self.state = 2292
            self.dictionaryName()
            self.state = 2293
            self.match(StarRocksParser.USING)
            self.state = 2294
            self.qualifiedName()
            self.state = 2295
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 2296
            self.dictionaryColumnDesc()
            self.state = 2301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2297
                self.match(StarRocksParser.COMMA)
                self.state = 2298
                self.dictionaryColumnDesc()
                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2304
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 2306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2305
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDictionaryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def DICTIONARY(self):
            return self.getToken(StarRocksParser.DICTIONARY, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def CACHE(self):
            return self.getToken(StarRocksParser.CACHE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropDictionaryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDictionaryStatement" ):
                listener.enterDropDictionaryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDictionaryStatement" ):
                listener.exitDropDictionaryStatement(self)




    def dropDictionaryStatement(self):

        localctx = StarRocksParser.DropDictionaryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dropDictionaryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.match(StarRocksParser.DROP)
            self.state = 2309
            self.match(StarRocksParser.DICTIONARY)
            self.state = 2310
            self.qualifiedName()
            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 2311
                self.match(StarRocksParser.CACHE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefreshDictionaryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def DICTIONARY(self):
            return self.getToken(StarRocksParser.DICTIONARY, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_refreshDictionaryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshDictionaryStatement" ):
                listener.enterRefreshDictionaryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshDictionaryStatement" ):
                listener.exitRefreshDictionaryStatement(self)




    def refreshDictionaryStatement(self):

        localctx = StarRocksParser.RefreshDictionaryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_refreshDictionaryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.match(StarRocksParser.REFRESH)
            self.state = 2315
            self.match(StarRocksParser.DICTIONARY)
            self.state = 2316
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDictionaryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def DICTIONARY(self):
            return self.getToken(StarRocksParser.DICTIONARY, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showDictionaryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDictionaryStatement" ):
                listener.enterShowDictionaryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDictionaryStatement" ):
                listener.exitShowDictionaryStatement(self)




    def showDictionaryStatement(self):

        localctx = StarRocksParser.ShowDictionaryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_showDictionaryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            self.match(StarRocksParser.SHOW)
            self.state = 2319
            self.match(StarRocksParser.DICTIONARY)
            self.state = 2321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2907113422670155540) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201314769469032183) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2712845667094392313) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -9464603288729961) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714943291911) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397937273438359) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265517080645) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 144585779060799) != 0):
                self.state = 2320
                self.qualifiedName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelRefreshDictionaryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def DICTIONARY(self):
            return self.getToken(StarRocksParser.DICTIONARY, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelRefreshDictionaryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelRefreshDictionaryStatement" ):
                listener.enterCancelRefreshDictionaryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelRefreshDictionaryStatement" ):
                listener.exitCancelRefreshDictionaryStatement(self)




    def cancelRefreshDictionaryStatement(self):

        localctx = StarRocksParser.CancelRefreshDictionaryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_cancelRefreshDictionaryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self.match(StarRocksParser.CANCEL)
            self.state = 2324
            self.match(StarRocksParser.REFRESH)
            self.state = 2325
            self.match(StarRocksParser.DICTIONARY)
            self.state = 2326
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryColumnDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def KEY(self):
            return self.getToken(StarRocksParser.KEY, 0)

        def VALUE(self):
            return self.getToken(StarRocksParser.VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dictionaryColumnDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryColumnDesc" ):
                listener.enterDictionaryColumnDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryColumnDesc" ):
                listener.exitDictionaryColumnDesc(self)




    def dictionaryColumnDesc(self):

        localctx = StarRocksParser.DictionaryColumnDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_dictionaryColumnDesc)
        try:
            self.state = 2334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.qualifiedName()
                self.state = 2329
                self.match(StarRocksParser.KEY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2331
                self.qualifiedName()
                self.state = 2332
                self.match(StarRocksParser.VALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dictionaryName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryName" ):
                listener.enterDictionaryName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryName" ):
                listener.exitDictionaryName(self)




    def dictionaryName(self):

        localctx = StarRocksParser.DictionaryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_dictionaryName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addFrontendClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddFrontendClauseContext,0)


        def dropFrontendClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropFrontendClauseContext,0)


        def modifyFrontendHostClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyFrontendHostClauseContext,0)


        def addBackendClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddBackendClauseContext,0)


        def dropBackendClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropBackendClauseContext,0)


        def decommissionBackendClause(self):
            return self.getTypedRuleContext(StarRocksParser.DecommissionBackendClauseContext,0)


        def modifyBackendClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyBackendClauseContext,0)


        def addComputeNodeClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddComputeNodeClauseContext,0)


        def dropComputeNodeClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropComputeNodeClauseContext,0)


        def modifyBrokerClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyBrokerClauseContext,0)


        def alterLoadErrorUrlClause(self):
            return self.getTypedRuleContext(StarRocksParser.AlterLoadErrorUrlClauseContext,0)


        def createImageClause(self):
            return self.getTypedRuleContext(StarRocksParser.CreateImageClauseContext,0)


        def cleanTabletSchedQClause(self):
            return self.getTypedRuleContext(StarRocksParser.CleanTabletSchedQClauseContext,0)


        def decommissionDiskClause(self):
            return self.getTypedRuleContext(StarRocksParser.DecommissionDiskClauseContext,0)


        def cancelDecommissionDiskClause(self):
            return self.getTypedRuleContext(StarRocksParser.CancelDecommissionDiskClauseContext,0)


        def disableDiskClause(self):
            return self.getTypedRuleContext(StarRocksParser.DisableDiskClauseContext,0)


        def cancelDisableDiskClause(self):
            return self.getTypedRuleContext(StarRocksParser.CancelDisableDiskClauseContext,0)


        def createIndexClause(self):
            return self.getTypedRuleContext(StarRocksParser.CreateIndexClauseContext,0)


        def dropIndexClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropIndexClauseContext,0)


        def tableRenameClause(self):
            return self.getTypedRuleContext(StarRocksParser.TableRenameClauseContext,0)


        def swapTableClause(self):
            return self.getTypedRuleContext(StarRocksParser.SwapTableClauseContext,0)


        def modifyPropertiesClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyPropertiesClauseContext,0)


        def addColumnClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddColumnClauseContext,0)


        def addColumnsClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddColumnsClauseContext,0)


        def dropColumnClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropColumnClauseContext,0)


        def modifyColumnClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyColumnClauseContext,0)


        def columnRenameClause(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnRenameClauseContext,0)


        def reorderColumnsClause(self):
            return self.getTypedRuleContext(StarRocksParser.ReorderColumnsClauseContext,0)


        def rollupRenameClause(self):
            return self.getTypedRuleContext(StarRocksParser.RollupRenameClauseContext,0)


        def compactionClause(self):
            return self.getTypedRuleContext(StarRocksParser.CompactionClauseContext,0)


        def modifyCommentClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyCommentClauseContext,0)


        def optimizeClause(self):
            return self.getTypedRuleContext(StarRocksParser.OptimizeClauseContext,0)


        def addFieldClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddFieldClauseContext,0)


        def dropFieldClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropFieldClauseContext,0)


        def addPartitionClause(self):
            return self.getTypedRuleContext(StarRocksParser.AddPartitionClauseContext,0)


        def dropPartitionClause(self):
            return self.getTypedRuleContext(StarRocksParser.DropPartitionClauseContext,0)


        def distributionClause(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionClauseContext,0)


        def truncatePartitionClause(self):
            return self.getTypedRuleContext(StarRocksParser.TruncatePartitionClauseContext,0)


        def modifyPartitionClause(self):
            return self.getTypedRuleContext(StarRocksParser.ModifyPartitionClauseContext,0)


        def replacePartitionClause(self):
            return self.getTypedRuleContext(StarRocksParser.ReplacePartitionClauseContext,0)


        def partitionRenameClause(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionRenameClauseContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClause" ):
                listener.enterAlterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClause" ):
                listener.exitAlterClause(self)




    def alterClause(self):

        localctx = StarRocksParser.AlterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_alterClause)
        try:
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2338
                self.addFrontendClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2339
                self.dropFrontendClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2340
                self.modifyFrontendHostClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2341
                self.addBackendClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2342
                self.dropBackendClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2343
                self.decommissionBackendClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2344
                self.modifyBackendClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2345
                self.addComputeNodeClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2346
                self.dropComputeNodeClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2347
                self.modifyBrokerClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2348
                self.alterLoadErrorUrlClause()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2349
                self.createImageClause()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2350
                self.cleanTabletSchedQClause()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2351
                self.decommissionDiskClause()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2352
                self.cancelDecommissionDiskClause()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2353
                self.disableDiskClause()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2354
                self.cancelDisableDiskClause()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2355
                self.createIndexClause()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2356
                self.dropIndexClause()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2357
                self.tableRenameClause()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2358
                self.swapTableClause()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2359
                self.modifyPropertiesClause()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2360
                self.addColumnClause()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2361
                self.addColumnsClause()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2362
                self.dropColumnClause()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2363
                self.modifyColumnClause()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2364
                self.columnRenameClause()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2365
                self.reorderColumnsClause()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2366
                self.rollupRenameClause()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2367
                self.compactionClause()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2368
                self.modifyCommentClause()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2369
                self.optimizeClause()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2370
                self.addFieldClause()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2371
                self.dropFieldClause()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2372
                self.addPartitionClause()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2373
                self.dropPartitionClause()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2374
                self.distributionClause()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2375
                self.truncatePartitionClause()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2376
                self.modifyPartitionClause()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2377
                self.replacePartitionClause()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2378
                self.partitionRenameClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddFrontendClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def FOLLOWER(self):
            return self.getToken(StarRocksParser.FOLLOWER, 0)

        def OBSERVER(self):
            return self.getToken(StarRocksParser.OBSERVER, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_addFrontendClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddFrontendClause" ):
                listener.enterAddFrontendClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddFrontendClause" ):
                listener.exitAddFrontendClause(self)




    def addFrontendClause(self):

        localctx = StarRocksParser.AddFrontendClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_addFrontendClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.match(StarRocksParser.ADD)
            self.state = 2382
            _la = self._input.LA(1)
            if not(_la==148 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2383
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFrontendClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def FOLLOWER(self):
            return self.getToken(StarRocksParser.FOLLOWER, 0)

        def OBSERVER(self):
            return self.getToken(StarRocksParser.OBSERVER, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropFrontendClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFrontendClause" ):
                listener.enterDropFrontendClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFrontendClause" ):
                listener.exitDropFrontendClause(self)




    def dropFrontendClause(self):

        localctx = StarRocksParser.DropFrontendClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_dropFrontendClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self.match(StarRocksParser.DROP)
            self.state = 2386
            _la = self._input.LA(1)
            if not(_la==148 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2387
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyFrontendHostClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def FRONTEND(self):
            return self.getToken(StarRocksParser.FRONTEND, 0)

        def HOST(self):
            return self.getToken(StarRocksParser.HOST, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyFrontendHostClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyFrontendHostClause" ):
                listener.enterModifyFrontendHostClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyFrontendHostClause" ):
                listener.exitModifyFrontendHostClause(self)




    def modifyFrontendHostClause(self):

        localctx = StarRocksParser.ModifyFrontendHostClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_modifyFrontendHostClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.match(StarRocksParser.MODIFY)
            self.state = 2390
            self.match(StarRocksParser.FRONTEND)
            self.state = 2391
            self.match(StarRocksParser.HOST)
            self.state = 2392
            self.string_()
            self.state = 2393
            self.match(StarRocksParser.TO)
            self.state = 2394
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddBackendClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_addBackendClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddBackendClause" ):
                listener.enterAddBackendClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddBackendClause" ):
                listener.exitAddBackendClause(self)




    def addBackendClause(self):

        localctx = StarRocksParser.AddBackendClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_addBackendClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self.match(StarRocksParser.ADD)
            self.state = 2397
            self.match(StarRocksParser.BACKEND)
            self.state = 2398
            self.string_()
            self.state = 2403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2399
                    self.match(StarRocksParser.COMMA)
                    self.state = 2400
                    self.string_() 
                self.state = 2405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropBackendClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropBackendClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropBackendClause" ):
                listener.enterDropBackendClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropBackendClause" ):
                listener.exitDropBackendClause(self)




    def dropBackendClause(self):

        localctx = StarRocksParser.DropBackendClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_dropBackendClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2406
            self.match(StarRocksParser.DROP)
            self.state = 2407
            self.match(StarRocksParser.BACKEND)
            self.state = 2408
            self.string_()
            self.state = 2413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2409
                    self.match(StarRocksParser.COMMA)
                    self.state = 2410
                    self.string_() 
                self.state = 2415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

            self.state = 2417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 2416
                self.match(StarRocksParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecommissionBackendClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECOMMISSION(self):
            return self.getToken(StarRocksParser.DECOMMISSION, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_decommissionBackendClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecommissionBackendClause" ):
                listener.enterDecommissionBackendClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecommissionBackendClause" ):
                listener.exitDecommissionBackendClause(self)




    def decommissionBackendClause(self):

        localctx = StarRocksParser.DecommissionBackendClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_decommissionBackendClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(StarRocksParser.DECOMMISSION)
            self.state = 2420
            self.match(StarRocksParser.BACKEND)
            self.state = 2421
            self.string_()
            self.state = 2426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2422
                    self.match(StarRocksParser.COMMA)
                    self.state = 2423
                    self.string_() 
                self.state = 2428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyBackendClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def HOST(self):
            return self.getToken(StarRocksParser.HOST, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyBackendClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyBackendClause" ):
                listener.enterModifyBackendClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyBackendClause" ):
                listener.exitModifyBackendClause(self)




    def modifyBackendClause(self):

        localctx = StarRocksParser.ModifyBackendClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_modifyBackendClause)
        try:
            self.state = 2442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2429
                self.match(StarRocksParser.MODIFY)
                self.state = 2430
                self.match(StarRocksParser.BACKEND)
                self.state = 2431
                self.match(StarRocksParser.HOST)
                self.state = 2432
                self.string_()
                self.state = 2433
                self.match(StarRocksParser.TO)
                self.state = 2434
                self.string_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2436
                self.match(StarRocksParser.MODIFY)
                self.state = 2437
                self.match(StarRocksParser.BACKEND)
                self.state = 2438
                self.string_()
                self.state = 2439
                self.match(StarRocksParser.SET)
                self.state = 2440
                self.propertyList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddComputeNodeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def COMPUTE(self):
            return self.getToken(StarRocksParser.COMPUTE, 0)

        def NODE(self):
            return self.getToken(StarRocksParser.NODE, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_addComputeNodeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddComputeNodeClause" ):
                listener.enterAddComputeNodeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddComputeNodeClause" ):
                listener.exitAddComputeNodeClause(self)




    def addComputeNodeClause(self):

        localctx = StarRocksParser.AddComputeNodeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_addComputeNodeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(StarRocksParser.ADD)
            self.state = 2445
            self.match(StarRocksParser.COMPUTE)
            self.state = 2446
            self.match(StarRocksParser.NODE)
            self.state = 2447
            self.string_()
            self.state = 2452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2448
                    self.match(StarRocksParser.COMMA)
                    self.state = 2449
                    self.string_() 
                self.state = 2454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropComputeNodeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def COMPUTE(self):
            return self.getToken(StarRocksParser.COMPUTE, 0)

        def NODE(self):
            return self.getToken(StarRocksParser.NODE, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropComputeNodeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropComputeNodeClause" ):
                listener.enterDropComputeNodeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropComputeNodeClause" ):
                listener.exitDropComputeNodeClause(self)




    def dropComputeNodeClause(self):

        localctx = StarRocksParser.DropComputeNodeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_dropComputeNodeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2455
            self.match(StarRocksParser.DROP)
            self.state = 2456
            self.match(StarRocksParser.COMPUTE)
            self.state = 2457
            self.match(StarRocksParser.NODE)
            self.state = 2458
            self.string_()
            self.state = 2463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2459
                    self.match(StarRocksParser.COMMA)
                    self.state = 2460
                    self.string_() 
                self.state = 2465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyBrokerClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def BROKER(self):
            return self.getToken(StarRocksParser.BROKER, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyBrokerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyBrokerClause" ):
                listener.enterModifyBrokerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyBrokerClause" ):
                listener.exitModifyBrokerClause(self)




    def modifyBrokerClause(self):

        localctx = StarRocksParser.ModifyBrokerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_modifyBrokerClause)
        try:
            self.state = 2492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2466
                self.match(StarRocksParser.ADD)
                self.state = 2467
                self.match(StarRocksParser.BROKER)
                self.state = 2468
                self.identifierOrString()
                self.state = 2469
                self.string_()
                self.state = 2474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2470
                        self.match(StarRocksParser.COMMA)
                        self.state = 2471
                        self.string_() 
                    self.state = 2476
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2477
                self.match(StarRocksParser.DROP)
                self.state = 2478
                self.match(StarRocksParser.BROKER)
                self.state = 2479
                self.identifierOrString()
                self.state = 2480
                self.string_()
                self.state = 2485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2481
                        self.match(StarRocksParser.COMMA)
                        self.state = 2482
                        self.string_() 
                    self.state = 2487
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2488
                self.match(StarRocksParser.DROP)
                self.state = 2489
                self.match(StarRocksParser.ALL)
                self.state = 2490
                self.match(StarRocksParser.BROKER)
                self.state = 2491
                self.identifierOrString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLoadErrorUrlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def ERRORS(self):
            return self.getToken(StarRocksParser.ERRORS, 0)

        def HUB(self):
            return self.getToken(StarRocksParser.HUB, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterLoadErrorUrlClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLoadErrorUrlClause" ):
                listener.enterAlterLoadErrorUrlClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLoadErrorUrlClause" ):
                listener.exitAlterLoadErrorUrlClause(self)




    def alterLoadErrorUrlClause(self):

        localctx = StarRocksParser.AlterLoadErrorUrlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_alterLoadErrorUrlClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2494
            self.match(StarRocksParser.SET)
            self.state = 2495
            self.match(StarRocksParser.LOAD)
            self.state = 2496
            self.match(StarRocksParser.ERRORS)
            self.state = 2497
            self.match(StarRocksParser.HUB)
            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2498
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateImageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def IMAGE(self):
            return self.getToken(StarRocksParser.IMAGE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createImageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateImageClause" ):
                listener.enterCreateImageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateImageClause" ):
                listener.exitCreateImageClause(self)




    def createImageClause(self):

        localctx = StarRocksParser.CreateImageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_createImageClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            self.match(StarRocksParser.CREATE)
            self.state = 2502
            self.match(StarRocksParser.IMAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CleanTabletSchedQClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEAN(self):
            return self.getToken(StarRocksParser.CLEAN, 0)

        def TABLET(self):
            return self.getToken(StarRocksParser.TABLET, 0)

        def SCHEDULER(self):
            return self.getToken(StarRocksParser.SCHEDULER, 0)

        def QUEUE(self):
            return self.getToken(StarRocksParser.QUEUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cleanTabletSchedQClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCleanTabletSchedQClause" ):
                listener.enterCleanTabletSchedQClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCleanTabletSchedQClause" ):
                listener.exitCleanTabletSchedQClause(self)




    def cleanTabletSchedQClause(self):

        localctx = StarRocksParser.CleanTabletSchedQClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_cleanTabletSchedQClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.match(StarRocksParser.CLEAN)
            self.state = 2505
            self.match(StarRocksParser.TABLET)
            self.state = 2506
            self.match(StarRocksParser.SCHEDULER)
            self.state = 2507
            self.match(StarRocksParser.QUEUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecommissionDiskClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECOMMISSION(self):
            return self.getToken(StarRocksParser.DECOMMISSION, 0)

        def DISK(self):
            return self.getToken(StarRocksParser.DISK, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_decommissionDiskClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecommissionDiskClause" ):
                listener.enterDecommissionDiskClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecommissionDiskClause" ):
                listener.exitDecommissionDiskClause(self)




    def decommissionDiskClause(self):

        localctx = StarRocksParser.DecommissionDiskClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_decommissionDiskClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2509
            self.match(StarRocksParser.DECOMMISSION)
            self.state = 2510
            self.match(StarRocksParser.DISK)
            self.state = 2511
            self.string_()
            self.state = 2516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2512
                self.match(StarRocksParser.COMMA)
                self.state = 2513
                self.string_()
                self.state = 2518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2519
            self.match(StarRocksParser.ON)
            self.state = 2520
            self.match(StarRocksParser.BACKEND)
            self.state = 2521
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelDecommissionDiskClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def DECOMMISSION(self):
            return self.getToken(StarRocksParser.DECOMMISSION, 0)

        def DISK(self):
            return self.getToken(StarRocksParser.DISK, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelDecommissionDiskClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelDecommissionDiskClause" ):
                listener.enterCancelDecommissionDiskClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelDecommissionDiskClause" ):
                listener.exitCancelDecommissionDiskClause(self)




    def cancelDecommissionDiskClause(self):

        localctx = StarRocksParser.CancelDecommissionDiskClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_cancelDecommissionDiskClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self.match(StarRocksParser.CANCEL)
            self.state = 2524
            self.match(StarRocksParser.DECOMMISSION)
            self.state = 2525
            self.match(StarRocksParser.DISK)
            self.state = 2526
            self.string_()
            self.state = 2531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2527
                self.match(StarRocksParser.COMMA)
                self.state = 2528
                self.string_()
                self.state = 2533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2534
            self.match(StarRocksParser.ON)
            self.state = 2535
            self.match(StarRocksParser.BACKEND)
            self.state = 2536
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisableDiskClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISABLE(self):
            return self.getToken(StarRocksParser.DISABLE, 0)

        def DISK(self):
            return self.getToken(StarRocksParser.DISK, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_disableDiskClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisableDiskClause" ):
                listener.enterDisableDiskClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisableDiskClause" ):
                listener.exitDisableDiskClause(self)




    def disableDiskClause(self):

        localctx = StarRocksParser.DisableDiskClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_disableDiskClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self.match(StarRocksParser.DISABLE)
            self.state = 2539
            self.match(StarRocksParser.DISK)
            self.state = 2540
            self.string_()
            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2541
                self.match(StarRocksParser.COMMA)
                self.state = 2542
                self.string_()
                self.state = 2547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2548
            self.match(StarRocksParser.ON)
            self.state = 2549
            self.match(StarRocksParser.BACKEND)
            self.state = 2550
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelDisableDiskClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def DISABLE(self):
            return self.getToken(StarRocksParser.DISABLE, 0)

        def DISK(self):
            return self.getToken(StarRocksParser.DISK, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelDisableDiskClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelDisableDiskClause" ):
                listener.enterCancelDisableDiskClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelDisableDiskClause" ):
                listener.exitCancelDisableDiskClause(self)




    def cancelDisableDiskClause(self):

        localctx = StarRocksParser.CancelDisableDiskClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cancelDisableDiskClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(StarRocksParser.CANCEL)
            self.state = 2553
            self.match(StarRocksParser.DISABLE)
            self.state = 2554
            self.match(StarRocksParser.DISK)
            self.state = 2555
            self.string_()
            self.state = 2560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2556
                self.match(StarRocksParser.COMMA)
                self.state = 2557
                self.string_()
                self.state = 2562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2563
            self.match(StarRocksParser.ON)
            self.state = 2564
            self.match(StarRocksParser.BACKEND)
            self.state = 2565
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexName = None # IdentifierContext

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def INDEX(self):
            return self.getToken(StarRocksParser.INDEX, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def indexType(self):
            return self.getTypedRuleContext(StarRocksParser.IndexTypeContext,0)


        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createIndexClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndexClause" ):
                listener.enterCreateIndexClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndexClause" ):
                listener.exitCreateIndexClause(self)




    def createIndexClause(self):

        localctx = StarRocksParser.CreateIndexClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_createIndexClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.match(StarRocksParser.ADD)
            self.state = 2568
            self.match(StarRocksParser.INDEX)
            self.state = 2569
            localctx.indexName = self.identifier()
            self.state = 2570
            self.identifierList()
            self.state = 2575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==427:
                self.state = 2571
                self.indexType()
                self.state = 2573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 2572
                    self.propertyList()




            self.state = 2578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 2577
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexName = None # IdentifierContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def INDEX(self):
            return self.getToken(StarRocksParser.INDEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropIndexClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndexClause" ):
                listener.enterDropIndexClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndexClause" ):
                listener.exitDropIndexClause(self)




    def dropIndexClause(self):

        localctx = StarRocksParser.DropIndexClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_dropIndexClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self.match(StarRocksParser.DROP)
            self.state = 2581
            self.match(StarRocksParser.INDEX)
            self.state = 2582
            localctx.indexName = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRenameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(StarRocksParser.RENAME, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_tableRenameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRenameClause" ):
                listener.enterTableRenameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRenameClause" ):
                listener.exitTableRenameClause(self)




    def tableRenameClause(self):

        localctx = StarRocksParser.TableRenameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_tableRenameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self.match(StarRocksParser.RENAME)
            self.state = 2585
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwapTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWAP(self):
            return self.getToken(StarRocksParser.SWAP, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_swapTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwapTableClause" ):
                listener.enterSwapTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwapTableClause" ):
                listener.exitSwapTableClause(self)




    def swapTableClause(self):

        localctx = StarRocksParser.SwapTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_swapTableClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            self.match(StarRocksParser.SWAP)
            self.state = 2588
            self.match(StarRocksParser.WITH)
            self.state = 2589
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyPropertiesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyPropertiesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyPropertiesClause" ):
                listener.enterModifyPropertiesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyPropertiesClause" ):
                listener.exitModifyPropertiesClause(self)




    def modifyPropertiesClause(self):

        localctx = StarRocksParser.ModifyPropertiesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_modifyPropertiesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            self.match(StarRocksParser.SET)
            self.state = 2592
            self.propertyList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyCommentClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(StarRocksParser.COMMENT, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyCommentClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyCommentClause" ):
                listener.enterModifyCommentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyCommentClause" ):
                listener.exitModifyCommentClause(self)




    def modifyCommentClause(self):

        localctx = StarRocksParser.ModifyCommentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_modifyCommentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self.match(StarRocksParser.COMMENT)
            self.state = 2595
            self.match(StarRocksParser.EQ)
            self.state = 2596
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def keyDesc(self):
            return self.getTypedRuleContext(StarRocksParser.KeyDescContext,0)


        def partitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionDescContext,0)


        def orderByDesc(self):
            return self.getTypedRuleContext(StarRocksParser.OrderByDescContext,0)


        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_optimizeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeClause" ):
                listener.enterOptimizeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeClause" ):
                listener.exitOptimizeClause(self)




    def optimizeClause(self):

        localctx = StarRocksParser.OptimizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_optimizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 2598
                self.partitionNames()


            self.state = 2602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==116 or _la==297 or _la==418:
                self.state = 2601
                self.keyDesc()


            self.state = 2605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 2604
                self.partitionDesc()


            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 2607
                self.orderByDesc()


            self.state = 2611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2610
                self.distributionDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def columnDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnDescContext,0)


        def FIRST(self):
            return self.getToken(StarRocksParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(StarRocksParser.AFTER, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_addColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumnClause" ):
                listener.enterAddColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumnClause" ):
                listener.exitAddColumnClause(self)




    def addColumnClause(self):

        localctx = StarRocksParser.AddColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_addColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            self.match(StarRocksParser.ADD)
            self.state = 2614
            self.match(StarRocksParser.COLUMN)
            self.state = 2615
            self.columnDesc()
            self.state = 2619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 2616
                self.match(StarRocksParser.FIRST)
                pass
            elif token in [6]:
                self.state = 2617
                self.match(StarRocksParser.AFTER)
                self.state = 2618
                self.identifier()
                pass
            elif token in [-1, 182, 306, 407, 495, 500]:
                pass
            else:
                pass
            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182 or _la==407:
                self.state = 2621
                _la = self._input.LA(1)
                if not(_la==182 or _la==407):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2622
                localctx.rollupName = self.identifier()


            self.state = 2626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2625
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def columnDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ColumnDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ColumnDescContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_addColumnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumnsClause" ):
                listener.enterAddColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumnsClause" ):
                listener.exitAddColumnsClause(self)




    def addColumnsClause(self):

        localctx = StarRocksParser.AddColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_addColumnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2628
            self.match(StarRocksParser.ADD)
            self.state = 2629
            self.match(StarRocksParser.COLUMN)
            self.state = 2630
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 2631
            self.columnDesc()
            self.state = 2636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2632
                self.match(StarRocksParser.COMMA)
                self.state = 2633
                self.columnDesc()
                self.state = 2638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2639
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182 or _la==407:
                self.state = 2640
                _la = self._input.LA(1)
                if not(_la==182 or _la==407):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2641
                localctx.rollupName = self.identifier()


            self.state = 2645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2644
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumnClause" ):
                listener.enterDropColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumnClause" ):
                listener.exitDropColumnClause(self)




    def dropColumnClause(self):

        localctx = StarRocksParser.DropColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_dropColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2647
            self.match(StarRocksParser.DROP)
            self.state = 2648
            self.match(StarRocksParser.COLUMN)
            self.state = 2649
            self.identifier()
            self.state = 2652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 2650
                self.match(StarRocksParser.FROM)
                self.state = 2651
                localctx.rollupName = self.identifier()


            self.state = 2655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2654
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def columnDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnDescContext,0)


        def FIRST(self):
            return self.getToken(StarRocksParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(StarRocksParser.AFTER, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyColumnClause" ):
                listener.enterModifyColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyColumnClause" ):
                listener.exitModifyColumnClause(self)




    def modifyColumnClause(self):

        localctx = StarRocksParser.ModifyColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_modifyColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            self.match(StarRocksParser.MODIFY)
            self.state = 2658
            self.match(StarRocksParser.COLUMN)
            self.state = 2659
            self.columnDesc()
            self.state = 2663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 2660
                self.match(StarRocksParser.FIRST)
                pass
            elif token in [6]:
                self.state = 2661
                self.match(StarRocksParser.AFTER)
                self.state = 2662
                self.identifier()
                pass
            elif token in [-1, 153, 306, 495, 500]:
                pass
            else:
                pass
            self.state = 2667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 2665
                self.match(StarRocksParser.FROM)
                self.state = 2666
                localctx.rollupName = self.identifier()


            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2669
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRenameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.oldColumn = None # IdentifierContext
            self.newColumn = None # IdentifierContext

        def RENAME(self):
            return self.getToken(StarRocksParser.RENAME, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_columnRenameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRenameClause" ):
                listener.enterColumnRenameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRenameClause" ):
                listener.exitColumnRenameClause(self)




    def columnRenameClause(self):

        localctx = StarRocksParser.ColumnRenameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_columnRenameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            self.match(StarRocksParser.RENAME)
            self.state = 2673
            self.match(StarRocksParser.COLUMN)
            self.state = 2674
            localctx.oldColumn = self.identifier()
            self.state = 2675
            self.match(StarRocksParser.TO)
            self.state = 2676
            localctx.newColumn = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReorderColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext

        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_reorderColumnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReorderColumnsClause" ):
                listener.enterReorderColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReorderColumnsClause" ):
                listener.exitReorderColumnsClause(self)




    def reorderColumnsClause(self):

        localctx = StarRocksParser.ReorderColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_reorderColumnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            self.match(StarRocksParser.ORDER)
            self.state = 2679
            self.match(StarRocksParser.BY)
            self.state = 2680
            self.identifierList()
            self.state = 2683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 2681
                self.match(StarRocksParser.FROM)
                self.state = 2682
                localctx.rollupName = self.identifier()


            self.state = 2686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2685
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupRenameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollupName = None # IdentifierContext
            self.newRollupName = None # IdentifierContext

        def RENAME(self):
            return self.getToken(StarRocksParser.RENAME, 0)

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_rollupRenameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupRenameClause" ):
                listener.enterRollupRenameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupRenameClause" ):
                listener.exitRollupRenameClause(self)




    def rollupRenameClause(self):

        localctx = StarRocksParser.RollupRenameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_rollupRenameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2688
            self.match(StarRocksParser.RENAME)
            self.state = 2689
            self.match(StarRocksParser.ROLLUP)
            self.state = 2690
            localctx.rollupName = self.identifier()
            self.state = 2691
            localctx.newRollupName = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPACT(self):
            return self.getToken(StarRocksParser.COMPACT, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def BASE(self):
            return self.getToken(StarRocksParser.BASE, 0)

        def CUMULATIVE(self):
            return self.getToken(StarRocksParser.CUMULATIVE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_compactionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactionClause" ):
                listener.enterCompactionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactionClause" ):
                listener.exitCompactionClause(self)




    def compactionClause(self):

        localctx = StarRocksParser.CompactionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_compactionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27 or _la==79:
                self.state = 2693
                _la = self._input.LA(1)
                if not(_la==27 or _la==79):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2696
            self.match(StarRocksParser.COMPACT)
            self.state = 2699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                self.state = 2697
                self.identifier()
                pass
            elif token in [498]:
                self.state = 2698
                self.identifierList()
                pass
            elif token in [-1, 495, 500]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubfieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def ARRAY_ELEMENT(self):
            return self.getToken(StarRocksParser.ARRAY_ELEMENT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_subfieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubfieldName" ):
                listener.enterSubfieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubfieldName" ):
                listener.exitSubfieldName(self)




    def subfieldName(self):

        localctx = StarRocksParser.SubfieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_subfieldName)
        try:
            self.state = 2703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2701
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2702
                self.match(StarRocksParser.ARRAY_ELEMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subfieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SubfieldNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SubfieldNameContext,i)


        def DOT_IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.DOT_IDENTIFIER)
            else:
                return self.getToken(StarRocksParser.DOT_IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.DOT)
            else:
                return self.getToken(StarRocksParser.DOT, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_nestedFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedFieldName" ):
                listener.enterNestedFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedFieldName" ):
                listener.exitNestedFieldName(self)




    def nestedFieldName(self):

        localctx = StarRocksParser.NestedFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_nestedFieldName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.subfieldName()
            self.state = 2711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==491 or _la==501:
                self.state = 2709
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [491]:
                    self.state = 2706
                    self.match(StarRocksParser.DOT_IDENTIFIER)
                    pass
                elif token in [501]:
                    self.state = 2707
                    self.match(StarRocksParser.DOT)
                    self.state = 2708
                    self.subfieldName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddFieldClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def FIELD(self):
            return self.getToken(StarRocksParser.FIELD, 0)

        def subfieldDesc(self):
            return self.getTypedRuleContext(StarRocksParser.SubfieldDescContext,0)


        def FIRST(self):
            return self.getToken(StarRocksParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(StarRocksParser.AFTER, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_addFieldClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddFieldClause" ):
                listener.enterAddFieldClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddFieldClause" ):
                listener.exitAddFieldClause(self)




    def addFieldClause(self):

        localctx = StarRocksParser.AddFieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_addFieldClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2714
            self.match(StarRocksParser.MODIFY)
            self.state = 2715
            self.match(StarRocksParser.COLUMN)
            self.state = 2716
            self.identifier()
            self.state = 2717
            self.match(StarRocksParser.ADD)
            self.state = 2718
            self.match(StarRocksParser.FIELD)
            self.state = 2719
            self.subfieldDesc()
            self.state = 2723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 2720
                self.match(StarRocksParser.FIRST)
                pass
            elif token in [6]:
                self.state = 2721
                self.match(StarRocksParser.AFTER)
                self.state = 2722
                self.identifier()
                pass
            elif token in [-1, 306, 495, 500]:
                pass
            else:
                pass
            self.state = 2726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2725
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFieldClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def COLUMN(self):
            return self.getToken(StarRocksParser.COLUMN, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def FIELD(self):
            return self.getToken(StarRocksParser.FIELD, 0)

        def nestedFieldName(self):
            return self.getTypedRuleContext(StarRocksParser.NestedFieldNameContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropFieldClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFieldClause" ):
                listener.enterDropFieldClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFieldClause" ):
                listener.exitDropFieldClause(self)




    def dropFieldClause(self):

        localctx = StarRocksParser.DropFieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_dropFieldClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            self.match(StarRocksParser.MODIFY)
            self.state = 2729
            self.match(StarRocksParser.COLUMN)
            self.state = 2730
            self.identifier()
            self.state = 2731
            self.match(StarRocksParser.DROP)
            self.state = 2732
            self.match(StarRocksParser.FIELD)
            self.state = 2733
            self.nestedFieldName()
            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2734
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddPartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def singleRangePartition(self):
            return self.getTypedRuleContext(StarRocksParser.SingleRangePartitionContext,0)


        def PARTITIONS(self):
            return self.getToken(StarRocksParser.PARTITIONS, 0)

        def multiRangePartition(self):
            return self.getTypedRuleContext(StarRocksParser.MultiRangePartitionContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def singleItemListPartitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.SingleItemListPartitionDescContext,0)


        def multiItemListPartitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.MultiItemListPartitionDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_addPartitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddPartitionClause" ):
                listener.enterAddPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddPartitionClause" ):
                listener.exitAddPartitionClause(self)




    def addPartitionClause(self):

        localctx = StarRocksParser.AddPartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_addPartitionClause)
        self._la = 0 # Token type
        try:
            self.state = 2766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                self.match(StarRocksParser.ADD)
                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==396:
                    self.state = 2738
                    self.match(StarRocksParser.TEMPORARY)


                self.state = 2744
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [279]:
                    self.state = 2741
                    self.singleRangePartition()
                    pass
                elif token in [280]:
                    self.state = 2742
                    self.match(StarRocksParser.PARTITIONS)
                    self.state = 2743
                    self.multiRangePartition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2746
                    self.distributionDesc()


                self.state = 2750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 2749
                    self.properties()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2752
                self.match(StarRocksParser.ADD)
                self.state = 2754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==396:
                    self.state = 2753
                    self.match(StarRocksParser.TEMPORARY)


                self.state = 2758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 2756
                    self.singleItemListPartitionDesc()
                    pass

                elif la_ == 2:
                    self.state = 2757
                    self.multiItemListPartitionDesc()
                    pass


                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2760
                    self.distributionDesc()


                self.state = 2764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 2763
                    self.properties()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def FORCE(self):
            return self.getToken(StarRocksParser.FORCE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropPartitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPartitionClause" ):
                listener.enterDropPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPartitionClause" ):
                listener.exitDropPartitionClause(self)




    def dropPartitionClause(self):

        localctx = StarRocksParser.DropPartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_dropPartitionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768
            self.match(StarRocksParser.DROP)
            self.state = 2770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==396:
                self.state = 2769
                self.match(StarRocksParser.TEMPORARY)


            self.state = 2772
            self.match(StarRocksParser.PARTITION)
            self.state = 2775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 2773
                self.match(StarRocksParser.IF)
                self.state = 2774
                self.match(StarRocksParser.EXISTS)


            self.state = 2777
            self.identifier()
            self.state = 2779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 2778
                self.match(StarRocksParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncatePartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(StarRocksParser.TRUNCATE, 0)

        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_truncatePartitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncatePartitionClause" ):
                listener.enterTruncatePartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncatePartitionClause" ):
                listener.exitTruncatePartitionClause(self)




    def truncatePartitionClause(self):

        localctx = StarRocksParser.TruncatePartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_truncatePartitionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            self.match(StarRocksParser.TRUNCATE)
            self.state = 2782
            self.partitionNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyPartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def ASTERISK_SYMBOL(self):
            return self.getToken(StarRocksParser.ASTERISK_SYMBOL, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def distributionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.DistributionDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_modifyPartitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyPartitionClause" ):
                listener.enterModifyPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyPartitionClause" ):
                listener.exitModifyPartitionClause(self)




    def modifyPartitionClause(self):

        localctx = StarRocksParser.ModifyPartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_modifyPartitionClause)
        try:
            self.state = 2798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2784
                self.match(StarRocksParser.MODIFY)
                self.state = 2785
                self.match(StarRocksParser.PARTITION)
                self.state = 2791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 2786
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 2787
                    self.identifierList()
                    pass

                elif la_ == 3:
                    self.state = 2788
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 2789
                    self.match(StarRocksParser.ASTERISK_SYMBOL)
                    self.state = 2790
                    self.match(StarRocksParser.RIGHT_PAREN)
                    pass


                self.state = 2793
                self.match(StarRocksParser.SET)
                self.state = 2794
                self.propertyList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2795
                self.match(StarRocksParser.MODIFY)
                self.state = 2796
                self.match(StarRocksParser.PARTITION)
                self.state = 2797
                self.distributionDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacePartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parName = None # PartitionNamesContext
            self.tempParName = None # PartitionNamesContext

        def REPLACE(self):
            return self.getToken(StarRocksParser.REPLACE, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def partitionNames(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PartitionNamesContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,i)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_replacePartitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacePartitionClause" ):
                listener.enterReplacePartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacePartitionClause" ):
                listener.exitReplacePartitionClause(self)




    def replacePartitionClause(self):

        localctx = StarRocksParser.ReplacePartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_replacePartitionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2800
            self.match(StarRocksParser.REPLACE)
            self.state = 2801
            localctx.parName = self.partitionNames()
            self.state = 2802
            self.match(StarRocksParser.WITH)
            self.state = 2803
            localctx.tempParName = self.partitionNames()
            self.state = 2805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2804
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionRenameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parName = None # IdentifierContext
            self.newParName = None # IdentifierContext

        def RENAME(self):
            return self.getToken(StarRocksParser.RENAME, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionRenameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionRenameClause" ):
                listener.enterPartitionRenameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionRenameClause" ):
                listener.exitPartitionRenameClause(self)




    def partitionRenameClause(self):

        localctx = StarRocksParser.PartitionRenameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_partitionRenameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2807
            self.match(StarRocksParser.RENAME)
            self.state = 2808
            self.match(StarRocksParser.PARTITION)
            self.state = 2809
            localctx.parName = self.identifier()
            self.state = 2810
            localctx.newParName = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.label = None # IdentifierContext

        def INSERT(self):
            return self.getToken(StarRocksParser.INSERT, 0)

        def INTO(self):
            return self.getToken(StarRocksParser.INTO, 0)

        def OVERWRITE(self):
            return self.getToken(StarRocksParser.OVERWRITE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def queryStatement(self):
            return self.getTypedRuleContext(StarRocksParser.QueryStatementContext,0)


        def explainDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ExplainDescContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def LABEL(self):
            return self.getToken(StarRocksParser.LABEL, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def FILES(self):
            return self.getToken(StarRocksParser.FILES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def BLACKHOLE(self):
            return self.getToken(StarRocksParser.BLACKHOLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def VALUES(self):
            return self.getToken(StarRocksParser.VALUES, 0)

        def expressionsWithDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionsWithDefaultContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionsWithDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = StarRocksParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 8388611) != 0):
                self.state = 2812
                self.explainDesc()


            self.state = 2815
            self.match(StarRocksParser.INSERT)
            self.state = 2816
            _la = self._input.LA(1)
            if not(_la==198 or _la==200):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2817
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 2818
                self.match(StarRocksParser.FILES)
                self.state = 2819
                self.propertyList()
                pass

            elif la_ == 3:
                self.state = 2820
                self.match(StarRocksParser.BLACKHOLE)
                self.state = 2821
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 2822
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 2825
                self.partitionNames()


            self.state = 2831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2828
                self.match(StarRocksParser.WITH)
                self.state = 2829
                self.match(StarRocksParser.LABEL)
                self.state = 2830
                localctx.label = self.identifier()


            self.state = 2834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2833
                self.columnAliases()


            self.state = 2846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107, 108, 130, 361, 408, 446, 498]:
                self.state = 2836
                self.queryStatement()
                pass
            elif token in [429]:
                self.state = 2837
                self.match(StarRocksParser.VALUES)
                self.state = 2838
                self.expressionsWithDefault()
                self.state = 2843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 2839
                    self.match(StarRocksParser.COMMA)
                    self.state = 2840
                    self.expressionsWithDefault()
                    self.state = 2845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # ExpressionContext

        def UPDATE(self):
            return self.getToken(StarRocksParser.UPDATE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(StarRocksParser.AssignmentListContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(StarRocksParser.FromClauseContext,0)


        def explainDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ExplainDescContext,0)


        def withClause(self):
            return self.getTypedRuleContext(StarRocksParser.WithClauseContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = StarRocksParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 8388611) != 0):
                self.state = 2848
                self.explainDesc()


            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 2851
                self.withClause()


            self.state = 2854
            self.match(StarRocksParser.UPDATE)
            self.state = 2855
            self.qualifiedName()
            self.state = 2856
            self.match(StarRocksParser.SET)
            self.state = 2857
            self.assignmentList()
            self.state = 2858
            self.fromClause()
            self.state = 2861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 2859
                self.match(StarRocksParser.WHERE)
                self.state = 2860
                localctx.where = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using = None # RelationsContext
            self.where = None # ExpressionContext

        def DELETE(self):
            return self.getToken(StarRocksParser.DELETE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def explainDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ExplainDescContext,0)


        def withClause(self):
            return self.getTypedRuleContext(StarRocksParser.WithClauseContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def USING(self):
            return self.getToken(StarRocksParser.USING, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def relations(self):
            return self.getTypedRuleContext(StarRocksParser.RelationsContext,0)


        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = StarRocksParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 8388611) != 0):
                self.state = 2863
                self.explainDesc()


            self.state = 2867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 2866
                self.withClause()


            self.state = 2869
            self.match(StarRocksParser.DELETE)
            self.state = 2870
            self.match(StarRocksParser.FROM)
            self.state = 2871
            self.qualifiedName()
            self.state = 2873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 2872
                self.partitionNames()


            self.state = 2877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==427:
                self.state = 2875
                self.match(StarRocksParser.USING)
                self.state = 2876
                localctx.using = self.relations()


            self.state = 2881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 2879
                self.match(StarRocksParser.WHERE)
                self.state = 2880
                localctx.where = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext
            self.table = None # QualifiedNameContext
            self.source = None # IdentifierContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def loadProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.LoadPropertiesContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.LoadPropertiesContext,i)


        def jobProperties(self):
            return self.getTypedRuleContext(StarRocksParser.JobPropertiesContext,0)


        def dataSourceProperties(self):
            return self.getTypedRuleContext(StarRocksParser.DataSourcePropertiesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoutineLoadStatement" ):
                listener.enterCreateRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoutineLoadStatement" ):
                listener.exitCreateRoutineLoadStatement(self)




    def createRoutineLoadStatement(self):

        localctx = StarRocksParser.CreateRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_createRoutineLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            self.match(StarRocksParser.CREATE)
            self.state = 2884
            self.match(StarRocksParser.ROUTINE)
            self.state = 2885
            self.match(StarRocksParser.LOAD)
            self.state = 2889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 2886
                localctx.db = self.qualifiedName()
                self.state = 2887
                self.match(StarRocksParser.DOT)


            self.state = 2891
            localctx.name = self.identifier()
            self.state = 2892
            self.match(StarRocksParser.ON)
            self.state = 2893
            localctx.table = self.qualifiedName()
            self.state = 2902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62 or _la==279 or _la==280 or _la==349 or _la==396 or _la==444:
                self.state = 2894
                self.loadProperties()
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 2895
                    self.match(StarRocksParser.COMMA)
                    self.state = 2896
                    self.loadProperties()
                    self.state = 2901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2904
                self.jobProperties()


            self.state = 2907
            self.match(StarRocksParser.FROM)
            self.state = 2908
            localctx.source = self.identifier()
            self.state = 2910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 2909
                self.dataSourceProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def loadProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.LoadPropertiesContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.LoadPropertiesContext,i)


        def jobProperties(self):
            return self.getTypedRuleContext(StarRocksParser.JobPropertiesContext,0)


        def dataSource(self):
            return self.getTypedRuleContext(StarRocksParser.DataSourceContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_alterRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRoutineLoadStatement" ):
                listener.enterAlterRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRoutineLoadStatement" ):
                listener.exitAlterRoutineLoadStatement(self)




    def alterRoutineLoadStatement(self):

        localctx = StarRocksParser.AlterRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_alterRoutineLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2912
            self.match(StarRocksParser.ALTER)
            self.state = 2913
            self.match(StarRocksParser.ROUTINE)
            self.state = 2914
            self.match(StarRocksParser.LOAD)
            self.state = 2915
            self.match(StarRocksParser.FOR)
            self.state = 2919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2916
                localctx.db = self.qualifiedName()
                self.state = 2917
                self.match(StarRocksParser.DOT)


            self.state = 2921
            localctx.name = self.identifier()
            self.state = 2930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62 or _la==279 or _la==280 or _la==349 or _la==396 or _la==444:
                self.state = 2922
                self.loadProperties()
                self.state = 2927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 2923
                    self.match(StarRocksParser.COMMA)
                    self.state = 2924
                    self.loadProperties()
                    self.state = 2929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2932
                self.jobProperties()


            self.state = 2936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 2935
                self.dataSource()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # IdentifierContext

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def dataSourceProperties(self):
            return self.getTypedRuleContext(StarRocksParser.DataSourcePropertiesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dataSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSource" ):
                listener.enterDataSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSource" ):
                listener.exitDataSource(self)




    def dataSource(self):

        localctx = StarRocksParser.DataSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_dataSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            self.match(StarRocksParser.FROM)
            self.state = 2939
            localctx.source = self.identifier()
            self.state = 2940
            self.dataSourceProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colSeparatorProperty(self):
            return self.getTypedRuleContext(StarRocksParser.ColSeparatorPropertyContext,0)


        def rowDelimiterProperty(self):
            return self.getTypedRuleContext(StarRocksParser.RowDelimiterPropertyContext,0)


        def importColumns(self):
            return self.getTypedRuleContext(StarRocksParser.ImportColumnsContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_loadProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadProperties" ):
                listener.enterLoadProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadProperties" ):
                listener.exitLoadProperties(self)




    def loadProperties(self):

        localctx = StarRocksParser.LoadPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_loadProperties)
        try:
            self.state = 2948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2942
                self.colSeparatorProperty()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2943
                self.rowDelimiterProperty()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2944
                self.importColumns()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2945
                self.match(StarRocksParser.WHERE)
                self.state = 2946
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2947
                self.partitionNames()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColSeparatorPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(StarRocksParser.COLUMNS, 0)

        def TERMINATED(self):
            return self.getToken(StarRocksParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_colSeparatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColSeparatorProperty" ):
                listener.enterColSeparatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColSeparatorProperty" ):
                listener.exitColSeparatorProperty(self)




    def colSeparatorProperty(self):

        localctx = StarRocksParser.ColSeparatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_colSeparatorProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2950
            self.match(StarRocksParser.COLUMNS)
            self.state = 2951
            self.match(StarRocksParser.TERMINATED)
            self.state = 2952
            self.match(StarRocksParser.BY)
            self.state = 2953
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowDelimiterPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(StarRocksParser.ROWS, 0)

        def TERMINATED(self):
            return self.getToken(StarRocksParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_rowDelimiterProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowDelimiterProperty" ):
                listener.enterRowDelimiterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowDelimiterProperty" ):
                listener.exitRowDelimiterProperty(self)




    def rowDelimiterProperty(self):

        localctx = StarRocksParser.RowDelimiterPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_rowDelimiterProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2955
            self.match(StarRocksParser.ROWS)
            self.state = 2956
            self.match(StarRocksParser.TERMINATED)
            self.state = 2957
            self.match(StarRocksParser.BY)
            self.state = 2958
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(StarRocksParser.COLUMNS, 0)

        def columnProperties(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnPropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_importColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportColumns" ):
                listener.enterImportColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportColumns" ):
                listener.exitImportColumns(self)




    def importColumns(self):

        localctx = StarRocksParser.ImportColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_importColumns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2960
            self.match(StarRocksParser.COLUMNS)
            self.state = 2961
            self.columnProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_columnProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnProperties" ):
                listener.enterColumnProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnProperties" ):
                listener.exitColumnProperties(self)




    def columnProperties(self):

        localctx = StarRocksParser.ColumnPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_columnProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 2966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 2964
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 2965
                self.assignment()
                pass


            self.state = 2975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 2968
                self.match(StarRocksParser.COMMA)
                self.state = 2971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 2969
                    self.qualifiedName()
                    pass

                elif la_ == 2:
                    self.state = 2970
                    self.assignment()
                    pass


                self.state = 2977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2978
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JobPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_jobProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJobProperties" ):
                listener.enterJobProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJobProperties" ):
                listener.exitJobProperties(self)




    def jobProperties(self):

        localctx = StarRocksParser.JobPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_jobProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2980
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSourcePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dataSourceProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSourceProperties" ):
                listener.enterDataSourceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSourceProperties" ):
                listener.exitDataSourceProperties(self)




    def dataSourceProperties(self):

        localctx = StarRocksParser.DataSourcePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_dataSourceProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2982
            self.propertyList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def STOP(self):
            return self.getToken(StarRocksParser.STOP, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_stopRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopRoutineLoadStatement" ):
                listener.enterStopRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopRoutineLoadStatement" ):
                listener.exitStopRoutineLoadStatement(self)




    def stopRoutineLoadStatement(self):

        localctx = StarRocksParser.StopRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_stopRoutineLoadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2984
            self.match(StarRocksParser.STOP)
            self.state = 2985
            self.match(StarRocksParser.ROUTINE)
            self.state = 2986
            self.match(StarRocksParser.LOAD)
            self.state = 2987
            self.match(StarRocksParser.FOR)
            self.state = 2991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2988
                localctx.db = self.qualifiedName()
                self.state = 2989
                self.match(StarRocksParser.DOT)


            self.state = 2993
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def RESUME(self):
            return self.getToken(StarRocksParser.RESUME, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_resumeRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeRoutineLoadStatement" ):
                listener.enterResumeRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeRoutineLoadStatement" ):
                listener.exitResumeRoutineLoadStatement(self)




    def resumeRoutineLoadStatement(self):

        localctx = StarRocksParser.ResumeRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_resumeRoutineLoadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2995
            self.match(StarRocksParser.RESUME)
            self.state = 2996
            self.match(StarRocksParser.ROUTINE)
            self.state = 2997
            self.match(StarRocksParser.LOAD)
            self.state = 2998
            self.match(StarRocksParser.FOR)
            self.state = 3002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2999
                localctx.db = self.qualifiedName()
                self.state = 3000
                self.match(StarRocksParser.DOT)


            self.state = 3004
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PauseRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def PAUSE(self):
            return self.getToken(StarRocksParser.PAUSE, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_pauseRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPauseRoutineLoadStatement" ):
                listener.enterPauseRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPauseRoutineLoadStatement" ):
                listener.exitPauseRoutineLoadStatement(self)




    def pauseRoutineLoadStatement(self):

        localctx = StarRocksParser.PauseRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_pauseRoutineLoadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            self.match(StarRocksParser.PAUSE)
            self.state = 3007
            self.match(StarRocksParser.ROUTINE)
            self.state = 3008
            self.match(StarRocksParser.LOAD)
            self.state = 3009
            self.match(StarRocksParser.FOR)
            self.state = 3013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 3010
                localctx.db = self.qualifiedName()
                self.state = 3011
                self.match(StarRocksParser.DOT)


            self.state = 3015
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutineLoadStatement" ):
                listener.enterShowRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutineLoadStatement" ):
                listener.exitShowRoutineLoadStatement(self)




    def showRoutineLoadStatement(self):

        localctx = StarRocksParser.ShowRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_showRoutineLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3017
            self.match(StarRocksParser.SHOW)
            self.state = 3019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 3018
                self.match(StarRocksParser.ALL)


            self.state = 3021
            self.match(StarRocksParser.ROUTINE)
            self.state = 3022
            self.match(StarRocksParser.LOAD)
            self.state = 3030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 3023
                self.match(StarRocksParser.FOR)
                self.state = 3027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 3024
                    localctx.db = self.qualifiedName()
                    self.state = 3025
                    self.match(StarRocksParser.DOT)


                self.state = 3029
                localctx.name = self.identifier()


            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 3032
                self.match(StarRocksParser.FROM)
                self.state = 3033
                localctx.db = self.qualifiedName()


            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3036
                self.match(StarRocksParser.WHERE)
                self.state = 3037
                self.expression(0)


            self.state = 3050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 3040
                self.match(StarRocksParser.ORDER)
                self.state = 3041
                self.match(StarRocksParser.BY)
                self.state = 3042
                self.sortItem()
                self.state = 3047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3043
                    self.match(StarRocksParser.COMMA)
                    self.state = 3044
                    self.sortItem()
                    self.state = 3049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 3052
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRoutineLoadTaskStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def TASK(self):
            return self.getToken(StarRocksParser.TASK, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showRoutineLoadTaskStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutineLoadTaskStatement" ):
                listener.enterShowRoutineLoadTaskStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutineLoadTaskStatement" ):
                listener.exitShowRoutineLoadTaskStatement(self)




    def showRoutineLoadTaskStatement(self):

        localctx = StarRocksParser.ShowRoutineLoadTaskStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_showRoutineLoadTaskStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3055
            self.match(StarRocksParser.SHOW)
            self.state = 3056
            self.match(StarRocksParser.ROUTINE)
            self.state = 3057
            self.match(StarRocksParser.LOAD)
            self.state = 3058
            self.match(StarRocksParser.TASK)
            self.state = 3061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 3059
                self.match(StarRocksParser.FROM)
                self.state = 3060
                localctx.db = self.qualifiedName()


            self.state = 3063
            self.match(StarRocksParser.WHERE)
            self.state = 3064
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRoutineLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showCreateRoutineLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRoutineLoadStatement" ):
                listener.enterShowCreateRoutineLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRoutineLoadStatement" ):
                listener.exitShowCreateRoutineLoadStatement(self)




    def showCreateRoutineLoadStatement(self):

        localctx = StarRocksParser.ShowCreateRoutineLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_showCreateRoutineLoadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            self.match(StarRocksParser.SHOW)
            self.state = 3067
            self.match(StarRocksParser.CREATE)
            self.state = 3068
            self.match(StarRocksParser.ROUTINE)
            self.state = 3069
            self.match(StarRocksParser.LOAD)
            self.state = 3073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 3070
                localctx.db = self.qualifiedName()
                self.state = 3071
                self.match(StarRocksParser.DOT)


            self.state = 3075
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStreamLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def STREAM(self):
            return self.getToken(StarRocksParser.STREAM, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showStreamLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStreamLoadStatement" ):
                listener.enterShowStreamLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStreamLoadStatement" ):
                listener.exitShowStreamLoadStatement(self)




    def showStreamLoadStatement(self):

        localctx = StarRocksParser.ShowStreamLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_showStreamLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self.match(StarRocksParser.SHOW)
            self.state = 3079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 3078
                self.match(StarRocksParser.ALL)


            self.state = 3081
            self.match(StarRocksParser.STREAM)
            self.state = 3082
            self.match(StarRocksParser.LOAD)
            self.state = 3090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 3083
                self.match(StarRocksParser.FOR)
                self.state = 3087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 3084
                    localctx.db = self.qualifiedName()
                    self.state = 3085
                    self.match(StarRocksParser.DOT)


                self.state = 3089
                localctx.name = self.identifier()


            self.state = 3094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 3092
                self.match(StarRocksParser.FROM)
                self.state = 3093
                localctx.db = self.qualifiedName()


            self.state = 3098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3096
                self.match(StarRocksParser.WHERE)
                self.state = 3097
                self.expression(0)


            self.state = 3110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 3100
                self.match(StarRocksParser.ORDER)
                self.state = 3101
                self.match(StarRocksParser.BY)
                self.state = 3102
                self.sortItem()
                self.state = 3107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3103
                    self.match(StarRocksParser.COMMA)
                    self.state = 3104
                    self.sortItem()
                    self.state = 3109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 3112
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def MODE(self):
            return self.getToken(StarRocksParser.MODE, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def SAMPLE(self):
            return self.getToken(StarRocksParser.SAMPLE, 0)

        def SYNC(self):
            return self.getToken(StarRocksParser.SYNC, 0)

        def ASYNC(self):
            return self.getToken(StarRocksParser.ASYNC, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_analyzeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeStatement" ):
                listener.enterAnalyzeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeStatement" ):
                listener.exitAnalyzeStatement(self)




    def analyzeStatement(self):

        localctx = StarRocksParser.AnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_analyzeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3115
            self.match(StarRocksParser.ANALYZE)
            self.state = 3117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156 or _la==354:
                self.state = 3116
                _la = self._input.LA(1)
                if not(_la==156 or _la==354):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3119
            self.match(StarRocksParser.TABLE)
            self.state = 3120
            self.qualifiedName()
            self.state = 3132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 3121
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 3122
                self.qualifiedName()
                self.state = 3127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3123
                    self.match(StarRocksParser.COMMA)
                    self.state = 3124
                    self.qualifiedName()
                    self.state = 3129
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3130
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 3137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 3134
                self.match(StarRocksParser.WITH)
                self.state = 3135
                _la = self._input.LA(1)
                if not(_la==19 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3136
                self.match(StarRocksParser.MODE)


            self.state = 3140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3139
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStatsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def STATS(self):
            return self.getToken(StarRocksParser.STATS, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropStatsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropStatsStatement" ):
                listener.enterDropStatsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropStatsStatement" ):
                listener.exitDropStatsStatement(self)




    def dropStatsStatement(self):

        localctx = StarRocksParser.DropStatsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_dropStatsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3142
            self.match(StarRocksParser.DROP)
            self.state = 3143
            self.match(StarRocksParser.STATS)
            self.state = 3144
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeHistogramStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bucket = None # Token

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def UPDATE(self):
            return self.getToken(StarRocksParser.UPDATE, 0)

        def HISTOGRAM(self):
            return self.getToken(StarRocksParser.HISTOGRAM, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.WITH)
            else:
                return self.getToken(StarRocksParser.WITH, i)

        def MODE(self):
            return self.getToken(StarRocksParser.MODE, 0)

        def BUCKETS(self):
            return self.getToken(StarRocksParser.BUCKETS, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def SYNC(self):
            return self.getToken(StarRocksParser.SYNC, 0)

        def ASYNC(self):
            return self.getToken(StarRocksParser.ASYNC, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_analyzeHistogramStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeHistogramStatement" ):
                listener.enterAnalyzeHistogramStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeHistogramStatement" ):
                listener.exitAnalyzeHistogramStatement(self)




    def analyzeHistogramStatement(self):

        localctx = StarRocksParser.AnalyzeHistogramStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_analyzeHistogramStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            self.match(StarRocksParser.ANALYZE)
            self.state = 3147
            self.match(StarRocksParser.TABLE)
            self.state = 3148
            self.qualifiedName()
            self.state = 3149
            self.match(StarRocksParser.UPDATE)
            self.state = 3150
            self.match(StarRocksParser.HISTOGRAM)
            self.state = 3151
            self.match(StarRocksParser.ON)
            self.state = 3152
            self.qualifiedName()
            self.state = 3157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 3153
                self.match(StarRocksParser.COMMA)
                self.state = 3154
                self.qualifiedName()
                self.state = 3159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 3160
                self.match(StarRocksParser.WITH)
                self.state = 3161
                _la = self._input.LA(1)
                if not(_la==19 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3162
                self.match(StarRocksParser.MODE)


            self.state = 3168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 3165
                self.match(StarRocksParser.WITH)
                self.state = 3166
                localctx.bucket = self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 3167
                self.match(StarRocksParser.BUCKETS)


            self.state = 3171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3170
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropHistogramStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def HISTOGRAM(self):
            return self.getToken(StarRocksParser.HISTOGRAM, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropHistogramStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropHistogramStatement" ):
                listener.enterDropHistogramStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropHistogramStatement" ):
                listener.exitDropHistogramStatement(self)




    def dropHistogramStatement(self):

        localctx = StarRocksParser.DropHistogramStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_dropHistogramStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3173
            self.match(StarRocksParser.ANALYZE)
            self.state = 3174
            self.match(StarRocksParser.TABLE)
            self.state = 3175
            self.qualifiedName()
            self.state = 3176
            self.match(StarRocksParser.DROP)
            self.state = 3177
            self.match(StarRocksParser.HISTOGRAM)
            self.state = 3178
            self.match(StarRocksParser.ON)
            self.state = 3179
            self.qualifiedName()
            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 3180
                self.match(StarRocksParser.COMMA)
                self.state = 3181
                self.qualifiedName()
                self.state = 3186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateAnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def SAMPLE(self):
            return self.getToken(StarRocksParser.SAMPLE, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createAnalyzeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateAnalyzeStatement" ):
                listener.enterCreateAnalyzeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateAnalyzeStatement" ):
                listener.exitCreateAnalyzeStatement(self)




    def createAnalyzeStatement(self):

        localctx = StarRocksParser.CreateAnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_createAnalyzeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3187
                self.match(StarRocksParser.CREATE)
                self.state = 3188
                self.match(StarRocksParser.ANALYZE)
                self.state = 3190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156 or _la==354:
                    self.state = 3189
                    _la = self._input.LA(1)
                    if not(_la==156 or _la==354):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3192
                self.match(StarRocksParser.ALL)
                self.state = 3194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 3193
                    self.properties()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3196
                self.match(StarRocksParser.CREATE)
                self.state = 3197
                self.match(StarRocksParser.ANALYZE)
                self.state = 3199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156 or _la==354:
                    self.state = 3198
                    _la = self._input.LA(1)
                    if not(_la==156 or _la==354):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3201
                self.match(StarRocksParser.DATABASE)
                self.state = 3202
                localctx.db = self.identifier()
                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 3203
                    self.properties()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3206
                self.match(StarRocksParser.CREATE)
                self.state = 3207
                self.match(StarRocksParser.ANALYZE)
                self.state = 3209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156 or _la==354:
                    self.state = 3208
                    _la = self._input.LA(1)
                    if not(_la==156 or _la==354):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3211
                self.match(StarRocksParser.TABLE)
                self.state = 3212
                self.qualifiedName()
                self.state = 3224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 3213
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 3214
                    self.qualifiedName()
                    self.state = 3219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 3215
                        self.match(StarRocksParser.COMMA)
                        self.state = 3216
                        self.qualifiedName()
                        self.state = 3221
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3222
                    self.match(StarRocksParser.RIGHT_PAREN)


                self.state = 3227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 3226
                    self.properties()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropAnalyzeJobStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropAnalyzeJobStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropAnalyzeJobStatement" ):
                listener.enterDropAnalyzeJobStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropAnalyzeJobStatement" ):
                listener.exitDropAnalyzeJobStatement(self)




    def dropAnalyzeJobStatement(self):

        localctx = StarRocksParser.DropAnalyzeJobStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_dropAnalyzeJobStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3231
            self.match(StarRocksParser.DROP)
            self.state = 3232
            self.match(StarRocksParser.ANALYZE)
            self.state = 3233
            self.match(StarRocksParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowAnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def JOB(self):
            return self.getToken(StarRocksParser.JOB, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showAnalyzeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAnalyzeStatement" ):
                listener.enterShowAnalyzeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAnalyzeStatement" ):
                listener.exitShowAnalyzeStatement(self)




    def showAnalyzeStatement(self):

        localctx = StarRocksParser.ShowAnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_showAnalyzeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3235
            self.match(StarRocksParser.SHOW)
            self.state = 3236
            self.match(StarRocksParser.ANALYZE)
            self.state = 3238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203 or _la==377:
                self.state = 3237
                _la = self._input.LA(1)
                if not(_la==203 or _la==377):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3240
                self.match(StarRocksParser.WHERE)
                self.state = 3241
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatsMetaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def STATS(self):
            return self.getToken(StarRocksParser.STATS, 0)

        def META(self):
            return self.getToken(StarRocksParser.META, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showStatsMetaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsMetaStatement" ):
                listener.enterShowStatsMetaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsMetaStatement" ):
                listener.exitShowStatsMetaStatement(self)




    def showStatsMetaStatement(self):

        localctx = StarRocksParser.ShowStatsMetaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_showStatsMetaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            self.match(StarRocksParser.SHOW)
            self.state = 3245
            self.match(StarRocksParser.STATS)
            self.state = 3246
            self.match(StarRocksParser.META)
            self.state = 3249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3247
                self.match(StarRocksParser.WHERE)
                self.state = 3248
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowHistogramMetaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def HISTOGRAM(self):
            return self.getToken(StarRocksParser.HISTOGRAM, 0)

        def META(self):
            return self.getToken(StarRocksParser.META, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showHistogramMetaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowHistogramMetaStatement" ):
                listener.enterShowHistogramMetaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowHistogramMetaStatement" ):
                listener.exitShowHistogramMetaStatement(self)




    def showHistogramMetaStatement(self):

        localctx = StarRocksParser.ShowHistogramMetaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_showHistogramMetaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3251
            self.match(StarRocksParser.SHOW)
            self.state = 3252
            self.match(StarRocksParser.HISTOGRAM)
            self.state = 3253
            self.match(StarRocksParser.META)
            self.state = 3256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3254
                self.match(StarRocksParser.WHERE)
                self.state = 3255
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillAnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(StarRocksParser.KILL, 0)

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_killAnalyzeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillAnalyzeStatement" ):
                listener.enterKillAnalyzeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillAnalyzeStatement" ):
                listener.exitKillAnalyzeStatement(self)




    def killAnalyzeStatement(self):

        localctx = StarRocksParser.KillAnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_killAnalyzeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3258
            self.match(StarRocksParser.KILL)
            self.state = 3259
            self.match(StarRocksParser.ANALYZE)
            self.state = 3260
            self.match(StarRocksParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeProfileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def PROFILE(self):
            return self.getToken(StarRocksParser.PROFILE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_analyzeProfileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeProfileStatement" ):
                listener.enterAnalyzeProfileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeProfileStatement" ):
                listener.exitAnalyzeProfileStatement(self)




    def analyzeProfileStatement(self):

        localctx = StarRocksParser.AnalyzeProfileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_analyzeProfileStatement)
        self._la = 0 # Token type
        try:
            self.state = 3279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3262
                self.match(StarRocksParser.ANALYZE)
                self.state = 3263
                self.match(StarRocksParser.PROFILE)
                self.state = 3264
                self.match(StarRocksParser.FROM)
                self.state = 3265
                self.string_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3266
                self.match(StarRocksParser.ANALYZE)
                self.state = 3267
                self.match(StarRocksParser.PROFILE)
                self.state = 3268
                self.match(StarRocksParser.FROM)
                self.state = 3269
                self.string_()
                self.state = 3270
                self.match(StarRocksParser.COMMA)
                self.state = 3271
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 3276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3272
                    self.match(StarRocksParser.COMMA)
                    self.state = 3273
                    self.match(StarRocksParser.INTEGER_VALUE)
                    self.state = 3278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateResourceGroupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PropertyContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def OR(self):
            return self.getToken(StarRocksParser.OR, 0)

        def REPLACE(self):
            return self.getToken(StarRocksParser.REPLACE, 0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def classifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ClassifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ClassifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createResourceGroupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateResourceGroupStatement" ):
                listener.enterCreateResourceGroupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateResourceGroupStatement" ):
                listener.exitCreateResourceGroupStatement(self)




    def createResourceGroupStatement(self):

        localctx = StarRocksParser.CreateResourceGroupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_createResourceGroupStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3281
            self.match(StarRocksParser.CREATE)
            self.state = 3282
            self.match(StarRocksParser.RESOURCE)
            self.state = 3283
            self.match(StarRocksParser.GROUP)
            self.state = 3287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 3284
                self.match(StarRocksParser.IF)
                self.state = 3285
                self.match(StarRocksParser.NOT)
                self.state = 3286
                self.match(StarRocksParser.EXISTS)


            self.state = 3291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 3289
                self.match(StarRocksParser.OR)
                self.state = 3290
                self.match(StarRocksParser.REPLACE)


            self.state = 3293
            self.identifier()
            self.state = 3303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==407:
                self.state = 3294
                self.match(StarRocksParser.TO)
                self.state = 3295
                self.classifier()
                self.state = 3300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3296
                    self.match(StarRocksParser.COMMA)
                    self.state = 3297
                    self.classifier()
                    self.state = 3302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3305
            self.match(StarRocksParser.WITH)
            self.state = 3306
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 3307
            self.property_()
            self.state = 3312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 3308
                self.match(StarRocksParser.COMMA)
                self.state = 3309
                self.property_()
                self.state = 3314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3315
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropResourceGroupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropResourceGroupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropResourceGroupStatement" ):
                listener.enterDropResourceGroupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropResourceGroupStatement" ):
                listener.exitDropResourceGroupStatement(self)




    def dropResourceGroupStatement(self):

        localctx = StarRocksParser.DropResourceGroupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_dropResourceGroupStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3317
            self.match(StarRocksParser.DROP)
            self.state = 3318
            self.match(StarRocksParser.RESOURCE)
            self.state = 3319
            self.match(StarRocksParser.GROUP)
            self.state = 3320
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterResourceGroupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def classifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ClassifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ClassifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PropertyContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PropertyContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterResourceGroupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterResourceGroupStatement" ):
                listener.enterAlterResourceGroupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterResourceGroupStatement" ):
                listener.exitAlterResourceGroupStatement(self)




    def alterResourceGroupStatement(self):

        localctx = StarRocksParser.AlterResourceGroupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_alterResourceGroupStatement)
        self._la = 0 # Token type
        try:
            self.state = 3374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3322
                self.match(StarRocksParser.ALTER)
                self.state = 3323
                self.match(StarRocksParser.RESOURCE)
                self.state = 3324
                self.match(StarRocksParser.GROUP)
                self.state = 3325
                self.identifier()
                self.state = 3326
                self.match(StarRocksParser.ADD)
                self.state = 3327
                self.classifier()
                self.state = 3332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3328
                    self.match(StarRocksParser.COMMA)
                    self.state = 3329
                    self.classifier()
                    self.state = 3334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3335
                self.match(StarRocksParser.ALTER)
                self.state = 3336
                self.match(StarRocksParser.RESOURCE)
                self.state = 3337
                self.match(StarRocksParser.GROUP)
                self.state = 3338
                self.identifier()
                self.state = 3339
                self.match(StarRocksParser.DROP)
                self.state = 3340
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 3341
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 3346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3342
                    self.match(StarRocksParser.COMMA)
                    self.state = 3343
                    self.match(StarRocksParser.INTEGER_VALUE)
                    self.state = 3348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3349
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3351
                self.match(StarRocksParser.ALTER)
                self.state = 3352
                self.match(StarRocksParser.RESOURCE)
                self.state = 3353
                self.match(StarRocksParser.GROUP)
                self.state = 3354
                self.identifier()
                self.state = 3355
                self.match(StarRocksParser.DROP)
                self.state = 3356
                self.match(StarRocksParser.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3358
                self.match(StarRocksParser.ALTER)
                self.state = 3359
                self.match(StarRocksParser.RESOURCE)
                self.state = 3360
                self.match(StarRocksParser.GROUP)
                self.state = 3361
                self.identifier()
                self.state = 3362
                self.match(StarRocksParser.WITH)
                self.state = 3363
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 3364
                self.property_()
                self.state = 3369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3365
                    self.match(StarRocksParser.COMMA)
                    self.state = 3366
                    self.property_()
                    self.state = 3371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3372
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowResourceGroupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def GROUPS(self):
            return self.getToken(StarRocksParser.GROUPS, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showResourceGroupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowResourceGroupStatement" ):
                listener.enterShowResourceGroupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowResourceGroupStatement" ):
                listener.exitShowResourceGroupStatement(self)




    def showResourceGroupStatement(self):

        localctx = StarRocksParser.ShowResourceGroupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_showResourceGroupStatement)
        self._la = 0 # Token type
        try:
            self.state = 3386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3376
                self.match(StarRocksParser.SHOW)
                self.state = 3377
                self.match(StarRocksParser.RESOURCE)
                self.state = 3378
                self.match(StarRocksParser.GROUP)
                self.state = 3379
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3380
                self.match(StarRocksParser.SHOW)
                self.state = 3381
                self.match(StarRocksParser.RESOURCE)
                self.state = 3382
                self.match(StarRocksParser.GROUPS)
                self.state = 3384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 3383
                    self.match(StarRocksParser.ALL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowResourceGroupUsageStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def USAGE(self):
            return self.getToken(StarRocksParser.USAGE, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def GROUPS(self):
            return self.getToken(StarRocksParser.GROUPS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showResourceGroupUsageStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowResourceGroupUsageStatement" ):
                listener.enterShowResourceGroupUsageStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowResourceGroupUsageStatement" ):
                listener.exitShowResourceGroupUsageStatement(self)




    def showResourceGroupUsageStatement(self):

        localctx = StarRocksParser.ShowResourceGroupUsageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_showResourceGroupUsageStatement)
        try:
            self.state = 3397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3388
                self.match(StarRocksParser.SHOW)
                self.state = 3389
                self.match(StarRocksParser.USAGE)
                self.state = 3390
                self.match(StarRocksParser.RESOURCE)
                self.state = 3391
                self.match(StarRocksParser.GROUP)
                self.state = 3392
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3393
                self.match(StarRocksParser.SHOW)
                self.state = 3394
                self.match(StarRocksParser.USAGE)
                self.state = 3395
                self.match(StarRocksParser.RESOURCE)
                self.state = 3396
                self.match(StarRocksParser.GROUPS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateResourceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.resourceName = None # IdentifierOrStringContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createResourceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateResourceStatement" ):
                listener.enterCreateResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateResourceStatement" ):
                listener.exitCreateResourceStatement(self)




    def createResourceStatement(self):

        localctx = StarRocksParser.CreateResourceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_createResourceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3399
            self.match(StarRocksParser.CREATE)
            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 3400
                self.match(StarRocksParser.EXTERNAL)


            self.state = 3403
            self.match(StarRocksParser.RESOURCE)
            self.state = 3404
            localctx.resourceName = self.identifierOrString()
            self.state = 3406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3405
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterResourceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.resourceName = None # IdentifierOrStringContext

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterResourceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterResourceStatement" ):
                listener.enterAlterResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterResourceStatement" ):
                listener.exitAlterResourceStatement(self)




    def alterResourceStatement(self):

        localctx = StarRocksParser.AlterResourceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_alterResourceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3408
            self.match(StarRocksParser.ALTER)
            self.state = 3409
            self.match(StarRocksParser.RESOURCE)
            self.state = 3410
            localctx.resourceName = self.identifierOrString()
            self.state = 3411
            self.match(StarRocksParser.SET)
            self.state = 3412
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropResourceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.resourceName = None # IdentifierOrStringContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropResourceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropResourceStatement" ):
                listener.enterDropResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropResourceStatement" ):
                listener.exitDropResourceStatement(self)




    def dropResourceStatement(self):

        localctx = StarRocksParser.DropResourceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_dropResourceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3414
            self.match(StarRocksParser.DROP)
            self.state = 3415
            self.match(StarRocksParser.RESOURCE)
            self.state = 3416
            localctx.resourceName = self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowResourceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def RESOURCES(self):
            return self.getToken(StarRocksParser.RESOURCES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showResourceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowResourceStatement" ):
                listener.enterShowResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowResourceStatement" ):
                listener.exitShowResourceStatement(self)




    def showResourceStatement(self):

        localctx = StarRocksParser.ShowResourceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_showResourceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3418
            self.match(StarRocksParser.SHOW)
            self.state = 3419
            self.match(StarRocksParser.RESOURCES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_classifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassifier" ):
                listener.enterClassifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassifier" ):
                listener.exitClassifier(self)




    def classifier(self):

        localctx = StarRocksParser.ClassifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_classifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3421
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 3422
            self.expressionList()
            self.state = 3423
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def FUNCTIONS(self):
            return self.getToken(StarRocksParser.FUNCTIONS, 0)

        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def BUILTIN(self):
            return self.getToken(StarRocksParser.BUILTIN, 0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctionsStatement" ):
                listener.enterShowFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctionsStatement" ):
                listener.exitShowFunctionsStatement(self)




    def showFunctionsStatement(self):

        localctx = StarRocksParser.ShowFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_showFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3425
            self.match(StarRocksParser.SHOW)
            self.state = 3427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3426
                self.match(StarRocksParser.FULL)


            self.state = 3430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==159:
                self.state = 3429
                _la = self._input.LA(1)
                if not(_la==41 or _la==159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3432
            self.match(StarRocksParser.FUNCTIONS)
            self.state = 3435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 3433
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3434
                localctx.db = self.qualifiedName()


            self.state = 3441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3437
                self.match(StarRocksParser.LIKE)
                self.state = 3438
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3439
                self.match(StarRocksParser.WHERE)
                self.state = 3440
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(StarRocksParser.FUNCTION, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def typeList(self):
            return self.getTypedRuleContext(StarRocksParser.TypeListContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunctionStatement" ):
                listener.enterDropFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunctionStatement" ):
                listener.exitDropFunctionStatement(self)




    def dropFunctionStatement(self):

        localctx = StarRocksParser.DropFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_dropFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3443
            self.match(StarRocksParser.DROP)
            self.state = 3445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 3444
                self.match(StarRocksParser.GLOBAL)


            self.state = 3447
            self.match(StarRocksParser.FUNCTION)
            self.state = 3448
            self.qualifiedName()
            self.state = 3449
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 3450
            self.typeList()
            self.state = 3451
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionType = None # Token
            self.returnType = None # TypeContext
            self.intermediateType = None # TypeContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(StarRocksParser.FUNCTION, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def typeList(self):
            return self.getTypedRuleContext(StarRocksParser.TypeListContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def RETURNS(self):
            return self.getToken(StarRocksParser.RETURNS, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.TypeContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.TypeContext,i)


        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def INTERMEDIATE(self):
            return self.getToken(StarRocksParser.INTERMEDIATE, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def AGGREGATE(self):
            return self.getToken(StarRocksParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_createFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunctionStatement" ):
                listener.enterCreateFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunctionStatement" ):
                listener.exitCreateFunctionStatement(self)




    def createFunctionStatement(self):

        localctx = StarRocksParser.CreateFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_createFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3453
            self.match(StarRocksParser.CREATE)
            self.state = 3455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 3454
                self.match(StarRocksParser.GLOBAL)


            self.state = 3458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==391:
                self.state = 3457
                localctx.functionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==7 or _la==391):
                    localctx.functionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3460
            self.match(StarRocksParser.FUNCTION)
            self.state = 3461
            self.qualifiedName()
            self.state = 3462
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 3463
            self.typeList()
            self.state = 3464
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 3465
            self.match(StarRocksParser.RETURNS)
            self.state = 3466
            localctx.returnType = self.type_()
            self.state = 3469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 3467
                self.match(StarRocksParser.INTERMEDIATE)
                self.state = 3468
                localctx.intermediateType = self.type_()


            self.state = 3472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3471
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.TypeContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def DOTDOTDOT(self):
            return self.getToken(StarRocksParser.DOTDOTDOT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = StarRocksParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251944768847872) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 18014398517871091) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & 1152922621301489665) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 33554435) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & 6922032698137522185) != 0):
                self.state = 3474
                self.type_()


            self.state = 3481
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3477
                    self.match(StarRocksParser.COMMA)
                    self.state = 3478
                    self.type_() 
                self.state = 3483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

            self.state = 3486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==500:
                self.state = 3484
                self.match(StarRocksParser.COMMA)
                self.state = 3485
                self.match(StarRocksParser.DOTDOTDOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.label = None # LabelNameContext
            self.data = None # DataDescListContext
            self.broker = None # BrokerDescContext
            self.system = None # IdentifierOrStringContext
            self.props = None # PropertyListContext
            self.resource = None # ResourceDescContext

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def LABEL(self):
            return self.getToken(StarRocksParser.LABEL, 0)

        def labelName(self):
            return self.getTypedRuleContext(StarRocksParser.LabelNameContext,0)


        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def dataDescList(self):
            return self.getTypedRuleContext(StarRocksParser.DataDescListContext,0)


        def brokerDesc(self):
            return self.getTypedRuleContext(StarRocksParser.BrokerDescContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def resourceDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ResourceDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)




    def loadStatement(self):

        localctx = StarRocksParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.state = 3516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3488
                self.match(StarRocksParser.LOAD)
                self.state = 3489
                self.match(StarRocksParser.LABEL)
                self.state = 3490
                localctx.label = self.labelName()
                self.state = 3492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 3491
                    localctx.data = self.dataDescList()


                self.state = 3495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 3494
                    localctx.broker = self.brokerDesc()


                self.state = 3499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 3497
                    self.match(StarRocksParser.BY)
                    self.state = 3498
                    localctx.system = self.identifierOrString()


                self.state = 3503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 3501
                    self.match(StarRocksParser.PROPERTIES)
                    self.state = 3502
                    localctx.props = self.propertyList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3505
                self.match(StarRocksParser.LOAD)
                self.state = 3506
                self.match(StarRocksParser.LABEL)
                self.state = 3507
                localctx.label = self.labelName()
                self.state = 3509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 3508
                    localctx.data = self.dataDescList()


                self.state = 3511
                localctx.resource = self.resourceDesc()
                self.state = 3514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 3512
                    self.match(StarRocksParser.PROPERTIES)
                    self.state = 3513
                    localctx.props = self.propertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.label = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_labelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelName" ):
                listener.enterLabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelName" ):
                listener.exitLabelName(self)




    def labelName(self):

        localctx = StarRocksParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 3518
                localctx.db = self.identifier()
                self.state = 3519
                self.match(StarRocksParser.DOT)


            self.state = 3523
            localctx.label = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def dataDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.DataDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.DataDescContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dataDescList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescList" ):
                listener.enterDataDescList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescList" ):
                listener.exitDataDescList(self)




    def dataDescList(self):

        localctx = StarRocksParser.DataDescListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_dataDescList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3525
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 3526
            self.dataDesc()
            self.state = 3531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 3527
                self.match(StarRocksParser.COMMA)
                self.state = 3528
                self.dataDesc()
                self.state = 3533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3534
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.srcFiles = None # StringListContext
            self.dstTableName = None # IdentifierContext
            self.partitions = None # PartitionNamesContext
            self.colSep = None # String_Context
            self.rowSep = None # String_Context
            self.format_ = None # FileFormatContext
            self.formatPropsField = None # FormatPropsContext
            self.colList = None # ColumnAliasesContext
            self.colFromPath = None # IdentifierListContext
            self.colMappingList = None # ClassifierContext
            self.where = None # ExpressionContext
            self.srcTableName = None # IdentifierContext

        def DATA(self):
            return self.getToken(StarRocksParser.DATA, 0)

        def INFILE(self):
            return self.getToken(StarRocksParser.INFILE, 0)

        def INTO(self):
            return self.getToken(StarRocksParser.INTO, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.TABLE)
            else:
                return self.getToken(StarRocksParser.TABLE, i)

        def stringList(self):
            return self.getTypedRuleContext(StarRocksParser.StringListContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def NEGATIVE(self):
            return self.getToken(StarRocksParser.NEGATIVE, 0)

        def COLUMNS(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COLUMNS)
            else:
                return self.getToken(StarRocksParser.COLUMNS, i)

        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.TERMINATED)
            else:
                return self.getToken(StarRocksParser.TERMINATED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.BY)
            else:
                return self.getToken(StarRocksParser.BY, i)

        def ROWS(self):
            return self.getToken(StarRocksParser.ROWS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def PATH(self):
            return self.getToken(StarRocksParser.PATH, 0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def fileFormat(self):
            return self.getTypedRuleContext(StarRocksParser.FileFormatContext,0)


        def formatProps(self):
            return self.getTypedRuleContext(StarRocksParser.FormatPropsContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def classifier(self):
            return self.getTypedRuleContext(StarRocksParser.ClassifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dataDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDesc" ):
                listener.enterDataDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDesc" ):
                listener.exitDataDesc(self)




    def dataDesc(self):

        localctx = StarRocksParser.DataDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_dataDesc)
        self._la = 0 # Token type
        try:
            self.state = 3605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3536
                self.match(StarRocksParser.DATA)
                self.state = 3537
                self.match(StarRocksParser.INFILE)
                self.state = 3538
                localctx.srcFiles = self.stringList()
                self.state = 3540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 3539
                    self.match(StarRocksParser.NEGATIVE)


                self.state = 3542
                self.match(StarRocksParser.INTO)
                self.state = 3543
                self.match(StarRocksParser.TABLE)
                self.state = 3544
                localctx.dstTableName = self.identifier()
                self.state = 3546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279 or _la==280 or _la==396:
                    self.state = 3545
                    localctx.partitions = self.partitionNames()


                self.state = 3552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 3548
                    self.match(StarRocksParser.COLUMNS)
                    self.state = 3549
                    self.match(StarRocksParser.TERMINATED)
                    self.state = 3550
                    self.match(StarRocksParser.BY)
                    self.state = 3551
                    localctx.colSep = self.string_()


                self.state = 3558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==349:
                    self.state = 3554
                    self.match(StarRocksParser.ROWS)
                    self.state = 3555
                    self.match(StarRocksParser.TERMINATED)
                    self.state = 3556
                    self.match(StarRocksParser.BY)
                    self.state = 3557
                    localctx.rowSep = self.string_()


                self.state = 3561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 3560
                    localctx.format_ = self.fileFormat()


                self.state = 3564
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 3563
                    localctx.formatPropsField = self.formatProps()


                self.state = 3567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 3566
                    localctx.colList = self.columnAliases()


                self.state = 3574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 3569
                    self.match(StarRocksParser.COLUMNS)
                    self.state = 3570
                    self.match(StarRocksParser.FROM)
                    self.state = 3571
                    self.match(StarRocksParser.PATH)
                    self.state = 3572
                    self.match(StarRocksParser.AS)
                    self.state = 3573
                    localctx.colFromPath = self.identifierList()


                self.state = 3578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==366:
                    self.state = 3576
                    self.match(StarRocksParser.SET)
                    self.state = 3577
                    localctx.colMappingList = self.classifier()


                self.state = 3582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 3580
                    self.match(StarRocksParser.WHERE)
                    self.state = 3581
                    localctx.where = self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3584
                self.match(StarRocksParser.DATA)
                self.state = 3585
                self.match(StarRocksParser.FROM)
                self.state = 3586
                self.match(StarRocksParser.TABLE)
                self.state = 3587
                localctx.srcTableName = self.identifier()
                self.state = 3589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 3588
                    self.match(StarRocksParser.NEGATIVE)


                self.state = 3591
                self.match(StarRocksParser.INTO)
                self.state = 3592
                self.match(StarRocksParser.TABLE)
                self.state = 3593
                localctx.dstTableName = self.identifier()
                self.state = 3595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279 or _la==280 or _la==396:
                    self.state = 3594
                    localctx.partitions = self.partitionNames()


                self.state = 3599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==366:
                    self.state = 3597
                    self.match(StarRocksParser.SET)
                    self.state = 3598
                    localctx.colMappingList = self.classifier()


                self.state = 3603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 3601
                    self.match(StarRocksParser.WHERE)
                    self.state = 3602
                    localctx.where = self.expression(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormatPropsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.encloseCharacter = None # String_Context
            self.escapeCharacter = None # String_Context

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def SKIP_HEADER(self):
            return self.getToken(StarRocksParser.SKIP_HEADER, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.EQ)
            else:
                return self.getToken(StarRocksParser.EQ, i)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def TRIM_SPACE(self):
            return self.getToken(StarRocksParser.TRIM_SPACE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(StarRocksParser.BooleanValueContext,0)


        def ENCLOSE(self):
            return self.getToken(StarRocksParser.ENCLOSE, 0)

        def ESCAPE(self):
            return self.getToken(StarRocksParser.ESCAPE, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_formatProps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatProps" ):
                listener.enterFormatProps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatProps" ):
                listener.exitFormatProps(self)




    def formatProps(self):

        localctx = StarRocksParser.FormatPropsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_formatProps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 3611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==370:
                self.state = 3608
                self.match(StarRocksParser.SKIP_HEADER)
                self.state = 3609
                self.match(StarRocksParser.EQ)
                self.state = 3610
                self.match(StarRocksParser.INTEGER_VALUE)


            self.state = 3616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==410:
                self.state = 3613
                self.match(StarRocksParser.TRIM_SPACE)
                self.state = 3614
                self.match(StarRocksParser.EQ)
                self.state = 3615
                self.booleanValue()


            self.state = 3621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 3618
                self.match(StarRocksParser.ENCLOSE)
                self.state = 3619
                self.match(StarRocksParser.EQ)
                self.state = 3620
                localctx.encloseCharacter = self.string_()


            self.state = 3626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 3623
                self.match(StarRocksParser.ESCAPE)
                self.state = 3624
                self.match(StarRocksParser.EQ)
                self.state = 3625
                localctx.escapeCharacter = self.string_()


            self.state = 3628
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrokerDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.props = None # PropertyListContext
            self.name = None # IdentifierOrStringContext

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def BROKER(self):
            return self.getToken(StarRocksParser.BROKER, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_brokerDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBrokerDesc" ):
                listener.enterBrokerDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBrokerDesc" ):
                listener.exitBrokerDesc(self)




    def brokerDesc(self):

        localctx = StarRocksParser.BrokerDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_brokerDesc)
        self._la = 0 # Token type
        try:
            self.state = 3641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3630
                self.match(StarRocksParser.WITH)
                self.state = 3631
                self.match(StarRocksParser.BROKER)
                self.state = 3633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 3632
                    localctx.props = self.propertyList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3635
                self.match(StarRocksParser.WITH)
                self.state = 3636
                self.match(StarRocksParser.BROKER)
                self.state = 3637
                localctx.name = self.identifierOrString()
                self.state = 3639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 3638
                    localctx.props = self.propertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierOrStringContext
            self.props = None # PropertyListContext

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_resourceDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceDesc" ):
                listener.enterResourceDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceDesc" ):
                listener.exitResourceDesc(self)




    def resourceDesc(self):

        localctx = StarRocksParser.ResourceDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_resourceDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.match(StarRocksParser.WITH)
            self.state = 3644
            self.match(StarRocksParser.RESOURCE)
            self.state = 3645
            localctx.name = self.identifierOrString()
            self.state = 3647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 3646
                localctx.props = self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLoadStatement" ):
                listener.enterShowLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLoadStatement" ):
                listener.exitShowLoadStatement(self)




    def showLoadStatement(self):

        localctx = StarRocksParser.ShowLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_showLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self.match(StarRocksParser.SHOW)
            self.state = 3650
            self.match(StarRocksParser.LOAD)
            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 3651
                self.match(StarRocksParser.ALL)


            self.state = 3656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 3654
                self.match(StarRocksParser.FROM)
                self.state = 3655
                self.identifier()


            self.state = 3660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3658
                self.match(StarRocksParser.WHERE)
                self.state = 3659
                self.expression(0)


            self.state = 3672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 3662
                self.match(StarRocksParser.ORDER)
                self.state = 3663
                self.match(StarRocksParser.BY)
                self.state = 3664
                self.sortItem()
                self.state = 3669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 3665
                    self.match(StarRocksParser.COMMA)
                    self.state = 3666
                    self.sortItem()
                    self.state = 3671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 3674
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowLoadWarningsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def WARNINGS(self):
            return self.getToken(StarRocksParser.WARNINGS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showLoadWarningsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLoadWarningsStatement" ):
                listener.enterShowLoadWarningsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLoadWarningsStatement" ):
                listener.exitShowLoadWarningsStatement(self)




    def showLoadWarningsStatement(self):

        localctx = StarRocksParser.ShowLoadWarningsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_showLoadWarningsStatement)
        self._la = 0 # Token type
        try:
            self.state = 3696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3677
                self.match(StarRocksParser.SHOW)
                self.state = 3678
                self.match(StarRocksParser.LOAD)
                self.state = 3679
                self.match(StarRocksParser.WARNINGS)
                self.state = 3682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 3680
                    self.match(StarRocksParser.FROM)
                    self.state = 3681
                    self.identifier()


                self.state = 3686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 3684
                    self.match(StarRocksParser.WHERE)
                    self.state = 3685
                    self.expression(0)


                self.state = 3689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 3688
                    self.limitElement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3691
                self.match(StarRocksParser.SHOW)
                self.state = 3692
                self.match(StarRocksParser.LOAD)
                self.state = 3693
                self.match(StarRocksParser.WARNINGS)
                self.state = 3694
                self.match(StarRocksParser.ON)
                self.state = 3695
                self.string_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelLoadStatement" ):
                listener.enterCancelLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelLoadStatement" ):
                listener.exitCancelLoadStatement(self)




    def cancelLoadStatement(self):

        localctx = StarRocksParser.CancelLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_cancelLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3698
            self.match(StarRocksParser.CANCEL)
            self.state = 3699
            self.match(StarRocksParser.LOAD)
            self.state = 3702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 3700
                self.match(StarRocksParser.FROM)
                self.state = 3701
                self.identifier()


            self.state = 3706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3704
                self.match(StarRocksParser.WHERE)
                self.state = 3705
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext
            self.name = None # IdentifierContext

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def LOAD(self):
            return self.getToken(StarRocksParser.LOAD, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def jobProperties(self):
            return self.getTypedRuleContext(StarRocksParser.JobPropertiesContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLoadStatement" ):
                listener.enterAlterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLoadStatement" ):
                listener.exitAlterLoadStatement(self)




    def alterLoadStatement(self):

        localctx = StarRocksParser.AlterLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_alterLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3708
            self.match(StarRocksParser.ALTER)
            self.state = 3709
            self.match(StarRocksParser.LOAD)
            self.state = 3710
            self.match(StarRocksParser.FOR)
            self.state = 3714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.state = 3711
                localctx.db = self.qualifiedName()
                self.state = 3712
                self.match(StarRocksParser.DOT)


            self.state = 3716
            localctx.name = self.identifier()
            self.state = 3718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3717
                self.jobProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelCompactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def COMPACTION(self):
            return self.getToken(StarRocksParser.COMPACTION, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelCompactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelCompactionStatement" ):
                listener.enterCancelCompactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelCompactionStatement" ):
                listener.exitCancelCompactionStatement(self)




    def cancelCompactionStatement(self):

        localctx = StarRocksParser.CancelCompactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_cancelCompactionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3720
            self.match(StarRocksParser.CANCEL)
            self.state = 3721
            self.match(StarRocksParser.COMPACTION)
            self.state = 3722
            self.match(StarRocksParser.WHERE)
            self.state = 3723
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowAuthorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def AUTHORS(self):
            return self.getToken(StarRocksParser.AUTHORS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showAuthorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAuthorStatement" ):
                listener.enterShowAuthorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAuthorStatement" ):
                listener.exitShowAuthorStatement(self)




    def showAuthorStatement(self):

        localctx = StarRocksParser.ShowAuthorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_showAuthorStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3725
            self.match(StarRocksParser.SHOW)
            self.state = 3726
            self.match(StarRocksParser.AUTHORS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowBackendsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def BACKENDS(self):
            return self.getToken(StarRocksParser.BACKENDS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showBackendsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowBackendsStatement" ):
                listener.enterShowBackendsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowBackendsStatement" ):
                listener.exitShowBackendsStatement(self)




    def showBackendsStatement(self):

        localctx = StarRocksParser.ShowBackendsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_showBackendsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3728
            self.match(StarRocksParser.SHOW)
            self.state = 3729
            self.match(StarRocksParser.BACKENDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowBrokerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def BROKER(self):
            return self.getToken(StarRocksParser.BROKER, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showBrokerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowBrokerStatement" ):
                listener.enterShowBrokerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowBrokerStatement" ):
                listener.exitShowBrokerStatement(self)




    def showBrokerStatement(self):

        localctx = StarRocksParser.ShowBrokerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_showBrokerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3731
            self.match(StarRocksParser.SHOW)
            self.state = 3732
            self.match(StarRocksParser.BROKER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCharsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def CHAR(self):
            return self.getToken(StarRocksParser.CHAR, 0)

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def CHARSET(self):
            return self.getToken(StarRocksParser.CHARSET, 0)

        def CHARACTER(self):
            return self.getToken(StarRocksParser.CHARACTER, 0)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showCharsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCharsetStatement" ):
                listener.enterShowCharsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCharsetStatement" ):
                listener.exitShowCharsetStatement(self)




    def showCharsetStatement(self):

        localctx = StarRocksParser.ShowCharsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_showCharsetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3734
            self.match(StarRocksParser.SHOW)
            self.state = 3740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 3735
                self.match(StarRocksParser.CHAR)
                self.state = 3736
                self.match(StarRocksParser.SET)
                pass
            elif token in [53]:
                self.state = 3737
                self.match(StarRocksParser.CHARSET)
                pass
            elif token in [52]:
                self.state = 3738
                self.match(StarRocksParser.CHARACTER)
                self.state = 3739
                self.match(StarRocksParser.SET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3742
                self.match(StarRocksParser.LIKE)
                self.state = 3743
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3744
                self.match(StarRocksParser.WHERE)
                self.state = 3745
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCollationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def COLLATION(self):
            return self.getToken(StarRocksParser.COLLATION, 0)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showCollationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCollationStatement" ):
                listener.enterShowCollationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCollationStatement" ):
                listener.exitShowCollationStatement(self)




    def showCollationStatement(self):

        localctx = StarRocksParser.ShowCollationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_showCollationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3748
            self.match(StarRocksParser.SHOW)
            self.state = 3749
            self.match(StarRocksParser.COLLATION)
            self.state = 3754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3750
                self.match(StarRocksParser.LIKE)
                self.state = 3751
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3752
                self.match(StarRocksParser.WHERE)
                self.state = 3753
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def DELETE(self):
            return self.getToken(StarRocksParser.DELETE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDeleteStatement" ):
                listener.enterShowDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDeleteStatement" ):
                listener.exitShowDeleteStatement(self)




    def showDeleteStatement(self):

        localctx = StarRocksParser.ShowDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_showDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3756
            self.match(StarRocksParser.SHOW)
            self.state = 3757
            self.match(StarRocksParser.DELETE)
            self.state = 3760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 3758
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3759
                localctx.db = self.qualifiedName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDynamicPartitionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def DYNAMIC(self):
            return self.getToken(StarRocksParser.DYNAMIC, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showDynamicPartitionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDynamicPartitionStatement" ):
                listener.enterShowDynamicPartitionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDynamicPartitionStatement" ):
                listener.exitShowDynamicPartitionStatement(self)




    def showDynamicPartitionStatement(self):

        localctx = StarRocksParser.ShowDynamicPartitionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_showDynamicPartitionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3762
            self.match(StarRocksParser.SHOW)
            self.state = 3763
            self.match(StarRocksParser.DYNAMIC)
            self.state = 3764
            self.match(StarRocksParser.PARTITION)
            self.state = 3765
            self.match(StarRocksParser.TABLES)
            self.state = 3768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 3766
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3767
                localctx.db = self.qualifiedName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowEventsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def EVENTS(self):
            return self.getToken(StarRocksParser.EVENTS, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showEventsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEventsStatement" ):
                listener.enterShowEventsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEventsStatement" ):
                listener.exitShowEventsStatement(self)




    def showEventsStatement(self):

        localctx = StarRocksParser.ShowEventsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_showEventsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3770
            self.match(StarRocksParser.SHOW)
            self.state = 3771
            self.match(StarRocksParser.EVENTS)
            self.state = 3774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 3772
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3773
                localctx.catalog = self.qualifiedName()


            self.state = 3780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3776
                self.match(StarRocksParser.LIKE)
                self.state = 3777
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3778
                self.match(StarRocksParser.WHERE)
                self.state = 3779
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowEnginesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def ENGINES(self):
            return self.getToken(StarRocksParser.ENGINES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showEnginesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEnginesStatement" ):
                listener.enterShowEnginesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEnginesStatement" ):
                listener.exitShowEnginesStatement(self)




    def showEnginesStatement(self):

        localctx = StarRocksParser.ShowEnginesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_showEnginesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3782
            self.match(StarRocksParser.SHOW)
            self.state = 3783
            self.match(StarRocksParser.ENGINES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFrontendsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def FRONTENDS(self):
            return self.getToken(StarRocksParser.FRONTENDS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showFrontendsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFrontendsStatement" ):
                listener.enterShowFrontendsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFrontendsStatement" ):
                listener.exitShowFrontendsStatement(self)




    def showFrontendsStatement(self):

        localctx = StarRocksParser.ShowFrontendsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_showFrontendsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3785
            self.match(StarRocksParser.SHOW)
            self.state = 3786
            self.match(StarRocksParser.FRONTENDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPluginsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PLUGINS(self):
            return self.getToken(StarRocksParser.PLUGINS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showPluginsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPluginsStatement" ):
                listener.enterShowPluginsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPluginsStatement" ):
                listener.exitShowPluginsStatement(self)




    def showPluginsStatement(self):

        localctx = StarRocksParser.ShowPluginsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_showPluginsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3788
            self.match(StarRocksParser.SHOW)
            self.state = 3789
            self.match(StarRocksParser.PLUGINS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRepositoriesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def REPOSITORIES(self):
            return self.getToken(StarRocksParser.REPOSITORIES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showRepositoriesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRepositoriesStatement" ):
                listener.enterShowRepositoriesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRepositoriesStatement" ):
                listener.exitShowRepositoriesStatement(self)




    def showRepositoriesStatement(self):

        localctx = StarRocksParser.ShowRepositoriesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_showRepositoriesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.match(StarRocksParser.SHOW)
            self.state = 3792
            self.match(StarRocksParser.REPOSITORIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowOpenTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def OPEN(self):
            return self.getToken(StarRocksParser.OPEN, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showOpenTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTableStatement" ):
                listener.enterShowOpenTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTableStatement" ):
                listener.exitShowOpenTableStatement(self)




    def showOpenTableStatement(self):

        localctx = StarRocksParser.ShowOpenTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_showOpenTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3794
            self.match(StarRocksParser.SHOW)
            self.state = 3795
            self.match(StarRocksParser.OPEN)
            self.state = 3796
            self.match(StarRocksParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPrivilegesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PRIVILEGES(self):
            return self.getToken(StarRocksParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showPrivilegesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPrivilegesStatement" ):
                listener.enterShowPrivilegesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPrivilegesStatement" ):
                listener.exitShowPrivilegesStatement(self)




    def showPrivilegesStatement(self):

        localctx = StarRocksParser.ShowPrivilegesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_showPrivilegesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3798
            self.match(StarRocksParser.SHOW)
            self.state = 3799
            self.match(StarRocksParser.PRIVILEGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context
            self.where = None # ExpressionContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(StarRocksParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(StarRocksParser.FUNCTION, 0)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProcedureStatement" ):
                listener.enterShowProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProcedureStatement" ):
                listener.exitShowProcedureStatement(self)




    def showProcedureStatement(self):

        localctx = StarRocksParser.ShowProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_showProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3801
            self.match(StarRocksParser.SHOW)
            self.state = 3802
            _la = self._input.LA(1)
            if not(_la==157 or _la==302):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3803
            self.match(StarRocksParser.STATUS)
            self.state = 3808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3804
                self.match(StarRocksParser.LIKE)
                self.state = 3805
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3806
                self.match(StarRocksParser.WHERE)
                self.state = 3807
                localctx.where = self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProcStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PROC(self):
            return self.getToken(StarRocksParser.PROC, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showProcStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProcStatement" ):
                listener.enterShowProcStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProcStatement" ):
                listener.exitShowProcStatement(self)




    def showProcStatement(self):

        localctx = StarRocksParser.ShowProcStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_showProcStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3810
            self.match(StarRocksParser.SHOW)
            self.state = 3811
            self.match(StarRocksParser.PROC)
            self.state = 3812
            localctx.path = self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProcesslistStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PROCESSLIST(self):
            return self.getToken(StarRocksParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showProcesslistStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProcesslistStatement" ):
                listener.enterShowProcesslistStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProcesslistStatement" ):
                listener.exitShowProcesslistStatement(self)




    def showProcesslistStatement(self):

        localctx = StarRocksParser.ShowProcesslistStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_showProcesslistStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3814
            self.match(StarRocksParser.SHOW)
            self.state = 3816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3815
                self.match(StarRocksParser.FULL)


            self.state = 3818
            self.match(StarRocksParser.PROCESSLIST)
            self.state = 3821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 3819
                self.match(StarRocksParser.FOR)
                self.state = 3820
                self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfilelistStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # Token

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PROFILELIST(self):
            return self.getToken(StarRocksParser.PROFILELIST, 0)

        def LIMIT(self):
            return self.getToken(StarRocksParser.LIMIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showProfilelistStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfilelistStatement" ):
                listener.enterShowProfilelistStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfilelistStatement" ):
                listener.exitShowProfilelistStatement(self)




    def showProfilelistStatement(self):

        localctx = StarRocksParser.ShowProfilelistStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_showProfilelistStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3823
            self.match(StarRocksParser.SHOW)
            self.state = 3824
            self.match(StarRocksParser.PROFILELIST)
            self.state = 3827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 3825
                self.match(StarRocksParser.LIMIT)
                self.state = 3826
                localctx.limit = self.match(StarRocksParser.INTEGER_VALUE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRunningQueriesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # Token

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def RUNNING(self):
            return self.getToken(StarRocksParser.RUNNING, 0)

        def QUERIES(self):
            return self.getToken(StarRocksParser.QUERIES, 0)

        def LIMIT(self):
            return self.getToken(StarRocksParser.LIMIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showRunningQueriesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRunningQueriesStatement" ):
                listener.enterShowRunningQueriesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRunningQueriesStatement" ):
                listener.exitShowRunningQueriesStatement(self)




    def showRunningQueriesStatement(self):

        localctx = StarRocksParser.ShowRunningQueriesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_showRunningQueriesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3829
            self.match(StarRocksParser.SHOW)
            self.state = 3830
            self.match(StarRocksParser.RUNNING)
            self.state = 3831
            self.match(StarRocksParser.QUERIES)
            self.state = 3834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 3832
                self.match(StarRocksParser.LIMIT)
                self.state = 3833
                localctx.limit = self.match(StarRocksParser.INTEGER_VALUE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def varType(self):
            return self.getTypedRuleContext(StarRocksParser.VarTypeContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatusStatement" ):
                listener.enterShowStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatusStatement" ):
                listener.exitShowStatusStatement(self)




    def showStatusStatement(self):

        localctx = StarRocksParser.ShowStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_showStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3836
            self.match(StarRocksParser.SHOW)
            self.state = 3838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==223 or _la==365 or _la==433:
                self.state = 3837
                self.varType()


            self.state = 3840
            self.match(StarRocksParser.STATUS)
            self.state = 3845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3841
                self.match(StarRocksParser.LIKE)
                self.state = 3842
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3843
                self.match(StarRocksParser.WHERE)
                self.state = 3844
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTabletStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def TABLET(self):
            return self.getToken(StarRocksParser.TABLET, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def TABLETS(self):
            return self.getToken(StarRocksParser.TABLETS, 0)

        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showTabletStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTabletStatement" ):
                listener.enterShowTabletStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTabletStatement" ):
                listener.exitShowTabletStatement(self)




    def showTabletStatement(self):

        localctx = StarRocksParser.ShowTabletStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_showTabletStatement)
        self._la = 0 # Token type
        try:
            self.state = 3876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3847
                self.match(StarRocksParser.SHOW)
                self.state = 3848
                self.match(StarRocksParser.TABLET)
                self.state = 3849
                self.match(StarRocksParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3850
                self.match(StarRocksParser.SHOW)
                self.state = 3851
                _la = self._input.LA(1)
                if not(_la==393 or _la==394):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3852
                self.match(StarRocksParser.FROM)
                self.state = 3853
                self.qualifiedName()
                self.state = 3855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279 or _la==280 or _la==396:
                    self.state = 3854
                    self.partitionNames()


                self.state = 3859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 3857
                    self.match(StarRocksParser.WHERE)
                    self.state = 3858
                    self.expression(0)


                self.state = 3871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 3861
                    self.match(StarRocksParser.ORDER)
                    self.state = 3862
                    self.match(StarRocksParser.BY)
                    self.state = 3863
                    self.sortItem()
                    self.state = 3868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 3864
                        self.match(StarRocksParser.COMMA)
                        self.state = 3865
                        self.sortItem()
                        self.state = 3870
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 3873
                    self.limitElement()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def TRANSACTION(self):
            return self.getToken(StarRocksParser.TRANSACTION, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTransactionStatement" ):
                listener.enterShowTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTransactionStatement" ):
                listener.exitShowTransactionStatement(self)




    def showTransactionStatement(self):

        localctx = StarRocksParser.ShowTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_showTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3878
            self.match(StarRocksParser.SHOW)
            self.state = 3879
            self.match(StarRocksParser.TRANSACTION)
            self.state = 3882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 3880
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3881
                localctx.db = self.qualifiedName()


            self.state = 3886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 3884
                self.match(StarRocksParser.WHERE)
                self.state = 3885
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTriggersStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def TRIGGERS(self):
            return self.getToken(StarRocksParser.TRIGGERS, 0)

        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showTriggersStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTriggersStatement" ):
                listener.enterShowTriggersStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTriggersStatement" ):
                listener.exitShowTriggersStatement(self)




    def showTriggersStatement(self):

        localctx = StarRocksParser.ShowTriggersStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_showTriggersStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3888
            self.match(StarRocksParser.SHOW)
            self.state = 3890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3889
                self.match(StarRocksParser.FULL)


            self.state = 3892
            self.match(StarRocksParser.TRIGGERS)
            self.state = 3895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 3893
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3894
                localctx.catalog = self.qualifiedName()


            self.state = 3901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3897
                self.match(StarRocksParser.LIKE)
                self.state = 3898
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3899
                self.match(StarRocksParser.WHERE)
                self.state = 3900
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowUserPropertyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PROPERTY(self):
            return self.getToken(StarRocksParser.PROPERTY, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showUserPropertyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowUserPropertyStatement" ):
                listener.enterShowUserPropertyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowUserPropertyStatement" ):
                listener.exitShowUserPropertyStatement(self)




    def showUserPropertyStatement(self):

        localctx = StarRocksParser.ShowUserPropertyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_showUserPropertyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3903
            self.match(StarRocksParser.SHOW)
            self.state = 3904
            self.match(StarRocksParser.PROPERTY)
            self.state = 3907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 3905
                self.match(StarRocksParser.FOR)
                self.state = 3906
                self.string_()


            self.state = 3911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 3909
                self.match(StarRocksParser.LIKE)
                self.state = 3910
                self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowVariablesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def VARIABLES(self):
            return self.getToken(StarRocksParser.VARIABLES, 0)

        def varType(self):
            return self.getTypedRuleContext(StarRocksParser.VarTypeContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showVariablesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowVariablesStatement" ):
                listener.enterShowVariablesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowVariablesStatement" ):
                listener.exitShowVariablesStatement(self)




    def showVariablesStatement(self):

        localctx = StarRocksParser.ShowVariablesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_showVariablesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3913
            self.match(StarRocksParser.SHOW)
            self.state = 3915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==223 or _la==365 or _la==433:
                self.state = 3914
                self.varType()


            self.state = 3917
            self.match(StarRocksParser.VARIABLES)
            self.state = 3922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 3918
                self.match(StarRocksParser.LIKE)
                self.state = 3919
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 3920
                self.match(StarRocksParser.WHERE)
                self.state = 3921
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowWarningStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def WARNINGS(self):
            return self.getToken(StarRocksParser.WARNINGS, 0)

        def ERRORS(self):
            return self.getToken(StarRocksParser.ERRORS, 0)

        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showWarningStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowWarningStatement" ):
                listener.enterShowWarningStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowWarningStatement" ):
                listener.exitShowWarningStatement(self)




    def showWarningStatement(self):

        localctx = StarRocksParser.ShowWarningStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_showWarningStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3924
            self.match(StarRocksParser.SHOW)
            self.state = 3925
            _la = self._input.LA(1)
            if not(_la==124 or _la==441):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 3926
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(StarRocksParser.HELP, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)




    def helpStatement(self):

        localctx = StarRocksParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3929
            self.match(StarRocksParser.HELP)
            self.state = 3930
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def authOption(self):
            return self.getTypedRuleContext(StarRocksParser.AuthOptionContext,0)


        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserStatement" ):
                listener.enterCreateUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserStatement" ):
                listener.exitCreateUserStatement(self)




    def createUserStatement(self):

        localctx = StarRocksParser.CreateUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_createUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3932
            self.match(StarRocksParser.CREATE)
            self.state = 3933
            self.match(StarRocksParser.USER)
            self.state = 3937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 3934
                self.match(StarRocksParser.IF)
                self.state = 3935
                self.match(StarRocksParser.NOT)
                self.state = 3936
                self.match(StarRocksParser.EXISTS)


            self.state = 3939
            self.user()
            self.state = 3941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 3940
                self.authOption()


            self.state = 3946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 3943
                self.match(StarRocksParser.DEFAULT)
                self.state = 3944
                self.match(StarRocksParser.ROLE)
                self.state = 3945
                self.roleList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUserStatement" ):
                listener.enterDropUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUserStatement" ):
                listener.exitDropUserStatement(self)




    def dropUserStatement(self):

        localctx = StarRocksParser.DropUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_dropUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3948
            self.match(StarRocksParser.DROP)
            self.state = 3949
            self.match(StarRocksParser.USER)
            self.state = 3952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 3950
                self.match(StarRocksParser.IF)
                self.state = 3951
                self.match(StarRocksParser.EXISTS)


            self.state = 3954
            self.user()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def authOption(self):
            return self.getTypedRuleContext(StarRocksParser.AuthOptionContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def NONE(self):
            return self.getToken(StarRocksParser.NONE, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserStatement" ):
                listener.enterAlterUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserStatement" ):
                listener.exitAlterUserStatement(self)




    def alterUserStatement(self):

        localctx = StarRocksParser.AlterUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_alterUserStatement)
        self._la = 0 # Token type
        try:
            self.state = 3979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3956
                self.match(StarRocksParser.ALTER)
                self.state = 3957
                self.match(StarRocksParser.USER)
                self.state = 3960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 3958
                    self.match(StarRocksParser.IF)
                    self.state = 3959
                    self.match(StarRocksParser.EXISTS)


                self.state = 3962
                self.user()
                self.state = 3963
                self.authOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3965
                self.match(StarRocksParser.ALTER)
                self.state = 3966
                self.match(StarRocksParser.USER)
                self.state = 3969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 3967
                    self.match(StarRocksParser.IF)
                    self.state = 3968
                    self.match(StarRocksParser.EXISTS)


                self.state = 3971
                self.user()
                self.state = 3972
                self.match(StarRocksParser.DEFAULT)
                self.state = 3973
                self.match(StarRocksParser.ROLE)
                self.state = 3977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 3974
                    self.match(StarRocksParser.NONE)
                    pass

                elif la_ == 2:
                    self.state = 3975
                    self.match(StarRocksParser.ALL)
                    pass

                elif la_ == 3:
                    self.state = 3976
                    self.roleList()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def USERS(self):
            return self.getToken(StarRocksParser.USERS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowUserStatement" ):
                listener.enterShowUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowUserStatement" ):
                listener.exitShowUserStatement(self)




    def showUserStatement(self):

        localctx = StarRocksParser.ShowUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_showUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3981
            self.match(StarRocksParser.SHOW)
            self.state = 3982
            _la = self._input.LA(1)
            if not(_la==425 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowAuthenticationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_showAuthenticationStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowAllAuthenticationContext(ShowAuthenticationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ShowAuthenticationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)
        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)
        def AUTHENTICATION(self):
            return self.getToken(StarRocksParser.AUTHENTICATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAllAuthentication" ):
                listener.enterShowAllAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAllAuthentication" ):
                listener.exitShowAllAuthentication(self)


    class ShowAuthenticationForUserContext(ShowAuthenticationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ShowAuthenticationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)
        def AUTHENTICATION(self):
            return self.getToken(StarRocksParser.AUTHENTICATION, 0)
        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)
        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAuthenticationForUser" ):
                listener.enterShowAuthenticationForUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAuthenticationForUser" ):
                listener.exitShowAuthenticationForUser(self)



    def showAuthenticationStatement(self):

        localctx = StarRocksParser.ShowAuthenticationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_showAuthenticationStatement)
        self._la = 0 # Token type
        try:
            self.state = 3993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.ShowAllAuthenticationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3984
                self.match(StarRocksParser.SHOW)
                self.state = 3985
                self.match(StarRocksParser.ALL)
                self.state = 3986
                self.match(StarRocksParser.AUTHENTICATION)
                pass

            elif la_ == 2:
                localctx = StarRocksParser.ShowAuthenticationForUserContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3987
                self.match(StarRocksParser.SHOW)
                self.state = 3988
                self.match(StarRocksParser.AUTHENTICATION)
                self.state = 3991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 3989
                    self.match(StarRocksParser.FOR)
                    self.state = 3990
                    self.user()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteAsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(StarRocksParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def NO(self):
            return self.getToken(StarRocksParser.NO, 0)

        def REVERT(self):
            return self.getToken(StarRocksParser.REVERT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_executeAsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteAsStatement" ):
                listener.enterExecuteAsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteAsStatement" ):
                listener.exitExecuteAsStatement(self)




    def executeAsStatement(self):

        localctx = StarRocksParser.ExecuteAsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_executeAsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3995
            self.match(StarRocksParser.EXECUTE)
            self.state = 3996
            self.match(StarRocksParser.AS)
            self.state = 3997
            self.user()
            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 3998
                self.match(StarRocksParser.WITH)
                self.state = 3999
                self.match(StarRocksParser.NO)
                self.state = 4000
                self.match(StarRocksParser.REVERT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def comment(self):
            return self.getTypedRuleContext(StarRocksParser.CommentContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoleStatement" ):
                listener.enterCreateRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoleStatement" ):
                listener.exitCreateRoleStatement(self)




    def createRoleStatement(self):

        localctx = StarRocksParser.CreateRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_createRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4003
            self.match(StarRocksParser.CREATE)
            self.state = 4004
            self.match(StarRocksParser.ROLE)
            self.state = 4008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 4005
                self.match(StarRocksParser.IF)
                self.state = 4006
                self.match(StarRocksParser.NOT)
                self.state = 4007
                self.match(StarRocksParser.EXISTS)


            self.state = 4010
            self.roleList()
            self.state = 4012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 4011
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def COMMENT(self):
            return self.getToken(StarRocksParser.COMMENT, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_alterRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRoleStatement" ):
                listener.enterAlterRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRoleStatement" ):
                listener.exitAlterRoleStatement(self)




    def alterRoleStatement(self):

        localctx = StarRocksParser.AlterRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_alterRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4014
            self.match(StarRocksParser.ALTER)
            self.state = 4015
            self.match(StarRocksParser.ROLE)
            self.state = 4018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 4016
                self.match(StarRocksParser.IF)
                self.state = 4017
                self.match(StarRocksParser.EXISTS)


            self.state = 4020
            self.roleList()
            self.state = 4021
            self.match(StarRocksParser.SET)
            self.state = 4022
            self.match(StarRocksParser.COMMENT)
            self.state = 4023
            self.match(StarRocksParser.EQ)
            self.state = 4024
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRoleStatement" ):
                listener.enterDropRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRoleStatement" ):
                listener.exitDropRoleStatement(self)




    def dropRoleStatement(self):

        localctx = StarRocksParser.DropRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_dropRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4026
            self.match(StarRocksParser.DROP)
            self.state = 4027
            self.match(StarRocksParser.ROLE)
            self.state = 4030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 4028
                self.match(StarRocksParser.IF)
                self.state = 4029
                self.match(StarRocksParser.EXISTS)


            self.state = 4032
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def ROLES(self):
            return self.getToken(StarRocksParser.ROLES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showRolesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRolesStatement" ):
                listener.enterShowRolesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRolesStatement" ):
                listener.exitShowRolesStatement(self)




    def showRolesStatement(self):

        localctx = StarRocksParser.ShowRolesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_showRolesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4034
            self.match(StarRocksParser.SHOW)
            self.state = 4035
            self.match(StarRocksParser.ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_grantRoleStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GrantRoleToUserContext(GrantRoleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantRoleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(StarRocksParser.GRANT, 0)
        def identifierOrStringList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringListContext,0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoleToUser" ):
                listener.enterGrantRoleToUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoleToUser" ):
                listener.exitGrantRoleToUser(self)


    class GrantRoleToRoleContext(GrantRoleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantRoleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(StarRocksParser.GRANT, 0)
        def identifierOrStringList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringListContext,0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)
        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoleToRole" ):
                listener.enterGrantRoleToRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoleToRole" ):
                listener.exitGrantRoleToRole(self)



    def grantRoleStatement(self):

        localctx = StarRocksParser.GrantRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_grantRoleStatement)
        try:
            self.state = 4051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.GrantRoleToUserContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4037
                self.match(StarRocksParser.GRANT)
                self.state = 4038
                self.identifierOrStringList()
                self.state = 4039
                self.match(StarRocksParser.TO)
                self.state = 4041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 4040
                    self.match(StarRocksParser.USER)


                self.state = 4043
                self.user()
                pass

            elif la_ == 2:
                localctx = StarRocksParser.GrantRoleToRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4045
                self.match(StarRocksParser.GRANT)
                self.state = 4046
                self.identifierOrStringList()
                self.state = 4047
                self.match(StarRocksParser.TO)
                self.state = 4048
                self.match(StarRocksParser.ROLE)
                self.state = 4049
                self.identifierOrString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_revokeRoleStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RevokeRoleFromUserContext(RevokeRoleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokeRoleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def identifierOrStringList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringListContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoleFromUser" ):
                listener.enterRevokeRoleFromUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoleFromUser" ):
                listener.exitRevokeRoleFromUser(self)


    class RevokeRoleFromRoleContext(RevokeRoleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokeRoleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def identifierOrStringList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringListContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)
        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoleFromRole" ):
                listener.enterRevokeRoleFromRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoleFromRole" ):
                listener.exitRevokeRoleFromRole(self)



    def revokeRoleStatement(self):

        localctx = StarRocksParser.RevokeRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_revokeRoleStatement)
        try:
            self.state = 4067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.RevokeRoleFromUserContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4053
                self.match(StarRocksParser.REVOKE)
                self.state = 4054
                self.identifierOrStringList()
                self.state = 4055
                self.match(StarRocksParser.FROM)
                self.state = 4057
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                if la_ == 1:
                    self.state = 4056
                    self.match(StarRocksParser.USER)


                self.state = 4059
                self.user()
                pass

            elif la_ == 2:
                localctx = StarRocksParser.RevokeRoleFromRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4061
                self.match(StarRocksParser.REVOKE)
                self.state = 4062
                self.identifierOrStringList()
                self.state = 4063
                self.match(StarRocksParser.FROM)
                self.state = 4064
                self.match(StarRocksParser.ROLE)
                self.state = 4065
                self.identifierOrString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def NONE(self):
            return self.getToken(StarRocksParser.NONE, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(StarRocksParser.EXCEPT, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_setRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRoleStatement" ):
                listener.enterSetRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRoleStatement" ):
                listener.exitSetRoleStatement(self)




    def setRoleStatement(self):

        localctx = StarRocksParser.SetRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_setRoleStatement)
        self._la = 0 # Token type
        try:
            self.state = 4085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4069
                self.match(StarRocksParser.SET)
                self.state = 4070
                self.match(StarRocksParser.ROLE)
                self.state = 4071
                self.match(StarRocksParser.DEFAULT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4072
                self.match(StarRocksParser.SET)
                self.state = 4073
                self.match(StarRocksParser.ROLE)
                self.state = 4074
                self.match(StarRocksParser.NONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4075
                self.match(StarRocksParser.SET)
                self.state = 4076
                self.match(StarRocksParser.ROLE)
                self.state = 4077
                self.match(StarRocksParser.ALL)
                self.state = 4080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 4078
                    self.match(StarRocksParser.EXCEPT)
                    self.state = 4079
                    self.roleList()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4082
                self.match(StarRocksParser.SET)
                self.state = 4083
                self.match(StarRocksParser.ROLE)
                self.state = 4084
                self.roleList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDefaultRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def NONE(self):
            return self.getToken(StarRocksParser.NONE, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def roleList(self):
            return self.getTypedRuleContext(StarRocksParser.RoleListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_setDefaultRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDefaultRoleStatement" ):
                listener.enterSetDefaultRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDefaultRoleStatement" ):
                listener.exitSetDefaultRoleStatement(self)




    def setDefaultRoleStatement(self):

        localctx = StarRocksParser.SetDefaultRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_setDefaultRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4087
            self.match(StarRocksParser.SET)
            self.state = 4088
            self.match(StarRocksParser.DEFAULT)
            self.state = 4089
            self.match(StarRocksParser.ROLE)
            self.state = 4093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 4090
                self.match(StarRocksParser.NONE)
                pass

            elif la_ == 2:
                self.state = 4091
                self.match(StarRocksParser.ALL)
                pass

            elif la_ == 3:
                self.state = 4092
                self.roleList()
                pass


            self.state = 4095
            self.match(StarRocksParser.TO)
            self.state = 4096
            self.user()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRevokeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_grantRevokeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRevokeClause" ):
                listener.enterGrantRevokeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRevokeClause" ):
                listener.exitGrantRevokeClause(self)




    def grantRevokeClause(self):

        localctx = StarRocksParser.GrantRevokeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_grantRevokeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 4099
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                if la_ == 1:
                    self.state = 4098
                    self.match(StarRocksParser.USER)


                self.state = 4101
                self.user()
                pass

            elif la_ == 2:
                self.state = 4102
                self.match(StarRocksParser.ROLE)
                self.state = 4103
                self.identifierOrString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_grantPrivilegeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GrantOnAllContext(GrantPrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantPrivilegeStatementContext
            super().__init__(parser)
            self.isAll = None # Token
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.GRANT)
            else:
                return self.getToken(StarRocksParser.GRANT, i)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.ALL)
            else:
                return self.getToken(StarRocksParser.ALL, i)
        def privObjectTypePlural(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectTypePluralContext,0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)
        def DATABASES(self):
            return self.getToken(StarRocksParser.DATABASES, 0)
        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)
        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOnAll" ):
                listener.enterGrantOnAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOnAll" ):
                listener.exitGrantOnAll(self)


    class GrantOnFuncContext(GrantPrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantPrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.GRANT)
            else:
                return self.getToken(StarRocksParser.GRANT, i)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def FUNCTION(self):
            return self.getToken(StarRocksParser.FUNCTION, 0)
        def privFunctionObjectNameList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivFunctionObjectNameListContext,0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)
        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOnFunc" ):
                listener.enterGrantOnFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOnFunc" ):
                listener.exitGrantOnFunc(self)


    class GrantOnPrimaryObjContext(GrantPrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantPrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.GRANT)
            else:
                return self.getToken(StarRocksParser.GRANT, i)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def privObjectType(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectTypeContext,0)

        def privObjectNameList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectNameListContext,0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOnPrimaryObj" ):
                listener.enterGrantOnPrimaryObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOnPrimaryObj" ):
                listener.exitGrantOnPrimaryObj(self)


    class GrantOnTableBriefContext(GrantPrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantPrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.GRANT)
            else:
                return self.getToken(StarRocksParser.GRANT, i)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def privObjectNameList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectNameListContext,0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOnTableBrief" ):
                listener.enterGrantOnTableBrief(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOnTableBrief" ):
                listener.exitGrantOnTableBrief(self)


    class GrantOnUserContext(GrantPrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantPrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.GRANT)
            else:
                return self.getToken(StarRocksParser.GRANT, i)
        def IMPERSONATE(self):
            return self.getToken(StarRocksParser.IMPERSONATE, 0)
        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)
        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.UserContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.UserContext,i)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)
        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOnUser" ):
                listener.enterGrantOnUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOnUser" ):
                listener.exitGrantOnUser(self)


    class GrantOnSystemContext(GrantPrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GrantPrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.GRANT)
            else:
                return self.getToken(StarRocksParser.GRANT, i)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def SYSTEM(self):
            return self.getToken(StarRocksParser.SYSTEM, 0)
        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOnSystem" ):
                listener.enterGrantOnSystem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOnSystem" ):
                listener.exitGrantOnSystem(self)



    def grantPrivilegeStatement(self):

        localctx = StarRocksParser.GrantPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_grantPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.GrantOnUserContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4106
                self.match(StarRocksParser.GRANT)
                self.state = 4107
                self.match(StarRocksParser.IMPERSONATE)
                self.state = 4108
                self.match(StarRocksParser.ON)
                self.state = 4109
                self.match(StarRocksParser.USER)
                self.state = 4110
                self.user()
                self.state = 4115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4111
                    self.match(StarRocksParser.COMMA)
                    self.state = 4112
                    self.user()
                    self.state = 4117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4118
                self.match(StarRocksParser.TO)
                self.state = 4119
                self.grantRevokeClause()
                self.state = 4123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4120
                    self.match(StarRocksParser.WITH)
                    self.state = 4121
                    self.match(StarRocksParser.GRANT)
                    self.state = 4122
                    self.match(StarRocksParser.OPTION)


                pass

            elif la_ == 2:
                localctx = StarRocksParser.GrantOnTableBriefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4125
                self.match(StarRocksParser.GRANT)
                self.state = 4126
                self.privilegeTypeList()
                self.state = 4127
                self.match(StarRocksParser.ON)
                self.state = 4128
                self.privObjectNameList()
                self.state = 4129
                self.match(StarRocksParser.TO)
                self.state = 4130
                self.grantRevokeClause()
                self.state = 4134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4131
                    self.match(StarRocksParser.WITH)
                    self.state = 4132
                    self.match(StarRocksParser.GRANT)
                    self.state = 4133
                    self.match(StarRocksParser.OPTION)


                pass

            elif la_ == 3:
                localctx = StarRocksParser.GrantOnFuncContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4136
                self.match(StarRocksParser.GRANT)
                self.state = 4137
                self.privilegeTypeList()
                self.state = 4138
                self.match(StarRocksParser.ON)
                self.state = 4140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 4139
                    self.match(StarRocksParser.GLOBAL)


                self.state = 4142
                self.match(StarRocksParser.FUNCTION)
                self.state = 4143
                self.privFunctionObjectNameList()
                self.state = 4144
                self.match(StarRocksParser.TO)
                self.state = 4145
                self.grantRevokeClause()
                self.state = 4149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4146
                    self.match(StarRocksParser.WITH)
                    self.state = 4147
                    self.match(StarRocksParser.GRANT)
                    self.state = 4148
                    self.match(StarRocksParser.OPTION)


                pass

            elif la_ == 4:
                localctx = StarRocksParser.GrantOnSystemContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4151
                self.match(StarRocksParser.GRANT)
                self.state = 4152
                self.privilegeTypeList()
                self.state = 4153
                self.match(StarRocksParser.ON)
                self.state = 4154
                self.match(StarRocksParser.SYSTEM)
                self.state = 4155
                self.match(StarRocksParser.TO)
                self.state = 4156
                self.grantRevokeClause()
                self.state = 4160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4157
                    self.match(StarRocksParser.WITH)
                    self.state = 4158
                    self.match(StarRocksParser.GRANT)
                    self.state = 4159
                    self.match(StarRocksParser.OPTION)


                pass

            elif la_ == 5:
                localctx = StarRocksParser.GrantOnPrimaryObjContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4162
                self.match(StarRocksParser.GRANT)
                self.state = 4163
                self.privilegeTypeList()
                self.state = 4164
                self.match(StarRocksParser.ON)
                self.state = 4165
                self.privObjectType()
                self.state = 4166
                self.privObjectNameList()
                self.state = 4167
                self.match(StarRocksParser.TO)
                self.state = 4168
                self.grantRevokeClause()
                self.state = 4172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4169
                    self.match(StarRocksParser.WITH)
                    self.state = 4170
                    self.match(StarRocksParser.GRANT)
                    self.state = 4171
                    self.match(StarRocksParser.OPTION)


                pass

            elif la_ == 6:
                localctx = StarRocksParser.GrantOnAllContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4174
                self.match(StarRocksParser.GRANT)
                self.state = 4175
                self.privilegeTypeList()
                self.state = 4176
                self.match(StarRocksParser.ON)
                self.state = 4177
                self.match(StarRocksParser.ALL)
                self.state = 4178
                self.privObjectTypePlural()
                self.state = 4185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                if la_ == 1:
                    self.state = 4179
                    self.match(StarRocksParser.IN)
                    self.state = 4180
                    localctx.isAll = self.match(StarRocksParser.ALL)
                    self.state = 4181
                    self.match(StarRocksParser.DATABASES)

                elif la_ == 2:
                    self.state = 4182
                    self.match(StarRocksParser.IN)
                    self.state = 4183
                    self.match(StarRocksParser.DATABASE)
                    self.state = 4184
                    self.identifierOrString()


                self.state = 4187
                self.match(StarRocksParser.TO)
                self.state = 4188
                self.grantRevokeClause()
                self.state = 4192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4189
                    self.match(StarRocksParser.WITH)
                    self.state = 4190
                    self.match(StarRocksParser.GRANT)
                    self.state = 4191
                    self.match(StarRocksParser.OPTION)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokePrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_revokePrivilegeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RevokeOnPrimaryObjContext(RevokePrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokePrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def privObjectType(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectTypeContext,0)

        def privObjectNameList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectNameListContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeOnPrimaryObj" ):
                listener.enterRevokeOnPrimaryObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeOnPrimaryObj" ):
                listener.exitRevokeOnPrimaryObj(self)


    class RevokeOnTableBriefContext(RevokePrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokePrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def privObjectNameList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectNameListContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeOnTableBrief" ):
                listener.enterRevokeOnTableBrief(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeOnTableBrief" ):
                listener.exitRevokeOnTableBrief(self)


    class RevokeOnAllContext(RevokePrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokePrivilegeStatementContext
            super().__init__(parser)
            self.isAll = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.ALL)
            else:
                return self.getToken(StarRocksParser.ALL, i)
        def privObjectTypePlural(self):
            return self.getTypedRuleContext(StarRocksParser.PrivObjectTypePluralContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)
        def DATABASES(self):
            return self.getToken(StarRocksParser.DATABASES, 0)
        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)
        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeOnAll" ):
                listener.enterRevokeOnAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeOnAll" ):
                listener.exitRevokeOnAll(self)


    class RevokeOnUserContext(RevokePrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokePrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def IMPERSONATE(self):
            return self.getToken(StarRocksParser.IMPERSONATE, 0)
        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)
        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.UserContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.UserContext,i)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeOnUser" ):
                listener.enterRevokeOnUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeOnUser" ):
                listener.exitRevokeOnUser(self)


    class RevokeOnFuncContext(RevokePrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokePrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def FUNCTION(self):
            return self.getToken(StarRocksParser.FUNCTION, 0)
        def privFunctionObjectNameList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivFunctionObjectNameListContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeOnFunc" ):
                listener.enterRevokeOnFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeOnFunc" ):
                listener.exitRevokeOnFunc(self)


    class RevokeOnSystemContext(RevokePrivilegeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RevokePrivilegeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(StarRocksParser.REVOKE, 0)
        def privilegeTypeList(self):
            return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeListContext,0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)
        def SYSTEM(self):
            return self.getToken(StarRocksParser.SYSTEM, 0)
        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def grantRevokeClause(self):
            return self.getTypedRuleContext(StarRocksParser.GrantRevokeClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeOnSystem" ):
                listener.enterRevokeOnSystem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeOnSystem" ):
                listener.exitRevokeOnSystem(self)



    def revokePrivilegeStatement(self):

        localctx = StarRocksParser.RevokePrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_revokePrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.RevokeOnUserContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4196
                self.match(StarRocksParser.REVOKE)
                self.state = 4197
                self.match(StarRocksParser.IMPERSONATE)
                self.state = 4198
                self.match(StarRocksParser.ON)
                self.state = 4199
                self.match(StarRocksParser.USER)
                self.state = 4200
                self.user()
                self.state = 4205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4201
                    self.match(StarRocksParser.COMMA)
                    self.state = 4202
                    self.user()
                    self.state = 4207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4208
                self.match(StarRocksParser.FROM)
                self.state = 4209
                self.grantRevokeClause()
                pass

            elif la_ == 2:
                localctx = StarRocksParser.RevokeOnTableBriefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4211
                self.match(StarRocksParser.REVOKE)
                self.state = 4212
                self.privilegeTypeList()
                self.state = 4213
                self.match(StarRocksParser.ON)
                self.state = 4214
                self.privObjectNameList()
                self.state = 4215
                self.match(StarRocksParser.FROM)
                self.state = 4216
                self.grantRevokeClause()
                pass

            elif la_ == 3:
                localctx = StarRocksParser.RevokeOnFuncContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4218
                self.match(StarRocksParser.REVOKE)
                self.state = 4219
                self.privilegeTypeList()
                self.state = 4220
                self.match(StarRocksParser.ON)
                self.state = 4222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 4221
                    self.match(StarRocksParser.GLOBAL)


                self.state = 4224
                self.match(StarRocksParser.FUNCTION)
                self.state = 4225
                self.privFunctionObjectNameList()
                self.state = 4226
                self.match(StarRocksParser.FROM)
                self.state = 4227
                self.grantRevokeClause()
                pass

            elif la_ == 4:
                localctx = StarRocksParser.RevokeOnSystemContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4229
                self.match(StarRocksParser.REVOKE)
                self.state = 4230
                self.privilegeTypeList()
                self.state = 4231
                self.match(StarRocksParser.ON)
                self.state = 4232
                self.match(StarRocksParser.SYSTEM)
                self.state = 4233
                self.match(StarRocksParser.FROM)
                self.state = 4234
                self.grantRevokeClause()
                pass

            elif la_ == 5:
                localctx = StarRocksParser.RevokeOnPrimaryObjContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4236
                self.match(StarRocksParser.REVOKE)
                self.state = 4237
                self.privilegeTypeList()
                self.state = 4238
                self.match(StarRocksParser.ON)
                self.state = 4239
                self.privObjectType()
                self.state = 4240
                self.privObjectNameList()
                self.state = 4241
                self.match(StarRocksParser.FROM)
                self.state = 4242
                self.grantRevokeClause()
                pass

            elif la_ == 6:
                localctx = StarRocksParser.RevokeOnAllContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4244
                self.match(StarRocksParser.REVOKE)
                self.state = 4245
                self.privilegeTypeList()
                self.state = 4246
                self.match(StarRocksParser.ON)
                self.state = 4247
                self.match(StarRocksParser.ALL)
                self.state = 4248
                self.privObjectTypePlural()
                self.state = 4255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 4249
                    self.match(StarRocksParser.IN)
                    self.state = 4250
                    localctx.isAll = self.match(StarRocksParser.ALL)
                    self.state = 4251
                    self.match(StarRocksParser.DATABASES)

                elif la_ == 2:
                    self.state = 4252
                    self.match(StarRocksParser.IN)
                    self.state = 4253
                    self.match(StarRocksParser.DATABASE)
                    self.state = 4254
                    self.identifierOrString()


                self.state = 4257
                self.match(StarRocksParser.FROM)
                self.state = 4258
                self.grantRevokeClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGrantsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def GRANTS(self):
            return self.getToken(StarRocksParser.GRANTS, 0)

        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showGrantsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrantsStatement" ):
                listener.enterShowGrantsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrantsStatement" ):
                listener.exitShowGrantsStatement(self)




    def showGrantsStatement(self):

        localctx = StarRocksParser.ShowGrantsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_showGrantsStatement)
        try:
            self.state = 4276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4262
                self.match(StarRocksParser.SHOW)
                self.state = 4263
                self.match(StarRocksParser.GRANTS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4264
                self.match(StarRocksParser.SHOW)
                self.state = 4265
                self.match(StarRocksParser.GRANTS)
                self.state = 4266
                self.match(StarRocksParser.FOR)
                self.state = 4268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 4267
                    self.match(StarRocksParser.USER)


                self.state = 4270
                self.user()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4271
                self.match(StarRocksParser.SHOW)
                self.state = 4272
                self.match(StarRocksParser.GRANTS)
                self.state = 4273
                self.match(StarRocksParser.FOR)
                self.state = 4274
                self.match(StarRocksParser.ROLE)
                self.state = 4275
                self.identifierOrString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_authOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AuthWithPluginContext(AuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.AuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIED(self):
            return self.getToken(StarRocksParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)
        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)
        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthWithPlugin" ):
                listener.enterAuthWithPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthWithPlugin" ):
                listener.exitAuthWithPlugin(self)


    class AuthWithoutPluginContext(AuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.AuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIED(self):
            return self.getToken(StarRocksParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)
        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)

        def PASSWORD(self):
            return self.getToken(StarRocksParser.PASSWORD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthWithoutPlugin" ):
                listener.enterAuthWithoutPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthWithoutPlugin" ):
                listener.exitAuthWithoutPlugin(self)



    def authOption(self):

        localctx = StarRocksParser.AuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_authOption)
        self._la = 0 # Token type
        try:
            self.state = 4291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.AuthWithoutPluginContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4278
                self.match(StarRocksParser.IDENTIFIED)
                self.state = 4279
                self.match(StarRocksParser.BY)
                self.state = 4281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==281:
                    self.state = 4280
                    self.match(StarRocksParser.PASSWORD)


                self.state = 4283
                self.string_()
                pass

            elif la_ == 2:
                localctx = StarRocksParser.AuthWithPluginContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4284
                self.match(StarRocksParser.IDENTIFIED)
                self.state = 4285
                self.match(StarRocksParser.WITH)
                self.state = 4286
                self.identifierOrString()
                self.state = 4289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17 or _la==42:
                    self.state = 4287
                    _la = self._input.LA(1)
                    if not(_la==17 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4288
                    self.string_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrStringOrStar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringOrStarContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringOrStarContext,i)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObjectName" ):
                listener.enterPrivObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObjectName" ):
                listener.exitPrivObjectName(self)




    def privObjectName(self):

        localctx = StarRocksParser.PrivObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_privObjectName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4293
            self.identifierOrStringOrStar()
            self.state = 4296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 4294
                self.match(StarRocksParser.DOT)
                self.state = 4295
                self.identifierOrStringOrStar()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privObjectName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PrivObjectNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PrivObjectNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privObjectNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObjectNameList" ):
                listener.enterPrivObjectNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObjectNameList" ):
                listener.exitPrivObjectNameList(self)




    def privObjectNameList(self):

        localctx = StarRocksParser.PrivObjectNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_privObjectNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4298
            self.privObjectName()
            self.state = 4303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4299
                self.match(StarRocksParser.COMMA)
                self.state = 4300
                self.privObjectName()
                self.state = 4305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivFunctionObjectNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,i)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.TypeListContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.TypeListContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privFunctionObjectNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivFunctionObjectNameList" ):
                listener.enterPrivFunctionObjectNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivFunctionObjectNameList" ):
                listener.exitPrivFunctionObjectNameList(self)




    def privFunctionObjectNameList(self):

        localctx = StarRocksParser.PrivFunctionObjectNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_privFunctionObjectNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4306
            self.qualifiedName()
            self.state = 4307
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 4308
            self.typeList()
            self.state = 4309
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 4318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4310
                self.match(StarRocksParser.COMMA)
                self.state = 4311
                self.qualifiedName()
                self.state = 4312
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 4313
                self.typeList()
                self.state = 4314
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 4320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PrivilegeTypeContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PrivilegeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privilegeTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeTypeList" ):
                listener.enterPrivilegeTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeTypeList" ):
                listener.exitPrivilegeTypeList(self)




    def privilegeTypeList(self):

        localctx = StarRocksParser.PrivilegeTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_privilegeTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4321
            self.privilegeType()
            self.state = 4326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4322
                self.match(StarRocksParser.COMMA)
                self.state = 4323
                self.privilegeType()
                self.state = 4328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(StarRocksParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def APPLY(self):
            return self.getToken(StarRocksParser.APPLY, 0)

        def BLACKLIST(self):
            return self.getToken(StarRocksParser.BLACKLIST, 0)

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def FUNCTION(self):
            return self.getToken(StarRocksParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def DELETE(self):
            return self.getToken(StarRocksParser.DELETE, 0)

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def EXPORT(self):
            return self.getToken(StarRocksParser.EXPORT, 0)

        def FILE(self):
            return self.getToken(StarRocksParser.FILE, 0)

        def IMPERSONATE(self):
            return self.getToken(StarRocksParser.IMPERSONATE, 0)

        def INSERT(self):
            return self.getToken(StarRocksParser.INSERT, 0)

        def GRANT(self):
            return self.getToken(StarRocksParser.GRANT, 0)

        def NODE(self):
            return self.getToken(StarRocksParser.NODE, 0)

        def OPERATE(self):
            return self.getToken(StarRocksParser.OPERATE, 0)

        def PLUGIN(self):
            return self.getToken(StarRocksParser.PLUGIN, 0)

        def REPOSITORY(self):
            return self.getToken(StarRocksParser.REPOSITORY, 0)

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def SELECT(self):
            return self.getToken(StarRocksParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(StarRocksParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(StarRocksParser.USAGE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privilegeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeType" ):
                listener.enterPrivilegeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeType" ):
                listener.exitPrivilegeType(self)




    def privilegeType(self):

        localctx = StarRocksParser.PrivilegeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_privilegeType)
        self._la = 0 # Token type
        try:
            self.state = 4370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4329
                self.match(StarRocksParser.ALL)
                self.state = 4331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 4330
                    self.match(StarRocksParser.PRIVILEGES)


                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4333
                self.match(StarRocksParser.ALTER)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4334
                self.match(StarRocksParser.APPLY)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4335
                self.match(StarRocksParser.BLACKLIST)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4336
                self.match(StarRocksParser.CREATE)
                self.state = 4353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 4337
                    self.match(StarRocksParser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 4338
                    self.match(StarRocksParser.TABLE)
                    pass

                elif la_ == 3:
                    self.state = 4339
                    self.match(StarRocksParser.VIEW)
                    pass

                elif la_ == 4:
                    self.state = 4340
                    self.match(StarRocksParser.FUNCTION)
                    pass

                elif la_ == 5:
                    self.state = 4341
                    self.match(StarRocksParser.GLOBAL)
                    self.state = 4342
                    self.match(StarRocksParser.FUNCTION)
                    pass

                elif la_ == 6:
                    self.state = 4343
                    self.match(StarRocksParser.MATERIALIZED)
                    self.state = 4344
                    self.match(StarRocksParser.VIEW)
                    pass

                elif la_ == 7:
                    self.state = 4345
                    self.match(StarRocksParser.RESOURCE)
                    pass

                elif la_ == 8:
                    self.state = 4346
                    self.match(StarRocksParser.RESOURCE)
                    self.state = 4347
                    self.match(StarRocksParser.GROUP)
                    pass

                elif la_ == 9:
                    self.state = 4348
                    self.match(StarRocksParser.EXTERNAL)
                    self.state = 4349
                    self.match(StarRocksParser.CATALOG)
                    pass

                elif la_ == 10:
                    self.state = 4350
                    self.match(StarRocksParser.STORAGE)
                    self.state = 4351
                    self.match(StarRocksParser.VOLUME)
                    pass

                elif la_ == 11:
                    self.state = 4352
                    self.match(StarRocksParser.PIPE)
                    pass


                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4355
                self.match(StarRocksParser.DELETE)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4356
                self.match(StarRocksParser.DROP)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4357
                self.match(StarRocksParser.EXPORT)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4358
                self.match(StarRocksParser.FILE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4359
                self.match(StarRocksParser.IMPERSONATE)
                pass
            elif token in [190]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4360
                self.match(StarRocksParser.INSERT)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4361
                self.match(StarRocksParser.GRANT)
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4362
                self.match(StarRocksParser.NODE)
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4363
                self.match(StarRocksParser.OPERATE)
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4364
                self.match(StarRocksParser.PLUGIN)
                pass
            elif token in [331]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4365
                self.match(StarRocksParser.REPOSITORY)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4366
                self.match(StarRocksParser.REFRESH)
                pass
            elif token in [361]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4367
                self.match(StarRocksParser.SELECT)
                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4368
                self.match(StarRocksParser.UPDATE)
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4369
                self.match(StarRocksParser.USAGE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def SYSTEM(self):
            return self.getToken(StarRocksParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privObjectType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObjectType" ):
                listener.enterPrivObjectType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObjectType" ):
                listener.exitPrivObjectType(self)




    def privObjectType(self):

        localctx = StarRocksParser.PrivObjectTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_privObjectType)
        try:
            self.state = 4385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4372
                self.match(StarRocksParser.CATALOG)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4373
                self.match(StarRocksParser.DATABASE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4374
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 4375
                self.match(StarRocksParser.VIEW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4376
                self.match(StarRocksParser.RESOURCE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4377
                self.match(StarRocksParser.RESOURCE)
                self.state = 4378
                self.match(StarRocksParser.GROUP)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4379
                self.match(StarRocksParser.STORAGE)
                self.state = 4380
                self.match(StarRocksParser.VOLUME)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4381
                self.match(StarRocksParser.SYSTEM)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4382
                self.match(StarRocksParser.TABLE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4383
                self.match(StarRocksParser.VIEW)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4384
                self.match(StarRocksParser.PIPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectTypePluralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATALOGS(self):
            return self.getToken(StarRocksParser.CATALOGS, 0)

        def DATABASES(self):
            return self.getToken(StarRocksParser.DATABASES, 0)

        def FUNCTIONS(self):
            return self.getToken(StarRocksParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def VIEWS(self):
            return self.getToken(StarRocksParser.VIEWS, 0)

        def POLICIES(self):
            return self.getToken(StarRocksParser.POLICIES, 0)

        def RESOURCES(self):
            return self.getToken(StarRocksParser.RESOURCES, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def GROUPS(self):
            return self.getToken(StarRocksParser.GROUPS, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def VOLUMES(self):
            return self.getToken(StarRocksParser.VOLUMES, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def USERS(self):
            return self.getToken(StarRocksParser.USERS, 0)

        def PIPES(self):
            return self.getToken(StarRocksParser.PIPES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_privObjectTypePlural

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObjectTypePlural" ):
                listener.enterPrivObjectTypePlural(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObjectTypePlural" ):
                listener.exitPrivObjectTypePlural(self)




    def privObjectTypePlural(self):

        localctx = StarRocksParser.PrivObjectTypePluralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_privObjectTypePlural)
        try:
            self.state = 4404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4387
                self.match(StarRocksParser.CATALOGS)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4388
                self.match(StarRocksParser.DATABASES)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4389
                self.match(StarRocksParser.FUNCTIONS)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4390
                self.match(StarRocksParser.GLOBAL)
                self.state = 4391
                self.match(StarRocksParser.FUNCTIONS)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4392
                self.match(StarRocksParser.MATERIALIZED)
                self.state = 4393
                self.match(StarRocksParser.VIEWS)
                pass
            elif token in [294]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4394
                self.match(StarRocksParser.POLICIES)
                pass
            elif token in [334]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4395
                self.match(StarRocksParser.RESOURCES)
                pass
            elif token in [333]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4396
                self.match(StarRocksParser.RESOURCE)
                self.state = 4397
                self.match(StarRocksParser.GROUPS)
                pass
            elif token in [379]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4398
                self.match(StarRocksParser.STORAGE)
                self.state = 4399
                self.match(StarRocksParser.VOLUMES)
                pass
            elif token in [392]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4400
                self.match(StarRocksParser.TABLES)
                pass
            elif token in [426]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4401
                self.match(StarRocksParser.USERS)
                pass
            elif token in [436]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4402
                self.match(StarRocksParser.VIEWS)
                pass
            elif token in [291]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4403
                self.match(StarRocksParser.PIPES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BackupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKUP(self):
            return self.getToken(StarRocksParser.BACKUP, 0)

        def SNAPSHOT(self):
            return self.getToken(StarRocksParser.SNAPSHOT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def tableDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.TableDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.TableDescContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_backupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackupStatement" ):
                listener.enterBackupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackupStatement" ):
                listener.exitBackupStatement(self)




    def backupStatement(self):

        localctx = StarRocksParser.BackupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_backupStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4406
            self.match(StarRocksParser.BACKUP)
            self.state = 4407
            self.match(StarRocksParser.SNAPSHOT)
            self.state = 4408
            self.qualifiedName()
            self.state = 4409
            self.match(StarRocksParser.TO)
            self.state = 4410
            self.identifier()
            self.state = 4423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==266:
                self.state = 4411
                self.match(StarRocksParser.ON)
                self.state = 4412
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 4413
                self.tableDesc()
                self.state = 4418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4414
                    self.match(StarRocksParser.COMMA)
                    self.state = 4415
                    self.tableDesc()
                    self.state = 4420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4421
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 4427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4425
                self.match(StarRocksParser.PROPERTIES)
                self.state = 4426
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelBackupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def BACKUP(self):
            return self.getToken(StarRocksParser.BACKUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelBackupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelBackupStatement" ):
                listener.enterCancelBackupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelBackupStatement" ):
                listener.exitCancelBackupStatement(self)




    def cancelBackupStatement(self):

        localctx = StarRocksParser.CancelBackupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_cancelBackupStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4429
            self.match(StarRocksParser.CANCEL)
            self.state = 4430
            self.match(StarRocksParser.BACKUP)
            self.state = 4433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4431
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4432
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowBackupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def BACKUP(self):
            return self.getToken(StarRocksParser.BACKUP, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showBackupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowBackupStatement" ):
                listener.enterShowBackupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowBackupStatement" ):
                listener.exitShowBackupStatement(self)




    def showBackupStatement(self):

        localctx = StarRocksParser.ShowBackupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_showBackupStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4435
            self.match(StarRocksParser.SHOW)
            self.state = 4436
            self.match(StarRocksParser.BACKUP)
            self.state = 4439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4437
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4438
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestoreStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTORE(self):
            return self.getToken(StarRocksParser.RESTORE, 0)

        def SNAPSHOT(self):
            return self.getToken(StarRocksParser.SNAPSHOT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def restoreTableDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.RestoreTableDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.RestoreTableDescContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_restoreStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestoreStatement" ):
                listener.enterRestoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestoreStatement" ):
                listener.exitRestoreStatement(self)




    def restoreStatement(self):

        localctx = StarRocksParser.RestoreStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_restoreStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4441
            self.match(StarRocksParser.RESTORE)
            self.state = 4442
            self.match(StarRocksParser.SNAPSHOT)
            self.state = 4443
            self.qualifiedName()
            self.state = 4444
            self.match(StarRocksParser.FROM)
            self.state = 4445
            self.identifier()
            self.state = 4458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==266:
                self.state = 4446
                self.match(StarRocksParser.ON)
                self.state = 4447
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 4448
                self.restoreTableDesc()
                self.state = 4453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4449
                    self.match(StarRocksParser.COMMA)
                    self.state = 4450
                    self.restoreTableDesc()
                    self.state = 4455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4456
                self.match(StarRocksParser.RIGHT_PAREN)


            self.state = 4462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4460
                self.match(StarRocksParser.PROPERTIES)
                self.state = 4461
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelRestoreStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def RESTORE(self):
            return self.getToken(StarRocksParser.RESTORE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelRestoreStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelRestoreStatement" ):
                listener.enterCancelRestoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelRestoreStatement" ):
                listener.exitCancelRestoreStatement(self)




    def cancelRestoreStatement(self):

        localctx = StarRocksParser.CancelRestoreStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_cancelRestoreStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4464
            self.match(StarRocksParser.CANCEL)
            self.state = 4465
            self.match(StarRocksParser.RESTORE)
            self.state = 4468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4466
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4467
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestoreStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # ExpressionContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def RESTORE(self):
            return self.getToken(StarRocksParser.RESTORE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showRestoreStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestoreStatement" ):
                listener.enterShowRestoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestoreStatement" ):
                listener.exitShowRestoreStatement(self)




    def showRestoreStatement(self):

        localctx = StarRocksParser.ShowRestoreStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_showRestoreStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4470
            self.match(StarRocksParser.SHOW)
            self.state = 4471
            self.match(StarRocksParser.RESTORE)
            self.state = 4474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4472
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4473
                self.identifier()


            self.state = 4478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 4476
                self.match(StarRocksParser.WHERE)
                self.state = 4477
                localctx.where = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSnapshotStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def SNAPSHOT(self):
            return self.getToken(StarRocksParser.SNAPSHOT, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showSnapshotStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSnapshotStatement" ):
                listener.enterShowSnapshotStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSnapshotStatement" ):
                listener.exitShowSnapshotStatement(self)




    def showSnapshotStatement(self):

        localctx = StarRocksParser.ShowSnapshotStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_showSnapshotStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4480
            self.match(StarRocksParser.SHOW)
            self.state = 4481
            self.match(StarRocksParser.SNAPSHOT)
            self.state = 4482
            self.match(StarRocksParser.ON)
            self.state = 4483
            self.identifier()
            self.state = 4486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 4484
                self.match(StarRocksParser.WHERE)
                self.state = 4485
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRepositoryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.repoName = None # IdentifierContext
            self.brokerName = None # IdentifierOrStringContext
            self.location = None # String_Context

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def REPOSITORY(self):
            return self.getToken(StarRocksParser.REPOSITORY, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def BROKER(self):
            return self.getToken(StarRocksParser.BROKER, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def LOCATION(self):
            return self.getToken(StarRocksParser.LOCATION, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def READ(self):
            return self.getToken(StarRocksParser.READ, 0)

        def ONLY(self):
            return self.getToken(StarRocksParser.ONLY, 0)

        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createRepositoryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRepositoryStatement" ):
                listener.enterCreateRepositoryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRepositoryStatement" ):
                listener.exitCreateRepositoryStatement(self)




    def createRepositoryStatement(self):

        localctx = StarRocksParser.CreateRepositoryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_createRepositoryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4488
            self.match(StarRocksParser.CREATE)
            self.state = 4491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==317:
                self.state = 4489
                self.match(StarRocksParser.READ)
                self.state = 4490
                self.match(StarRocksParser.ONLY)


            self.state = 4493
            self.match(StarRocksParser.REPOSITORY)
            self.state = 4494
            localctx.repoName = self.identifier()
            self.state = 4495
            self.match(StarRocksParser.WITH)
            self.state = 4496
            self.match(StarRocksParser.BROKER)
            self.state = 4498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2907113422670155540) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201314769469032183) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2712845667094392313) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -9464603288729961) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714943291911) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397937273438359) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265517080645) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 144688858275903) != 0):
                self.state = 4497
                localctx.brokerName = self.identifierOrString()


            self.state = 4500
            self.match(StarRocksParser.ON)
            self.state = 4501
            self.match(StarRocksParser.LOCATION)
            self.state = 4502
            localctx.location = self.string_()
            self.state = 4505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4503
                self.match(StarRocksParser.PROPERTIES)
                self.state = 4504
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRepositoryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def REPOSITORY(self):
            return self.getToken(StarRocksParser.REPOSITORY, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropRepositoryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRepositoryStatement" ):
                listener.enterDropRepositoryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRepositoryStatement" ):
                listener.exitDropRepositoryStatement(self)




    def dropRepositoryStatement(self):

        localctx = StarRocksParser.DropRepositoryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_dropRepositoryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4507
            self.match(StarRocksParser.DROP)
            self.state = 4508
            self.match(StarRocksParser.REPOSITORY)
            self.state = 4509
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddSqlBlackListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def SQLBLACKLIST(self):
            return self.getToken(StarRocksParser.SQLBLACKLIST, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_addSqlBlackListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSqlBlackListStatement" ):
                listener.enterAddSqlBlackListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSqlBlackListStatement" ):
                listener.exitAddSqlBlackListStatement(self)




    def addSqlBlackListStatement(self):

        localctx = StarRocksParser.AddSqlBlackListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_addSqlBlackListStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4511
            self.match(StarRocksParser.ADD)
            self.state = 4512
            self.match(StarRocksParser.SQLBLACKLIST)
            self.state = 4513
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelSqlBlackListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(StarRocksParser.DELETE, 0)

        def SQLBLACKLIST(self):
            return self.getToken(StarRocksParser.SQLBLACKLIST, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_delSqlBlackListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelSqlBlackListStatement" ):
                listener.enterDelSqlBlackListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelSqlBlackListStatement" ):
                listener.exitDelSqlBlackListStatement(self)




    def delSqlBlackListStatement(self):

        localctx = StarRocksParser.DelSqlBlackListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_delSqlBlackListStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4515
            self.match(StarRocksParser.DELETE)
            self.state = 4516
            self.match(StarRocksParser.SQLBLACKLIST)
            self.state = 4517
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 4522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4518
                self.match(StarRocksParser.COMMA)
                self.state = 4519
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 4524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSqlBlackListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def SQLBLACKLIST(self):
            return self.getToken(StarRocksParser.SQLBLACKLIST, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showSqlBlackListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSqlBlackListStatement" ):
                listener.enterShowSqlBlackListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSqlBlackListStatement" ):
                listener.exitShowSqlBlackListStatement(self)




    def showSqlBlackListStatement(self):

        localctx = StarRocksParser.ShowSqlBlackListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_showSqlBlackListStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4525
            self.match(StarRocksParser.SHOW)
            self.state = 4526
            self.match(StarRocksParser.SQLBLACKLIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowWhiteListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def WHITELIST(self):
            return self.getToken(StarRocksParser.WHITELIST, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showWhiteListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowWhiteListStatement" ):
                listener.enterShowWhiteListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowWhiteListStatement" ):
                listener.exitShowWhiteListStatement(self)




    def showWhiteListStatement(self):

        localctx = StarRocksParser.ShowWhiteListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_showWhiteListStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4528
            self.match(StarRocksParser.SHOW)
            self.state = 4529
            self.match(StarRocksParser.WHITELIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddBackendBlackListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(StarRocksParser.ADD, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def BLACKLIST(self):
            return self.getToken(StarRocksParser.BLACKLIST, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_addBackendBlackListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddBackendBlackListStatement" ):
                listener.enterAddBackendBlackListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddBackendBlackListStatement" ):
                listener.exitAddBackendBlackListStatement(self)




    def addBackendBlackListStatement(self):

        localctx = StarRocksParser.AddBackendBlackListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_addBackendBlackListStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4531
            self.match(StarRocksParser.ADD)
            self.state = 4532
            self.match(StarRocksParser.BACKEND)
            self.state = 4533
            self.match(StarRocksParser.BLACKLIST)
            self.state = 4534
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 4539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4535
                self.match(StarRocksParser.COMMA)
                self.state = 4536
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 4541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelBackendBlackListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(StarRocksParser.DELETE, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def BLACKLIST(self):
            return self.getToken(StarRocksParser.BLACKLIST, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_delBackendBlackListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelBackendBlackListStatement" ):
                listener.enterDelBackendBlackListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelBackendBlackListStatement" ):
                listener.exitDelBackendBlackListStatement(self)




    def delBackendBlackListStatement(self):

        localctx = StarRocksParser.DelBackendBlackListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_delBackendBlackListStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4542
            self.match(StarRocksParser.DELETE)
            self.state = 4543
            self.match(StarRocksParser.BACKEND)
            self.state = 4544
            self.match(StarRocksParser.BLACKLIST)
            self.state = 4545
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 4550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4546
                self.match(StarRocksParser.COMMA)
                self.state = 4547
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 4552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowBackendBlackListStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def BLACKLIST(self):
            return self.getToken(StarRocksParser.BLACKLIST, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showBackendBlackListStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowBackendBlackListStatement" ):
                listener.enterShowBackendBlackListStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowBackendBlackListStatement" ):
                listener.exitShowBackendBlackListStatement(self)




    def showBackendBlackListStatement(self):

        localctx = StarRocksParser.ShowBackendBlackListStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_showBackendBlackListStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4553
            self.match(StarRocksParser.SHOW)
            self.state = 4554
            self.match(StarRocksParser.BACKEND)
            self.state = 4555
            self.match(StarRocksParser.BLACKLIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataCacheTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrStringOrStar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringOrStarContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringOrStarContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.DOT)
            else:
                return self.getToken(StarRocksParser.DOT, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dataCacheTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataCacheTarget" ):
                listener.enterDataCacheTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataCacheTarget" ):
                listener.exitDataCacheTarget(self)




    def dataCacheTarget(self):

        localctx = StarRocksParser.DataCacheTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_dataCacheTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4557
            self.identifierOrStringOrStar()
            self.state = 4558
            self.match(StarRocksParser.DOT)
            self.state = 4559
            self.identifierOrStringOrStar()
            self.state = 4560
            self.match(StarRocksParser.DOT)
            self.state = 4561
            self.identifierOrStringOrStar()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDataCacheRuleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def DATACACHE(self):
            return self.getToken(StarRocksParser.DATACACHE, 0)

        def RULE(self):
            return self.getToken(StarRocksParser.RULE, 0)

        def dataCacheTarget(self):
            return self.getTypedRuleContext(StarRocksParser.DataCacheTargetContext,0)


        def PRIORITY(self):
            return self.getToken(StarRocksParser.PRIORITY, 0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def MINUS_SYMBOL(self):
            return self.getToken(StarRocksParser.MINUS_SYMBOL, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createDataCacheRuleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDataCacheRuleStatement" ):
                listener.enterCreateDataCacheRuleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDataCacheRuleStatement" ):
                listener.exitCreateDataCacheRuleStatement(self)




    def createDataCacheRuleStatement(self):

        localctx = StarRocksParser.CreateDataCacheRuleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_createDataCacheRuleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4563
            self.match(StarRocksParser.CREATE)
            self.state = 4564
            self.match(StarRocksParser.DATACACHE)
            self.state = 4565
            self.match(StarRocksParser.RULE)
            self.state = 4566
            self.dataCacheTarget()
            self.state = 4569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 4567
                self.match(StarRocksParser.WHERE)
                self.state = 4568
                self.expression(0)


            self.state = 4571
            self.match(StarRocksParser.PRIORITY)
            self.state = 4572
            self.match(StarRocksParser.EQ)
            self.state = 4574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==464:
                self.state = 4573
                self.match(StarRocksParser.MINUS_SYMBOL)


            self.state = 4576
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 4578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4577
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowDataCacheRulesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def DATACACHE(self):
            return self.getToken(StarRocksParser.DATACACHE, 0)

        def RULES(self):
            return self.getToken(StarRocksParser.RULES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showDataCacheRulesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDataCacheRulesStatement" ):
                listener.enterShowDataCacheRulesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDataCacheRulesStatement" ):
                listener.exitShowDataCacheRulesStatement(self)




    def showDataCacheRulesStatement(self):

        localctx = StarRocksParser.ShowDataCacheRulesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_showDataCacheRulesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4580
            self.match(StarRocksParser.SHOW)
            self.state = 4581
            self.match(StarRocksParser.DATACACHE)
            self.state = 4582
            self.match(StarRocksParser.RULES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDataCacheRuleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def DATACACHE(self):
            return self.getToken(StarRocksParser.DATACACHE, 0)

        def RULE(self):
            return self.getToken(StarRocksParser.RULE, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropDataCacheRuleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDataCacheRuleStatement" ):
                listener.enterDropDataCacheRuleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDataCacheRuleStatement" ):
                listener.exitDropDataCacheRuleStatement(self)




    def dropDataCacheRuleStatement(self):

        localctx = StarRocksParser.DropDataCacheRuleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_dropDataCacheRuleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4584
            self.match(StarRocksParser.DROP)
            self.state = 4585
            self.match(StarRocksParser.DATACACHE)
            self.state = 4586
            self.match(StarRocksParser.RULE)
            self.state = 4587
            self.match(StarRocksParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClearDataCacheRulesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEAR(self):
            return self.getToken(StarRocksParser.CLEAR, 0)

        def DATACACHE(self):
            return self.getToken(StarRocksParser.DATACACHE, 0)

        def RULES(self):
            return self.getToken(StarRocksParser.RULES, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_clearDataCacheRulesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearDataCacheRulesStatement" ):
                listener.enterClearDataCacheRulesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearDataCacheRulesStatement" ):
                listener.exitClearDataCacheRulesStatement(self)




    def clearDataCacheRulesStatement(self):

        localctx = StarRocksParser.ClearDataCacheRulesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_clearDataCacheRulesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4589
            self.match(StarRocksParser.CLEAR)
            self.state = 4590
            self.match(StarRocksParser.DATACACHE)
            self.state = 4591
            self.match(StarRocksParser.RULES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataCacheSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # ExpressionContext

        def CACHE(self):
            return self.getToken(StarRocksParser.CACHE, 0)

        def SELECT(self):
            return self.getToken(StarRocksParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SelectItemContext,i)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dataCacheSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataCacheSelectStatement" ):
                listener.enterDataCacheSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataCacheSelectStatement" ):
                listener.exitDataCacheSelectStatement(self)




    def dataCacheSelectStatement(self):

        localctx = StarRocksParser.DataCacheSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_dataCacheSelectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4593
            self.match(StarRocksParser.CACHE)
            self.state = 4594
            self.match(StarRocksParser.SELECT)
            self.state = 4595
            self.selectItem()
            self.state = 4600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4596
                self.match(StarRocksParser.COMMA)
                self.state = 4597
                self.selectItem()
                self.state = 4602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4603
            self.match(StarRocksParser.FROM)
            self.state = 4604
            self.qualifiedName()
            self.state = 4607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 4605
                self.match(StarRocksParser.WHERE)
                self.state = 4606
                localctx.where = self.expression(0)


            self.state = 4610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4609
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPORT(self):
            return self.getToken(StarRocksParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)

        def tableDesc(self):
            return self.getTypedRuleContext(StarRocksParser.TableDescContext,0)


        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def MODE(self):
            return self.getToken(StarRocksParser.MODE, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def brokerDesc(self):
            return self.getTypedRuleContext(StarRocksParser.BrokerDescContext,0)


        def SYNC(self):
            return self.getToken(StarRocksParser.SYNC, 0)

        def ASYNC(self):
            return self.getToken(StarRocksParser.ASYNC, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_exportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStatement" ):
                listener.enterExportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStatement" ):
                listener.exitExportStatement(self)




    def exportStatement(self):

        localctx = StarRocksParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_exportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4612
            self.match(StarRocksParser.EXPORT)
            self.state = 4613
            self.match(StarRocksParser.TABLE)
            self.state = 4614
            self.tableDesc()
            self.state = 4616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 4615
                self.columnAliases()


            self.state = 4618
            self.match(StarRocksParser.TO)
            self.state = 4619
            self.string_()
            self.state = 4623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 4620
                self.match(StarRocksParser.WITH)
                self.state = 4621
                _la = self._input.LA(1)
                if not(_la==19 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4622
                self.match(StarRocksParser.MODE)


            self.state = 4626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4625
                self.properties()


            self.state = 4629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 4628
                self.brokerDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext
            self.pattern = None # String_Context

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def EXPORT(self):
            return self.getToken(StarRocksParser.EXPORT, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_cancelExportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelExportStatement" ):
                listener.enterCancelExportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelExportStatement" ):
                listener.exitCancelExportStatement(self)




    def cancelExportStatement(self):

        localctx = StarRocksParser.CancelExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_cancelExportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4631
            self.match(StarRocksParser.CANCEL)
            self.state = 4632
            self.match(StarRocksParser.EXPORT)
            self.state = 4635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4633
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4634
                localctx.catalog = self.qualifiedName()


            self.state = 4641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 4637
                self.match(StarRocksParser.LIKE)
                self.state = 4638
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 4639
                self.match(StarRocksParser.WHERE)
                self.state = 4640
                self.expression(0)
                pass
            elif token in [-1, 495]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def EXPORT(self):
            return self.getToken(StarRocksParser.EXPORT, 0)

        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showExportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowExportStatement" ):
                listener.enterShowExportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowExportStatement" ):
                listener.exitShowExportStatement(self)




    def showExportStatement(self):

        localctx = StarRocksParser.ShowExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_showExportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4643
            self.match(StarRocksParser.SHOW)
            self.state = 4644
            self.match(StarRocksParser.EXPORT)
            self.state = 4647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4645
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4646
                localctx.catalog = self.qualifiedName()


            self.state = 4653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 4649
                self.match(StarRocksParser.LIKE)
                self.state = 4650
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 4651
                self.match(StarRocksParser.WHERE)
                self.state = 4652
                self.expression(0)
                pass
            elif token in [-1, 220, 274, 495]:
                pass
            else:
                pass
            self.state = 4665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 4655
                self.match(StarRocksParser.ORDER)
                self.state = 4656
                self.match(StarRocksParser.BY)
                self.state = 4657
                self.sortItem()
                self.state = 4662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4658
                    self.match(StarRocksParser.COMMA)
                    self.state = 4659
                    self.sortItem()
                    self.state = 4664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 4667
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(StarRocksParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(StarRocksParser.PLUGIN, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_installPluginStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPluginStatement" ):
                listener.enterInstallPluginStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPluginStatement" ):
                listener.exitInstallPluginStatement(self)




    def installPluginStatement(self):

        localctx = StarRocksParser.InstallPluginStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_installPluginStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4670
            self.match(StarRocksParser.INSTALL)
            self.state = 4671
            self.match(StarRocksParser.PLUGIN)
            self.state = 4672
            self.match(StarRocksParser.FROM)
            self.state = 4673
            self.identifierOrString()
            self.state = 4675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4674
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(StarRocksParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(StarRocksParser.PLUGIN, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_uninstallPluginStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPluginStatement" ):
                listener.enterUninstallPluginStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPluginStatement" ):
                listener.exitUninstallPluginStatement(self)




    def uninstallPluginStatement(self):

        localctx = StarRocksParser.UninstallPluginStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_uninstallPluginStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4677
            self.match(StarRocksParser.UNINSTALL)
            self.state = 4678
            self.match(StarRocksParser.PLUGIN)
            self.state = 4679
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def FILE(self):
            return self.getToken(StarRocksParser.FILE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileStatement" ):
                listener.enterCreateFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileStatement" ):
                listener.exitCreateFileStatement(self)




    def createFileStatement(self):

        localctx = StarRocksParser.CreateFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_createFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4681
            self.match(StarRocksParser.CREATE)
            self.state = 4682
            self.match(StarRocksParser.FILE)
            self.state = 4683
            self.string_()
            self.state = 4686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4684
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4685
                localctx.catalog = self.qualifiedName()


            self.state = 4688
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def FILE(self):
            return self.getToken(StarRocksParser.FILE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_dropFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFileStatement" ):
                listener.enterDropFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFileStatement" ):
                listener.exitDropFileStatement(self)




    def dropFileStatement(self):

        localctx = StarRocksParser.DropFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_dropFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4690
            self.match(StarRocksParser.DROP)
            self.state = 4691
            self.match(StarRocksParser.FILE)
            self.state = 4692
            self.string_()
            self.state = 4695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4693
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4694
                localctx.catalog = self.qualifiedName()


            self.state = 4697
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSmallFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog = None # QualifiedNameContext

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def FILE(self):
            return self.getToken(StarRocksParser.FILE, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_showSmallFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSmallFilesStatement" ):
                listener.enterShowSmallFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSmallFilesStatement" ):
                listener.exitShowSmallFilesStatement(self)




    def showSmallFilesStatement(self):

        localctx = StarRocksParser.ShowSmallFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_showSmallFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4699
            self.match(StarRocksParser.SHOW)
            self.state = 4700
            self.match(StarRocksParser.FILE)
            self.state = 4703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153 or _la==182:
                self.state = 4701
                _la = self._input.LA(1)
                if not(_la==153 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4702
                localctx.catalog = self.qualifiedName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatePipeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(StarRocksParser.CREATE, 0)

        def orReplace(self):
            return self.getTypedRuleContext(StarRocksParser.OrReplaceContext,0)


        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(StarRocksParser.IfNotExistsContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def insertStatement(self):
            return self.getTypedRuleContext(StarRocksParser.InsertStatementContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_createPipeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatePipeStatement" ):
                listener.enterCreatePipeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatePipeStatement" ):
                listener.exitCreatePipeStatement(self)




    def createPipeStatement(self):

        localctx = StarRocksParser.CreatePipeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_createPipeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4705
            self.match(StarRocksParser.CREATE)
            self.state = 4706
            self.orReplace()
            self.state = 4707
            self.match(StarRocksParser.PIPE)
            self.state = 4708
            self.ifNotExists()
            self.state = 4709
            self.qualifiedName()
            self.state = 4711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 4710
                self.properties()


            self.state = 4713
            self.match(StarRocksParser.AS)
            self.state = 4714
            self.insertStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPipeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_dropPipeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPipeStatement" ):
                listener.enterDropPipeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPipeStatement" ):
                listener.exitDropPipeStatement(self)




    def dropPipeStatement(self):

        localctx = StarRocksParser.DropPipeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_dropPipeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4716
            self.match(StarRocksParser.DROP)
            self.state = 4717
            self.match(StarRocksParser.PIPE)
            self.state = 4720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 4718
                self.match(StarRocksParser.IF)
                self.state = 4719
                self.match(StarRocksParser.EXISTS)


            self.state = 4722
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterPipeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fileName = None # String_Context

        def SUSPEND(self):
            return self.getToken(StarRocksParser.SUSPEND, 0)

        def RESUME(self):
            return self.getToken(StarRocksParser.RESUME, 0)

        def RETRY(self):
            return self.getToken(StarRocksParser.RETRY, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def FILE(self):
            return self.getToken(StarRocksParser.FILE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterPipeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPipeClause" ):
                listener.enterAlterPipeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPipeClause" ):
                listener.exitAlterPipeClause(self)




    def alterPipeClause(self):

        localctx = StarRocksParser.AlterPipeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_alterPipeClause)
        try:
            self.state = 4733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4724
                self.match(StarRocksParser.SUSPEND)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4725
                self.match(StarRocksParser.RESUME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4726
                self.match(StarRocksParser.RETRY)
                self.state = 4727
                self.match(StarRocksParser.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4728
                self.match(StarRocksParser.RETRY)
                self.state = 4729
                self.match(StarRocksParser.FILE)
                self.state = 4730
                localctx.fileName = self.string_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4731
                self.match(StarRocksParser.SET)
                self.state = 4732
                self.propertyList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterPipeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(StarRocksParser.ALTER, 0)

        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def alterPipeClause(self):
            return self.getTypedRuleContext(StarRocksParser.AlterPipeClauseContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_alterPipeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPipeStatement" ):
                listener.enterAlterPipeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPipeStatement" ):
                listener.exitAlterPipeStatement(self)




    def alterPipeStatement(self):

        localctx = StarRocksParser.AlterPipeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_alterPipeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4735
            self.match(StarRocksParser.ALTER)
            self.state = 4736
            self.match(StarRocksParser.PIPE)
            self.state = 4737
            self.qualifiedName()
            self.state = 4738
            self.alterPipeClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescPipeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def DESC(self):
            return self.getToken(StarRocksParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(StarRocksParser.DESCRIBE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_descPipeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescPipeStatement" ):
                listener.enterDescPipeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescPipeStatement" ):
                listener.exitDescPipeStatement(self)




    def descPipeStatement(self):

        localctx = StarRocksParser.DescPipeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_descPipeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4740
            _la = self._input.LA(1)
            if not(_la==107 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4741
            self.match(StarRocksParser.PIPE)
            self.state = 4742
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowPipeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pattern = None # String_Context

        def SHOW(self):
            return self.getToken(StarRocksParser.SHOW, 0)

        def PIPES(self):
            return self.getToken(StarRocksParser.PIPES, 0)

        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_showPipeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPipeStatement" ):
                listener.enterShowPipeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPipeStatement" ):
                listener.exitShowPipeStatement(self)




    def showPipeStatement(self):

        localctx = StarRocksParser.ShowPipeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_showPipeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4744
            self.match(StarRocksParser.SHOW)
            self.state = 4745
            self.match(StarRocksParser.PIPES)
            self.state = 4752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 4746
                self.match(StarRocksParser.LIKE)
                self.state = 4747
                localctx.pattern = self.string_()
                pass
            elif token in [444]:
                self.state = 4748
                self.match(StarRocksParser.WHERE)
                self.state = 4749
                self.expression(0)
                pass
            elif token in [153]:
                self.state = 4750
                self.match(StarRocksParser.FROM)
                self.state = 4751
                self.qualifiedName()
                pass
            elif token in [-1, 220, 274, 495]:
                pass
            else:
                pass
            self.state = 4764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 4754
                self.match(StarRocksParser.ORDER)
                self.state = 4755
                self.match(StarRocksParser.BY)
                self.state = 4756
                self.sortItem()
                self.state = 4761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4757
                    self.match(StarRocksParser.COMMA)
                    self.state = 4758
                    self.sortItem()
                    self.state = 4763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 4766
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def setVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SetVarContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SetVarContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)




    def setStatement(self):

        localctx = StarRocksParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4769
            self.match(StarRocksParser.SET)
            self.state = 4770
            self.setVar()
            self.state = 4775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4771
                self.match(StarRocksParser.COMMA)
                self.state = 4772
                self.setVar()
                self.state = 4777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_setVar

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetVarContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SetVarContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRANSACTION(self):
            return self.getToken(StarRocksParser.TRANSACTION, 0)
        def transaction_characteristics(self):
            return self.getTypedRuleContext(StarRocksParser.Transaction_characteristicsContext,0)

        def varType(self):
            return self.getTypedRuleContext(StarRocksParser.VarTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)


    class SetNamesContext(SetVarContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SetVarContext
            super().__init__(parser)
            self.charset = None # IdentifierOrStringContext
            self.collate = None # IdentifierOrStringContext
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(StarRocksParser.CHAR, 0)
        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)
        def CHARSET(self):
            return self.getToken(StarRocksParser.CHARSET, 0)
        def CHARACTER(self):
            return self.getToken(StarRocksParser.CHARACTER, 0)
        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.DEFAULT)
            else:
                return self.getToken(StarRocksParser.DEFAULT, i)
        def NAMES(self):
            return self.getToken(StarRocksParser.NAMES, 0)
        def COLLATE(self):
            return self.getToken(StarRocksParser.COLLATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)


    class SetPasswordContext(SetVarContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SetVarContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.PASSWORD)
            else:
                return self.getToken(StarRocksParser.PASSWORD, i)
        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)
        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)
        def user(self):
            return self.getTypedRuleContext(StarRocksParser.UserContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)


    class SetUserVarContext(SetVarContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SetVarContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userVariable(self):
            return self.getTypedRuleContext(StarRocksParser.UserVariableContext,0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetUserVar" ):
                listener.enterSetUserVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetUserVar" ):
                listener.exitSetUserVar(self)


    class SetSystemVarContext(SetVarContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SetVarContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)
        def setExprOrDefault(self):
            return self.getTypedRuleContext(StarRocksParser.SetExprOrDefaultContext,0)

        def varType(self):
            return self.getTypedRuleContext(StarRocksParser.VarTypeContext,0)

        def systemVariable(self):
            return self.getTypedRuleContext(StarRocksParser.SystemVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSystemVar" ):
                listener.enterSetSystemVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSystemVar" ):
                listener.exitSetSystemVar(self)



    def setVar(self):

        localctx = StarRocksParser.SetVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_setVar)
        self._la = 0 # Token type
        try:
            self.state = 4843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4783
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51]:
                    self.state = 4778
                    self.match(StarRocksParser.CHAR)
                    self.state = 4779
                    self.match(StarRocksParser.SET)
                    pass
                elif token in [53]:
                    self.state = 4780
                    self.match(StarRocksParser.CHARSET)
                    pass
                elif token in [52]:
                    self.state = 4781
                    self.match(StarRocksParser.CHARACTER)
                    self.state = 4782
                    self.match(StarRocksParser.SET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4787
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 484, 485, 488, 489, 490, 496]:
                    self.state = 4785
                    self.identifierOrString()
                    pass
                elif token in [100]:
                    self.state = 4786
                    self.match(StarRocksParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = StarRocksParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4789
                self.match(StarRocksParser.NAMES)
                self.state = 4792
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 484, 485, 488, 489, 490, 496]:
                    self.state = 4790
                    localctx.charset = self.identifierOrString()
                    pass
                elif token in [100]:
                    self.state = 4791
                    self.match(StarRocksParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 4794
                    self.match(StarRocksParser.COLLATE)
                    self.state = 4797
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 484, 485, 488, 489, 490, 496]:
                        self.state = 4795
                        localctx.collate = self.identifierOrString()
                        pass
                    elif token in [100]:
                        self.state = 4796
                        self.match(StarRocksParser.DEFAULT)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 3:
                localctx = StarRocksParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4801
                self.match(StarRocksParser.PASSWORD)
                self.state = 4802
                self.match(StarRocksParser.EQ)
                self.state = 4809
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [484, 485]:
                    self.state = 4803
                    self.string_()
                    pass
                elif token in [281]:
                    self.state = 4804
                    self.match(StarRocksParser.PASSWORD)
                    self.state = 4805
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 4806
                    self.string_()
                    self.state = 4807
                    self.match(StarRocksParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = StarRocksParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4811
                self.match(StarRocksParser.PASSWORD)
                self.state = 4812
                self.match(StarRocksParser.FOR)
                self.state = 4813
                self.user()
                self.state = 4814
                self.match(StarRocksParser.EQ)
                self.state = 4821
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [484, 485]:
                    self.state = 4815
                    self.string_()
                    pass
                elif token in [281]:
                    self.state = 4816
                    self.match(StarRocksParser.PASSWORD)
                    self.state = 4817
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 4818
                    self.string_()
                    self.state = 4819
                    self.match(StarRocksParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = StarRocksParser.SetUserVarContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4823
                self.userVariable()
                self.state = 4824
                self.match(StarRocksParser.EQ)
                self.state = 4825
                self.expression(0)
                pass

            elif la_ == 6:
                localctx = StarRocksParser.SetSystemVarContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,524,self._ctx)
                if la_ == 1:
                    self.state = 4827
                    self.varType()


                self.state = 4830
                self.identifier()
                self.state = 4831
                self.match(StarRocksParser.EQ)
                self.state = 4832
                self.setExprOrDefault()
                pass

            elif la_ == 7:
                localctx = StarRocksParser.SetSystemVarContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4834
                self.systemVariable()
                self.state = 4835
                self.match(StarRocksParser.EQ)
                self.state = 4836
                self.setExprOrDefault()
                pass

            elif la_ == 8:
                localctx = StarRocksParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 4839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==223 or _la==365 or _la==433:
                    self.state = 4838
                    self.varType()


                self.state = 4841
                self.match(StarRocksParser.TRANSACTION)
                self.state = 4842
                self.transaction_characteristics()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_characteristicsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transaction_access_mode(self):
            return self.getTypedRuleContext(StarRocksParser.Transaction_access_modeContext,0)


        def isolation_level(self):
            return self.getTypedRuleContext(StarRocksParser.Isolation_levelContext,0)


        def COMMA(self):
            return self.getToken(StarRocksParser.COMMA, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_transaction_characteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_characteristics" ):
                listener.enterTransaction_characteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_characteristics" ):
                listener.exitTransaction_characteristics(self)




    def transaction_characteristics(self):

        localctx = StarRocksParser.Transaction_characteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_transaction_characteristics)
        try:
            self.state = 4855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4845
                self.transaction_access_mode()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4846
                self.isolation_level()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4847
                self.transaction_access_mode()
                self.state = 4848
                self.match(StarRocksParser.COMMA)
                self.state = 4849
                self.isolation_level()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4851
                self.isolation_level()
                self.state = 4852
                self.match(StarRocksParser.COMMA)
                self.state = 4853
                self.transaction_access_mode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_access_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(StarRocksParser.READ, 0)

        def ONLY(self):
            return self.getToken(StarRocksParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(StarRocksParser.WRITE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_transaction_access_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_access_mode" ):
                listener.enterTransaction_access_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_access_mode" ):
                listener.exitTransaction_access_mode(self)




    def transaction_access_mode(self):

        localctx = StarRocksParser.Transaction_access_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_transaction_access_mode)
        try:
            self.state = 4861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4857
                self.match(StarRocksParser.READ)
                self.state = 4858
                self.match(StarRocksParser.ONLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4859
                self.match(StarRocksParser.READ)
                self.state = 4860
                self.match(StarRocksParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isolation_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(StarRocksParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(StarRocksParser.LEVEL, 0)

        def isolation_types(self):
            return self.getTypedRuleContext(StarRocksParser.Isolation_typesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_isolation_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolation_level" ):
                listener.enterIsolation_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolation_level" ):
                listener.exitIsolation_level(self)




    def isolation_level(self):

        localctx = StarRocksParser.Isolation_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_isolation_level)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4863
            self.match(StarRocksParser.ISOLATION)
            self.state = 4864
            self.match(StarRocksParser.LEVEL)
            self.state = 4865
            self.isolation_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isolation_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(StarRocksParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(StarRocksParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(StarRocksParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(StarRocksParser.REPEATABLE, 0)

        def SERIALIZABLE(self):
            return self.getToken(StarRocksParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_isolation_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolation_types" ):
                listener.enterIsolation_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolation_types" ):
                listener.exitIsolation_types(self)




    def isolation_types(self):

        localctx = StarRocksParser.Isolation_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_isolation_types)
        try:
            self.state = 4874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4867
                self.match(StarRocksParser.READ)
                self.state = 4868
                self.match(StarRocksParser.UNCOMMITTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4869
                self.match(StarRocksParser.READ)
                self.state = 4870
                self.match(StarRocksParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4871
                self.match(StarRocksParser.REPEATABLE)
                self.state = 4872
                self.match(StarRocksParser.READ)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4873
                self.match(StarRocksParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExprOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_setExprOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExprOrDefault" ):
                listener.enterSetExprOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExprOrDefault" ):
                listener.exitSetExprOrDefault(self)




    def setExprOrDefault(self):

        localctx = StarRocksParser.SetExprOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_setExprOrDefault)
        try:
            self.state = 4880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4876
                self.match(StarRocksParser.DEFAULT)
                pass
            elif token in [266]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4877
                self.match(StarRocksParser.ON)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4878
                self.match(StarRocksParser.ALL)
                pass
            elif token in [2, 3, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 99, 102, 104, 105, 106, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 210, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 464, 470, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 496, 498, 502, 504]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4879
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetUserPropertyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(StarRocksParser.SET, 0)

        def PROPERTY(self):
            return self.getToken(StarRocksParser.PROPERTY, 0)

        def userPropertyList(self):
            return self.getTypedRuleContext(StarRocksParser.UserPropertyListContext,0)


        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_setUserPropertyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetUserPropertyStatement" ):
                listener.enterSetUserPropertyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetUserPropertyStatement" ):
                listener.exitSetUserPropertyStatement(self)




    def setUserPropertyStatement(self):

        localctx = StarRocksParser.SetUserPropertyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_setUserPropertyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4882
            self.match(StarRocksParser.SET)
            self.state = 4883
            self.match(StarRocksParser.PROPERTY)
            self.state = 4886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 4884
                self.match(StarRocksParser.FOR)
                self.state = 4885
                self.string_()


            self.state = 4888
            self.userPropertyList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_roleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleList" ):
                listener.enterRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleList" ):
                listener.exitRoleList(self)




    def roleList(self):

        localctx = StarRocksParser.RoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_roleList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4890
            self.identifierOrString()
            self.state = 4895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4891
                self.match(StarRocksParser.COMMA)
                self.state = 4892
                self.identifierOrString()
                self.state = 4897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteScriptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def EXECUTE(self):
            return self.getToken(StarRocksParser.EXECUTE, 0)

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def FRONTEND(self):
            return self.getToken(StarRocksParser.FRONTEND, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_executeScriptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteScriptStatement" ):
                listener.enterExecuteScriptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteScriptStatement" ):
                listener.exitExecuteScriptStatement(self)




    def executeScriptStatement(self):

        localctx = StarRocksParser.ExecuteScriptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_executeScriptStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4898
            self.match(StarRocksParser.ADMIN)
            self.state = 4899
            self.match(StarRocksParser.EXECUTE)
            self.state = 4900
            self.match(StarRocksParser.ON)
            self.state = 4901
            _la = self._input.LA(1)
            if not(_la==154 or _la==481):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4902
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(StarRocksParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(StarRocksParser.TRANSACTION, 0)

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(StarRocksParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(StarRocksParser.SNAPSHOT, 0)

        def BEGIN(self):
            return self.getToken(StarRocksParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(StarRocksParser.WORK, 0)

        def COMMIT(self):
            return self.getToken(StarRocksParser.COMMIT, 0)

        def AND(self):
            return self.getToken(StarRocksParser.AND, 0)

        def CHAIN(self):
            return self.getToken(StarRocksParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(StarRocksParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.NO)
            else:
                return self.getToken(StarRocksParser.NO, i)

        def ROLLBACK(self):
            return self.getToken(StarRocksParser.ROLLBACK, 0)

        def LOCK(self):
            return self.getToken(StarRocksParser.LOCK, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def lock_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.Lock_itemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.Lock_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def UNLOCK(self):
            return self.getToken(StarRocksParser.UNLOCK, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_unsupportedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedStatement" ):
                listener.enterUnsupportedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedStatement" ):
                listener.exitUnsupportedStatement(self)




    def unsupportedStatement(self):

        localctx = StarRocksParser.UnsupportedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_unsupportedStatement)
        self._la = 0 # Token type
        try:
            self.state = 4961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [375]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4904
                self.match(StarRocksParser.START)
                self.state = 4905
                self.match(StarRocksParser.TRANSACTION)
                self.state = 4909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 4906
                    self.match(StarRocksParser.WITH)
                    self.state = 4907
                    self.match(StarRocksParser.CONSISTENT)
                    self.state = 4908
                    self.match(StarRocksParser.SNAPSHOT)


                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4911
                self.match(StarRocksParser.BEGIN)
                self.state = 4913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==447:
                    self.state = 4912
                    self.match(StarRocksParser.WORK)


                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4915
                self.match(StarRocksParser.COMMIT)
                self.state = 4917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==447:
                    self.state = 4916
                    self.match(StarRocksParser.WORK)


                self.state = 4924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 4919
                    self.match(StarRocksParser.AND)
                    self.state = 4921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==254:
                        self.state = 4920
                        self.match(StarRocksParser.NO)


                    self.state = 4923
                    self.match(StarRocksParser.CHAIN)


                self.state = 4930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==254 or _la==323:
                    self.state = 4927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==254:
                        self.state = 4926
                        self.match(StarRocksParser.NO)


                    self.state = 4929
                    self.match(StarRocksParser.RELEASE)


                pass
            elif token in [345]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4932
                self.match(StarRocksParser.ROLLBACK)
                self.state = 4934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==447:
                    self.state = 4933
                    self.match(StarRocksParser.WORK)


                self.state = 4941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 4936
                    self.match(StarRocksParser.AND)
                    self.state = 4938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==254:
                        self.state = 4937
                        self.match(StarRocksParser.NO)


                    self.state = 4940
                    self.match(StarRocksParser.CHAIN)


                self.state = 4947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==254 or _la==323:
                    self.state = 4944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==254:
                        self.state = 4943
                        self.match(StarRocksParser.NO)


                    self.state = 4946
                    self.match(StarRocksParser.RELEASE)


                pass
            elif token in [450]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4949
                self.match(StarRocksParser.LOCK)
                self.state = 4950
                self.match(StarRocksParser.TABLES)
                self.state = 4951
                self.lock_item()
                self.state = 4956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 4952
                    self.match(StarRocksParser.COMMA)
                    self.state = 4953
                    self.lock_item()
                    self.state = 4958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [451]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4959
                self.match(StarRocksParser.UNLOCK)
                self.state = 4960
                self.match(StarRocksParser.TABLES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def lock_type(self):
            return self.getTypedRuleContext(StarRocksParser.Lock_typeContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_lock_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_item" ):
                listener.enterLock_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_item" ):
                listener.exitLock_item(self)




    def lock_item(self):

        localctx = StarRocksParser.Lock_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_lock_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4963
            self.identifier()
            self.state = 4968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.state = 4965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 4964
                    self.match(StarRocksParser.AS)


                self.state = 4967
                localctx.alias = self.identifier()


            self.state = 4970
            self.lock_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(StarRocksParser.READ, 0)

        def LOCAL(self):
            return self.getToken(StarRocksParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(StarRocksParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(StarRocksParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = StarRocksParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 4980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [317]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4972
                self.match(StarRocksParser.READ)
                self.state = 4974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==223:
                    self.state = 4973
                    self.match(StarRocksParser.LOCAL)


                pass
            elif token in [448, 452]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==452:
                    self.state = 4976
                    self.match(StarRocksParser.LOW_PRIORITY)


                self.state = 4979
                self.match(StarRocksParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)


        def explainDesc(self):
            return self.getTypedRuleContext(StarRocksParser.ExplainDescContext,0)


        def optimizerTrace(self):
            return self.getTypedRuleContext(StarRocksParser.OptimizerTraceContext,0)


        def outfile(self):
            return self.getTypedRuleContext(StarRocksParser.OutfileContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_queryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatement" ):
                listener.enterQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatement" ):
                listener.exitQueryStatement(self)




    def queryStatement(self):

        localctx = StarRocksParser.QueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_queryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107, 108, 130]:
                self.state = 4982
                self.explainDesc()
                pass
            elif token in [408]:
                self.state = 4983
                self.optimizerTrace()
                pass
            elif token in [361, 446, 498]:
                pass
            else:
                pass
            self.state = 4986
            self.queryRelation()
            self.state = 4988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 4987
                self.outfile()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(StarRocksParser.QueryNoWithContext,0)


        def withClause(self):
            return self.getTypedRuleContext(StarRocksParser.WithClauseContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_queryRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryRelation" ):
                listener.enterQueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryRelation" ):
                listener.exitQueryRelation(self)




    def queryRelation(self):

        localctx = StarRocksParser.QueryRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_queryRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 4990
                self.withClause()


            self.state = 4993
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(StarRocksParser.WITH, 0)

        def commonTableExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.CommonTableExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.CommonTableExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = StarRocksParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_withClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4995
            self.match(StarRocksParser.WITH)
            self.state = 4996
            self.commonTableExpression()
            self.state = 5001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 4997
                self.match(StarRocksParser.COMMA)
                self.state = 4998
                self.commonTableExpression()
                self.state = 5003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryPrimary(self):
            return self.getTypedRuleContext(StarRocksParser.QueryPrimaryContext,0)


        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def limitElement(self):
            return self.getTypedRuleContext(StarRocksParser.LimitElementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)




    def queryNoWith(self):

        localctx = StarRocksParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5004
            self.queryPrimary(0)
            self.state = 5015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 5005
                self.match(StarRocksParser.ORDER)
                self.state = 5006
                self.match(StarRocksParser.BY)
                self.state = 5007
                self.sortItem()
                self.state = 5012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5008
                    self.match(StarRocksParser.COMMA)
                    self.state = 5009
                    self.sortItem()
                    self.state = 5014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 5017
                self.limitElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def OF(self):
            return self.getToken(StarRocksParser.OF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def SYSTEM_TIME(self):
            return self.getToken(StarRocksParser.SYSTEM_TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(StarRocksParser.TIMESTAMP, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def BETWEEN(self):
            return self.getToken(StarRocksParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(StarRocksParser.AND, 0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def TO(self):
            return self.getToken(StarRocksParser.TO, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def VERSION(self):
            return self.getToken(StarRocksParser.VERSION, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_temporalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalClause" ):
                listener.enterTemporalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalClause" ):
                listener.exitTemporalClause(self)




    def temporalClause(self):

        localctx = StarRocksParser.TemporalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_temporalClause)
        try:
            self.state = 5051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5020
                self.match(StarRocksParser.AS)
                self.state = 5021
                self.match(StarRocksParser.OF)
                self.state = 5022
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5023
                self.match(StarRocksParser.FOR)
                self.state = 5024
                self.match(StarRocksParser.SYSTEM_TIME)
                self.state = 5025
                self.match(StarRocksParser.AS)
                self.state = 5026
                self.match(StarRocksParser.OF)
                self.state = 5027
                self.match(StarRocksParser.TIMESTAMP)
                self.state = 5028
                self.string_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5029
                self.match(StarRocksParser.FOR)
                self.state = 5030
                self.match(StarRocksParser.SYSTEM_TIME)
                self.state = 5031
                self.match(StarRocksParser.BETWEEN)
                self.state = 5032
                self.expression(0)
                self.state = 5033
                self.match(StarRocksParser.AND)
                self.state = 5034
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5036
                self.match(StarRocksParser.FOR)
                self.state = 5037
                self.match(StarRocksParser.SYSTEM_TIME)
                self.state = 5038
                self.match(StarRocksParser.FROM)
                self.state = 5039
                self.expression(0)
                self.state = 5040
                self.match(StarRocksParser.TO)
                self.state = 5041
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5043
                self.match(StarRocksParser.FOR)
                self.state = 5044
                self.match(StarRocksParser.SYSTEM_TIME)
                self.state = 5045
                self.match(StarRocksParser.ALL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5046
                self.match(StarRocksParser.FOR)
                self.state = 5047
                self.match(StarRocksParser.VERSION)
                self.state = 5048
                self.match(StarRocksParser.AS)
                self.state = 5049
                self.match(StarRocksParser.OF)
                self.state = 5050
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryWithParenthesesContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(StarRocksParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryWithParentheses" ):
                listener.enterQueryWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryWithParentheses" ):
                listener.exitQueryWithParentheses(self)


    class SetOperationContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.QueryPrimaryContext
            super().__init__(parser)
            self.left = None # QueryPrimaryContext
            self.operator = None # Token
            self.right = None # QueryPrimaryContext
            self.copyFrom(ctx)

        def queryPrimary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.QueryPrimaryContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.QueryPrimaryContext,i)

        def INTERSECT(self):
            return self.getToken(StarRocksParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(StarRocksParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(StarRocksParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(StarRocksParser.EXCEPT, 0)
        def MINUS(self):
            return self.getToken(StarRocksParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(StarRocksParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)



    def queryPrimary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = StarRocksParser.QueryPrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 632
        self.enterRecursionRule(localctx, 632, self.RULE_queryPrimary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [361]:
                localctx = StarRocksParser.QueryPrimaryDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5054
                self.querySpecification()
                pass
            elif token in [498]:
                localctx = StarRocksParser.QueryWithParenthesesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5055
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 5072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,564,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5070
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                    if la_ == 1:
                        localctx = StarRocksParser.SetOperationContext(self, StarRocksParser.QueryPrimaryContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryPrimary)
                        self.state = 5058
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5059
                        localctx.operator = self.match(StarRocksParser.INTERSECT)
                        self.state = 5061
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==8 or _la==110:
                            self.state = 5060
                            self.setQuantifier()


                        self.state = 5063
                        localctx.right = self.queryPrimary(3)
                        pass

                    elif la_ == 2:
                        localctx = StarRocksParser.SetOperationContext(self, StarRocksParser.QueryPrimaryContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryPrimary)
                        self.state = 5064
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5065
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==127 or _la==244 or _la==417):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==8 or _la==110:
                            self.state = 5066
                            self.setQuantifier()


                        self.state = 5069
                        localctx.right = self.queryPrimary(2)
                        pass

             
                self.state = 5074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,564,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = StarRocksParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5075
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5076
            self.queryRelation()
            self.state = 5077
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_rowConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)




    def rowConstructor(self):

        localctx = StarRocksParser.RowConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_rowConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5079
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5080
            self.expressionList()
            self.state = 5081
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(StarRocksParser.NULLS, 0)

        def ASC(self):
            return self.getToken(StarRocksParser.ASC, 0)

        def DESC(self):
            return self.getToken(StarRocksParser.DESC, 0)

        def FIRST(self):
            return self.getToken(StarRocksParser.FIRST, 0)

        def LAST(self):
            return self.getToken(StarRocksParser.LAST, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = StarRocksParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5083
            self.expression(0)
            self.state = 5085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==107:
                self.state = 5084
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==18 or _la==107):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 5087
                self.match(StarRocksParser.NULLS)
                self.state = 5088
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==142 or _la==212):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # Token
            self.offset = None # Token

        def LIMIT(self):
            return self.getToken(StarRocksParser.LIMIT, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def PARAMETER(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.PARAMETER)
            else:
                return self.getToken(StarRocksParser.PARAMETER, i)

        def OFFSET(self):
            return self.getToken(StarRocksParser.OFFSET, 0)

        def COMMA(self):
            return self.getToken(StarRocksParser.COMMA, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_limitElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitElement" ):
                listener.enterLimitElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitElement" ):
                listener.exitLimitElement(self)




    def limitElement(self):

        localctx = StarRocksParser.LimitElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_limitElement)
        self._la = 0 # Token type
        try:
            self.state = 5101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5091
                self.match(StarRocksParser.LIMIT)
                self.state = 5092
                localctx.limit = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==278 or _la==481):
                    localctx.limit = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 5093
                    self.match(StarRocksParser.OFFSET)
                    self.state = 5094
                    localctx.offset = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==278 or _la==481):
                        localctx.offset = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5097
                self.match(StarRocksParser.LIMIT)
                self.state = 5098
                localctx.offset = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==278 or _la==481):
                    localctx.offset = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5099
                self.match(StarRocksParser.COMMA)
                self.state = 5100
                localctx.limit = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==278 or _la==481):
                    localctx.limit = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # ExpressionContext
            self.having = None # ExpressionContext
            self.qualifyFunction = None # SelectItemContext
            self.limit = None # Token

        def SELECT(self):
            return self.getToken(StarRocksParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SelectItemContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(StarRocksParser.FromClauseContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(StarRocksParser.SetQuantifierContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def WHERE(self):
            return self.getToken(StarRocksParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(StarRocksParser.GROUP, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def groupingElement(self):
            return self.getTypedRuleContext(StarRocksParser.GroupingElementContext,0)


        def HAVING(self):
            return self.getToken(StarRocksParser.HAVING, 0)

        def QUALIFY(self):
            return self.getToken(StarRocksParser.QUALIFY, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(StarRocksParser.ComparisonOperatorContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = StarRocksParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5103
            self.match(StarRocksParser.SELECT)
            self.state = 5105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==110:
                self.state = 5104
                self.setQuantifier()


            self.state = 5107
            self.selectItem()
            self.state = 5112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,570,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5108
                    self.match(StarRocksParser.COMMA)
                    self.state = 5109
                    self.selectItem() 
                self.state = 5114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,570,self._ctx)

            self.state = 5115
            self.fromClause()

            self.state = 5118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.state = 5116
                self.match(StarRocksParser.WHERE)
                self.state = 5117
                localctx.where = self.expression(0)


            self.state = 5123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.state = 5120
                self.match(StarRocksParser.GROUP)
                self.state = 5121
                self.match(StarRocksParser.BY)
                self.state = 5122
                self.groupingElement()


            self.state = 5127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 5125
                self.match(StarRocksParser.HAVING)
                self.state = 5126
                localctx.having = self.expression(0)


            self.state = 5134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.state = 5129
                self.match(StarRocksParser.QUALIFY)
                self.state = 5130
                localctx.qualifyFunction = self.selectItem()
                self.state = 5131
                self.comparisonOperator()
                self.state = 5132
                localctx.limit = self.match(StarRocksParser.INTEGER_VALUE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_fromClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DualContext(FromClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FromClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def DUAL(self):
            return self.getToken(StarRocksParser.DUAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDual" ):
                listener.enterDual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDual" ):
                listener.exitDual(self)


    class FromContext(FromClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FromClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def relations(self):
            return self.getTypedRuleContext(StarRocksParser.RelationsContext,0)

        def pivotClause(self):
            return self.getTypedRuleContext(StarRocksParser.PivotClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom" ):
                listener.enterFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom" ):
                listener.exitFrom(self)



    def fromClause(self):

        localctx = StarRocksParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_fromClause)
        try:
            self.state = 5145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,577,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.FromContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
                if la_ == 1:
                    self.state = 5136
                    self.match(StarRocksParser.FROM)
                    self.state = 5137
                    self.relations()
                    self.state = 5139
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
                    if la_ == 1:
                        self.state = 5138
                        self.pivotClause()




                pass

            elif la_ == 2:
                localctx = StarRocksParser.DualContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5143
                self.match(StarRocksParser.FROM)
                self.state = 5144
                self.match(StarRocksParser.DUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(StarRocksParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(StarRocksParser.SETS, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.GroupingSetContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(StarRocksParser.CUBE, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)



    def groupingElement(self):

        localctx = StarRocksParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 5173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5147
                self.match(StarRocksParser.ROLLUP)
                self.state = 5148
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5149
                    self.expressionList()


                self.state = 5152
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = StarRocksParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5153
                self.match(StarRocksParser.CUBE)
                self.state = 5154
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5155
                    self.expressionList()


                self.state = 5158
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = StarRocksParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5159
                self.match(StarRocksParser.GROUPING)
                self.state = 5160
                self.match(StarRocksParser.SETS)
                self.state = 5161
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5162
                self.groupingSet()
                self.state = 5167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5163
                    self.match(StarRocksParser.COMMA)
                    self.state = 5164
                    self.groupingSet()
                    self.state = 5169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5170
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = StarRocksParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5172
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = StarRocksParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5175
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                self.state = 5176
                self.expression(0)


            self.state = 5183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5179
                self.match(StarRocksParser.COMMA)
                self.state = 5180
                self.expression(0)
                self.state = 5185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5186
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_commonTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonTableExpression" ):
                listener.enterCommonTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonTableExpression" ):
                listener.exitCommonTableExpression(self)




    def commonTableExpression(self):

        localctx = StarRocksParser.CommonTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_commonTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5188
            localctx.name = self.identifier()
            self.state = 5190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 5189
                self.columnAliases()


            self.state = 5192
            self.match(StarRocksParser.AS)
            self.state = 5193
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5194
            self.queryRelation()
            self.state = 5195
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(StarRocksParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = StarRocksParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5197
            _la = self._input.LA(1)
            if not(_la==8 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)

        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)
        def ASTERISK_SYMBOL(self):
            return self.getToken(StarRocksParser.ASTERISK_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)



    def selectItem(self):

        localctx = StarRocksParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 5214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5199
                self.expression(0)
                self.state = 5207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
                if la_ == 1:
                    self.state = 5201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5200
                        self.match(StarRocksParser.AS)


                    self.state = 5205
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                        self.state = 5203
                        self.identifier()
                        pass
                    elif token in [484, 485]:
                        self.state = 5204
                        self.string_()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                localctx = StarRocksParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5209
                self.qualifiedName()
                self.state = 5210
                self.match(StarRocksParser.DOT)
                self.state = 5211
                self.match(StarRocksParser.ASTERISK_SYMBOL)
                pass

            elif la_ == 3:
                localctx = StarRocksParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5213
                self.match(StarRocksParser.ASTERISK_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.RelationContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.RelationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def LATERAL(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LATERAL)
            else:
                return self.getToken(StarRocksParser.LATERAL, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_relations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelations" ):
                listener.enterRelations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelations" ):
                listener.exitRelations(self)




    def relations(self):

        localctx = StarRocksParser.RelationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_relations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5216
            self.relation()
            self.state = 5224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,590,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5217
                    self.match(StarRocksParser.COMMA)
                    self.state = 5219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==214:
                        self.state = 5218
                        self.match(StarRocksParser.LATERAL)


                    self.state = 5221
                    self.relation() 
                self.state = 5226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,590,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(StarRocksParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.JoinRelationContext,i)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = StarRocksParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_relation)
        self._la = 0 # Token type
        try:
            self.state = 5244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5227
                self.relationPrimary()
                self.state = 5231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,591,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5228
                        self.joinRelation() 
                    self.state = 5233
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,591,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5234
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5235
                self.relationPrimary()
                self.state = 5239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==76 or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & 1153202983878524929) != 0) or _la==341:
                    self.state = 5236
                    self.joinRelation()
                    self.state = 5241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5242
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryWithAliasContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(StarRocksParser.SubqueryContext,0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryWithAlias" ):
                listener.enterSubqueryWithAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryWithAlias" ):
                listener.exitSubqueryWithAlias(self)


    class NormalizedTableFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(StarRocksParser.TABLE, 0)
        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)
        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)

        def argumentList(self):
            return self.getTypedRuleContext(StarRocksParser.ArgumentListContext,0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)
        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalizedTableFunction" ):
                listener.enterNormalizedTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalizedTableFunction" ):
                listener.exitNormalizedTableFunction(self)


    class TableFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunction" ):
                listener.enterTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunction" ):
                listener.exitTableFunction(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def relations(self):
            return self.getTypedRuleContext(StarRocksParser.RelationsContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)


    class FileTableFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def FILES(self):
            return self.getToken(StarRocksParser.FILES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileTableFunction" ):
                listener.enterFileTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileTableFunction" ):
                listener.exitFileTableFunction(self)


    class TableAtomContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)

        def temporalClause(self):
            return self.getTypedRuleContext(StarRocksParser.TemporalClauseContext,0)

        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)

        def tabletList(self):
            return self.getTypedRuleContext(StarRocksParser.TabletListContext,0)

        def replicaList(self):
            return self.getTypedRuleContext(StarRocksParser.ReplicaListContext,0)

        def bracketHint(self):
            return self.getTypedRuleContext(StarRocksParser.BracketHintContext,0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAtom" ):
                listener.enterTableAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAtom" ):
                listener.exitTableAtom(self)


    class InlineTableContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.RelationPrimaryContext
            super().__init__(parser)
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def VALUES(self):
            return self.getToken(StarRocksParser.VALUES, 0)
        def rowConstructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.RowConstructorContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.RowConstructorContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)
        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)



    def relationPrimary(self):

        localctx = StarRocksParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 5342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.TableAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5246
                self.qualifiedName()
                self.state = 5248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
                if la_ == 1:
                    self.state = 5247
                    self.temporalClause()


                self.state = 5251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
                if la_ == 1:
                    self.state = 5250
                    self.partitionNames()


                self.state = 5254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
                if la_ == 1:
                    self.state = 5253
                    self.tabletList()


                self.state = 5257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,597,self._ctx)
                if la_ == 1:
                    self.state = 5256
                    self.replicaList()


                self.state = 5263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,599,self._ctx)
                if la_ == 1:
                    self.state = 5260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5259
                        self.match(StarRocksParser.AS)


                    self.state = 5262
                    localctx.alias = self.identifier()


                self.state = 5266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,600,self._ctx)
                if la_ == 1:
                    self.state = 5265
                    self.bracketHint()


                pass

            elif la_ == 2:
                localctx = StarRocksParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5268
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5269
                self.match(StarRocksParser.VALUES)
                self.state = 5270
                self.rowConstructor()
                self.state = 5275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5271
                    self.match(StarRocksParser.COMMA)
                    self.state = 5272
                    self.rowConstructor()
                    self.state = 5277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5278
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 5286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,604,self._ctx)
                if la_ == 1:
                    self.state = 5280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5279
                        self.match(StarRocksParser.AS)


                    self.state = 5282
                    localctx.alias = self.identifier()
                    self.state = 5284
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
                    if la_ == 1:
                        self.state = 5283
                        self.columnAliases()




                pass

            elif la_ == 3:
                localctx = StarRocksParser.SubqueryWithAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5288
                self.subquery()
                self.state = 5296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,607,self._ctx)
                if la_ == 1:
                    self.state = 5290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5289
                        self.match(StarRocksParser.AS)


                    self.state = 5292
                    localctx.alias = self.identifier()
                    self.state = 5294
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
                    if la_ == 1:
                        self.state = 5293
                        self.columnAliases()




                pass

            elif la_ == 4:
                localctx = StarRocksParser.TableFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5298
                self.qualifiedName()
                self.state = 5299
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5300
                self.expressionList()
                self.state = 5301
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 5309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
                if la_ == 1:
                    self.state = 5303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5302
                        self.match(StarRocksParser.AS)


                    self.state = 5305
                    localctx.alias = self.identifier()
                    self.state = 5307
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,609,self._ctx)
                    if la_ == 1:
                        self.state = 5306
                        self.columnAliases()




                pass

            elif la_ == 5:
                localctx = StarRocksParser.NormalizedTableFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5311
                self.match(StarRocksParser.TABLE)
                self.state = 5312
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5313
                self.qualifiedName()
                self.state = 5314
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5315
                self.argumentList()
                self.state = 5316
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 5317
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 5325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
                if la_ == 1:
                    self.state = 5319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5318
                        self.match(StarRocksParser.AS)


                    self.state = 5321
                    localctx.alias = self.identifier()
                    self.state = 5323
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,612,self._ctx)
                    if la_ == 1:
                        self.state = 5322
                        self.columnAliases()




                pass

            elif la_ == 6:
                localctx = StarRocksParser.FileTableFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5327
                self.match(StarRocksParser.FILES)
                self.state = 5328
                self.propertyList()
                self.state = 5336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
                if la_ == 1:
                    self.state = 5330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 5329
                        self.match(StarRocksParser.AS)


                    self.state = 5332
                    localctx.alias = self.identifier()
                    self.state = 5334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,615,self._ctx)
                    if la_ == 1:
                        self.state = 5333
                        self.columnAliases()




                pass

            elif la_ == 7:
                localctx = StarRocksParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5338
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5339
                self.relations()
                self.state = 5340
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(StarRocksParser.PIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def pivotAggregationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PivotAggregationExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PivotAggregationExpressionContext,i)


        def FOR(self):
            return self.getToken(StarRocksParser.FOR, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PivotValueContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)




    def pivotClause(self):

        localctx = StarRocksParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5344
            self.match(StarRocksParser.PIVOT)
            self.state = 5345
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5346
            self.pivotAggregationExpression()
            self.state = 5351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5347
                self.match(StarRocksParser.COMMA)
                self.state = 5348
                self.pivotAggregationExpression()
                self.state = 5353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5354
            self.match(StarRocksParser.FOR)
            self.state = 5357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                self.state = 5355
                self.identifier()
                pass
            elif token in [498]:
                self.state = 5356
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5359
            self.match(StarRocksParser.IN)
            self.state = 5360
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5361
            self.pivotValue()
            self.state = 5366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5362
                self.match(StarRocksParser.COMMA)
                self.state = 5363
                self.pivotValue()
                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5369
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 5370
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotAggregationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(StarRocksParser.FunctionCallContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_pivotAggregationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotAggregationExpression" ):
                listener.enterPivotAggregationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotAggregationExpression" ):
                listener.exitPivotAggregationExpression(self)




    def pivotAggregationExpression(self):

        localctx = StarRocksParser.PivotAggregationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_pivotAggregationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5372
            self.functionCall()
            self.state = 5380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2907113422670024468) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201314769469032183) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2712845667094392313) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -9464603288729961) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714943291911) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397937273438359) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265517080645) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 144688858275903) != 0):
                self.state = 5374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 5373
                    self.match(StarRocksParser.AS)


                self.state = 5378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                    self.state = 5376
                    self.identifier()
                    pass
                elif token in [484, 485]:
                    self.state = 5377
                    self.string_()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalExpression(self):
            return self.getTypedRuleContext(StarRocksParser.LiteralExpressionContext,0)


        def literalExpressionList(self):
            return self.getTypedRuleContext(StarRocksParser.LiteralExpressionListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)




    def pivotValue(self):

        localctx = StarRocksParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_pivotValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49, 90, 91, 137, 145, 197, 259, 278, 411, 481, 482, 483, 484, 485, 486, 487]:
                self.state = 5382
                self.literalExpression()
                pass
            elif token in [498]:
                self.state = 5383
                self.literalExpressionList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2907113422670024468) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201314769469032183) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2712845667094392313) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -9464603288729961) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714943291911) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397937273438359) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265517080645) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 144688858275903) != 0):
                self.state = 5387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 5386
                    self.match(StarRocksParser.AS)


                self.state = 5391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                    self.state = 5389
                    self.identifier()
                    pass
                elif token in [484, 485]:
                    self.state = 5390
                    self.string_()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = StarRocksParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_argumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5395
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rightRelation = None # RelationPrimaryContext

        def crossOrInnerJoinType(self):
            return self.getTypedRuleContext(StarRocksParser.CrossOrInnerJoinTypeContext,0)


        def relationPrimary(self):
            return self.getTypedRuleContext(StarRocksParser.RelationPrimaryContext,0)


        def bracketHint(self):
            return self.getTypedRuleContext(StarRocksParser.BracketHintContext,0)


        def LATERAL(self):
            return self.getToken(StarRocksParser.LATERAL, 0)

        def joinCriteria(self):
            return self.getTypedRuleContext(StarRocksParser.JoinCriteriaContext,0)


        def outerAndSemiJoinType(self):
            return self.getTypedRuleContext(StarRocksParser.OuterAndSemiJoinTypeContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = StarRocksParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_joinRelation)
        self._la = 0 # Token type
        try:
            self.state = 5418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 188, 204]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5397
                self.crossOrInnerJoinType()
                self.state = 5399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==502:
                    self.state = 5398
                    self.bracketHint()


                self.state = 5402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 5401
                    self.match(StarRocksParser.LATERAL)


                self.state = 5404
                localctx.rightRelation = self.relationPrimary()
                self.state = 5406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,630,self._ctx)
                if la_ == 1:
                    self.state = 5405
                    self.joinCriteria()


                pass
            elif token in [156, 216, 341]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5408
                self.outerAndSemiJoinType()
                self.state = 5410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==502:
                    self.state = 5409
                    self.bracketHint()


                self.state = 5413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 5412
                    self.match(StarRocksParser.LATERAL)


                self.state = 5415
                localctx.rightRelation = self.relationPrimary()
                self.state = 5416
                self.joinCriteria()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrossOrInnerJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(StarRocksParser.JOIN, 0)

        def INNER(self):
            return self.getToken(StarRocksParser.INNER, 0)

        def CROSS(self):
            return self.getToken(StarRocksParser.CROSS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_crossOrInnerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrossOrInnerJoinType" ):
                listener.enterCrossOrInnerJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrossOrInnerJoinType" ):
                listener.exitCrossOrInnerJoinType(self)




    def crossOrInnerJoinType(self):

        localctx = StarRocksParser.CrossOrInnerJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_crossOrInnerJoinType)
        try:
            self.state = 5426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5420
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5421
                self.match(StarRocksParser.INNER)
                self.state = 5422
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5423
                self.match(StarRocksParser.CROSS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5424
                self.match(StarRocksParser.CROSS)
                self.state = 5425
                self.match(StarRocksParser.JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OuterAndSemiJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(StarRocksParser.LEFT, 0)

        def JOIN(self):
            return self.getToken(StarRocksParser.JOIN, 0)

        def RIGHT(self):
            return self.getToken(StarRocksParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(StarRocksParser.FULL, 0)

        def OUTER(self):
            return self.getToken(StarRocksParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(StarRocksParser.SEMI, 0)

        def ANTI(self):
            return self.getToken(StarRocksParser.ANTI, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_outerAndSemiJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterAndSemiJoinType" ):
                listener.enterOuterAndSemiJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterAndSemiJoinType" ):
                listener.exitOuterAndSemiJoinType(self)




    def outerAndSemiJoinType(self):

        localctx = StarRocksParser.OuterAndSemiJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_outerAndSemiJoinType)
        try:
            self.state = 5455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,635,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5428
                self.match(StarRocksParser.LEFT)
                self.state = 5429
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5430
                self.match(StarRocksParser.RIGHT)
                self.state = 5431
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5432
                self.match(StarRocksParser.FULL)
                self.state = 5433
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5434
                self.match(StarRocksParser.LEFT)
                self.state = 5435
                self.match(StarRocksParser.OUTER)
                self.state = 5436
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5437
                self.match(StarRocksParser.RIGHT)
                self.state = 5438
                self.match(StarRocksParser.OUTER)
                self.state = 5439
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5440
                self.match(StarRocksParser.FULL)
                self.state = 5441
                self.match(StarRocksParser.OUTER)
                self.state = 5442
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5443
                self.match(StarRocksParser.LEFT)
                self.state = 5444
                self.match(StarRocksParser.SEMI)
                self.state = 5445
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5446
                self.match(StarRocksParser.RIGHT)
                self.state = 5447
                self.match(StarRocksParser.SEMI)
                self.state = 5448
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5449
                self.match(StarRocksParser.LEFT)
                self.state = 5450
                self.match(StarRocksParser.ANTI)
                self.state = 5451
                self.match(StarRocksParser.JOIN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5452
                self.match(StarRocksParser.RIGHT)
                self.state = 5453
                self.match(StarRocksParser.ANTI)
                self.state = 5454
                self.match(StarRocksParser.JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BracketHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(StarRocksParser.LEFT_BRACKET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(StarRocksParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def BITOR(self):
            return self.getToken(StarRocksParser.BITOR, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)


        def literalExpressionList(self):
            return self.getTypedRuleContext(StarRocksParser.LiteralExpressionListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_bracketHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracketHint" ):
                listener.enterBracketHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracketHint" ):
                listener.exitBracketHint(self)




    def bracketHint(self):

        localctx = StarRocksParser.BracketHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_bracketHint)
        self._la = 0 # Token type
        try:
            self.state = 5475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5457
                self.match(StarRocksParser.LEFT_BRACKET)
                self.state = 5458
                self.identifier()
                self.state = 5463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5459
                    self.match(StarRocksParser.COMMA)
                    self.state = 5460
                    self.identifier()
                    self.state = 5465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5466
                self.match(StarRocksParser.RIGHT_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5468
                self.match(StarRocksParser.LEFT_BRACKET)
                self.state = 5469
                self.identifier()
                self.state = 5470
                self.match(StarRocksParser.BITOR)
                self.state = 5471
                self.primaryExpression(0)
                self.state = 5472
                self.literalExpressionList()
                self.state = 5473
                self.match(StarRocksParser.RIGHT_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.k = None # IdentifierOrStringContext
            self.v = None # LiteralExpressionContext

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(StarRocksParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_hintMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintMap" ):
                listener.enterHintMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintMap" ):
                listener.exitHintMap(self)




    def hintMap(self):

        localctx = StarRocksParser.HintMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_hintMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5477
            localctx.k = self.identifierOrString()
            self.state = 5478
            self.match(StarRocksParser.EQ)
            self.state = 5479
            localctx.v = self.literalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(StarRocksParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def USING(self):
            return self.getToken(StarRocksParser.USING, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = StarRocksParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 5495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [266]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5481
                self.match(StarRocksParser.ON)
                self.state = 5482
                self.expression(0)
                pass
            elif token in [427]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5483
                self.match(StarRocksParser.USING)
                self.state = 5484
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5485
                self.identifier()
                self.state = 5490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5486
                    self.match(StarRocksParser.COMMA)
                    self.state = 5487
                    self.identifier()
                    self.state = 5492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5493
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)




    def columnAliases(self):

        localctx = StarRocksParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5497
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5498
            self.identifier()
            self.state = 5503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5499
                self.match(StarRocksParser.COMMA)
                self.state = 5500
                self.identifier()
                self.state = 5505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5506
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(StarRocksParser.PARTITIONS, 0)

        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def keyPartitions(self):
            return self.getTypedRuleContext(StarRocksParser.KeyPartitionsContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionNames" ):
                listener.enterPartitionNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionNames" ):
                listener.exitPartitionNames(self)




    def partitionNames(self):

        localctx = StarRocksParser.PartitionNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_partitionNames)
        self._la = 0 # Token type
        try:
            self.state = 5529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==396:
                    self.state = 5508
                    self.match(StarRocksParser.TEMPORARY)


                self.state = 5511
                _la = self._input.LA(1)
                if not(_la==279 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5512
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5513
                self.identifierOrString()
                self.state = 5518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5514
                    self.match(StarRocksParser.COMMA)
                    self.state = 5515
                    self.identifierOrString()
                    self.state = 5520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5521
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==396:
                    self.state = 5523
                    self.match(StarRocksParser.TEMPORARY)


                self.state = 5526
                _la = self._input.LA(1)
                if not(_la==279 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5527
                self.identifierOrString()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5528
                self.keyPartitions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_keyPartitions

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class KeyPartitionListContext(KeyPartitionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.KeyPartitionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def keyPartition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.KeyPartitionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.KeyPartitionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPartitionList" ):
                listener.enterKeyPartitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPartitionList" ):
                listener.exitKeyPartitionList(self)



    def keyPartitions(self):

        localctx = StarRocksParser.KeyPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_keyPartitions)
        self._la = 0 # Token type
        try:
            localctx = StarRocksParser.KeyPartitionListContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 5531
            self.match(StarRocksParser.PARTITION)
            self.state = 5532
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5533
            self.keyPartition()
            self.state = 5538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5534
                self.match(StarRocksParser.COMMA)
                self.state = 5535
                self.keyPartition()
                self.state = 5540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5541
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabletListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLET(self):
            return self.getToken(StarRocksParser.TABLET, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_tabletList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabletList" ):
                listener.enterTabletList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabletList" ):
                listener.exitTabletList(self)




    def tabletList(self):

        localctx = StarRocksParser.TabletListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_tabletList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5543
            self.match(StarRocksParser.TABLET)
            self.state = 5544
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5545
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 5550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5546
                self.match(StarRocksParser.COMMA)
                self.state = 5547
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 5552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5553
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPARE(self):
            return self.getToken(StarRocksParser.PREPARE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)

        def prepareSql(self):
            return self.getTypedRuleContext(StarRocksParser.PrepareSqlContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = StarRocksParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5555
            self.match(StarRocksParser.PREPARE)
            self.state = 5556
            self.identifier()
            self.state = 5557
            self.match(StarRocksParser.FROM)
            self.state = 5558
            self.prepareSql()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareSqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(StarRocksParser.StatementContext,0)


        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(StarRocksParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_prepareSql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareSql" ):
                listener.enterPrepareSql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareSql" ):
                listener.exitPrepareSql(self)




    def prepareSql(self):

        localctx = StarRocksParser.PrepareSqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_prepareSql)
        try:
            self.state = 5562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 9, 10, 26, 28, 43, 44, 55, 56, 64, 75, 93, 101, 107, 108, 114, 128, 130, 131, 160, 169, 189, 190, 208, 222, 283, 296, 319, 320, 335, 336, 339, 345, 361, 366, 371, 375, 378, 383, 386, 408, 412, 419, 422, 424, 446, 450, 451, 498]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5560
                self.statement()
                pass
            elif token in [484]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5561
                self.match(StarRocksParser.SINGLE_QUOTED_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(StarRocksParser.EXECUTE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def USING(self):
            return self.getToken(StarRocksParser.USING, 0)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.AT)
            else:
                return self.getToken(StarRocksParser.AT, i)

        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = StarRocksParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5564
            self.match(StarRocksParser.EXECUTE)
            self.state = 5565
            self.identifier()
            self.state = 5577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==427:
                self.state = 5566
                self.match(StarRocksParser.USING)
                self.state = 5567
                self.match(StarRocksParser.AT)
                self.state = 5568
                self.identifierOrString()
                self.state = 5574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 5569
                    self.match(StarRocksParser.COMMA)
                    self.state = 5570
                    self.match(StarRocksParser.AT)
                    self.state = 5571
                    self.identifierOrString()
                    self.state = 5576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPARE(self):
            return self.getToken(StarRocksParser.PREPARE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def DEALLOCATE(self):
            return self.getToken(StarRocksParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(StarRocksParser.DROP, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_deallocateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocateStatement" ):
                listener.enterDeallocateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocateStatement" ):
                listener.exitDeallocateStatement(self)




    def deallocateStatement(self):

        localctx = StarRocksParser.DeallocateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_deallocateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5579
            _la = self._input.LA(1)
            if not(_la==93 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5580
            self.match(StarRocksParser.PREPARE)
            self.state = 5581
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicaListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLICA(self):
            return self.getToken(StarRocksParser.REPLICA, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_replicaList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicaList" ):
                listener.enterReplicaList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicaList" ):
                listener.exitReplicaList(self)




    def replicaList(self):

        localctx = StarRocksParser.ReplicaListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_replicaList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5583
            self.match(StarRocksParser.REPLICA)
            self.state = 5584
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5585
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 5590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5586
                self.match(StarRocksParser.COMMA)
                self.state = 5587
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 5592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5593
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionOrDefaultContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_expressionsWithDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefault" ):
                listener.enterExpressionsWithDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefault" ):
                listener.exitExpressionsWithDefault(self)




    def expressionsWithDefault(self):

        localctx = StarRocksParser.ExpressionsWithDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_expressionsWithDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5595
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5596
            self.expressionOrDefault()
            self.state = 5601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5597
                self.match(StarRocksParser.COMMA)
                self.state = 5598
                self.expressionOrDefault()
                self.state = 5603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5604
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(StarRocksParser.DEFAULT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = StarRocksParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_expressionOrDefault)
        try:
            self.state = 5608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 99, 102, 104, 105, 106, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 210, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 464, 470, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 496, 498, 502, 504]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5606
                self.expression(0)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5607
                self.match(StarRocksParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.MapExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.MapExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_mapExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapExpressionList" ):
                listener.enterMapExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapExpressionList" ):
                listener.exitMapExpressionList(self)




    def mapExpressionList(self):

        localctx = StarRocksParser.MapExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_mapExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5610
            self.mapExpression()
            self.state = 5615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 5611
                self.match(StarRocksParser.COMMA)
                self.state = 5612
                self.mapExpression()
                self.state = 5617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # ExpressionContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(StarRocksParser.COLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_mapExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapExpression" ):
                listener.enterMapExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapExpression" ):
                listener.exitMapExpression(self)




    def mapExpression(self):

        localctx = StarRocksParser.MapExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_mapExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5618
            localctx.key = self.expression(0)
            self.state = 5619
            self.match(StarRocksParser.COLON)
            self.state = 5620
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSingletonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(StarRocksParser.EOF, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_expressionSingleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSingleton" ):
                listener.enterExpressionSingleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSingleton" ):
                listener.exitExpressionSingleton(self)




    def expressionSingleton(self):

        localctx = StarRocksParser.ExpressionSingletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_expressionSingleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5622
            self.expression(0)
            self.state = 5623
            self.match(StarRocksParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionDefaultContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self):
            return self.getTypedRuleContext(StarRocksParser.BooleanExpressionContext,0)

        def BINARY(self):
            return self.getToken(StarRocksParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionDefault" ):
                listener.enterExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionDefault" ):
                listener.exitExpressionDefault(self)


    class LogicalNotContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class LogicalBinaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.operator = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(StarRocksParser.AND, 0)
        def LOGICAL_AND(self):
            return self.getToken(StarRocksParser.LOGICAL_AND, 0)
        def OR(self):
            return self.getToken(StarRocksParser.OR, 0)
        def LOGICAL_OR(self):
            return self.getToken(StarRocksParser.LOGICAL_OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = StarRocksParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 710
        self.enterRecursionRule(localctx, 710, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 99, 102, 104, 105, 106, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 210, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 464, 470, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 496, 498, 502, 504]:
                localctx = StarRocksParser.ExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
                if la_ == 1:
                    self.state = 5626
                    self.match(StarRocksParser.BINARY)


                self.state = 5629
                self.booleanExpression(0)
                pass
            elif token in [258]:
                localctx = StarRocksParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5630
                self.match(StarRocksParser.NOT)
                self.state = 5631
                self.expression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 5642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,657,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5640
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
                    if la_ == 1:
                        localctx = StarRocksParser.LogicalBinaryContext(self, StarRocksParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 5634
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5635
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==11 or _la==469):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5636
                        localctx.right = self.expression(3)
                        pass

                    elif la_ == 2:
                        localctx = StarRocksParser.LogicalBinaryContext(self, StarRocksParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 5637
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5638
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==273 or _la==468):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5639
                        localctx.right = self.expression(2)
                        pass

             
                self.state = 5644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,657,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = StarRocksParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5645
            self.expression(0)
            self.state = 5650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,658,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5646
                    self.match(StarRocksParser.COMMA)
                    self.state = 5647
                    self.expression(0) 
                self.state = 5652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,658,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ComparisonContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(StarRocksParser.ComparisonOperatorContext,0)

        def booleanExpression(self):
            return self.getTypedRuleContext(StarRocksParser.BooleanExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(StarRocksParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class BooleanExpressionDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(StarRocksParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpressionDefault" ):
                listener.enterBooleanExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpressionDefault" ):
                listener.exitBooleanExpressionDefault(self)


    class IsNullContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self):
            return self.getTypedRuleContext(StarRocksParser.BooleanExpressionContext,0)

        def IS(self):
            return self.getToken(StarRocksParser.IS, 0)
        def NULL_(self):
            return self.getToken(StarRocksParser.NULL_, 0)
        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNull" ):
                listener.enterIsNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNull" ):
                listener.exitIsNull(self)


    class ScalarSubqueryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self):
            return self.getTypedRuleContext(StarRocksParser.BooleanExpressionContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(StarRocksParser.ComparisonOperatorContext,0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = StarRocksParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 714
        self.enterRecursionRule(localctx, 714, self.RULE_booleanExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = StarRocksParser.BooleanExpressionDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5654
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,661,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5672
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
                    if la_ == 1:
                        localctx = StarRocksParser.IsNullContext(self, StarRocksParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 5656
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5657
                        self.match(StarRocksParser.IS)
                        self.state = 5659
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258:
                            self.state = 5658
                            self.match(StarRocksParser.NOT)


                        self.state = 5661
                        self.match(StarRocksParser.NULL_)
                        pass

                    elif la_ == 2:
                        localctx = StarRocksParser.ComparisonContext(self, StarRocksParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 5662
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5663
                        self.comparisonOperator()
                        self.state = 5664
                        localctx.right = self.predicate()
                        pass

                    elif la_ == 3:
                        localctx = StarRocksParser.ScalarSubqueryContext(self, StarRocksParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 5666
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5667
                        self.comparisonOperator()
                        self.state = 5668
                        self.match(StarRocksParser.LEFT_PAREN)
                        self.state = 5669
                        self.queryRelation()
                        self.state = 5670
                        self.match(StarRocksParser.RIGHT_PAREN)
                        pass

             
                self.state = 5676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,661,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._valueExpression = None # ValueExpressionContext

        def valueExpression(self):
            return self.getTypedRuleContext(StarRocksParser.ValueExpressionContext,0)


        def predicateOperations(self):
            return self.getTypedRuleContext(StarRocksParser.PredicateOperationsContext,0)


        def tupleInSubquery(self):
            return self.getTypedRuleContext(StarRocksParser.TupleInSubqueryContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = StarRocksParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_predicate)
        try:
            self.state = 5682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5677
                localctx._valueExpression = self.valueExpression(0)
                self.state = 5679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5678
                    self.predicateOperations(localctx._valueExpression)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5681
                self.tupleInSubquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleInSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_tupleInSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)




    def tupleInSubquery(self):

        localctx = StarRocksParser.TupleInSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_tupleInSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5684
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5685
            self.expression(0)
            self.state = 5688 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5686
                self.match(StarRocksParser.COMMA)
                self.state = 5687
                self.expression(0)
                self.state = 5690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==500):
                    break

            self.state = 5692
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 5694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 5693
                self.match(StarRocksParser.NOT)


            self.state = 5696
            self.match(StarRocksParser.IN)
            self.state = 5697
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 5698
            self.queryRelation()
            self.state = 5699
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return StarRocksParser.RULE_predicateOperations

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class LikeContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PredicateOperationsContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)
        def RLIKE(self):
            return self.getToken(StarRocksParser.RLIKE, 0)
        def REGEXP(self):
            return self.getToken(StarRocksParser.REGEXP, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(StarRocksParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)


    class InSubqueryContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)


    class InListContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)


    class BetweenContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PredicateOperationsContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # PredicateContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(StarRocksParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(StarRocksParser.AND, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(StarRocksParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(StarRocksParser.PredicateContext,0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)



    def predicateOperations(self, value:ParserRuleContext):

        localctx = StarRocksParser.PredicateOperationsContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 720, self.RULE_predicateOperations)
        self._la = 0 # Token type
        try:
            self.state = 5730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 5701
                    self.match(StarRocksParser.NOT)


                self.state = 5704
                self.match(StarRocksParser.IN)
                self.state = 5705
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5706
                self.queryRelation()
                self.state = 5707
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = StarRocksParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 5709
                    self.match(StarRocksParser.NOT)


                self.state = 5712
                self.match(StarRocksParser.IN)
                self.state = 5713
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5714
                self.expressionList()
                self.state = 5715
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = StarRocksParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 5717
                    self.match(StarRocksParser.NOT)


                self.state = 5720
                self.match(StarRocksParser.BETWEEN)
                self.state = 5721
                localctx.lower = self.valueExpression(0)
                self.state = 5722
                self.match(StarRocksParser.AND)
                self.state = 5723
                localctx.upper = self.predicate()
                pass

            elif la_ == 4:
                localctx = StarRocksParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 5725
                    self.match(StarRocksParser.NOT)


                self.state = 5728
                _la = self._input.LA(1)
                if not(_la==219 or _la==322 or _la==342):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5729
                localctx.pattern = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ValueExpressionContext,i)

        def BITXOR(self):
            return self.getToken(StarRocksParser.BITXOR, 0)
        def ASTERISK_SYMBOL(self):
            return self.getToken(StarRocksParser.ASTERISK_SYMBOL, 0)
        def SLASH_SYMBOL(self):
            return self.getToken(StarRocksParser.SLASH_SYMBOL, 0)
        def PERCENT_SYMBOL(self):
            return self.getToken(StarRocksParser.PERCENT_SYMBOL, 0)
        def INT_DIV(self):
            return self.getToken(StarRocksParser.INT_DIV, 0)
        def MOD(self):
            return self.getToken(StarRocksParser.MOD, 0)
        def PLUS_SYMBOL(self):
            return self.getToken(StarRocksParser.PLUS_SYMBOL, 0)
        def MINUS_SYMBOL(self):
            return self.getToken(StarRocksParser.MINUS_SYMBOL, 0)
        def BITAND(self):
            return self.getToken(StarRocksParser.BITAND, 0)
        def BITOR(self):
            return self.getToken(StarRocksParser.BITOR, 0)
        def BIT_SHIFT_LEFT(self):
            return self.getToken(StarRocksParser.BIT_SHIFT_LEFT, 0)
        def BIT_SHIFT_RIGHT(self):
            return self.getToken(StarRocksParser.BIT_SHIFT_RIGHT, 0)
        def BIT_SHIFT_RIGHT_LOGICAL(self):
            return self.getToken(StarRocksParser.BIT_SHIFT_RIGHT_LOGICAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = StarRocksParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 722
        self.enterRecursionRule(localctx, 722, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = StarRocksParser.ValueExpressionDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5733
            self.primaryExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5761
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,672,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5759
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
                    if la_ == 1:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5735
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 5736
                        localctx.operator = self.match(StarRocksParser.BITXOR)
                        self.state = 5737
                        localctx.right = self.valueExpression(9)
                        pass

                    elif la_ == 2:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5738
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5739
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==246 or ((((_la - 465)) & ~0x3f) == 0 and ((1 << (_la - 465)) & 71) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5740
                        localctx.right = self.valueExpression(8)
                        pass

                    elif la_ == 3:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5741
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5742
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==463 or _la==464):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5743
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 4:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5744
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5745
                        localctx.operator = self.match(StarRocksParser.BITAND)
                        self.state = 5746
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 5:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5747
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5748
                        localctx.operator = self.match(StarRocksParser.BITOR)
                        self.state = 5749
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 6:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5750
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5751
                        localctx.operator = self.match(StarRocksParser.BIT_SHIFT_LEFT)
                        self.state = 5752
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 7:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5753
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5754
                        localctx.operator = self.match(StarRocksParser.BIT_SHIFT_RIGHT)
                        self.state = 5755
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 8:
                        localctx = StarRocksParser.ArithmeticBinaryContext(self, StarRocksParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 5756
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5757
                        localctx.operator = self.match(StarRocksParser.BIT_SHIFT_RIGHT_LOGICAL)
                        self.state = 5758
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 5763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,672,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)

        def DOT_IDENTIFIER(self):
            return self.getToken(StarRocksParser.DOT_IDENTIFIER, 0)
        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class OdbcFunctionCallExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_BRACE(self):
            return self.getToken(StarRocksParser.LEFT_BRACE, 0)
        def FN(self):
            return self.getToken(StarRocksParser.FN, 0)
        def functionCall(self):
            return self.getTypedRuleContext(StarRocksParser.FunctionCallContext,0)

        def RIGHT_BRACE(self):
            return self.getToken(StarRocksParser.RIGHT_BRACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOdbcFunctionCallExpression" ):
                listener.enterOdbcFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOdbcFunctionCallExpression" ):
                listener.exitOdbcFunctionCallExpression(self)


    class MatchExprContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.left = None # PrimaryExpressionContext
            self.right = None # PrimaryExpressionContext
            self.copyFrom(ctx)

        def MATCH(self):
            return self.getToken(StarRocksParser.MATCH, 0)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,i)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpr" ):
                listener.enterMatchExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpr" ):
                listener.exitMatchExpr(self)


    class ColumnRefContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnReference(self):
            return self.getTypedRuleContext(StarRocksParser.ColumnReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRef" ):
                listener.enterColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRef" ):
                listener.exitColumnRef(self)


    class ConvertContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(StarRocksParser.CONVERT, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)

        def COMMA(self):
            return self.getToken(StarRocksParser.COMMA, 0)
        def type_(self):
            return self.getTypedRuleContext(StarRocksParser.TypeContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvert" ):
                listener.enterConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvert" ):
                listener.exitConvert(self)


    class CollectionSubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_BRACKET(self):
            return self.getToken(StarRocksParser.LEFT_BRACKET, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(StarRocksParser.RIGHT_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(StarRocksParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionSubscript" ):
                listener.enterCollectionSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionSubscript" ):
                listener.exitCollectionSubscript(self)


    class LiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literalExpression(self):
            return self.getTypedRuleContext(StarRocksParser.LiteralExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(StarRocksParser.CAST, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)
        def type_(self):
            return self.getTypedRuleContext(StarRocksParser.TypeContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class UserVariableExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userVariable(self):
            return self.getTypedRuleContext(StarRocksParser.UserVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariableExpression" ):
                listener.enterUserVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariableExpression" ):
                listener.exitUserVariableExpression(self)


    class FunctionCallExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(StarRocksParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpression" ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpression" ):
                listener.exitFunctionCallExpression(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(StarRocksParser.CASE, 0)
        def END(self):
            return self.getToken(StarRocksParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(StarRocksParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ArrowExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)

        def ARROW(self):
            return self.getToken(StarRocksParser.ARROW, 0)
        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpression" ):
                listener.enterArrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpression" ):
                listener.exitArrowExpression(self)


    class SystemVariableExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def systemVariable(self):
            return self.getTypedRuleContext(StarRocksParser.SystemVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemVariableExpression" ):
                listener.enterSystemVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemVariableExpression" ):
                listener.exitSystemVariableExpression(self)


    class ConcatContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.left = None # PrimaryExpressionContext
            self.right = None # PrimaryExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(StarRocksParser.CONCAT, 0)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(StarRocksParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class LambdaFunctionExprContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARROW(self):
            return self.getToken(StarRocksParser.ARROW, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpr" ):
                listener.enterLambdaFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpr" ):
                listener.exitLambdaFunctionExpr(self)


    class DictionaryGetExprContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DICTIONARY_GET(self):
            return self.getToken(StarRocksParser.DICTIONARY_GET, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryGetExpr" ):
                listener.enterDictionaryGetExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryGetExpr" ):
                listener.exitDictionaryGetExpr(self)


    class CollateContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)

        def COLLATE(self):
            return self.getToken(StarRocksParser.COLLATE, 0)
        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate" ):
                listener.enterCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate" ):
                listener.exitCollate(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_BRACKET(self):
            return self.getToken(StarRocksParser.LEFT_BRACKET, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(StarRocksParser.RIGHT_BRACKET, 0)
        def arrayType(self):
            return self.getTypedRuleContext(StarRocksParser.ArrayTypeContext,0)

        def expressionList(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)


    class MapConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mapType(self):
            return self.getTypedRuleContext(StarRocksParser.MapTypeContext,0)

        def LEFT_BRACE(self):
            return self.getToken(StarRocksParser.LEFT_BRACE, 0)
        def RIGHT_BRACE(self):
            return self.getToken(StarRocksParser.RIGHT_BRACE, 0)
        def mapExpressionList(self):
            return self.getTypedRuleContext(StarRocksParser.MapExpressionListContext,0)

        def MAP(self):
            return self.getToken(StarRocksParser.MAP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapConstructor" ):
                listener.enterMapConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapConstructor" ):
                listener.exitMapConstructor(self)


    class ArraySliceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.start = None # Token
            self.end = None # Token
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)

        def LEFT_BRACKET(self):
            return self.getToken(StarRocksParser.LEFT_BRACKET, 0)
        def COLON(self):
            return self.getToken(StarRocksParser.COLON, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(StarRocksParser.RIGHT_BRACKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySlice" ):
                listener.enterArraySlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySlice" ):
                listener.exitArraySlice(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def queryRelation(self):
            return self.getTypedRuleContext(StarRocksParser.QueryRelationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(StarRocksParser.CASE, 0)
        def END(self):
            return self.getToken(StarRocksParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(StarRocksParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class ArithmeticUnaryContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.PrimaryExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)

        def MINUS_SYMBOL(self):
            return self.getToken(StarRocksParser.MINUS_SYMBOL, 0)
        def PLUS_SYMBOL(self):
            return self.getToken(StarRocksParser.PLUS_SYMBOL, 0)
        def BITNOT(self):
            return self.getToken(StarRocksParser.BITNOT, 0)
        def LOGICAL_NOT(self):
            return self.getToken(StarRocksParser.LOGICAL_NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = StarRocksParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 724
        self.enterRecursionRule(localctx, 724, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,683,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.UserVariableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5765
                self.userVariable()
                pass

            elif la_ == 2:
                localctx = StarRocksParser.SystemVariableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5766
                self.systemVariable()
                pass

            elif la_ == 3:
                localctx = StarRocksParser.DictionaryGetExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5767
                self.match(StarRocksParser.DICTIONARY_GET)
                self.state = 5768
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5769
                self.expressionList()
                self.state = 5770
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = StarRocksParser.FunctionCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5772
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = StarRocksParser.OdbcFunctionCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5773
                self.match(StarRocksParser.LEFT_BRACE)
                self.state = 5774
                self.match(StarRocksParser.FN)
                self.state = 5775
                self.functionCall()
                self.state = 5776
                self.match(StarRocksParser.RIGHT_BRACE)
                pass

            elif la_ == 6:
                localctx = StarRocksParser.LiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5778
                self.literalExpression()
                pass

            elif la_ == 7:
                localctx = StarRocksParser.ColumnRefContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5779
                self.columnReference()
                pass

            elif la_ == 8:
                localctx = StarRocksParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5780
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & 4099) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5781
                self.primaryExpression(18)
                pass

            elif la_ == 9:
                localctx = StarRocksParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5782
                localctx.operator = self.match(StarRocksParser.LOGICAL_NOT)
                self.state = 5783
                self.primaryExpression(17)
                pass

            elif la_ == 10:
                localctx = StarRocksParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5784
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5785
                self.expression(0)
                self.state = 5786
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                localctx = StarRocksParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5788
                self.match(StarRocksParser.EXISTS)
                self.state = 5789
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5790
                self.queryRelation()
                self.state = 5791
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = StarRocksParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5793
                self.subquery()
                pass

            elif la_ == 13:
                localctx = StarRocksParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5794
                self.match(StarRocksParser.CAST)
                self.state = 5795
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5796
                self.expression(0)
                self.state = 5797
                self.match(StarRocksParser.AS)
                self.state = 5798
                self.type_()
                self.state = 5799
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                localctx = StarRocksParser.ConvertContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5801
                self.match(StarRocksParser.CONVERT)
                self.state = 5802
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5803
                self.expression(0)
                self.state = 5804
                self.match(StarRocksParser.COMMA)
                self.state = 5805
                self.type_()
                self.state = 5806
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 15:
                localctx = StarRocksParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5808
                self.match(StarRocksParser.CASE)
                self.state = 5809
                localctx.caseExpr = self.expression(0)
                self.state = 5811 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5810
                    self.whenClause()
                    self.state = 5813 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==443):
                        break

                self.state = 5817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 5815
                    self.match(StarRocksParser.ELSE)
                    self.state = 5816
                    localctx.elseExpression = self.expression(0)


                self.state = 5819
                self.match(StarRocksParser.END)
                pass

            elif la_ == 16:
                localctx = StarRocksParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5821
                self.match(StarRocksParser.CASE)
                self.state = 5823 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5822
                    self.whenClause()
                    self.state = 5825 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==443):
                        break

                self.state = 5829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 5827
                    self.match(StarRocksParser.ELSE)
                    self.state = 5828
                    localctx.elseExpression = self.expression(0)


                self.state = 5831
                self.match(StarRocksParser.END)
                pass

            elif la_ == 17:
                localctx = StarRocksParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 5833
                    self.arrayType()


                self.state = 5836
                self.match(StarRocksParser.LEFT_BRACKET)
                self.state = 5838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5837
                    self.expressionList()


                self.state = 5840
                self.match(StarRocksParser.RIGHT_BRACKET)
                pass

            elif la_ == 18:
                localctx = StarRocksParser.MapConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5841
                self.mapType()
                self.state = 5842
                self.match(StarRocksParser.LEFT_BRACE)
                self.state = 5844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5843
                    self.mapExpressionList()


                self.state = 5846
                self.match(StarRocksParser.RIGHT_BRACE)
                pass

            elif la_ == 19:
                localctx = StarRocksParser.MapConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5848
                self.match(StarRocksParser.MAP)
                self.state = 5849
                self.match(StarRocksParser.LEFT_BRACE)
                self.state = 5851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5850
                    self.mapExpressionList()


                self.state = 5853
                self.match(StarRocksParser.RIGHT_BRACE)
                pass

            elif la_ == 20:
                localctx = StarRocksParser.LambdaFunctionExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                    self.state = 5854
                    self.identifier()
                    pass
                elif token in [498]:
                    self.state = 5855
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5858
                self.match(StarRocksParser.ARROW)
                self.state = 5859
                self.expression(0)
                pass

            elif la_ == 21:
                localctx = StarRocksParser.LambdaFunctionExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5861
                self.identifierList()
                self.state = 5862
                self.match(StarRocksParser.ARROW)
                self.state = 5863
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5864
                    self.expressionList()


                self.state = 5867
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,690,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5910
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
                    if la_ == 1:
                        localctx = StarRocksParser.ConcatContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5871
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 5872
                        self.match(StarRocksParser.CONCAT)
                        self.state = 5873
                        localctx.right = self.primaryExpression(20)
                        pass

                    elif la_ == 2:
                        localctx = StarRocksParser.MatchExprContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5874
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==258:
                            self.state = 5875
                            self.match(StarRocksParser.NOT)


                        self.state = 5878
                        self.match(StarRocksParser.MATCH)
                        self.state = 5879
                        localctx.right = self.primaryExpression(2)
                        pass

                    elif la_ == 3:
                        localctx = StarRocksParser.CollateContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5880
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 5881
                        self.match(StarRocksParser.COLLATE)
                        self.state = 5884
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                            self.state = 5882
                            self.identifier()
                            pass
                        elif token in [484, 485]:
                            self.state = 5883
                            self.string_()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        localctx = StarRocksParser.DereferenceContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5886
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 5890
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [491]:
                            self.state = 5887
                            self.match(StarRocksParser.DOT_IDENTIFIER)
                            pass
                        elif token in [501]:
                            self.state = 5888
                            self.match(StarRocksParser.DOT)
                            self.state = 5889
                            localctx.fieldName = self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 5:
                        localctx = StarRocksParser.CollectionSubscriptContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5892
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5893
                        self.match(StarRocksParser.LEFT_BRACKET)
                        self.state = 5894
                        localctx.index = self.valueExpression(0)
                        self.state = 5895
                        self.match(StarRocksParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = StarRocksParser.ArraySliceContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5897
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5898
                        self.match(StarRocksParser.LEFT_BRACKET)
                        self.state = 5900
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==481:
                            self.state = 5899
                            localctx.start = self.match(StarRocksParser.INTEGER_VALUE)


                        self.state = 5902
                        self.match(StarRocksParser.COLON)
                        self.state = 5904
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==481:
                            self.state = 5903
                            localctx.end = self.match(StarRocksParser.INTEGER_VALUE)


                        self.state = 5906
                        self.match(StarRocksParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 7:
                        localctx = StarRocksParser.ArrowExpressionContext(self, StarRocksParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 5907
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5908
                        self.match(StarRocksParser.ARROW)
                        self.state = 5909
                        self.string_()
                        pass

             
                self.state = 5914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,690,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_literalExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BinaryLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary(self):
            return self.getTypedRuleContext(StarRocksParser.BinaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)


    class NullLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL_(self):
            return self.getToken(StarRocksParser.NULL_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class ParameterContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARAMETER(self):
            return self.getToken(StarRocksParser.PARAMETER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)


    class DateLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)

        def DATE(self):
            return self.getToken(StarRocksParser.DATE, 0)
        def DATETIME(self):
            return self.getToken(StarRocksParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)


    class BooleanLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(StarRocksParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class NumericLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(StarRocksParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class IntervalLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(StarRocksParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class UnitBoundaryLiteralContext(LiteralExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.LiteralExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unitBoundary(self):
            return self.getTypedRuleContext(StarRocksParser.UnitBoundaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitBoundaryLiteral" ):
                listener.enterUnitBoundaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitBoundaryLiteral" ):
                listener.exitUnitBoundaryLiteral(self)



    def literalExpression(self):

        localctx = StarRocksParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_literalExpression)
        self._la = 0 # Token type
        try:
            self.state = 5925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [259]:
                localctx = StarRocksParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5915
                self.match(StarRocksParser.NULL_)
                pass
            elif token in [137, 411]:
                localctx = StarRocksParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5916
                self.booleanValue()
                pass
            elif token in [481, 482, 483]:
                localctx = StarRocksParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5917
                self.number()
                pass
            elif token in [90, 91]:
                localctx = StarRocksParser.DateLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5918
                _la = self._input.LA(1)
                if not(_la==90 or _la==91):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5919
                self.string_()
                pass
            elif token in [484, 485]:
                localctx = StarRocksParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5920
                self.string_()
                pass
            elif token in [197]:
                localctx = StarRocksParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5921
                self.interval()
                pass
            elif token in [49, 145]:
                localctx = StarRocksParser.UnitBoundaryLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5922
                self.unitBoundary()
                pass
            elif token in [486, 487]:
                localctx = StarRocksParser.BinaryLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5923
                self.binary()
                pass
            elif token in [278]:
                localctx = StarRocksParser.ParameterContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5924
                self.match(StarRocksParser.PARAMETER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggregationFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregationFunction(self):
            return self.getTypedRuleContext(StarRocksParser.AggregationFunctionContext,0)

        def over(self):
            return self.getTypedRuleContext(StarRocksParser.OverContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationFunctionCall" ):
                listener.enterAggregationFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationFunctionCall" ):
                listener.exitAggregationFunctionCall(self)


    class ExtractContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(StarRocksParser.EXTRACT, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(StarRocksParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(StarRocksParser.ValueExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class SpecialFunctionContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specialFunctionExpression(self):
            return self.getTypedRuleContext(StarRocksParser.SpecialFunctionExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialFunction" ):
                listener.enterSpecialFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialFunction" ):
                listener.exitSpecialFunction(self)


    class SimpleFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)

        def over(self):
            return self.getTypedRuleContext(StarRocksParser.OverContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)


    class SpecialDateTimeContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specialDateTimeExpression(self):
            return self.getTypedRuleContext(StarRocksParser.SpecialDateTimeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTime" ):
                listener.enterSpecialDateTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTime" ):
                listener.exitSpecialDateTime(self)


    class WindowFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def windowFunction(self):
            return self.getTypedRuleContext(StarRocksParser.WindowFunctionContext,0)

        def over(self):
            return self.getTypedRuleContext(StarRocksParser.OverContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFunctionCall" ):
                listener.enterWindowFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFunctionCall" ):
                listener.exitWindowFunctionCall(self)


    class InformationFunctionContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def informationFunctionExpression(self):
            return self.getTypedRuleContext(StarRocksParser.InformationFunctionExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInformationFunction" ):
                listener.enterInformationFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInformationFunction" ):
                listener.exitInformationFunction(self)


    class GroupingOperationContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(StarRocksParser.GROUPING, 0)
        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)
        def GROUPING_ID(self):
            return self.getToken(StarRocksParser.GROUPING_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)



    def functionCall(self):

        localctx = StarRocksParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 5986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.ExtractContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5927
                self.match(StarRocksParser.EXTRACT)
                self.state = 5928
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5929
                self.identifier()
                self.state = 5930
                self.match(StarRocksParser.FROM)
                self.state = 5931
                self.valueExpression(0)
                self.state = 5932
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = StarRocksParser.GroupingOperationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5934
                self.match(StarRocksParser.GROUPING)
                self.state = 5935
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5936
                    self.expression(0)
                    self.state = 5941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 5937
                        self.match(StarRocksParser.COMMA)
                        self.state = 5938
                        self.expression(0)
                        self.state = 5943
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5946
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = StarRocksParser.GroupingOperationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5947
                self.match(StarRocksParser.GROUPING_ID)
                self.state = 5948
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5949
                    self.expression(0)
                    self.state = 5954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 5950
                        self.match(StarRocksParser.COMMA)
                        self.state = 5951
                        self.expression(0)
                        self.state = 5956
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5959
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = StarRocksParser.InformationFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5960
                self.informationFunctionExpression()
                pass

            elif la_ == 5:
                localctx = StarRocksParser.SpecialDateTimeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5961
                self.specialDateTimeExpression()
                pass

            elif la_ == 6:
                localctx = StarRocksParser.SpecialFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5962
                self.specialFunctionExpression()
                pass

            elif la_ == 7:
                localctx = StarRocksParser.AggregationFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5963
                self.aggregationFunction()
                self.state = 5965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
                if la_ == 1:
                    self.state = 5964
                    self.over()


                pass

            elif la_ == 8:
                localctx = StarRocksParser.WindowFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5967
                self.windowFunction()
                self.state = 5968
                self.over()
                pass

            elif la_ == 9:
                localctx = StarRocksParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5970
                self.qualifiedName()
                self.state = 5971
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 5972
                    self.expression(0)
                    self.state = 5977
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 5973
                        self.match(StarRocksParser.COMMA)
                        self.state = 5974
                        self.expression(0)
                        self.state = 5979
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5982
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 5984
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
                if la_ == 1:
                    self.state = 5983
                    self.over()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(StarRocksParser.AVG, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(StarRocksParser.SetQuantifierContext,0)


        def COUNT(self):
            return self.getToken(StarRocksParser.COUNT, 0)

        def ASTERISK_SYMBOL(self):
            return self.getToken(StarRocksParser.ASTERISK_SYMBOL, 0)

        def bracketHint(self):
            return self.getTypedRuleContext(StarRocksParser.BracketHintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def MAX(self):
            return self.getToken(StarRocksParser.MAX, 0)

        def MIN(self):
            return self.getToken(StarRocksParser.MIN, 0)

        def SUM(self):
            return self.getToken(StarRocksParser.SUM, 0)

        def ARRAY_AGG(self):
            return self.getToken(StarRocksParser.ARRAY_AGG, 0)

        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def ARRAY_AGG_DISTINCT(self):
            return self.getToken(StarRocksParser.ARRAY_AGG_DISTINCT, 0)

        def GROUP_CONCAT(self):
            return self.getToken(StarRocksParser.GROUP_CONCAT, 0)

        def SEPARATOR(self):
            return self.getToken(StarRocksParser.SEPARATOR, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_aggregationFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationFunction" ):
                listener.enterAggregationFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationFunction" ):
                listener.exitAggregationFunction(self)




    def aggregationFunction(self):

        localctx = StarRocksParser.AggregationFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_aggregationFunction)
        self._la = 0 # Token type
        try:
            self.state = 6113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5988
                self.match(StarRocksParser.AVG)
                self.state = 5989
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 5990
                    self.setQuantifier()


                self.state = 5993
                self.expression(0)
                self.state = 5994
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5996
                self.match(StarRocksParser.COUNT)
                self.state = 5997
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 5999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==465:
                    self.state = 5998
                    self.match(StarRocksParser.ASTERISK_SYMBOL)


                self.state = 6001
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6002
                self.match(StarRocksParser.COUNT)
                self.state = 6003
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 6004
                    self.setQuantifier()
                    self.state = 6006
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,703,self._ctx)
                    if la_ == 1:
                        self.state = 6005
                        self.bracketHint()




                self.state = 6018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6010
                    self.expression(0)
                    self.state = 6015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6011
                        self.match(StarRocksParser.COMMA)
                        self.state = 6012
                        self.expression(0)
                        self.state = 6017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6020
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6021
                self.match(StarRocksParser.MAX)
                self.state = 6022
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 6023
                    self.setQuantifier()


                self.state = 6026
                self.expression(0)
                self.state = 6027
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6029
                self.match(StarRocksParser.MIN)
                self.state = 6030
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 6031
                    self.setQuantifier()


                self.state = 6034
                self.expression(0)
                self.state = 6035
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6037
                self.match(StarRocksParser.SUM)
                self.state = 6038
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 6039
                    self.setQuantifier()


                self.state = 6042
                self.expression(0)
                self.state = 6043
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6045
                self.match(StarRocksParser.ARRAY_AGG)
                self.state = 6046
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 6047
                    self.setQuantifier()


                self.state = 6050
                self.expression(0)
                self.state = 6061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 6051
                    self.match(StarRocksParser.ORDER)
                    self.state = 6052
                    self.match(StarRocksParser.BY)
                    self.state = 6053
                    self.sortItem()
                    self.state = 6058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6054
                        self.match(StarRocksParser.COMMA)
                        self.state = 6055
                        self.sortItem()
                        self.state = 6060
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6063
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6065
                self.match(StarRocksParser.ARRAY_AGG_DISTINCT)
                self.state = 6066
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6067
                self.expression(0)
                self.state = 6078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 6068
                    self.match(StarRocksParser.ORDER)
                    self.state = 6069
                    self.match(StarRocksParser.BY)
                    self.state = 6070
                    self.sortItem()
                    self.state = 6075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6071
                        self.match(StarRocksParser.COMMA)
                        self.state = 6072
                        self.sortItem()
                        self.state = 6077
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6080
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6082
                self.match(StarRocksParser.GROUP_CONCAT)
                self.state = 6083
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==110:
                    self.state = 6084
                    self.setQuantifier()


                self.state = 6087
                self.expression(0)
                self.state = 6092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 6088
                    self.match(StarRocksParser.COMMA)
                    self.state = 6089
                    self.expression(0)
                    self.state = 6094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 6095
                    self.match(StarRocksParser.ORDER)
                    self.state = 6096
                    self.match(StarRocksParser.BY)
                    self.state = 6097
                    self.sortItem()
                    self.state = 6102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6098
                        self.match(StarRocksParser.COMMA)
                        self.state = 6099
                        self.sortItem()
                        self.state = 6104
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==363:
                    self.state = 6107
                    self.match(StarRocksParser.SEPARATOR)
                    self.state = 6108
                    self.expression(0)


                self.state = 6111
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(StarRocksParser.AT, 0)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_userVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariable" ):
                listener.enterUserVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariable" ):
                listener.exitUserVariable(self)




    def userVariable(self):

        localctx = StarRocksParser.UserVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_userVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6115
            self.match(StarRocksParser.AT)
            self.state = 6116
            self.identifierOrString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.AT)
            else:
                return self.getToken(StarRocksParser.AT, i)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def varType(self):
            return self.getTypedRuleContext(StarRocksParser.VarTypeContext,0)


        def DOT(self):
            return self.getToken(StarRocksParser.DOT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_systemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemVariable" ):
                listener.enterSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemVariable" ):
                listener.exitSystemVariable(self)




    def systemVariable(self):

        localctx = StarRocksParser.SystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_systemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6118
            self.match(StarRocksParser.AT)
            self.state = 6119
            self.match(StarRocksParser.AT)
            self.state = 6123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
            if la_ == 1:
                self.state = 6120
                self.varType()
                self.state = 6121
                self.match(StarRocksParser.DOT)


            self.state = 6125
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_columnReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)




    def columnReference(self):

        localctx = StarRocksParser.ColumnReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_columnReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6127
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InformationFunctionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def DATABASE(self):
            return self.getToken(StarRocksParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(StarRocksParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def CURRENT_USER(self):
            return self.getToken(StarRocksParser.CURRENT_USER, 0)

        def CURRENT_ROLE(self):
            return self.getToken(StarRocksParser.CURRENT_ROLE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_informationFunctionExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInformationFunctionExpression" ):
                listener.enterInformationFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInformationFunctionExpression" ):
                listener.exitInformationFunctionExpression(self)




    def informationFunctionExpression(self):

        localctx = StarRocksParser.InformationFunctionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_informationFunctionExpression)
        try:
            self.state = 6151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6129
                localctx.name = self.match(StarRocksParser.CATALOG)
                self.state = 6130
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6131
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6132
                localctx.name = self.match(StarRocksParser.DATABASE)
                self.state = 6133
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6134
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6135
                localctx.name = self.match(StarRocksParser.SCHEMA)
                self.state = 6136
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6137
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6138
                localctx.name = self.match(StarRocksParser.USER)
                self.state = 6139
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6140
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6141
                localctx.name = self.match(StarRocksParser.CURRENT_USER)
                self.state = 6144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
                if la_ == 1:
                    self.state = 6142
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6143
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6146
                localctx.name = self.match(StarRocksParser.CURRENT_ROLE)
                self.state = 6149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
                if la_ == 1:
                    self.state = 6147
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6148
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialDateTimeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def CURRENT_DATE(self):
            return self.getToken(StarRocksParser.CURRENT_DATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def CURRENT_TIME(self):
            return self.getToken(StarRocksParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(StarRocksParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(StarRocksParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(StarRocksParser.LOCALTIMESTAMP, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_specialDateTimeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeExpression" ):
                listener.enterSpecialDateTimeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeExpression" ):
                listener.exitSpecialDateTimeExpression(self)




    def specialDateTimeExpression(self):

        localctx = StarRocksParser.SpecialDateTimeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_specialDateTimeExpression)
        try:
            self.state = 6178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6153
                localctx.name = self.match(StarRocksParser.CURRENT_DATE)
                self.state = 6156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,725,self._ctx)
                if la_ == 1:
                    self.state = 6154
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6155
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6158
                localctx.name = self.match(StarRocksParser.CURRENT_TIME)
                self.state = 6161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,726,self._ctx)
                if la_ == 1:
                    self.state = 6159
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6160
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6163
                localctx.name = self.match(StarRocksParser.CURRENT_TIMESTAMP)
                self.state = 6166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
                if la_ == 1:
                    self.state = 6164
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6165
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6168
                localctx.name = self.match(StarRocksParser.LOCALTIME)
                self.state = 6171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,728,self._ctx)
                if la_ == 1:
                    self.state = 6169
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6170
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6173
                localctx.name = self.match(StarRocksParser.LOCALTIMESTAMP)
                self.state = 6176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,729,self._ctx)
                if la_ == 1:
                    self.state = 6174
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6175
                    self.match(StarRocksParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFunctionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(StarRocksParser.CHAR, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def DAY(self):
            return self.getToken(StarRocksParser.DAY, 0)

        def HOUR(self):
            return self.getToken(StarRocksParser.HOUR, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def LEFT(self):
            return self.getToken(StarRocksParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(StarRocksParser.LIKE, 0)

        def MINUTE(self):
            return self.getToken(StarRocksParser.MINUTE, 0)

        def MOD(self):
            return self.getToken(StarRocksParser.MOD, 0)

        def MONTH(self):
            return self.getToken(StarRocksParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(StarRocksParser.QUARTER, 0)

        def REGEXP(self):
            return self.getToken(StarRocksParser.REGEXP, 0)

        def REPLACE(self):
            return self.getToken(StarRocksParser.REPLACE, 0)

        def RIGHT(self):
            return self.getToken(StarRocksParser.RIGHT, 0)

        def RLIKE(self):
            return self.getToken(StarRocksParser.RLIKE, 0)

        def SECOND(self):
            return self.getToken(StarRocksParser.SECOND, 0)

        def TIMESTAMPADD(self):
            return self.getToken(StarRocksParser.TIMESTAMPADD, 0)

        def unitIdentifier(self):
            return self.getTypedRuleContext(StarRocksParser.UnitIdentifierContext,0)


        def TIMESTAMPDIFF(self):
            return self.getToken(StarRocksParser.TIMESTAMPDIFF, 0)

        def YEAR(self):
            return self.getToken(StarRocksParser.YEAR, 0)

        def PASSWORD(self):
            return self.getToken(StarRocksParser.PASSWORD, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def FLOOR(self):
            return self.getToken(StarRocksParser.FLOOR, 0)

        def CEIL(self):
            return self.getToken(StarRocksParser.CEIL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_specialFunctionExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialFunctionExpression" ):
                listener.enterSpecialFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialFunctionExpression" ):
                listener.exitSpecialFunctionExpression(self)




    def specialFunctionExpression(self):

        localctx = StarRocksParser.SpecialFunctionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_specialFunctionExpression)
        self._la = 0 # Token type
        try:
            self.state = 6321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6180
                self.match(StarRocksParser.CHAR)
                self.state = 6181
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6182
                self.expression(0)
                self.state = 6183
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6185
                self.match(StarRocksParser.DAY)
                self.state = 6186
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6187
                self.expression(0)
                self.state = 6188
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6190
                self.match(StarRocksParser.HOUR)
                self.state = 6191
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6192
                self.expression(0)
                self.state = 6193
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6195
                self.match(StarRocksParser.IF)
                self.state = 6196
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6197
                    self.expression(0)
                    self.state = 6202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6198
                        self.match(StarRocksParser.COMMA)
                        self.state = 6199
                        self.expression(0)
                        self.state = 6204
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6207
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6208
                self.match(StarRocksParser.LEFT)
                self.state = 6209
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6210
                self.expression(0)
                self.state = 6211
                self.match(StarRocksParser.COMMA)
                self.state = 6212
                self.expression(0)
                self.state = 6213
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6215
                self.match(StarRocksParser.LIKE)
                self.state = 6216
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6217
                self.expression(0)
                self.state = 6218
                self.match(StarRocksParser.COMMA)
                self.state = 6219
                self.expression(0)
                self.state = 6220
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6222
                self.match(StarRocksParser.MINUTE)
                self.state = 6223
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6224
                self.expression(0)
                self.state = 6225
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6227
                self.match(StarRocksParser.MOD)
                self.state = 6228
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6229
                self.expression(0)
                self.state = 6230
                self.match(StarRocksParser.COMMA)
                self.state = 6231
                self.expression(0)
                self.state = 6232
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6234
                self.match(StarRocksParser.MONTH)
                self.state = 6235
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6236
                self.expression(0)
                self.state = 6237
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6239
                self.match(StarRocksParser.QUARTER)
                self.state = 6240
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6241
                self.expression(0)
                self.state = 6242
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [322]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6244
                self.match(StarRocksParser.REGEXP)
                self.state = 6245
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6246
                self.expression(0)
                self.state = 6247
                self.match(StarRocksParser.COMMA)
                self.state = 6248
                self.expression(0)
                self.state = 6249
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [328]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6251
                self.match(StarRocksParser.REPLACE)
                self.state = 6252
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6253
                    self.expression(0)
                    self.state = 6258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6254
                        self.match(StarRocksParser.COMMA)
                        self.state = 6255
                        self.expression(0)
                        self.state = 6260
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6263
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [341]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6264
                self.match(StarRocksParser.RIGHT)
                self.state = 6265
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6266
                self.expression(0)
                self.state = 6267
                self.match(StarRocksParser.COMMA)
                self.state = 6268
                self.expression(0)
                self.state = 6269
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [342]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6271
                self.match(StarRocksParser.RLIKE)
                self.state = 6272
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6273
                self.expression(0)
                self.state = 6274
                self.match(StarRocksParser.COMMA)
                self.state = 6275
                self.expression(0)
                self.state = 6276
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [359]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6278
                self.match(StarRocksParser.SECOND)
                self.state = 6279
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6280
                self.expression(0)
                self.state = 6281
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [403]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6283
                self.match(StarRocksParser.TIMESTAMPADD)
                self.state = 6284
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6285
                self.unitIdentifier()
                self.state = 6286
                self.match(StarRocksParser.COMMA)
                self.state = 6287
                self.expression(0)
                self.state = 6288
                self.match(StarRocksParser.COMMA)
                self.state = 6289
                self.expression(0)
                self.state = 6290
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [404]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6292
                self.match(StarRocksParser.TIMESTAMPDIFF)
                self.state = 6293
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6294
                self.unitIdentifier()
                self.state = 6295
                self.match(StarRocksParser.COMMA)
                self.state = 6296
                self.expression(0)
                self.state = 6297
                self.match(StarRocksParser.COMMA)
                self.state = 6298
                self.expression(0)
                self.state = 6299
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [449]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6301
                self.match(StarRocksParser.YEAR)
                self.state = 6302
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6303
                self.expression(0)
                self.state = 6304
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6306
                self.match(StarRocksParser.PASSWORD)
                self.state = 6307
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6308
                self.string_()
                self.state = 6309
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6311
                self.match(StarRocksParser.FLOOR)
                self.state = 6312
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6313
                self.expression(0)
                self.state = 6314
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6316
                self.match(StarRocksParser.CEIL)
                self.state = 6317
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6318
                self.expression(0)
                self.state = 6319
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def ROW_NUMBER(self):
            return self.getToken(StarRocksParser.ROW_NUMBER, 0)

        def RANK(self):
            return self.getToken(StarRocksParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(StarRocksParser.DENSE_RANK, 0)

        def CUME_DIST(self):
            return self.getToken(StarRocksParser.CUME_DIST, 0)

        def PERCENT_RANK(self):
            return self.getToken(StarRocksParser.PERCENT_RANK, 0)

        def NTILE(self):
            return self.getToken(StarRocksParser.NTILE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def LEAD(self):
            return self.getToken(StarRocksParser.LEAD, 0)

        def ignoreNulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IgnoreNullsContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IgnoreNullsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def LAG(self):
            return self.getToken(StarRocksParser.LAG, 0)

        def FIRST_VALUE(self):
            return self.getToken(StarRocksParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(StarRocksParser.LAST_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_windowFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFunction" ):
                listener.enterWindowFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFunction" ):
                listener.exitWindowFunction(self)




    def windowFunction(self):

        localctx = StarRocksParser.WindowFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_windowFunction)
        self._la = 0 # Token type
        try:
            self.state = 6420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [350]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6323
                localctx.name = self.match(StarRocksParser.ROW_NUMBER)
                self.state = 6324
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6325
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6326
                localctx.name = self.match(StarRocksParser.RANK)
                self.state = 6327
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6328
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6329
                localctx.name = self.match(StarRocksParser.DENSE_RANK)
                self.state = 6330
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6331
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6332
                localctx.name = self.match(StarRocksParser.CUME_DIST)
                self.state = 6333
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6334
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [285]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6335
                localctx.name = self.match(StarRocksParser.PERCENT_RANK)
                self.state = 6336
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6337
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6338
                localctx.name = self.match(StarRocksParser.NTILE)
                self.state = 6339
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6340
                    self.expression(0)


                self.state = 6343
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6344
                localctx.name = self.match(StarRocksParser.LEAD)
                self.state = 6345
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6346
                    self.expression(0)
                    self.state = 6348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==180:
                        self.state = 6347
                        self.ignoreNulls()


                    self.state = 6354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6350
                        self.match(StarRocksParser.COMMA)
                        self.state = 6351
                        self.expression(0)
                        self.state = 6356
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6359
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 6360
                    self.ignoreNulls()


                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6363
                localctx.name = self.match(StarRocksParser.LAG)
                self.state = 6364
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6365
                    self.expression(0)
                    self.state = 6367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==180:
                        self.state = 6366
                        self.ignoreNulls()


                    self.state = 6373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6369
                        self.match(StarRocksParser.COMMA)
                        self.state = 6370
                        self.expression(0)
                        self.state = 6375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6378
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 6379
                    self.ignoreNulls()


                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6382
                localctx.name = self.match(StarRocksParser.FIRST_VALUE)
                self.state = 6383
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6384
                    self.expression(0)
                    self.state = 6386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==180:
                        self.state = 6385
                        self.ignoreNulls()


                    self.state = 6392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6388
                        self.match(StarRocksParser.COMMA)
                        self.state = 6389
                        self.expression(0)
                        self.state = 6394
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6397
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 6398
                    self.ignoreNulls()


                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6401
                localctx.name = self.match(StarRocksParser.LAST_VALUE)
                self.state = 6402
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2904826438484365076) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201319442414290935) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2713408823206277115) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -457397510666601) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714941194753) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397868013944853) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265449971781) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 45744079683772479) != 0):
                    self.state = 6403
                    self.expression(0)
                    self.state = 6405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==180:
                        self.state = 6404
                        self.ignoreNulls()


                    self.state = 6411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6407
                        self.match(StarRocksParser.COMMA)
                        self.state = 6408
                        self.expression(0)
                        self.state = 6413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6416
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 6417
                    self.ignoreNulls()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(StarRocksParser.WHEN, 0)

        def THEN(self):
            return self.getToken(StarRocksParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = StarRocksParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6422
            self.match(StarRocksParser.WHEN)
            self.state = 6423
            localctx.condition = self.expression(0)
            self.state = 6424
            self.match(StarRocksParser.THEN)
            self.state = 6425
            localctx.result = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def OVER(self):
            return self.getToken(StarRocksParser.OVER, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.BY)
            else:
                return self.getToken(StarRocksParser.BY, i)

        def ORDER(self):
            return self.getToken(StarRocksParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SortItemContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(StarRocksParser.WindowFrameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ExpressionContext,i)


        def bracketHint(self):
            return self.getTypedRuleContext(StarRocksParser.BracketHintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)




    def over(self):

        localctx = StarRocksParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_over)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6427
            self.match(StarRocksParser.OVER)
            self.state = 6428
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==502:
                self.state = 6430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==502:
                    self.state = 6429
                    self.bracketHint()


                self.state = 6432
                self.match(StarRocksParser.PARTITION)
                self.state = 6433
                self.match(StarRocksParser.BY)
                self.state = 6434
                localctx._expression = self.expression(0)
                localctx.partition.append(localctx._expression)
                self.state = 6439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 6435
                    self.match(StarRocksParser.COMMA)
                    self.state = 6436
                    localctx._expression = self.expression(0)
                    localctx.partition.append(localctx._expression)
                    self.state = 6441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 6444
                self.match(StarRocksParser.ORDER)
                self.state = 6445
                self.match(StarRocksParser.BY)
                self.state = 6446
                self.sortItem()
                self.state = 6451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==500:
                    self.state = 6447
                    self.match(StarRocksParser.COMMA)
                    self.state = 6448
                    self.sortItem()
                    self.state = 6453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==315 or _la==349:
                self.state = 6456
                self.windowFrame()


            self.state = 6459
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IgnoreNullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(StarRocksParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(StarRocksParser.NULLS, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_ignoreNulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreNulls" ):
                listener.enterIgnoreNulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreNulls" ):
                listener.exitIgnoreNulls(self)




    def ignoreNulls(self):

        localctx = StarRocksParser.IgnoreNullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_ignoreNulls)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6461
            self.match(StarRocksParser.IGNORE)
            self.state = 6462
            self.match(StarRocksParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(StarRocksParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(StarRocksParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(StarRocksParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(StarRocksParser.AND, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = StarRocksParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_windowFrame)
        try:
            self.state = 6480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6464
                localctx.frameType = self.match(StarRocksParser.RANGE)
                self.state = 6465
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6466
                localctx.frameType = self.match(StarRocksParser.ROWS)
                self.state = 6467
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6468
                localctx.frameType = self.match(StarRocksParser.RANGE)
                self.state = 6469
                self.match(StarRocksParser.BETWEEN)
                self.state = 6470
                localctx.start = self.frameBound()
                self.state = 6471
                self.match(StarRocksParser.AND)
                self.state = 6472
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6474
                localctx.frameType = self.match(StarRocksParser.ROWS)
                self.state = 6475
                self.match(StarRocksParser.BETWEEN)
                self.state = 6476
                localctx.start = self.frameBound()
                self.state = 6477
                self.match(StarRocksParser.AND)
                self.state = 6478
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(StarRocksParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(StarRocksParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(StarRocksParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(StarRocksParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(StarRocksParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(StarRocksParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(StarRocksParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)



    def frameBound(self):

        localctx = StarRocksParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 6491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6482
                self.match(StarRocksParser.UNBOUNDED)
                self.state = 6483
                localctx.boundType = self.match(StarRocksParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = StarRocksParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6484
                self.match(StarRocksParser.UNBOUNDED)
                self.state = 6485
                localctx.boundType = self.match(StarRocksParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = StarRocksParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6486
                self.match(StarRocksParser.CURRENT)
                self.state = 6487
                self.match(StarRocksParser.ROW)
                pass

            elif la_ == 4:
                localctx = StarRocksParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6488
                self.expression(0)
                self.state = 6489
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==147 or _la==295):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_tableDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableDesc" ):
                listener.enterTableDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableDesc" ):
                listener.exitTableDesc(self)




    def tableDesc(self):

        localctx = StarRocksParser.TableDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_tableDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6493
            self.qualifiedName()
            self.state = 6495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 6494
                self.partitionNames()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestoreTableDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(StarRocksParser.QualifiedNameContext,0)


        def partitionNames(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionNamesContext,0)


        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_restoreTableDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestoreTableDesc" ):
                listener.enterRestoreTableDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestoreTableDesc" ):
                listener.exitRestoreTableDesc(self)




    def restoreTableDesc(self):

        localctx = StarRocksParser.RestoreTableDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_restoreTableDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6497
            self.qualifiedName()
            self.state = 6499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279 or _la==280 or _la==396:
                self.state = 6498
                self.partitionNames()


            self.state = 6503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 6501
                self.match(StarRocksParser.AS)
                self.state = 6502
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESC(self):
            return self.getToken(StarRocksParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(StarRocksParser.DESCRIBE, 0)

        def EXPLAIN(self):
            return self.getToken(StarRocksParser.EXPLAIN, 0)

        def LOGICAL(self):
            return self.getToken(StarRocksParser.LOGICAL, 0)

        def ANALYZE(self):
            return self.getToken(StarRocksParser.ANALYZE, 0)

        def VERBOSE(self):
            return self.getToken(StarRocksParser.VERBOSE, 0)

        def COSTS(self):
            return self.getToken(StarRocksParser.COSTS, 0)

        def SCHEDULER(self):
            return self.getToken(StarRocksParser.SCHEDULER, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_explainDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainDesc" ):
                listener.enterExplainDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainDesc" ):
                listener.exitExplainDesc(self)




    def explainDesc(self):

        localctx = StarRocksParser.ExplainDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_explainDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6505
            _la = self._input.LA(1)
            if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 8388611) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==73 or _la==229 or _la==356 or _la==433:
                self.state = 6506
                _la = self._input.LA(1)
                if not(_la==10 or _la==73 or _la==229 or _la==356 or _la==433):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizerTraceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRACE(self):
            return self.getToken(StarRocksParser.TRACE, 0)

        def ALL(self):
            return self.getToken(StarRocksParser.ALL, 0)

        def LOGS(self):
            return self.getToken(StarRocksParser.LOGS, 0)

        def TIMES(self):
            return self.getToken(StarRocksParser.TIMES, 0)

        def VALUES(self):
            return self.getToken(StarRocksParser.VALUES, 0)

        def REASON(self):
            return self.getToken(StarRocksParser.REASON, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_optimizerTrace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizerTrace" ):
                listener.enterOptimizerTrace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizerTrace" ):
                listener.exitOptimizerTrace(self)




    def optimizerTrace(self):

        localctx = StarRocksParser.OptimizerTraceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_optimizerTrace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6509
            self.match(StarRocksParser.TRACE)
            self.state = 6510
            _la = self._input.LA(1)
            if not(_la==8 or _la==228 or _la==318 or _la==401 or _la==429):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2907113422670155540) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201314769469032183) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2712845667094392313) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -9464603288729961) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714943291911) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397937273438359) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265517080645) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 144585779060799) != 0):
                self.state = 6511
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def RANGE(self):
            return self.getToken(StarRocksParser.RANGE, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def rangePartitionDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.RangePartitionDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.RangePartitionDescContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def primaryExpression(self):
            return self.getTypedRuleContext(StarRocksParser.PrimaryExpressionContext,0)


        def LIST(self):
            return self.getToken(StarRocksParser.LIST, 0)

        def listPartitionDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ListPartitionDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ListPartitionDescContext,i)


        def functionCall(self):
            return self.getTypedRuleContext(StarRocksParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDesc" ):
                listener.enterPartitionDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDesc" ):
                listener.exitPartitionDesc(self)




    def partitionDesc(self):

        localctx = StarRocksParser.PartitionDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_partitionDesc)
        self._la = 0 # Token type
        try:
            self.state = 6592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6514
                self.match(StarRocksParser.PARTITION)
                self.state = 6515
                self.match(StarRocksParser.BY)
                self.state = 6516
                self.match(StarRocksParser.RANGE)
                self.state = 6517
                self.identifierList()
                self.state = 6518
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279 or _la==375:
                    self.state = 6519
                    self.rangePartitionDesc()
                    self.state = 6524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6520
                        self.match(StarRocksParser.COMMA)
                        self.state = 6521
                        self.rangePartitionDesc()
                        self.state = 6526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6529
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6531
                self.match(StarRocksParser.PARTITION)
                self.state = 6532
                self.match(StarRocksParser.BY)
                self.state = 6533
                self.match(StarRocksParser.RANGE)
                self.state = 6534
                self.primaryExpression(0)
                self.state = 6535
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279 or _la==375:
                    self.state = 6536
                    self.rangePartitionDesc()
                    self.state = 6541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6537
                        self.match(StarRocksParser.COMMA)
                        self.state = 6538
                        self.rangePartitionDesc()
                        self.state = 6543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6546
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6548
                self.match(StarRocksParser.PARTITION)
                self.state = 6549
                self.match(StarRocksParser.BY)
                self.state = 6551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==221:
                    self.state = 6550
                    self.match(StarRocksParser.LIST)


                self.state = 6553
                self.identifierList()
                self.state = 6554
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 6555
                    self.listPartitionDesc()
                    self.state = 6560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6556
                        self.match(StarRocksParser.COMMA)
                        self.state = 6557
                        self.listPartitionDesc()
                        self.state = 6562
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6565
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6567
                self.match(StarRocksParser.PARTITION)
                self.state = 6568
                self.match(StarRocksParser.BY)
                self.state = 6570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==221:
                    self.state = 6569
                    self.match(StarRocksParser.LIST)


                self.state = 6572
                self.identifierList()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6573
                self.match(StarRocksParser.PARTITION)
                self.state = 6574
                self.match(StarRocksParser.BY)
                self.state = 6575
                self.functionCall()
                self.state = 6576
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279 or _la==375:
                    self.state = 6577
                    self.rangePartitionDesc()
                    self.state = 6582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==500:
                        self.state = 6578
                        self.match(StarRocksParser.COMMA)
                        self.state = 6579
                        self.rangePartitionDesc()
                        self.state = 6584
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6587
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6589
                self.match(StarRocksParser.PARTITION)
                self.state = 6590
                self.match(StarRocksParser.BY)
                self.state = 6591
                self.functionCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListPartitionDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleItemListPartitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.SingleItemListPartitionDescContext,0)


        def multiItemListPartitionDesc(self):
            return self.getTypedRuleContext(StarRocksParser.MultiItemListPartitionDescContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_listPartitionDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListPartitionDesc" ):
                listener.enterListPartitionDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListPartitionDesc" ):
                listener.exitListPartitionDesc(self)




    def listPartitionDesc(self):

        localctx = StarRocksParser.ListPartitionDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_listPartitionDesc)
        try:
            self.state = 6596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6594
                self.singleItemListPartitionDesc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6595
                self.multiItemListPartitionDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleItemListPartitionDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def VALUES(self):
            return self.getToken(StarRocksParser.VALUES, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def listPartitionValueList(self):
            return self.getTypedRuleContext(StarRocksParser.ListPartitionValueListContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_singleItemListPartitionDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleItemListPartitionDesc" ):
                listener.enterSingleItemListPartitionDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleItemListPartitionDesc" ):
                listener.exitSingleItemListPartitionDesc(self)




    def singleItemListPartitionDesc(self):

        localctx = StarRocksParser.SingleItemListPartitionDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_singleItemListPartitionDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6598
            self.match(StarRocksParser.PARTITION)
            self.state = 6602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 6599
                self.match(StarRocksParser.IF)
                self.state = 6600
                self.match(StarRocksParser.NOT)
                self.state = 6601
                self.match(StarRocksParser.EXISTS)


            self.state = 6604
            self.identifier()
            self.state = 6605
            self.match(StarRocksParser.VALUES)
            self.state = 6606
            self.match(StarRocksParser.IN)
            self.state = 6607
            self.listPartitionValueList()
            self.state = 6609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 6608
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiItemListPartitionDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def VALUES(self):
            return self.getToken(StarRocksParser.VALUES, 0)

        def IN(self):
            return self.getToken(StarRocksParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def listPartitionValueList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ListPartitionValueListContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ListPartitionValueListContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_multiItemListPartitionDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiItemListPartitionDesc" ):
                listener.enterMultiItemListPartitionDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiItemListPartitionDesc" ):
                listener.exitMultiItemListPartitionDesc(self)




    def multiItemListPartitionDesc(self):

        localctx = StarRocksParser.MultiItemListPartitionDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_multiItemListPartitionDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6611
            self.match(StarRocksParser.PARTITION)
            self.state = 6615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 6612
                self.match(StarRocksParser.IF)
                self.state = 6613
                self.match(StarRocksParser.NOT)
                self.state = 6614
                self.match(StarRocksParser.EXISTS)


            self.state = 6617
            self.identifier()
            self.state = 6618
            self.match(StarRocksParser.VALUES)
            self.state = 6619
            self.match(StarRocksParser.IN)
            self.state = 6620
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6621
            self.listPartitionValueList()
            self.state = 6626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6622
                self.match(StarRocksParser.COMMA)
                self.state = 6623
                self.listPartitionValueList()
                self.state = 6628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6629
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 6631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 6630
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListPartitionValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def listPartitionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.ListPartitionValueContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.ListPartitionValueContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_listPartitionValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListPartitionValueList" ):
                listener.enterListPartitionValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListPartitionValueList" ):
                listener.exitListPartitionValueList(self)




    def listPartitionValueList(self):

        localctx = StarRocksParser.ListPartitionValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_listPartitionValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6633
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6634
            self.listPartitionValue()
            self.state = 6639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6635
                self.match(StarRocksParser.COMMA)
                self.state = 6636
                self.listPartitionValue()
                self.state = 6641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6642
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListPartitionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(StarRocksParser.NULL_, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_listPartitionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListPartitionValue" ):
                listener.enterListPartitionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListPartitionValue" ):
                listener.exitListPartitionValue(self)




    def listPartitionValue(self):

        localctx = StarRocksParser.ListPartitionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_listPartitionValue)
        try:
            self.state = 6646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [259]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6644
                self.match(StarRocksParser.NULL_)
                pass
            elif token in [484, 485]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6645
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)




    def stringList(self):

        localctx = StarRocksParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6648
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6649
            self.string_()
            self.state = 6654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6650
                self.match(StarRocksParser.COMMA)
                self.state = 6651
                self.string_()
                self.state = 6656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6657
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def literalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.LiteralExpressionContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.LiteralExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_literalExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpressionList" ):
                listener.enterLiteralExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpressionList" ):
                listener.exitLiteralExpressionList(self)




    def literalExpressionList(self):

        localctx = StarRocksParser.LiteralExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_literalExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6659
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6660
            self.literalExpression()
            self.state = 6665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6661
                self.match(StarRocksParser.COMMA)
                self.state = 6662
                self.literalExpression()
                self.state = 6667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6668
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangePartitionDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleRangePartition(self):
            return self.getTypedRuleContext(StarRocksParser.SingleRangePartitionContext,0)


        def multiRangePartition(self):
            return self.getTypedRuleContext(StarRocksParser.MultiRangePartitionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_rangePartitionDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangePartitionDesc" ):
                listener.enterRangePartitionDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangePartitionDesc" ):
                listener.exitRangePartitionDesc(self)




    def rangePartitionDesc(self):

        localctx = StarRocksParser.RangePartitionDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_rangePartitionDesc)
        try:
            self.state = 6672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [279]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6670
                self.singleRangePartition()
                pass
            elif token in [375]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6671
                self.multiRangePartition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleRangePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(StarRocksParser.PARTITION, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def VALUES(self):
            return self.getToken(StarRocksParser.VALUES, 0)

        def partitionKeyDesc(self):
            return self.getTypedRuleContext(StarRocksParser.PartitionKeyDescContext,0)


        def IF(self):
            return self.getToken(StarRocksParser.IF, 0)

        def NOT(self):
            return self.getToken(StarRocksParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(StarRocksParser.EXISTS, 0)

        def propertyList(self):
            return self.getTypedRuleContext(StarRocksParser.PropertyListContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_singleRangePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleRangePartition" ):
                listener.enterSingleRangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleRangePartition" ):
                listener.exitSingleRangePartition(self)




    def singleRangePartition(self):

        localctx = StarRocksParser.SingleRangePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_singleRangePartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6674
            self.match(StarRocksParser.PARTITION)
            self.state = 6678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 6675
                self.match(StarRocksParser.IF)
                self.state = 6676
                self.match(StarRocksParser.NOT)
                self.state = 6677
                self.match(StarRocksParser.EXISTS)


            self.state = 6680
            self.identifier()
            self.state = 6681
            self.match(StarRocksParser.VALUES)
            self.state = 6682
            self.partitionKeyDesc()
            self.state = 6684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 6683
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiRangePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(StarRocksParser.START, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def END(self):
            return self.getToken(StarRocksParser.END, 0)

        def EVERY(self):
            return self.getToken(StarRocksParser.EVERY, 0)

        def interval(self):
            return self.getTypedRuleContext(StarRocksParser.IntervalContext,0)


        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_multiRangePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiRangePartition" ):
                listener.enterMultiRangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiRangePartition" ):
                listener.exitMultiRangePartition(self)




    def multiRangePartition(self):

        localctx = StarRocksParser.MultiRangePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_multiRangePartition)
        try:
            self.state = 6712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6686
                self.match(StarRocksParser.START)
                self.state = 6687
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6688
                self.string_()
                self.state = 6689
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6690
                self.match(StarRocksParser.END)
                self.state = 6691
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6692
                self.string_()
                self.state = 6693
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6694
                self.match(StarRocksParser.EVERY)
                self.state = 6695
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6696
                self.interval()
                self.state = 6697
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6699
                self.match(StarRocksParser.START)
                self.state = 6700
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6701
                self.string_()
                self.state = 6702
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6703
                self.match(StarRocksParser.END)
                self.state = 6704
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6705
                self.string_()
                self.state = 6706
                self.match(StarRocksParser.RIGHT_PAREN)
                self.state = 6707
                self.match(StarRocksParser.EVERY)
                self.state = 6708
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6709
                self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 6710
                self.match(StarRocksParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionRangeDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(StarRocksParser.START, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def END(self):
            return self.getToken(StarRocksParser.END, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionRangeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionRangeDesc" ):
                listener.enterPartitionRangeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionRangeDesc" ):
                listener.exitPartitionRangeDesc(self)




    def partitionRangeDesc(self):

        localctx = StarRocksParser.PartitionRangeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_partitionRangeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6714
            self.match(StarRocksParser.START)
            self.state = 6715
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6716
            self.string_()
            self.state = 6717
            self.match(StarRocksParser.RIGHT_PAREN)
            self.state = 6718
            self.match(StarRocksParser.END)
            self.state = 6719
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6720
            self.string_()
            self.state = 6721
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionKeyDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(StarRocksParser.LESS, 0)

        def THAN(self):
            return self.getToken(StarRocksParser.THAN, 0)

        def MAXVALUE(self):
            return self.getToken(StarRocksParser.MAXVALUE, 0)

        def partitionValueList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PartitionValueListContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PartitionValueListContext,i)


        def LEFT_BRACKET(self):
            return self.getToken(StarRocksParser.LEFT_BRACKET, 0)

        def COMMA(self):
            return self.getToken(StarRocksParser.COMMA, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionKeyDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionKeyDesc" ):
                listener.enterPartitionKeyDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionKeyDesc" ):
                listener.exitPartitionKeyDesc(self)




    def partitionKeyDesc(self):

        localctx = StarRocksParser.PartitionKeyDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_partitionKeyDesc)
        try:
            self.state = 6735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [217]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6723
                self.match(StarRocksParser.LESS)
                self.state = 6724
                self.match(StarRocksParser.THAN)
                self.state = 6727
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [238]:
                    self.state = 6725
                    self.match(StarRocksParser.MAXVALUE)
                    pass
                elif token in [498]:
                    self.state = 6726
                    self.partitionValueList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [502]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6729
                self.match(StarRocksParser.LEFT_BRACKET)
                self.state = 6730
                self.partitionValueList()
                self.state = 6731
                self.match(StarRocksParser.COMMA)
                self.state = 6732
                self.partitionValueList()
                self.state = 6733
                self.match(StarRocksParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def partitionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PartitionValueContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PartitionValueContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueList" ):
                listener.enterPartitionValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueList" ):
                listener.exitPartitionValueList(self)




    def partitionValueList(self):

        localctx = StarRocksParser.PartitionValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_partitionValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6737
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6738
            self.partitionValue()
            self.state = 6743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6739
                self.match(StarRocksParser.COMMA)
                self.state = 6740
                self.partitionValue()
                self.state = 6745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6746
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionColName = None # IdentifierContext
            self.partitionColValue = None # LiteralExpressionContext

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(StarRocksParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_keyPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPartition" ):
                listener.enterKeyPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPartition" ):
                listener.exitKeyPartition(self)




    def keyPartition(self):

        localctx = StarRocksParser.KeyPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_keyPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6748
            localctx.partitionColName = self.identifier()
            self.state = 6749
            self.match(StarRocksParser.EQ)
            self.state = 6750
            localctx.partitionColValue = self.literalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXVALUE(self):
            return self.getToken(StarRocksParser.MAXVALUE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_partitionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValue" ):
                listener.enterPartitionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValue" ):
                listener.exitPartitionValue(self)




    def partitionValue(self):

        localctx = StarRocksParser.PartitionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_partitionValue)
        try:
            self.state = 6754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6752
                self.match(StarRocksParser.MAXVALUE)
                pass
            elif token in [484, 485]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6753
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistributionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTRIBUTED(self):
            return self.getToken(StarRocksParser.DISTRIBUTED, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def HASH(self):
            return self.getToken(StarRocksParser.HASH, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def BUCKETS(self):
            return self.getToken(StarRocksParser.BUCKETS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_distributionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistributionClause" ):
                listener.enterDistributionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistributionClause" ):
                listener.exitDistributionClause(self)




    def distributionClause(self):

        localctx = StarRocksParser.DistributionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_distributionClause)
        self._la = 0 # Token type
        try:
            self.state = 6768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6756
                self.match(StarRocksParser.DISTRIBUTED)
                self.state = 6757
                self.match(StarRocksParser.BY)
                self.state = 6758
                self.match(StarRocksParser.HASH)
                self.state = 6759
                self.identifierList()
                self.state = 6762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 6760
                    self.match(StarRocksParser.BUCKETS)
                    self.state = 6761
                    self.match(StarRocksParser.INTEGER_VALUE)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6764
                self.match(StarRocksParser.DISTRIBUTED)
                self.state = 6765
                self.match(StarRocksParser.BY)
                self.state = 6766
                self.match(StarRocksParser.HASH)
                self.state = 6767
                self.identifierList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistributionDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTRIBUTED(self):
            return self.getToken(StarRocksParser.DISTRIBUTED, 0)

        def BY(self):
            return self.getToken(StarRocksParser.BY, 0)

        def HASH(self):
            return self.getToken(StarRocksParser.HASH, 0)

        def identifierList(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierListContext,0)


        def BUCKETS(self):
            return self.getToken(StarRocksParser.BUCKETS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def RANDOM(self):
            return self.getToken(StarRocksParser.RANDOM, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_distributionDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistributionDesc" ):
                listener.enterDistributionDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistributionDesc" ):
                listener.exitDistributionDesc(self)




    def distributionDesc(self):

        localctx = StarRocksParser.DistributionDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_distributionDesc)
        self._la = 0 # Token type
        try:
            self.state = 6789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6770
                self.match(StarRocksParser.DISTRIBUTED)
                self.state = 6771
                self.match(StarRocksParser.BY)
                self.state = 6772
                self.match(StarRocksParser.HASH)
                self.state = 6773
                self.identifierList()
                self.state = 6776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 6774
                    self.match(StarRocksParser.BUCKETS)
                    self.state = 6775
                    self.match(StarRocksParser.INTEGER_VALUE)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6778
                self.match(StarRocksParser.DISTRIBUTED)
                self.state = 6779
                self.match(StarRocksParser.BY)
                self.state = 6780
                self.match(StarRocksParser.HASH)
                self.state = 6781
                self.identifierList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6782
                self.match(StarRocksParser.DISTRIBUTED)
                self.state = 6783
                self.match(StarRocksParser.BY)
                self.state = 6784
                self.match(StarRocksParser.RANDOM)
                self.state = 6787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 6785
                    self.match(StarRocksParser.BUCKETS)
                    self.state = 6786
                    self.match(StarRocksParser.INTEGER_VALUE)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefreshSchemeDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def ASYNC(self):
            return self.getToken(StarRocksParser.ASYNC, 0)

        def EVERY(self):
            return self.getToken(StarRocksParser.EVERY, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.LEFT_PAREN)
            else:
                return self.getToken(StarRocksParser.LEFT_PAREN, i)

        def interval(self):
            return self.getTypedRuleContext(StarRocksParser.IntervalContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.RIGHT_PAREN)
            else:
                return self.getToken(StarRocksParser.RIGHT_PAREN, i)

        def INCREMENTAL(self):
            return self.getToken(StarRocksParser.INCREMENTAL, 0)

        def MANUAL(self):
            return self.getToken(StarRocksParser.MANUAL, 0)

        def IMMEDIATE(self):
            return self.getToken(StarRocksParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(StarRocksParser.DEFERRED, 0)

        def START(self):
            return self.getToken(StarRocksParser.START, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_refreshSchemeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshSchemeDesc" ):
                listener.enterRefreshSchemeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshSchemeDesc" ):
                listener.exitRefreshSchemeDesc(self)




    def refreshSchemeDesc(self):

        localctx = StarRocksParser.RefreshSchemeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_refreshSchemeDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6791
            self.match(StarRocksParser.REFRESH)
            self.state = 6793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103 or _la==179:
                self.state = 6792
                _la = self._input.LA(1)
                if not(_la==103 or _la==179):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
            if la_ == 1:
                self.state = 6795
                self.match(StarRocksParser.ASYNC)
                pass

            elif la_ == 2:
                self.state = 6796
                self.match(StarRocksParser.ASYNC)
                self.state = 6802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==375:
                    self.state = 6797
                    self.match(StarRocksParser.START)
                    self.state = 6798
                    self.match(StarRocksParser.LEFT_PAREN)
                    self.state = 6799
                    self.string_()
                    self.state = 6800
                    self.match(StarRocksParser.RIGHT_PAREN)


                self.state = 6804
                self.match(StarRocksParser.EVERY)
                self.state = 6805
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 6806
                self.interval()
                self.state = 6807
                self.match(StarRocksParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.state = 6809
                self.match(StarRocksParser.INCREMENTAL)
                pass

            elif la_ == 4:
                self.state = 6810
                self.match(StarRocksParser.MANUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTIVE(self):
            return self.getToken(StarRocksParser.ACTIVE, 0)

        def INACTIVE(self):
            return self.getToken(StarRocksParser.INACTIVE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_statusDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatusDesc" ):
                listener.enterStatusDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatusDesc" ):
                listener.exitStatusDesc(self)




    def statusDesc(self):

        localctx = StarRocksParser.StatusDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_statusDesc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6813
            _la = self._input.LA(1)
            if not(_la==3 or _la==183):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PropertyContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)




    def properties(self):

        localctx = StarRocksParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6815
            self.match(StarRocksParser.PROPERTIES)
            self.state = 6816
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6817
            self.property_()
            self.state = 6822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6818
                self.match(StarRocksParser.COMMA)
                self.state = 6819
                self.property_()
                self.state = 6824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6825
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROKER(self):
            return self.getToken(StarRocksParser.BROKER, 0)

        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_extProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtProperties" ):
                listener.enterExtProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtProperties" ):
                listener.exitExtProperties(self)




    def extProperties(self):

        localctx = StarRocksParser.ExtPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_extProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6827
            self.match(StarRocksParser.BROKER)
            self.state = 6828
            self.properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PropertyContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)




    def propertyList(self):

        localctx = StarRocksParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6830
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6831
            self.property_()
            self.state = 6836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6832
                self.match(StarRocksParser.COMMA)
                self.state = 6833
                self.property_()
                self.state = 6838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6839
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.PropertyContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.PropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_userPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPropertyList" ):
                listener.enterUserPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPropertyList" ):
                listener.exitUserPropertyList(self)




    def userPropertyList(self):

        localctx = StarRocksParser.UserPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_userPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6841
            self.property_()
            self.state = 6846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6842
                self.match(StarRocksParser.COMMA)
                self.state = 6843
                self.property_()
                self.state = 6848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # String_Context
            self.value = None # String_Context

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def string_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.String_Context)
            else:
                return self.getTypedRuleContext(StarRocksParser.String_Context,i)


        def getRuleIndex(self):
            return StarRocksParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)




    def property_(self):

        localctx = StarRocksParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6849
            localctx.key = self.string_()
            self.state = 6850
            self.match(StarRocksParser.EQ)
            self.state = 6851
            localctx.value = self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(StarRocksParser.LOCAL, 0)

        def SESSION(self):
            return self.getToken(StarRocksParser.SESSION, 0)

        def VERBOSE(self):
            return self.getToken(StarRocksParser.VERBOSE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_varType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarType" ):
                listener.enterVarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarType" ):
                listener.exitVarType(self)




    def varType(self):

        localctx = StarRocksParser.VarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_varType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6853
            _la = self._input.LA(1)
            if not(_la==159 or _la==223 or _la==365 or _la==433):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(StarRocksParser.COMMENT, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = StarRocksParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6855
            self.match(StarRocksParser.COMMENT)
            self.state = 6856
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutfileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.file_ = None # String_Context

        def INTO(self):
            return self.getToken(StarRocksParser.INTO, 0)

        def OUTFILE(self):
            return self.getToken(StarRocksParser.OUTFILE, 0)

        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def fileFormat(self):
            return self.getTypedRuleContext(StarRocksParser.FileFormatContext,0)


        def properties(self):
            return self.getTypedRuleContext(StarRocksParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_outfile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutfile" ):
                listener.enterOutfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutfile" ):
                listener.exitOutfile(self)




    def outfile(self):

        localctx = StarRocksParser.OutfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_outfile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6858
            self.match(StarRocksParser.INTO)
            self.state = 6859
            self.match(StarRocksParser.OUTFILE)
            self.state = 6860
            localctx.file_ = self.string_()
            self.state = 6862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 6861
                self.fileFormat()


            self.state = 6865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 6864
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT(self):
            return self.getToken(StarRocksParser.FORMAT, 0)

        def AS(self):
            return self.getToken(StarRocksParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_fileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileFormat" ):
                listener.enterFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileFormat" ):
                listener.exitFileFormat(self)




    def fileFormat(self):

        localctx = StarRocksParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_fileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6867
            self.match(StarRocksParser.FORMAT)
            self.state = 6868
            self.match(StarRocksParser.AS)
            self.state = 6871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                self.state = 6869
                self.identifier()
                pass
            elif token in [484, 485]:
                self.state = 6870
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(StarRocksParser.SINGLE_QUOTED_TEXT, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(StarRocksParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_string_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_" ):
                listener.enterString_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_" ):
                listener.exitString_(self)




    def string_(self):

        localctx = StarRocksParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_string_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6873
            _la = self._input.LA(1)
            if not(_la==484 or _la==485):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SINGLE_QUOTED_TEXT(self):
            return self.getToken(StarRocksParser.BINARY_SINGLE_QUOTED_TEXT, 0)

        def BINARY_DOUBLE_QUOTED_TEXT(self):
            return self.getToken(StarRocksParser.BINARY_DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)




    def binary(self):

        localctx = StarRocksParser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_binary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6875
            _la = self._input.LA(1)
            if not(_la==486 or _la==487):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def NEQ(self):
            return self.getToken(StarRocksParser.NEQ, 0)

        def LT(self):
            return self.getToken(StarRocksParser.LT, 0)

        def LTE(self):
            return self.getToken(StarRocksParser.LTE, 0)

        def GT(self):
            return self.getToken(StarRocksParser.GT, 0)

        def GTE(self):
            return self.getToken(StarRocksParser.GTE, 0)

        def EQ_FOR_NULL(self):
            return self.getToken(StarRocksParser.EQ_FOR_NULL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = StarRocksParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6877
            _la = self._input.LA(1)
            if not(((((_la - 455)) & ~0x3f) == 0 and ((1 << (_la - 455)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(StarRocksParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(StarRocksParser.FALSE, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = StarRocksParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6879
            _la = self._input.LA(1)
            if not(_la==137 or _la==411):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # ExpressionContext
            self.from_ = None # UnitIdentifierContext

        def INTERVAL(self):
            return self.getToken(StarRocksParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def unitIdentifier(self):
            return self.getTypedRuleContext(StarRocksParser.UnitIdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = StarRocksParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6881
            self.match(StarRocksParser.INTERVAL)
            self.state = 6882
            localctx.value = self.expression(0)
            self.state = 6883
            localctx.from_ = self.unitIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # ExpressionContext
            self.from_ = None # TaskUnitIdentifierContext

        def INTERVAL(self):
            return self.getToken(StarRocksParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionContext,0)


        def taskUnitIdentifier(self):
            return self.getTypedRuleContext(StarRocksParser.TaskUnitIdentifierContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_taskInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskInterval" ):
                listener.enterTaskInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskInterval" ):
                listener.exitTaskInterval(self)




    def taskInterval(self):

        localctx = StarRocksParser.TaskIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_taskInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6885
            self.match(StarRocksParser.INTERVAL)
            self.state = 6886
            localctx.value = self.expression(0)
            self.state = 6887
            localctx.from_ = self.taskUnitIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskUnitIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(StarRocksParser.DAY, 0)

        def HOUR(self):
            return self.getToken(StarRocksParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(StarRocksParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(StarRocksParser.SECOND, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_taskUnitIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskUnitIdentifier" ):
                listener.enterTaskUnitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskUnitIdentifier" ):
                listener.exitTaskUnitIdentifier(self)




    def taskUnitIdentifier(self):

        localctx = StarRocksParser.TaskUnitIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_taskUnitIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6889
            _la = self._input.LA(1)
            if not(_la==92 or _la==174 or _la==243 or _la==359):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(StarRocksParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(StarRocksParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(StarRocksParser.WEEK, 0)

        def DAY(self):
            return self.getToken(StarRocksParser.DAY, 0)

        def HOUR(self):
            return self.getToken(StarRocksParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(StarRocksParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(StarRocksParser.SECOND, 0)

        def QUARTER(self):
            return self.getToken(StarRocksParser.QUARTER, 0)

        def MILLISECOND(self):
            return self.getToken(StarRocksParser.MILLISECOND, 0)

        def MICROSECOND(self):
            return self.getToken(StarRocksParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_unitIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitIdentifier" ):
                listener.enterUnitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitIdentifier" ):
                listener.exitUnitIdentifier(self)




    def unitIdentifier(self):

        localctx = StarRocksParser.UnitIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_unitIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6891
            _la = self._input.LA(1)
            if not(_la==92 or _la==174 or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & 523) != 0) or _la==309 or _la==359 or _la==442 or _la==449):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitBoundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOOR(self):
            return self.getToken(StarRocksParser.FLOOR, 0)

        def CEIL(self):
            return self.getToken(StarRocksParser.CEIL, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_unitBoundary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitBoundary" ):
                listener.enterUnitBoundary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitBoundary" ):
                listener.exitUnitBoundary(self)




    def unitBoundary(self):

        localctx = StarRocksParser.UnitBoundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_unitBoundary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6893
            _la = self._input.LA(1)
            if not(_la==49 or _la==145):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self):
            return self.getTypedRuleContext(StarRocksParser.BaseTypeContext,0)


        def decimalType(self):
            return self.getTypedRuleContext(StarRocksParser.DecimalTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(StarRocksParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(StarRocksParser.StructTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(StarRocksParser.MapTypeContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = StarRocksParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_type)
        try:
            self.state = 6900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 37, 51, 90, 91, 113, 144, 171, 191, 192, 205, 211, 286, 369, 372, 381, 382, 400, 405, 421, 430, 431]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6895
                self.baseType()
                pass
            elif token in [94, 95, 96, 97, 98, 261, 262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6896
                self.decimalType()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6897
                self.arrayType()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6898
                self.structType()
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6899
                self.mapType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(StarRocksParser.ARRAY, 0)

        def LT(self):
            return self.getToken(StarRocksParser.LT, 0)

        def type_(self):
            return self.getTypedRuleContext(StarRocksParser.TypeContext,0)


        def GT(self):
            return self.getToken(StarRocksParser.GT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = StarRocksParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6902
            self.match(StarRocksParser.ARRAY)
            self.state = 6903
            self.match(StarRocksParser.LT)
            self.state = 6904
            self.type_()
            self.state = 6905
            self.match(StarRocksParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(StarRocksParser.MAP, 0)

        def LT(self):
            return self.getToken(StarRocksParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.TypeContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.TypeContext,i)


        def COMMA(self):
            return self.getToken(StarRocksParser.COMMA, 0)

        def GT(self):
            return self.getToken(StarRocksParser.GT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)




    def mapType(self):

        localctx = StarRocksParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6907
            self.match(StarRocksParser.MAP)
            self.state = 6908
            self.match(StarRocksParser.LT)
            self.state = 6909
            self.type_()
            self.state = 6910
            self.match(StarRocksParser.COMMA)
            self.state = 6911
            self.type_()
            self.state = 6912
            self.match(StarRocksParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubfieldDescContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(StarRocksParser.TypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def nestedFieldName(self):
            return self.getTypedRuleContext(StarRocksParser.NestedFieldNameContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_subfieldDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubfieldDesc" ):
                listener.enterSubfieldDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubfieldDesc" ):
                listener.exitSubfieldDesc(self)




    def subfieldDesc(self):

        localctx = StarRocksParser.SubfieldDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_subfieldDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
            if la_ == 1:
                self.state = 6914
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6915
                self.nestedFieldName()
                pass


            self.state = 6918
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubfieldDescsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subfieldDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.SubfieldDescContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.SubfieldDescContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_subfieldDescs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubfieldDescs" ):
                listener.enterSubfieldDescs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubfieldDescs" ):
                listener.exitSubfieldDescs(self)




    def subfieldDescs(self):

        localctx = StarRocksParser.SubfieldDescsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_subfieldDescs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6920
            self.subfieldDesc()
            self.state = 6925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 6921
                self.match(StarRocksParser.COMMA)
                self.state = 6922
                self.subfieldDesc()
                self.state = 6927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(StarRocksParser.STRUCT, 0)

        def LT(self):
            return self.getToken(StarRocksParser.LT, 0)

        def subfieldDescs(self):
            return self.getTypedRuleContext(StarRocksParser.SubfieldDescsContext,0)


        def GT(self):
            return self.getToken(StarRocksParser.GT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)




    def structType(self):

        localctx = StarRocksParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_structType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6928
            self.match(StarRocksParser.STRUCT)
            self.state = 6929
            self.match(StarRocksParser.LT)
            self.state = 6930
            self.subfieldDescs()
            self.state = 6931
            self.match(StarRocksParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = StarRocksParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_typeParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6933
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 6934
            self.match(StarRocksParser.INTEGER_VALUE)
            self.state = 6935
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(StarRocksParser.BOOLEAN, 0)

        def TINYINT(self):
            return self.getToken(StarRocksParser.TINYINT, 0)

        def typeParameter(self):
            return self.getTypedRuleContext(StarRocksParser.TypeParameterContext,0)


        def SMALLINT(self):
            return self.getToken(StarRocksParser.SMALLINT, 0)

        def SIGNED(self):
            return self.getToken(StarRocksParser.SIGNED, 0)

        def INT(self):
            return self.getToken(StarRocksParser.INT, 0)

        def INTEGER(self):
            return self.getToken(StarRocksParser.INTEGER, 0)

        def UNSIGNED(self):
            return self.getToken(StarRocksParser.UNSIGNED, 0)

        def BIGINT(self):
            return self.getToken(StarRocksParser.BIGINT, 0)

        def LARGEINT(self):
            return self.getToken(StarRocksParser.LARGEINT, 0)

        def FLOAT(self):
            return self.getToken(StarRocksParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(StarRocksParser.DOUBLE, 0)

        def DATE(self):
            return self.getToken(StarRocksParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(StarRocksParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(StarRocksParser.TIME, 0)

        def CHAR(self):
            return self.getToken(StarRocksParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(StarRocksParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(StarRocksParser.STRING, 0)

        def TEXT(self):
            return self.getToken(StarRocksParser.TEXT, 0)

        def BITMAP(self):
            return self.getToken(StarRocksParser.BITMAP, 0)

        def HLL(self):
            return self.getToken(StarRocksParser.HLL, 0)

        def PERCENTILE(self):
            return self.getToken(StarRocksParser.PERCENTILE, 0)

        def JSON(self):
            return self.getToken(StarRocksParser.JSON, 0)

        def VARBINARY(self):
            return self.getToken(StarRocksParser.VARBINARY, 0)

        def BINARY(self):
            return self.getToken(StarRocksParser.BINARY, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = StarRocksParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_baseType)
        self._la = 0 # Token type
        try:
            self.state = 7005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6937
                self.match(StarRocksParser.BOOLEAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6938
                self.match(StarRocksParser.TINYINT)
                self.state = 6940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6939
                    self.typeParameter()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6942
                self.match(StarRocksParser.SMALLINT)
                self.state = 6944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6943
                    self.typeParameter()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6946
                self.match(StarRocksParser.SIGNED)
                self.state = 6948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==191:
                    self.state = 6947
                    self.match(StarRocksParser.INT)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6950
                self.match(StarRocksParser.SIGNED)
                self.state = 6952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 6951
                    self.match(StarRocksParser.INTEGER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6954
                self.match(StarRocksParser.UNSIGNED)
                self.state = 6956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==191:
                    self.state = 6955
                    self.match(StarRocksParser.INT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6958
                self.match(StarRocksParser.UNSIGNED)
                self.state = 6960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 6959
                    self.match(StarRocksParser.INTEGER)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6962
                self.match(StarRocksParser.INT)
                self.state = 6964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6963
                    self.typeParameter()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6966
                self.match(StarRocksParser.INTEGER)
                self.state = 6968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6967
                    self.typeParameter()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6970
                self.match(StarRocksParser.BIGINT)
                self.state = 6972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6971
                    self.typeParameter()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6974
                self.match(StarRocksParser.LARGEINT)
                self.state = 6976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6975
                    self.typeParameter()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6978
                self.match(StarRocksParser.FLOAT)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6979
                self.match(StarRocksParser.DOUBLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6980
                self.match(StarRocksParser.DATE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6981
                self.match(StarRocksParser.DATETIME)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6982
                self.match(StarRocksParser.TIME)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6983
                self.match(StarRocksParser.CHAR)
                self.state = 6985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6984
                    self.typeParameter()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6987
                self.match(StarRocksParser.VARCHAR)
                self.state = 6989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6988
                    self.typeParameter()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6991
                self.match(StarRocksParser.STRING)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6992
                self.match(StarRocksParser.TEXT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6993
                self.match(StarRocksParser.BITMAP)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6994
                self.match(StarRocksParser.HLL)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6995
                self.match(StarRocksParser.PERCENTILE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6996
                self.match(StarRocksParser.JSON)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6997
                self.match(StarRocksParser.VARBINARY)
                self.state = 6999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 6998
                    self.typeParameter()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7001
                self.match(StarRocksParser.BINARY)
                self.state = 7003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==498:
                    self.state = 7002
                    self.typeParameter()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Token
            self.scale = None # Token

        def DECIMAL(self):
            return self.getToken(StarRocksParser.DECIMAL, 0)

        def DECIMALV2(self):
            return self.getToken(StarRocksParser.DECIMALV2, 0)

        def DECIMAL32(self):
            return self.getToken(StarRocksParser.DECIMAL32, 0)

        def DECIMAL64(self):
            return self.getToken(StarRocksParser.DECIMAL64, 0)

        def DECIMAL128(self):
            return self.getToken(StarRocksParser.DECIMAL128, 0)

        def NUMERIC(self):
            return self.getToken(StarRocksParser.NUMERIC, 0)

        def NUMBER(self):
            return self.getToken(StarRocksParser.NUMBER, 0)

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.INTEGER_VALUE)
            else:
                return self.getToken(StarRocksParser.INTEGER_VALUE, i)

        def COMMA(self):
            return self.getToken(StarRocksParser.COMMA, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_decimalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalType" ):
                listener.enterDecimalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalType" ):
                listener.exitDecimalType(self)




    def decimalType(self):

        localctx = StarRocksParser.DecimalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_decimalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7007
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 31) != 0) or _la==261 or _la==262):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==498:
                self.state = 7008
                self.match(StarRocksParser.LEFT_PAREN)
                self.state = 7009
                localctx.precision = self.match(StarRocksParser.INTEGER_VALUE)
                self.state = 7012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==500:
                    self.state = 7010
                    self.match(StarRocksParser.COMMA)
                    self.state = 7011
                    localctx.scale = self.match(StarRocksParser.INTEGER_VALUE)


                self.state = 7014
                self.match(StarRocksParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def DOT_IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.DOT_IDENTIFIER)
            else:
                return self.getToken(StarRocksParser.DOT_IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.DOT)
            else:
                return self.getToken(StarRocksParser.DOT, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = StarRocksParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7017
            self.identifier()
            self.state = 7023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,831,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7021
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [491]:
                        self.state = 7018
                        self.match(StarRocksParser.DOT_IDENTIFIER)
                        pass
                    elif token in [501]:
                        self.state = 7019
                        self.match(StarRocksParser.DOT)
                        self.state = 7020
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 7025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,831,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(StarRocksParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(StarRocksParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LETTER_IDENTIFIER(self):
            return self.getToken(StarRocksParser.LETTER_IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(StarRocksParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def identifier(self):

        localctx = StarRocksParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_identifier)
        try:
            self.state = 7030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488]:
                localctx = StarRocksParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7026
                self.match(StarRocksParser.LETTER_IDENTIFIER)
                pass
            elif token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 496]:
                localctx = StarRocksParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7027
                self.nonReserved()
                pass
            elif token in [489]:
                localctx = StarRocksParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7028
                self.match(StarRocksParser.DIGIT_IDENTIFIER)
                pass
            elif token in [490]:
                localctx = StarRocksParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 7029
                self.match(StarRocksParser.BACKQUOTED_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(StarRocksParser.LEFT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(StarRocksParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = StarRocksParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7032
            self.match(StarRocksParser.LEFT_PAREN)
            self.state = 7033
            self.identifier()
            self.state = 7038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 7034
                self.match(StarRocksParser.COMMA)
                self.state = 7035
                self.identifier()
                self.state = 7040
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7041
            self.match(StarRocksParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_identifierOrString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrString" ):
                listener.enterIdentifierOrString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrString" ):
                listener.exitIdentifierOrString(self)




    def identifierOrString(self):

        localctx = StarRocksParser.IdentifierOrStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_identifierOrString)
        try:
            self.state = 7045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7043
                self.identifier()
                pass
            elif token in [484, 485]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7044
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrStringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_identifierOrStringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrStringList" ):
                listener.enterIdentifierOrStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrStringList" ):
                listener.exitIdentifierOrStringList(self)




    def identifierOrStringList(self):

        localctx = StarRocksParser.IdentifierOrStringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_identifierOrStringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7047
            self.identifierOrString()
            self.state = 7052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 7048
                self.match(StarRocksParser.COMMA)
                self.state = 7049
                self.identifierOrString()
                self.state = 7054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrStringOrStarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK_SYMBOL(self):
            return self.getToken(StarRocksParser.ASTERISK_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def string_(self):
            return self.getTypedRuleContext(StarRocksParser.String_Context,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_identifierOrStringOrStar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrStringOrStar" ):
                listener.enterIdentifierOrStringOrStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrStringOrStar" ):
                listener.exitIdentifierOrStringOrStar(self)




    def identifierOrStringOrStar(self):

        localctx = StarRocksParser.IdentifierOrStringOrStarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_identifierOrStringOrStar)
        try:
            self.state = 7058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [465]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7055
                self.match(StarRocksParser.ASTERISK_SYMBOL)
                pass
            elif token in [2, 3, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 80, 86, 87, 90, 91, 92, 93, 99, 104, 105, 109, 111, 112, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 161, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 181, 183, 184, 186, 189, 193, 194, 195, 197, 200, 202, 203, 209, 212, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 462, 488, 489, 490, 496]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7056
                self.identifier()
                pass
            elif token in [484, 485]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7057
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_user

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UserWithHostAndBlanketContext(UserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.UserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)

        def AT(self):
            return self.getToken(StarRocksParser.AT, 0)
        def LEFT_BRACKET(self):
            return self.getToken(StarRocksParser.LEFT_BRACKET, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(StarRocksParser.RIGHT_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserWithHostAndBlanket" ):
                listener.enterUserWithHostAndBlanket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserWithHostAndBlanket" ):
                listener.exitUserWithHostAndBlanket(self)


    class UserWithHostContext(UserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.UserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.IdentifierOrStringContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,i)

        def AT(self):
            return self.getToken(StarRocksParser.AT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserWithHost" ):
                listener.enterUserWithHost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserWithHost" ):
                listener.exitUserWithHost(self)


    class UserWithoutHostContext(UserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.UserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierOrString(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserWithoutHost" ):
                listener.enterUserWithoutHost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserWithoutHost" ):
                listener.exitUserWithoutHost(self)



    def user(self):

        localctx = StarRocksParser.UserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_user)
        try:
            self.state = 7071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
            if la_ == 1:
                localctx = StarRocksParser.UserWithoutHostContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7060
                self.identifierOrString()
                pass

            elif la_ == 2:
                localctx = StarRocksParser.UserWithHostContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7061
                self.identifierOrString()
                self.state = 7062
                self.match(StarRocksParser.AT)
                self.state = 7063
                self.identifierOrString()
                pass

            elif la_ == 3:
                localctx = StarRocksParser.UserWithHostAndBlanketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7065
                self.identifierOrString()
                self.state = 7066
                self.match(StarRocksParser.AT)
                self.state = 7067
                self.match(StarRocksParser.LEFT_BRACKET)
                self.state = 7068
                self.identifierOrString()
                self.state = 7069
                self.match(StarRocksParser.RIGHT_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(StarRocksParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(StarRocksParser.EQ, 0)

        def expressionOrDefault(self):
            return self.getTypedRuleContext(StarRocksParser.ExpressionOrDefaultContext,0)


        def getRuleIndex(self):
            return StarRocksParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = StarRocksParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7073
            self.identifier()
            self.state = 7074
            self.match(StarRocksParser.EQ)
            self.state = 7075
            self.expressionOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StarRocksParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(StarRocksParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StarRocksParser.COMMA)
            else:
                return self.getToken(StarRocksParser.COMMA, i)

        def getRuleIndex(self):
            return StarRocksParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = StarRocksParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7077
            self.assignment()
            self.state = 7082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==500:
                self.state = 7078
                self.match(StarRocksParser.COMMA)
                self.state = 7079
                self.assignment()
                self.state = 7084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StarRocksParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalValueContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(StarRocksParser.DECIMAL_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalValue" ):
                listener.enterDecimalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalValue" ):
                listener.exitDecimalValue(self)


    class IntegerValueContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(StarRocksParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerValue" ):
                listener.enterIntegerValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerValue" ):
                listener.exitIntegerValue(self)


    class DoubleValueContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a StarRocksParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE(self):
            return self.getToken(StarRocksParser.DOUBLE_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleValue" ):
                listener.enterDoubleValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleValue" ):
                listener.exitDoubleValue(self)



    def number(self):

        localctx = StarRocksParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_number)
        try:
            self.state = 7088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [482]:
                localctx = StarRocksParser.DecimalValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7085
                self.match(StarRocksParser.DECIMAL_VALUE)
                pass
            elif token in [483]:
                localctx = StarRocksParser.DoubleValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7086
                self.match(StarRocksParser.DOUBLE_VALUE)
                pass
            elif token in [481]:
                localctx = StarRocksParser.IntegerValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7087
                self.match(StarRocksParser.INTEGER_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(StarRocksParser.ACCESS, 0)

        def ACTIVE(self):
            return self.getToken(StarRocksParser.ACTIVE, 0)

        def AFTER(self):
            return self.getToken(StarRocksParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(StarRocksParser.AGGREGATE, 0)

        def APPLY(self):
            return self.getToken(StarRocksParser.APPLY, 0)

        def ASYNC(self):
            return self.getToken(StarRocksParser.ASYNC, 0)

        def AUTHORS(self):
            return self.getToken(StarRocksParser.AUTHORS, 0)

        def AVG(self):
            return self.getToken(StarRocksParser.AVG, 0)

        def ADMIN(self):
            return self.getToken(StarRocksParser.ADMIN, 0)

        def ANTI(self):
            return self.getToken(StarRocksParser.ANTI, 0)

        def AUTHENTICATION(self):
            return self.getToken(StarRocksParser.AUTHENTICATION, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(StarRocksParser.AUTO_INCREMENT, 0)

        def ARRAY_AGG(self):
            return self.getToken(StarRocksParser.ARRAY_AGG, 0)

        def ARRAY_AGG_DISTINCT(self):
            return self.getToken(StarRocksParser.ARRAY_AGG_DISTINCT, 0)

        def BACKEND(self):
            return self.getToken(StarRocksParser.BACKEND, 0)

        def BACKENDS(self):
            return self.getToken(StarRocksParser.BACKENDS, 0)

        def BACKUP(self):
            return self.getToken(StarRocksParser.BACKUP, 0)

        def BEGIN(self):
            return self.getToken(StarRocksParser.BEGIN, 0)

        def BITMAP_UNION(self):
            return self.getToken(StarRocksParser.BITMAP_UNION, 0)

        def BLACKLIST(self):
            return self.getToken(StarRocksParser.BLACKLIST, 0)

        def BLACKHOLE(self):
            return self.getToken(StarRocksParser.BLACKHOLE, 0)

        def BINARY(self):
            return self.getToken(StarRocksParser.BINARY, 0)

        def BODY(self):
            return self.getToken(StarRocksParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(StarRocksParser.BOOLEAN, 0)

        def BROKER(self):
            return self.getToken(StarRocksParser.BROKER, 0)

        def BUCKETS(self):
            return self.getToken(StarRocksParser.BUCKETS, 0)

        def BUILTIN(self):
            return self.getToken(StarRocksParser.BUILTIN, 0)

        def BASE(self):
            return self.getToken(StarRocksParser.BASE, 0)

        def CACHE(self):
            return self.getToken(StarRocksParser.CACHE, 0)

        def CAST(self):
            return self.getToken(StarRocksParser.CAST, 0)

        def CANCEL(self):
            return self.getToken(StarRocksParser.CANCEL, 0)

        def CATALOG(self):
            return self.getToken(StarRocksParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(StarRocksParser.CATALOGS, 0)

        def CEIL(self):
            return self.getToken(StarRocksParser.CEIL, 0)

        def CHAIN(self):
            return self.getToken(StarRocksParser.CHAIN, 0)

        def CHARSET(self):
            return self.getToken(StarRocksParser.CHARSET, 0)

        def CLEAN(self):
            return self.getToken(StarRocksParser.CLEAN, 0)

        def CLEAR(self):
            return self.getToken(StarRocksParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(StarRocksParser.CLUSTER, 0)

        def CLUSTERS(self):
            return self.getToken(StarRocksParser.CLUSTERS, 0)

        def CURRENT(self):
            return self.getToken(StarRocksParser.CURRENT, 0)

        def COLLATION(self):
            return self.getToken(StarRocksParser.COLLATION, 0)

        def COLUMNS(self):
            return self.getToken(StarRocksParser.COLUMNS, 0)

        def CUME_DIST(self):
            return self.getToken(StarRocksParser.CUME_DIST, 0)

        def CUMULATIVE(self):
            return self.getToken(StarRocksParser.CUMULATIVE, 0)

        def COMMENT(self):
            return self.getToken(StarRocksParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(StarRocksParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(StarRocksParser.COMMITTED, 0)

        def COMPUTE(self):
            return self.getToken(StarRocksParser.COMPUTE, 0)

        def CONNECTION(self):
            return self.getToken(StarRocksParser.CONNECTION, 0)

        def CONSISTENT(self):
            return self.getToken(StarRocksParser.CONSISTENT, 0)

        def COSTS(self):
            return self.getToken(StarRocksParser.COSTS, 0)

        def COUNT(self):
            return self.getToken(StarRocksParser.COUNT, 0)

        def CONFIG(self):
            return self.getToken(StarRocksParser.CONFIG, 0)

        def COMPACT(self):
            return self.getToken(StarRocksParser.COMPACT, 0)

        def DATA(self):
            return self.getToken(StarRocksParser.DATA, 0)

        def DATE(self):
            return self.getToken(StarRocksParser.DATE, 0)

        def DATACACHE(self):
            return self.getToken(StarRocksParser.DATACACHE, 0)

        def DATETIME(self):
            return self.getToken(StarRocksParser.DATETIME, 0)

        def DAY(self):
            return self.getToken(StarRocksParser.DAY, 0)

        def DECOMMISSION(self):
            return self.getToken(StarRocksParser.DECOMMISSION, 0)

        def DISABLE(self):
            return self.getToken(StarRocksParser.DISABLE, 0)

        def DISK(self):
            return self.getToken(StarRocksParser.DISK, 0)

        def DISTRIBUTION(self):
            return self.getToken(StarRocksParser.DISTRIBUTION, 0)

        def DUPLICATE(self):
            return self.getToken(StarRocksParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(StarRocksParser.DYNAMIC, 0)

        def DISTRIBUTED(self):
            return self.getToken(StarRocksParser.DISTRIBUTED, 0)

        def DICTIONARY(self):
            return self.getToken(StarRocksParser.DICTIONARY, 0)

        def DICTIONARY_GET(self):
            return self.getToken(StarRocksParser.DICTIONARY_GET, 0)

        def DEALLOCATE(self):
            return self.getToken(StarRocksParser.DEALLOCATE, 0)

        def ENABLE(self):
            return self.getToken(StarRocksParser.ENABLE, 0)

        def END(self):
            return self.getToken(StarRocksParser.END, 0)

        def ENGINE(self):
            return self.getToken(StarRocksParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(StarRocksParser.ENGINES, 0)

        def ERRORS(self):
            return self.getToken(StarRocksParser.ERRORS, 0)

        def EVENTS(self):
            return self.getToken(StarRocksParser.EVENTS, 0)

        def EXECUTE(self):
            return self.getToken(StarRocksParser.EXECUTE, 0)

        def EXTERNAL(self):
            return self.getToken(StarRocksParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(StarRocksParser.EXTRACT, 0)

        def EVERY(self):
            return self.getToken(StarRocksParser.EVERY, 0)

        def ENCLOSE(self):
            return self.getToken(StarRocksParser.ENCLOSE, 0)

        def ESCAPE(self):
            return self.getToken(StarRocksParser.ESCAPE, 0)

        def EXPORT(self):
            return self.getToken(StarRocksParser.EXPORT, 0)

        def FAILPOINT(self):
            return self.getToken(StarRocksParser.FAILPOINT, 0)

        def FAILPOINTS(self):
            return self.getToken(StarRocksParser.FAILPOINTS, 0)

        def FIELDS(self):
            return self.getToken(StarRocksParser.FIELDS, 0)

        def FILE(self):
            return self.getToken(StarRocksParser.FILE, 0)

        def FILTER(self):
            return self.getToken(StarRocksParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(StarRocksParser.FIRST, 0)

        def FLOOR(self):
            return self.getToken(StarRocksParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(StarRocksParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(StarRocksParser.FORMAT, 0)

        def FN(self):
            return self.getToken(StarRocksParser.FN, 0)

        def FRONTEND(self):
            return self.getToken(StarRocksParser.FRONTEND, 0)

        def FRONTENDS(self):
            return self.getToken(StarRocksParser.FRONTENDS, 0)

        def FOLLOWER(self):
            return self.getToken(StarRocksParser.FOLLOWER, 0)

        def FREE(self):
            return self.getToken(StarRocksParser.FREE, 0)

        def FUNCTIONS(self):
            return self.getToken(StarRocksParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(StarRocksParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(StarRocksParser.GRANTS, 0)

        def GROUP_CONCAT(self):
            return self.getToken(StarRocksParser.GROUP_CONCAT, 0)

        def HASH(self):
            return self.getToken(StarRocksParser.HASH, 0)

        def HISTOGRAM(self):
            return self.getToken(StarRocksParser.HISTOGRAM, 0)

        def HELP(self):
            return self.getToken(StarRocksParser.HELP, 0)

        def HLL_UNION(self):
            return self.getToken(StarRocksParser.HLL_UNION, 0)

        def HOST(self):
            return self.getToken(StarRocksParser.HOST, 0)

        def HOUR(self):
            return self.getToken(StarRocksParser.HOUR, 0)

        def HUB(self):
            return self.getToken(StarRocksParser.HUB, 0)

        def IDENTIFIED(self):
            return self.getToken(StarRocksParser.IDENTIFIED, 0)

        def IMAGE(self):
            return self.getToken(StarRocksParser.IMAGE, 0)

        def IMPERSONATE(self):
            return self.getToken(StarRocksParser.IMPERSONATE, 0)

        def INACTIVE(self):
            return self.getToken(StarRocksParser.INACTIVE, 0)

        def INCREMENTAL(self):
            return self.getToken(StarRocksParser.INCREMENTAL, 0)

        def INDEXES(self):
            return self.getToken(StarRocksParser.INDEXES, 0)

        def INSTALL(self):
            return self.getToken(StarRocksParser.INSTALL, 0)

        def INTEGRATION(self):
            return self.getToken(StarRocksParser.INTEGRATION, 0)

        def INTEGRATIONS(self):
            return self.getToken(StarRocksParser.INTEGRATIONS, 0)

        def INTERMEDIATE(self):
            return self.getToken(StarRocksParser.INTERMEDIATE, 0)

        def INTERVAL(self):
            return self.getToken(StarRocksParser.INTERVAL, 0)

        def ISOLATION(self):
            return self.getToken(StarRocksParser.ISOLATION, 0)

        def JOB(self):
            return self.getToken(StarRocksParser.JOB, 0)

        def LABEL(self):
            return self.getToken(StarRocksParser.LABEL, 0)

        def LAST(self):
            return self.getToken(StarRocksParser.LAST, 0)

        def LESS(self):
            return self.getToken(StarRocksParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(StarRocksParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(StarRocksParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(StarRocksParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(StarRocksParser.LOCATION, 0)

        def LOGS(self):
            return self.getToken(StarRocksParser.LOGS, 0)

        def LOGICAL(self):
            return self.getToken(StarRocksParser.LOGICAL, 0)

        def LOW_PRIORITY(self):
            return self.getToken(StarRocksParser.LOW_PRIORITY, 0)

        def LOCK(self):
            return self.getToken(StarRocksParser.LOCK, 0)

        def LOCATIONS(self):
            return self.getToken(StarRocksParser.LOCATIONS, 0)

        def MANUAL(self):
            return self.getToken(StarRocksParser.MANUAL, 0)

        def MAP(self):
            return self.getToken(StarRocksParser.MAP, 0)

        def MAPPING(self):
            return self.getToken(StarRocksParser.MAPPING, 0)

        def MAPPINGS(self):
            return self.getToken(StarRocksParser.MAPPINGS, 0)

        def MASKING(self):
            return self.getToken(StarRocksParser.MASKING, 0)

        def MATCH(self):
            return self.getToken(StarRocksParser.MATCH, 0)

        def MATERIALIZED(self):
            return self.getToken(StarRocksParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(StarRocksParser.MAX, 0)

        def META(self):
            return self.getToken(StarRocksParser.META, 0)

        def MIN(self):
            return self.getToken(StarRocksParser.MIN, 0)

        def MINUTE(self):
            return self.getToken(StarRocksParser.MINUTE, 0)

        def MODE(self):
            return self.getToken(StarRocksParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(StarRocksParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(StarRocksParser.MONTH, 0)

        def MERGE(self):
            return self.getToken(StarRocksParser.MERGE, 0)

        def MINUS(self):
            return self.getToken(StarRocksParser.MINUS, 0)

        def NAME(self):
            return self.getToken(StarRocksParser.NAME, 0)

        def NAMES(self):
            return self.getToken(StarRocksParser.NAMES, 0)

        def NEGATIVE(self):
            return self.getToken(StarRocksParser.NEGATIVE, 0)

        def NO(self):
            return self.getToken(StarRocksParser.NO, 0)

        def NODE(self):
            return self.getToken(StarRocksParser.NODE, 0)

        def NODES(self):
            return self.getToken(StarRocksParser.NODES, 0)

        def NONE(self):
            return self.getToken(StarRocksParser.NONE, 0)

        def NULLS(self):
            return self.getToken(StarRocksParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(StarRocksParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(StarRocksParser.NUMERIC, 0)

        def OBSERVER(self):
            return self.getToken(StarRocksParser.OBSERVER, 0)

        def OF(self):
            return self.getToken(StarRocksParser.OF, 0)

        def OFFSET(self):
            return self.getToken(StarRocksParser.OFFSET, 0)

        def ONLY(self):
            return self.getToken(StarRocksParser.ONLY, 0)

        def OPTIMIZER(self):
            return self.getToken(StarRocksParser.OPTIMIZER, 0)

        def OPEN(self):
            return self.getToken(StarRocksParser.OPEN, 0)

        def OPERATE(self):
            return self.getToken(StarRocksParser.OPERATE, 0)

        def OPTION(self):
            return self.getToken(StarRocksParser.OPTION, 0)

        def OVERWRITE(self):
            return self.getToken(StarRocksParser.OVERWRITE, 0)

        def PARTITIONS(self):
            return self.getToken(StarRocksParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(StarRocksParser.PASSWORD, 0)

        def PATH(self):
            return self.getToken(StarRocksParser.PATH, 0)

        def PAUSE(self):
            return self.getToken(StarRocksParser.PAUSE, 0)

        def PENDING(self):
            return self.getToken(StarRocksParser.PENDING, 0)

        def PERCENTILE_UNION(self):
            return self.getToken(StarRocksParser.PERCENTILE_UNION, 0)

        def PIVOT(self):
            return self.getToken(StarRocksParser.PIVOT, 0)

        def PLUGIN(self):
            return self.getToken(StarRocksParser.PLUGIN, 0)

        def PLUGINS(self):
            return self.getToken(StarRocksParser.PLUGINS, 0)

        def POLICY(self):
            return self.getToken(StarRocksParser.POLICY, 0)

        def POLICIES(self):
            return self.getToken(StarRocksParser.POLICIES, 0)

        def PERCENT_RANK(self):
            return self.getToken(StarRocksParser.PERCENT_RANK, 0)

        def PRECEDING(self):
            return self.getToken(StarRocksParser.PRECEDING, 0)

        def PRIORITY(self):
            return self.getToken(StarRocksParser.PRIORITY, 0)

        def PROC(self):
            return self.getToken(StarRocksParser.PROC, 0)

        def PROCESSLIST(self):
            return self.getToken(StarRocksParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(StarRocksParser.PROFILE, 0)

        def PROFILELIST(self):
            return self.getToken(StarRocksParser.PROFILELIST, 0)

        def PRIVILEGES(self):
            return self.getToken(StarRocksParser.PRIVILEGES, 0)

        def PROBABILITY(self):
            return self.getToken(StarRocksParser.PROBABILITY, 0)

        def PROPERTIES(self):
            return self.getToken(StarRocksParser.PROPERTIES, 0)

        def PROPERTY(self):
            return self.getToken(StarRocksParser.PROPERTY, 0)

        def PIPE(self):
            return self.getToken(StarRocksParser.PIPE, 0)

        def PIPES(self):
            return self.getToken(StarRocksParser.PIPES, 0)

        def QUARTER(self):
            return self.getToken(StarRocksParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(StarRocksParser.QUERY, 0)

        def QUERIES(self):
            return self.getToken(StarRocksParser.QUERIES, 0)

        def QUEUE(self):
            return self.getToken(StarRocksParser.QUEUE, 0)

        def QUOTA(self):
            return self.getToken(StarRocksParser.QUOTA, 0)

        def QUALIFY(self):
            return self.getToken(StarRocksParser.QUALIFY, 0)

        def REASON(self):
            return self.getToken(StarRocksParser.REASON, 0)

        def REMOVE(self):
            return self.getToken(StarRocksParser.REMOVE, 0)

        def REWRITE(self):
            return self.getToken(StarRocksParser.REWRITE, 0)

        def RANDOM(self):
            return self.getToken(StarRocksParser.RANDOM, 0)

        def RANK(self):
            return self.getToken(StarRocksParser.RANK, 0)

        def RECOVER(self):
            return self.getToken(StarRocksParser.RECOVER, 0)

        def REFRESH(self):
            return self.getToken(StarRocksParser.REFRESH, 0)

        def REPAIR(self):
            return self.getToken(StarRocksParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(StarRocksParser.REPEATABLE, 0)

        def REPLACE_IF_NOT_NULL(self):
            return self.getToken(StarRocksParser.REPLACE_IF_NOT_NULL, 0)

        def REPLICA(self):
            return self.getToken(StarRocksParser.REPLICA, 0)

        def REPOSITORY(self):
            return self.getToken(StarRocksParser.REPOSITORY, 0)

        def REPOSITORIES(self):
            return self.getToken(StarRocksParser.REPOSITORIES, 0)

        def RESOURCE(self):
            return self.getToken(StarRocksParser.RESOURCE, 0)

        def RESOURCES(self):
            return self.getToken(StarRocksParser.RESOURCES, 0)

        def RESTORE(self):
            return self.getToken(StarRocksParser.RESTORE, 0)

        def RESUME(self):
            return self.getToken(StarRocksParser.RESUME, 0)

        def RETURNS(self):
            return self.getToken(StarRocksParser.RETURNS, 0)

        def RETRY(self):
            return self.getToken(StarRocksParser.RETRY, 0)

        def REVERT(self):
            return self.getToken(StarRocksParser.REVERT, 0)

        def ROLE(self):
            return self.getToken(StarRocksParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(StarRocksParser.ROLES, 0)

        def ROLLUP(self):
            return self.getToken(StarRocksParser.ROLLUP, 0)

        def ROLLBACK(self):
            return self.getToken(StarRocksParser.ROLLBACK, 0)

        def ROUTINE(self):
            return self.getToken(StarRocksParser.ROUTINE, 0)

        def ROW(self):
            return self.getToken(StarRocksParser.ROW, 0)

        def RUNNING(self):
            return self.getToken(StarRocksParser.RUNNING, 0)

        def RULE(self):
            return self.getToken(StarRocksParser.RULE, 0)

        def RULES(self):
            return self.getToken(StarRocksParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(StarRocksParser.SAMPLE, 0)

        def SCHEDULE(self):
            return self.getToken(StarRocksParser.SCHEDULE, 0)

        def SCHEDULER(self):
            return self.getToken(StarRocksParser.SCHEDULER, 0)

        def SECOND(self):
            return self.getToken(StarRocksParser.SECOND, 0)

        def SECURITY(self):
            return self.getToken(StarRocksParser.SECURITY, 0)

        def SEPARATOR(self):
            return self.getToken(StarRocksParser.SEPARATOR, 0)

        def SERIALIZABLE(self):
            return self.getToken(StarRocksParser.SERIALIZABLE, 0)

        def SEMI(self):
            return self.getToken(StarRocksParser.SEMI, 0)

        def SESSION(self):
            return self.getToken(StarRocksParser.SESSION, 0)

        def SETS(self):
            return self.getToken(StarRocksParser.SETS, 0)

        def SIGNED(self):
            return self.getToken(StarRocksParser.SIGNED, 0)

        def SNAPSHOT(self):
            return self.getToken(StarRocksParser.SNAPSHOT, 0)

        def SQLBLACKLIST(self):
            return self.getToken(StarRocksParser.SQLBLACKLIST, 0)

        def START(self):
            return self.getToken(StarRocksParser.START, 0)

        def STREAM(self):
            return self.getToken(StarRocksParser.STREAM, 0)

        def SUM(self):
            return self.getToken(StarRocksParser.SUM, 0)

        def STATUS(self):
            return self.getToken(StarRocksParser.STATUS, 0)

        def STOP(self):
            return self.getToken(StarRocksParser.STOP, 0)

        def SKIP_HEADER(self):
            return self.getToken(StarRocksParser.SKIP_HEADER, 0)

        def SWAP(self):
            return self.getToken(StarRocksParser.SWAP, 0)

        def STORAGE(self):
            return self.getToken(StarRocksParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(StarRocksParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(StarRocksParser.STRUCT, 0)

        def STATS(self):
            return self.getToken(StarRocksParser.STATS, 0)

        def SUBMIT(self):
            return self.getToken(StarRocksParser.SUBMIT, 0)

        def SUSPEND(self):
            return self.getToken(StarRocksParser.SUSPEND, 0)

        def SYNC(self):
            return self.getToken(StarRocksParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(StarRocksParser.SYSTEM_TIME, 0)

        def TABLES(self):
            return self.getToken(StarRocksParser.TABLES, 0)

        def TABLET(self):
            return self.getToken(StarRocksParser.TABLET, 0)

        def TABLETS(self):
            return self.getToken(StarRocksParser.TABLETS, 0)

        def TASK(self):
            return self.getToken(StarRocksParser.TASK, 0)

        def TEMPORARY(self):
            return self.getToken(StarRocksParser.TEMPORARY, 0)

        def TIMESTAMP(self):
            return self.getToken(StarRocksParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(StarRocksParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(StarRocksParser.TIMESTAMPDIFF, 0)

        def THAN(self):
            return self.getToken(StarRocksParser.THAN, 0)

        def TIME(self):
            return self.getToken(StarRocksParser.TIME, 0)

        def TIMES(self):
            return self.getToken(StarRocksParser.TIMES, 0)

        def TRANSACTION(self):
            return self.getToken(StarRocksParser.TRANSACTION, 0)

        def TRACE(self):
            return self.getToken(StarRocksParser.TRACE, 0)

        def TRIM_SPACE(self):
            return self.getToken(StarRocksParser.TRIM_SPACE, 0)

        def TRIGGERS(self):
            return self.getToken(StarRocksParser.TRIGGERS, 0)

        def TRUNCATE(self):
            return self.getToken(StarRocksParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(StarRocksParser.TYPE, 0)

        def TYPES(self):
            return self.getToken(StarRocksParser.TYPES, 0)

        def UNBOUNDED(self):
            return self.getToken(StarRocksParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(StarRocksParser.UNCOMMITTED, 0)

        def UNSET(self):
            return self.getToken(StarRocksParser.UNSET, 0)

        def UNINSTALL(self):
            return self.getToken(StarRocksParser.UNINSTALL, 0)

        def USAGE(self):
            return self.getToken(StarRocksParser.USAGE, 0)

        def USER(self):
            return self.getToken(StarRocksParser.USER, 0)

        def USERS(self):
            return self.getToken(StarRocksParser.USERS, 0)

        def UNLOCK(self):
            return self.getToken(StarRocksParser.UNLOCK, 0)

        def VALUE(self):
            return self.getToken(StarRocksParser.VALUE, 0)

        def VARBINARY(self):
            return self.getToken(StarRocksParser.VARBINARY, 0)

        def VARIABLES(self):
            return self.getToken(StarRocksParser.VARIABLES, 0)

        def VIEW(self):
            return self.getToken(StarRocksParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(StarRocksParser.VIEWS, 0)

        def VERBOSE(self):
            return self.getToken(StarRocksParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(StarRocksParser.VERSION, 0)

        def VOLUME(self):
            return self.getToken(StarRocksParser.VOLUME, 0)

        def VOLUMES(self):
            return self.getToken(StarRocksParser.VOLUMES, 0)

        def WARNINGS(self):
            return self.getToken(StarRocksParser.WARNINGS, 0)

        def WEEK(self):
            return self.getToken(StarRocksParser.WEEK, 0)

        def WHITELIST(self):
            return self.getToken(StarRocksParser.WHITELIST, 0)

        def WORK(self):
            return self.getToken(StarRocksParser.WORK, 0)

        def WRITE(self):
            return self.getToken(StarRocksParser.WRITE, 0)

        def WAREHOUSE(self):
            return self.getToken(StarRocksParser.WAREHOUSE, 0)

        def WAREHOUSES(self):
            return self.getToken(StarRocksParser.WAREHOUSES, 0)

        def YEAR(self):
            return self.getToken(StarRocksParser.YEAR, 0)

        def DOTDOTDOT(self):
            return self.getToken(StarRocksParser.DOTDOTDOT, 0)

        def NGRAMBF(self):
            return self.getToken(StarRocksParser.NGRAMBF, 0)

        def FIELD(self):
            return self.getToken(StarRocksParser.FIELD, 0)

        def ARRAY_ELEMENT(self):
            return self.getToken(StarRocksParser.ARRAY_ELEMENT, 0)

        def getRuleIndex(self):
            return StarRocksParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = StarRocksParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7090
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -2907113422670155540) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9201314769469032183) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2712845667094392313) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -9464603288729961) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -1441188714943291911) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -2309397937273438359) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -3170627265517080645) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & 140737488363583) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[316] = self.queryPrimary_sempred
        self._predicates[355] = self.expression_sempred
        self._predicates[357] = self.booleanExpression_sempred
        self._predicates[361] = self.valueExpression_sempred
        self._predicates[362] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryPrimary_sempred(self, localctx:QueryPrimaryContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 4)
         




