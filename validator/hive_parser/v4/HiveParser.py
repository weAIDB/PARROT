# Generated from sql/hive/v4/HiveParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,424,5262,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,1,0,1,0,3,0,999,8,0,1,
        0,1,0,1,1,1,1,5,1,1005,8,1,10,1,12,1,1008,9,1,1,1,1,1,1,1,3,1,1013,
        8,1,1,2,1,2,1,2,1,2,1,2,3,2,1020,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,3,2,1030,8,2,1,2,3,2,1033,8,2,1,2,1,2,3,2,1037,8,2,1,3,1,3,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
        5,1057,8,5,1,6,1,6,1,6,3,6,1062,8,6,1,6,1,6,1,6,3,6,1067,8,6,1,6,
        1,6,1,6,1,6,3,6,1073,8,6,1,7,1,7,3,7,1077,8,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1090,8,8,1,9,1,9,3,9,1094,8,9,1,9,
        1,9,3,9,1098,8,9,1,9,1,9,1,9,3,9,1103,8,9,1,10,1,10,1,10,1,10,1,
        10,3,10,1110,8,10,1,10,1,10,3,10,1114,8,10,1,11,1,11,1,11,3,11,1119,
        8,11,1,12,1,12,1,12,1,12,1,12,3,12,1126,8,12,1,12,1,12,3,12,1130,
        8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,1139,8,14,10,14,12,
        14,1142,9,14,1,15,1,15,1,15,3,15,1147,8,15,1,16,1,16,1,16,1,16,1,
        16,3,16,1154,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1201,8,17,1,
        18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,
        22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
        26,3,26,1230,8,26,1,26,1,26,3,26,1234,8,26,1,26,3,26,1237,8,26,1,
        26,3,26,1240,8,26,1,26,1,26,1,26,3,26,1245,8,26,1,26,1,26,1,26,1,
        26,3,26,1251,8,26,1,26,1,26,3,26,1255,8,26,1,26,1,26,1,26,1,26,3,
        26,1261,8,26,3,26,1263,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,5,30,1278,8,30,10,30,12,30,1281,9,30,
        1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,3,33,1292,8,33,1,33,
        1,33,3,33,1296,8,33,1,34,1,34,1,34,1,35,1,35,3,35,1303,8,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,1311,8,35,1,35,3,35,1314,8,35,1,36,
        1,36,1,36,3,36,1319,8,36,1,36,1,36,3,36,1323,8,36,1,36,3,36,1326,
        8,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,1336,8,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,1344,8,38,5,38,1346,8,38,10,38,12,
        38,1349,9,38,3,38,1351,8,38,1,39,1,39,3,39,1355,8,39,1,40,1,40,3,
        40,1359,8,40,1,40,3,40,1362,8,40,1,41,1,41,1,41,3,41,1367,8,41,1,
        41,1,41,1,41,1,41,3,41,1373,8,41,1,41,1,41,1,41,3,41,1378,8,41,1,
        41,1,41,1,41,3,41,1383,8,41,1,41,1,41,3,41,1387,8,41,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1398,8,42,3,42,1400,8,42,1,
        42,1,42,3,42,1404,8,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,
        45,1414,8,45,1,45,1,45,3,45,1418,8,45,1,45,1,45,1,45,1,45,3,45,1424,
        8,45,1,45,3,45,1427,8,45,1,45,1,45,1,45,1,45,1,45,3,45,1434,8,45,
        1,45,1,45,1,45,3,45,1439,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,
        1447,8,45,1,45,1,45,1,45,3,45,1452,8,45,1,45,1,45,3,45,1456,8,45,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,1464,8,45,1,45,1,45,1,45,3,45,
        1469,8,45,1,45,1,45,1,45,1,45,3,45,1475,8,45,1,45,1,45,1,45,1,45,
        3,45,1481,8,45,1,45,3,45,1484,8,45,1,45,3,45,1487,8,45,1,45,3,45,
        1490,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1499,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,3,45,1507,8,45,1,45,1,45,1,45,3,45,1512,
        8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1520,8,45,1,45,1,45,1,45,
        1,45,1,45,3,45,1527,8,45,1,45,3,45,1530,8,45,1,45,3,45,1533,8,45,
        3,45,1535,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1543,8,45,1,45,
        3,45,1546,8,45,1,45,3,45,1549,8,45,1,45,3,45,1552,8,45,1,45,3,45,
        1555,8,45,1,45,3,45,1558,8,45,1,45,3,45,1561,8,45,1,45,3,45,1564,
        8,45,1,45,3,45,1567,8,45,1,45,3,45,1570,8,45,1,45,3,45,1573,8,45,
        3,45,1575,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        3,45,1587,8,45,1,45,1,45,3,45,1591,8,45,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,3,46,1601,8,46,1,47,1,47,1,47,1,47,3,47,1607,8,47,
        1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,
        3,50,1622,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,3,54,1639,8,54,1,54,1,54,1,54,3,54,1644,
        8,54,1,55,1,55,3,55,1648,8,55,1,55,1,55,3,55,1652,8,55,1,55,1,55,
        1,55,1,56,1,56,3,56,1659,8,56,1,56,1,56,1,56,5,56,1664,8,56,10,56,
        12,56,1667,9,56,1,56,1,56,1,56,3,56,1672,8,56,1,57,1,57,3,57,1676,
        8,57,1,57,3,57,1679,8,57,1,57,1,57,1,57,5,57,1684,8,57,10,57,12,
        57,1687,9,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,
        59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1709,8,61,1,
        62,1,62,1,62,3,62,1714,8,62,1,62,1,62,3,62,1718,8,62,1,63,1,63,1,
        63,1,63,1,64,1,64,3,64,1726,8,64,1,65,1,65,1,65,1,66,1,66,1,66,1,
        66,3,66,1735,8,66,1,66,1,66,3,66,1739,8,66,1,66,1,66,1,66,1,66,3,
        66,1745,8,66,1,67,1,67,1,67,1,67,3,67,1751,8,67,1,67,1,67,1,67,1,
        67,1,67,3,67,1758,8,67,1,67,3,67,1761,8,67,1,67,1,67,1,67,1,67,3,
        67,1767,8,67,1,68,1,68,1,68,5,68,1772,8,68,10,68,12,68,1775,9,68,
        1,69,1,69,1,69,1,69,1,69,3,69,1782,8,69,1,70,1,70,1,71,1,71,1,71,
        5,71,1789,8,71,10,71,12,71,1792,9,71,1,72,1,72,1,72,1,72,1,72,1,
        72,3,72,1800,8,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,
        75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,3,77,1820,8,77,1,77,1,
        77,1,77,1,77,1,77,3,77,1827,8,77,3,77,1829,8,77,1,78,1,78,1,78,5,
        78,1834,8,78,10,78,12,78,1837,9,78,1,79,1,79,1,79,1,80,1,80,1,81,
        1,81,3,81,1846,8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1854,8,81,
        1,82,1,82,3,82,1858,8,82,1,82,1,82,3,82,1862,8,82,1,82,1,82,1,83,
        1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1875,8,84,1,84,1,84,
        1,84,1,85,1,85,1,85,1,85,3,85,1884,8,85,1,85,1,85,1,86,1,86,3,86,
        1890,8,86,1,86,1,86,3,86,1894,8,86,1,86,1,86,1,86,1,86,1,86,3,86,
        1901,8,86,1,86,3,86,1904,8,86,1,86,3,86,1907,8,86,1,86,3,86,1910,
        8,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1922,
        8,87,1,87,1,87,1,88,1,88,3,88,1928,8,88,1,89,1,89,1,89,1,89,1,89,
        1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,
        1,92,1,92,1,92,1,93,1,93,1,93,3,93,1954,8,93,1,93,1,93,1,94,1,94,
        1,94,1,94,3,94,1962,8,94,1,94,1,94,3,94,1966,8,94,1,94,3,94,1969,
        8,94,1,94,3,94,1972,8,94,1,94,3,94,1975,8,94,1,94,3,94,1978,8,94,
        1,94,3,94,1981,8,94,1,94,3,94,1984,8,94,1,94,3,94,1987,8,94,1,94,
        1,94,1,94,1,95,1,95,1,95,1,95,3,95,1996,8,95,1,95,1,95,1,96,1,96,
        1,96,1,96,1,96,1,96,3,96,2006,8,96,1,96,3,96,2009,8,96,1,96,1,96,
        1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,
        1,99,1,99,1,99,3,99,2029,8,99,1,100,1,100,1,100,1,100,3,100,2035,
        8,100,1,100,1,100,1,100,1,100,3,100,2041,8,100,1,100,3,100,2044,
        8,100,3,100,2046,8,100,1,101,1,101,1,101,1,101,1,102,3,102,2053,
        8,102,1,102,1,102,1,102,1,103,1,103,3,103,2060,8,103,1,104,1,104,
        3,104,2064,8,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
        3,106,2074,8,106,1,106,1,106,1,106,3,106,2079,8,106,1,106,1,106,
        1,107,1,107,1,107,5,107,2086,8,107,10,107,12,107,2089,9,107,1,108,
        1,108,1,108,5,108,2094,8,108,10,108,12,108,2097,9,108,1,109,1,109,
        1,109,5,109,2102,8,109,10,109,12,109,2105,9,109,1,110,1,110,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,3,111,2122,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,3,112,2135,8,112,1,112,1,112,1,112,1,112,
        1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,3,114,2156,8,114,1,115,1,115,3,115,2160,
        8,115,1,116,1,116,1,116,1,117,1,117,1,117,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,3,118,2175,8,118,1,119,1,119,1,119,1,119,3,119,
        2181,8,119,1,119,3,119,2184,8,119,1,119,3,119,2187,8,119,1,119,3,
        119,2190,8,119,1,119,3,119,2193,8,119,1,120,1,120,3,120,2197,8,120,
        1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,5,123,
        2209,8,123,10,123,12,123,2212,9,123,1,123,1,123,1,123,5,123,2217,
        8,123,10,123,12,123,2220,9,123,3,123,2222,8,123,1,124,1,124,1,124,
        1,124,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,
        2237,8,126,1,127,1,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,
        1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,
        1,130,1,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,3,131,2271,8,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,
        2279,8,131,1,131,1,131,1,131,3,131,2284,8,131,1,131,1,131,1,131,
        1,131,1,131,1,131,3,131,2292,8,131,1,131,1,131,1,131,3,131,2297,
        8,131,1,131,1,131,1,131,3,131,2302,8,131,1,132,1,132,1,132,1,133,
        1,133,1,133,5,133,2310,8,133,10,133,12,133,2313,9,133,1,134,1,134,
        1,134,5,134,2318,8,134,10,134,12,134,2321,9,134,1,135,1,135,1,135,
        5,135,2326,8,135,10,135,12,135,2329,9,135,1,136,1,136,1,136,5,136,
        2334,8,136,10,136,12,136,2337,9,136,1,137,1,137,1,138,1,138,1,138,
        1,138,1,138,1,138,3,138,2347,8,138,5,138,2349,8,138,10,138,12,138,
        2352,9,138,1,139,1,139,1,139,5,139,2357,8,139,10,139,12,139,2360,
        9,139,1,140,1,140,1,140,1,140,1,141,1,141,3,141,2368,8,141,1,141,
        3,141,2371,8,141,1,142,1,142,1,143,1,143,1,144,1,144,1,144,3,144,
        2380,8,144,1,145,1,145,1,146,1,146,3,146,2386,8,146,1,146,1,146,
        3,146,2390,8,146,1,147,1,147,1,147,1,147,3,147,2396,8,147,1,148,
        1,148,3,148,2400,8,148,1,149,1,149,1,149,1,150,1,150,1,150,1,150,
        1,150,1,151,1,151,3,151,2412,8,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,3,151,2421,8,151,1,152,1,152,1,152,1,152,1,152,1,152,
        1,152,1,152,1,152,3,152,2432,8,152,1,153,1,153,3,153,2436,8,153,
        1,154,1,154,1,154,5,154,2441,8,154,10,154,12,154,2444,9,154,1,155,
        1,155,1,155,1,155,1,156,1,156,1,156,5,156,2453,8,156,10,156,12,156,
        2456,9,156,1,157,1,157,1,158,1,158,3,158,2462,8,158,1,159,1,159,
        1,160,1,160,1,160,1,161,1,161,3,161,2471,8,161,1,161,3,161,2474,
        8,161,1,162,1,162,1,162,5,162,2479,8,162,10,162,12,162,2482,9,162,
        1,163,1,163,1,163,3,163,2487,8,163,1,164,1,164,1,165,1,165,3,165,
        2493,8,165,1,165,3,165,2496,8,165,1,166,1,166,1,166,1,166,3,166,
        2502,8,166,1,167,1,167,3,167,2506,8,167,1,168,1,168,3,168,2510,8,
        168,1,169,1,169,1,169,3,169,2515,8,169,1,169,1,169,3,169,2519,8,
        169,1,170,1,170,3,170,2523,8,170,1,171,1,171,3,171,2527,8,171,1,
        171,1,171,1,171,1,171,1,171,1,171,3,171,2535,8,171,1,172,1,172,3,
        172,2539,8,172,1,172,1,172,3,172,2543,8,172,1,173,1,173,3,173,2547,
        8,173,1,174,1,174,3,174,2551,8,174,1,174,1,174,1,174,1,174,1,174,
        1,174,3,174,2559,8,174,1,175,1,175,3,175,2563,8,175,1,175,1,175,
        3,175,2567,8,175,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2575,
        8,176,1,177,1,177,1,177,3,177,2580,8,177,1,178,1,178,1,178,3,178,
        2585,8,178,1,179,1,179,3,179,2589,8,179,1,180,1,180,3,180,2593,8,
        180,1,181,1,181,1,181,1,181,1,181,3,181,2600,8,181,1,182,1,182,1,
        183,1,183,1,183,5,183,2607,8,183,10,183,12,183,2610,9,183,1,184,
        1,184,1,184,1,184,1,184,3,184,2617,8,184,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,1,185,3,185,2628,8,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,3,185,2646,8,185,1,185,3,185,2649,8,185,1,185,1,185,
        1,185,1,185,3,185,2655,8,185,1,186,1,186,1,186,1,186,1,186,1,187,
        1,187,1,187,1,187,1,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,189,1,189,1,189,1,189,1,189,1,190,1,190,3,190,2681,8,190,1,191,
        3,191,2684,8,191,1,191,1,191,1,192,1,192,3,192,2690,8,192,1,193,
        1,193,1,193,1,193,5,193,2696,8,193,10,193,12,193,2699,9,193,1,194,
        1,194,1,194,1,194,1,194,3,194,2706,8,194,1,194,1,194,1,194,1,194,
        1,194,1,195,1,195,1,195,1,195,5,195,2717,8,195,10,195,12,195,2720,
        9,195,1,196,1,196,4,196,2724,8,196,11,196,12,196,2725,1,197,1,197,
        1,197,1,197,3,197,2732,8,197,1,198,1,198,3,198,2736,8,198,1,198,
        3,198,2739,8,198,1,198,3,198,2742,8,198,1,198,3,198,2745,8,198,1,
        198,3,198,2748,8,198,1,198,3,198,2751,8,198,1,198,1,198,1,198,1,
        198,1,198,3,198,2758,8,198,1,199,1,199,3,199,2762,8,199,1,199,3,
        199,2765,8,199,1,199,3,199,2768,8,199,1,199,3,199,2771,8,199,1,199,
        3,199,2774,8,199,1,199,3,199,2777,8,199,1,200,1,200,1,200,4,200,
        2782,8,200,11,200,12,200,2783,1,201,3,201,2787,8,201,1,201,1,201,
        1,202,1,202,1,202,3,202,2794,8,202,1,202,3,202,2797,8,202,1,202,
        3,202,2800,8,202,1,202,3,202,2803,8,202,1,202,3,202,2806,8,202,1,
        202,3,202,2809,8,202,1,202,3,202,2812,8,202,1,202,3,202,2815,8,202,
        1,202,3,202,2818,8,202,1,202,3,202,2821,8,202,1,202,3,202,2824,8,
        202,1,202,1,202,3,202,2828,8,202,1,202,3,202,2831,8,202,1,202,3,
        202,2834,8,202,1,202,3,202,2837,8,202,1,202,3,202,2840,8,202,1,202,
        3,202,2843,8,202,1,202,3,202,2846,8,202,1,202,3,202,2849,8,202,1,
        202,3,202,2852,8,202,1,202,3,202,2855,8,202,1,202,3,202,2858,8,202,
        3,202,2860,8,202,1,203,1,203,1,203,1,203,3,203,2866,8,203,1,203,
        1,203,3,203,2870,8,203,1,203,1,203,1,203,1,203,1,203,3,203,2877,
        8,203,3,203,2879,8,203,1,204,3,204,2882,8,204,1,204,1,204,1,204,
        3,204,2887,8,204,1,204,3,204,2890,8,204,1,204,1,204,3,204,2894,8,
        204,1,205,1,205,1,205,3,205,2899,8,205,1,205,1,205,1,205,1,205,3,
        205,2905,8,205,1,206,1,206,1,206,1,206,3,206,2911,8,206,1,207,1,
        207,1,207,1,207,1,208,1,208,3,208,2919,8,208,1,209,1,209,1,209,1,
        209,5,209,2925,8,209,10,209,12,209,2928,9,209,1,210,1,210,1,210,
        1,210,3,210,2934,8,210,1,211,1,211,1,211,1,211,3,211,2940,8,211,
        1,212,1,212,1,212,1,212,1,212,5,212,2947,8,212,10,212,12,212,2950,
        9,212,3,212,2952,8,212,1,213,1,213,3,213,2956,8,213,1,214,1,214,
        1,214,1,215,1,215,1,215,1,215,1,216,1,216,1,217,1,217,3,217,2969,
        8,217,1,218,1,218,3,218,2973,8,218,1,219,1,219,1,219,1,219,1,220,
        1,220,1,220,4,220,2982,8,220,11,220,12,220,2983,1,221,1,221,1,221,
        4,221,2989,8,221,11,221,12,221,2990,1,222,1,222,3,222,2995,8,222,
        1,222,1,222,1,222,3,222,3000,8,222,1,222,3,222,3003,8,222,1,222,
        1,222,1,222,1,222,1,222,1,222,1,223,1,223,5,223,3013,8,223,10,223,
        12,223,3016,9,223,1,223,3,223,3019,8,223,1,224,1,224,1,224,1,224,
        1,224,3,224,3026,8,224,1,224,1,224,1,224,3,224,3031,8,224,1,224,
        1,224,1,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,226,1,226,
        1,226,1,226,1,226,1,227,1,227,1,227,3,227,3051,8,227,1,228,1,228,
        1,228,4,228,3056,8,228,11,228,12,228,3057,1,229,1,229,1,229,1,229,
        1,230,1,230,1,230,1,231,1,231,1,231,1,232,1,232,1,232,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,3,233,3081,8,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,
        3095,8,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,
        3116,8,234,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,3,235,3132,8,235,1,236,1,236,1,236,
        1,236,1,236,1,236,1,237,1,237,1,237,1,237,1,237,3,237,3145,8,237,
        1,238,1,238,3,238,3149,8,238,1,239,1,239,3,239,3153,8,239,1,240,
        1,240,1,241,1,241,1,241,3,241,3160,8,241,1,242,1,242,1,242,1,242,
        1,242,1,243,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,244,
        1,245,1,245,1,245,1,245,1,245,1,246,1,246,1,246,1,246,1,247,1,247,
        3,247,3188,8,247,1,247,1,247,1,247,1,247,1,247,3,247,3195,8,247,
        1,248,1,248,1,248,3,248,3200,8,248,1,249,1,249,1,249,3,249,3205,
        8,249,1,250,1,250,1,250,1,250,1,251,1,251,3,251,3213,8,251,1,251,
        1,251,1,251,1,251,3,251,3219,8,251,1,251,1,251,3,251,3223,8,251,
        1,251,3,251,3226,8,251,1,251,3,251,3229,8,251,1,252,1,252,1,252,
        1,252,3,252,3235,8,252,1,252,1,252,1,252,1,252,1,252,3,252,3242,
        8,252,1,253,1,253,1,253,1,253,1,253,1,254,1,254,1,254,3,254,3252,
        8,254,1,255,1,255,3,255,3256,8,255,1,255,4,255,3259,8,255,11,255,
        12,255,3260,1,256,1,256,3,256,3265,8,256,1,257,1,257,5,257,3269,
        8,257,10,257,12,257,3272,9,257,1,258,1,258,5,258,3276,8,258,10,258,
        12,258,3279,9,258,1,259,1,259,5,259,3283,8,259,10,259,12,259,3286,
        9,259,1,260,1,260,1,260,1,261,1,261,3,261,3293,8,261,1,261,1,261,
        1,261,1,261,1,261,5,261,3300,8,261,10,261,12,261,3303,9,261,1,261,
        3,261,3306,8,261,1,261,3,261,3309,8,261,1,262,1,262,1,262,1,262,
        1,262,1,262,3,262,3317,8,262,1,262,3,262,3320,8,262,1,263,1,263,
        1,263,1,263,1,263,1,263,3,263,3328,8,263,1,263,3,263,3331,8,263,
        1,264,1,264,1,264,1,264,1,264,1,264,3,264,3339,8,264,1,264,1,264,
        3,264,3343,8,264,1,264,1,264,1,264,3,264,3348,8,264,1,265,1,265,
        3,265,3352,8,265,1,266,1,266,1,266,1,266,1,267,1,267,1,267,3,267,
        3361,8,267,1,268,1,268,1,268,1,268,1,268,1,269,1,269,1,269,1,269,
        1,270,1,270,1,270,5,270,3375,8,270,10,270,12,270,3378,9,270,1,271,
        1,271,1,271,1,271,1,272,1,272,1,272,1,272,1,273,1,273,1,273,1,273,
        3,273,3392,8,273,3,273,3394,8,273,1,274,1,274,1,274,1,274,1,274,
        1,274,1,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,3,276,3410,
        8,276,1,276,1,276,1,276,1,276,1,276,3,276,3417,8,276,1,277,1,277,
        1,278,1,278,1,278,1,278,1,279,1,279,1,279,1,280,1,280,1,280,1,281,
        1,281,1,281,3,281,3434,8,281,1,281,3,281,3437,8,281,1,281,3,281,
        3440,8,281,1,281,1,281,1,281,1,281,3,281,3446,8,281,1,282,1,282,
        1,282,1,282,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,284,1,284,
        1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,3,284,3469,8,284,
        1,284,1,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,
        1,285,3,285,3483,8,285,1,285,3,285,3486,8,285,1,286,1,286,1,286,
        3,286,3491,8,286,1,287,1,287,1,287,1,287,1,287,1,288,1,288,1,288,
        1,288,1,288,1,289,1,289,1,289,1,289,1,289,1,290,1,290,1,290,1,290,
        1,290,1,290,1,290,1,290,1,290,3,290,3517,8,290,1,291,1,291,3,291,
        3521,8,291,1,291,3,291,3524,8,291,1,291,3,291,3527,8,291,1,291,1,
        291,3,291,3531,8,291,1,291,1,291,1,291,3,291,3536,8,291,1,291,3,
        291,3539,8,291,1,291,3,291,3542,8,291,1,291,3,291,3545,8,291,1,291,
        3,291,3548,8,291,1,291,1,291,1,291,1,291,3,291,3554,8,291,1,291,
        3,291,3557,8,291,1,291,3,291,3560,8,291,1,291,3,291,3563,8,291,1,
        291,3,291,3566,8,291,1,291,3,291,3569,8,291,1,291,3,291,3572,8,291,
        1,291,3,291,3575,8,291,1,291,3,291,3578,8,291,1,291,1,291,3,291,
        3582,8,291,3,291,3584,8,291,1,291,1,291,1,291,1,291,3,291,3590,8,
        291,1,291,1,291,1,291,3,291,3595,8,291,1,291,3,291,3598,8,291,1,
        291,3,291,3601,8,291,1,291,3,291,3604,8,291,1,291,1,291,1,291,1,
        291,3,291,3610,8,291,1,291,3,291,3613,8,291,1,291,3,291,3616,8,291,
        1,291,3,291,3619,8,291,1,291,3,291,3622,8,291,1,291,3,291,3625,8,
        291,1,291,3,291,3628,8,291,1,291,3,291,3631,8,291,1,291,3,291,3634,
        8,291,1,291,1,291,3,291,3638,8,291,3,291,3640,8,291,3,291,3642,8,
        291,1,292,1,292,1,292,3,292,3647,8,292,1,292,1,292,1,292,1,292,3,
        292,3653,8,292,1,292,1,292,1,292,3,292,3658,8,292,1,293,1,293,1,
        293,1,294,1,294,1,294,1,295,1,295,1,295,1,296,1,296,1,296,1,296,
        1,297,1,297,1,297,3,297,3676,8,297,1,297,1,297,1,298,1,298,1,298,
        1,298,1,298,3,298,3685,8,298,1,299,1,299,1,300,1,300,1,301,1,301,
        1,301,5,301,3694,8,301,10,301,12,301,3697,9,301,1,302,1,302,1,302,
        5,302,3702,8,302,10,302,12,302,3705,9,302,1,303,1,303,1,303,1,304,
        1,304,1,304,1,304,4,304,3714,8,304,11,304,12,304,3715,1,304,3,304,
        3719,8,304,1,305,1,305,5,305,3723,8,305,10,305,12,305,3726,9,305,
        1,305,1,305,5,305,3730,8,305,10,305,12,305,3733,9,305,1,305,1,305,
        5,305,3737,8,305,10,305,12,305,3740,9,305,1,305,1,305,5,305,3744,
        8,305,10,305,12,305,3747,9,305,1,305,1,305,1,305,1,305,3,305,3753,
        8,305,1,306,1,306,1,306,1,306,1,306,1,306,1,306,3,306,3762,8,306,
        5,306,3764,8,306,10,306,12,306,3767,9,306,1,307,1,307,1,307,1,307,
        3,307,3773,8,307,1,307,5,307,3776,8,307,10,307,12,307,3779,9,307,
        1,308,3,308,3782,8,308,1,308,1,308,1,308,1,309,1,309,1,309,1,309,
        1,310,1,310,1,311,1,311,1,311,1,311,1,311,3,311,3798,8,311,1,311,
        1,311,3,311,3802,8,311,3,311,3804,8,311,1,311,3,311,3807,8,311,1,
        312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,5,312,3818,8,
        312,10,312,12,312,3821,9,312,3,312,3823,8,312,1,312,3,312,3826,8,
        312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,5,312,3836,8,
        312,10,312,12,312,3839,9,312,3,312,3841,8,312,1,312,1,312,1,312,
        1,312,1,312,3,312,3848,8,312,1,312,1,312,1,312,1,312,1,312,5,312,
        3855,8,312,10,312,12,312,3858,9,312,1,312,1,312,3,312,3862,8,312,
        3,312,3864,8,312,3,312,3866,8,312,1,313,1,313,1,314,1,314,1,314,
        1,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,5,314,3881,8,314,
        10,314,12,314,3884,9,314,3,314,3886,8,314,1,314,1,314,1,315,1,315,
        1,315,1,315,1,315,3,315,3895,8,315,1,315,1,315,1,316,1,316,3,316,
        3901,8,316,1,317,1,317,3,317,3905,8,317,1,317,3,317,3908,8,317,1,
        317,3,317,3911,8,317,1,317,3,317,3914,8,317,1,317,3,317,3917,8,317,
        1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,3,318,
        3929,8,318,1,319,1,319,3,319,3933,8,319,1,319,3,319,3936,8,319,1,
        319,3,319,3939,8,319,1,320,1,320,1,320,1,320,1,320,3,320,3946,8,
        320,1,320,3,320,3949,8,320,1,321,1,321,1,321,3,321,3954,8,321,1,
        321,1,321,1,322,1,322,1,322,1,322,3,322,3962,8,322,1,322,1,322,1,
        323,1,323,3,323,3968,8,323,1,323,1,323,1,323,3,323,3973,8,323,1,
        323,1,323,3,323,3977,8,323,1,324,1,324,1,324,3,324,3982,8,324,1,
        325,1,325,1,325,1,325,1,325,3,325,3989,8,325,1,325,1,325,1,325,1,
        325,1,325,1,325,1,325,1,325,1,325,1,325,5,325,4001,8,325,10,325,
        12,325,4004,9,325,3,325,4006,8,325,1,325,1,325,3,325,4010,8,325,
        1,326,1,326,1,326,1,327,1,327,1,328,1,328,1,329,1,329,1,329,1,330,
        1,330,1,330,5,330,4025,8,330,10,330,12,330,4028,9,330,1,330,1,330,
        1,330,5,330,4033,8,330,10,330,12,330,4036,9,330,3,330,4038,8,330,
        1,331,1,331,1,332,1,332,1,332,1,332,1,333,1,333,1,333,1,333,1,333,
        3,333,4051,8,333,1,333,1,333,1,333,1,333,1,333,5,333,4058,8,333,
        10,333,12,333,4061,9,333,3,333,4063,8,333,1,333,1,333,1,334,1,334,
        3,334,4069,8,334,1,334,3,334,4072,8,334,1,334,1,334,1,334,3,334,
        4077,8,334,1,334,3,334,4080,8,334,1,335,1,335,1,336,1,336,1,336,
        5,336,4087,8,336,10,336,12,336,4090,9,336,1,337,1,337,1,337,1,337,
        1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,4103,8,337,1,337,
        1,337,1,337,1,337,3,337,4109,8,337,3,337,4111,8,337,1,337,1,337,
        1,337,1,338,1,338,1,338,3,338,4119,8,338,1,338,1,338,1,338,1,338,
        1,338,1,338,5,338,4127,8,338,10,338,12,338,4130,9,338,1,338,1,338,
        3,338,4134,8,338,3,338,4136,8,338,1,339,1,339,1,339,1,339,1,339,
        1,339,1,339,1,339,1,339,1,339,3,339,4148,8,339,1,339,1,339,1,339,
        1,339,3,339,4154,8,339,3,339,4156,8,339,1,339,1,339,1,339,1,340,
        1,340,3,340,4163,8,340,1,341,1,341,1,341,5,341,4168,8,341,10,341,
        12,341,4171,9,341,1,342,1,342,1,342,1,342,5,342,4177,8,342,10,342,
        12,342,4180,9,342,1,343,1,343,1,343,1,343,1,344,1,344,1,344,3,344,
        4189,8,344,1,344,3,344,4192,8,344,1,344,3,344,4195,8,344,1,344,3,
        344,4198,8,344,1,345,1,345,3,345,4202,8,345,1,346,1,346,1,346,1,
        346,1,346,1,346,1,346,3,346,4211,8,346,1,347,1,347,1,347,1,347,1,
        347,1,347,1,347,3,347,4220,8,347,1,348,1,348,1,348,1,348,1,348,1,
        348,3,348,4228,8,348,1,349,1,349,1,349,1,349,3,349,4234,8,349,1,
        350,1,350,1,350,1,350,1,351,1,351,1,351,3,351,4243,8,351,1,352,1,
        352,1,352,1,353,1,353,3,353,4250,8,353,1,353,1,353,1,353,1,353,5,
        353,4256,8,353,10,353,12,353,4259,9,353,1,353,1,353,1,354,1,354,
        1,354,1,354,1,354,3,354,4268,8,354,1,354,1,354,1,354,1,354,1,354,
        1,354,5,354,4276,8,354,10,354,12,354,4279,9,354,1,354,1,354,3,354,
        4283,8,354,1,355,1,355,3,355,4287,8,355,1,356,1,356,3,356,4291,8,
        356,1,356,1,356,5,356,4295,8,356,10,356,12,356,4298,9,356,1,356,
        1,356,1,357,1,357,1,358,1,358,1,358,1,359,1,359,1,359,1,360,1,360,
        1,361,1,361,1,361,1,361,1,362,1,362,3,362,4318,8,362,1,363,1,363,
        4,363,4322,8,363,11,363,12,363,4323,1,364,1,364,3,364,4328,8,364,
        1,365,1,365,3,365,4332,8,365,1,365,3,365,4335,8,365,1,365,1,365,
        5,365,4339,8,365,10,365,12,365,4342,9,365,1,366,1,366,3,366,4346,
        8,366,1,366,3,366,4349,8,366,1,367,1,367,3,367,4353,8,367,1,368,
        1,368,1,368,1,368,5,368,4359,8,368,10,368,12,368,4362,9,368,1,368,
        1,368,1,369,1,369,1,369,5,369,4369,8,369,10,369,12,369,4372,9,369,
        1,370,1,370,1,370,1,370,1,370,5,370,4379,8,370,10,370,12,370,4382,
        9,370,1,371,1,371,1,371,1,371,1,372,1,372,1,372,1,372,1,373,1,373,
        1,373,1,373,1,374,1,374,1,374,1,374,3,374,4400,8,374,1,375,1,375,
        1,375,1,375,1,375,3,375,4407,8,375,1,375,3,375,4410,8,375,1,375,
        1,375,1,375,1,375,1,376,1,376,1,376,1,376,1,376,3,376,4421,8,376,
        1,376,1,376,1,376,5,376,4426,8,376,10,376,12,376,4429,9,376,3,376,
        4431,8,376,3,376,4433,8,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,3,376,4444,8,376,1,376,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,3,376,4454,8,376,3,376,4456,8,376,1,377,1,377,
        1,377,1,377,3,377,4462,8,377,1,378,1,378,3,378,4466,8,378,1,379,
        1,379,1,379,1,379,1,379,1,379,1,379,3,379,4475,8,379,1,379,1,379,
        1,380,1,380,1,380,1,380,1,380,1,380,1,380,4,380,4486,8,380,11,380,
        12,380,4487,1,380,1,380,3,380,4492,8,380,1,380,1,380,1,381,1,381,
        1,381,1,381,1,381,1,381,4,381,4502,8,381,11,381,12,381,4503,1,381,
        1,381,3,381,4508,8,381,1,381,1,381,1,382,1,382,1,382,1,382,1,382,
        3,382,4517,8,382,1,382,1,382,1,383,1,383,1,384,1,384,1,384,1,384,
        1,384,1,384,1,384,1,385,1,385,1,386,1,386,1,386,1,386,1,386,1,386,
        1,386,1,386,1,386,1,386,1,386,1,386,1,386,3,386,4545,8,386,1,387,
        1,387,1,388,1,388,1,389,1,389,4,389,4553,8,389,11,389,12,389,4554,
        1,390,1,390,1,390,1,391,1,391,1,391,3,391,4563,8,391,1,392,1,392,
        1,392,3,392,4568,8,392,1,393,1,393,1,393,1,394,1,394,1,395,1,395,
        1,395,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,
        1,396,3,396,4589,8,396,1,396,1,396,3,396,4593,8,396,1,397,1,397,
        1,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,
        4607,8,397,1,398,1,398,1,399,1,399,1,399,1,399,1,399,1,399,1,399,
        1,399,1,399,1,399,1,399,3,399,4622,8,399,1,400,1,400,1,400,1,400,
        1,400,1,400,1,400,5,400,4631,8,400,10,400,12,400,4634,9,400,1,401,
        1,401,1,402,5,402,4639,8,402,10,402,12,402,4642,9,402,1,402,1,402,
        1,403,1,403,1,404,1,404,1,404,1,404,5,404,4652,8,404,10,404,12,404,
        4655,9,404,1,405,1,405,1,406,1,406,1,406,1,406,5,406,4663,8,406,
        10,406,12,406,4666,9,406,1,407,1,407,1,408,1,408,1,408,1,408,5,408,
        4674,8,408,10,408,12,408,4677,9,408,1,409,1,409,1,410,1,410,1,410,
        1,410,5,410,4685,8,410,10,410,12,410,4688,9,410,1,411,1,411,1,412,
        1,412,1,412,1,412,5,412,4696,8,412,10,412,12,412,4699,9,412,1,413,
        1,413,1,414,1,414,1,414,1,414,5,414,4707,8,414,10,414,12,414,4710,
        9,414,1,415,1,415,1,416,1,416,1,416,1,416,1,416,3,416,4719,8,416,
        1,417,1,417,1,417,1,417,1,418,1,418,1,418,3,418,4728,8,418,1,419,
        1,419,3,419,4732,8,419,1,420,1,420,1,420,1,420,1,420,1,420,3,420,
        4740,8,420,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,
        1,421,1,421,3,421,4753,8,421,1,422,1,422,1,422,1,422,1,423,1,423,
        1,424,1,424,3,424,4763,8,424,1,425,1,425,1,425,1,425,3,425,4769,
        8,425,1,426,1,426,1,426,1,426,1,427,1,427,1,427,1,427,1,427,1,427,
        1,427,3,427,4782,8,427,1,428,1,428,1,428,1,428,1,428,1,428,1,428,
        5,428,4791,8,428,10,428,12,428,4794,9,428,1,429,1,429,1,429,1,429,
        1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,3,429,4808,8,429,
        1,430,1,430,1,430,3,430,4813,8,430,1,431,1,431,1,432,5,432,4818,
        8,432,10,432,12,432,4821,9,432,1,432,1,432,1,433,1,433,1,434,1,434,
        1,434,1,434,5,434,4831,8,434,10,434,12,434,4834,9,434,1,435,1,435,
        1,436,1,436,1,436,1,436,5,436,4842,8,436,10,436,12,436,4845,9,436,
        1,437,1,437,1,438,1,438,1,439,1,439,3,439,4853,8,439,1,440,1,440,
        1,440,1,440,1,440,5,440,4860,8,440,10,440,12,440,4863,9,440,1,440,
        1,440,1,441,1,441,1,441,3,441,4870,8,441,1,442,1,442,1,442,1,442,
        5,442,4876,8,442,10,442,12,442,4879,9,442,1,442,1,442,1,443,1,443,
        1,443,1,443,1,444,1,444,3,444,4889,8,444,1,445,1,445,1,446,1,446,
        1,447,1,447,1,447,3,447,4898,8,447,1,448,1,448,3,448,4902,8,448,
        1,449,1,449,1,449,3,449,4907,8,449,1,450,1,450,1,451,1,451,1,452,
        1,452,1,453,1,453,1,453,1,454,1,454,1,454,5,454,4921,8,454,10,454,
        12,454,4924,9,454,1,455,1,455,1,455,1,455,1,455,3,455,4931,8,455,
        1,456,1,456,1,457,1,457,1,457,5,457,4938,8,457,10,457,12,457,4941,
        9,457,1,458,1,458,1,459,1,459,1,459,1,459,1,459,1,460,1,460,1,460,
        1,460,1,460,1,461,1,461,1,461,5,461,4958,8,461,10,461,12,461,4961,
        9,461,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,
        1,462,1,462,1,462,1,462,3,462,4977,8,462,1,463,1,463,1,463,1,463,
        1,463,1,463,1,463,3,463,4986,8,463,1,464,1,464,1,464,5,464,4991,
        8,464,10,464,12,464,4994,9,464,1,465,1,465,1,465,3,465,4999,8,465,
        1,466,1,466,1,466,5,466,5004,8,466,10,466,12,466,5007,9,466,1,467,
        1,467,1,467,1,467,3,467,5013,8,467,1,467,1,467,1,467,1,467,1,467,
        1,467,1,467,3,467,5022,8,467,3,467,5024,8,467,1,468,1,468,1,468,
        1,469,1,469,3,469,5031,8,469,1,470,1,470,1,471,1,471,1,472,1,472,
        1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,
        1,473,1,473,1,473,1,473,3,473,5054,8,473,1,473,1,473,3,473,5058,
        8,473,3,473,5060,8,473,1,474,1,474,1,474,1,474,1,475,1,475,1,475,
        1,475,1,475,1,475,1,475,1,475,1,475,1,475,1,475,1,475,3,475,5078,
        8,475,1,476,1,476,1,476,1,476,3,476,5084,8,476,1,476,1,476,1,477,
        1,477,1,477,5,477,5091,8,477,10,477,12,477,5094,9,477,1,478,1,478,
        1,479,1,479,1,479,1,480,1,480,1,480,5,480,5104,8,480,10,480,12,480,
        5107,9,480,1,481,1,481,1,481,5,481,5112,8,481,10,481,12,481,5115,
        9,481,1,482,1,482,1,482,1,482,1,483,1,483,1,484,1,484,1,485,1,485,
        1,485,1,485,3,485,5129,8,485,1,486,1,486,1,486,1,487,1,487,1,487,
        1,487,1,487,1,487,1,487,1,487,1,487,1,487,1,488,1,488,1,488,1,488,
        1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,3,488,
        5158,8,488,1,488,1,488,1,488,3,488,5163,8,488,3,488,5165,8,488,1,
        489,1,489,1,489,1,489,1,489,1,489,1,490,1,490,1,490,1,490,1,490,
        1,490,1,490,1,490,1,490,1,490,1,490,1,490,3,490,5185,8,490,1,491,
        1,491,1,491,5,491,5190,8,491,10,491,12,491,5193,9,491,1,492,1,492,
        1,492,1,492,1,492,1,492,1,492,1,492,1,493,1,493,1,493,1,493,1,493,
        1,493,1,493,1,493,1,493,1,493,1,493,1,493,3,493,5215,8,493,1,494,
        1,494,1,494,1,494,1,494,1,494,1,495,1,495,1,495,1,495,1,495,1,495,
        1,495,1,495,1,495,3,495,5232,8,495,1,495,1,495,1,495,3,495,5237,
        8,495,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,3,496,
        5248,8,496,1,496,1,496,1,496,3,496,5253,8,496,1,497,1,497,1,497,
        1,497,1,497,1,497,1,497,1,497,0,0,498,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
        364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
        396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
        428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
        460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
        492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
        524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
        556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
        588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,
        620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
        652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,
        684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
        716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,
        748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
        780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
        812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
        844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,
        876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,
        908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
        940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,
        972,974,976,978,980,982,984,986,988,990,992,994,0,49,2,0,57,57,165,
        165,4,0,88,88,116,116,216,216,314,314,2,0,34,34,272,272,1,0,86,87,
        2,0,134,134,148,148,2,0,67,67,285,285,2,0,68,68,286,286,2,0,109,
        109,296,296,10,0,7,7,9,9,58,58,83,83,98,98,155,155,182,182,288,288,
        298,298,354,354,3,0,4,4,98,98,315,315,3,0,15,15,123,123,163,163,
        1,0,136,137,4,0,73,73,143,143,199,199,380,380,2,0,30,30,340,340,
        2,0,91,91,102,102,2,0,207,207,362,362,2,0,204,204,262,262,2,0,18,
        18,86,86,2,0,125,125,170,170,2,0,39,39,365,365,4,0,107,107,157,157,
        197,197,345,345,2,0,7,7,92,92,2,0,215,215,379,379,2,0,181,181,188,
        188,2,0,42,42,304,304,2,0,412,412,417,417,2,0,135,135,275,275,3,
        0,12,12,221,221,289,289,2,0,231,231,282,282,2,0,190,190,258,258,
        2,0,343,343,417,417,2,0,128,128,237,237,7,0,73,73,143,143,198,199,
        247,247,287,287,370,370,380,380,8,0,73,73,97,97,143,143,198,199,
        247,247,287,287,370,370,380,380,2,0,400,401,406,406,2,0,399,399,
        402,404,1,0,400,401,3,0,176,176,260,260,276,276,2,0,7,7,13,13,3,
        0,7,7,13,13,302,302,2,0,120,120,339,339,2,0,392,392,394,398,23,0,
        11,11,16,16,25,28,35,35,96,96,126,127,145,145,148,148,156,156,176,
        176,190,190,206,206,218,218,254,254,260,260,276,276,300,300,312,
        313,329,329,346,346,371,371,392,407,409,409,86,0,1,6,8,8,10,10,15,
        15,18,20,22,24,30,31,33,34,37,38,40,44,46,47,49,50,52,53,56,57,59,
        59,66,66,68,68,72,76,78,78,80,82,84,86,88,91,93,95,97,97,99,100,
        102,102,104,106,109,111,113,116,122,125,132,133,137,137,142,144,
        146,146,149,150,152,154,161,163,165,170,175,175,177,179,181,185,
        187,189,191,194,196,196,198,199,201,202,204,205,207,208,210,210,
        212,213,216,217,222,223,225,226,228,230,233,236,242,242,244,245,
        247,249,251,252,255,257,261,272,274,274,277,278,283,287,289,292,
        294,299,301,301,303,306,308,314,316,317,319,319,321,323,328,329,
        331,331,333,335,338,338,341,342,344,344,346,346,349,353,355,357,
        360,362,364,364,366,370,373,373,376,381,13,0,16,16,26,28,63,64,71,
        71,96,96,126,126,140,140,145,145,156,156,190,190,254,254,300,300,
        326,326,4,0,191,191,232,232,289,289,311,311,2,0,203,203,417,418,
        2,0,4,4,98,98,3,0,14,14,139,139,358,358,5626,0,998,1,0,0,0,2,1002,
        1,0,0,0,4,1036,1,0,0,0,6,1038,1,0,0,0,8,1040,1,0,0,0,10,1056,1,0,
        0,0,12,1058,1,0,0,0,14,1074,1,0,0,0,16,1083,1,0,0,0,18,1091,1,0,
        0,0,20,1104,1,0,0,0,22,1115,1,0,0,0,24,1120,1,0,0,0,26,1131,1,0,
        0,0,28,1135,1,0,0,0,30,1143,1,0,0,0,32,1148,1,0,0,0,34,1200,1,0,
        0,0,36,1202,1,0,0,0,38,1205,1,0,0,0,40,1207,1,0,0,0,42,1211,1,0,
        0,0,44,1213,1,0,0,0,46,1216,1,0,0,0,48,1219,1,0,0,0,50,1223,1,0,
        0,0,52,1262,1,0,0,0,54,1264,1,0,0,0,56,1267,1,0,0,0,58,1270,1,0,
        0,0,60,1274,1,0,0,0,62,1282,1,0,0,0,64,1285,1,0,0,0,66,1288,1,0,
        0,0,68,1297,1,0,0,0,70,1300,1,0,0,0,72,1315,1,0,0,0,74,1327,1,0,
        0,0,76,1332,1,0,0,0,78,1352,1,0,0,0,80,1356,1,0,0,0,82,1363,1,0,
        0,0,84,1388,1,0,0,0,86,1405,1,0,0,0,88,1407,1,0,0,0,90,1590,1,0,
        0,0,92,1600,1,0,0,0,94,1602,1,0,0,0,96,1610,1,0,0,0,98,1615,1,0,
        0,0,100,1617,1,0,0,0,102,1623,1,0,0,0,104,1627,1,0,0,0,106,1631,
        1,0,0,0,108,1635,1,0,0,0,110,1645,1,0,0,0,112,1656,1,0,0,0,114,1673,
        1,0,0,0,116,1691,1,0,0,0,118,1696,1,0,0,0,120,1699,1,0,0,0,122,1703,
        1,0,0,0,124,1710,1,0,0,0,126,1719,1,0,0,0,128,1725,1,0,0,0,130,1727,
        1,0,0,0,132,1744,1,0,0,0,134,1766,1,0,0,0,136,1768,1,0,0,0,138,1776,
        1,0,0,0,140,1783,1,0,0,0,142,1785,1,0,0,0,144,1799,1,0,0,0,146,1801,
        1,0,0,0,148,1805,1,0,0,0,150,1809,1,0,0,0,152,1813,1,0,0,0,154,1817,
        1,0,0,0,156,1830,1,0,0,0,158,1838,1,0,0,0,160,1841,1,0,0,0,162,1843,
        1,0,0,0,164,1855,1,0,0,0,166,1865,1,0,0,0,168,1868,1,0,0,0,170,1879,
        1,0,0,0,172,1887,1,0,0,0,174,1914,1,0,0,0,176,1927,1,0,0,0,178,1929,
        1,0,0,0,180,1935,1,0,0,0,182,1938,1,0,0,0,184,1944,1,0,0,0,186,1950,
        1,0,0,0,188,1957,1,0,0,0,190,1991,1,0,0,0,192,1999,1,0,0,0,194,2012,
        1,0,0,0,196,2017,1,0,0,0,198,2028,1,0,0,0,200,2045,1,0,0,0,202,2047,
        1,0,0,0,204,2052,1,0,0,0,206,2059,1,0,0,0,208,2063,1,0,0,0,210,2065,
        1,0,0,0,212,2068,1,0,0,0,214,2082,1,0,0,0,216,2090,1,0,0,0,218,2098,
        1,0,0,0,220,2106,1,0,0,0,222,2121,1,0,0,0,224,2123,1,0,0,0,226,2140,
        1,0,0,0,228,2145,1,0,0,0,230,2159,1,0,0,0,232,2161,1,0,0,0,234,2164,
        1,0,0,0,236,2167,1,0,0,0,238,2176,1,0,0,0,240,2196,1,0,0,0,242,2198,
        1,0,0,0,244,2201,1,0,0,0,246,2221,1,0,0,0,248,2223,1,0,0,0,250,2227,
        1,0,0,0,252,2229,1,0,0,0,254,2238,1,0,0,0,256,2244,1,0,0,0,258,2250,
        1,0,0,0,260,2255,1,0,0,0,262,2301,1,0,0,0,264,2303,1,0,0,0,266,2306,
        1,0,0,0,268,2314,1,0,0,0,270,2322,1,0,0,0,272,2330,1,0,0,0,274,2338,
        1,0,0,0,276,2340,1,0,0,0,278,2353,1,0,0,0,280,2361,1,0,0,0,282,2370,
        1,0,0,0,284,2372,1,0,0,0,286,2374,1,0,0,0,288,2379,1,0,0,0,290,2381,
        1,0,0,0,292,2385,1,0,0,0,294,2391,1,0,0,0,296,2399,1,0,0,0,298,2401,
        1,0,0,0,300,2404,1,0,0,0,302,2411,1,0,0,0,304,2422,1,0,0,0,306,2435,
        1,0,0,0,308,2437,1,0,0,0,310,2445,1,0,0,0,312,2449,1,0,0,0,314,2457,
        1,0,0,0,316,2461,1,0,0,0,318,2463,1,0,0,0,320,2465,1,0,0,0,322,2468,
        1,0,0,0,324,2475,1,0,0,0,326,2483,1,0,0,0,328,2488,1,0,0,0,330,2490,
        1,0,0,0,332,2497,1,0,0,0,334,2505,1,0,0,0,336,2509,1,0,0,0,338,2511,
        1,0,0,0,340,2522,1,0,0,0,342,2526,1,0,0,0,344,2538,1,0,0,0,346,2546,
        1,0,0,0,348,2550,1,0,0,0,350,2562,1,0,0,0,352,2574,1,0,0,0,354,2579,
        1,0,0,0,356,2584,1,0,0,0,358,2586,1,0,0,0,360,2590,1,0,0,0,362,2594,
        1,0,0,0,364,2601,1,0,0,0,366,2603,1,0,0,0,368,2616,1,0,0,0,370,2654,
        1,0,0,0,372,2656,1,0,0,0,374,2661,1,0,0,0,376,2666,1,0,0,0,378,2673,
        1,0,0,0,380,2678,1,0,0,0,382,2683,1,0,0,0,384,2689,1,0,0,0,386,2691,
        1,0,0,0,388,2700,1,0,0,0,390,2712,1,0,0,0,392,2721,1,0,0,0,394,2731,
        1,0,0,0,396,2757,1,0,0,0,398,2759,1,0,0,0,400,2781,1,0,0,0,402,2786,
        1,0,0,0,404,2859,1,0,0,0,406,2861,1,0,0,0,408,2893,1,0,0,0,410,2895,
        1,0,0,0,412,2906,1,0,0,0,414,2912,1,0,0,0,416,2918,1,0,0,0,418,2920,
        1,0,0,0,420,2929,1,0,0,0,422,2939,1,0,0,0,424,2941,1,0,0,0,426,2955,
        1,0,0,0,428,2957,1,0,0,0,430,2960,1,0,0,0,432,2964,1,0,0,0,434,2966,
        1,0,0,0,436,2970,1,0,0,0,438,2974,1,0,0,0,440,2978,1,0,0,0,442,2985,
        1,0,0,0,444,2992,1,0,0,0,446,3014,1,0,0,0,448,3020,1,0,0,0,450,3035,
        1,0,0,0,452,3042,1,0,0,0,454,3050,1,0,0,0,456,3052,1,0,0,0,458,3059,
        1,0,0,0,460,3063,1,0,0,0,462,3066,1,0,0,0,464,3069,1,0,0,0,466,3072,
        1,0,0,0,468,3115,1,0,0,0,470,3131,1,0,0,0,472,3133,1,0,0,0,474,3144,
        1,0,0,0,476,3148,1,0,0,0,478,3152,1,0,0,0,480,3154,1,0,0,0,482,3159,
        1,0,0,0,484,3161,1,0,0,0,486,3166,1,0,0,0,488,3171,1,0,0,0,490,3176,
        1,0,0,0,492,3181,1,0,0,0,494,3187,1,0,0,0,496,3196,1,0,0,0,498,3201,
        1,0,0,0,500,3206,1,0,0,0,502,3210,1,0,0,0,504,3230,1,0,0,0,506,3243,
        1,0,0,0,508,3251,1,0,0,0,510,3253,1,0,0,0,512,3262,1,0,0,0,514,3266,
        1,0,0,0,516,3273,1,0,0,0,518,3280,1,0,0,0,520,3287,1,0,0,0,522,3290,
        1,0,0,0,524,3319,1,0,0,0,526,3330,1,0,0,0,528,3347,1,0,0,0,530,3349,
        1,0,0,0,532,3353,1,0,0,0,534,3360,1,0,0,0,536,3362,1,0,0,0,538,3367,
        1,0,0,0,540,3371,1,0,0,0,542,3379,1,0,0,0,544,3383,1,0,0,0,546,3393,
        1,0,0,0,548,3395,1,0,0,0,550,3401,1,0,0,0,552,3405,1,0,0,0,554,3418,
        1,0,0,0,556,3420,1,0,0,0,558,3424,1,0,0,0,560,3427,1,0,0,0,562,3430,
        1,0,0,0,564,3447,1,0,0,0,566,3451,1,0,0,0,568,3458,1,0,0,0,570,3485,
        1,0,0,0,572,3490,1,0,0,0,574,3492,1,0,0,0,576,3497,1,0,0,0,578,3502,
        1,0,0,0,580,3516,1,0,0,0,582,3641,1,0,0,0,584,3643,1,0,0,0,586,3659,
        1,0,0,0,588,3662,1,0,0,0,590,3665,1,0,0,0,592,3668,1,0,0,0,594,3672,
        1,0,0,0,596,3684,1,0,0,0,598,3686,1,0,0,0,600,3688,1,0,0,0,602,3690,
        1,0,0,0,604,3698,1,0,0,0,606,3706,1,0,0,0,608,3718,1,0,0,0,610,3752,
        1,0,0,0,612,3754,1,0,0,0,614,3772,1,0,0,0,616,3781,1,0,0,0,618,3786,
        1,0,0,0,620,3790,1,0,0,0,622,3806,1,0,0,0,624,3865,1,0,0,0,626,3867,
        1,0,0,0,628,3869,1,0,0,0,630,3889,1,0,0,0,632,3900,1,0,0,0,634,3902,
        1,0,0,0,636,3918,1,0,0,0,638,3930,1,0,0,0,640,3948,1,0,0,0,642,3953,
        1,0,0,0,644,3957,1,0,0,0,646,3976,1,0,0,0,648,3981,1,0,0,0,650,3983,
        1,0,0,0,652,4011,1,0,0,0,654,4014,1,0,0,0,656,4016,1,0,0,0,658,4018,
        1,0,0,0,660,4037,1,0,0,0,662,4039,1,0,0,0,664,4041,1,0,0,0,666,4045,
        1,0,0,0,668,4079,1,0,0,0,670,4081,1,0,0,0,672,4083,1,0,0,0,674,4091,
        1,0,0,0,676,4135,1,0,0,0,678,4137,1,0,0,0,680,4162,1,0,0,0,682,4164,
        1,0,0,0,684,4172,1,0,0,0,686,4181,1,0,0,0,688,4197,1,0,0,0,690,4201,
        1,0,0,0,692,4203,1,0,0,0,694,4212,1,0,0,0,696,4227,1,0,0,0,698,4233,
        1,0,0,0,700,4235,1,0,0,0,702,4242,1,0,0,0,704,4244,1,0,0,0,706,4249,
        1,0,0,0,708,4262,1,0,0,0,710,4286,1,0,0,0,712,4288,1,0,0,0,714,4301,
        1,0,0,0,716,4303,1,0,0,0,718,4306,1,0,0,0,720,4309,1,0,0,0,722,4311,
        1,0,0,0,724,4315,1,0,0,0,726,4321,1,0,0,0,728,4327,1,0,0,0,730,4329,
        1,0,0,0,732,4343,1,0,0,0,734,4352,1,0,0,0,736,4354,1,0,0,0,738,4365,
        1,0,0,0,740,4373,1,0,0,0,742,4383,1,0,0,0,744,4387,1,0,0,0,746,4391,
        1,0,0,0,748,4395,1,0,0,0,750,4401,1,0,0,0,752,4455,1,0,0,0,754,4461,
        1,0,0,0,756,4465,1,0,0,0,758,4467,1,0,0,0,760,4478,1,0,0,0,762,4495,
        1,0,0,0,764,4511,1,0,0,0,766,4520,1,0,0,0,768,4522,1,0,0,0,770,4529,
        1,0,0,0,772,4544,1,0,0,0,774,4546,1,0,0,0,776,4548,1,0,0,0,778,4550,
        1,0,0,0,780,4556,1,0,0,0,782,4562,1,0,0,0,784,4567,1,0,0,0,786,4569,
        1,0,0,0,788,4572,1,0,0,0,790,4574,1,0,0,0,792,4592,1,0,0,0,794,4606,
        1,0,0,0,796,4608,1,0,0,0,798,4621,1,0,0,0,800,4623,1,0,0,0,802,4635,
        1,0,0,0,804,4640,1,0,0,0,806,4645,1,0,0,0,808,4647,1,0,0,0,810,4656,
        1,0,0,0,812,4658,1,0,0,0,814,4667,1,0,0,0,816,4669,1,0,0,0,818,4678,
        1,0,0,0,820,4680,1,0,0,0,822,4689,1,0,0,0,824,4691,1,0,0,0,826,4700,
        1,0,0,0,828,4702,1,0,0,0,830,4711,1,0,0,0,832,4718,1,0,0,0,834,4720,
        1,0,0,0,836,4727,1,0,0,0,838,4729,1,0,0,0,840,4739,1,0,0,0,842,4752,
        1,0,0,0,844,4754,1,0,0,0,846,4758,1,0,0,0,848,4762,1,0,0,0,850,4768,
        1,0,0,0,852,4770,1,0,0,0,854,4781,1,0,0,0,856,4783,1,0,0,0,858,4807,
        1,0,0,0,860,4809,1,0,0,0,862,4814,1,0,0,0,864,4819,1,0,0,0,866,4824,
        1,0,0,0,868,4826,1,0,0,0,870,4835,1,0,0,0,872,4837,1,0,0,0,874,4846,
        1,0,0,0,876,4848,1,0,0,0,878,4850,1,0,0,0,880,4854,1,0,0,0,882,4866,
        1,0,0,0,884,4871,1,0,0,0,886,4882,1,0,0,0,888,4888,1,0,0,0,890,4890,
        1,0,0,0,892,4892,1,0,0,0,894,4897,1,0,0,0,896,4901,1,0,0,0,898,4903,
        1,0,0,0,900,4908,1,0,0,0,902,4910,1,0,0,0,904,4912,1,0,0,0,906,4914,
        1,0,0,0,908,4917,1,0,0,0,910,4925,1,0,0,0,912,4932,1,0,0,0,914,4934,
        1,0,0,0,916,4942,1,0,0,0,918,4944,1,0,0,0,920,4949,1,0,0,0,922,4954,
        1,0,0,0,924,4976,1,0,0,0,926,4985,1,0,0,0,928,4987,1,0,0,0,930,4998,
        1,0,0,0,932,5000,1,0,0,0,934,5008,1,0,0,0,936,5025,1,0,0,0,938,5028,
        1,0,0,0,940,5032,1,0,0,0,942,5034,1,0,0,0,944,5036,1,0,0,0,946,5038,
        1,0,0,0,948,5061,1,0,0,0,950,5065,1,0,0,0,952,5079,1,0,0,0,954,5087,
        1,0,0,0,956,5095,1,0,0,0,958,5097,1,0,0,0,960,5100,1,0,0,0,962,5108,
        1,0,0,0,964,5116,1,0,0,0,966,5120,1,0,0,0,968,5122,1,0,0,0,970,5128,
        1,0,0,0,972,5130,1,0,0,0,974,5133,1,0,0,0,976,5143,1,0,0,0,978,5166,
        1,0,0,0,980,5184,1,0,0,0,982,5186,1,0,0,0,984,5194,1,0,0,0,986,5202,
        1,0,0,0,988,5216,1,0,0,0,990,5222,1,0,0,0,992,5238,1,0,0,0,994,5254,
        1,0,0,0,996,999,3,2,1,0,997,999,3,10,5,0,998,996,1,0,0,0,998,997,
        1,0,0,0,999,1000,1,0,0,0,1000,1001,5,0,0,1,1001,1,1,0,0,0,1002,1012,
        5,114,0,0,1003,1005,3,4,2,0,1004,1003,1,0,0,0,1005,1008,1,0,0,0,
        1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1009,1,0,0,0,1008,1006,
        1,0,0,0,1009,1013,3,10,5,0,1010,1011,5,274,0,0,1011,1013,3,382,191,
        0,1012,1006,1,0,0,0,1012,1010,1,0,0,0,1013,3,1,0,0,0,1014,1037,5,
        117,0,0,1015,1037,5,133,0,0,1016,1037,5,85,0,0,1017,1019,5,37,0,
        0,1018,1020,7,0,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1037,
        1,0,0,0,1021,1037,5,184,0,0,1022,1037,5,21,0,0,1023,1037,5,10,0,
        0,1024,1037,5,265,0,0,1025,1037,5,183,0,0,1026,1037,5,19,0,0,1027,
        1029,5,366,0,0,1028,1030,3,6,3,0,1029,1028,1,0,0,0,1029,1030,1,0,
        0,0,1030,1032,1,0,0,0,1031,1033,3,8,4,0,1032,1031,1,0,0,0,1032,1033,
        1,0,0,0,1033,1037,1,0,0,0,1034,1037,5,78,0,0,1035,1037,5,77,0,0,
        1036,1014,1,0,0,0,1036,1015,1,0,0,0,1036,1016,1,0,0,0,1036,1017,
        1,0,0,0,1036,1021,1,0,0,0,1036,1022,1,0,0,0,1036,1023,1,0,0,0,1036,
        1024,1,0,0,0,1036,1025,1,0,0,0,1036,1026,1,0,0,0,1036,1027,1,0,0,
        0,1036,1034,1,0,0,0,1036,1035,1,0,0,0,1037,5,1,0,0,0,1038,1039,5,
        215,0,0,1039,7,1,0,0,0,1040,1041,7,1,0,0,1041,9,1,0,0,0,1042,1057,
        3,382,191,0,1043,1057,3,12,6,0,1044,1057,3,16,8,0,1045,1057,3,18,
        9,0,1046,1057,3,20,10,0,1047,1057,3,24,12,0,1048,1057,3,32,16,0,
        1049,1057,3,34,17,0,1050,1057,3,412,206,0,1051,1057,3,420,210,0,
        1052,1057,3,422,211,0,1053,1057,3,444,222,0,1054,1057,3,918,459,
        0,1055,1057,3,920,460,0,1056,1042,1,0,0,0,1056,1043,1,0,0,0,1056,
        1044,1,0,0,0,1056,1045,1,0,0,0,1056,1046,1,0,0,0,1056,1047,1,0,0,
        0,1056,1048,1,0,0,0,1056,1049,1,0,0,0,1056,1050,1,0,0,0,1056,1051,
        1,0,0,0,1056,1052,1,0,0,0,1056,1053,1,0,0,0,1056,1054,1,0,0,0,1056,
        1055,1,0,0,0,1057,11,1,0,0,0,1058,1059,5,179,0,0,1059,1061,5,66,
        0,0,1060,1062,5,180,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,
        1063,1,0,0,0,1063,1064,5,152,0,0,1064,1066,5,412,0,0,1065,1067,5,
        225,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,
        1069,5,159,0,0,1069,1070,5,318,0,0,1070,1072,3,878,439,0,1071,1073,
        3,74,37,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,13,1,0,0,0,1074,
        1076,5,129,0,0,1075,1077,5,196,0,0,1076,1075,1,0,0,0,1076,1077,1,
        0,0,0,1077,1078,1,0,0,0,1078,1079,5,269,0,0,1079,1080,5,386,0,0,
        1080,1081,5,412,0,0,1081,1082,5,387,0,0,1082,15,1,0,0,0,1083,1084,
        5,115,0,0,1084,1085,5,318,0,0,1085,1086,3,878,439,0,1086,1087,5,
        330,0,0,1087,1089,5,412,0,0,1088,1090,3,14,7,0,1089,1088,1,0,0,0,
        1089,1090,1,0,0,0,1090,17,1,0,0,0,1091,1097,5,147,0,0,1092,1094,
        5,118,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,
        1095,1096,5,318,0,0,1096,1098,3,878,439,0,1097,1093,1,0,0,0,1097,
        1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,134,0,0,1100,1102,5,412,
        0,0,1101,1103,3,264,132,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,
        19,1,0,0,0,1104,1105,5,267,0,0,1105,1106,5,99,0,0,1106,1109,3,22,
        11,0,1107,1108,5,268,0,0,1108,1110,3,22,11,0,1109,1107,1,0,0,0,1109,
        1110,1,0,0,0,1110,1113,1,0,0,0,1111,1112,5,375,0,0,1112,1114,3,26,
        13,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,21,1,0,0,0,1115,1118,
        3,896,448,0,1116,1117,5,382,0,0,1117,1119,3,30,15,0,1118,1116,1,
        0,0,0,1118,1119,1,0,0,0,1119,23,1,0,0,0,1120,1121,5,267,0,0,1121,
        1122,5,179,0,0,1122,1125,3,22,11,0,1123,1124,5,159,0,0,1124,1126,
        3,896,448,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1129,1,0,0,
        0,1127,1128,5,375,0,0,1128,1130,3,26,13,0,1129,1127,1,0,0,0,1129,
        1130,1,0,0,0,1130,25,1,0,0,0,1131,1132,5,386,0,0,1132,1133,3,28,
        14,0,1133,1134,5,387,0,0,1134,27,1,0,0,0,1135,1140,3,248,124,0,1136,
        1137,5,384,0,0,1137,1139,3,248,124,0,1138,1136,1,0,0,0,1139,1142,
        1,0,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,29,1,0,0,0,1142,
        1140,1,0,0,0,1143,1146,5,412,0,0,1144,1145,5,382,0,0,1145,1147,5,
        412,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,31,1,0,0,0,1148,
        1149,5,267,0,0,1149,1150,5,309,0,0,1150,1153,3,896,448,0,1151,1152,
        5,375,0,0,1152,1154,3,26,13,0,1153,1151,1,0,0,0,1153,1154,1,0,0,
        0,1154,33,1,0,0,0,1155,1201,3,52,26,0,1156,1201,3,64,32,0,1157,1201,
        3,66,33,0,1158,1201,3,582,291,0,1159,1201,3,72,36,0,1160,1201,3,
        70,35,0,1161,1201,3,466,233,0,1162,1201,3,82,41,0,1163,1201,3,90,
        45,0,1164,1201,3,154,77,0,1165,1201,3,172,86,0,1166,1201,3,188,94,
        0,1167,1201,3,192,96,0,1168,1201,3,196,98,0,1169,1201,3,194,97,0,
        1170,1201,3,186,93,0,1171,1201,3,190,95,0,1172,1201,3,162,81,0,1173,
        1201,3,168,84,0,1174,1201,3,164,82,0,1175,1201,3,166,83,0,1176,1201,
        3,170,85,0,1177,1201,3,84,42,0,1178,1201,3,94,47,0,1179,1201,3,100,
        50,0,1180,1201,3,96,48,0,1181,1201,3,102,51,0,1182,1201,3,104,52,
        0,1183,1201,3,106,53,0,1184,1201,3,108,54,0,1185,1201,3,110,55,0,
        1186,1201,3,124,62,0,1187,1201,3,116,58,0,1188,1201,3,126,63,0,1189,
        1201,3,118,59,0,1190,1201,3,112,56,0,1191,1201,3,114,57,0,1192,1201,
        3,122,61,0,1193,1201,3,120,60,0,1194,1201,3,440,220,0,1195,1201,
        3,442,221,0,1196,1201,3,456,228,0,1197,1201,3,924,462,0,1198,1201,
        3,584,292,0,1199,1201,3,594,297,0,1200,1155,1,0,0,0,1200,1156,1,
        0,0,0,1200,1157,1,0,0,0,1200,1158,1,0,0,0,1200,1159,1,0,0,0,1200,
        1160,1,0,0,0,1200,1161,1,0,0,0,1200,1162,1,0,0,0,1200,1163,1,0,0,
        0,1200,1164,1,0,0,0,1200,1165,1,0,0,0,1200,1166,1,0,0,0,1200,1167,
        1,0,0,0,1200,1168,1,0,0,0,1200,1169,1,0,0,0,1200,1170,1,0,0,0,1200,
        1171,1,0,0,0,1200,1172,1,0,0,0,1200,1173,1,0,0,0,1200,1174,1,0,0,
        0,1200,1175,1,0,0,0,1200,1176,1,0,0,0,1200,1177,1,0,0,0,1200,1178,
        1,0,0,0,1200,1179,1,0,0,0,1200,1180,1,0,0,0,1200,1181,1,0,0,0,1200,
        1182,1,0,0,0,1200,1183,1,0,0,0,1200,1184,1,0,0,0,1200,1185,1,0,0,
        0,1200,1186,1,0,0,0,1200,1187,1,0,0,0,1200,1188,1,0,0,0,1200,1189,
        1,0,0,0,1200,1190,1,0,0,0,1200,1191,1,0,0,0,1200,1192,1,0,0,0,1200,
        1193,1,0,0,0,1200,1194,1,0,0,0,1200,1195,1,0,0,0,1200,1196,1,0,0,
        0,1200,1197,1,0,0,0,1200,1198,1,0,0,0,1200,1199,1,0,0,0,1201,35,
        1,0,0,0,1202,1203,5,145,0,0,1203,1204,5,112,0,0,1204,37,1,0,0,0,
        1205,1206,7,2,0,0,1206,39,1,0,0,0,1207,1208,5,145,0,0,1208,1209,
        5,206,0,0,1209,1210,5,112,0,0,1210,41,1,0,0,0,1211,1212,5,130,0,
        0,1212,43,1,0,0,0,1213,1214,5,102,0,0,1214,1215,5,274,0,0,1215,45,
        1,0,0,0,1216,1217,5,91,0,0,1217,1218,5,274,0,0,1218,47,1,0,0,0,1219,
        1220,5,310,0,0,1220,1221,5,17,0,0,1221,1222,5,89,0,0,1222,49,1,0,
        0,0,1223,1224,5,218,0,0,1224,1225,5,268,0,0,1225,51,1,0,0,0,1226,
        1227,5,58,0,0,1227,1229,3,88,44,0,1228,1230,3,40,20,0,1229,1228,
        1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,3,896,448,
        0,1232,1234,3,68,34,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1236,
        1,0,0,0,1235,1237,3,54,27,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,
        1237,1239,1,0,0,0,1238,1240,3,56,28,0,1239,1238,1,0,0,0,1239,1240,
        1,0,0,0,1240,1244,1,0,0,0,1241,1242,5,375,0,0,1242,1243,5,75,0,0,
        1243,1245,3,58,29,0,1244,1241,1,0,0,0,1244,1245,1,0,0,0,1245,1263,
        1,0,0,0,1246,1247,5,58,0,0,1247,1248,5,263,0,0,1248,1250,3,88,44,
        0,1249,1251,3,40,20,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,
        1,0,0,0,1252,1254,3,896,448,0,1253,1255,3,68,34,0,1254,1253,1,0,
        0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1260,3,62,31,0,1257,
        1258,5,375,0,0,1258,1259,5,75,0,0,1259,1261,3,58,29,0,1260,1257,
        1,0,0,0,1260,1261,1,0,0,0,1261,1263,1,0,0,0,1262,1226,1,0,0,0,1262,
        1246,1,0,0,0,1263,53,1,0,0,0,1264,1265,5,181,0,0,1265,1266,5,412,
        0,0,1266,55,1,0,0,0,1267,1268,5,188,0,0,1268,1269,5,412,0,0,1269,
        57,1,0,0,0,1270,1271,5,386,0,0,1271,1272,3,60,30,0,1272,1273,5,387,
        0,0,1273,59,1,0,0,0,1274,1279,3,248,124,0,1275,1276,5,384,0,0,1276,
        1278,3,248,124,0,1277,1275,1,0,0,0,1278,1281,1,0,0,0,1279,1277,1,
        0,0,0,1279,1280,1,0,0,0,1280,61,1,0,0,0,1281,1279,1,0,0,0,1282,1283,
        5,359,0,0,1283,1284,3,896,448,0,1284,63,1,0,0,0,1285,1286,5,357,
        0,0,1286,1287,3,896,448,0,1287,65,1,0,0,0,1288,1289,5,98,0,0,1289,
        1291,3,88,44,0,1290,1292,3,36,18,0,1291,1290,1,0,0,0,1291,1292,1,
        0,0,0,1292,1293,1,0,0,0,1293,1295,3,896,448,0,1294,1296,3,38,19,
        0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,67,1,0,0,0,1297,1298,
        5,47,0,0,1298,1299,5,412,0,0,1299,69,1,0,0,0,1300,1302,5,340,0,0,
        1301,1303,5,318,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,
        1,0,0,0,1304,1310,3,530,265,0,1305,1306,5,46,0,0,1306,1307,5,386,
        0,0,1307,1308,3,272,136,0,1308,1309,5,387,0,0,1309,1311,1,0,0,0,
        1310,1305,1,0,0,0,1310,1311,1,0,0,0,1311,1313,1,0,0,0,1312,1314,
        3,42,21,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,71,1,0,0,0,1315,
        1316,5,98,0,0,1316,1318,5,318,0,0,1317,1319,3,36,18,0,1318,1317,
        1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1322,3,640,320,
        0,1321,1323,5,245,0,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1325,
        1,0,0,0,1324,1326,3,14,7,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,
        73,1,0,0,0,1327,1328,5,154,0,0,1328,1329,5,412,0,0,1329,1330,5,290,
        0,0,1330,1331,5,412,0,0,1331,75,1,0,0,0,1332,1335,3,896,448,0,1333,
        1334,5,382,0,0,1334,1336,3,896,448,0,1335,1333,1,0,0,0,1335,1336,
        1,0,0,0,1336,1350,1,0,0,0,1337,1347,3,896,448,0,1338,1343,5,382,
        0,0,1339,1344,5,100,0,0,1340,1344,5,168,0,0,1341,1344,5,364,0,0,
        1342,1344,3,896,448,0,1343,1339,1,0,0,0,1343,1340,1,0,0,0,1343,1341,
        1,0,0,0,1343,1342,1,0,0,0,1344,1346,1,0,0,0,1345,1338,1,0,0,0,1346,
        1349,1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1351,1,0,0,
        0,1349,1347,1,0,0,0,1350,1337,1,0,0,0,1350,1351,1,0,0,0,1351,77,
        1,0,0,0,1352,1354,3,76,38,0,1353,1355,3,880,440,0,1354,1353,1,0,
        0,0,1354,1355,1,0,0,0,1355,79,1,0,0,0,1356,1358,3,640,320,0,1357,
        1359,3,880,440,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,
        0,0,0,1360,1362,3,276,138,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,
        1362,81,1,0,0,0,1363,1386,7,3,0,0,1364,1366,3,88,44,0,1365,1367,
        5,117,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,
        1368,1369,3,896,448,0,1369,1387,1,0,0,0,1370,1372,5,69,0,0,1371,
        1373,5,117,0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,
        0,0,1374,1387,3,896,448,0,1375,1377,5,136,0,0,1376,1378,5,117,0,
        0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,0,0,1379,1387,
        3,894,447,0,1380,1383,5,133,0,0,1381,1383,5,117,0,0,1382,1380,1,
        0,0,0,1382,1381,1,0,0,0,1383,1384,1,0,0,0,1384,1387,3,80,40,0,1385,
        1387,3,80,40,0,1386,1364,1,0,0,0,1386,1370,1,0,0,0,1386,1375,1,0,
        0,0,1386,1382,1,0,0,0,1386,1385,1,0,0,0,1387,83,1,0,0,0,1388,1389,
        5,10,0,0,1389,1390,5,318,0,0,1390,1403,3,878,439,0,1391,1392,5,52,
        0,0,1392,1399,5,308,0,0,1393,1400,5,205,0,0,1394,1395,5,129,0,0,
        1395,1397,5,46,0,0,1396,1398,3,272,136,0,1397,1396,1,0,0,0,1397,
        1398,1,0,0,0,1398,1400,1,0,0,0,1399,1393,1,0,0,0,1399,1394,1,0,0,
        0,1399,1400,1,0,0,0,1400,1404,1,0,0,0,1401,1402,5,33,0,0,1402,1404,
        5,196,0,0,1403,1391,1,0,0,0,1403,1401,1,0,0,0,1404,85,1,0,0,0,1405,
        1406,7,4,0,0,1406,87,1,0,0,0,1407,1408,7,5,0,0,1408,89,1,0,0,0,1409,
        1410,5,297,0,0,1410,1413,7,6,0,0,1411,1412,5,176,0,0,1412,1414,3,
        208,104,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,1591,1,0,0,0,
        1415,1417,5,297,0,0,1416,1418,5,117,0,0,1417,1416,1,0,0,0,1417,1418,
        1,0,0,0,1418,1419,1,0,0,0,1419,1423,5,319,0,0,1420,1421,3,86,43,
        0,1421,1422,3,896,448,0,1422,1424,1,0,0,0,1423,1420,1,0,0,0,1423,
        1424,1,0,0,0,1424,1426,1,0,0,0,1425,1427,3,92,46,0,1426,1425,1,0,
        0,0,1426,1427,1,0,0,0,1427,1591,1,0,0,0,1428,1429,5,297,0,0,1429,
        1433,5,368,0,0,1430,1431,3,86,43,0,1431,1432,3,896,448,0,1432,1434,
        1,0,0,0,1433,1430,1,0,0,0,1433,1434,1,0,0,0,1434,1438,1,0,0,0,1435,
        1436,5,176,0,0,1436,1439,3,208,104,0,1437,1439,3,208,104,0,1438,
        1435,1,0,0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1591,1,0,0,
        0,1440,1441,5,297,0,0,1441,1442,5,194,0,0,1442,1446,5,368,0,0,1443,
        1444,3,86,43,0,1444,1445,3,896,448,0,1445,1447,1,0,0,0,1446,1443,
        1,0,0,0,1446,1447,1,0,0,0,1447,1451,1,0,0,0,1448,1449,5,176,0,0,
        1449,1452,3,208,104,0,1450,1452,3,208,104,0,1451,1448,1,0,0,0,1451,
        1450,1,0,0,0,1451,1452,1,0,0,0,1452,1591,1,0,0,0,1453,1455,5,297,
        0,0,1454,1456,5,304,0,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,
        1457,1,0,0,0,1457,1458,5,46,0,0,1458,1459,3,86,43,0,1459,1463,3,
        640,320,0,1460,1461,3,86,43,0,1461,1462,3,896,448,0,1462,1464,1,
        0,0,0,1463,1460,1,0,0,0,1463,1464,1,0,0,0,1464,1468,1,0,0,0,1465,
        1466,5,176,0,0,1466,1469,3,208,104,0,1467,1469,3,208,104,0,1468,
        1465,1,0,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1591,1,0,0,
        0,1470,1471,5,297,0,0,1471,1474,5,137,0,0,1472,1473,5,176,0,0,1473,
        1475,3,206,103,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,1591,1,
        0,0,0,1476,1477,5,297,0,0,1477,1478,5,229,0,0,1478,1480,3,640,320,
        0,1479,1481,3,880,440,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,
        1483,1,0,0,0,1482,1484,3,652,326,0,1483,1482,1,0,0,0,1483,1484,1,
        0,0,0,1484,1486,1,0,0,0,1485,1487,3,740,370,0,1486,1485,1,0,0,0,
        1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1490,3,410,205,0,1489,1488,
        1,0,0,0,1489,1490,1,0,0,0,1490,1591,1,0,0,0,1491,1492,5,297,0,0,
        1492,1498,5,58,0,0,1493,1494,3,88,44,0,1494,1495,3,896,448,0,1495,
        1499,1,0,0,0,1496,1497,5,318,0,0,1497,1499,3,640,320,0,1498,1493,
        1,0,0,0,1498,1496,1,0,0,0,1499,1591,1,0,0,0,1500,1501,5,297,0,0,
        1501,1502,5,318,0,0,1502,1506,5,117,0,0,1503,1504,3,86,43,0,1504,
        1505,3,896,448,0,1505,1507,1,0,0,0,1506,1503,1,0,0,0,1506,1507,1,
        0,0,0,1507,1508,1,0,0,0,1508,1509,5,176,0,0,1509,1511,3,208,104,
        0,1510,1512,3,880,440,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,
        1591,1,0,0,0,1513,1514,5,297,0,0,1514,1515,5,321,0,0,1515,1519,3,
        640,320,0,1516,1517,5,386,0,0,1517,1518,5,412,0,0,1518,1520,5,387,
        0,0,1519,1516,1,0,0,0,1519,1520,1,0,0,0,1520,1591,1,0,0,0,1521,1522,
        5,297,0,0,1522,1534,5,183,0,0,1523,1524,3,88,44,0,1524,1526,3,896,
        448,0,1525,1527,5,117,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,
        1535,1,0,0,0,1528,1530,3,78,39,0,1529,1528,1,0,0,0,1529,1530,1,0,
        0,0,1530,1532,1,0,0,0,1531,1533,5,117,0,0,1532,1531,1,0,0,0,1532,
        1533,1,0,0,0,1533,1535,1,0,0,0,1534,1523,1,0,0,0,1534,1529,1,0,0,
        0,1535,1591,1,0,0,0,1536,1537,5,297,0,0,1537,1574,5,50,0,0,1538,
        1575,3,458,229,0,1539,1540,3,88,44,0,1540,1542,3,896,448,0,1541,
        1543,3,460,230,0,1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,
        0,0,0,1544,1546,3,462,231,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,
        1546,1548,1,0,0,0,1547,1549,3,464,232,0,1548,1547,1,0,0,0,1548,1549,
        1,0,0,0,1549,1551,1,0,0,0,1550,1552,3,740,370,0,1551,1550,1,0,0,
        0,1551,1552,1,0,0,0,1552,1554,1,0,0,0,1553,1555,3,410,205,0,1554,
        1553,1,0,0,0,1554,1555,1,0,0,0,1555,1575,1,0,0,0,1556,1558,3,78,
        39,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,1559,
        1561,3,460,230,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1563,1,
        0,0,0,1562,1564,3,462,231,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,
        1564,1566,1,0,0,0,1565,1567,3,464,232,0,1566,1565,1,0,0,0,1566,1567,
        1,0,0,0,1567,1569,1,0,0,0,1568,1570,3,740,370,0,1569,1568,1,0,0,
        0,1569,1570,1,0,0,0,1570,1572,1,0,0,0,1571,1573,3,410,205,0,1572,
        1571,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,1574,1538,1,0,0,
        0,1574,1539,1,0,0,0,1574,1557,1,0,0,0,1575,1591,1,0,0,0,1576,1577,
        5,297,0,0,1577,1591,5,335,0,0,1578,1579,5,297,0,0,1579,1580,5,54,
        0,0,1580,1591,5,412,0,0,1581,1582,5,297,0,0,1582,1586,5,270,0,0,
        1583,1584,5,233,0,0,1584,1587,3,896,448,0,1585,1587,5,234,0,0,1586,
        1583,1,0,0,0,1586,1585,1,0,0,0,1587,1591,1,0,0,0,1588,1589,5,297,
        0,0,1589,1591,5,70,0,0,1590,1409,1,0,0,0,1590,1415,1,0,0,0,1590,
        1428,1,0,0,0,1590,1440,1,0,0,0,1590,1453,1,0,0,0,1590,1470,1,0,0,
        0,1590,1476,1,0,0,0,1590,1491,1,0,0,0,1590,1500,1,0,0,0,1590,1513,
        1,0,0,0,1590,1521,1,0,0,0,1590,1536,1,0,0,0,1590,1576,1,0,0,0,1590,
        1578,1,0,0,0,1590,1581,1,0,0,0,1590,1588,1,0,0,0,1591,91,1,0,0,0,
        1592,1593,5,372,0,0,1593,1594,3,896,448,0,1594,1595,5,392,0,0,1595,
        1596,5,412,0,0,1596,1601,1,0,0,0,1597,1598,5,176,0,0,1598,1601,3,
        208,104,0,1599,1601,3,208,104,0,1600,1592,1,0,0,0,1600,1597,1,0,
        0,0,1600,1599,1,0,0,0,1601,93,1,0,0,0,1602,1603,5,182,0,0,1603,1604,
        5,318,0,0,1604,1606,3,640,320,0,1605,1607,3,880,440,0,1606,1605,
        1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,3,98,49,0,
        1609,95,1,0,0,0,1610,1611,5,182,0,0,1611,1612,3,88,44,0,1612,1613,
        3,896,448,0,1613,1614,3,98,49,0,1614,97,1,0,0,0,1615,1616,7,7,0,
        0,1616,99,1,0,0,0,1617,1618,5,350,0,0,1618,1619,5,318,0,0,1619,1621,
        3,640,320,0,1620,1622,3,880,440,0,1621,1620,1,0,0,0,1621,1622,1,
        0,0,0,1622,101,1,0,0,0,1623,1624,5,350,0,0,1624,1625,3,88,44,0,1625,
        1626,3,896,448,0,1626,103,1,0,0,0,1627,1628,5,58,0,0,1628,1629,5,
        277,0,0,1629,1630,3,896,448,0,1630,105,1,0,0,0,1631,1632,5,98,0,
        0,1632,1633,5,277,0,0,1633,1634,3,896,448,0,1634,107,1,0,0,0,1635,
        1636,5,138,0,0,1636,1638,3,136,68,0,1637,1639,3,130,65,0,1638,1637,
        1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1641,5,330,0,0,
        1641,1643,3,142,71,0,1642,1644,3,146,73,0,1643,1642,1,0,0,0,1643,
        1644,1,0,0,0,1644,109,1,0,0,0,1645,1647,5,273,0,0,1646,1648,3,148,
        74,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,
        1651,3,136,68,0,1650,1652,3,130,65,0,1651,1650,1,0,0,0,1651,1652,
        1,0,0,0,1652,1653,1,0,0,0,1653,1654,5,134,0,0,1654,1655,3,142,71,
        0,1655,111,1,0,0,0,1656,1658,5,138,0,0,1657,1659,5,277,0,0,1658,
        1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1665,3,896,
        448,0,1661,1662,5,384,0,0,1662,1664,3,896,448,0,1663,1661,1,0,0,
        0,1664,1667,1,0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1668,
        1,0,0,0,1667,1665,1,0,0,0,1668,1669,5,330,0,0,1669,1671,3,142,71,
        0,1670,1672,3,152,76,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,
        113,1,0,0,0,1673,1675,5,273,0,0,1674,1676,3,150,75,0,1675,1674,1,
        0,0,0,1675,1676,1,0,0,0,1676,1678,1,0,0,0,1677,1679,5,277,0,0,1678,
        1677,1,0,0,0,1678,1679,1,0,0,0,1679,1680,1,0,0,0,1680,1685,3,896,
        448,0,1681,1682,5,384,0,0,1682,1684,3,896,448,0,1683,1681,1,0,0,
        0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,1688,
        1,0,0,0,1687,1685,1,0,0,0,1688,1689,5,134,0,0,1689,1690,3,142,71,
        0,1690,115,1,0,0,0,1691,1692,5,297,0,0,1692,1693,5,277,0,0,1693,
        1694,5,138,0,0,1694,1695,3,144,72,0,1695,117,1,0,0,0,1696,1697,5,
        297,0,0,1697,1698,5,278,0,0,1698,119,1,0,0,0,1699,1700,5,297,0,0,
        1700,1701,5,62,0,0,1701,1702,5,278,0,0,1702,121,1,0,0,0,1703,1704,
        5,293,0,0,1704,1708,5,277,0,0,1705,1709,5,7,0,0,1706,1709,5,203,
        0,0,1707,1709,3,896,448,0,1708,1705,1,0,0,0,1708,1706,1,0,0,0,1708,
        1707,1,0,0,0,1709,123,1,0,0,0,1710,1711,5,297,0,0,1711,1713,5,138,
        0,0,1712,1714,3,144,72,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,
        1717,1,0,0,0,1715,1716,5,214,0,0,1716,1718,3,128,64,0,1717,1715,
        1,0,0,0,1717,1718,1,0,0,0,1718,125,1,0,0,0,1719,1720,5,297,0,0,1720,
        1721,5,242,0,0,1721,1722,3,896,448,0,1722,127,1,0,0,0,1723,1726,
        5,7,0,0,1724,1726,3,134,67,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,
        1726,129,1,0,0,0,1727,1728,5,214,0,0,1728,1729,3,132,66,0,1729,131,
        1,0,0,0,1730,1731,3,88,44,0,1731,1732,3,896,448,0,1732,1745,1,0,
        0,0,1733,1735,5,318,0,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,
        1736,1,0,0,0,1736,1738,3,640,320,0,1737,1739,3,880,440,0,1738,1737,
        1,0,0,0,1738,1739,1,0,0,0,1739,1745,1,0,0,0,1740,1741,5,355,0,0,
        1741,1745,5,412,0,0,1742,1743,5,292,0,0,1743,1745,3,896,448,0,1744,
        1730,1,0,0,0,1744,1734,1,0,0,0,1744,1740,1,0,0,0,1744,1742,1,0,0,
        0,1745,133,1,0,0,0,1746,1747,3,88,44,0,1747,1748,3,896,448,0,1748,
        1767,1,0,0,0,1749,1751,5,318,0,0,1750,1749,1,0,0,0,1750,1751,1,0,
        0,0,1751,1752,1,0,0,0,1752,1757,3,640,320,0,1753,1754,5,386,0,0,
        1754,1755,3,272,136,0,1755,1756,5,387,0,0,1756,1758,1,0,0,0,1757,
        1753,1,0,0,0,1757,1758,1,0,0,0,1758,1760,1,0,0,0,1759,1761,3,880,
        440,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,1767,1,0,0,0,1762,
        1763,5,355,0,0,1763,1767,5,412,0,0,1764,1765,5,292,0,0,1765,1767,
        3,896,448,0,1766,1746,1,0,0,0,1766,1750,1,0,0,0,1766,1762,1,0,0,
        0,1766,1764,1,0,0,0,1767,135,1,0,0,0,1768,1773,3,138,69,0,1769,1770,
        5,384,0,0,1770,1772,3,138,69,0,1771,1769,1,0,0,0,1772,1775,1,0,0,
        0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,137,1,0,0,0,1775,1773,
        1,0,0,0,1776,1781,3,140,70,0,1777,1778,5,386,0,0,1778,1779,3,272,
        136,0,1779,1780,5,387,0,0,1780,1782,1,0,0,0,1781,1777,1,0,0,0,1781,
        1782,1,0,0,0,1782,139,1,0,0,0,1783,1784,7,8,0,0,1784,141,1,0,0,0,
        1785,1790,3,144,72,0,1786,1787,5,384,0,0,1787,1789,3,144,72,0,1788,
        1786,1,0,0,0,1789,1792,1,0,0,0,1790,1788,1,0,0,0,1790,1791,1,0,0,
        0,1791,143,1,0,0,0,1792,1790,1,0,0,0,1793,1794,5,358,0,0,1794,1800,
        3,900,450,0,1795,1796,5,139,0,0,1796,1800,3,900,450,0,1797,1798,
        5,277,0,0,1798,1800,3,896,448,0,1799,1793,1,0,0,0,1799,1795,1,0,
        0,0,1799,1797,1,0,0,0,1800,145,1,0,0,0,1801,1802,5,375,0,0,1802,
        1803,5,138,0,0,1803,1804,5,217,0,0,1804,147,1,0,0,0,1805,1806,5,
        138,0,0,1806,1807,5,217,0,0,1807,1808,5,129,0,0,1808,149,1,0,0,0,
        1809,1810,5,5,0,0,1810,1811,5,217,0,0,1811,1812,5,129,0,0,1812,151,
        1,0,0,0,1813,1814,5,375,0,0,1814,1815,5,5,0,0,1815,1816,5,217,0,
        0,1816,153,1,0,0,0,1817,1819,5,202,0,0,1818,1820,5,266,0,0,1819,
        1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1822,5,318,
        0,0,1822,1828,3,640,320,0,1823,1824,7,9,0,0,1824,1826,5,229,0,0,
        1825,1827,3,884,442,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1829,
        1,0,0,0,1828,1823,1,0,0,0,1828,1829,1,0,0,0,1829,155,1,0,0,0,1830,
        1835,3,158,79,0,1831,1832,5,384,0,0,1832,1834,3,158,79,0,1833,1831,
        1,0,0,0,1834,1837,1,0,0,0,1835,1833,1,0,0,0,1835,1836,1,0,0,0,1836,
        157,1,0,0,0,1837,1835,1,0,0,0,1838,1839,3,160,80,0,1839,1840,5,412,
        0,0,1840,159,1,0,0,0,1841,1842,7,10,0,0,1842,161,1,0,0,0,1843,1845,
        5,58,0,0,1844,1846,5,322,0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,
        1846,1847,1,0,0,0,1847,1848,5,136,0,0,1848,1849,3,898,449,0,1849,
        1850,5,17,0,0,1850,1853,5,412,0,0,1851,1852,5,359,0,0,1852,1854,
        3,156,78,0,1853,1851,1,0,0,0,1853,1854,1,0,0,0,1854,163,1,0,0,0,
        1855,1857,5,98,0,0,1856,1858,5,322,0,0,1857,1856,1,0,0,0,1857,1858,
        1,0,0,0,1858,1859,1,0,0,0,1859,1861,5,136,0,0,1860,1862,3,36,18,
        0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,1864,
        3,898,449,0,1864,165,1,0,0,0,1865,1866,5,261,0,0,1866,1867,7,11,
        0,0,1867,167,1,0,0,0,1868,1869,5,58,0,0,1869,1870,5,322,0,0,1870,
        1871,5,186,0,0,1871,1872,5,418,0,0,1872,1874,5,386,0,0,1873,1875,
        3,266,133,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,
        0,1876,1877,5,387,0,0,1877,1878,3,796,398,0,1878,169,1,0,0,0,1879,
        1880,5,98,0,0,1880,1881,5,322,0,0,1881,1883,5,186,0,0,1882,1884,
        3,36,18,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,
        1885,1886,5,418,0,0,1886,171,1,0,0,0,1887,1889,5,58,0,0,1888,1890,
        3,50,25,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1891,1,0,0,0,
        1891,1893,5,367,0,0,1892,1894,3,40,20,0,1893,1892,1,0,0,0,1893,1894,
        1,0,0,0,1894,1895,1,0,0,0,1895,1900,3,640,320,0,1896,1897,5,386,
        0,0,1897,1898,3,324,162,0,1898,1899,5,387,0,0,1899,1901,1,0,0,0,
        1900,1896,1,0,0,0,1900,1901,1,0,0,0,1901,1903,1,0,0,0,1902,1904,
        3,210,105,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1906,1,0,0,
        0,1905,1907,3,174,87,0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,
        1909,1,0,0,0,1908,1910,3,242,121,0,1909,1908,1,0,0,0,1909,1910,1,
        0,0,0,1910,1911,1,0,0,0,1911,1912,5,17,0,0,1912,1913,3,402,201,0,
        1913,173,1,0,0,0,1914,1915,5,228,0,0,1915,1921,5,214,0,0,1916,1917,
        5,386,0,0,1917,1922,3,272,136,0,1918,1919,5,305,0,0,1919,1920,5,
        386,0,0,1920,1922,3,218,109,0,1921,1916,1,0,0,0,1921,1918,1,0,0,
        0,1922,1923,1,0,0,0,1923,1924,5,387,0,0,1924,175,1,0,0,0,1925,1928,
        3,178,89,0,1926,1928,3,180,90,0,1927,1925,1,0,0,0,1927,1926,1,0,
        0,0,1928,177,1,0,0,0,1929,1930,5,42,0,0,1930,1931,5,214,0,0,1931,
        1932,5,386,0,0,1932,1933,3,272,136,0,1933,1934,5,387,0,0,1934,179,
        1,0,0,0,1935,1936,3,182,91,0,1936,1937,3,184,92,0,1937,181,1,0,0,
        0,1938,1939,5,94,0,0,1939,1940,5,214,0,0,1940,1941,5,386,0,0,1941,
        1942,3,272,136,0,1942,1943,5,387,0,0,1943,183,1,0,0,0,1944,1945,
        5,304,0,0,1945,1946,5,214,0,0,1946,1947,5,386,0,0,1947,1948,3,272,
        136,0,1948,1949,5,387,0,0,1949,185,1,0,0,0,1950,1951,5,98,0,0,1951,
        1953,5,367,0,0,1952,1954,3,36,18,0,1953,1952,1,0,0,0,1953,1954,1,
        0,0,0,1954,1955,1,0,0,0,1955,1956,3,642,321,0,1956,187,1,0,0,0,1957,
        1958,5,58,0,0,1958,1959,5,194,0,0,1959,1961,5,367,0,0,1960,1962,
        3,40,20,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,
        1963,1965,3,640,320,0,1964,1966,3,46,23,0,1965,1964,1,0,0,0,1965,
        1966,1,0,0,0,1966,1968,1,0,0,0,1967,1969,3,210,105,0,1968,1967,1,
        0,0,0,1968,1969,1,0,0,0,1969,1971,1,0,0,0,1970,1972,3,174,87,0,1971,
        1970,1,0,0,0,1971,1972,1,0,0,0,1972,1974,1,0,0,0,1973,1975,3,176,
        88,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1977,1,0,0,0,1976,
        1978,3,240,120,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1980,1,
        0,0,0,1979,1981,3,262,131,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,
        1981,1983,1,0,0,0,1982,1984,3,264,132,0,1983,1982,1,0,0,0,1983,1984,
        1,0,0,0,1984,1986,1,0,0,0,1985,1987,3,242,121,0,1986,1985,1,0,0,
        0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,5,17,0,0,1989,1990,
        3,402,201,0,1990,189,1,0,0,0,1991,1992,5,98,0,0,1992,1993,5,194,
        0,0,1993,1995,5,367,0,0,1994,1996,3,36,18,0,1995,1994,1,0,0,0,1995,
        1996,1,0,0,0,1996,1997,1,0,0,0,1997,1998,3,642,321,0,1998,191,1,
        0,0,0,1999,2000,5,58,0,0,2000,2001,5,283,0,0,2001,2002,5,248,0,0,
        2002,2003,3,896,448,0,2003,2005,3,200,100,0,2004,2006,3,202,101,
        0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2008,1,0,0,0,2007,2009,
        3,284,142,0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,
        0,2010,2011,3,204,102,0,2011,193,1,0,0,0,2012,2013,5,98,0,0,2013,
        2014,5,283,0,0,2014,2015,5,248,0,0,2015,2016,3,896,448,0,2016,195,
        1,0,0,0,2017,2018,5,9,0,0,2018,2019,5,283,0,0,2019,2020,5,248,0,
        0,2020,2021,3,896,448,0,2021,2022,3,198,99,0,2022,197,1,0,0,0,2023,
        2029,3,200,100,0,2024,2029,3,202,101,0,2025,2029,3,284,142,0,2026,
        2029,3,204,102,0,2027,2029,5,110,0,0,2028,2023,1,0,0,0,2028,2024,
        1,0,0,0,2028,2025,1,0,0,0,2028,2026,1,0,0,0,2028,2027,1,0,0,0,2029,
        199,1,0,0,0,2030,2031,5,59,0,0,2031,2046,5,412,0,0,2032,2034,5,106,
        0,0,2033,2035,5,417,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,2035,
        2036,1,0,0,0,2036,2043,3,794,397,0,2037,2041,5,20,0,0,2038,2039,
        5,213,0,0,2039,2041,5,32,0,0,2040,2037,1,0,0,0,2040,2038,1,0,0,0,
        2041,2042,1,0,0,0,2042,2044,5,412,0,0,2043,2040,1,0,0,0,2043,2044,
        1,0,0,0,2044,2046,1,0,0,0,2045,2030,1,0,0,0,2045,2032,1,0,0,0,2046,
        201,1,0,0,0,2047,2048,5,111,0,0,2048,2049,5,17,0,0,2049,2050,5,412,
        0,0,2050,203,1,0,0,0,2051,2053,5,82,0,0,2052,2051,1,0,0,0,2052,2053,
        1,0,0,0,2053,2054,1,0,0,0,2054,2055,5,17,0,0,2055,2056,3,0,0,0,2056,
        205,1,0,0,0,2057,2060,3,898,449,0,2058,2060,5,412,0,0,2059,2057,
        1,0,0,0,2059,2058,1,0,0,0,2060,207,1,0,0,0,2061,2064,3,896,448,0,
        2062,2064,5,412,0,0,2063,2061,1,0,0,0,2063,2062,1,0,0,0,2064,209,
        1,0,0,0,2065,2066,5,47,0,0,2066,2067,5,412,0,0,2067,211,1,0,0,0,
        2068,2069,5,228,0,0,2069,2078,5,32,0,0,2070,2073,5,386,0,0,2071,
        2074,3,214,107,0,2072,2074,3,216,108,0,2073,2071,1,0,0,0,2073,2072,
        1,0,0,0,2074,2079,1,0,0,0,2075,2076,5,305,0,0,2076,2077,5,386,0,
        0,2077,2079,3,218,109,0,2078,2070,1,0,0,0,2078,2075,1,0,0,0,2079,
        2080,1,0,0,0,2080,2081,5,387,0,0,2081,213,1,0,0,0,2082,2087,3,338,
        169,0,2083,2084,5,384,0,0,2084,2086,3,338,169,0,2085,2083,1,0,0,
        0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,215,
        1,0,0,0,2089,2087,1,0,0,0,2090,2095,3,274,137,0,2091,2092,5,384,
        0,0,2092,2094,3,274,137,0,2093,2091,1,0,0,0,2094,2097,1,0,0,0,2095,
        2093,1,0,0,0,2095,2096,1,0,0,0,2096,217,1,0,0,0,2097,2095,1,0,0,
        0,2098,2103,3,220,110,0,2099,2100,5,384,0,0,2100,2102,3,220,110,
        0,2101,2099,1,0,0,0,2102,2105,1,0,0,0,2103,2101,1,0,0,0,2103,2104,
        1,0,0,0,2104,219,1,0,0,0,2105,2103,1,0,0,0,2106,2107,3,222,111,0,
        2107,221,1,0,0,0,2108,2122,3,274,137,0,2109,2110,7,12,0,0,2110,2111,
        5,386,0,0,2111,2112,3,274,137,0,2112,2113,5,387,0,0,2113,2122,1,
        0,0,0,2114,2115,7,13,0,0,2115,2116,5,386,0,0,2116,2117,5,417,0,0,
        2117,2118,5,384,0,0,2118,2119,3,274,137,0,2119,2120,5,387,0,0,2120,
        2122,1,0,0,0,2121,2108,1,0,0,0,2121,2109,1,0,0,0,2121,2114,1,0,0,
        0,2122,223,1,0,0,0,2123,2124,5,42,0,0,2124,2125,5,32,0,0,2125,2126,
        5,386,0,0,2126,2127,3,272,136,0,2127,2134,5,387,0,0,2128,2129,5,
        304,0,0,2129,2130,5,32,0,0,2130,2131,5,386,0,0,2131,2132,3,278,139,
        0,2132,2133,5,387,0,0,2133,2135,1,0,0,0,2134,2128,1,0,0,0,2134,2135,
        1,0,0,0,2135,2136,1,0,0,0,2136,2137,5,159,0,0,2137,2138,5,417,0,
        0,2138,2139,5,31,0,0,2139,225,1,0,0,0,2140,2141,5,42,0,0,2141,2142,
        5,159,0,0,2142,2143,5,417,0,0,2143,2144,5,31,0,0,2144,227,1,0,0,
        0,2145,2146,5,299,0,0,2146,2147,5,32,0,0,2147,2148,5,386,0,0,2148,
        2149,3,272,136,0,2149,2150,5,387,0,0,2150,2151,5,214,0,0,2151,2152,
        5,386,0,0,2152,2153,3,306,153,0,2153,2155,5,387,0,0,2154,2156,3,
        48,24,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,229,1,0,0,0,2157,
        2160,3,236,118,0,2158,2160,3,238,119,0,2159,2157,1,0,0,0,2159,2158,
        1,0,0,0,2160,231,1,0,0,0,2161,2162,5,256,0,0,2162,2163,5,412,0,0,
        2163,233,1,0,0,0,2164,2165,5,257,0,0,2165,2166,5,412,0,0,2166,235,
        1,0,0,0,2167,2168,5,281,0,0,2168,2169,5,132,0,0,2169,2170,5,290,
        0,0,2170,2174,5,412,0,0,2171,2172,5,375,0,0,2172,2173,5,291,0,0,
        2173,2175,3,244,122,0,2174,2171,1,0,0,0,2174,2175,1,0,0,0,2175,237,
        1,0,0,0,2176,2177,5,281,0,0,2177,2178,5,132,0,0,2178,2180,5,84,0,
        0,2179,2181,3,252,126,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,
        2183,1,0,0,0,2182,2184,3,254,127,0,2183,2182,1,0,0,0,2183,2184,1,
        0,0,0,2184,2186,1,0,0,0,2185,2187,3,256,128,0,2186,2185,1,0,0,0,
        2186,2187,1,0,0,0,2187,2189,1,0,0,0,2188,2190,3,258,129,0,2189,2188,
        1,0,0,0,2189,2190,1,0,0,0,2190,2192,1,0,0,0,2191,2193,3,260,130,
        0,2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,239,1,0,0,0,2194,2197,
        3,238,119,0,2195,2197,3,236,118,0,2196,2194,1,0,0,0,2196,2195,1,
        0,0,0,2197,241,1,0,0,0,2198,2199,5,321,0,0,2199,2200,3,244,122,0,
        2200,243,1,0,0,0,2201,2202,5,386,0,0,2202,2203,3,246,123,0,2203,
        2204,5,387,0,0,2204,245,1,0,0,0,2205,2210,3,248,124,0,2206,2207,
        5,384,0,0,2207,2209,3,248,124,0,2208,2206,1,0,0,0,2209,2212,1,0,
        0,0,2210,2208,1,0,0,0,2210,2211,1,0,0,0,2211,2222,1,0,0,0,2212,2210,
        1,0,0,0,2213,2218,3,250,125,0,2214,2215,5,384,0,0,2215,2217,3,250,
        125,0,2216,2214,1,0,0,0,2217,2220,1,0,0,0,2218,2216,1,0,0,0,2218,
        2219,1,0,0,0,2219,2222,1,0,0,0,2220,2218,1,0,0,0,2221,2205,1,0,0,
        0,2221,2213,1,0,0,0,2222,247,1,0,0,0,2223,2224,5,412,0,0,2224,2225,
        5,392,0,0,2225,2226,5,412,0,0,2226,249,1,0,0,0,2227,2228,5,412,0,
        0,2228,251,1,0,0,0,2229,2230,5,122,0,0,2230,2231,5,323,0,0,2231,
        2232,5,32,0,0,2232,2236,5,412,0,0,2233,2234,5,105,0,0,2234,2235,
        5,32,0,0,2235,2237,5,412,0,0,2236,2233,1,0,0,0,2236,2237,1,0,0,0,
        2237,253,1,0,0,0,2238,2239,5,44,0,0,2239,2240,5,162,0,0,2240,2241,
        5,323,0,0,2241,2242,5,32,0,0,2242,2243,5,412,0,0,2243,255,1,0,0,
        0,2244,2245,5,190,0,0,2245,2246,5,167,0,0,2246,2247,5,323,0,0,2247,
        2248,5,32,0,0,2248,2249,5,412,0,0,2249,257,1,0,0,0,2250,2251,5,178,
        0,0,2251,2252,5,323,0,0,2252,2253,5,32,0,0,2253,2254,5,412,0,0,2254,
        259,1,0,0,0,2255,2256,5,209,0,0,2256,2257,5,82,0,0,2257,2258,5,17,
        0,0,2258,2259,5,412,0,0,2259,261,1,0,0,0,2260,2261,5,310,0,0,2261,
        2262,5,17,0,0,2262,2263,5,154,0,0,2263,2264,5,412,0,0,2264,2265,
        5,223,0,0,2265,2270,5,412,0,0,2266,2267,5,153,0,0,2267,2268,5,412,
        0,0,2268,2269,5,222,0,0,2269,2271,5,412,0,0,2270,2266,1,0,0,0,2270,
        2271,1,0,0,0,2271,2302,1,0,0,0,2272,2273,5,310,0,0,2273,2274,5,32,
        0,0,2274,2278,5,412,0,0,2275,2276,5,375,0,0,2276,2277,5,291,0,0,
        2277,2279,3,244,122,0,2278,2275,1,0,0,0,2278,2279,1,0,0,0,2279,2283,
        1,0,0,0,2280,2281,5,310,0,0,2281,2282,5,17,0,0,2282,2284,3,896,448,
        0,2283,2280,1,0,0,0,2283,2284,1,0,0,0,2284,2302,1,0,0,0,2285,2286,
        5,310,0,0,2286,2287,5,32,0,0,2287,2291,3,896,448,0,2288,2289,5,375,
        0,0,2289,2290,5,291,0,0,2290,2292,3,244,122,0,2291,2288,1,0,0,0,
        2291,2292,1,0,0,0,2292,2296,1,0,0,0,2293,2294,5,310,0,0,2294,2295,
        5,17,0,0,2295,2297,3,896,448,0,2296,2293,1,0,0,0,2296,2297,1,0,0,
        0,2297,2302,1,0,0,0,2298,2299,5,310,0,0,2299,2300,5,17,0,0,2300,
        2302,3,896,448,0,2301,2260,1,0,0,0,2301,2272,1,0,0,0,2301,2285,1,
        0,0,0,2301,2298,1,0,0,0,2302,263,1,0,0,0,2303,2304,5,181,0,0,2304,
        2305,5,412,0,0,2305,265,1,0,0,0,2306,2311,3,332,166,0,2307,2308,
        5,384,0,0,2308,2310,3,332,166,0,2309,2307,1,0,0,0,2310,2313,1,0,
        0,0,2311,2309,1,0,0,0,2311,2312,1,0,0,0,2312,267,1,0,0,0,2313,2311,
        1,0,0,0,2314,2319,3,334,167,0,2315,2316,5,384,0,0,2316,2318,3,334,
        167,0,2317,2315,1,0,0,0,2318,2321,1,0,0,0,2319,2317,1,0,0,0,2319,
        2320,1,0,0,0,2320,269,1,0,0,0,2321,2319,1,0,0,0,2322,2327,3,362,
        181,0,2323,2324,5,384,0,0,2324,2326,3,362,181,0,2325,2323,1,0,0,
        0,2326,2329,1,0,0,0,2327,2325,1,0,0,0,2327,2328,1,0,0,0,2328,271,
        1,0,0,0,2329,2327,1,0,0,0,2330,2335,3,274,137,0,2331,2332,5,384,
        0,0,2332,2334,3,274,137,0,2333,2331,1,0,0,0,2334,2337,1,0,0,0,2335,
        2333,1,0,0,0,2335,2336,1,0,0,0,2336,273,1,0,0,0,2337,2335,1,0,0,
        0,2338,2339,3,896,448,0,2339,275,1,0,0,0,2340,2350,3,896,448,0,2341,
        2346,5,382,0,0,2342,2347,5,100,0,0,2343,2347,5,168,0,0,2344,2347,
        5,364,0,0,2345,2347,3,896,448,0,2346,2342,1,0,0,0,2346,2343,1,0,
        0,0,2346,2344,1,0,0,0,2346,2345,1,0,0,0,2347,2349,1,0,0,0,2348,2341,
        1,0,0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,
        277,1,0,0,0,2352,2350,1,0,0,0,2353,2358,3,322,161,0,2354,2355,5,
        384,0,0,2355,2357,3,322,161,0,2356,2354,1,0,0,0,2357,2360,1,0,0,
        0,2358,2356,1,0,0,0,2358,2359,1,0,0,0,2359,279,1,0,0,0,2360,2358,
        1,0,0,0,2361,2362,5,386,0,0,2362,2363,3,272,136,0,2363,2364,5,387,
        0,0,2364,281,1,0,0,0,2365,2367,3,284,142,0,2366,2368,3,286,143,0,
        2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2371,1,0,0,0,2369,2371,
        3,288,144,0,2370,2365,1,0,0,0,2370,2369,1,0,0,0,2371,283,1,0,0,0,
        2372,2373,7,14,0,0,2373,285,1,0,0,0,2374,2375,7,15,0,0,2375,287,
        1,0,0,0,2376,2380,5,104,0,0,2377,2378,5,206,0,0,2378,2380,5,104,
        0,0,2379,2376,1,0,0,0,2379,2377,1,0,0,0,2380,289,1,0,0,0,2381,2382,
        7,16,0,0,2382,291,1,0,0,0,2383,2384,5,55,0,0,2384,2386,3,896,448,
        0,2385,2383,1,0,0,0,2385,2386,1,0,0,0,2386,2387,1,0,0,0,2387,2389,
        3,296,148,0,2388,2390,3,358,179,0,2389,2388,1,0,0,0,2389,2390,1,
        0,0,0,2390,293,1,0,0,0,2391,2392,5,55,0,0,2392,2393,3,896,448,0,
        2393,2395,3,296,148,0,2394,2396,3,360,180,0,2395,2394,1,0,0,0,2395,
        2396,1,0,0,0,2396,295,1,0,0,0,2397,2400,3,298,149,0,2398,2400,3,
        300,150,0,2399,2397,1,0,0,0,2399,2398,1,0,0,0,2400,297,1,0,0,0,2401,
        2402,3,356,178,0,2402,2403,3,280,140,0,2403,299,1,0,0,0,2404,2405,
        5,40,0,0,2405,2406,5,386,0,0,2406,2407,3,796,398,0,2407,2408,5,387,
        0,0,2408,301,1,0,0,0,2409,2410,5,55,0,0,2410,2412,3,896,448,0,2411,
        2409,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,0,2413,2414,5,131,
        0,0,2414,2415,5,166,0,0,2415,2416,3,280,140,0,2416,2417,5,259,0,
        0,2417,2418,3,640,320,0,2418,2420,3,280,140,0,2419,2421,3,358,179,
        0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,303,1,0,0,0,2422,2423,
        5,55,0,0,2423,2424,3,896,448,0,2424,2425,5,131,0,0,2425,2426,5,166,
        0,0,2426,2427,3,280,140,0,2427,2428,5,259,0,0,2428,2429,3,640,320,
        0,2429,2431,3,280,140,0,2430,2432,3,360,180,0,2431,2430,1,0,0,0,
        2431,2432,1,0,0,0,2432,305,1,0,0,0,2433,2436,3,312,156,0,2434,2436,
        3,308,154,0,2435,2433,1,0,0,0,2435,2434,1,0,0,0,2436,307,1,0,0,0,
        2437,2442,3,310,155,0,2438,2439,5,384,0,0,2439,2441,3,310,155,0,
        2440,2438,1,0,0,0,2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,2443,
        1,0,0,0,2443,309,1,0,0,0,2444,2442,1,0,0,0,2445,2446,5,386,0,0,2446,
        2447,3,312,156,0,2447,2448,5,387,0,0,2448,311,1,0,0,0,2449,2454,
        3,314,157,0,2450,2451,5,384,0,0,2451,2453,3,314,157,0,2452,2450,
        1,0,0,0,2453,2456,1,0,0,0,2454,2452,1,0,0,0,2454,2455,1,0,0,0,2455,
        313,1,0,0,0,2456,2454,1,0,0,0,2457,2458,3,772,386,0,2458,315,1,0,
        0,0,2459,2462,3,314,157,0,2460,2462,3,310,155,0,2461,2459,1,0,0,
        0,2461,2460,1,0,0,0,2462,317,1,0,0,0,2463,2464,7,17,0,0,2464,319,
        1,0,0,0,2465,2466,5,210,0,0,2466,2467,7,18,0,0,2467,321,1,0,0,0,
        2468,2470,3,896,448,0,2469,2471,3,318,159,0,2470,2469,1,0,0,0,2470,
        2471,1,0,0,0,2471,2473,1,0,0,0,2472,2474,3,320,160,0,2473,2472,1,
        0,0,0,2473,2474,1,0,0,0,2474,323,1,0,0,0,2475,2480,3,326,163,0,2476,
        2477,5,384,0,0,2477,2479,3,326,163,0,2478,2476,1,0,0,0,2479,2482,
        1,0,0,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,325,1,0,0,0,2482,
        2480,1,0,0,0,2483,2486,3,896,448,0,2484,2485,5,47,0,0,2485,2487,
        5,412,0,0,2486,2484,1,0,0,0,2486,2487,1,0,0,0,2487,327,1,0,0,0,2488,
        2489,7,17,0,0,2489,329,1,0,0,0,2490,2492,3,796,398,0,2491,2493,3,
        328,164,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2495,1,0,0,0,
        2494,2496,3,320,160,0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,331,
        1,0,0,0,2497,2498,3,896,448,0,2498,2501,3,364,182,0,2499,2500,5,
        47,0,0,2500,2502,5,412,0,0,2501,2499,1,0,0,0,2501,2502,1,0,0,0,2502,
        333,1,0,0,0,2503,2506,3,336,168,0,2504,2506,3,338,169,0,2505,2503,
        1,0,0,0,2505,2504,1,0,0,0,2506,335,1,0,0,0,2507,2510,3,302,151,0,
        2508,2510,3,292,146,0,2509,2507,1,0,0,0,2509,2508,1,0,0,0,2510,337,
        1,0,0,0,2511,2512,3,896,448,0,2512,2514,3,364,182,0,2513,2515,3,
        340,170,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2518,1,0,0,0,
        2516,2517,5,47,0,0,2517,2519,5,412,0,0,2518,2516,1,0,0,0,2518,2519,
        1,0,0,0,2519,339,1,0,0,0,2520,2523,3,342,171,0,2521,2523,3,344,172,
        0,2522,2520,1,0,0,0,2522,2521,1,0,0,0,2523,341,1,0,0,0,2524,2525,
        5,55,0,0,2525,2527,3,896,448,0,2526,2524,1,0,0,0,2526,2527,1,0,0,
        0,2527,2528,1,0,0,0,2528,2529,5,259,0,0,2529,2530,3,640,320,0,2530,
        2531,5,386,0,0,2531,2532,3,274,137,0,2532,2534,5,387,0,0,2533,2535,
        3,358,179,0,2534,2533,1,0,0,0,2534,2535,1,0,0,0,2535,343,1,0,0,0,
        2536,2537,5,55,0,0,2537,2539,3,896,448,0,2538,2536,1,0,0,0,2538,
        2539,1,0,0,0,2539,2540,1,0,0,0,2540,2542,3,352,176,0,2541,2543,3,
        358,179,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,345,1,0,0,0,2544,
        2547,3,348,174,0,2545,2547,3,350,175,0,2546,2544,1,0,0,0,2546,2545,
        1,0,0,0,2547,347,1,0,0,0,2548,2549,5,55,0,0,2549,2551,3,896,448,
        0,2550,2548,1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,0,0,0,2552,2553,
        5,259,0,0,2553,2554,3,640,320,0,2554,2555,5,386,0,0,2555,2556,3,
        274,137,0,2556,2558,5,387,0,0,2557,2559,3,360,180,0,2558,2557,1,
        0,0,0,2558,2559,1,0,0,0,2559,349,1,0,0,0,2560,2561,5,55,0,0,2561,
        2563,3,896,448,0,2562,2560,1,0,0,0,2562,2563,1,0,0,0,2563,2564,1,
        0,0,0,2564,2566,3,352,176,0,2565,2567,3,360,180,0,2566,2565,1,0,
        0,0,2566,2567,1,0,0,0,2567,351,1,0,0,0,2568,2569,5,206,0,0,2569,
        2575,5,209,0,0,2570,2571,5,80,0,0,2571,2575,3,354,177,0,2572,2575,
        3,300,150,0,2573,2575,3,356,178,0,2574,2568,1,0,0,0,2574,2570,1,
        0,0,0,2574,2572,1,0,0,0,2574,2573,1,0,0,0,2575,353,1,0,0,0,2576,
        2580,3,772,386,0,2577,2580,3,752,376,0,2578,2580,3,758,379,0,2579,
        2576,1,0,0,0,2579,2577,1,0,0,0,2579,2578,1,0,0,0,2580,355,1,0,0,
        0,2581,2582,5,241,0,0,2582,2585,5,166,0,0,2583,2585,5,347,0,0,2584,
        2581,1,0,0,0,2584,2583,1,0,0,0,2585,357,1,0,0,0,2586,2588,3,282,
        141,0,2587,2589,3,290,145,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,
        2589,359,1,0,0,0,2590,2592,3,282,141,0,2591,2593,3,290,145,0,2592,
        2591,1,0,0,0,2592,2593,1,0,0,0,2593,361,1,0,0,0,2594,2595,3,896,
        448,0,2595,2596,5,383,0,0,2596,2599,3,364,182,0,2597,2598,5,47,0,
        0,2598,2600,5,412,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,363,
        1,0,0,0,2601,2602,3,368,184,0,2602,365,1,0,0,0,2603,2608,3,364,182,
        0,2604,2605,5,384,0,0,2605,2607,3,364,182,0,2606,2604,1,0,0,0,2607,
        2610,1,0,0,0,2608,2606,1,0,0,0,2608,2609,1,0,0,0,2609,367,1,0,0,
        0,2610,2608,1,0,0,0,2611,2617,3,370,185,0,2612,2617,3,372,186,0,
        2613,2617,3,374,187,0,2614,2617,3,376,188,0,2615,2617,3,378,189,
        0,2616,2611,1,0,0,0,2616,2612,1,0,0,0,2616,2613,1,0,0,0,2616,2614,
        1,0,0,0,2616,2615,1,0,0,0,2617,369,1,0,0,0,2618,2655,5,329,0,0,2619,
        2655,5,300,0,0,2620,2655,5,156,0,0,2621,2655,5,26,0,0,2622,2655,
        5,28,0,0,2623,2655,5,126,0,0,2624,2655,5,254,0,0,2625,2627,5,96,
        0,0,2626,2628,5,238,0,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,
        2655,1,0,0,0,2629,2655,5,71,0,0,2630,2655,5,72,0,0,2631,2655,5,326,
        0,0,2632,2655,5,327,0,0,2633,2634,5,326,0,0,2634,2635,5,375,0,0,
        2635,2636,5,180,0,0,2636,2637,5,325,0,0,2637,2655,5,381,0,0,2638,
        2655,5,312,0,0,2639,2655,5,27,0,0,2640,2648,5,79,0,0,2641,2642,5,
        386,0,0,2642,2645,5,417,0,0,2643,2644,5,384,0,0,2644,2646,5,417,
        0,0,2645,2643,1,0,0,0,2645,2646,1,0,0,0,2646,2647,1,0,0,0,2647,2649,
        5,387,0,0,2648,2641,1,0,0,0,2648,2649,1,0,0,0,2649,2655,1,0,0,0,
        2650,2651,7,19,0,0,2651,2652,5,386,0,0,2652,2653,5,417,0,0,2653,
        2655,5,387,0,0,2654,2618,1,0,0,0,2654,2619,1,0,0,0,2654,2620,1,0,
        0,0,2654,2621,1,0,0,0,2654,2622,1,0,0,0,2654,2623,1,0,0,0,2654,2624,
        1,0,0,0,2654,2625,1,0,0,0,2654,2629,1,0,0,0,2654,2630,1,0,0,0,2654,
        2631,1,0,0,0,2654,2632,1,0,0,0,2654,2633,1,0,0,0,2654,2638,1,0,0,
        0,2654,2639,1,0,0,0,2654,2640,1,0,0,0,2654,2650,1,0,0,0,2655,371,
        1,0,0,0,2656,2657,5,16,0,0,2657,2658,5,396,0,0,2658,2659,3,368,184,
        0,2659,2660,5,398,0,0,2660,373,1,0,0,0,2661,2662,5,313,0,0,2662,
        2663,5,396,0,0,2663,2664,3,270,135,0,2664,2665,5,398,0,0,2665,375,
        1,0,0,0,2666,2667,5,190,0,0,2667,2668,5,396,0,0,2668,2669,3,370,
        185,0,2669,2670,5,384,0,0,2670,2671,3,368,184,0,2671,2672,5,398,
        0,0,2672,377,1,0,0,0,2673,2674,5,346,0,0,2674,2675,5,396,0,0,2675,
        2676,3,366,183,0,2676,2677,5,398,0,0,2677,379,1,0,0,0,2678,2680,
        7,20,0,0,2679,2681,7,21,0,0,2680,2679,1,0,0,0,2680,2681,1,0,0,0,
        2681,381,1,0,0,0,2682,2684,3,386,193,0,2683,2682,1,0,0,0,2683,2684,
        1,0,0,0,2684,2685,1,0,0,0,2685,2686,3,384,192,0,2686,383,1,0,0,0,
        2687,2690,3,390,195,0,2688,2690,3,394,197,0,2689,2687,1,0,0,0,2689,
        2688,1,0,0,0,2690,385,1,0,0,0,2691,2692,5,375,0,0,2692,2697,3,388,
        194,0,2693,2694,5,384,0,0,2694,2696,3,388,194,0,2695,2693,1,0,0,
        0,2696,2699,1,0,0,0,2697,2695,1,0,0,0,2697,2698,1,0,0,0,2698,387,
        1,0,0,0,2699,2697,1,0,0,0,2700,2705,3,896,448,0,2701,2702,5,386,
        0,0,2702,2703,3,272,136,0,2703,2704,5,387,0,0,2704,2706,1,0,0,0,
        2705,2701,1,0,0,0,2705,2706,1,0,0,0,2706,2707,1,0,0,0,2707,2708,
        5,17,0,0,2708,2709,5,386,0,0,2709,2710,3,382,191,0,2710,2711,5,387,
        0,0,2711,389,1,0,0,0,2712,2718,3,392,196,0,2713,2714,3,380,190,0,
        2714,2715,3,392,196,0,2715,2717,1,0,0,0,2716,2713,1,0,0,0,2717,2720,
        1,0,0,0,2718,2716,1,0,0,0,2718,2719,1,0,0,0,2719,391,1,0,0,0,2720,
        2718,1,0,0,0,2721,2723,3,606,303,0,2722,2724,3,404,202,0,2723,2722,
        1,0,0,0,2724,2725,1,0,0,0,2725,2723,1,0,0,0,2725,2726,1,0,0,0,2726,
        393,1,0,0,0,2727,2728,3,406,203,0,2728,2729,3,398,199,0,2729,2732,
        1,0,0,0,2730,2732,3,398,199,0,2731,2727,1,0,0,0,2731,2730,1,0,0,
        0,2732,395,1,0,0,0,2733,2735,3,668,334,0,2734,2736,3,606,303,0,2735,
        2734,1,0,0,0,2735,2736,1,0,0,0,2736,2738,1,0,0,0,2737,2739,3,652,
        326,0,2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,2741,1,0,0,0,2740,
        2742,3,700,350,0,2741,2740,1,0,0,0,2741,2742,1,0,0,0,2742,2744,1,
        0,0,0,2743,2745,3,716,358,0,2744,2743,1,0,0,0,2744,2745,1,0,0,0,
        2745,2747,1,0,0,0,2746,2748,3,684,342,0,2747,2746,1,0,0,0,2747,2748,
        1,0,0,0,2748,2750,1,0,0,0,2749,2751,3,718,359,0,2750,2749,1,0,0,
        0,2750,2751,1,0,0,0,2751,2758,1,0,0,0,2752,2753,5,386,0,0,2753,2754,
        3,398,199,0,2754,2755,5,387,0,0,2755,2758,1,0,0,0,2756,2758,3,656,
        328,0,2757,2733,1,0,0,0,2757,2752,1,0,0,0,2757,2756,1,0,0,0,2758,
        397,1,0,0,0,2759,2761,3,396,198,0,2760,2762,3,400,200,0,2761,2760,
        1,0,0,0,2761,2762,1,0,0,0,2762,2764,1,0,0,0,2763,2765,3,740,370,
        0,2764,2763,1,0,0,0,2764,2765,1,0,0,0,2765,2767,1,0,0,0,2766,2768,
        3,742,371,0,2767,2766,1,0,0,0,2767,2768,1,0,0,0,2768,2770,1,0,0,
        0,2769,2771,3,746,373,0,2770,2769,1,0,0,0,2770,2771,1,0,0,0,2771,
        2773,1,0,0,0,2772,2774,3,748,374,0,2773,2772,1,0,0,0,2773,2774,1,
        0,0,0,2774,2776,1,0,0,0,2775,2777,3,410,205,0,2776,2775,1,0,0,0,
        2776,2777,1,0,0,0,2777,399,1,0,0,0,2778,2779,3,380,190,0,2779,2780,
        3,396,198,0,2780,2782,1,0,0,0,2781,2778,1,0,0,0,2782,2783,1,0,0,
        0,2783,2781,1,0,0,0,2783,2784,1,0,0,0,2784,401,1,0,0,0,2785,2787,
        3,386,193,0,2786,2785,1,0,0,0,2786,2787,1,0,0,0,2787,2788,1,0,0,
        0,2788,2789,3,398,199,0,2789,403,1,0,0,0,2790,2791,3,406,203,0,2791,
        2793,3,668,334,0,2792,2794,3,624,312,0,2793,2792,1,0,0,0,2793,2794,
        1,0,0,0,2794,2796,1,0,0,0,2795,2797,3,652,326,0,2796,2795,1,0,0,
        0,2796,2797,1,0,0,0,2797,2799,1,0,0,0,2798,2800,3,700,350,0,2799,
        2798,1,0,0,0,2799,2800,1,0,0,0,2800,2802,1,0,0,0,2801,2803,3,716,
        358,0,2802,2801,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,0,2804,
        2806,3,684,342,0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,2808,1,
        0,0,0,2807,2809,3,718,359,0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,
        2809,2811,1,0,0,0,2810,2812,3,740,370,0,2811,2810,1,0,0,0,2811,2812,
        1,0,0,0,2812,2814,1,0,0,0,2813,2815,3,742,371,0,2814,2813,1,0,0,
        0,2814,2815,1,0,0,0,2815,2817,1,0,0,0,2816,2818,3,746,373,0,2817,
        2816,1,0,0,0,2817,2818,1,0,0,0,2818,2820,1,0,0,0,2819,2821,3,748,
        374,0,2820,2819,1,0,0,0,2820,2821,1,0,0,0,2821,2823,1,0,0,0,2822,
        2824,3,410,205,0,2823,2822,1,0,0,0,2823,2824,1,0,0,0,2824,2860,1,
        0,0,0,2825,2827,3,668,334,0,2826,2828,3,624,312,0,2827,2826,1,0,
        0,0,2827,2828,1,0,0,0,2828,2830,1,0,0,0,2829,2831,3,652,326,0,2830,
        2829,1,0,0,0,2830,2831,1,0,0,0,2831,2833,1,0,0,0,2832,2834,3,700,
        350,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,2836,1,0,0,0,2835,
        2837,3,716,358,0,2836,2835,1,0,0,0,2836,2837,1,0,0,0,2837,2839,1,
        0,0,0,2838,2840,3,684,342,0,2839,2838,1,0,0,0,2839,2840,1,0,0,0,
        2840,2842,1,0,0,0,2841,2843,3,718,359,0,2842,2841,1,0,0,0,2842,2843,
        1,0,0,0,2843,2845,1,0,0,0,2844,2846,3,740,370,0,2845,2844,1,0,0,
        0,2845,2846,1,0,0,0,2846,2848,1,0,0,0,2847,2849,3,742,371,0,2848,
        2847,1,0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2852,3,746,
        373,0,2851,2850,1,0,0,0,2851,2852,1,0,0,0,2852,2854,1,0,0,0,2853,
        2855,3,748,374,0,2854,2853,1,0,0,0,2854,2855,1,0,0,0,2855,2857,1,
        0,0,0,2856,2858,3,410,205,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,
        2858,2860,1,0,0,0,2859,2790,1,0,0,0,2859,2825,1,0,0,0,2860,405,1,
        0,0,0,2861,2878,5,155,0,0,2862,2863,5,225,0,0,2863,2865,3,408,204,
        0,2864,2866,3,40,20,0,2865,2864,1,0,0,0,2865,2866,1,0,0,0,2866,2879,
        1,0,0,0,2867,2869,5,159,0,0,2868,2870,5,318,0,0,2869,2868,1,0,0,
        0,2869,2870,1,0,0,0,2870,2871,1,0,0,0,2871,2876,3,878,439,0,2872,
        2873,5,386,0,0,2873,2874,3,272,136,0,2874,2875,5,387,0,0,2875,2877,
        1,0,0,0,2876,2872,1,0,0,0,2876,2877,1,0,0,0,2877,2879,1,0,0,0,2878,
        2862,1,0,0,0,2878,2867,1,0,0,0,2879,407,1,0,0,0,2880,2882,5,180,
        0,0,2881,2880,1,0,0,0,2881,2882,1,0,0,0,2882,2883,1,0,0,0,2883,2884,
        5,90,0,0,2884,2886,5,412,0,0,2885,2887,3,240,120,0,2886,2885,1,0,
        0,0,2886,2887,1,0,0,0,2887,2889,1,0,0,0,2888,2890,3,262,131,0,2889,
        2888,1,0,0,0,2889,2890,1,0,0,0,2890,2894,1,0,0,0,2891,2892,5,318,
        0,0,2892,2894,3,878,439,0,2893,2881,1,0,0,0,2893,2891,1,0,0,0,2894,
        409,1,0,0,0,2895,2904,5,177,0,0,2896,2897,5,417,0,0,2897,2899,5,
        384,0,0,2898,2896,1,0,0,0,2898,2899,1,0,0,0,2899,2900,1,0,0,0,2900,
        2905,5,417,0,0,2901,2902,5,417,0,0,2902,2903,5,213,0,0,2903,2905,
        5,417,0,0,2904,2898,1,0,0,0,2904,2901,1,0,0,0,2905,411,1,0,0,0,2906,
        2907,5,83,0,0,2907,2908,5,134,0,0,2908,2910,3,640,320,0,2909,2911,
        3,652,326,0,2910,2909,1,0,0,0,2910,2911,1,0,0,0,2911,413,1,0,0,0,
        2912,2913,3,598,299,0,2913,2914,5,392,0,0,2914,2915,3,416,208,0,
        2915,415,1,0,0,0,2916,2919,3,600,300,0,2917,2919,3,816,408,0,2918,
        2916,1,0,0,0,2918,2917,1,0,0,0,2919,417,1,0,0,0,2920,2921,5,293,
        0,0,2921,2926,3,414,207,0,2922,2923,5,384,0,0,2923,2925,3,414,207,
        0,2924,2922,1,0,0,0,2925,2928,1,0,0,0,2926,2924,1,0,0,0,2926,2927,
        1,0,0,0,2927,419,1,0,0,0,2928,2926,1,0,0,0,2929,2930,5,354,0,0,2930,
        2931,3,640,320,0,2931,2933,3,418,209,0,2932,2934,3,652,326,0,2933,
        2932,1,0,0,0,2933,2934,1,0,0,0,2934,421,1,0,0,0,2935,2940,3,424,
        212,0,2936,2940,3,434,217,0,2937,2940,3,436,218,0,2938,2940,3,438,
        219,0,2939,2935,1,0,0,0,2939,2936,1,0,0,0,2939,2937,1,0,0,0,2939,
        2938,1,0,0,0,2940,423,1,0,0,0,2941,2942,5,307,0,0,2942,2951,5,333,
        0,0,2943,2948,3,426,213,0,2944,2945,5,384,0,0,2945,2947,3,426,213,
        0,2946,2944,1,0,0,0,2947,2950,1,0,0,0,2948,2946,1,0,0,0,2948,2949,
        1,0,0,0,2949,2952,1,0,0,0,2950,2948,1,0,0,0,2951,2943,1,0,0,0,2951,
        2952,1,0,0,0,2952,425,1,0,0,0,2953,2956,3,430,215,0,2954,2956,3,
        428,214,0,2955,2953,1,0,0,0,2955,2954,1,0,0,0,2956,427,1,0,0,0,2957,
        2958,5,251,0,0,2958,2959,7,22,0,0,2959,429,1,0,0,0,2960,2961,5,161,
        0,0,2961,2962,5,175,0,0,2962,2963,3,432,216,0,2963,431,1,0,0,0,2964,
        2965,5,301,0,0,2965,433,1,0,0,0,2966,2968,5,48,0,0,2967,2969,5,377,
        0,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,435,1,0,0,0,2970,2972,
        5,279,0,0,2971,2973,5,377,0,0,2972,2971,1,0,0,0,2972,2973,1,0,0,
        0,2973,437,1,0,0,0,2974,2975,5,293,0,0,2975,2976,5,22,0,0,2976,2977,
        3,876,438,0,2977,439,1,0,0,0,2978,2979,5,1,0,0,2979,2981,5,335,0,
        0,2980,2982,5,417,0,0,2981,2980,1,0,0,0,2982,2983,1,0,0,0,2983,2981,
        1,0,0,0,2983,2984,1,0,0,0,2984,441,1,0,0,0,2985,2986,5,1,0,0,2986,
        2988,5,50,0,0,2987,2989,5,417,0,0,2988,2987,1,0,0,0,2989,2990,1,
        0,0,0,2990,2988,1,0,0,0,2990,2991,1,0,0,0,2991,443,1,0,0,0,2992,
        2994,5,195,0,0,2993,2995,5,422,0,0,2994,2993,1,0,0,0,2994,2995,1,
        0,0,0,2995,2996,1,0,0,0,2996,2997,5,159,0,0,2997,3002,3,640,320,
        0,2998,3000,5,17,0,0,2999,2998,1,0,0,0,2999,3000,1,0,0,0,3000,3001,
        1,0,0,0,3001,3003,3,896,448,0,3002,2999,1,0,0,0,3002,3003,1,0,0,
        0,3003,3004,1,0,0,0,3004,3005,5,359,0,0,3005,3006,3,614,307,0,3006,
        3007,5,214,0,0,3007,3008,3,796,398,0,3008,3009,3,446,223,0,3009,
        445,1,0,0,0,3010,3013,3,450,225,0,3011,3013,3,452,226,0,3012,3010,
        1,0,0,0,3012,3011,1,0,0,0,3013,3016,1,0,0,0,3014,3012,1,0,0,0,3014,
        3015,1,0,0,0,3015,3018,1,0,0,0,3016,3014,1,0,0,0,3017,3019,3,448,
        224,0,3018,3017,1,0,0,0,3018,3019,1,0,0,0,3019,447,1,0,0,0,3020,
        3021,5,371,0,0,3021,3022,5,206,0,0,3022,3025,5,193,0,0,3023,3024,
        5,11,0,0,3024,3026,3,796,398,0,3025,3023,1,0,0,0,3025,3026,1,0,0,
        0,3026,3027,1,0,0,0,3027,3028,5,324,0,0,3028,3030,5,155,0,0,3029,
        3031,3,280,140,0,3030,3029,1,0,0,0,3030,3031,1,0,0,0,3031,3032,1,
        0,0,0,3032,3033,5,363,0,0,3033,3034,3,662,331,0,3034,449,1,0,0,0,
        3035,3036,5,371,0,0,3036,3037,5,193,0,0,3037,3038,5,11,0,0,3038,
        3039,3,796,398,0,3039,3040,5,324,0,0,3040,3041,3,454,227,0,3041,
        451,1,0,0,0,3042,3043,5,371,0,0,3043,3044,5,193,0,0,3044,3045,5,
        324,0,0,3045,3046,3,454,227,0,3046,453,1,0,0,0,3047,3048,5,354,0,
        0,3048,3051,3,418,209,0,3049,3051,5,83,0,0,3050,3047,1,0,0,0,3050,
        3049,1,0,0,0,3051,455,1,0,0,0,3052,3053,5,169,0,0,3053,3055,5,248,
        0,0,3054,3056,5,412,0,0,3055,3054,1,0,0,0,3056,3057,1,0,0,0,3057,
        3055,1,0,0,0,3057,3058,1,0,0,0,3058,457,1,0,0,0,3059,3060,5,51,0,
        0,3060,3061,5,392,0,0,3061,3062,5,417,0,0,3062,459,1,0,0,0,3063,
        3064,5,236,0,0,3064,3065,5,412,0,0,3065,461,1,0,0,0,3066,3067,5,
        341,0,0,3067,3068,5,412,0,0,3068,463,1,0,0,0,3069,3070,5,309,0,0,
        3070,3071,5,412,0,0,3071,465,1,0,0,0,3072,3094,5,9,0,0,3073,3074,
        5,318,0,0,3074,3075,3,640,320,0,3075,3076,3,468,234,0,3076,3095,
        1,0,0,0,3077,3078,5,367,0,0,3078,3080,3,640,320,0,3079,3081,5,17,
        0,0,3080,3079,1,0,0,0,3080,3081,1,0,0,0,3081,3082,1,0,0,0,3082,3083,
        3,474,237,0,3083,3095,1,0,0,0,3084,3085,5,194,0,0,3085,3086,5,367,
        0,0,3086,3087,3,640,320,0,3087,3088,3,476,238,0,3088,3095,1,0,0,
        0,3089,3090,3,88,44,0,3090,3091,3,482,241,0,3091,3095,1,0,0,0,3092,
        3093,5,69,0,0,3093,3095,3,572,286,0,3094,3073,1,0,0,0,3094,3077,
        1,0,0,0,3094,3084,1,0,0,0,3094,3089,1,0,0,0,3094,3092,1,0,0,0,3095,
        467,1,0,0,0,3096,3116,3,492,246,0,3097,3116,3,522,261,0,3098,3116,
        3,510,255,0,3099,3116,3,514,257,0,3100,3116,3,516,258,0,3101,3116,
        3,518,259,0,3102,3116,3,524,262,0,3103,3116,3,546,273,0,3104,3116,
        3,548,274,0,3105,3116,3,472,236,0,3106,3116,3,500,250,0,3107,3116,
        3,496,248,0,3108,3116,3,470,235,0,3109,3110,3,880,440,0,3110,3111,
        3,470,235,0,3111,3116,1,0,0,0,3112,3116,3,564,282,0,3113,3116,3,
        566,283,0,3114,3116,3,568,284,0,3115,3096,1,0,0,0,3115,3097,1,0,
        0,0,3115,3098,1,0,0,0,3115,3099,1,0,0,0,3115,3100,1,0,0,0,3115,3101,
        1,0,0,0,3115,3102,1,0,0,0,3115,3103,1,0,0,0,3115,3104,1,0,0,0,3115,
        3105,1,0,0,0,3115,3106,1,0,0,0,3115,3107,1,0,0,0,3115,3108,1,0,0,
        0,3115,3109,1,0,0,0,3115,3112,1,0,0,0,3115,3113,1,0,0,0,3115,3114,
        1,0,0,0,3116,469,1,0,0,0,3117,3132,3,532,266,0,3118,3132,3,544,272,
        0,3119,3132,3,554,277,0,3120,3132,3,528,264,0,3121,3132,3,550,275,
        0,3122,3132,3,556,278,0,3123,3132,3,536,268,0,3124,3132,3,534,267,
        0,3125,3132,3,562,281,0,3126,3132,3,504,252,0,3127,3132,3,506,253,
        0,3128,3132,3,502,251,0,3129,3132,3,494,247,0,3130,3132,3,498,249,
        0,3131,3117,1,0,0,0,3131,3118,1,0,0,0,3131,3119,1,0,0,0,3131,3120,
        1,0,0,0,3131,3121,1,0,0,0,3131,3122,1,0,0,0,3131,3123,1,0,0,0,3131,
        3124,1,0,0,0,3131,3125,1,0,0,0,3131,3126,1,0,0,0,3131,3127,1,0,0,
        0,3131,3128,1,0,0,0,3131,3129,1,0,0,0,3131,3130,1,0,0,0,3132,471,
        1,0,0,0,3133,3134,5,227,0,0,3134,3135,5,45,0,0,3135,3136,5,386,0,
        0,3136,3137,3,332,166,0,3137,3138,5,387,0,0,3138,473,1,0,0,0,3139,
        3145,3,526,263,0,3140,3145,3,492,246,0,3141,3145,3,510,255,0,3142,
        3145,3,522,261,0,3143,3145,3,402,201,0,3144,3139,1,0,0,0,3144,3140,
        1,0,0,0,3144,3141,1,0,0,0,3144,3142,1,0,0,0,3144,3143,1,0,0,0,3145,
        475,1,0,0,0,3146,3149,3,478,239,0,3147,3149,3,480,240,0,3148,3146,
        1,0,0,0,3148,3147,1,0,0,0,3149,477,1,0,0,0,3150,3153,3,44,22,0,3151,
        3153,3,46,23,0,3152,3150,1,0,0,0,3152,3151,1,0,0,0,3153,479,1,0,
        0,0,3154,3155,5,255,0,0,3155,481,1,0,0,0,3156,3160,3,484,242,0,3157,
        3160,3,486,243,0,3158,3160,3,488,244,0,3159,3156,1,0,0,0,3159,3157,
        1,0,0,0,3159,3158,1,0,0,0,3160,483,1,0,0,0,3161,3162,3,896,448,0,
        3162,3163,5,293,0,0,3163,3164,5,75,0,0,3164,3165,3,58,29,0,3165,
        485,1,0,0,0,3166,3167,3,896,448,0,3167,3168,5,293,0,0,3168,3169,
        5,226,0,0,3169,3170,3,144,72,0,3170,487,1,0,0,0,3171,3172,3,896,
        448,0,3172,3173,5,293,0,0,3173,3174,7,23,0,0,3174,3175,5,412,0,0,
        3175,489,1,0,0,0,3176,3177,3,896,448,0,3177,3178,5,293,0,0,3178,
        3179,5,188,0,0,3179,3180,5,412,0,0,3180,491,1,0,0,0,3181,3182,5,
        264,0,0,3182,3183,5,330,0,0,3183,3184,3,640,320,0,3184,493,1,0,0,
        0,3185,3188,5,4,0,0,3186,3188,5,268,0,0,3187,3185,1,0,0,0,3187,3186,
        1,0,0,0,3188,3189,1,0,0,0,3189,3190,5,46,0,0,3190,3191,5,386,0,0,
        3191,3192,3,266,133,0,3192,3194,5,387,0,0,3193,3195,3,38,19,0,3194,
        3193,1,0,0,0,3194,3195,1,0,0,0,3195,495,1,0,0,0,3196,3199,5,4,0,
        0,3197,3200,3,304,152,0,3198,3200,3,294,147,0,3199,3197,1,0,0,0,
        3199,3198,1,0,0,0,3200,497,1,0,0,0,3201,3202,5,354,0,0,3202,3204,
        5,46,0,0,3203,3205,3,38,19,0,3204,3203,1,0,0,0,3204,3205,1,0,0,0,
        3205,499,1,0,0,0,3206,3207,5,98,0,0,3207,3208,5,55,0,0,3208,3209,
        3,896,448,0,3209,501,1,0,0,0,3210,3212,5,38,0,0,3211,3213,5,45,0,
        0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3214,1,0,0,0,3214,3215,
        3,896,448,0,3215,3216,3,896,448,0,3216,3218,3,364,182,0,3217,3219,
        3,346,173,0,3218,3217,1,0,0,0,3218,3219,1,0,0,0,3219,3222,1,0,0,
        0,3220,3221,5,47,0,0,3221,3223,5,412,0,0,3222,3220,1,0,0,0,3222,
        3223,1,0,0,0,3223,3225,1,0,0,0,3224,3226,3,508,254,0,3225,3224,1,
        0,0,0,3225,3226,1,0,0,0,3226,3228,1,0,0,0,3227,3229,3,38,19,0,3228,
        3227,1,0,0,0,3228,3229,1,0,0,0,3229,503,1,0,0,0,3230,3231,5,354,
        0,0,3231,3232,5,308,0,0,3232,3234,5,129,0,0,3233,3235,5,45,0,0,3234,
        3233,1,0,0,0,3234,3235,1,0,0,0,3235,3236,1,0,0,0,3236,3237,3,896,
        448,0,3237,3238,5,293,0,0,3238,3241,3,244,122,0,3239,3240,5,47,0,
        0,3240,3242,5,412,0,0,3241,3239,1,0,0,0,3241,3242,1,0,0,0,3242,505,
        1,0,0,0,3243,3244,5,354,0,0,3244,3245,5,308,0,0,3245,3246,5,293,
        0,0,3246,3247,3,244,122,0,3247,507,1,0,0,0,3248,3252,5,125,0,0,3249,
        3250,5,6,0,0,3250,3252,3,896,448,0,3251,3248,1,0,0,0,3251,3249,1,
        0,0,0,3252,509,1,0,0,0,3253,3255,5,4,0,0,3254,3256,3,40,20,0,3255,
        3254,1,0,0,0,3255,3256,1,0,0,0,3256,3258,1,0,0,0,3257,3259,3,512,
        256,0,3258,3257,1,0,0,0,3259,3260,1,0,0,0,3260,3258,1,0,0,0,3260,
        3261,1,0,0,0,3261,511,1,0,0,0,3262,3264,3,880,440,0,3263,3265,3,
        520,260,0,3264,3263,1,0,0,0,3264,3265,1,0,0,0,3265,513,1,0,0,0,3266,
        3270,5,331,0,0,3267,3269,3,880,440,0,3268,3267,1,0,0,0,3269,3272,
        1,0,0,0,3270,3268,1,0,0,0,3270,3271,1,0,0,0,3271,515,1,0,0,0,3272,
        3270,1,0,0,0,3273,3277,5,15,0,0,3274,3276,3,880,440,0,3275,3274,
        1,0,0,0,3276,3279,1,0,0,0,3277,3275,1,0,0,0,3277,3278,1,0,0,0,3278,
        517,1,0,0,0,3279,3277,1,0,0,0,3280,3284,5,342,0,0,3281,3283,3,880,
        440,0,3282,3281,1,0,0,0,3283,3286,1,0,0,0,3284,3282,1,0,0,0,3284,
        3285,1,0,0,0,3285,519,1,0,0,0,3286,3284,1,0,0,0,3287,3288,5,181,
        0,0,3288,3289,5,412,0,0,3289,521,1,0,0,0,3290,3292,5,98,0,0,3291,
        3293,3,36,18,0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3294,1,0,
        0,0,3294,3295,5,227,0,0,3295,3301,3,884,442,0,3296,3297,5,384,0,
        0,3297,3298,5,227,0,0,3298,3300,3,884,442,0,3299,3296,1,0,0,0,3300,
        3303,1,0,0,0,3301,3299,1,0,0,0,3301,3302,1,0,0,0,3302,3305,1,0,0,
        0,3303,3301,1,0,0,0,3304,3306,5,245,0,0,3305,3304,1,0,0,0,3305,3306,
        1,0,0,0,3306,3308,1,0,0,0,3307,3309,3,14,7,0,3308,3307,1,0,0,0,3308,
        3309,1,0,0,0,3309,523,1,0,0,0,3310,3311,5,293,0,0,3311,3312,5,321,
        0,0,3312,3320,3,244,122,0,3313,3314,5,352,0,0,3314,3316,5,321,0,
        0,3315,3317,3,36,18,0,3316,3315,1,0,0,0,3316,3317,1,0,0,0,3317,3318,
        1,0,0,0,3318,3320,3,244,122,0,3319,3310,1,0,0,0,3319,3313,1,0,0,
        0,3320,525,1,0,0,0,3321,3322,5,293,0,0,3322,3323,5,321,0,0,3323,
        3331,3,244,122,0,3324,3325,5,352,0,0,3325,3327,5,321,0,0,3326,3328,
        3,36,18,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3329,1,0,0,0,
        3329,3331,3,244,122,0,3330,3321,1,0,0,0,3330,3324,1,0,0,0,3331,527,
        1,0,0,0,3332,3342,5,293,0,0,3333,3334,5,290,0,0,3334,3338,5,412,
        0,0,3335,3336,5,375,0,0,3336,3337,5,291,0,0,3337,3339,3,244,122,
        0,3338,3335,1,0,0,0,3338,3339,1,0,0,0,3339,3343,1,0,0,0,3340,3341,
        5,291,0,0,3341,3343,3,244,122,0,3342,3333,1,0,0,0,3342,3340,1,0,
        0,0,3343,3348,1,0,0,0,3344,3345,5,352,0,0,3345,3346,5,291,0,0,3346,
        3348,3,244,122,0,3347,3332,1,0,0,0,3347,3344,1,0,0,0,3348,529,1,
        0,0,0,3349,3351,3,640,320,0,3350,3352,3,880,440,0,3351,3350,1,0,
        0,0,3351,3352,1,0,0,0,3352,531,1,0,0,0,3353,3354,5,293,0,0,3354,
        3355,5,124,0,0,3355,3356,3,570,285,0,3356,533,1,0,0,0,3357,3358,
        5,206,0,0,3358,3361,7,24,0,0,3359,3361,3,224,112,0,3360,3357,1,0,
        0,0,3360,3359,1,0,0,0,3361,535,1,0,0,0,3362,3363,5,293,0,0,3363,
        3364,5,299,0,0,3364,3365,5,181,0,0,3365,3366,3,538,269,0,3366,537,
        1,0,0,0,3367,3368,5,386,0,0,3368,3369,3,540,270,0,3369,3370,5,387,
        0,0,3370,539,1,0,0,0,3371,3376,3,542,271,0,3372,3373,5,384,0,0,3373,
        3375,3,542,271,0,3374,3372,1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,
        0,0,0,3376,3377,1,0,0,0,3377,541,1,0,0,0,3378,3376,1,0,0,0,3379,
        3380,3,316,158,0,3380,3381,5,392,0,0,3381,3382,5,412,0,0,3382,543,
        1,0,0,0,3383,3384,5,293,0,0,3384,3385,5,181,0,0,3385,3386,5,412,
        0,0,3386,545,1,0,0,0,3387,3394,3,228,114,0,3388,3391,5,206,0,0,3389,
        3392,5,299,0,0,3390,3392,3,48,24,0,3391,3389,1,0,0,0,3391,3390,1,
        0,0,0,3392,3394,1,0,0,0,3393,3387,1,0,0,0,3393,3388,1,0,0,0,3394,
        547,1,0,0,0,3395,3396,5,108,0,0,3396,3397,3,880,440,0,3397,3398,
        5,375,0,0,3398,3399,5,318,0,0,3399,3400,3,640,320,0,3400,549,1,0,
        0,0,3401,3402,5,264,0,0,3402,3403,5,330,0,0,3403,3404,3,880,440,
        0,3404,551,1,0,0,0,3405,3406,5,354,0,0,3406,3407,5,308,0,0,3407,
        3409,5,129,0,0,3408,3410,5,45,0,0,3409,3408,1,0,0,0,3409,3410,1,
        0,0,0,3410,3411,1,0,0,0,3411,3412,3,896,448,0,3412,3413,5,293,0,
        0,3413,3416,3,244,122,0,3414,3415,5,47,0,0,3415,3417,5,412,0,0,3416,
        3414,1,0,0,0,3416,3417,1,0,0,0,3417,553,1,0,0,0,3418,3419,5,53,0,
        0,3419,555,1,0,0,0,3420,3421,5,159,0,0,3421,3422,5,417,0,0,3422,
        3423,5,31,0,0,3423,557,1,0,0,0,3424,3425,5,11,0,0,3425,3426,5,369,
        0,0,3426,559,1,0,0,0,3427,3428,5,236,0,0,3428,3429,5,412,0,0,3429,
        561,1,0,0,0,3430,3431,5,49,0,0,3431,3433,5,412,0,0,3432,3434,3,226,
        113,0,3433,3432,1,0,0,0,3433,3434,1,0,0,0,3434,3436,1,0,0,0,3435,
        3437,3,558,279,0,3436,3435,1,0,0,0,3436,3437,1,0,0,0,3437,3439,1,
        0,0,0,3438,3440,3,560,280,0,3439,3438,1,0,0,0,3439,3440,1,0,0,0,
        3440,3445,1,0,0,0,3441,3442,5,375,0,0,3442,3443,5,225,0,0,3443,3444,
        5,321,0,0,3444,3446,3,244,122,0,3445,3441,1,0,0,0,3445,3446,1,0,
        0,0,3446,563,1,0,0,0,3447,3448,5,293,0,0,3448,3449,5,226,0,0,3449,
        3450,3,144,72,0,3450,565,1,0,0,0,3451,3452,5,293,0,0,3452,3453,5,
        227,0,0,3453,3454,5,305,0,0,3454,3455,5,386,0,0,3455,3456,3,218,
        109,0,3456,3457,5,387,0,0,3457,567,1,0,0,0,3458,3468,5,110,0,0,3459,
        3460,5,279,0,0,3460,3461,5,386,0,0,3461,3469,7,25,0,0,3462,3463,
        5,113,0,0,3463,3464,5,386,0,0,3464,3469,5,412,0,0,3465,3466,5,295,
        0,0,3466,3467,5,386,0,0,3467,3469,5,417,0,0,3468,3459,1,0,0,0,3468,
        3462,1,0,0,0,3468,3465,1,0,0,0,3469,3470,1,0,0,0,3470,3471,5,387,
        0,0,3471,569,1,0,0,0,3472,3473,5,154,0,0,3473,3474,5,412,0,0,3474,
        3475,5,223,0,0,3475,3476,5,412,0,0,3476,3477,5,290,0,0,3477,3482,
        5,412,0,0,3478,3479,5,153,0,0,3479,3480,5,412,0,0,3480,3481,5,222,
        0,0,3481,3483,5,412,0,0,3482,3478,1,0,0,0,3482,3483,1,0,0,0,3483,
        3486,1,0,0,0,3484,3486,3,896,448,0,3485,3472,1,0,0,0,3485,3484,1,
        0,0,0,3486,571,1,0,0,0,3487,3491,3,574,287,0,3488,3491,3,576,288,
        0,3489,3491,3,578,289,0,3490,3487,1,0,0,0,3490,3488,1,0,0,0,3490,
        3489,1,0,0,0,3491,573,1,0,0,0,3492,3493,3,896,448,0,3493,3494,5,
        293,0,0,3494,3495,5,76,0,0,3495,3496,3,592,296,0,3496,575,1,0,0,
        0,3497,3498,3,896,448,0,3498,3499,5,293,0,0,3499,3500,5,226,0,0,
        3500,3501,3,144,72,0,3501,577,1,0,0,0,3502,3503,3,896,448,0,3503,
        3504,5,293,0,0,3504,3505,5,356,0,0,3505,3506,5,412,0,0,3506,579,
        1,0,0,0,3507,3508,5,176,0,0,3508,3517,5,123,0,0,3509,3510,5,176,
        0,0,3510,3511,5,123,0,0,3511,3512,3,896,448,0,3512,3513,5,412,0,
        0,3513,3517,1,0,0,0,3514,3515,5,176,0,0,3515,3517,3,640,320,0,3516,
        3507,1,0,0,0,3516,3509,1,0,0,0,3516,3514,1,0,0,0,3517,581,1,0,0,
        0,3518,3520,5,58,0,0,3519,3521,5,322,0,0,3520,3519,1,0,0,0,3520,
        3521,1,0,0,0,3521,3523,1,0,0,0,3522,3524,5,334,0,0,3523,3522,1,0,
        0,0,3523,3524,1,0,0,0,3524,3526,1,0,0,0,3525,3527,5,118,0,0,3526,
        3525,1,0,0,0,3526,3527,1,0,0,0,3527,3528,1,0,0,0,3528,3530,5,318,
        0,0,3529,3531,3,40,20,0,3530,3529,1,0,0,0,3530,3531,1,0,0,0,3531,
        3532,1,0,0,0,3532,3583,3,640,320,0,3533,3535,3,580,290,0,3534,3536,
        3,212,106,0,3535,3534,1,0,0,0,3535,3536,1,0,0,0,3536,3538,1,0,0,
        0,3537,3539,3,240,120,0,3538,3537,1,0,0,0,3538,3539,1,0,0,0,3539,
        3541,1,0,0,0,3540,3542,3,262,131,0,3541,3540,1,0,0,0,3541,3542,1,
        0,0,0,3542,3544,1,0,0,0,3543,3545,3,264,132,0,3544,3543,1,0,0,0,
        3544,3545,1,0,0,0,3545,3547,1,0,0,0,3546,3548,3,242,121,0,3547,3546,
        1,0,0,0,3547,3548,1,0,0,0,3548,3584,1,0,0,0,3549,3550,5,386,0,0,
        3550,3551,3,268,134,0,3551,3552,5,387,0,0,3552,3554,1,0,0,0,3553,
        3549,1,0,0,0,3553,3554,1,0,0,0,3554,3556,1,0,0,0,3555,3557,3,210,
        105,0,3556,3555,1,0,0,0,3556,3557,1,0,0,0,3557,3559,1,0,0,0,3558,
        3560,3,212,106,0,3559,3558,1,0,0,0,3559,3560,1,0,0,0,3560,3562,1,
        0,0,0,3561,3563,3,224,112,0,3562,3561,1,0,0,0,3562,3563,1,0,0,0,
        3563,3565,1,0,0,0,3564,3566,3,228,114,0,3565,3564,1,0,0,0,3565,3566,
        1,0,0,0,3566,3568,1,0,0,0,3567,3569,3,240,120,0,3568,3567,1,0,0,
        0,3568,3569,1,0,0,0,3569,3571,1,0,0,0,3570,3572,3,262,131,0,3571,
        3570,1,0,0,0,3571,3572,1,0,0,0,3572,3574,1,0,0,0,3573,3575,3,264,
        132,0,3574,3573,1,0,0,0,3574,3575,1,0,0,0,3575,3577,1,0,0,0,3576,
        3578,3,242,121,0,3577,3576,1,0,0,0,3577,3578,1,0,0,0,3578,3581,1,
        0,0,0,3579,3580,5,17,0,0,3580,3582,3,402,201,0,3581,3579,1,0,0,0,
        3581,3582,1,0,0,0,3582,3584,1,0,0,0,3583,3533,1,0,0,0,3583,3553,
        1,0,0,0,3584,3642,1,0,0,0,3585,3586,5,58,0,0,3586,3587,5,187,0,0,
        3587,3589,5,318,0,0,3588,3590,3,40,20,0,3589,3588,1,0,0,0,3589,3590,
        1,0,0,0,3590,3591,1,0,0,0,3591,3639,3,640,320,0,3592,3594,3,580,
        290,0,3593,3595,3,240,120,0,3594,3593,1,0,0,0,3594,3595,1,0,0,0,
        3595,3597,1,0,0,0,3596,3598,3,262,131,0,3597,3596,1,0,0,0,3597,3598,
        1,0,0,0,3598,3600,1,0,0,0,3599,3601,3,264,132,0,3600,3599,1,0,0,
        0,3600,3601,1,0,0,0,3601,3603,1,0,0,0,3602,3604,3,242,121,0,3603,
        3602,1,0,0,0,3603,3604,1,0,0,0,3604,3640,1,0,0,0,3605,3606,5,386,
        0,0,3606,3607,3,268,134,0,3607,3608,5,387,0,0,3608,3610,1,0,0,0,
        3609,3605,1,0,0,0,3609,3610,1,0,0,0,3610,3612,1,0,0,0,3611,3613,
        3,210,105,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3615,1,0,0,
        0,3614,3616,3,212,106,0,3615,3614,1,0,0,0,3615,3616,1,0,0,0,3616,
        3618,1,0,0,0,3617,3619,3,224,112,0,3618,3617,1,0,0,0,3618,3619,1,
        0,0,0,3619,3621,1,0,0,0,3620,3622,3,228,114,0,3621,3620,1,0,0,0,
        3621,3622,1,0,0,0,3622,3624,1,0,0,0,3623,3625,3,240,120,0,3624,3623,
        1,0,0,0,3624,3625,1,0,0,0,3625,3627,1,0,0,0,3626,3628,3,262,131,
        0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,3630,1,0,0,0,3629,3631,
        3,264,132,0,3630,3629,1,0,0,0,3630,3631,1,0,0,0,3631,3633,1,0,0,
        0,3632,3634,3,242,121,0,3633,3632,1,0,0,0,3633,3634,1,0,0,0,3634,
        3637,1,0,0,0,3635,3636,5,17,0,0,3636,3638,3,402,201,0,3637,3635,
        1,0,0,0,3637,3638,1,0,0,0,3638,3640,1,0,0,0,3639,3592,1,0,0,0,3639,
        3609,1,0,0,0,3640,3642,1,0,0,0,3641,3518,1,0,0,0,3641,3585,1,0,0,
        0,3642,583,1,0,0,0,3643,3644,5,58,0,0,3644,3646,5,69,0,0,3645,3647,
        3,40,20,0,3646,3645,1,0,0,0,3646,3647,1,0,0,0,3647,3648,1,0,0,0,
        3648,3649,3,896,448,0,3649,3650,3,590,295,0,3650,3652,3,588,294,
        0,3651,3653,3,586,293,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,
        3657,1,0,0,0,3654,3655,5,375,0,0,3655,3656,5,76,0,0,3656,3658,3,
        592,296,0,3657,3654,1,0,0,0,3657,3658,1,0,0,0,3658,585,1,0,0,0,3659,
        3660,5,47,0,0,3660,3661,5,412,0,0,3661,587,1,0,0,0,3662,3663,5,356,
        0,0,3663,3664,5,412,0,0,3664,589,1,0,0,0,3665,3666,5,341,0,0,3666,
        3667,5,412,0,0,3667,591,1,0,0,0,3668,3669,5,386,0,0,3669,3670,3,
        60,30,0,3670,3671,5,387,0,0,3671,593,1,0,0,0,3672,3673,5,98,0,0,
        3673,3675,5,69,0,0,3674,3676,3,36,18,0,3675,3674,1,0,0,0,3675,3676,
        1,0,0,0,3676,3677,1,0,0,0,3677,3678,3,896,448,0,3678,595,1,0,0,0,
        3679,3685,5,402,0,0,3680,3681,3,640,320,0,3681,3682,5,382,0,0,3682,
        3683,5,402,0,0,3683,3685,1,0,0,0,3684,3679,1,0,0,0,3684,3680,1,0,
        0,0,3685,597,1,0,0,0,3686,3687,3,896,448,0,3687,599,1,0,0,0,3688,
        3689,5,80,0,0,3689,601,1,0,0,0,3690,3695,3,796,398,0,3691,3692,5,
        384,0,0,3692,3694,3,796,398,0,3693,3691,1,0,0,0,3694,3697,1,0,0,
        0,3695,3693,1,0,0,0,3695,3696,1,0,0,0,3696,603,1,0,0,0,3697,3695,
        1,0,0,0,3698,3703,3,896,448,0,3699,3700,5,384,0,0,3700,3702,3,896,
        448,0,3701,3699,1,0,0,0,3702,3705,1,0,0,0,3703,3701,1,0,0,0,3703,
        3704,1,0,0,0,3704,605,1,0,0,0,3705,3703,1,0,0,0,3706,3707,5,134,
        0,0,3707,3708,3,608,304,0,3708,607,1,0,0,0,3709,3710,3,620,310,0,
        3710,3713,3,616,308,0,3711,3712,5,384,0,0,3712,3714,3,616,308,0,
        3713,3711,1,0,0,0,3714,3715,1,0,0,0,3715,3713,1,0,0,0,3715,3716,
        1,0,0,0,3716,3719,1,0,0,0,3717,3719,3,612,306,0,3718,3709,1,0,0,
        0,3718,3717,1,0,0,0,3719,609,1,0,0,0,3720,3724,3,634,317,0,3721,
        3723,3,624,312,0,3722,3721,1,0,0,0,3723,3726,1,0,0,0,3724,3722,1,
        0,0,0,3724,3725,1,0,0,0,3725,3753,1,0,0,0,3726,3724,1,0,0,0,3727,
        3731,3,666,333,0,3728,3730,3,624,312,0,3729,3728,1,0,0,0,3730,3733,
        1,0,0,0,3731,3729,1,0,0,0,3731,3732,1,0,0,0,3732,3753,1,0,0,0,3733,
        3731,1,0,0,0,3734,3738,3,644,322,0,3735,3737,3,624,312,0,3736,3735,
        1,0,0,0,3737,3740,1,0,0,0,3738,3736,1,0,0,0,3738,3739,1,0,0,0,3739,
        3753,1,0,0,0,3740,3738,1,0,0,0,3741,3745,3,650,325,0,3742,3744,3,
        624,312,0,3743,3742,1,0,0,0,3744,3747,1,0,0,0,3745,3743,1,0,0,0,
        3745,3746,1,0,0,0,3746,3753,1,0,0,0,3747,3745,1,0,0,0,3748,3749,
        5,386,0,0,3749,3750,3,612,306,0,3750,3751,5,387,0,0,3751,3753,1,
        0,0,0,3752,3720,1,0,0,0,3752,3727,1,0,0,0,3752,3734,1,0,0,0,3752,
        3741,1,0,0,0,3752,3748,1,0,0,0,3753,611,1,0,0,0,3754,3765,3,610,
        305,0,3755,3756,3,622,311,0,3756,3761,3,614,307,0,3757,3758,5,214,
        0,0,3758,3762,3,796,398,0,3759,3760,5,359,0,0,3760,3762,3,280,140,
        0,3761,3757,1,0,0,0,3761,3759,1,0,0,0,3761,3762,1,0,0,0,3762,3764,
        1,0,0,0,3763,3755,1,0,0,0,3764,3767,1,0,0,0,3765,3763,1,0,0,0,3765,
        3766,1,0,0,0,3766,613,1,0,0,0,3767,3765,1,0,0,0,3768,3773,3,634,
        317,0,3769,3773,3,666,333,0,3770,3773,3,644,322,0,3771,3773,3,650,
        325,0,3772,3768,1,0,0,0,3772,3769,1,0,0,0,3772,3770,1,0,0,0,3772,
        3771,1,0,0,0,3773,3777,1,0,0,0,3774,3776,3,624,312,0,3775,3774,1,
        0,0,0,3776,3779,1,0,0,0,3777,3775,1,0,0,0,3777,3778,1,0,0,0,3778,
        615,1,0,0,0,3779,3777,1,0,0,0,3780,3782,5,240,0,0,3781,3780,1,0,
        0,0,3781,3782,1,0,0,0,3782,3783,1,0,0,0,3783,3784,3,638,319,0,3784,
        3785,3,618,309,0,3785,617,1,0,0,0,3786,3787,5,386,0,0,3787,3788,
        3,602,301,0,3788,3789,5,387,0,0,3789,619,1,0,0,0,3790,3791,5,348,
        0,0,3791,621,1,0,0,0,3792,3807,5,384,0,0,3793,3804,5,151,0,0,3794,
        3804,5,60,0,0,3795,3797,7,26,0,0,3796,3798,5,221,0,0,3797,3796,1,
        0,0,0,3797,3798,1,0,0,0,3798,3804,1,0,0,0,3799,3801,5,173,0,0,3800,
        3802,7,27,0,0,3801,3800,1,0,0,0,3801,3802,1,0,0,0,3802,3804,1,0,
        0,0,3803,3793,1,0,0,0,3803,3794,1,0,0,0,3803,3795,1,0,0,0,3803,3799,
        1,0,0,0,3803,3804,1,0,0,0,3804,3805,1,0,0,0,3805,3807,5,164,0,0,
        3806,3792,1,0,0,0,3806,3803,1,0,0,0,3807,623,1,0,0,0,3808,3809,5,
        171,0,0,3809,3810,5,367,0,0,3810,3811,5,221,0,0,3811,3812,3,752,
        376,0,3812,3822,3,626,313,0,3813,3814,5,17,0,0,3814,3819,3,896,448,
        0,3815,3816,5,384,0,0,3816,3818,3,896,448,0,3817,3815,1,0,0,0,3818,
        3821,1,0,0,0,3819,3817,1,0,0,0,3819,3820,1,0,0,0,3820,3823,1,0,0,
        0,3821,3819,1,0,0,0,3822,3813,1,0,0,0,3822,3823,1,0,0,0,3823,3866,
        1,0,0,0,3824,3826,5,384,0,0,3825,3824,1,0,0,0,3825,3826,1,0,0,0,
        3826,3827,1,0,0,0,3827,3863,5,171,0,0,3828,3829,5,367,0,0,3829,3830,
        3,752,376,0,3830,3840,3,626,313,0,3831,3832,5,17,0,0,3832,3837,3,
        896,448,0,3833,3834,5,384,0,0,3834,3836,3,896,448,0,3835,3833,1,
        0,0,0,3836,3839,1,0,0,0,3837,3835,1,0,0,0,3837,3838,1,0,0,0,3838,
        3841,1,0,0,0,3839,3837,1,0,0,0,3840,3831,1,0,0,0,3840,3841,1,0,0,
        0,3841,3864,1,0,0,0,3842,3843,5,318,0,0,3843,3844,5,386,0,0,3844,
        3845,3,658,329,0,3845,3847,5,387,0,0,3846,3848,5,17,0,0,3847,3846,
        1,0,0,0,3847,3848,1,0,0,0,3848,3849,1,0,0,0,3849,3861,3,626,313,
        0,3850,3851,5,386,0,0,3851,3856,3,896,448,0,3852,3853,5,384,0,0,
        3853,3855,3,896,448,0,3854,3852,1,0,0,0,3855,3858,1,0,0,0,3856,3854,
        1,0,0,0,3856,3857,1,0,0,0,3857,3859,1,0,0,0,3858,3856,1,0,0,0,3859,
        3860,5,387,0,0,3860,3862,1,0,0,0,3861,3850,1,0,0,0,3861,3862,1,0,
        0,0,3862,3864,1,0,0,0,3863,3828,1,0,0,0,3863,3842,1,0,0,0,3864,3866,
        1,0,0,0,3865,3808,1,0,0,0,3865,3825,1,0,0,0,3866,625,1,0,0,0,3867,
        3868,3,896,448,0,3868,627,1,0,0,0,3869,3870,5,320,0,0,3870,3871,
        5,386,0,0,3871,3872,5,30,0,0,3872,3873,5,417,0,0,3873,3874,5,220,
        0,0,3874,3875,5,211,0,0,3875,3885,5,417,0,0,3876,3877,5,214,0,0,
        3877,3882,3,796,398,0,3878,3879,5,384,0,0,3879,3881,3,796,398,0,
        3880,3878,1,0,0,0,3881,3884,1,0,0,0,3882,3880,1,0,0,0,3882,3883,
        1,0,0,0,3883,3886,1,0,0,0,3884,3882,1,0,0,0,3885,3876,1,0,0,0,3885,
        3886,1,0,0,0,3886,3887,1,0,0,0,3887,3888,5,387,0,0,3888,629,1,0,
        0,0,3889,3890,5,320,0,0,3890,3894,5,386,0,0,3891,3892,5,417,0,0,
        3892,3895,7,28,0,0,3893,3895,5,416,0,0,3894,3891,1,0,0,0,3894,3893,
        1,0,0,0,3895,3896,1,0,0,0,3896,3897,5,387,0,0,3897,631,1,0,0,0,3898,
        3901,3,628,314,0,3899,3901,3,630,315,0,3900,3898,1,0,0,0,3900,3899,
        1,0,0,0,3901,633,1,0,0,0,3902,3904,3,640,320,0,3903,3905,3,244,122,
        0,3904,3903,1,0,0,0,3904,3905,1,0,0,0,3905,3907,1,0,0,0,3906,3908,
        3,632,316,0,3907,3906,1,0,0,0,3907,3908,1,0,0,0,3908,3910,1,0,0,
        0,3909,3911,3,636,318,0,3910,3909,1,0,0,0,3910,3911,1,0,0,0,3911,
        3916,1,0,0,0,3912,3914,5,17,0,0,3913,3912,1,0,0,0,3913,3914,1,0,
        0,0,3914,3915,1,0,0,0,3915,3917,3,896,448,0,3916,3913,1,0,0,0,3916,
        3917,1,0,0,0,3917,635,1,0,0,0,3918,3928,5,129,0,0,3919,3920,5,316,
        0,0,3920,3921,5,17,0,0,3921,3922,5,211,0,0,3922,3929,3,796,398,0,
        3923,3924,5,129,0,0,3924,3925,5,317,0,0,3925,3926,5,17,0,0,3926,
        3927,5,211,0,0,3927,3929,5,417,0,0,3928,3919,1,0,0,0,3928,3923,1,
        0,0,0,3929,637,1,0,0,0,3930,3932,3,640,320,0,3931,3933,3,632,316,
        0,3932,3931,1,0,0,0,3932,3933,1,0,0,0,3933,3938,1,0,0,0,3934,3936,
        5,17,0,0,3935,3934,1,0,0,0,3935,3936,1,0,0,0,3936,3937,1,0,0,0,3937,
        3939,3,896,448,0,3938,3935,1,0,0,0,3938,3939,1,0,0,0,3939,639,1,
        0,0,0,3940,3941,3,896,448,0,3941,3942,5,382,0,0,3942,3945,3,896,
        448,0,3943,3944,5,382,0,0,3944,3946,3,896,448,0,3945,3943,1,0,0,
        0,3945,3946,1,0,0,0,3946,3949,1,0,0,0,3947,3949,3,896,448,0,3948,
        3940,1,0,0,0,3948,3947,1,0,0,0,3949,641,1,0,0,0,3950,3951,3,896,
        448,0,3951,3952,5,382,0,0,3952,3954,1,0,0,0,3953,3950,1,0,0,0,3953,
        3954,1,0,0,0,3954,3955,1,0,0,0,3955,3956,3,896,448,0,3956,643,1,
        0,0,0,3957,3958,5,386,0,0,3958,3959,3,382,191,0,3959,3961,5,387,
        0,0,3960,3962,5,17,0,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,
        3963,1,0,0,0,3963,3964,3,896,448,0,3964,645,1,0,0,0,3965,3967,3,
        744,372,0,3966,3968,3,740,370,0,3967,3966,1,0,0,0,3967,3968,1,0,
        0,0,3968,3977,1,0,0,0,3969,3977,3,740,370,0,3970,3972,3,746,373,
        0,3971,3973,3,748,374,0,3972,3971,1,0,0,0,3972,3973,1,0,0,0,3973,
        3977,1,0,0,0,3974,3977,3,748,374,0,3975,3977,3,742,371,0,3976,3965,
        1,0,0,0,3976,3969,1,0,0,0,3976,3970,1,0,0,0,3976,3974,1,0,0,0,3976,
        3975,1,0,0,0,3977,647,1,0,0,0,3978,3982,3,644,322,0,3979,3982,3,
        634,317,0,3980,3982,3,650,325,0,3981,3978,1,0,0,0,3981,3979,1,0,
        0,0,3981,3980,1,0,0,0,3982,649,1,0,0,0,3983,3984,3,896,448,0,3984,
        3985,5,386,0,0,3985,3986,5,214,0,0,3986,3988,3,648,324,0,3987,3989,
        3,646,323,0,3988,3987,1,0,0,0,3988,3989,1,0,0,0,3989,4005,1,0,0,
        0,3990,3991,5,418,0,0,3991,3992,5,386,0,0,3992,3993,3,796,398,0,
        3993,4002,5,387,0,0,3994,3995,5,384,0,0,3995,3996,5,418,0,0,3996,
        3997,5,386,0,0,3997,3998,3,796,398,0,3998,3999,5,387,0,0,3999,4001,
        1,0,0,0,4000,3994,1,0,0,0,4001,4004,1,0,0,0,4002,4000,1,0,0,0,4002,
        4003,1,0,0,0,4003,4006,1,0,0,0,4004,4002,1,0,0,0,4005,3990,1,0,0,
        0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,4009,5,387,0,0,4008,4010,
        3,896,448,0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,651,1,0,0,0,
        4011,4012,5,372,0,0,4012,4013,3,654,327,0,4013,653,1,0,0,0,4014,
        4015,3,796,398,0,4015,655,1,0,0,0,4016,4017,3,658,329,0,4017,657,
        1,0,0,0,4018,4019,5,363,0,0,4019,4020,3,660,330,0,4020,659,1,0,0,
        0,4021,4026,3,662,331,0,4022,4023,5,384,0,0,4023,4025,3,662,331,
        0,4024,4022,1,0,0,0,4025,4028,1,0,0,0,4026,4024,1,0,0,0,4026,4027,
        1,0,0,0,4027,4038,1,0,0,0,4028,4026,1,0,0,0,4029,4034,3,664,332,
        0,4030,4031,5,384,0,0,4031,4033,3,662,331,0,4032,4030,1,0,0,0,4033,
        4036,1,0,0,0,4034,4032,1,0,0,0,4034,4035,1,0,0,0,4035,4038,1,0,0,
        0,4036,4034,1,0,0,0,4037,4021,1,0,0,0,4037,4029,1,0,0,0,4038,661,
        1,0,0,0,4039,4040,3,722,361,0,4040,663,1,0,0,0,4041,4042,5,386,0,
        0,4042,4043,3,730,365,0,4043,4044,5,387,0,0,4044,665,1,0,0,0,4045,
        4046,5,318,0,0,4046,4047,5,386,0,0,4047,4048,3,658,329,0,4048,4050,
        5,387,0,0,4049,4051,5,17,0,0,4050,4049,1,0,0,0,4050,4051,1,0,0,0,
        4051,4052,1,0,0,0,4052,4062,3,626,313,0,4053,4054,5,386,0,0,4054,
        4059,3,896,448,0,4055,4056,5,384,0,0,4056,4058,3,896,448,0,4057,
        4055,1,0,0,0,4058,4061,1,0,0,0,4059,4057,1,0,0,0,4059,4060,1,0,0,
        0,4060,4063,1,0,0,0,4061,4059,1,0,0,0,4062,4053,1,0,0,0,4062,4063,
        1,0,0,0,4063,4064,1,0,0,0,4064,4065,5,387,0,0,4065,667,1,0,0,0,4066,
        4068,5,288,0,0,4067,4069,5,422,0,0,4068,4067,1,0,0,0,4068,4069,1,
        0,0,0,4069,4076,1,0,0,0,4070,4072,3,670,335,0,4071,4070,1,0,0,0,
        4071,4072,1,0,0,0,4072,4073,1,0,0,0,4073,4077,3,672,336,0,4074,4075,
        5,336,0,0,4075,4077,3,674,337,0,4076,4071,1,0,0,0,4076,4074,1,0,
        0,0,4077,4080,1,0,0,0,4078,4080,3,678,339,0,4079,4066,1,0,0,0,4079,
        4078,1,0,0,0,4080,669,1,0,0,0,4081,4082,7,21,0,0,4082,671,1,0,0,
        0,4083,4088,3,676,338,0,4084,4085,5,384,0,0,4085,4087,3,676,338,
        0,4086,4084,1,0,0,0,4087,4090,1,0,0,0,4088,4086,1,0,0,0,4088,4089,
        1,0,0,0,4089,673,1,0,0,0,4090,4088,1,0,0,0,4091,4092,5,386,0,0,4092,
        4093,3,682,341,0,4093,4094,5,387,0,0,4094,4095,3,230,115,0,4095,
        4096,3,234,117,0,4096,4097,5,359,0,0,4097,4110,5,412,0,0,4098,4108,
        5,17,0,0,4099,4102,5,386,0,0,4100,4103,3,604,302,0,4101,4103,3,266,
        133,0,4102,4100,1,0,0,0,4102,4101,1,0,0,0,4103,4104,1,0,0,0,4104,
        4105,5,387,0,0,4105,4109,1,0,0,0,4106,4109,3,604,302,0,4107,4109,
        3,266,133,0,4108,4099,1,0,0,0,4108,4106,1,0,0,0,4108,4107,1,0,0,
        0,4109,4111,1,0,0,0,4110,4098,1,0,0,0,4110,4111,1,0,0,0,4111,4112,
        1,0,0,0,4112,4113,3,230,115,0,4113,4114,3,232,116,0,4114,675,1,0,
        0,0,4115,4136,3,596,298,0,4116,4133,3,796,398,0,4117,4119,5,17,0,
        0,4118,4117,1,0,0,0,4118,4119,1,0,0,0,4119,4120,1,0,0,0,4120,4134,
        3,896,448,0,4121,4122,5,17,0,0,4122,4123,5,386,0,0,4123,4128,3,896,
        448,0,4124,4125,5,384,0,0,4125,4127,3,896,448,0,4126,4124,1,0,0,
        0,4127,4130,1,0,0,0,4128,4126,1,0,0,0,4128,4129,1,0,0,0,4129,4131,
        1,0,0,0,4130,4128,1,0,0,0,4131,4132,5,387,0,0,4132,4134,1,0,0,0,
        4133,4118,1,0,0,0,4133,4121,1,0,0,0,4133,4134,1,0,0,0,4134,4136,
        1,0,0,0,4135,4115,1,0,0,0,4135,4116,1,0,0,0,4136,677,1,0,0,0,4137,
        4138,7,29,0,0,4138,4139,3,682,341,0,4139,4140,3,230,115,0,4140,4141,
        3,234,117,0,4141,4142,5,359,0,0,4142,4155,5,412,0,0,4143,4153,5,
        17,0,0,4144,4147,5,386,0,0,4145,4148,3,604,302,0,4146,4148,3,266,
        133,0,4147,4145,1,0,0,0,4147,4146,1,0,0,0,4148,4149,1,0,0,0,4149,
        4150,5,387,0,0,4150,4154,1,0,0,0,4151,4154,3,604,302,0,4152,4154,
        3,266,133,0,4153,4144,1,0,0,0,4153,4151,1,0,0,0,4153,4152,1,0,0,
        0,4154,4156,1,0,0,0,4155,4143,1,0,0,0,4155,4156,1,0,0,0,4156,4157,
        1,0,0,0,4157,4158,3,230,115,0,4158,4159,3,232,116,0,4159,679,1,0,
        0,0,4160,4163,3,596,298,0,4161,4163,3,796,398,0,4162,4160,1,0,0,
        0,4162,4161,1,0,0,0,4163,681,1,0,0,0,4164,4169,3,680,340,0,4165,
        4166,5,384,0,0,4166,4168,3,680,340,0,4167,4165,1,0,0,0,4168,4171,
        1,0,0,0,4169,4167,1,0,0,0,4169,4170,1,0,0,0,4170,683,1,0,0,0,4171,
        4169,1,0,0,0,4172,4173,5,374,0,0,4173,4178,3,686,343,0,4174,4175,
        5,384,0,0,4175,4177,3,686,343,0,4176,4174,1,0,0,0,4177,4180,1,0,
        0,0,4178,4176,1,0,0,0,4178,4179,1,0,0,0,4179,685,1,0,0,0,4180,4178,
        1,0,0,0,4181,4182,3,896,448,0,4182,4183,5,17,0,0,4183,4184,3,688,
        344,0,4184,687,1,0,0,0,4185,4198,3,896,448,0,4186,4188,5,386,0,0,
        4187,4189,3,896,448,0,4188,4187,1,0,0,0,4188,4189,1,0,0,0,4189,4191,
        1,0,0,0,4190,4192,3,646,323,0,4191,4190,1,0,0,0,4191,4192,1,0,0,
        0,4192,4194,1,0,0,0,4193,4195,3,690,345,0,4194,4193,1,0,0,0,4194,
        4195,1,0,0,0,4195,4196,1,0,0,0,4196,4198,5,387,0,0,4197,4185,1,0,
        0,0,4197,4186,1,0,0,0,4198,689,1,0,0,0,4199,4202,3,692,346,0,4200,
        4202,3,694,347,0,4201,4199,1,0,0,0,4201,4200,1,0,0,0,4202,691,1,
        0,0,0,4203,4210,5,282,0,0,4204,4211,3,696,348,0,4205,4206,5,25,0,
        0,4206,4207,3,698,349,0,4207,4208,5,11,0,0,4208,4209,3,698,349,0,
        4209,4211,1,0,0,0,4210,4204,1,0,0,0,4210,4205,1,0,0,0,4211,693,1,
        0,0,0,4212,4219,5,250,0,0,4213,4220,3,696,348,0,4214,4215,5,25,0,
        0,4215,4216,3,698,349,0,4216,4217,5,11,0,0,4217,4218,3,698,349,0,
        4218,4220,1,0,0,0,4219,4213,1,0,0,0,4219,4214,1,0,0,0,4220,695,1,
        0,0,0,4221,4222,5,343,0,0,4222,4228,5,237,0,0,4223,4224,5,62,0,0,
        4224,4228,5,281,0,0,4225,4226,5,417,0,0,4226,4228,5,237,0,0,4227,
        4221,1,0,0,0,4227,4223,1,0,0,0,4227,4225,1,0,0,0,4228,697,1,0,0,
        0,4229,4230,7,30,0,0,4230,4234,7,31,0,0,4231,4232,5,62,0,0,4232,
        4234,5,281,0,0,4233,4229,1,0,0,0,4233,4231,1,0,0,0,4234,699,1,0,
        0,0,4235,4236,5,139,0,0,4236,4237,5,32,0,0,4237,4238,3,702,351,0,
        4238,701,1,0,0,0,4239,4243,3,706,353,0,4240,4243,3,708,354,0,4241,
        4243,3,704,352,0,4242,4239,1,0,0,0,4242,4240,1,0,0,0,4242,4241,1,
        0,0,0,4243,703,1,0,0,0,4244,4245,5,386,0,0,4245,4246,5,387,0,0,4246,
        705,1,0,0,0,4247,4250,5,280,0,0,4248,4250,5,61,0,0,4249,4247,1,0,
        0,0,4249,4248,1,0,0,0,4250,4251,1,0,0,0,4251,4252,5,386,0,0,4252,
        4257,3,796,398,0,4253,4254,5,384,0,0,4254,4256,3,796,398,0,4255,
        4253,1,0,0,0,4256,4259,1,0,0,0,4257,4255,1,0,0,0,4257,4258,1,0,0,
        0,4258,4260,1,0,0,0,4259,4257,1,0,0,0,4260,4261,5,387,0,0,4261,707,
        1,0,0,0,4262,4267,3,724,362,0,4263,4264,5,375,0,0,4264,4268,5,280,
        0,0,4265,4266,5,375,0,0,4266,4268,5,61,0,0,4267,4263,1,0,0,0,4267,
        4265,1,0,0,0,4267,4268,1,0,0,0,4268,4282,1,0,0,0,4269,4270,5,140,
        0,0,4270,4271,5,294,0,0,4271,4272,5,386,0,0,4272,4277,3,710,355,
        0,4273,4274,5,384,0,0,4274,4276,3,710,355,0,4275,4273,1,0,0,0,4276,
        4279,1,0,0,0,4277,4275,1,0,0,0,4277,4278,1,0,0,0,4278,4280,1,0,0,
        0,4279,4277,1,0,0,0,4280,4281,5,387,0,0,4281,4283,1,0,0,0,4282,4269,
        1,0,0,0,4282,4283,1,0,0,0,4283,709,1,0,0,0,4284,4287,3,712,356,0,
        4285,4287,3,714,357,0,4286,4284,1,0,0,0,4286,4285,1,0,0,0,4287,711,
        1,0,0,0,4288,4290,5,386,0,0,4289,4291,3,796,398,0,4290,4289,1,0,
        0,0,4290,4291,1,0,0,0,4291,4296,1,0,0,0,4292,4293,5,384,0,0,4293,
        4295,3,796,398,0,4294,4292,1,0,0,0,4295,4298,1,0,0,0,4296,4294,1,
        0,0,0,4296,4297,1,0,0,0,4297,4299,1,0,0,0,4298,4296,1,0,0,0,4299,
        4300,5,387,0,0,4300,713,1,0,0,0,4301,4302,3,796,398,0,4302,715,1,
        0,0,0,4303,4304,5,141,0,0,4304,4305,3,720,360,0,4305,717,1,0,0,0,
        4306,4307,5,246,0,0,4307,4308,3,796,398,0,4308,719,1,0,0,0,4309,
        4310,3,796,398,0,4310,721,1,0,0,0,4311,4312,5,386,0,0,4312,4313,
        3,724,362,0,4313,4314,5,387,0,0,4314,723,1,0,0,0,4315,4317,3,728,
        364,0,4316,4318,3,726,363,0,4317,4316,1,0,0,0,4317,4318,1,0,0,0,
        4318,725,1,0,0,0,4319,4320,5,384,0,0,4320,4322,3,728,364,0,4321,
        4319,1,0,0,0,4322,4323,1,0,0,0,4323,4321,1,0,0,0,4323,4324,1,0,0,
        0,4324,727,1,0,0,0,4325,4328,3,600,300,0,4326,4328,3,796,398,0,4327,
        4325,1,0,0,0,4327,4326,1,0,0,0,4328,729,1,0,0,0,4329,4331,3,796,
        398,0,4330,4332,5,17,0,0,4331,4330,1,0,0,0,4331,4332,1,0,0,0,4332,
        4334,1,0,0,0,4333,4335,3,896,448,0,4334,4333,1,0,0,0,4334,4335,1,
        0,0,0,4335,4340,1,0,0,0,4336,4337,5,384,0,0,4337,4339,3,732,366,
        0,4338,4336,1,0,0,0,4339,4342,1,0,0,0,4340,4338,1,0,0,0,4340,4341,
        1,0,0,0,4341,731,1,0,0,0,4342,4340,1,0,0,0,4343,4345,3,796,398,0,
        4344,4346,5,17,0,0,4345,4344,1,0,0,0,4345,4346,1,0,0,0,4346,4348,
        1,0,0,0,4347,4349,3,896,448,0,4348,4347,1,0,0,0,4348,4349,1,0,0,
        0,4349,733,1,0,0,0,4350,4353,3,722,361,0,4351,4353,3,724,362,0,4352,
        4350,1,0,0,0,4352,4351,1,0,0,0,4353,735,1,0,0,0,4354,4355,5,386,
        0,0,4355,4360,3,330,165,0,4356,4357,5,384,0,0,4357,4359,3,330,165,
        0,4358,4356,1,0,0,0,4359,4362,1,0,0,0,4360,4358,1,0,0,0,4360,4361,
        1,0,0,0,4361,4363,1,0,0,0,4362,4360,1,0,0,0,4363,4364,5,387,0,0,
        4364,737,1,0,0,0,4365,4370,3,330,165,0,4366,4367,5,384,0,0,4367,
        4369,3,330,165,0,4368,4366,1,0,0,0,4369,4372,1,0,0,0,4370,4368,1,
        0,0,0,4370,4371,1,0,0,0,4371,739,1,0,0,0,4372,4370,1,0,0,0,4373,
        4374,5,219,0,0,4374,4375,5,32,0,0,4375,4380,3,330,165,0,4376,4377,
        5,384,0,0,4377,4379,3,330,165,0,4378,4376,1,0,0,0,4379,4382,1,0,
        0,0,4380,4378,1,0,0,0,4380,4381,1,0,0,0,4381,741,1,0,0,0,4382,4380,
        1,0,0,0,4383,4384,5,41,0,0,4384,4385,5,32,0,0,4385,4386,3,734,367,
        0,4386,743,1,0,0,0,4387,4388,5,227,0,0,4388,4389,5,32,0,0,4389,4390,
        3,734,367,0,4390,745,1,0,0,0,4391,4392,5,93,0,0,4392,4393,5,32,0,
        0,4393,4394,3,734,367,0,4394,747,1,0,0,0,4395,4396,5,303,0,0,4396,
        4399,5,32,0,0,4397,4400,3,736,368,0,4398,4400,3,738,369,0,4399,4397,
        1,0,0,0,4399,4398,1,0,0,0,4400,749,1,0,0,0,4401,4402,5,338,0,0,4402,
        4406,5,386,0,0,4403,4407,5,172,0,0,4404,4407,5,332,0,0,4405,4407,
        5,29,0,0,4406,4403,1,0,0,0,4406,4404,1,0,0,0,4406,4405,1,0,0,0,4406,
        4407,1,0,0,0,4407,4409,1,0,0,0,4408,4410,3,680,340,0,4409,4408,1,
        0,0,0,4409,4410,1,0,0,0,4410,4411,1,0,0,0,4411,4412,5,134,0,0,4412,
        4413,3,680,340,0,4413,4414,5,387,0,0,4414,751,1,0,0,0,4415,4456,
        3,750,375,0,4416,4417,3,756,378,0,4417,4432,5,386,0,0,4418,4433,
        5,402,0,0,4419,4421,3,670,335,0,4420,4419,1,0,0,0,4420,4421,1,0,
        0,0,4421,4430,1,0,0,0,4422,4427,3,680,340,0,4423,4424,5,384,0,0,
        4424,4426,3,680,340,0,4425,4423,1,0,0,0,4426,4429,1,0,0,0,4427,4425,
        1,0,0,0,4427,4428,1,0,0,0,4428,4431,1,0,0,0,4429,4427,1,0,0,0,4430,
        4422,1,0,0,0,4430,4431,1,0,0,0,4431,4433,1,0,0,0,4432,4418,1,0,0,
        0,4432,4420,1,0,0,0,4433,4453,1,0,0,0,4434,4435,5,387,0,0,4435,4436,
        5,376,0,0,4436,4437,5,139,0,0,4437,4438,5,386,0,0,4438,4439,3,740,
        370,0,4439,4440,5,387,0,0,4440,4454,1,0,0,0,4441,4443,5,387,0,0,
        4442,4444,3,754,377,0,4443,4442,1,0,0,0,4443,4444,1,0,0,0,4444,4445,
        1,0,0,0,4445,4446,5,224,0,0,4446,4454,3,688,344,0,4447,4448,3,754,
        377,0,4448,4449,5,387,0,0,4449,4450,5,224,0,0,4450,4451,3,688,344,
        0,4451,4454,1,0,0,0,4452,4454,5,387,0,0,4453,4434,1,0,0,0,4453,4441,
        1,0,0,0,4453,4447,1,0,0,0,4453,4452,1,0,0,0,4454,4456,1,0,0,0,4455,
        4415,1,0,0,0,4455,4416,1,0,0,0,4456,753,1,0,0,0,4457,4458,5,271,
        0,0,4458,4462,5,210,0,0,4459,4460,5,146,0,0,4460,4462,5,210,0,0,
        4461,4457,1,0,0,0,4461,4459,1,0,0,0,4462,755,1,0,0,0,4463,4466,3,
        898,449,0,4464,4466,3,904,452,0,4465,4463,1,0,0,0,4465,4464,1,0,
        0,0,4466,757,1,0,0,0,4467,4468,5,36,0,0,4468,4469,5,386,0,0,4469,
        4470,3,796,398,0,4470,4471,5,17,0,0,4471,4474,3,370,185,0,4472,4473,
        5,132,0,0,4473,4475,5,412,0,0,4474,4472,1,0,0,0,4474,4475,1,0,0,
        0,4475,4476,1,0,0,0,4476,4477,5,387,0,0,4477,759,1,0,0,0,4478,4479,
        5,35,0,0,4479,4485,3,796,398,0,4480,4481,5,371,0,0,4481,4482,3,796,
        398,0,4482,4483,5,324,0,0,4483,4484,3,796,398,0,4484,4486,1,0,0,
        0,4485,4480,1,0,0,0,4486,4487,1,0,0,0,4487,4485,1,0,0,0,4487,4488,
        1,0,0,0,4488,4491,1,0,0,0,4489,4490,5,101,0,0,4490,4492,3,796,398,
        0,4491,4489,1,0,0,0,4491,4492,1,0,0,0,4492,4493,1,0,0,0,4493,4494,
        5,103,0,0,4494,761,1,0,0,0,4495,4501,5,35,0,0,4496,4497,5,371,0,
        0,4497,4498,3,796,398,0,4498,4499,5,324,0,0,4499,4500,3,796,398,
        0,4500,4502,1,0,0,0,4501,4496,1,0,0,0,4502,4503,1,0,0,0,4503,4501,
        1,0,0,0,4503,4504,1,0,0,0,4504,4507,1,0,0,0,4505,4506,5,101,0,0,
        4506,4508,3,796,398,0,4507,4505,1,0,0,0,4507,4508,1,0,0,0,4508,4509,
        1,0,0,0,4509,4510,5,103,0,0,4510,763,1,0,0,0,4511,4512,5,127,0,0,
        4512,4513,5,386,0,0,4513,4516,3,796,398,0,4514,4515,5,330,0,0,4515,
        4517,3,766,383,0,4516,4514,1,0,0,0,4516,4517,1,0,0,0,4517,4518,1,
        0,0,0,4518,4519,5,387,0,0,4519,765,1,0,0,0,4520,4521,7,32,0,0,4521,
        767,1,0,0,0,4522,4523,5,119,0,0,4523,4524,5,386,0,0,4524,4525,3,
        770,385,0,4525,4526,5,134,0,0,4526,4527,3,796,398,0,4527,4528,5,
        387,0,0,4528,769,1,0,0,0,4529,4530,7,33,0,0,4530,771,1,0,0,0,4531,
        4545,3,790,395,0,4532,4545,5,417,0,0,4533,4545,3,782,391,0,4534,
        4545,3,784,392,0,4535,4545,3,786,393,0,4536,4545,5,412,0,0,4537,
        4545,3,778,389,0,4538,4545,5,414,0,0,4539,4545,5,415,0,0,4540,4545,
        3,780,390,0,4541,4545,3,874,437,0,4542,4545,5,209,0,0,4543,4545,
        3,774,387,0,4544,4531,1,0,0,0,4544,4532,1,0,0,0,4544,4533,1,0,0,
        0,4544,4534,1,0,0,0,4544,4535,1,0,0,0,4544,4536,1,0,0,0,4544,4537,
        1,0,0,0,4544,4538,1,0,0,0,4544,4539,1,0,0,0,4544,4540,1,0,0,0,4544,
        4541,1,0,0,0,4544,4542,1,0,0,0,4544,4543,1,0,0,0,4545,773,1,0,0,
        0,4546,4547,3,776,388,0,4547,775,1,0,0,0,4548,4549,5,410,0,0,4549,
        777,1,0,0,0,4550,4552,5,412,0,0,4551,4553,5,412,0,0,4552,4551,1,
        0,0,0,4553,4554,1,0,0,0,4554,4552,1,0,0,0,4554,4555,1,0,0,0,4555,
        779,1,0,0,0,4556,4557,5,419,0,0,4557,4558,5,413,0,0,4558,781,1,0,
        0,0,4559,4560,5,71,0,0,4560,4563,5,412,0,0,4561,4563,5,63,0,0,4562,
        4559,1,0,0,0,4562,4561,1,0,0,0,4563,783,1,0,0,0,4564,4565,5,326,
        0,0,4565,4568,5,412,0,0,4566,4568,5,64,0,0,4567,4564,1,0,0,0,4567,
        4566,1,0,0,0,4568,785,1,0,0,0,4569,4570,5,327,0,0,4570,4571,5,412,
        0,0,4571,787,1,0,0,0,4572,4573,7,25,0,0,4573,789,1,0,0,0,4574,4575,
        3,788,394,0,4575,4576,3,794,397,0,4576,791,1,0,0,0,4577,4578,5,386,
        0,0,4578,4579,3,788,394,0,4579,4580,5,387,0,0,4580,4581,3,794,397,
        0,4581,4593,1,0,0,0,4582,4588,5,158,0,0,4583,4589,3,788,394,0,4584,
        4585,5,386,0,0,4585,4586,3,796,398,0,4586,4587,5,387,0,0,4587,4589,
        1,0,0,0,4588,4583,1,0,0,0,4588,4584,1,0,0,0,4589,4590,1,0,0,0,4590,
        4591,3,794,397,0,4591,4593,1,0,0,0,4592,4577,1,0,0,0,4592,4582,1,
        0,0,0,4593,793,1,0,0,0,4594,4595,5,380,0,0,4595,4596,5,330,0,0,4596,
        4607,5,199,0,0,4597,4598,5,73,0,0,4598,4599,5,330,0,0,4599,4607,
        5,287,0,0,4600,4607,5,380,0,0,4601,4607,5,199,0,0,4602,4607,5,73,
        0,0,4603,4607,5,143,0,0,4604,4607,5,198,0,0,4605,4607,5,287,0,0,
        4606,4594,1,0,0,0,4606,4597,1,0,0,0,4606,4600,1,0,0,0,4606,4601,
        1,0,0,0,4606,4602,1,0,0,0,4606,4603,1,0,0,0,4606,4604,1,0,0,0,4606,
        4605,1,0,0,0,4607,795,1,0,0,0,4608,4609,3,872,436,0,4609,797,1,0,
        0,0,4610,4622,3,772,386,0,4611,4622,3,792,396,0,4612,4622,3,758,
        379,0,4613,4622,3,768,384,0,4614,4622,3,764,382,0,4615,4622,3,760,
        380,0,4616,4622,3,762,381,0,4617,4622,3,834,417,0,4618,4622,3,752,
        376,0,4619,4622,3,598,299,0,4620,4622,3,722,361,0,4621,4610,1,0,
        0,0,4621,4611,1,0,0,0,4621,4612,1,0,0,0,4621,4613,1,0,0,0,4621,4614,
        1,0,0,0,4621,4615,1,0,0,0,4621,4616,1,0,0,0,4621,4617,1,0,0,0,4621,
        4618,1,0,0,0,4621,4619,1,0,0,0,4621,4620,1,0,0,0,4622,799,1,0,0,
        0,4623,4632,3,798,399,0,4624,4625,5,388,0,0,4625,4626,3,796,398,
        0,4626,4627,5,389,0,0,4627,4631,1,0,0,0,4628,4629,5,382,0,0,4629,
        4631,3,896,448,0,4630,4624,1,0,0,0,4630,4628,1,0,0,0,4631,4634,1,
        0,0,0,4632,4630,1,0,0,0,4632,4633,1,0,0,0,4633,801,1,0,0,0,4634,
        4632,1,0,0,0,4635,4636,7,34,0,0,4636,803,1,0,0,0,4637,4639,3,802,
        401,0,4638,4637,1,0,0,0,4639,4642,1,0,0,0,4640,4638,1,0,0,0,4640,
        4641,1,0,0,0,4641,4643,1,0,0,0,4642,4640,1,0,0,0,4643,4644,3,800,
        400,0,4644,805,1,0,0,0,4645,4646,5,409,0,0,4646,807,1,0,0,0,4647,
        4653,3,804,402,0,4648,4649,3,806,403,0,4649,4650,3,804,402,0,4650,
        4652,1,0,0,0,4651,4648,1,0,0,0,4652,4655,1,0,0,0,4653,4651,1,0,0,
        0,4653,4654,1,0,0,0,4654,809,1,0,0,0,4655,4653,1,0,0,0,4656,4657,
        7,35,0,0,4657,811,1,0,0,0,4658,4664,3,808,404,0,4659,4660,3,810,
        405,0,4660,4661,3,808,404,0,4661,4663,1,0,0,0,4662,4659,1,0,0,0,
        4663,4666,1,0,0,0,4664,4662,1,0,0,0,4664,4665,1,0,0,0,4665,813,1,
        0,0,0,4666,4664,1,0,0,0,4667,4668,7,36,0,0,4668,815,1,0,0,0,4669,
        4675,3,812,406,0,4670,4671,3,814,407,0,4671,4672,3,812,406,0,4672,
        4674,1,0,0,0,4673,4670,1,0,0,0,4674,4677,1,0,0,0,4675,4673,1,0,0,
        0,4675,4676,1,0,0,0,4676,817,1,0,0,0,4677,4675,1,0,0,0,4678,4679,
        5,408,0,0,4679,819,1,0,0,0,4680,4686,3,816,408,0,4681,4682,3,818,
        409,0,4682,4683,3,816,408,0,4683,4685,1,0,0,0,4684,4681,1,0,0,0,
        4685,4688,1,0,0,0,4686,4684,1,0,0,0,4686,4687,1,0,0,0,4687,821,1,
        0,0,0,4688,4686,1,0,0,0,4689,4690,5,405,0,0,4690,823,1,0,0,0,4691,
        4697,3,820,410,0,4692,4693,3,822,411,0,4693,4694,3,820,410,0,4694,
        4696,1,0,0,0,4695,4692,1,0,0,0,4696,4699,1,0,0,0,4697,4695,1,0,0,
        0,4697,4698,1,0,0,0,4698,825,1,0,0,0,4699,4697,1,0,0,0,4700,4701,
        5,407,0,0,4701,827,1,0,0,0,4702,4708,3,824,412,0,4703,4704,3,826,
        413,0,4704,4705,3,824,412,0,4705,4707,1,0,0,0,4706,4703,1,0,0,0,
        4707,4710,1,0,0,0,4708,4706,1,0,0,0,4708,4709,1,0,0,0,4709,829,1,
        0,0,0,4710,4708,1,0,0,0,4711,4712,7,37,0,0,4712,831,1,0,0,0,4713,
        4719,3,830,415,0,4714,4719,5,395,0,0,4715,4719,5,396,0,0,4716,4719,
        5,397,0,0,4717,4719,5,398,0,0,4718,4713,1,0,0,0,4718,4714,1,0,0,
        0,4718,4715,1,0,0,0,4718,4716,1,0,0,0,4718,4717,1,0,0,0,4719,833,
        1,0,0,0,4720,4721,5,386,0,0,4721,4722,3,398,199,0,4722,4723,5,387,
        0,0,4723,835,1,0,0,0,4724,4728,3,838,419,0,4725,4726,5,112,0,0,4726,
        4728,3,834,417,0,4727,4724,1,0,0,0,4727,4725,1,0,0,0,4728,837,1,
        0,0,0,4729,4731,3,828,414,0,4730,4732,3,840,420,0,4731,4730,1,0,
        0,0,4731,4732,1,0,0,0,4732,839,1,0,0,0,4733,4734,3,832,416,0,4734,
        4735,3,828,414,0,4735,4740,1,0,0,0,4736,4740,3,842,421,0,4737,4738,
        5,206,0,0,4738,4740,3,850,425,0,4739,4733,1,0,0,0,4739,4736,1,0,
        0,0,4739,4737,1,0,0,0,4740,841,1,0,0,0,4741,4742,5,148,0,0,4742,
        4753,3,848,424,0,4743,4744,5,25,0,0,4744,4745,3,828,414,0,4745,4746,
        5,11,0,0,4746,4747,3,828,414,0,4747,4753,1,0,0,0,4748,4749,5,176,
        0,0,4749,4750,7,38,0,0,4750,4753,3,722,361,0,4751,4753,3,844,422,
        0,4752,4741,1,0,0,0,4752,4743,1,0,0,0,4752,4748,1,0,0,0,4752,4751,
        1,0,0,0,4753,843,1,0,0,0,4754,4755,3,890,445,0,4755,4756,3,846,423,
        0,4756,4757,3,834,417,0,4757,845,1,0,0,0,4758,4759,7,39,0,0,4759,
        847,1,0,0,0,4760,4763,3,834,417,0,4761,4763,3,722,361,0,4762,4760,
        1,0,0,0,4762,4761,1,0,0,0,4763,849,1,0,0,0,4764,4765,3,830,415,0,
        4765,4766,3,828,414,0,4766,4769,1,0,0,0,4767,4769,3,842,421,0,4768,
        4764,1,0,0,0,4768,4767,1,0,0,0,4769,851,1,0,0,0,4770,4771,5,160,
        0,0,4771,4772,5,92,0,0,4772,4773,5,134,0,0,4773,853,1,0,0,0,4774,
        4782,5,392,0,0,4775,4782,5,393,0,0,4776,4782,5,394,0,0,4777,4778,
        5,160,0,0,4778,4779,5,206,0,0,4779,4780,5,92,0,0,4780,4782,5,134,
        0,0,4781,4774,1,0,0,0,4781,4775,1,0,0,0,4781,4776,1,0,0,0,4781,4777,
        1,0,0,0,4782,855,1,0,0,0,4783,4792,3,836,418,0,4784,4785,3,854,427,
        0,4785,4786,3,836,418,0,4786,4791,1,0,0,0,4787,4788,3,852,426,0,
        4788,4789,3,836,418,0,4789,4791,1,0,0,0,4790,4784,1,0,0,0,4790,4787,
        1,0,0,0,4791,4794,1,0,0,0,4792,4790,1,0,0,0,4792,4793,1,0,0,0,4793,
        857,1,0,0,0,4794,4792,1,0,0,0,4795,4808,5,209,0,0,4796,4808,5,339,
        0,0,4797,4808,5,120,0,0,4798,4808,5,349,0,0,4799,4800,5,206,0,0,
        4800,4808,5,209,0,0,4801,4802,5,206,0,0,4802,4808,5,339,0,0,4803,
        4804,5,206,0,0,4804,4808,5,120,0,0,4805,4806,5,206,0,0,4806,4808,
        5,349,0,0,4807,4795,1,0,0,0,4807,4796,1,0,0,0,4807,4797,1,0,0,0,
        4807,4798,1,0,0,0,4807,4799,1,0,0,0,4807,4801,1,0,0,0,4807,4803,
        1,0,0,0,4807,4805,1,0,0,0,4808,859,1,0,0,0,4809,4812,3,856,428,0,
        4810,4811,5,160,0,0,4811,4813,3,858,429,0,4812,4810,1,0,0,0,4812,
        4813,1,0,0,0,4813,861,1,0,0,0,4814,4815,5,206,0,0,4815,863,1,0,0,
        0,4816,4818,3,862,431,0,4817,4816,1,0,0,0,4818,4821,1,0,0,0,4819,
        4817,1,0,0,0,4819,4820,1,0,0,0,4820,4822,1,0,0,0,4821,4819,1,0,0,
        0,4822,4823,3,860,430,0,4823,865,1,0,0,0,4824,4825,5,11,0,0,4825,
        867,1,0,0,0,4826,4832,3,864,432,0,4827,4828,3,866,433,0,4828,4829,
        3,864,432,0,4829,4831,1,0,0,0,4830,4827,1,0,0,0,4831,4834,1,0,0,
        0,4832,4830,1,0,0,0,4832,4833,1,0,0,0,4833,869,1,0,0,0,4834,4832,
        1,0,0,0,4835,4836,5,218,0,0,4836,871,1,0,0,0,4837,4843,3,868,434,
        0,4838,4839,3,870,435,0,4839,4840,3,868,434,0,4840,4842,1,0,0,0,
        4841,4838,1,0,0,0,4842,4845,1,0,0,0,4843,4841,1,0,0,0,4843,4844,
        1,0,0,0,4844,873,1,0,0,0,4845,4843,1,0,0,0,4846,4847,7,40,0,0,4847,
        875,1,0,0,0,4848,4849,7,40,0,0,4849,877,1,0,0,0,4850,4852,3,640,
        320,0,4851,4853,3,880,440,0,4852,4851,1,0,0,0,4852,4853,1,0,0,0,
        4853,879,1,0,0,0,4854,4855,5,227,0,0,4855,4856,5,386,0,0,4856,4861,
        3,882,441,0,4857,4858,5,384,0,0,4858,4860,3,882,441,0,4859,4857,
        1,0,0,0,4860,4863,1,0,0,0,4861,4859,1,0,0,0,4861,4862,1,0,0,0,4862,
        4864,1,0,0,0,4863,4861,1,0,0,0,4864,4865,5,387,0,0,4865,881,1,0,
        0,0,4866,4869,3,896,448,0,4867,4868,5,392,0,0,4868,4870,3,772,386,
        0,4869,4867,1,0,0,0,4869,4870,1,0,0,0,4870,883,1,0,0,0,4871,4872,
        5,386,0,0,4872,4877,3,886,443,0,4873,4874,5,384,0,0,4874,4876,3,
        886,443,0,4875,4873,1,0,0,0,4876,4879,1,0,0,0,4877,4875,1,0,0,0,
        4877,4878,1,0,0,0,4878,4880,1,0,0,0,4879,4877,1,0,0,0,4880,4881,
        5,387,0,0,4881,885,1,0,0,0,4882,4883,3,896,448,0,4883,4884,3,888,
        444,0,4884,4885,3,772,386,0,4885,887,1,0,0,0,4886,4889,5,176,0,0,
        4887,4889,3,890,445,0,4888,4886,1,0,0,0,4888,4887,1,0,0,0,4889,889,
        1,0,0,0,4890,4891,7,41,0,0,4891,891,1,0,0,0,4892,4893,7,42,0,0,4893,
        893,1,0,0,0,4894,4898,3,892,446,0,4895,4898,5,412,0,0,4896,4898,
        3,898,449,0,4897,4894,1,0,0,0,4897,4895,1,0,0,0,4897,4896,1,0,0,
        0,4898,895,1,0,0,0,4899,4902,5,418,0,0,4900,4902,3,902,451,0,4901,
        4899,1,0,0,0,4901,4900,1,0,0,0,4902,897,1,0,0,0,4903,4906,3,896,
        448,0,4904,4905,5,382,0,0,4905,4907,3,896,448,0,4906,4904,1,0,0,
        0,4906,4907,1,0,0,0,4907,899,1,0,0,0,4908,4909,3,896,448,0,4909,
        901,1,0,0,0,4910,4911,7,43,0,0,4911,903,1,0,0,0,4912,4913,7,44,0,
        0,4913,905,1,0,0,0,4914,4915,3,908,454,0,4915,4916,5,0,0,1,4916,
        907,1,0,0,0,4917,4922,3,910,455,0,4918,4919,5,384,0,0,4919,4921,
        3,910,455,0,4920,4918,1,0,0,0,4921,4924,1,0,0,0,4922,4920,1,0,0,
        0,4922,4923,1,0,0,0,4923,909,1,0,0,0,4924,4922,1,0,0,0,4925,4930,
        3,912,456,0,4926,4927,5,386,0,0,4927,4928,3,914,457,0,4928,4929,
        5,387,0,0,4929,4931,1,0,0,0,4930,4926,1,0,0,0,4930,4931,1,0,0,0,
        4931,911,1,0,0,0,4932,4933,7,45,0,0,4933,913,1,0,0,0,4934,4939,3,
        916,458,0,4935,4936,5,384,0,0,4936,4938,3,916,458,0,4937,4935,1,
        0,0,0,4938,4941,1,0,0,0,4939,4937,1,0,0,0,4939,4940,1,0,0,0,4940,
        915,1,0,0,0,4941,4939,1,0,0,0,4942,4943,7,46,0,0,4943,917,1,0,0,
        0,4944,4945,5,239,0,0,4945,4946,3,896,448,0,4946,4947,5,134,0,0,
        4947,4948,3,382,191,0,4948,919,1,0,0,0,4949,4950,5,110,0,0,4950,
        4951,3,896,448,0,4951,4952,5,359,0,0,4952,4953,3,922,461,0,4953,
        921,1,0,0,0,4954,4959,3,772,386,0,4955,4956,5,384,0,0,4956,4958,
        3,772,386,0,4957,4955,1,0,0,0,4958,4961,1,0,0,0,4959,4957,1,0,0,
        0,4959,4960,1,0,0,0,4960,923,1,0,0,0,4961,4959,1,0,0,0,4962,4977,
        3,934,467,0,4963,4977,3,946,473,0,4964,4977,3,952,476,0,4965,4977,
        3,948,474,0,4966,4977,3,950,475,0,4967,4977,3,974,487,0,4968,4977,
        3,976,488,0,4969,4977,3,978,489,0,4970,4977,3,984,492,0,4971,4977,
        3,986,493,0,4972,4977,3,988,494,0,4973,4977,3,990,495,0,4974,4977,
        3,992,496,0,4975,4977,3,994,497,0,4976,4962,1,0,0,0,4976,4963,1,
        0,0,0,4976,4964,1,0,0,0,4976,4965,1,0,0,0,4976,4966,1,0,0,0,4976,
        4967,1,0,0,0,4976,4968,1,0,0,0,4976,4969,1,0,0,0,4976,4970,1,0,0,
        0,4976,4971,1,0,0,0,4976,4972,1,0,0,0,4976,4973,1,0,0,0,4976,4974,
        1,0,0,0,4976,4975,1,0,0,0,4977,925,1,0,0,0,4978,4979,5,249,0,0,4979,
        4980,5,392,0,0,4980,4986,5,417,0,0,4981,4982,5,80,0,0,4982,4983,
        5,236,0,0,4983,4984,5,392,0,0,4984,4986,3,954,477,0,4985,4978,1,
        0,0,0,4985,4981,1,0,0,0,4986,927,1,0,0,0,4987,4992,3,926,463,0,4988,
        4989,5,384,0,0,4989,4991,3,926,463,0,4990,4988,1,0,0,0,4991,4994,
        1,0,0,0,4992,4990,1,0,0,0,4992,4993,1,0,0,0,4993,929,1,0,0,0,4994,
        4992,1,0,0,0,4995,4999,5,249,0,0,4996,4997,5,80,0,0,4997,4999,5,
        236,0,0,4998,4995,1,0,0,0,4998,4996,1,0,0,0,4999,931,1,0,0,0,5000,
        5005,3,930,465,0,5001,5002,5,384,0,0,5002,5004,3,930,465,0,5003,
        5001,1,0,0,0,5004,5007,1,0,0,0,5005,5003,1,0,0,0,5005,5006,1,0,0,
        0,5006,933,1,0,0,0,5007,5005,1,0,0,0,5008,5009,5,58,0,0,5009,5010,
        5,270,0,0,5010,5012,5,233,0,0,5011,5013,3,40,20,0,5012,5011,1,0,
        0,0,5012,5013,1,0,0,0,5013,5023,1,0,0,0,5014,5015,3,896,448,0,5015,
        5016,5,176,0,0,5016,5017,3,896,448,0,5017,5024,1,0,0,0,5018,5021,
        3,896,448,0,5019,5020,5,375,0,0,5020,5022,3,928,464,0,5021,5019,
        1,0,0,0,5021,5022,1,0,0,0,5022,5024,1,0,0,0,5023,5014,1,0,0,0,5023,
        5018,1,0,0,0,5024,935,1,0,0,0,5025,5026,5,375,0,0,5026,5027,5,268,
        0,0,5027,937,1,0,0,0,5028,5030,5,2,0,0,5029,5031,3,936,468,0,5030,
        5029,1,0,0,0,5030,5031,1,0,0,0,5031,939,1,0,0,0,5032,5033,5,102,
        0,0,5033,941,1,0,0,0,5034,5035,5,91,0,0,5035,943,1,0,0,0,5036,5037,
        5,351,0,0,5037,945,1,0,0,0,5038,5039,5,9,0,0,5039,5040,5,270,0,0,
        5040,5041,5,233,0,0,5041,5059,3,896,448,0,5042,5060,5,362,0,0,5043,
        5060,5,91,0,0,5044,5045,5,293,0,0,5045,5060,3,928,464,0,5046,5047,
        5,352,0,0,5047,5060,3,932,466,0,5048,5049,5,264,0,0,5049,5050,5,
        330,0,0,5050,5060,3,896,448,0,5051,5053,3,938,469,0,5052,5054,3,
        940,470,0,5053,5052,1,0,0,0,5053,5054,1,0,0,0,5054,5060,1,0,0,0,
        5055,5057,3,940,470,0,5056,5058,3,938,469,0,5057,5056,1,0,0,0,5057,
        5058,1,0,0,0,5058,5060,1,0,0,0,5059,5042,1,0,0,0,5059,5043,1,0,0,
        0,5059,5044,1,0,0,0,5059,5046,1,0,0,0,5059,5048,1,0,0,0,5059,5051,
        1,0,0,0,5059,5055,1,0,0,0,5060,947,1,0,0,0,5061,5062,7,14,0,0,5062,
        5063,5,378,0,0,5063,5064,5,189,0,0,5064,949,1,0,0,0,5065,5077,5,
        268,0,0,5066,5067,5,3,0,0,5067,5068,5,270,0,0,5068,5069,5,233,0,
        0,5069,5070,5,375,0,0,5070,5078,3,896,448,0,5071,5072,5,270,0,0,
        5072,5073,5,233,0,0,5073,5074,3,896,448,0,5074,5075,5,375,0,0,5075,
        5076,3,896,448,0,5076,5078,1,0,0,0,5077,5066,1,0,0,0,5077,5071,1,
        0,0,0,5078,951,1,0,0,0,5079,5080,5,98,0,0,5080,5081,5,270,0,0,5081,
        5083,5,233,0,0,5082,5084,3,36,18,0,5083,5082,1,0,0,0,5083,5084,1,
        0,0,0,5084,5085,1,0,0,0,5085,5086,3,896,448,0,5086,953,1,0,0,0,5087,
        5092,3,896,448,0,5088,5089,5,382,0,0,5089,5091,3,896,448,0,5090,
        5088,1,0,0,0,5091,5094,1,0,0,0,5092,5090,1,0,0,0,5092,5093,1,0,0,
        0,5093,955,1,0,0,0,5094,5092,1,0,0,0,5095,5096,3,964,482,0,5096,
        957,1,0,0,0,5097,5098,3,956,478,0,5098,5099,5,0,0,1,5099,959,1,0,
        0,0,5100,5105,3,962,481,0,5101,5102,5,218,0,0,5102,5104,3,962,481,
        0,5103,5101,1,0,0,0,5104,5107,1,0,0,0,5105,5103,1,0,0,0,5105,5106,
        1,0,0,0,5106,961,1,0,0,0,5107,5105,1,0,0,0,5108,5113,3,964,482,0,
        5109,5110,5,11,0,0,5110,5112,3,964,482,0,5111,5109,1,0,0,0,5112,
        5115,1,0,0,0,5113,5111,1,0,0,0,5113,5114,1,0,0,0,5114,963,1,0,0,
        0,5115,5113,1,0,0,0,5116,5117,3,896,448,0,5117,5118,3,968,484,0,
        5118,5119,3,966,483,0,5119,965,1,0,0,0,5120,5121,7,25,0,0,5121,967,
        1,0,0,0,5122,5123,5,398,0,0,5123,969,1,0,0,0,5124,5129,5,169,0,0,
        5125,5126,5,201,0,0,5126,5127,5,330,0,0,5127,5129,3,954,477,0,5128,
        5124,1,0,0,0,5128,5125,1,0,0,0,5129,971,1,0,0,0,5130,5131,3,970,
        485,0,5131,5132,5,0,0,1,5132,973,1,0,0,0,5133,5134,5,58,0,0,5134,
        5135,5,337,0,0,5135,5136,3,896,448,0,5136,5137,5,382,0,0,5137,5138,
        3,896,448,0,5138,5139,5,371,0,0,5139,5140,3,956,478,0,5140,5141,
        5,95,0,0,5141,5142,3,970,485,0,5142,975,1,0,0,0,5143,5144,5,9,0,
        0,5144,5145,5,337,0,0,5145,5146,3,896,448,0,5146,5147,5,382,0,0,
        5147,5164,3,896,448,0,5148,5149,5,371,0,0,5149,5150,3,956,478,0,
        5150,5151,5,95,0,0,5151,5152,3,970,485,0,5152,5165,1,0,0,0,5153,
        5154,5,4,0,0,5154,5158,5,330,0,0,5155,5156,5,98,0,0,5156,5158,5,
        134,0,0,5157,5153,1,0,0,0,5157,5155,1,0,0,0,5158,5162,1,0,0,0,5159,
        5160,5,236,0,0,5160,5163,3,954,477,0,5161,5163,5,351,0,0,5162,5159,
        1,0,0,0,5162,5161,1,0,0,0,5163,5165,1,0,0,0,5164,5148,1,0,0,0,5164,
        5157,1,0,0,0,5165,977,1,0,0,0,5166,5167,5,98,0,0,5167,5168,5,337,
        0,0,5168,5169,3,896,448,0,5169,5170,5,382,0,0,5170,5171,3,896,448,
        0,5171,979,1,0,0,0,5172,5173,5,8,0,0,5173,5174,5,392,0,0,5174,5185,
        5,417,0,0,5175,5176,5,249,0,0,5176,5177,5,392,0,0,5177,5185,5,417,
        0,0,5178,5179,5,284,0,0,5179,5180,5,392,0,0,5180,5185,5,412,0,0,
        5181,5182,5,230,0,0,5182,5183,5,392,0,0,5183,5185,3,954,477,0,5184,
        5172,1,0,0,0,5184,5175,1,0,0,0,5184,5178,1,0,0,0,5184,5181,1,0,0,
        0,5185,981,1,0,0,0,5186,5191,3,980,490,0,5187,5188,5,384,0,0,5188,
        5190,3,980,490,0,5189,5187,1,0,0,0,5190,5193,1,0,0,0,5191,5189,1,
        0,0,0,5191,5192,1,0,0,0,5192,983,1,0,0,0,5193,5191,1,0,0,0,5194,
        5195,5,58,0,0,5195,5196,5,236,0,0,5196,5197,3,896,448,0,5197,5198,
        5,382,0,0,5198,5199,3,954,477,0,5199,5200,5,375,0,0,5200,5201,3,
        982,491,0,5201,985,1,0,0,0,5202,5203,5,9,0,0,5203,5204,5,236,0,0,
        5204,5205,3,896,448,0,5205,5206,5,382,0,0,5206,5214,3,954,477,0,
        5207,5208,5,293,0,0,5208,5215,3,982,491,0,5209,5210,5,352,0,0,5210,
        5215,5,284,0,0,5211,5212,7,47,0,0,5212,5213,5,337,0,0,5213,5215,
        3,896,448,0,5214,5207,1,0,0,0,5214,5209,1,0,0,0,5214,5211,1,0,0,
        0,5215,987,1,0,0,0,5216,5217,5,98,0,0,5217,5218,5,236,0,0,5218,5219,
        3,896,448,0,5219,5220,5,382,0,0,5220,5221,3,954,477,0,5221,989,1,
        0,0,0,5222,5223,5,58,0,0,5223,5224,7,48,0,0,5224,5225,5,192,0,0,
        5225,5226,5,412,0,0,5226,5227,5,148,0,0,5227,5231,3,896,448,0,5228,
        5229,5,330,0,0,5229,5232,3,954,477,0,5230,5232,3,944,472,0,5231,
        5228,1,0,0,0,5231,5230,1,0,0,0,5232,5236,1,0,0,0,5233,5234,5,375,
        0,0,5234,5235,5,219,0,0,5235,5237,5,417,0,0,5236,5233,1,0,0,0,5236,
        5237,1,0,0,0,5237,991,1,0,0,0,5238,5239,5,9,0,0,5239,5240,7,48,0,
        0,5240,5241,5,192,0,0,5241,5242,5,412,0,0,5242,5243,5,148,0,0,5243,
        5247,3,896,448,0,5244,5245,5,330,0,0,5245,5248,3,954,477,0,5246,
        5248,3,944,472,0,5247,5244,1,0,0,0,5247,5246,1,0,0,0,5248,5252,1,
        0,0,0,5249,5250,5,375,0,0,5250,5251,5,219,0,0,5251,5253,5,417,0,
        0,5252,5249,1,0,0,0,5252,5253,1,0,0,0,5253,993,1,0,0,0,5254,5255,
        5,98,0,0,5255,5256,7,48,0,0,5256,5257,5,192,0,0,5257,5258,5,412,
        0,0,5258,5259,5,148,0,0,5259,5260,3,896,448,0,5260,995,1,0,0,0,613,
        998,1006,1012,1019,1029,1032,1036,1056,1061,1066,1072,1076,1089,
        1093,1097,1102,1109,1113,1118,1125,1129,1140,1146,1153,1200,1229,
        1233,1236,1239,1244,1250,1254,1260,1262,1279,1291,1295,1302,1310,
        1313,1318,1322,1325,1335,1343,1347,1350,1354,1358,1361,1366,1372,
        1377,1382,1386,1397,1399,1403,1413,1417,1423,1426,1433,1438,1446,
        1451,1455,1463,1468,1474,1480,1483,1486,1489,1498,1506,1511,1519,
        1526,1529,1532,1534,1542,1545,1548,1551,1554,1557,1560,1563,1566,
        1569,1572,1574,1586,1590,1600,1606,1621,1638,1643,1647,1651,1658,
        1665,1671,1675,1678,1685,1708,1713,1717,1725,1734,1738,1744,1750,
        1757,1760,1766,1773,1781,1790,1799,1819,1826,1828,1835,1845,1853,
        1857,1861,1874,1883,1889,1893,1900,1903,1906,1909,1921,1927,1953,
        1961,1965,1968,1971,1974,1977,1980,1983,1986,1995,2005,2008,2028,
        2034,2040,2043,2045,2052,2059,2063,2073,2078,2087,2095,2103,2121,
        2134,2155,2159,2174,2180,2183,2186,2189,2192,2196,2210,2218,2221,
        2236,2270,2278,2283,2291,2296,2301,2311,2319,2327,2335,2346,2350,
        2358,2367,2370,2379,2385,2389,2395,2399,2411,2420,2431,2435,2442,
        2454,2461,2470,2473,2480,2486,2492,2495,2501,2505,2509,2514,2518,
        2522,2526,2534,2538,2542,2546,2550,2558,2562,2566,2574,2579,2584,
        2588,2592,2599,2608,2616,2627,2645,2648,2654,2680,2683,2689,2697,
        2705,2718,2725,2731,2735,2738,2741,2744,2747,2750,2757,2761,2764,
        2767,2770,2773,2776,2783,2786,2793,2796,2799,2802,2805,2808,2811,
        2814,2817,2820,2823,2827,2830,2833,2836,2839,2842,2845,2848,2851,
        2854,2857,2859,2865,2869,2876,2878,2881,2886,2889,2893,2898,2904,
        2910,2918,2926,2933,2939,2948,2951,2955,2968,2972,2983,2990,2994,
        2999,3002,3012,3014,3018,3025,3030,3050,3057,3080,3094,3115,3131,
        3144,3148,3152,3159,3187,3194,3199,3204,3212,3218,3222,3225,3228,
        3234,3241,3251,3255,3260,3264,3270,3277,3284,3292,3301,3305,3308,
        3316,3319,3327,3330,3338,3342,3347,3351,3360,3376,3391,3393,3409,
        3416,3433,3436,3439,3445,3468,3482,3485,3490,3516,3520,3523,3526,
        3530,3535,3538,3541,3544,3547,3553,3556,3559,3562,3565,3568,3571,
        3574,3577,3581,3583,3589,3594,3597,3600,3603,3609,3612,3615,3618,
        3621,3624,3627,3630,3633,3637,3639,3641,3646,3652,3657,3675,3684,
        3695,3703,3715,3718,3724,3731,3738,3745,3752,3761,3765,3772,3777,
        3781,3797,3801,3803,3806,3819,3822,3825,3837,3840,3847,3856,3861,
        3863,3865,3882,3885,3894,3900,3904,3907,3910,3913,3916,3928,3932,
        3935,3938,3945,3948,3953,3961,3967,3972,3976,3981,3988,4002,4005,
        4009,4026,4034,4037,4050,4059,4062,4068,4071,4076,4079,4088,4102,
        4108,4110,4118,4128,4133,4135,4147,4153,4155,4162,4169,4178,4188,
        4191,4194,4197,4201,4210,4219,4227,4233,4242,4249,4257,4267,4277,
        4282,4286,4290,4296,4317,4323,4327,4331,4334,4340,4345,4348,4352,
        4360,4370,4380,4399,4406,4409,4420,4427,4430,4432,4443,4453,4455,
        4461,4465,4474,4487,4491,4503,4507,4516,4544,4554,4562,4567,4588,
        4592,4606,4621,4630,4632,4640,4653,4664,4675,4686,4697,4708,4718,
        4727,4731,4739,4752,4762,4768,4781,4790,4792,4807,4812,4819,4832,
        4843,4852,4861,4869,4877,4888,4897,4901,4906,4922,4930,4939,4959,
        4976,4985,4992,4998,5005,5012,5021,5023,5030,5053,5057,5059,5077,
        5083,5092,5105,5113,5128,5157,5162,5164,5184,5191,5214,5231,5236,
        5247,5252
    ]

class HiveParser ( Parser ):

    grammarFileName = "HiveParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ACTIVATE'", "'ACTIVE'", "'ADD'", 
                     "'ADMIN'", "'AFTER'", "'ALL'", "'ALLOC_FRACTION'", 
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
                     "'APPLICATION'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
                     "'AST'", "'AT'", "'AUTHORIZATION'", "'AUTOCOMMIT'", 
                     "'KW_BATCH'", "'BEFORE'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", 
                     "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CBO'", "'CHANGE'", "'CHAR'", "'CHECK'", "'CLUSTER'", 
                     "'CLUSTERED'", "'CLUSTERSTATUS'", "'COLLECTION'", "'COLUMN'", 
                     "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPACTIONS'", "'COMPACTIONID'", "'COMPUTE'", "'CONCATENATE'", 
                     "'CONF'", "'CONSTRAINT'", "'CONTINUE'", "'COST'", "'CREATE'", 
                     "'CRON'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIMESTAMP'", "'CURSOR'", "'DATA'", "'DATABASE'", 
                     "'DATABASES'", "'CONNECTOR'", "'CONNECTORS'", "'DATE'", 
                     "'DATETIME'", "<INVALID>", "'KW_DAYOFWEEK'", "'DBPROPERTIES'", 
                     "'DCPROPERTIES'", "'DDL'", "'DEBUG'", "<INVALID>", 
                     "'DEFAULT'", "'DEFERRED'", "'DEFINED'", "'DELETE'", 
                     "'DELIMITED'", "'DEPENDENCY'", "'DESC'", "'DESCRIBE'", 
                     "'DETAIL'", "'DIRECTORIES'", "'DIRECTORY'", "<INVALID>", 
                     "'DISTINCT'", "'DISTRIBUTE'", "'DISTRIBUTED'", "'DO'", 
                     "'DOUBLE'", "'DAYOFWEEK'", "'DROP'", "'DUMP'", "'$ELEM$'", 
                     "'ELSE'", "<INVALID>", "'END'", "'ENFORCED'", "'ESCAPED'", 
                     "'EVERY'", "'EXCEPT'", "'EXCHANGE'", "'EXCLUSIVE'", 
                     "'EXECUTE'", "'EXECUTED'", "'EXISTS'", "'EXPIRE_SNAPSHOTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXPRESSION'", "'EXTENDED'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
                     "'FILE'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FLOOR'", 
                     "'FOLLOWING'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FORMAT'", 
                     "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
                     "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'KW_HOLD_DDLTIME'", 
                     "<INVALID>", "'IDXPROPERTIES'", "'IF'", "'IGNORE'", 
                     "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", "'INNER'", 
                     "'INPATH'", "'INPUTDRIVER'", "'INPUTFORMAT'", "'INSERT'", 
                     "<INVALID>", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
                     "'IS'", "'ISOLATION'", "'ITEMS'", "'JAR'", "'JOIN'", 
                     "'JOINCOST'", "'KEY'", "'KEYS'", "'$KEY$'", "'KILL'", 
                     "'LAST'", "'LATERAL'", "'LEADING'", "'LEFT'", "'LESS'", 
                     "'LEVEL'", "'LIKE'", "'LIMIT'", "'LINES'", "'LOAD'", 
                     "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", 
                     "'LONG'", "'MACRO'", "'MANAGED'", "'MANAGEDLOCATION'", 
                     "'MANAGEMENT'", "'MAP'", "'MAPJOIN'", "'MAPPING'", 
                     "'MATCHED'", "'MATERIALIZED'", "'MERGE'", "'METADATA'", 
                     "'MINUS'", "<INVALID>", "<INVALID>", "'MORE'", "'MOVE'", 
                     "'MSCK'", "'NONE'", "'NORELY'", "'NOSCAN'", "<INVALID>", 
                     "'NOVALIDATE'", "'KW_NO_DROP'", "'NULL'", "'NULLS'", 
                     "'OF'", "'KW_OFFLINE'", "'OFFSET'", "'ON'", "'ONLY'", 
                     "'OPERATOR'", "'OPTION'", "'OR'", "'ORDER'", "'OUT'", 
                     "'OUTER'", "'OUTPUTDRIVER'", "'OUTPUTFORMAT'", "'OVER'", 
                     "'OVERWRITE'", "'OWNER'", "'PARTITION'", "'PARTITIONED'", 
                     "'PARTITIONS'", "'PATH'", "'PERCENT'", "'PKFK_JOIN'", 
                     "'PLAN'", "'PLANS'", "'PLUS'", "'POOL'", "'PRECEDING'", 
                     "'PRECISION'", "'PREPARE'", "'PRESERVE'", "'PRIMARY'", 
                     "'PRINCIPALS'", "'PROCEDURE'", "'KW_PROTECTION'", "'PURGE'", 
                     "'QUALIFY'", "'QUARTER'", "'QUERY'", "'QUERY_PARALLELISM'", 
                     "'RANGE'", "'READ'", "'KW_READONLY'", "'READS'", "'REAL'", 
                     "'REBUILD'", "'RECORDREADER'", "'RECORDWRITER'", "'REDUCE'", 
                     "'REFERENCES'", "'REGEXP'", "'RELOAD'", "'RELY'", "'REMOTE'", 
                     "'RENAME'", "'REOPTIMIZATION'", "'REPAIR'", "'REPL'", 
                     "'REPLACE'", "'REPLICATION'", "'RESOURCE'", "'RESPECT'", 
                     "'RESTRICT'", "'REVOKE'", "'REWRITE'", "'RIGHT'", "'RLIKE'", 
                     "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
                     "'ROWS'", "'SCHEDULED'", "'SCHEDULING_POLICY'", "'SCHEMA'", 
                     "'SCHEMAS'", "<INVALID>", "'SELECT'", "'SEMI'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SERVER'", "'SET'", "'SETS'", 
                     "'SET_CURRENT_SNAPSHOT'", "'SHARED'", "'SHOW'", "'SHOW_DATABASE'", 
                     "'SKEWED'", "'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SORT'", 
                     "'SORTED'", "'SPEC'", "'SSL'", "'START'", "'STATISTICS'", 
                     "'STATUS'", "'STORED'", "'STREAMTABLE'", "'STRING'", 
                     "'STRUCT'", "'SUMMARY'", "'SYNC'", "'SYSTEM_TIME'", 
                     "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
                     "'TBLPROPERTIES'", "'TEMPORARY'", "'TERMINATED'", "'THEN'", 
                     "'TIME'", "'TIMESTAMP'", "'TIMESTAMPLOCALTZ'", "'KW_TIMESTAMPTZ'", 
                     "'TINYINT'", "'TO'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRANSACTIONAL'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIGGER'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", 
                     "'UNARCHIVE'", "'UNBOUNDED'", "'UNDO'", "'UNION'", 
                     "'UNIONTYPE'", "'UNIQUE'", "'UNIQUEJOIN'", "'UNKNOWN'", 
                     "'UNLOCK'", "'UNMANAGED'", "'UNSET'", "'UNSIGNED'", 
                     "'UPDATE'", "'URI'", "'URL'", "'USE'", "'USER'", "'USING'", 
                     "'UTC'", "'UTC_TMESTAMP'", "'VALIDATE'", "'VALUES'", 
                     "'$VALUE$'", "'VARCHAR'", "'VECTORIZATION'", "'VIEW'", 
                     "'VIEWS'", "'WAIT'", "<INVALID>", "'WHEN'", "'WHERE'", 
                     "'WHILE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'WORK'", 
                     "'WORKLOAD'", "'WRITE'", "<INVALID>", "'ZONE'", "'.'", 
                     "':'", "','", "';'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "<INVALID>", "'<=>'", "<INVALID>", "'<='", "'<'", 
                     "'>='", "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", 
                     "'&'", "'~'", "'|'", "'||'", "'^'", "'?'", "'$'" ]

    symbolicNames = [ "<INVALID>", "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", 
                      "KW_ADD", "KW_ADMIN", "KW_AFTER", "KW_ALL", "KW_ALLOC_FRACTION", 
                      "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ANTI", "KW_ANY", 
                      "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", 
                      "KW_ASC", "KW_AST", "KW_AT", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", 
                      "KW_BATCH", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", 
                      "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", 
                      "KW_BUCKETS", "KW_BY", "KW_CACHE", "KW_CASCADE", "KW_CASE", 
                      "KW_CAST", "KW_CBO", "KW_CHANGE", "KW_CHAR", "KW_CHECK", 
                      "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", 
                      "KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", 
                      "KW_COMMIT", "KW_COMPACT", "KW_COMPACTIONS", "KW_COMPACT_ID", 
                      "KW_COMPUTE", "KW_CONCATENATE", "KW_CONF", "KW_CONSTRAINT", 
                      "KW_CONTINUE", "KW_COST", "KW_CREATE", "KW_CRON", 
                      "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
                      "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", 
                      "KW_DATABASES", "KW_DATACONNECTOR", "KW_DATACONNECTORS", 
                      "KW_DATE", "KW_DATETIME", "KW_DAY", "KW_DAYOFWEEK", 
                      "KW_DBPROPERTIES", "KW_DCPROPERTIES", "KW_DDL", "KW_DEBUG", 
                      "KW_DECIMAL", "KW_DEFAULT", "KW_DEFERRED", "KW_DEFINED", 
                      "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", 
                      "KW_DESCRIBE", "KW_DETAIL", "KW_DIRECTORIES", "KW_DIRECTORY", 
                      "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DISTRIBUTED", 
                      "KW_DO", "KW_DOUBLE", "KW_DOW", "KW_DROP", "KW_DUMP", 
                      "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", 
                      "KW_ENFORCED", "KW_ESCAPED", "KW_EVERY", "KW_EXCEPT", 
                      "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXECUTE", "KW_EXECUTED", 
                      "KW_EXISTS", "KW_EXPIRE_SNAPSHOTS", "KW_EXPLAIN", 
                      "KW_EXPORT", "KW_EXPRESSION", "KW_EXTENDED", "KW_EXTERNAL", 
                      "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
                      "KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", 
                      "KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", 
                      "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", 
                      "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", 
                      "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOLD_DDLTIME", 
                      "KW_HOUR", "KW_IDXPROPERTIES", "KW_IF", "KW_IGNORE", 
                      "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INNER", 
                      "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", 
                      "KW_INT", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", 
                      "KW_IS", "KW_ISOLATION", "KW_ITEMS", "KW_JAR", "KW_JOIN", 
                      "KW_JOINCOST", "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", 
                      "KW_KILL", "KW_LAST", "KW_LATERAL", "KW_LEADING", 
                      "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIKE", "KW_LIMIT", 
                      "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", 
                      "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", 
                      "KW_MANAGED", "KW_MANAGEDLOCATION", "KW_MANAGEMENT", 
                      "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", "KW_MATCHED", 
                      "KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", "KW_MINUS", 
                      "KW_MINUTE", "KW_MONTH", "KW_MORE", "KW_MOVE", "KW_MSCK", 
                      "KW_NONE", "KW_NORELY", "KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", 
                      "KW_NO_DROP", "KW_NULL", "KW_NULLS", "KW_OF", "KW_OFFLINE", 
                      "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPERATOR", "KW_OPTION", 
                      "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", 
                      "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERWRITE", "KW_OWNER", 
                      "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", 
                      "KW_PATH", "KW_PERCENT", "KW_PKFK_JOIN", "KW_PLAN", 
                      "KW_PLANS", "KW_PLUS", "KW_POOL", "KW_PRECEDING", 
                      "KW_PRECISION", "KW_PREPARE", "KW_PRESERVE", "KW_PRIMARY", 
                      "KW_PRINCIPALS", "KW_PROCEDURE", "KW_PROTECTION", 
                      "KW_PURGE", "KW_QUALIFY", "KW_QUARTER", "KW_QUERY", 
                      "KW_QUERY_PARALLELISM", "KW_RANGE", "KW_READ", "KW_READONLY", 
                      "KW_READS", "KW_REAL", "KW_REBUILD", "KW_RECORDREADER", 
                      "KW_RECORDWRITER", "KW_REDUCE", "KW_REFERENCES", "KW_REGEXP", 
                      "KW_RELOAD", "KW_RELY", "KW_REMOTE", "KW_RENAME", 
                      "KW_REOPTIMIZATION", "KW_REPAIR", "KW_REPL", "KW_REPLACE", 
                      "KW_REPLICATION", "KW_RESOURCE", "KW_RESPECT", "KW_RESTRICT", 
                      "KW_REVOKE", "KW_REWRITE", "KW_RIGHT", "KW_RLIKE", 
                      "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", 
                      "KW_ROW", "KW_ROWS", "KW_SCHEDULED", "KW_SCHEDULING_POLICY", 
                      "KW_SCHEMA", "KW_SCHEMAS", "KW_SECOND", "KW_SELECT", 
                      "KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", 
                      "KW_SET", "KW_SETS", "KW_SET_CURRENT_SNAPSHOT", "KW_SHARED", 
                      "KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", 
                      "KW_SNAPSHOT", "KW_SOME", "KW_SORT", "KW_SORTED", 
                      "KW_SPEC", "KW_SSL", "KW_START", "KW_STATISTICS", 
                      "KW_STATUS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", 
                      "KW_STRUCT", "KW_SUMMARY", "KW_SYNC", "KW_SYSTEM_TIME", 
                      "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", 
                      "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", 
                      "KW_THEN", "KW_TIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", 
                      "KW_TIMESTAMPTZ", "KW_TINYINT", "KW_TO", "KW_TOUCH", 
                      "KW_TRAILING", "KW_TRANSACTION", "KW_TRANSACTIONAL", 
                      "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", "KW_TRIM", 
                      "KW_TRUE", "KW_TRUNCATE", "KW_TYPE", "KW_UNARCHIVE", 
                      "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", 
                      "KW_UNIQUE", "KW_UNIQUEJOIN", "KW_UNKNOWN", "KW_UNLOCK", 
                      "KW_UNMANAGED", "KW_UNSET", "KW_UNSIGNED", "KW_UPDATE", 
                      "KW_URI", "KW_URL", "KW_USE", "KW_USER", "KW_USING", 
                      "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", 
                      "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", 
                      "KW_VIEW", "KW_VIEWS", "KW_WAIT", "KW_WEEK", "KW_WHEN", 
                      "KW_WHERE", "KW_WHILE", "KW_WINDOW", "KW_WITH", "KW_WITHIN", 
                      "KW_WORK", "KW_WORKLOAD", "KW_WRITE", "KW_YEAR", "KW_ZONE", 
                      "DOT", "COLON", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
                      "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", 
                      "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", 
                      "GREATERTHANOREQUALTO", "GREATERTHAN", "DIVIDE", "PLUS", 
                      "MINUS", "STAR", "MOD", "DIV", "AMPERSAND", "TILDE", 
                      "BITWISEOR", "CONCATENATE", "BITWISEXOR", "QUESTION", 
                      "DOLLAR", "StringLiteral", "CharSetLiteral", "IntegralLiteral", 
                      "NumberLiteral", "ByteLengthLiteral", "Number", "Identifier", 
                      "CharSetName", "WHITE_SPACE", "LINE_COMMENT", "QUERY_HINT", 
                      "SHOW_HINT", "HIDDEN_HINT" ]

    RULE_statement = 0
    RULE_explainStatement = 1
    RULE_explainOption = 2
    RULE_vectorizationOnly = 3
    RULE_vectorizatonDetail = 4
    RULE_execStatement = 5
    RULE_loadStatement = 6
    RULE_replicationClause = 7
    RULE_exportStatement = 8
    RULE_importStatement = 9
    RULE_replDumpStatement = 10
    RULE_replDbPolicy = 11
    RULE_replLoadStatement = 12
    RULE_replConfigs = 13
    RULE_replConfigsList = 14
    RULE_replTableLevelPolicy = 15
    RULE_replStatusStatement = 16
    RULE_ddlStatement = 17
    RULE_ifExists = 18
    RULE_restrictOrCascade = 19
    RULE_ifNotExists = 20
    RULE_force = 21
    RULE_rewriteEnabled = 22
    RULE_rewriteDisabled = 23
    RULE_storedAsDirs = 24
    RULE_orReplace = 25
    RULE_createDatabaseStatement = 26
    RULE_dbLocation = 27
    RULE_dbManagedLocation = 28
    RULE_dbProperties = 29
    RULE_dbPropertiesList = 30
    RULE_dbConnectorName = 31
    RULE_switchDatabaseStatement = 32
    RULE_dropDatabaseStatement = 33
    RULE_databaseComment = 34
    RULE_truncateTableStatement = 35
    RULE_dropTableStatement = 36
    RULE_inputFileFormat = 37
    RULE_tabTypeExpr = 38
    RULE_partTypeExpr = 39
    RULE_tabPartColTypeExpr = 40
    RULE_descStatement = 41
    RULE_analyzeStatement = 42
    RULE_from_in = 43
    RULE_db_schema = 44
    RULE_showStatement = 45
    RULE_showTablesFilterExpr = 46
    RULE_lockStatement = 47
    RULE_lockDatabase = 48
    RULE_lockMode = 49
    RULE_unlockStatement = 50
    RULE_unlockDatabase = 51
    RULE_createRoleStatement = 52
    RULE_dropRoleStatement = 53
    RULE_grantPrivileges = 54
    RULE_revokePrivileges = 55
    RULE_grantRole = 56
    RULE_revokeRole = 57
    RULE_showRoleGrants = 58
    RULE_showRoles = 59
    RULE_showCurrentRole = 60
    RULE_setRole = 61
    RULE_showGrants = 62
    RULE_showRolePrincipals = 63
    RULE_privilegeIncludeColObject = 64
    RULE_privilegeObject = 65
    RULE_privObject = 66
    RULE_privObjectCols = 67
    RULE_privilegeList = 68
    RULE_privlegeDef = 69
    RULE_privilegeType = 70
    RULE_principalSpecification = 71
    RULE_principalName = 72
    RULE_withGrantOption = 73
    RULE_grantOptionFor = 74
    RULE_adminOptionFor = 75
    RULE_withAdminOption = 76
    RULE_metastoreCheck = 77
    RULE_resourceList = 78
    RULE_resource = 79
    RULE_resourceType = 80
    RULE_createFunctionStatement = 81
    RULE_dropFunctionStatement = 82
    RULE_reloadFunctionsStatement = 83
    RULE_createMacroStatement = 84
    RULE_dropMacroStatement = 85
    RULE_createViewStatement = 86
    RULE_viewPartition = 87
    RULE_viewOrganization = 88
    RULE_viewClusterSpec = 89
    RULE_viewComplexSpec = 90
    RULE_viewDistSpec = 91
    RULE_viewSortSpec = 92
    RULE_dropViewStatement = 93
    RULE_createMaterializedViewStatement = 94
    RULE_dropMaterializedViewStatement = 95
    RULE_createScheduledQueryStatement = 96
    RULE_dropScheduledQueryStatement = 97
    RULE_alterScheduledQueryStatement = 98
    RULE_alterScheduledQueryChange = 99
    RULE_scheduleSpec = 100
    RULE_executedAsSpec = 101
    RULE_definedAsSpec = 102
    RULE_showFunctionIdentifier = 103
    RULE_showStmtIdentifier = 104
    RULE_tableComment = 105
    RULE_createTablePartitionSpec = 106
    RULE_createTablePartitionColumnTypeSpec = 107
    RULE_createTablePartitionColumnSpec = 108
    RULE_partitionTransformSpec = 109
    RULE_columnNameTransformConstraint = 110
    RULE_partitionTransformType = 111
    RULE_tableBuckets = 112
    RULE_tableImplBuckets = 113
    RULE_tableSkewed = 114
    RULE_rowFormat = 115
    RULE_recordReader = 116
    RULE_recordWriter = 117
    RULE_rowFormatSerde = 118
    RULE_rowFormatDelimited = 119
    RULE_tableRowFormat = 120
    RULE_tablePropertiesPrefixed = 121
    RULE_tableProperties = 122
    RULE_tablePropertiesList = 123
    RULE_keyValueProperty = 124
    RULE_keyProperty = 125
    RULE_tableRowFormatFieldIdentifier = 126
    RULE_tableRowFormatCollItemsIdentifier = 127
    RULE_tableRowFormatMapKeysIdentifier = 128
    RULE_tableRowFormatLinesIdentifier = 129
    RULE_tableRowNullFormat = 130
    RULE_tableFileFormat = 131
    RULE_tableLocation = 132
    RULE_columnNameTypeList = 133
    RULE_columnNameTypeOrConstraintList = 134
    RULE_columnNameColonTypeList = 135
    RULE_columnNameList = 136
    RULE_columnName = 137
    RULE_extColumnName = 138
    RULE_columnNameOrderList = 139
    RULE_columnParenthesesList = 140
    RULE_enableValidateSpecification = 141
    RULE_enableSpecification = 142
    RULE_validateSpecification = 143
    RULE_enforcedSpecification = 144
    RULE_relySpecification = 145
    RULE_createConstraint = 146
    RULE_alterConstraintWithName = 147
    RULE_tableLevelConstraint = 148
    RULE_pkUkConstraint = 149
    RULE_checkConstraint = 150
    RULE_createForeignKey = 151
    RULE_alterForeignKeyWithName = 152
    RULE_skewedValueElement = 153
    RULE_skewedColumnValuePairList = 154
    RULE_skewedColumnValuePair = 155
    RULE_skewedColumnValues = 156
    RULE_skewedColumnValue = 157
    RULE_skewedValueLocationElement = 158
    RULE_orderSpecification = 159
    RULE_nullOrdering = 160
    RULE_columnNameOrder = 161
    RULE_columnNameCommentList = 162
    RULE_columnNameComment = 163
    RULE_orderSpecificationRewrite = 164
    RULE_columnRefOrder = 165
    RULE_columnNameType = 166
    RULE_columnNameTypeOrConstraint = 167
    RULE_tableConstraint = 168
    RULE_columnNameTypeConstraint = 169
    RULE_columnConstraint = 170
    RULE_foreignKeyConstraint = 171
    RULE_colConstraint = 172
    RULE_alterColumnConstraint = 173
    RULE_alterForeignKeyConstraint = 174
    RULE_alterColConstraint = 175
    RULE_columnConstraintType = 176
    RULE_defaultVal = 177
    RULE_tableConstraintType = 178
    RULE_constraintOptsCreate = 179
    RULE_constraintOptsAlter = 180
    RULE_columnNameColonType = 181
    RULE_colType = 182
    RULE_colTypeList = 183
    RULE_type = 184
    RULE_primitiveType = 185
    RULE_listType = 186
    RULE_structType = 187
    RULE_mapType = 188
    RULE_unionType = 189
    RULE_setOperator = 190
    RULE_queryStatementExpression = 191
    RULE_queryStatementExpressionBody = 192
    RULE_withClause = 193
    RULE_cteStatement = 194
    RULE_fromStatement = 195
    RULE_singleFromStatement = 196
    RULE_regularBody = 197
    RULE_atomSelectStatement = 198
    RULE_selectStatement = 199
    RULE_setOpSelectStatement = 200
    RULE_selectStatementWithCTE = 201
    RULE_body = 202
    RULE_insertClause = 203
    RULE_destination = 204
    RULE_limitClause = 205
    RULE_deleteStatement = 206
    RULE_columnAssignmentClause = 207
    RULE_precedencePlusExpressionOrDefault = 208
    RULE_setColumnsClause = 209
    RULE_updateStatement = 210
    RULE_sqlTransactionStatement = 211
    RULE_startTransactionStatement = 212
    RULE_transactionMode = 213
    RULE_transactionAccessMode = 214
    RULE_isolationLevel = 215
    RULE_levelOfIsolation = 216
    RULE_commitStatement = 217
    RULE_rollbackStatement = 218
    RULE_setAutoCommitStatement = 219
    RULE_abortTransactionStatement = 220
    RULE_abortCompactionStatement = 221
    RULE_mergeStatement = 222
    RULE_whenClauses = 223
    RULE_whenNotMatchedClause = 224
    RULE_whenMatchedAndClause = 225
    RULE_whenMatchedThenClause = 226
    RULE_updateOrDelete = 227
    RULE_killQueryStatement = 228
    RULE_compactionId = 229
    RULE_compactionPool = 230
    RULE_compactionType = 231
    RULE_compactionStatus = 232
    RULE_alterStatement = 233
    RULE_alterTableStatementSuffix = 234
    RULE_alterTblPartitionStatementSuffix = 235
    RULE_alterStatementPartitionKeyType = 236
    RULE_alterViewStatementSuffix = 237
    RULE_alterMaterializedViewStatementSuffix = 238
    RULE_alterMaterializedViewSuffixRewrite = 239
    RULE_alterMaterializedViewSuffixRebuild = 240
    RULE_alterDatabaseStatementSuffix = 241
    RULE_alterDatabaseSuffixProperties = 242
    RULE_alterDatabaseSuffixSetOwner = 243
    RULE_alterDatabaseSuffixSetLocation = 244
    RULE_alterDatabaseSuffixSetManagedLocation = 245
    RULE_alterStatementSuffixRename = 246
    RULE_alterStatementSuffixAddCol = 247
    RULE_alterStatementSuffixAddConstraint = 248
    RULE_alterStatementSuffixUpdateColumns = 249
    RULE_alterStatementSuffixDropConstraint = 250
    RULE_alterStatementSuffixRenameCol = 251
    RULE_alterStatementSuffixUpdateStatsCol = 252
    RULE_alterStatementSuffixUpdateStats = 253
    RULE_alterStatementChangeColPosition = 254
    RULE_alterStatementSuffixAddPartitions = 255
    RULE_alterStatementSuffixAddPartitionsElement = 256
    RULE_alterStatementSuffixTouch = 257
    RULE_alterStatementSuffixArchive = 258
    RULE_alterStatementSuffixUnArchive = 259
    RULE_partitionLocation = 260
    RULE_alterStatementSuffixDropPartitions = 261
    RULE_alterStatementSuffixProperties = 262
    RULE_alterViewSuffixProperties = 263
    RULE_alterStatementSuffixSerdeProperties = 264
    RULE_tablePartitionPrefix = 265
    RULE_alterStatementSuffixFileFormat = 266
    RULE_alterStatementSuffixClusterbySortby = 267
    RULE_alterTblPartitionStatementSuffixSkewedLocation = 268
    RULE_skewedLocations = 269
    RULE_skewedLocationsList = 270
    RULE_skewedLocationMap = 271
    RULE_alterStatementSuffixLocation = 272
    RULE_alterStatementSuffixSkewedby = 273
    RULE_alterStatementSuffixExchangePartition = 274
    RULE_alterStatementSuffixRenamePart = 275
    RULE_alterStatementSuffixStatsPart = 276
    RULE_alterStatementSuffixMergeFiles = 277
    RULE_alterStatementSuffixBucketNum = 278
    RULE_blocking = 279
    RULE_compactPool = 280
    RULE_alterStatementSuffixCompact = 281
    RULE_alterStatementSuffixSetOwner = 282
    RULE_alterStatementSuffixSetPartSpec = 283
    RULE_alterStatementSuffixExecute = 284
    RULE_fileFormat = 285
    RULE_alterDataConnectorStatementSuffix = 286
    RULE_alterDataConnectorSuffixProperties = 287
    RULE_alterDataConnectorSuffixSetOwner = 288
    RULE_alterDataConnectorSuffixSetUrl = 289
    RULE_likeTableOrFile = 290
    RULE_createTableStatement = 291
    RULE_createDataConnectorStatement = 292
    RULE_dataConnectorComment = 293
    RULE_dataConnectorUrl = 294
    RULE_dataConnectorType = 295
    RULE_dcProperties = 296
    RULE_dropDataConnectorStatement = 297
    RULE_tableAllColumns = 298
    RULE_tableOrColumn = 299
    RULE_defaultValue = 300
    RULE_expressionList = 301
    RULE_aliasList = 302
    RULE_fromClause = 303
    RULE_fromSource = 304
    RULE_atomjoinSource = 305
    RULE_joinSource = 306
    RULE_joinSourcePart = 307
    RULE_uniqueJoinSource = 308
    RULE_uniqueJoinExpr = 309
    RULE_uniqueJoinToken = 310
    RULE_joinToken = 311
    RULE_lateralView = 312
    RULE_tableAlias = 313
    RULE_tableBucketSample = 314
    RULE_splitSample = 315
    RULE_tableSample = 316
    RULE_tableSource = 317
    RULE_asOfClause = 318
    RULE_uniqueJoinTableSource = 319
    RULE_tableName = 320
    RULE_viewName = 321
    RULE_subQuerySource = 322
    RULE_partitioningSpec = 323
    RULE_partitionTableFunctionSource = 324
    RULE_partitionedTableFunction = 325
    RULE_whereClause = 326
    RULE_searchCondition = 327
    RULE_valuesSource = 328
    RULE_valuesClause = 329
    RULE_valuesTableConstructor = 330
    RULE_valueRowConstructor = 331
    RULE_firstValueRowConstructor = 332
    RULE_virtualTableSource = 333
    RULE_selectClause = 334
    RULE_all_distinct = 335
    RULE_selectList = 336
    RULE_selectTrfmClause = 337
    RULE_selectItem = 338
    RULE_trfmClause = 339
    RULE_selectExpression = 340
    RULE_selectExpressionList = 341
    RULE_window_clause = 342
    RULE_window_defn = 343
    RULE_window_specification = 344
    RULE_window_frame = 345
    RULE_window_range_expression = 346
    RULE_window_value_expression = 347
    RULE_window_frame_start_boundary = 348
    RULE_window_frame_boundary = 349
    RULE_groupByClause = 350
    RULE_groupby_expression = 351
    RULE_groupByEmpty = 352
    RULE_rollupStandard = 353
    RULE_rollupOldSyntax = 354
    RULE_groupingSetExpression = 355
    RULE_groupingSetExpressionMultiple = 356
    RULE_groupingExpressionSingle = 357
    RULE_havingClause = 358
    RULE_qualifyClause = 359
    RULE_havingCondition = 360
    RULE_expressionsInParenthesis = 361
    RULE_expressionsNotInParenthesis = 362
    RULE_expressionPart = 363
    RULE_expressionOrDefault = 364
    RULE_firstExpressionsWithAlias = 365
    RULE_expressionWithAlias = 366
    RULE_expressions = 367
    RULE_columnRefOrderInParenthesis = 368
    RULE_columnRefOrderNotInParenthesis = 369
    RULE_orderByClause = 370
    RULE_clusterByClause = 371
    RULE_partitionByClause = 372
    RULE_distributeByClause = 373
    RULE_sortByClause = 374
    RULE_trimFunction = 375
    RULE_function_ = 376
    RULE_null_treatment = 377
    RULE_functionName = 378
    RULE_castExpression = 379
    RULE_caseExpression = 380
    RULE_whenExpression = 381
    RULE_floorExpression = 382
    RULE_floorDateQualifiers = 383
    RULE_extractExpression = 384
    RULE_timeQualifiers = 385
    RULE_constant = 386
    RULE_prepareStmtParam = 387
    RULE_parameterIdx = 388
    RULE_stringLiteralSequence = 389
    RULE_charSetStringLiteral = 390
    RULE_dateLiteral = 391
    RULE_timestampLiteral = 392
    RULE_timestampLocalTZLiteral = 393
    RULE_intervalValue = 394
    RULE_intervalLiteral = 395
    RULE_intervalExpression = 396
    RULE_intervalQualifiers = 397
    RULE_expression = 398
    RULE_atomExpression = 399
    RULE_precedenceFieldExpression = 400
    RULE_precedenceUnaryOperator = 401
    RULE_precedenceUnaryPrefixExpression = 402
    RULE_precedenceBitwiseXorOperator = 403
    RULE_precedenceBitwiseXorExpression = 404
    RULE_precedenceStarOperator = 405
    RULE_precedenceStarExpression = 406
    RULE_precedencePlusOperator = 407
    RULE_precedencePlusExpression = 408
    RULE_precedenceConcatenateOperator = 409
    RULE_precedenceConcatenateExpression = 410
    RULE_precedenceAmpersandOperator = 411
    RULE_precedenceAmpersandExpression = 412
    RULE_precedenceBitwiseOrOperator = 413
    RULE_precedenceBitwiseOrExpression = 414
    RULE_precedenceRegexpOperator = 415
    RULE_precedenceSimilarOperator = 416
    RULE_subQueryExpression = 417
    RULE_precedenceSimilarExpression = 418
    RULE_precedenceSimilarExpressionMain = 419
    RULE_precedenceSimilarExpressionPart = 420
    RULE_precedenceSimilarExpressionAtom = 421
    RULE_precedenceSimilarExpressionQuantifierPredicate = 422
    RULE_quantifierType = 423
    RULE_precedenceSimilarExpressionIn = 424
    RULE_precedenceSimilarExpressionPartNot = 425
    RULE_precedenceDistinctOperator = 426
    RULE_precedenceEqualOperator = 427
    RULE_precedenceEqualExpression = 428
    RULE_isCondition = 429
    RULE_precedenceUnarySuffixExpression = 430
    RULE_precedenceNotOperator = 431
    RULE_precedenceNotExpression = 432
    RULE_precedenceAndOperator = 433
    RULE_precedenceAndExpression = 434
    RULE_precedenceOrOperator = 435
    RULE_precedenceOrExpression = 436
    RULE_booleanValue = 437
    RULE_booleanValueTok = 438
    RULE_tableOrPartition = 439
    RULE_partitionSpec = 440
    RULE_partitionVal = 441
    RULE_partitionSelectorSpec = 442
    RULE_partitionSelectorVal = 443
    RULE_partitionSelectorOperator = 444
    RULE_subQuerySelectorOperator = 445
    RULE_sysFuncNames = 446
    RULE_descFuncNames = 447
    RULE_id_ = 448
    RULE_functionIdentifier = 449
    RULE_principalIdentifier = 450
    RULE_nonReserved = 451
    RULE_sql11ReservedKeywordsUsedAsFunctionName = 452
    RULE_hint = 453
    RULE_hintList = 454
    RULE_hintItem = 455
    RULE_hintName = 456
    RULE_hintArgs = 457
    RULE_hintArgName = 458
    RULE_prepareStatement = 459
    RULE_executeStatement = 460
    RULE_executeParamList = 461
    RULE_resourcePlanDdlStatements = 462
    RULE_rpAssign = 463
    RULE_rpAssignList = 464
    RULE_rpUnassign = 465
    RULE_rpUnassignList = 466
    RULE_createResourcePlanStatement = 467
    RULE_withReplace = 468
    RULE_activate = 469
    RULE_enable = 470
    RULE_disable = 471
    RULE_unmanaged = 472
    RULE_alterResourcePlanStatement = 473
    RULE_globalWmStatement = 474
    RULE_replaceResourcePlanStatement = 475
    RULE_dropResourcePlanStatement = 476
    RULE_poolPath = 477
    RULE_triggerExpression = 478
    RULE_triggerExpressionStandalone = 479
    RULE_triggerOrExpression = 480
    RULE_triggerAndExpression = 481
    RULE_triggerAtomExpression = 482
    RULE_triggerLiteral = 483
    RULE_comparisionOperator = 484
    RULE_triggerActionExpression = 485
    RULE_triggerActionExpressionStandalone = 486
    RULE_createTriggerStatement = 487
    RULE_alterTriggerStatement = 488
    RULE_dropTriggerStatement = 489
    RULE_poolAssign = 490
    RULE_poolAssignList = 491
    RULE_createPoolStatement = 492
    RULE_alterPoolStatement = 493
    RULE_dropPoolStatement = 494
    RULE_createMappingStatement = 495
    RULE_alterMappingStatement = 496
    RULE_dropMappingStatement = 497

    ruleNames =  [ "statement", "explainStatement", "explainOption", "vectorizationOnly", 
                   "vectorizatonDetail", "execStatement", "loadStatement", 
                   "replicationClause", "exportStatement", "importStatement", 
                   "replDumpStatement", "replDbPolicy", "replLoadStatement", 
                   "replConfigs", "replConfigsList", "replTableLevelPolicy", 
                   "replStatusStatement", "ddlStatement", "ifExists", "restrictOrCascade", 
                   "ifNotExists", "force", "rewriteEnabled", "rewriteDisabled", 
                   "storedAsDirs", "orReplace", "createDatabaseStatement", 
                   "dbLocation", "dbManagedLocation", "dbProperties", "dbPropertiesList", 
                   "dbConnectorName", "switchDatabaseStatement", "dropDatabaseStatement", 
                   "databaseComment", "truncateTableStatement", "dropTableStatement", 
                   "inputFileFormat", "tabTypeExpr", "partTypeExpr", "tabPartColTypeExpr", 
                   "descStatement", "analyzeStatement", "from_in", "db_schema", 
                   "showStatement", "showTablesFilterExpr", "lockStatement", 
                   "lockDatabase", "lockMode", "unlockStatement", "unlockDatabase", 
                   "createRoleStatement", "dropRoleStatement", "grantPrivileges", 
                   "revokePrivileges", "grantRole", "revokeRole", "showRoleGrants", 
                   "showRoles", "showCurrentRole", "setRole", "showGrants", 
                   "showRolePrincipals", "privilegeIncludeColObject", "privilegeObject", 
                   "privObject", "privObjectCols", "privilegeList", "privlegeDef", 
                   "privilegeType", "principalSpecification", "principalName", 
                   "withGrantOption", "grantOptionFor", "adminOptionFor", 
                   "withAdminOption", "metastoreCheck", "resourceList", 
                   "resource", "resourceType", "createFunctionStatement", 
                   "dropFunctionStatement", "reloadFunctionsStatement", 
                   "createMacroStatement", "dropMacroStatement", "createViewStatement", 
                   "viewPartition", "viewOrganization", "viewClusterSpec", 
                   "viewComplexSpec", "viewDistSpec", "viewSortSpec", "dropViewStatement", 
                   "createMaterializedViewStatement", "dropMaterializedViewStatement", 
                   "createScheduledQueryStatement", "dropScheduledQueryStatement", 
                   "alterScheduledQueryStatement", "alterScheduledQueryChange", 
                   "scheduleSpec", "executedAsSpec", "definedAsSpec", "showFunctionIdentifier", 
                   "showStmtIdentifier", "tableComment", "createTablePartitionSpec", 
                   "createTablePartitionColumnTypeSpec", "createTablePartitionColumnSpec", 
                   "partitionTransformSpec", "columnNameTransformConstraint", 
                   "partitionTransformType", "tableBuckets", "tableImplBuckets", 
                   "tableSkewed", "rowFormat", "recordReader", "recordWriter", 
                   "rowFormatSerde", "rowFormatDelimited", "tableRowFormat", 
                   "tablePropertiesPrefixed", "tableProperties", "tablePropertiesList", 
                   "keyValueProperty", "keyProperty", "tableRowFormatFieldIdentifier", 
                   "tableRowFormatCollItemsIdentifier", "tableRowFormatMapKeysIdentifier", 
                   "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
                   "tableFileFormat", "tableLocation", "columnNameTypeList", 
                   "columnNameTypeOrConstraintList", "columnNameColonTypeList", 
                   "columnNameList", "columnName", "extColumnName", "columnNameOrderList", 
                   "columnParenthesesList", "enableValidateSpecification", 
                   "enableSpecification", "validateSpecification", "enforcedSpecification", 
                   "relySpecification", "createConstraint", "alterConstraintWithName", 
                   "tableLevelConstraint", "pkUkConstraint", "checkConstraint", 
                   "createForeignKey", "alterForeignKeyWithName", "skewedValueElement", 
                   "skewedColumnValuePairList", "skewedColumnValuePair", 
                   "skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
                   "orderSpecification", "nullOrdering", "columnNameOrder", 
                   "columnNameCommentList", "columnNameComment", "orderSpecificationRewrite", 
                   "columnRefOrder", "columnNameType", "columnNameTypeOrConstraint", 
                   "tableConstraint", "columnNameTypeConstraint", "columnConstraint", 
                   "foreignKeyConstraint", "colConstraint", "alterColumnConstraint", 
                   "alterForeignKeyConstraint", "alterColConstraint", "columnConstraintType", 
                   "defaultVal", "tableConstraintType", "constraintOptsCreate", 
                   "constraintOptsAlter", "columnNameColonType", "colType", 
                   "colTypeList", "type", "primitiveType", "listType", "structType", 
                   "mapType", "unionType", "setOperator", "queryStatementExpression", 
                   "queryStatementExpressionBody", "withClause", "cteStatement", 
                   "fromStatement", "singleFromStatement", "regularBody", 
                   "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
                   "selectStatementWithCTE", "body", "insertClause", "destination", 
                   "limitClause", "deleteStatement", "columnAssignmentClause", 
                   "precedencePlusExpressionOrDefault", "setColumnsClause", 
                   "updateStatement", "sqlTransactionStatement", "startTransactionStatement", 
                   "transactionMode", "transactionAccessMode", "isolationLevel", 
                   "levelOfIsolation", "commitStatement", "rollbackStatement", 
                   "setAutoCommitStatement", "abortTransactionStatement", 
                   "abortCompactionStatement", "mergeStatement", "whenClauses", 
                   "whenNotMatchedClause", "whenMatchedAndClause", "whenMatchedThenClause", 
                   "updateOrDelete", "killQueryStatement", "compactionId", 
                   "compactionPool", "compactionType", "compactionStatus", 
                   "alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
                   "alterStatementPartitionKeyType", "alterViewStatementSuffix", 
                   "alterMaterializedViewStatementSuffix", "alterMaterializedViewSuffixRewrite", 
                   "alterMaterializedViewSuffixRebuild", "alterDatabaseStatementSuffix", 
                   "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
                   "alterDatabaseSuffixSetLocation", "alterDatabaseSuffixSetManagedLocation", 
                   "alterStatementSuffixRename", "alterStatementSuffixAddCol", 
                   "alterStatementSuffixAddConstraint", "alterStatementSuffixUpdateColumns", 
                   "alterStatementSuffixDropConstraint", "alterStatementSuffixRenameCol", 
                   "alterStatementSuffixUpdateStatsCol", "alterStatementSuffixUpdateStats", 
                   "alterStatementChangeColPosition", "alterStatementSuffixAddPartitions", 
                   "alterStatementSuffixAddPartitionsElement", "alterStatementSuffixTouch", 
                   "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
                   "partitionLocation", "alterStatementSuffixDropPartitions", 
                   "alterStatementSuffixProperties", "alterViewSuffixProperties", 
                   "alterStatementSuffixSerdeProperties", "tablePartitionPrefix", 
                   "alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
                   "alterTblPartitionStatementSuffixSkewedLocation", "skewedLocations", 
                   "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
                   "alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
                   "alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", 
                   "alterStatementSuffixMergeFiles", "alterStatementSuffixBucketNum", 
                   "blocking", "compactPool", "alterStatementSuffixCompact", 
                   "alterStatementSuffixSetOwner", "alterStatementSuffixSetPartSpec", 
                   "alterStatementSuffixExecute", "fileFormat", "alterDataConnectorStatementSuffix", 
                   "alterDataConnectorSuffixProperties", "alterDataConnectorSuffixSetOwner", 
                   "alterDataConnectorSuffixSetUrl", "likeTableOrFile", 
                   "createTableStatement", "createDataConnectorStatement", 
                   "dataConnectorComment", "dataConnectorUrl", "dataConnectorType", 
                   "dcProperties", "dropDataConnectorStatement", "tableAllColumns", 
                   "tableOrColumn", "defaultValue", "expressionList", "aliasList", 
                   "fromClause", "fromSource", "atomjoinSource", "joinSource", 
                   "joinSourcePart", "uniqueJoinSource", "uniqueJoinExpr", 
                   "uniqueJoinToken", "joinToken", "lateralView", "tableAlias", 
                   "tableBucketSample", "splitSample", "tableSample", "tableSource", 
                   "asOfClause", "uniqueJoinTableSource", "tableName", "viewName", 
                   "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
                   "partitionedTableFunction", "whereClause", "searchCondition", 
                   "valuesSource", "valuesClause", "valuesTableConstructor", 
                   "valueRowConstructor", "firstValueRowConstructor", "virtualTableSource", 
                   "selectClause", "all_distinct", "selectList", "selectTrfmClause", 
                   "selectItem", "trfmClause", "selectExpression", "selectExpressionList", 
                   "window_clause", "window_defn", "window_specification", 
                   "window_frame", "window_range_expression", "window_value_expression", 
                   "window_frame_start_boundary", "window_frame_boundary", 
                   "groupByClause", "groupby_expression", "groupByEmpty", 
                   "rollupStandard", "rollupOldSyntax", "groupingSetExpression", 
                   "groupingSetExpressionMultiple", "groupingExpressionSingle", 
                   "havingClause", "qualifyClause", "havingCondition", "expressionsInParenthesis", 
                   "expressionsNotInParenthesis", "expressionPart", "expressionOrDefault", 
                   "firstExpressionsWithAlias", "expressionWithAlias", "expressions", 
                   "columnRefOrderInParenthesis", "columnRefOrderNotInParenthesis", 
                   "orderByClause", "clusterByClause", "partitionByClause", 
                   "distributeByClause", "sortByClause", "trimFunction", 
                   "function_", "null_treatment", "functionName", "castExpression", 
                   "caseExpression", "whenExpression", "floorExpression", 
                   "floorDateQualifiers", "extractExpression", "timeQualifiers", 
                   "constant", "prepareStmtParam", "parameterIdx", "stringLiteralSequence", 
                   "charSetStringLiteral", "dateLiteral", "timestampLiteral", 
                   "timestampLocalTZLiteral", "intervalValue", "intervalLiteral", 
                   "intervalExpression", "intervalQualifiers", "expression", 
                   "atomExpression", "precedenceFieldExpression", "precedenceUnaryOperator", 
                   "precedenceUnaryPrefixExpression", "precedenceBitwiseXorOperator", 
                   "precedenceBitwiseXorExpression", "precedenceStarOperator", 
                   "precedenceStarExpression", "precedencePlusOperator", 
                   "precedencePlusExpression", "precedenceConcatenateOperator", 
                   "precedenceConcatenateExpression", "precedenceAmpersandOperator", 
                   "precedenceAmpersandExpression", "precedenceBitwiseOrOperator", 
                   "precedenceBitwiseOrExpression", "precedenceRegexpOperator", 
                   "precedenceSimilarOperator", "subQueryExpression", "precedenceSimilarExpression", 
                   "precedenceSimilarExpressionMain", "precedenceSimilarExpressionPart", 
                   "precedenceSimilarExpressionAtom", "precedenceSimilarExpressionQuantifierPredicate", 
                   "quantifierType", "precedenceSimilarExpressionIn", "precedenceSimilarExpressionPartNot", 
                   "precedenceDistinctOperator", "precedenceEqualOperator", 
                   "precedenceEqualExpression", "isCondition", "precedenceUnarySuffixExpression", 
                   "precedenceNotOperator", "precedenceNotExpression", "precedenceAndOperator", 
                   "precedenceAndExpression", "precedenceOrOperator", "precedenceOrExpression", 
                   "booleanValue", "booleanValueTok", "tableOrPartition", 
                   "partitionSpec", "partitionVal", "partitionSelectorSpec", 
                   "partitionSelectorVal", "partitionSelectorOperator", 
                   "subQuerySelectorOperator", "sysFuncNames", "descFuncNames", 
                   "id_", "functionIdentifier", "principalIdentifier", "nonReserved", 
                   "sql11ReservedKeywordsUsedAsFunctionName", "hint", "hintList", 
                   "hintItem", "hintName", "hintArgs", "hintArgName", "prepareStatement", 
                   "executeStatement", "executeParamList", "resourcePlanDdlStatements", 
                   "rpAssign", "rpAssignList", "rpUnassign", "rpUnassignList", 
                   "createResourcePlanStatement", "withReplace", "activate", 
                   "enable", "disable", "unmanaged", "alterResourcePlanStatement", 
                   "globalWmStatement", "replaceResourcePlanStatement", 
                   "dropResourcePlanStatement", "poolPath", "triggerExpression", 
                   "triggerExpressionStandalone", "triggerOrExpression", 
                   "triggerAndExpression", "triggerAtomExpression", "triggerLiteral", 
                   "comparisionOperator", "triggerActionExpression", "triggerActionExpressionStandalone", 
                   "createTriggerStatement", "alterTriggerStatement", "dropTriggerStatement", 
                   "poolAssign", "poolAssignList", "createPoolStatement", 
                   "alterPoolStatement", "dropPoolStatement", "createMappingStatement", 
                   "alterMappingStatement", "dropMappingStatement" ]

    EOF = Token.EOF
    KW_ABORT=1
    KW_ACTIVATE=2
    KW_ACTIVE=3
    KW_ADD=4
    KW_ADMIN=5
    KW_AFTER=6
    KW_ALL=7
    KW_ALLOC_FRACTION=8
    KW_ALTER=9
    KW_ANALYZE=10
    KW_AND=11
    KW_ANTI=12
    KW_ANY=13
    KW_APPLICATION=14
    KW_ARCHIVE=15
    KW_ARRAY=16
    KW_AS=17
    KW_ASC=18
    KW_AST=19
    KW_AT=20
    KW_AUTHORIZATION=21
    KW_AUTOCOMMIT=22
    KW_BATCH=23
    KW_BEFORE=24
    KW_BETWEEN=25
    KW_BIGINT=26
    KW_BINARY=27
    KW_BOOLEAN=28
    KW_BOTH=29
    KW_BUCKET=30
    KW_BUCKETS=31
    KW_BY=32
    KW_CACHE=33
    KW_CASCADE=34
    KW_CASE=35
    KW_CAST=36
    KW_CBO=37
    KW_CHANGE=38
    KW_CHAR=39
    KW_CHECK=40
    KW_CLUSTER=41
    KW_CLUSTERED=42
    KW_CLUSTERSTATUS=43
    KW_COLLECTION=44
    KW_COLUMN=45
    KW_COLUMNS=46
    KW_COMMENT=47
    KW_COMMIT=48
    KW_COMPACT=49
    KW_COMPACTIONS=50
    KW_COMPACT_ID=51
    KW_COMPUTE=52
    KW_CONCATENATE=53
    KW_CONF=54
    KW_CONSTRAINT=55
    KW_CONTINUE=56
    KW_COST=57
    KW_CREATE=58
    KW_CRON=59
    KW_CROSS=60
    KW_CUBE=61
    KW_CURRENT=62
    KW_CURRENT_DATE=63
    KW_CURRENT_TIMESTAMP=64
    KW_CURSOR=65
    KW_DATA=66
    KW_DATABASE=67
    KW_DATABASES=68
    KW_DATACONNECTOR=69
    KW_DATACONNECTORS=70
    KW_DATE=71
    KW_DATETIME=72
    KW_DAY=73
    KW_DAYOFWEEK=74
    KW_DBPROPERTIES=75
    KW_DCPROPERTIES=76
    KW_DDL=77
    KW_DEBUG=78
    KW_DECIMAL=79
    KW_DEFAULT=80
    KW_DEFERRED=81
    KW_DEFINED=82
    KW_DELETE=83
    KW_DELIMITED=84
    KW_DEPENDENCY=85
    KW_DESC=86
    KW_DESCRIBE=87
    KW_DETAIL=88
    KW_DIRECTORIES=89
    KW_DIRECTORY=90
    KW_DISABLE=91
    KW_DISTINCT=92
    KW_DISTRIBUTE=93
    KW_DISTRIBUTED=94
    KW_DO=95
    KW_DOUBLE=96
    KW_DOW=97
    KW_DROP=98
    KW_DUMP=99
    KW_ELEM_TYPE=100
    KW_ELSE=101
    KW_ENABLE=102
    KW_END=103
    KW_ENFORCED=104
    KW_ESCAPED=105
    KW_EVERY=106
    KW_EXCEPT=107
    KW_EXCHANGE=108
    KW_EXCLUSIVE=109
    KW_EXECUTE=110
    KW_EXECUTED=111
    KW_EXISTS=112
    KW_EXPIRE_SNAPSHOTS=113
    KW_EXPLAIN=114
    KW_EXPORT=115
    KW_EXPRESSION=116
    KW_EXTENDED=117
    KW_EXTERNAL=118
    KW_EXTRACT=119
    KW_FALSE=120
    KW_FETCH=121
    KW_FIELDS=122
    KW_FILE=123
    KW_FILEFORMAT=124
    KW_FIRST=125
    KW_FLOAT=126
    KW_FLOOR=127
    KW_FOLLOWING=128
    KW_FOR=129
    KW_FORCE=130
    KW_FOREIGN=131
    KW_FORMAT=132
    KW_FORMATTED=133
    KW_FROM=134
    KW_FULL=135
    KW_FUNCTION=136
    KW_FUNCTIONS=137
    KW_GRANT=138
    KW_GROUP=139
    KW_GROUPING=140
    KW_HAVING=141
    KW_HOLD_DDLTIME=142
    KW_HOUR=143
    KW_IDXPROPERTIES=144
    KW_IF=145
    KW_IGNORE=146
    KW_IMPORT=147
    KW_IN=148
    KW_INDEX=149
    KW_INDEXES=150
    KW_INNER=151
    KW_INPATH=152
    KW_INPUTDRIVER=153
    KW_INPUTFORMAT=154
    KW_INSERT=155
    KW_INT=156
    KW_INTERSECT=157
    KW_INTERVAL=158
    KW_INTO=159
    KW_IS=160
    KW_ISOLATION=161
    KW_ITEMS=162
    KW_JAR=163
    KW_JOIN=164
    KW_JOINCOST=165
    KW_KEY=166
    KW_KEYS=167
    KW_KEY_TYPE=168
    KW_KILL=169
    KW_LAST=170
    KW_LATERAL=171
    KW_LEADING=172
    KW_LEFT=173
    KW_LESS=174
    KW_LEVEL=175
    KW_LIKE=176
    KW_LIMIT=177
    KW_LINES=178
    KW_LOAD=179
    KW_LOCAL=180
    KW_LOCATION=181
    KW_LOCK=182
    KW_LOCKS=183
    KW_LOGICAL=184
    KW_LONG=185
    KW_MACRO=186
    KW_MANAGED=187
    KW_MANAGEDLOCATION=188
    KW_MANAGEMENT=189
    KW_MAP=190
    KW_MAPJOIN=191
    KW_MAPPING=192
    KW_MATCHED=193
    KW_MATERIALIZED=194
    KW_MERGE=195
    KW_METADATA=196
    KW_MINUS=197
    KW_MINUTE=198
    KW_MONTH=199
    KW_MORE=200
    KW_MOVE=201
    KW_MSCK=202
    KW_NONE=203
    KW_NORELY=204
    KW_NOSCAN=205
    KW_NOT=206
    KW_NOVALIDATE=207
    KW_NO_DROP=208
    KW_NULL=209
    KW_NULLS=210
    KW_OF=211
    KW_OFFLINE=212
    KW_OFFSET=213
    KW_ON=214
    KW_ONLY=215
    KW_OPERATOR=216
    KW_OPTION=217
    KW_OR=218
    KW_ORDER=219
    KW_OUT=220
    KW_OUTER=221
    KW_OUTPUTDRIVER=222
    KW_OUTPUTFORMAT=223
    KW_OVER=224
    KW_OVERWRITE=225
    KW_OWNER=226
    KW_PARTITION=227
    KW_PARTITIONED=228
    KW_PARTITIONS=229
    KW_PATH=230
    KW_PERCENT=231
    KW_PKFK_JOIN=232
    KW_PLAN=233
    KW_PLANS=234
    KW_PLUS=235
    KW_POOL=236
    KW_PRECEDING=237
    KW_PRECISION=238
    KW_PREPARE=239
    KW_PRESERVE=240
    KW_PRIMARY=241
    KW_PRINCIPALS=242
    KW_PROCEDURE=243
    KW_PROTECTION=244
    KW_PURGE=245
    KW_QUALIFY=246
    KW_QUARTER=247
    KW_QUERY=248
    KW_QUERY_PARALLELISM=249
    KW_RANGE=250
    KW_READ=251
    KW_READONLY=252
    KW_READS=253
    KW_REAL=254
    KW_REBUILD=255
    KW_RECORDREADER=256
    KW_RECORDWRITER=257
    KW_REDUCE=258
    KW_REFERENCES=259
    KW_REGEXP=260
    KW_RELOAD=261
    KW_RELY=262
    KW_REMOTE=263
    KW_RENAME=264
    KW_REOPTIMIZATION=265
    KW_REPAIR=266
    KW_REPL=267
    KW_REPLACE=268
    KW_REPLICATION=269
    KW_RESOURCE=270
    KW_RESPECT=271
    KW_RESTRICT=272
    KW_REVOKE=273
    KW_REWRITE=274
    KW_RIGHT=275
    KW_RLIKE=276
    KW_ROLE=277
    KW_ROLES=278
    KW_ROLLBACK=279
    KW_ROLLUP=280
    KW_ROW=281
    KW_ROWS=282
    KW_SCHEDULED=283
    KW_SCHEDULING_POLICY=284
    KW_SCHEMA=285
    KW_SCHEMAS=286
    KW_SECOND=287
    KW_SELECT=288
    KW_SEMI=289
    KW_SERDE=290
    KW_SERDEPROPERTIES=291
    KW_SERVER=292
    KW_SET=293
    KW_SETS=294
    KW_SET_CURRENT_SNAPSHOT=295
    KW_SHARED=296
    KW_SHOW=297
    KW_SHOW_DATABASE=298
    KW_SKEWED=299
    KW_SMALLINT=300
    KW_SNAPSHOT=301
    KW_SOME=302
    KW_SORT=303
    KW_SORTED=304
    KW_SPEC=305
    KW_SSL=306
    KW_START=307
    KW_STATISTICS=308
    KW_STATUS=309
    KW_STORED=310
    KW_STREAMTABLE=311
    KW_STRING=312
    KW_STRUCT=313
    KW_SUMMARY=314
    KW_SYNC=315
    KW_SYSTEM_TIME=316
    KW_SYSTEM_VERSION=317
    KW_TABLE=318
    KW_TABLES=319
    KW_TABLESAMPLE=320
    KW_TBLPROPERTIES=321
    KW_TEMPORARY=322
    KW_TERMINATED=323
    KW_THEN=324
    KW_TIME=325
    KW_TIMESTAMP=326
    KW_TIMESTAMPLOCALTZ=327
    KW_TIMESTAMPTZ=328
    KW_TINYINT=329
    KW_TO=330
    KW_TOUCH=331
    KW_TRAILING=332
    KW_TRANSACTION=333
    KW_TRANSACTIONAL=334
    KW_TRANSACTIONS=335
    KW_TRANSFORM=336
    KW_TRIGGER=337
    KW_TRIM=338
    KW_TRUE=339
    KW_TRUNCATE=340
    KW_TYPE=341
    KW_UNARCHIVE=342
    KW_UNBOUNDED=343
    KW_UNDO=344
    KW_UNION=345
    KW_UNIONTYPE=346
    KW_UNIQUE=347
    KW_UNIQUEJOIN=348
    KW_UNKNOWN=349
    KW_UNLOCK=350
    KW_UNMANAGED=351
    KW_UNSET=352
    KW_UNSIGNED=353
    KW_UPDATE=354
    KW_URI=355
    KW_URL=356
    KW_USE=357
    KW_USER=358
    KW_USING=359
    KW_UTC=360
    KW_UTCTIMESTAMP=361
    KW_VALIDATE=362
    KW_VALUES=363
    KW_VALUE_TYPE=364
    KW_VARCHAR=365
    KW_VECTORIZATION=366
    KW_VIEW=367
    KW_VIEWS=368
    KW_WAIT=369
    KW_WEEK=370
    KW_WHEN=371
    KW_WHERE=372
    KW_WHILE=373
    KW_WINDOW=374
    KW_WITH=375
    KW_WITHIN=376
    KW_WORK=377
    KW_WORKLOAD=378
    KW_WRITE=379
    KW_YEAR=380
    KW_ZONE=381
    DOT=382
    COLON=383
    COMMA=384
    SEMICOLON=385
    LPAREN=386
    RPAREN=387
    LSQUARE=388
    RSQUARE=389
    LCURLY=390
    RCURLY=391
    EQUAL=392
    EQUAL_NS=393
    NOTEQUAL=394
    LESSTHANOREQUALTO=395
    LESSTHAN=396
    GREATERTHANOREQUALTO=397
    GREATERTHAN=398
    DIVIDE=399
    PLUS=400
    MINUS=401
    STAR=402
    MOD=403
    DIV=404
    AMPERSAND=405
    TILDE=406
    BITWISEOR=407
    CONCATENATE=408
    BITWISEXOR=409
    QUESTION=410
    DOLLAR=411
    StringLiteral=412
    CharSetLiteral=413
    IntegralLiteral=414
    NumberLiteral=415
    ByteLengthLiteral=416
    Number=417
    Identifier=418
    CharSetName=419
    WHITE_SPACE=420
    LINE_COMMENT=421
    QUERY_HINT=422
    SHOW_HINT=423
    HIDDEN_HINT=424

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HiveParser.EOF, 0)

        def explainStatement(self):
            return self.getTypedRuleContext(HiveParser.ExplainStatementContext,0)


        def execStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = HiveParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.state = 996
                self.explainStatement()
                pass
            elif token in [1, 9, 10, 48, 58, 83, 86, 87, 91, 98, 102, 110, 115, 134, 138, 147, 155, 169, 179, 182, 190, 195, 202, 239, 258, 261, 267, 268, 273, 279, 288, 293, 297, 307, 340, 350, 354, 357, 363, 375, 386]:
                self.state = 997
                self.execStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1000
            self.match(HiveParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXPLAIN(self):
            return self.getToken(HiveParser.KW_EXPLAIN, 0)

        def execStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecStatementContext,0)


        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExplainOptionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_explainStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainStatement" ):
                listener.enterExplainStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainStatement" ):
                listener.exitExplainStatement(self)




    def explainStatement(self):

        localctx = HiveParser.ExplainStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_explainStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(HiveParser.KW_EXPLAIN)
            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 9, 10, 19, 21, 37, 48, 58, 77, 78, 83, 85, 86, 87, 91, 98, 102, 110, 115, 117, 133, 134, 138, 147, 155, 169, 179, 182, 183, 184, 190, 195, 202, 239, 258, 261, 265, 267, 268, 273, 279, 288, 293, 297, 307, 340, 350, 354, 357, 363, 366, 375, 386]:
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1003
                        self.explainOption() 
                    self.state = 1008
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                self.state = 1009
                self.execStatement()
                pass
            elif token in [274]:
                self.state = 1010
                self.match(HiveParser.KW_REWRITE)
                self.state = 1011
                self.queryStatementExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def KW_DEPENDENCY(self):
            return self.getToken(HiveParser.KW_DEPENDENCY, 0)

        def KW_CBO(self):
            return self.getToken(HiveParser.KW_CBO, 0)

        def KW_COST(self):
            return self.getToken(HiveParser.KW_COST, 0)

        def KW_JOINCOST(self):
            return self.getToken(HiveParser.KW_JOINCOST, 0)

        def KW_LOGICAL(self):
            return self.getToken(HiveParser.KW_LOGICAL, 0)

        def KW_AUTHORIZATION(self):
            return self.getToken(HiveParser.KW_AUTHORIZATION, 0)

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_REOPTIMIZATION(self):
            return self.getToken(HiveParser.KW_REOPTIMIZATION, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def KW_AST(self):
            return self.getToken(HiveParser.KW_AST, 0)

        def KW_VECTORIZATION(self):
            return self.getToken(HiveParser.KW_VECTORIZATION, 0)

        def vectorizationOnly(self):
            return self.getTypedRuleContext(HiveParser.VectorizationOnlyContext,0)


        def vectorizatonDetail(self):
            return self.getTypedRuleContext(HiveParser.VectorizatonDetailContext,0)


        def KW_DEBUG(self):
            return self.getToken(HiveParser.KW_DEBUG, 0)

        def KW_DDL(self):
            return self.getToken(HiveParser.KW_DDL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_explainOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOption" ):
                listener.enterExplainOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOption" ):
                listener.exitExplainOption(self)




    def explainOption(self):

        localctx = HiveParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.match(HiveParser.KW_EXTENDED)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(HiveParser.KW_FORMATTED)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1016
                self.match(HiveParser.KW_DEPENDENCY)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1017
                self.match(HiveParser.KW_CBO)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or _la==165:
                    self.state = 1018
                    _la = self._input.LA(1)
                    if not(_la==57 or _la==165):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1021
                self.match(HiveParser.KW_LOGICAL)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1022
                self.match(HiveParser.KW_AUTHORIZATION)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1023
                self.match(HiveParser.KW_ANALYZE)
                pass
            elif token in [265]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1024
                self.match(HiveParser.KW_REOPTIMIZATION)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1025
                self.match(HiveParser.KW_LOCKS)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1026
                self.match(HiveParser.KW_AST)
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1027
                self.match(HiveParser.KW_VECTORIZATION)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==215:
                    self.state = 1028
                    self.vectorizationOnly()


                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==116 or _la==216 or _la==314:
                    self.state = 1031
                    self.vectorizatonDetail()


                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1034
                self.match(HiveParser.KW_DEBUG)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1035
                self.match(HiveParser.KW_DDL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorizationOnlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ONLY(self):
            return self.getToken(HiveParser.KW_ONLY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_vectorizationOnly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorizationOnly" ):
                listener.enterVectorizationOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorizationOnly" ):
                listener.exitVectorizationOnly(self)




    def vectorizationOnly(self):

        localctx = HiveParser.VectorizationOnlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_vectorizationOnly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(HiveParser.KW_ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorizatonDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SUMMARY(self):
            return self.getToken(HiveParser.KW_SUMMARY, 0)

        def KW_OPERATOR(self):
            return self.getToken(HiveParser.KW_OPERATOR, 0)

        def KW_EXPRESSION(self):
            return self.getToken(HiveParser.KW_EXPRESSION, 0)

        def KW_DETAIL(self):
            return self.getToken(HiveParser.KW_DETAIL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_vectorizatonDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorizatonDetail" ):
                listener.enterVectorizatonDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorizatonDetail" ):
                listener.exitVectorizatonDetail(self)




    def vectorizatonDetail(self):

        localctx = HiveParser.VectorizatonDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_vectorizatonDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            _la = self._input.LA(1)
            if not(_la==88 or _la==116 or _la==216 or _la==314):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(HiveParser.LoadStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(HiveParser.ExportStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(HiveParser.ImportStatementContext,0)


        def replDumpStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplDumpStatementContext,0)


        def replLoadStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplLoadStatementContext,0)


        def replStatusStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplStatusStatementContext,0)


        def ddlStatement(self):
            return self.getTypedRuleContext(HiveParser.DdlStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(HiveParser.DeleteStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(HiveParser.UpdateStatementContext,0)


        def sqlTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.SqlTransactionStatementContext,0)


        def mergeStatement(self):
            return self.getTypedRuleContext(HiveParser.MergeStatementContext,0)


        def prepareStatement(self):
            return self.getTypedRuleContext(HiveParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecuteStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_execStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecStatement" ):
                listener.enterExecStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecStatement" ):
                listener.exitExecStatement(self)




    def execStatement(self):

        localctx = HiveParser.ExecStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_execStatement)
        try:
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.queryStatementExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.loadStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.exportStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1045
                self.importStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1046
                self.replDumpStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1047
                self.replLoadStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1048
                self.replStatusStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1049
                self.ddlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1050
                self.deleteStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1051
                self.updateStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1052
                self.sqlTransactionStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1053
                self.mergeStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1054
                self.prepareStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1055
                self.executeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_DATA(self):
            return self.getToken(HiveParser.KW_DATA, 0)

        def KW_INPATH(self):
            return self.getToken(HiveParser.KW_INPATH, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def inputFileFormat(self):
            return self.getTypedRuleContext(HiveParser.InputFileFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)




    def loadStatement(self):

        localctx = HiveParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(HiveParser.KW_LOAD)
            self.state = 1059
            self.match(HiveParser.KW_DATA)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==180:
                self.state = 1060
                self.match(HiveParser.KW_LOCAL)


            self.state = 1063
            self.match(HiveParser.KW_INPATH)
            self.state = 1064
            self.match(HiveParser.StringLiteral)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225:
                self.state = 1065
                self.match(HiveParser.KW_OVERWRITE)


            self.state = 1068
            self.match(HiveParser.KW_INTO)
            self.state = 1069
            self.match(HiveParser.KW_TABLE)
            self.state = 1070
            self.tableOrPartition()
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 1071
                self.inputFileFormat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_REPLICATION(self):
            return self.getToken(HiveParser.KW_REPLICATION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replicationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationClause" ):
                listener.enterReplicationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationClause" ):
                listener.exitReplicationClause(self)




    def replicationClause(self):

        localctx = HiveParser.ReplicationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(HiveParser.KW_FOR)
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==196:
                self.state = 1075
                self.match(HiveParser.KW_METADATA)


            self.state = 1078
            self.match(HiveParser.KW_REPLICATION)
            self.state = 1079
            self.match(HiveParser.LPAREN)
            self.state = 1080
            self.match(HiveParser.StringLiteral)
            self.state = 1081
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXPORT(self):
            return self.getToken(HiveParser.KW_EXPORT, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_exportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStatement" ):
                listener.enterExportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStatement" ):
                listener.exitExportStatement(self)




    def exportStatement(self):

        localctx = HiveParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(HiveParser.KW_EXPORT)
            self.state = 1084
            self.match(HiveParser.KW_TABLE)
            self.state = 1085
            self.tableOrPartition()
            self.state = 1086
            self.match(HiveParser.KW_TO)
            self.state = 1087
            self.match(HiveParser.StringLiteral)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1088
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token

        def KW_IMPORT(self):
            return self.getToken(HiveParser.KW_IMPORT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def KW_EXTERNAL(self):
            return self.getToken(HiveParser.KW_EXTERNAL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = HiveParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(HiveParser.KW_IMPORT)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118 or _la==318:
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1092
                    self.match(HiveParser.KW_EXTERNAL)


                self.state = 1095
                self.match(HiveParser.KW_TABLE)
                self.state = 1096
                self.tableOrPartition()


            self.state = 1099
            self.match(HiveParser.KW_FROM)
            self.state = 1100
            localctx.path = self.match(HiveParser.StringLiteral)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 1101
                self.tableLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplDumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbPolicy = None # ReplDbPolicyContext
            self.oldDbPolicy = None # ReplDbPolicyContext
            self.replConf = None # ReplConfigsContext

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_DUMP(self):
            return self.getToken(HiveParser.KW_DUMP, 0)

        def replDbPolicy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ReplDbPolicyContext)
            else:
                return self.getTypedRuleContext(HiveParser.ReplDbPolicyContext,i)


        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_replDumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplDumpStatement" ):
                listener.enterReplDumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplDumpStatement" ):
                listener.exitReplDumpStatement(self)




    def replDumpStatement(self):

        localctx = HiveParser.ReplDumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_replDumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(HiveParser.KW_REPL)
            self.state = 1105
            self.match(HiveParser.KW_DUMP)
            self.state = 1106
            localctx.dbPolicy = self.replDbPolicy()
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 1107
                self.match(HiveParser.KW_REPLACE)
                self.state = 1108
                localctx.oldDbPolicy = self.replDbPolicy()


            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 1111
                self.match(HiveParser.KW_WITH)
                self.state = 1112
                localctx.replConf = self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplDbPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context
            self.tablePolicy = None # ReplTableLevelPolicyContext

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def replTableLevelPolicy(self):
            return self.getTypedRuleContext(HiveParser.ReplTableLevelPolicyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_replDbPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplDbPolicy" ):
                listener.enterReplDbPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplDbPolicy" ):
                listener.exitReplDbPolicy(self)




    def replDbPolicy(self):

        localctx = HiveParser.ReplDbPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_replDbPolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            localctx.dbName = self.id_()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==382:
                self.state = 1116
                self.match(HiveParser.DOT)
                self.state = 1117
                localctx.tablePolicy = self.replTableLevelPolicy()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sourceDbPolicy = None # ReplDbPolicyContext
            self.dbName = None # Id_Context
            self.replConf = None # ReplConfigsContext

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def replDbPolicy(self):
            return self.getTypedRuleContext(HiveParser.ReplDbPolicyContext,0)


        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_replLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplLoadStatement" ):
                listener.enterReplLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplLoadStatement" ):
                listener.exitReplLoadStatement(self)




    def replLoadStatement(self):

        localctx = HiveParser.ReplLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_replLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(HiveParser.KW_REPL)
            self.state = 1121
            self.match(HiveParser.KW_LOAD)
            self.state = 1122
            localctx.sourceDbPolicy = self.replDbPolicy()
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1123
                self.match(HiveParser.KW_INTO)
                self.state = 1124
                localctx.dbName = self.id_()


            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 1127
                self.match(HiveParser.KW_WITH)
                self.state = 1128
                localctx.replConf = self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplConfigsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def replConfigsList(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replConfigs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplConfigs" ):
                listener.enterReplConfigs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplConfigs" ):
                listener.exitReplConfigs(self)




    def replConfigs(self):

        localctx = HiveParser.ReplConfigsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_replConfigs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(HiveParser.LPAREN)
            self.state = 1132
            self.replConfigsList()
            self.state = 1133
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplConfigsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_replConfigsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplConfigsList" ):
                listener.enterReplConfigsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplConfigsList" ):
                listener.exitReplConfigsList(self)




    def replConfigsList(self):

        localctx = HiveParser.ReplConfigsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_replConfigsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.keyValueProperty()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1136
                self.match(HiveParser.COMMA)
                self.state = 1137
                self.keyValueProperty()
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplTableLevelPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.replTablesIncludeList = None # Token
            self.replTablesExcludeList = None # Token

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replTableLevelPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplTableLevelPolicy" ):
                listener.enterReplTableLevelPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplTableLevelPolicy" ):
                listener.exitReplTableLevelPolicy(self)




    def replTableLevelPolicy(self):

        localctx = HiveParser.ReplTableLevelPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_replTableLevelPolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            localctx.replTablesIncludeList = self.match(HiveParser.StringLiteral)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==382:
                self.state = 1144
                self.match(HiveParser.DOT)
                self.state = 1145
                localctx.replTablesExcludeList = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context
            self.replConf = None # ReplConfigsContext

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_replStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplStatusStatement" ):
                listener.enterReplStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplStatusStatement" ):
                listener.exitReplStatusStatement(self)




    def replStatusStatement(self):

        localctx = HiveParser.ReplStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_replStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(HiveParser.KW_REPL)
            self.state = 1149
            self.match(HiveParser.KW_STATUS)
            self.state = 1150
            localctx.dbName = self.id_()
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 1151
                self.match(HiveParser.KW_WITH)
                self.state = 1152
                localctx.replConf = self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateDatabaseStatementContext,0)


        def switchDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.SwitchDatabaseStatementContext,0)


        def dropDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.DropDatabaseStatementContext,0)


        def createTableStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateTableStatementContext,0)


        def dropTableStatement(self):
            return self.getTypedRuleContext(HiveParser.DropTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(HiveParser.TruncateTableStatementContext,0)


        def alterStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementContext,0)


        def descStatement(self):
            return self.getTypedRuleContext(HiveParser.DescStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(HiveParser.ShowStatementContext,0)


        def metastoreCheck(self):
            return self.getTypedRuleContext(HiveParser.MetastoreCheckContext,0)


        def createViewStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateViewStatementContext,0)


        def createMaterializedViewStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMaterializedViewStatementContext,0)


        def createScheduledQueryStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateScheduledQueryStatementContext,0)


        def alterScheduledQueryStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterScheduledQueryStatementContext,0)


        def dropScheduledQueryStatement(self):
            return self.getTypedRuleContext(HiveParser.DropScheduledQueryStatementContext,0)


        def dropViewStatement(self):
            return self.getTypedRuleContext(HiveParser.DropViewStatementContext,0)


        def dropMaterializedViewStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMaterializedViewStatementContext,0)


        def createFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateFunctionStatementContext,0)


        def createMacroStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMacroStatementContext,0)


        def dropFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.DropFunctionStatementContext,0)


        def reloadFunctionsStatement(self):
            return self.getTypedRuleContext(HiveParser.ReloadFunctionsStatementContext,0)


        def dropMacroStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMacroStatementContext,0)


        def analyzeStatement(self):
            return self.getTypedRuleContext(HiveParser.AnalyzeStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(HiveParser.LockStatementContext,0)


        def unlockStatement(self):
            return self.getTypedRuleContext(HiveParser.UnlockStatementContext,0)


        def lockDatabase(self):
            return self.getTypedRuleContext(HiveParser.LockDatabaseContext,0)


        def unlockDatabase(self):
            return self.getTypedRuleContext(HiveParser.UnlockDatabaseContext,0)


        def createRoleStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateRoleStatementContext,0)


        def dropRoleStatement(self):
            return self.getTypedRuleContext(HiveParser.DropRoleStatementContext,0)


        def grantPrivileges(self):
            return self.getTypedRuleContext(HiveParser.GrantPrivilegesContext,0)


        def revokePrivileges(self):
            return self.getTypedRuleContext(HiveParser.RevokePrivilegesContext,0)


        def showGrants(self):
            return self.getTypedRuleContext(HiveParser.ShowGrantsContext,0)


        def showRoleGrants(self):
            return self.getTypedRuleContext(HiveParser.ShowRoleGrantsContext,0)


        def showRolePrincipals(self):
            return self.getTypedRuleContext(HiveParser.ShowRolePrincipalsContext,0)


        def showRoles(self):
            return self.getTypedRuleContext(HiveParser.ShowRolesContext,0)


        def grantRole(self):
            return self.getTypedRuleContext(HiveParser.GrantRoleContext,0)


        def revokeRole(self):
            return self.getTypedRuleContext(HiveParser.RevokeRoleContext,0)


        def setRole(self):
            return self.getTypedRuleContext(HiveParser.SetRoleContext,0)


        def showCurrentRole(self):
            return self.getTypedRuleContext(HiveParser.ShowCurrentRoleContext,0)


        def abortTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.AbortTransactionStatementContext,0)


        def abortCompactionStatement(self):
            return self.getTypedRuleContext(HiveParser.AbortCompactionStatementContext,0)


        def killQueryStatement(self):
            return self.getTypedRuleContext(HiveParser.KillQueryStatementContext,0)


        def resourcePlanDdlStatements(self):
            return self.getTypedRuleContext(HiveParser.ResourcePlanDdlStatementsContext,0)


        def createDataConnectorStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateDataConnectorStatementContext,0)


        def dropDataConnectorStatement(self):
            return self.getTypedRuleContext(HiveParser.DropDataConnectorStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = HiveParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ddlStatement)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.createDatabaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                self.switchDatabaseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1157
                self.dropDatabaseStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1158
                self.createTableStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1159
                self.dropTableStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1160
                self.truncateTableStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1161
                self.alterStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1162
                self.descStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1163
                self.showStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1164
                self.metastoreCheck()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1165
                self.createViewStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1166
                self.createMaterializedViewStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1167
                self.createScheduledQueryStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1168
                self.alterScheduledQueryStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1169
                self.dropScheduledQueryStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1170
                self.dropViewStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1171
                self.dropMaterializedViewStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1172
                self.createFunctionStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1173
                self.createMacroStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1174
                self.dropFunctionStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1175
                self.reloadFunctionsStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1176
                self.dropMacroStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1177
                self.analyzeStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1178
                self.lockStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1179
                self.unlockStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1180
                self.lockDatabase()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1181
                self.unlockDatabase()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1182
                self.createRoleStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1183
                self.dropRoleStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1184
                self.grantPrivileges()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1185
                self.revokePrivileges()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1186
                self.showGrants()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1187
                self.showRoleGrants()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1188
                self.showRolePrincipals()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1189
                self.showRoles()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1190
                self.grantRole()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1191
                self.revokeRole()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1192
                self.setRole()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1193
                self.showCurrentRole()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1194
                self.abortTransactionStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1195
                self.abortCompactionStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1196
                self.killQueryStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1197
                self.resourcePlanDdlStatements()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1198
                self.createDataConnectorStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1199
                self.dropDataConnectorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = HiveParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.match(HiveParser.KW_IF)
            self.state = 1203
            self.match(HiveParser.KW_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictOrCascadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RESTRICT(self):
            return self.getToken(HiveParser.KW_RESTRICT, 0)

        def KW_CASCADE(self):
            return self.getToken(HiveParser.KW_CASCADE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_restrictOrCascade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictOrCascade" ):
                listener.enterRestrictOrCascade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictOrCascade" ):
                listener.exitRestrictOrCascade(self)




    def restrictOrCascade(self):

        localctx = HiveParser.RestrictOrCascadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restrictOrCascade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            _la = self._input.LA(1)
            if not(_la==34 or _la==272):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = HiveParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(HiveParser.KW_IF)
            self.state = 1208
            self.match(HiveParser.KW_NOT)
            self.state = 1209
            self.match(HiveParser.KW_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FORCE(self):
            return self.getToken(HiveParser.KW_FORCE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_force

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForce" ):
                listener.enterForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForce" ):
                listener.exitForce(self)




    def force(self):

        localctx = HiveParser.ForceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_force)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(HiveParser.KW_FORCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteEnabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rewriteEnabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteEnabled" ):
                listener.enterRewriteEnabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteEnabled" ):
                listener.exitRewriteEnabled(self)




    def rewriteEnabled(self):

        localctx = HiveParser.RewriteEnabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rewriteEnabled)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(HiveParser.KW_ENABLE)
            self.state = 1214
            self.match(HiveParser.KW_REWRITE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rewriteDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDisabled" ):
                listener.enterRewriteDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDisabled" ):
                listener.exitRewriteDisabled(self)




    def rewriteDisabled(self):

        localctx = HiveParser.RewriteDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rewriteDisabled)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(HiveParser.KW_DISABLE)
            self.state = 1217
            self.match(HiveParser.KW_REWRITE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StoredAsDirsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_DIRECTORIES(self):
            return self.getToken(HiveParser.KW_DIRECTORIES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_storedAsDirs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoredAsDirs" ):
                listener.enterStoredAsDirs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoredAsDirs" ):
                listener.exitStoredAsDirs(self)




    def storedAsDirs(self):

        localctx = HiveParser.StoredAsDirsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_storedAsDirs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(HiveParser.KW_STORED)
            self.state = 1220
            self.match(HiveParser.KW_AS)
            self.state = 1221
            self.match(HiveParser.KW_DIRECTORIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orReplace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrReplace" ):
                listener.enterOrReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrReplace" ):
                listener.exitOrReplace(self)




    def orReplace(self):

        localctx = HiveParser.OrReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_orReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(HiveParser.KW_OR)
            self.state = 1224
            self.match(HiveParser.KW_REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context
            self.dbprops = None # DbPropertiesContext

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def databaseComment(self):
            return self.getTypedRuleContext(HiveParser.DatabaseCommentContext,0)


        def dbLocation(self):
            return self.getTypedRuleContext(HiveParser.DbLocationContext,0)


        def dbManagedLocation(self):
            return self.getTypedRuleContext(HiveParser.DbManagedLocationContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def dbProperties(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesContext,0)


        def KW_REMOTE(self):
            return self.getToken(HiveParser.KW_REMOTE, 0)

        def dbConnectorName(self):
            return self.getTypedRuleContext(HiveParser.DbConnectorNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseStatement" ):
                listener.enterCreateDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseStatement" ):
                listener.exitCreateDatabaseStatement(self)




    def createDatabaseStatement(self):

        localctx = HiveParser.CreateDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_createDatabaseStatement)
        self._la = 0 # Token type
        try:
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self.match(HiveParser.KW_CREATE)
                self.state = 1227
                self.db_schema()
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 1228
                    self.ifNotExists()


                self.state = 1231
                localctx.name = self.id_()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 1232
                    self.databaseComment()


                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==181:
                    self.state = 1235
                    self.dbLocation()


                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 1238
                    self.dbManagedLocation()


                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==375:
                    self.state = 1241
                    self.match(HiveParser.KW_WITH)
                    self.state = 1242
                    self.match(HiveParser.KW_DBPROPERTIES)
                    self.state = 1243
                    localctx.dbprops = self.dbProperties()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self.match(HiveParser.KW_CREATE)
                self.state = 1247
                self.match(HiveParser.KW_REMOTE)
                self.state = 1248
                self.db_schema()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 1249
                    self.ifNotExists()


                self.state = 1252
                localctx.name = self.id_()
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 1253
                    self.databaseComment()


                self.state = 1256
                self.dbConnectorName()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==375:
                    self.state = 1257
                    self.match(HiveParser.KW_WITH)
                    self.state = 1258
                    self.match(HiveParser.KW_DBPROPERTIES)
                    self.state = 1259
                    localctx.dbprops = self.dbProperties()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.locn = None # Token

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbLocation" ):
                listener.enterDbLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbLocation" ):
                listener.exitDbLocation(self)




    def dbLocation(self):

        localctx = HiveParser.DbLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dbLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(HiveParser.KW_LOCATION)
            self.state = 1265
            localctx.locn = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbManagedLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.locn = None # Token

        def KW_MANAGEDLOCATION(self):
            return self.getToken(HiveParser.KW_MANAGEDLOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbManagedLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbManagedLocation" ):
                listener.enterDbManagedLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbManagedLocation" ):
                listener.exitDbManagedLocation(self)




    def dbManagedLocation(self):

        localctx = HiveParser.DbManagedLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dbManagedLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(HiveParser.KW_MANAGEDLOCATION)
            self.state = 1268
            localctx.locn = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def dbPropertiesList(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbProperties" ):
                listener.enterDbProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbProperties" ):
                listener.exitDbProperties(self)




    def dbProperties(self):

        localctx = HiveParser.DbPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dbProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(HiveParser.LPAREN)
            self.state = 1271
            self.dbPropertiesList()
            self.state = 1272
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbPropertiesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_dbPropertiesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbPropertiesList" ):
                listener.enterDbPropertiesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbPropertiesList" ):
                listener.exitDbPropertiesList(self)




    def dbPropertiesList(self):

        localctx = HiveParser.DbPropertiesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dbPropertiesList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.keyValueProperty()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1275
                self.match(HiveParser.COMMA)
                self.state = 1276
                self.keyValueProperty()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbConnectorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dcName = None # Id_Context

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dbConnectorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbConnectorName" ):
                listener.enterDbConnectorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbConnectorName" ):
                listener.exitDbConnectorName(self)




    def dbConnectorName(self):

        localctx = HiveParser.DbConnectorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dbConnectorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(HiveParser.KW_USING)
            self.state = 1283
            localctx.dcName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USE(self):
            return self.getToken(HiveParser.KW_USE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_switchDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchDatabaseStatement" ):
                listener.enterSwitchDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchDatabaseStatement" ):
                listener.exitSwitchDatabaseStatement(self)




    def switchDatabaseStatement(self):

        localctx = HiveParser.SwitchDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_switchDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(HiveParser.KW_USE)
            self.state = 1286
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabaseStatement" ):
                listener.enterDropDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabaseStatement" ):
                listener.exitDropDatabaseStatement(self)




    def dropDatabaseStatement(self):

        localctx = HiveParser.DropDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dropDatabaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(HiveParser.KW_DROP)
            self.state = 1289
            self.db_schema()
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1290
                self.ifExists()


            self.state = 1293
            self.id_()
            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==272:
                self.state = 1294
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.comment = None # Token

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_databaseComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabaseComment" ):
                listener.enterDatabaseComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabaseComment" ):
                listener.exitDatabaseComment(self)




    def databaseComment(self):

        localctx = HiveParser.DatabaseCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_databaseComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(HiveParser.KW_COMMENT)
            self.state = 1298
            localctx.comment = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUNCATE(self):
            return self.getToken(HiveParser.KW_TRUNCATE, 0)

        def tablePartitionPrefix(self):
            return self.getTypedRuleContext(HiveParser.TablePartitionPrefixContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def force(self):
            return self.getTypedRuleContext(HiveParser.ForceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_truncateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTableStatement" ):
                listener.enterTruncateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTableStatement" ):
                listener.exitTruncateTableStatement(self)




    def truncateTableStatement(self):

        localctx = HiveParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_truncateTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(HiveParser.KW_TRUNCATE)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==318:
                self.state = 1301
                self.match(HiveParser.KW_TABLE)


            self.state = 1304
            self.tablePartitionPrefix()
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 1305
                self.match(HiveParser.KW_COLUMNS)
                self.state = 1306
                self.match(HiveParser.LPAREN)
                self.state = 1307
                self.columnNameList()
                self.state = 1308
                self.match(HiveParser.RPAREN)


            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1312
                self.force()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableStatement" ):
                listener.enterDropTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableStatement" ):
                listener.exitDropTableStatement(self)




    def dropTableStatement(self):

        localctx = HiveParser.DropTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dropTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(HiveParser.KW_DROP)
            self.state = 1316
            self.match(HiveParser.KW_TABLE)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1317
                self.ifExists()


            self.state = 1320
            self.tableName()
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==245:
                self.state = 1321
                self.match(HiveParser.KW_PURGE)


            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1324
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inFmt = None # Token
            self.serdeCls = None # Token

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_inputFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputFileFormat" ):
                listener.enterInputFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputFileFormat" ):
                listener.exitInputFileFormat(self)




    def inputFileFormat(self):

        localctx = HiveParser.InputFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_inputFileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(HiveParser.KW_INPUTFORMAT)
            self.state = 1328
            localctx.inFmt = self.match(HiveParser.StringLiteral)
            self.state = 1329
            self.match(HiveParser.KW_SERDE)
            self.state = 1330
            localctx.serdeCls = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def KW_ELEM_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ELEM_TYPE)
            else:
                return self.getToken(HiveParser.KW_ELEM_TYPE, i)

        def KW_KEY_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_KEY_TYPE)
            else:
                return self.getToken(HiveParser.KW_KEY_TYPE, i)

        def KW_VALUE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_VALUE_TYPE)
            else:
                return self.getToken(HiveParser.KW_VALUE_TYPE, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tabTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabTypeExpr" ):
                listener.enterTabTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabTypeExpr" ):
                listener.exitTabTypeExpr(self)




    def tabTypeExpr(self):

        localctx = HiveParser.TabTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tabTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.id_()
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==382:
                self.state = 1333
                self.match(HiveParser.DOT)
                self.state = 1334
                self.id_()


            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 1337
                self.id_()
                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==382:
                    self.state = 1338
                    self.match(HiveParser.DOT)
                    self.state = 1343
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 1339
                        self.match(HiveParser.KW_ELEM_TYPE)
                        pass

                    elif la_ == 2:
                        self.state = 1340
                        self.match(HiveParser.KW_KEY_TYPE)
                        pass

                    elif la_ == 3:
                        self.state = 1341
                        self.match(HiveParser.KW_VALUE_TYPE)
                        pass

                    elif la_ == 4:
                        self.state = 1342
                        self.id_()
                        pass


                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tabTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.TabTypeExprContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartTypeExpr" ):
                listener.enterPartTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartTypeExpr" ):
                listener.exitPartTypeExpr(self)




    def partTypeExpr(self):

        localctx = HiveParser.PartTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_partTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.tabTypeExpr()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 1353
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabPartColTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def extColumnName(self):
            return self.getTypedRuleContext(HiveParser.ExtColumnNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tabPartColTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabPartColTypeExpr" ):
                listener.enterTabPartColTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabPartColTypeExpr" ):
                listener.exitTabPartColTypeExpr(self)




    def tabPartColTypeExpr(self):

        localctx = HiveParser.TabPartColTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tabPartColTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.tableName()
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 1357
                self.partitionSpec()


            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                self.state = 1360
                self.extColumnName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context
            self.dcName = None # Id_Context
            self.name = None # DescFuncNamesContext
            self.descOptions = None # Token
            self.parttype = None # TabPartColTypeExprContext

        def KW_DESCRIBE(self):
            return self.getToken(HiveParser.KW_DESCRIBE, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def KW_DATACONNECTOR(self):
            return self.getToken(HiveParser.KW_DATACONNECTOR, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def descFuncNames(self):
            return self.getTypedRuleContext(HiveParser.DescFuncNamesContext,0)


        def tabPartColTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.TabPartColTypeExprContext,0)


        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_descStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescStatement" ):
                listener.enterDescStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescStatement" ):
                listener.exitDescStatement(self)




    def descStatement(self):

        localctx = HiveParser.DescStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_descStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            _la = self._input.LA(1)
            if not(_la==86 or _la==87):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 1364
                self.db_schema()
                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1365
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1368
                localctx.dbName = self.id_()
                pass

            elif la_ == 2:
                self.state = 1370
                self.match(HiveParser.KW_DATACONNECTOR)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1371
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1374
                localctx.dcName = self.id_()
                pass

            elif la_ == 3:
                self.state = 1375
                self.match(HiveParser.KW_FUNCTION)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1376
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1379
                localctx.name = self.descFuncNames()
                pass

            elif la_ == 4:
                self.state = 1382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [133]:
                    self.state = 1380
                    localctx.descOptions = self.match(HiveParser.KW_FORMATTED)
                    pass
                elif token in [117]:
                    self.state = 1381
                    localctx.descOptions = self.match(HiveParser.KW_EXTENDED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1384
                localctx.parttype = self.tabPartColTypeExpr()
                pass

            elif la_ == 5:
                self.state = 1385
                localctx.parttype = self.tabPartColTypeExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parttype = None # TableOrPartitionContext
            self.noscan = None # Token
            self.statsColumnName = None # ColumnNameListContext

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_COMPUTE(self):
            return self.getToken(HiveParser.KW_COMPUTE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_CACHE(self):
            return self.getToken(HiveParser.KW_CACHE, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def KW_NOSCAN(self):
            return self.getToken(HiveParser.KW_NOSCAN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_analyzeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeStatement" ):
                listener.enterAnalyzeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeStatement" ):
                listener.exitAnalyzeStatement(self)




    def analyzeStatement(self):

        localctx = HiveParser.AnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_analyzeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(HiveParser.KW_ANALYZE)
            self.state = 1389
            self.match(HiveParser.KW_TABLE)
            self.state = 1390
            localctx.parttype = self.tableOrPartition()
            self.state = 1403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 1391
                self.match(HiveParser.KW_COMPUTE)
                self.state = 1392
                self.match(HiveParser.KW_STATISTICS)
                self.state = 1399
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 1393
                    localctx.noscan = self.match(HiveParser.KW_NOSCAN)
                    pass
                elif token in [129]:
                    self.state = 1394
                    self.match(HiveParser.KW_FOR)
                    self.state = 1395
                    self.match(HiveParser.KW_COLUMNS)
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                        self.state = 1396
                        localctx.statsColumnName = self.columnNameList()


                    pass
                elif token in [-1]:
                    pass
                else:
                    pass
                pass
            elif token in [33]:
                self.state = 1401
                self.match(HiveParser.KW_CACHE)
                self.state = 1402
                self.match(HiveParser.KW_METADATA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_from_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_in" ):
                listener.enterFrom_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_in" ):
                listener.exitFrom_in(self)




    def from_in(self):

        localctx = HiveParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_from_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            _la = self._input.LA(1)
            if not(_la==134 or _la==148):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_db_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_schema" ):
                listener.enterDb_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_schema" ):
                listener.exitDb_schema(self)




    def db_schema(self):

        localctx = HiveParser.Db_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_db_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            _la = self._input.LA(1)
            if not(_la==67 or _la==285):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.isExtended = None # Token
            self.db_name = None # Id_Context
            self.filter_ = None # ShowTablesFilterExprContext
            self.tabName = None # TableNameContext
            self.prptyName = None # Token
            self.dbName = None # Id_Context
            self.parttype = None # PartTypeExprContext
            self.rp_name = None # Id_Context

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_DATABASES(self):
            return self.getToken(HiveParser.KW_DATABASES, 0)

        def KW_SCHEMAS(self):
            return self.getToken(HiveParser.KW_SCHEMAS, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def showStmtIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowStmtIdentifierContext,0)


        def KW_TABLES(self):
            return self.getToken(HiveParser.KW_TABLES, 0)

        def from_in(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.From_inContext)
            else:
                return self.getTypedRuleContext(HiveParser.From_inContext,i)


        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def showTablesFilterExpr(self):
            return self.getTypedRuleContext(HiveParser.ShowTablesFilterExprContext,0)


        def KW_VIEWS(self):
            return self.getToken(HiveParser.KW_VIEWS, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def showFunctionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowFunctionIdentifierContext,0)


        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def partTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.PartTypeExprContext,0)


        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def compactionId(self):
            return self.getTypedRuleContext(HiveParser.CompactionIdContext,0)


        def compactionPool(self):
            return self.getTypedRuleContext(HiveParser.CompactionPoolContext,0)


        def compactionType(self):
            return self.getTypedRuleContext(HiveParser.CompactionTypeContext,0)


        def compactionStatus(self):
            return self.getTypedRuleContext(HiveParser.CompactionStatusContext,0)


        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def KW_CONF(self):
            return self.getToken(HiveParser.KW_CONF, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def KW_PLANS(self):
            return self.getToken(HiveParser.KW_PLANS, 0)

        def KW_DATACONNECTORS(self):
            return self.getToken(HiveParser.KW_DATACONNECTORS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)




    def showStatement(self):

        localctx = HiveParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 1590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1409
                self.match(HiveParser.KW_SHOW)
                self.state = 1410
                _la = self._input.LA(1)
                if not(_la==68 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 1411
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1412
                    self.showStmtIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.match(HiveParser.KW_SHOW)
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1416
                    localctx.isExtended = self.match(HiveParser.KW_EXTENDED)


                self.state = 1419
                self.match(HiveParser.KW_TABLES)
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134 or _la==148:
                    self.state = 1420
                    self.from_in()
                    self.state = 1421
                    localctx.db_name = self.id_()


                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916837536055581731) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17794321095156971) != 0) or _la==412 or _la==418:
                    self.state = 1425
                    localctx.filter_ = self.showTablesFilterExpr()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1428
                self.match(HiveParser.KW_SHOW)
                self.state = 1429
                self.match(HiveParser.KW_VIEWS)
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134 or _la==148:
                    self.state = 1430
                    self.from_in()
                    self.state = 1431
                    localctx.db_name = self.id_()


                self.state = 1438
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 1435
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1436
                    self.showStmtIdentifier()
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 412, 418]:
                    self.state = 1437
                    self.showStmtIdentifier()
                    pass
                elif token in [-1]:
                    pass
                else:
                    pass
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1440
                self.match(HiveParser.KW_SHOW)
                self.state = 1441
                self.match(HiveParser.KW_MATERIALIZED)
                self.state = 1442
                self.match(HiveParser.KW_VIEWS)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134 or _la==148:
                    self.state = 1443
                    self.from_in()
                    self.state = 1444
                    localctx.db_name = self.id_()


                self.state = 1451
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 1448
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1449
                    self.showStmtIdentifier()
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 412, 418]:
                    self.state = 1450
                    self.showStmtIdentifier()
                    pass
                elif token in [-1]:
                    pass
                else:
                    pass
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1453
                self.match(HiveParser.KW_SHOW)
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304:
                    self.state = 1454
                    self.match(HiveParser.KW_SORTED)


                self.state = 1457
                self.match(HiveParser.KW_COLUMNS)
                self.state = 1458
                self.from_in()
                self.state = 1459
                self.tableName()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134 or _la==148:
                    self.state = 1460
                    self.from_in()
                    self.state = 1461
                    localctx.db_name = self.id_()


                self.state = 1468
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 1465
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1466
                    self.showStmtIdentifier()
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 412, 418]:
                    self.state = 1467
                    self.showStmtIdentifier()
                    pass
                elif token in [-1]:
                    pass
                else:
                    pass
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1470
                self.match(HiveParser.KW_SHOW)
                self.state = 1471
                self.match(HiveParser.KW_FUNCTIONS)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 1472
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1473
                    self.showFunctionIdentifier()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1476
                self.match(HiveParser.KW_SHOW)
                self.state = 1477
                self.match(HiveParser.KW_PARTITIONS)
                self.state = 1478
                localctx.tabName = self.tableName()
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 1479
                    self.partitionSpec()


                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 1482
                    self.whereClause()


                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 1485
                    self.orderByClause()


                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 1488
                    self.limitClause()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1491
                self.match(HiveParser.KW_SHOW)
                self.state = 1492
                self.match(HiveParser.KW_CREATE)
                self.state = 1498
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [67, 285]:
                    self.state = 1493
                    self.db_schema()
                    self.state = 1494
                    localctx.db_name = self.id_()
                    pass
                elif token in [318]:
                    self.state = 1496
                    self.match(HiveParser.KW_TABLE)
                    self.state = 1497
                    localctx.tabName = self.tableName()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1500
                self.match(HiveParser.KW_SHOW)
                self.state = 1501
                self.match(HiveParser.KW_TABLE)
                self.state = 1502
                self.match(HiveParser.KW_EXTENDED)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134 or _la==148:
                    self.state = 1503
                    self.from_in()
                    self.state = 1504
                    localctx.db_name = self.id_()


                self.state = 1508
                self.match(HiveParser.KW_LIKE)
                self.state = 1509
                self.showStmtIdentifier()
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 1510
                    self.partitionSpec()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1513
                self.match(HiveParser.KW_SHOW)
                self.state = 1514
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1515
                self.tableName()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==386:
                    self.state = 1516
                    self.match(HiveParser.LPAREN)
                    self.state = 1517
                    localctx.prptyName = self.match(HiveParser.StringLiteral)
                    self.state = 1518
                    self.match(HiveParser.RPAREN)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1521
                self.match(HiveParser.KW_SHOW)
                self.state = 1522
                self.match(HiveParser.KW_LOCKS)
                self.state = 1534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 1523
                    self.db_schema()
                    self.state = 1524
                    localctx.dbName = self.id_()
                    self.state = 1526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==117:
                        self.state = 1525
                        localctx.isExtended = self.match(HiveParser.KW_EXTENDED)


                    pass

                elif la_ == 2:
                    self.state = 1529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                        self.state = 1528
                        localctx.parttype = self.partTypeExpr()


                    self.state = 1532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==117:
                        self.state = 1531
                        localctx.isExtended = self.match(HiveParser.KW_EXTENDED)


                    pass


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1536
                self.match(HiveParser.KW_SHOW)
                self.state = 1537
                self.match(HiveParser.KW_COMPACTIONS)
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 1538
                    self.compactionId()
                    pass

                elif la_ == 2:
                    self.state = 1539
                    self.db_schema()
                    self.state = 1540
                    localctx.dbName = self.id_()
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==236:
                        self.state = 1541
                        self.compactionPool()


                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==341:
                        self.state = 1544
                        self.compactionType()


                    self.state = 1548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 1547
                        self.compactionStatus()


                    self.state = 1551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==219:
                        self.state = 1550
                        self.orderByClause()


                    self.state = 1554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==177:
                        self.state = 1553
                        self.limitClause()


                    pass

                elif la_ == 3:
                    self.state = 1557
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        self.state = 1556
                        localctx.parttype = self.partTypeExpr()


                    self.state = 1560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==236:
                        self.state = 1559
                        self.compactionPool()


                    self.state = 1563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==341:
                        self.state = 1562
                        self.compactionType()


                    self.state = 1566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 1565
                        self.compactionStatus()


                    self.state = 1569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==219:
                        self.state = 1568
                        self.orderByClause()


                    self.state = 1572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==177:
                        self.state = 1571
                        self.limitClause()


                    pass


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1576
                self.match(HiveParser.KW_SHOW)
                self.state = 1577
                self.match(HiveParser.KW_TRANSACTIONS)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1578
                self.match(HiveParser.KW_SHOW)
                self.state = 1579
                self.match(HiveParser.KW_CONF)
                self.state = 1580
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1581
                self.match(HiveParser.KW_SHOW)
                self.state = 1582
                self.match(HiveParser.KW_RESOURCE)
                self.state = 1586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [233]:
                    self.state = 1583
                    self.match(HiveParser.KW_PLAN)
                    self.state = 1584
                    localctx.rp_name = self.id_()
                    pass
                elif token in [234]:
                    self.state = 1585
                    self.match(HiveParser.KW_PLANS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1588
                self.match(HiveParser.KW_SHOW)
                self.state = 1589
                self.match(HiveParser.KW_DATACONNECTORS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowTablesFilterExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHERE(self):
            return self.getToken(HiveParser.KW_WHERE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def showStmtIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowStmtIdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showTablesFilterExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTablesFilterExpr" ):
                listener.enterShowTablesFilterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTablesFilterExpr" ):
                listener.exitShowTablesFilterExpr(self)




    def showTablesFilterExpr(self):

        localctx = HiveParser.ShowTablesFilterExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_showTablesFilterExpr)
        try:
            self.state = 1600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [372]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1592
                self.match(HiveParser.KW_WHERE)
                self.state = 1593
                self.id_()
                self.state = 1594
                self.match(HiveParser.EQUAL)
                self.state = 1595
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1597
                self.match(HiveParser.KW_LIKE)
                self.state = 1598
                self.showStmtIdentifier()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 412, 418]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1599
                self.showStmtIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def lockMode(self):
            return self.getTypedRuleContext(HiveParser.LockModeContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)




    def lockStatement(self):

        localctx = HiveParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(HiveParser.KW_LOCK)
            self.state = 1603
            self.match(HiveParser.KW_TABLE)
            self.state = 1604
            self.tableName()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 1605
                self.partitionSpec()


            self.state = 1608
            self.lockMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def lockMode(self):
            return self.getTypedRuleContext(HiveParser.LockModeContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_lockDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockDatabase" ):
                listener.enterLockDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockDatabase" ):
                listener.exitLockDatabase(self)




    def lockDatabase(self):

        localctx = HiveParser.LockDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_lockDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(HiveParser.KW_LOCK)
            self.state = 1611
            self.db_schema()
            self.state = 1612
            localctx.dbName = self.id_()
            self.state = 1613
            self.lockMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHARED(self):
            return self.getToken(HiveParser.KW_SHARED, 0)

        def KW_EXCLUSIVE(self):
            return self.getToken(HiveParser.KW_EXCLUSIVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_lockMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockMode" ):
                listener.enterLockMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockMode" ):
                listener.exitLockMode(self)




    def lockMode(self):

        localctx = HiveParser.LockModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lockMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            _la = self._input.LA(1)
            if not(_la==109 or _la==296):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_unlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStatement" ):
                listener.enterUnlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStatement" ):
                listener.exitUnlockStatement(self)




    def unlockStatement(self):

        localctx = HiveParser.UnlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_unlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(HiveParser.KW_UNLOCK)
            self.state = 1618
            self.match(HiveParser.KW_TABLE)
            self.state = 1619
            self.tableName()
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 1620
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_unlockDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockDatabase" ):
                listener.enterUnlockDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockDatabase" ):
                listener.exitUnlockDatabase(self)




    def unlockDatabase(self):

        localctx = HiveParser.UnlockDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_unlockDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(HiveParser.KW_UNLOCK)
            self.state = 1624
            self.db_schema()
            self.state = 1625
            localctx.dbName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.roleName = None # Id_Context

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoleStatement" ):
                listener.enterCreateRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoleStatement" ):
                listener.exitCreateRoleStatement(self)




    def createRoleStatement(self):

        localctx = HiveParser.CreateRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_createRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.match(HiveParser.KW_CREATE)
            self.state = 1628
            self.match(HiveParser.KW_ROLE)
            self.state = 1629
            localctx.roleName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.roleName = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRoleStatement" ):
                listener.enterDropRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRoleStatement" ):
                listener.exitDropRoleStatement(self)




    def dropRoleStatement(self):

        localctx = HiveParser.DropRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dropRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(HiveParser.KW_DROP)
            self.state = 1632
            self.match(HiveParser.KW_ROLE)
            self.state = 1633
            localctx.roleName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privList = None # PrivilegeListContext

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def privilegeList(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeListContext,0)


        def privilegeObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeObjectContext,0)


        def withGrantOption(self):
            return self.getTypedRuleContext(HiveParser.WithGrantOptionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_grantPrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantPrivileges" ):
                listener.enterGrantPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantPrivileges" ):
                listener.exitGrantPrivileges(self)




    def grantPrivileges(self):

        localctx = HiveParser.GrantPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_grantPrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(HiveParser.KW_GRANT)
            self.state = 1636
            localctx.privList = self.privilegeList()
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 1637
                self.privilegeObject()


            self.state = 1640
            self.match(HiveParser.KW_TO)
            self.state = 1641
            self.principalSpecification()
            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 1642
                self.withGrantOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokePrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REVOKE(self):
            return self.getToken(HiveParser.KW_REVOKE, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeListContext,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def grantOptionFor(self):
            return self.getTypedRuleContext(HiveParser.GrantOptionForContext,0)


        def privilegeObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_revokePrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokePrivileges" ):
                listener.enterRevokePrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokePrivileges" ):
                listener.exitRevokePrivileges(self)




    def revokePrivileges(self):

        localctx = HiveParser.RevokePrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_revokePrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(HiveParser.KW_REVOKE)
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1646
                self.grantOptionFor()


            self.state = 1649
            self.privilegeList()
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 1650
                self.privilegeObject()


            self.state = 1653
            self.match(HiveParser.KW_FROM)
            self.state = 1654
            self.principalSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def withAdminOption(self):
            return self.getTypedRuleContext(HiveParser.WithAdminOptionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_grantRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRole" ):
                listener.enterGrantRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRole" ):
                listener.exitGrantRole(self)




    def grantRole(self):

        localctx = HiveParser.GrantRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_grantRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.match(HiveParser.KW_GRANT)
            self.state = 1658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1657
                self.match(HiveParser.KW_ROLE)


            self.state = 1660
            self.id_()
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1661
                self.match(HiveParser.COMMA)
                self.state = 1662
                self.id_()
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1668
            self.match(HiveParser.KW_TO)
            self.state = 1669
            self.principalSpecification()
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 1670
                self.withAdminOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REVOKE(self):
            return self.getToken(HiveParser.KW_REVOKE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def adminOptionFor(self):
            return self.getTypedRuleContext(HiveParser.AdminOptionForContext,0)


        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_revokeRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRole" ):
                listener.enterRevokeRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRole" ):
                listener.exitRevokeRole(self)




    def revokeRole(self):

        localctx = HiveParser.RevokeRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_revokeRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.match(HiveParser.KW_REVOKE)
            self.state = 1675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1674
                self.adminOptionFor()


            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1677
                self.match(HiveParser.KW_ROLE)


            self.state = 1680
            self.id_()
            self.state = 1685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1681
                self.match(HiveParser.COMMA)
                self.state = 1682
                self.id_()
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1688
            self.match(HiveParser.KW_FROM)
            self.state = 1689
            self.principalSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRoleGrantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showRoleGrants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)




    def showRoleGrants(self):

        localctx = HiveParser.ShowRoleGrantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_showRoleGrants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.match(HiveParser.KW_SHOW)
            self.state = 1692
            self.match(HiveParser.KW_ROLE)
            self.state = 1693
            self.match(HiveParser.KW_GRANT)
            self.state = 1694
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showRoles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)




    def showRoles(self):

        localctx = HiveParser.ShowRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_showRoles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.match(HiveParser.KW_SHOW)
            self.state = 1697
            self.match(HiveParser.KW_ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCurrentRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showCurrentRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentRole" ):
                listener.enterShowCurrentRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentRole" ):
                listener.exitShowCurrentRole(self)




    def showCurrentRole(self):

        localctx = HiveParser.ShowCurrentRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_showCurrentRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.match(HiveParser.KW_SHOW)
            self.state = 1700
            self.match(HiveParser.KW_CURRENT)
            self.state = 1701
            self.match(HiveParser.KW_ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_ = None # Token
            self.none = None # Token

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_NONE(self):
            return self.getToken(HiveParser.KW_NONE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)




    def setRole(self):

        localctx = HiveParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_setRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.match(HiveParser.KW_SET)
            self.state = 1704
            self.match(HiveParser.KW_ROLE)
            self.state = 1708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.state = 1705
                localctx.all_ = self.match(HiveParser.KW_ALL)
                pass
            elif token in [203]:
                self.state = 1706
                localctx.none = self.match(HiveParser.KW_NONE)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.state = 1707
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGrantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def privilegeIncludeColObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeIncludeColObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showGrants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)




    def showGrants(self):

        localctx = HiveParser.ShowGrantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_showGrants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.match(HiveParser.KW_SHOW)
            self.state = 1711
            self.match(HiveParser.KW_GRANT)
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139 or _la==277 or _la==358:
                self.state = 1712
                self.principalName()


            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 1715
                self.match(HiveParser.KW_ON)
                self.state = 1716
                self.privilegeIncludeColObject()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolePrincipalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.roleName = None # Id_Context

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_PRINCIPALS(self):
            return self.getToken(HiveParser.KW_PRINCIPALS, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showRolePrincipals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRolePrincipals" ):
                listener.enterShowRolePrincipals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRolePrincipals" ):
                listener.exitShowRolePrincipals(self)




    def showRolePrincipals(self):

        localctx = HiveParser.ShowRolePrincipalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_showRolePrincipals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(HiveParser.KW_SHOW)
            self.state = 1720
            self.match(HiveParser.KW_PRINCIPALS)
            self.state = 1721
            localctx.roleName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeIncludeColObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def privObjectCols(self):
            return self.getTypedRuleContext(HiveParser.PrivObjectColsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privilegeIncludeColObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeIncludeColObject" ):
                listener.enterPrivilegeIncludeColObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeIncludeColObject" ):
                listener.exitPrivilegeIncludeColObject(self)




    def privilegeIncludeColObject(self):

        localctx = HiveParser.PrivilegeIncludeColObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_privilegeIncludeColObject)
        try:
            self.state = 1725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1723
                self.match(HiveParser.KW_ALL)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 67, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1724
                self.privObjectCols()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def privObject(self):
            return self.getTypedRuleContext(HiveParser.PrivObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privilegeObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeObject" ):
                listener.enterPrivilegeObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeObject" ):
                listener.exitPrivilegeObject(self)




    def privilegeObject(self):

        localctx = HiveParser.PrivilegeObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_privilegeObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(HiveParser.KW_ON)
            self.state = 1728
            self.privObject()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObject" ):
                listener.enterPrivObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObject" ):
                listener.exitPrivObject(self)




    def privObject(self):

        localctx = HiveParser.PrivObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_privObject)
        self._la = 0 # Token type
        try:
            self.state = 1744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1730
                self.db_schema()
                self.state = 1731
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==318:
                    self.state = 1733
                    self.match(HiveParser.KW_TABLE)


                self.state = 1736
                self.tableName()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 1737
                    self.partitionSpec()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1740
                self.match(HiveParser.KW_URI)
                self.state = 1741
                localctx.path = self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1742
                self.match(HiveParser.KW_SERVER)
                self.state = 1743
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectColsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # ColumnNameListContext
            self.path = None # Token

        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privObjectCols

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObjectCols" ):
                listener.enterPrivObjectCols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObjectCols" ):
                listener.exitPrivObjectCols(self)




    def privObjectCols(self):

        localctx = HiveParser.PrivObjectColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_privObjectCols)
        self._la = 0 # Token type
        try:
            self.state = 1766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1746
                self.db_schema()
                self.state = 1747
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==318:
                    self.state = 1749
                    self.match(HiveParser.KW_TABLE)


                self.state = 1752
                self.tableName()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==386:
                    self.state = 1753
                    self.match(HiveParser.LPAREN)
                    self.state = 1754
                    localctx.cols = self.columnNameList()
                    self.state = 1755
                    self.match(HiveParser.RPAREN)


                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 1759
                    self.partitionSpec()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1762
                self.match(HiveParser.KW_URI)
                self.state = 1763
                localctx.path = self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1764
                self.match(HiveParser.KW_SERVER)
                self.state = 1765
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privlegeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrivlegeDefContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrivlegeDefContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = HiveParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_privilegeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.privlegeDef()
            self.state = 1773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1769
                self.match(HiveParser.COMMA)
                self.state = 1770
                self.privlegeDef()
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivlegeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # ColumnNameListContext

        def privilegeType(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeTypeContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privlegeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivlegeDef" ):
                listener.enterPrivlegeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivlegeDef" ):
                listener.exitPrivlegeDef(self)




    def privlegeDef(self):

        localctx = HiveParser.PrivlegeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_privlegeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.privilegeType()
            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 1777
                self.match(HiveParser.LPAREN)
                self.state = 1778
                localctx.cols = self.columnNameList()
                self.state = 1779
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_SELECT(self):
            return self.getToken(HiveParser.KW_SELECT, 0)

        def KW_SHOW_DATABASE(self):
            return self.getToken(HiveParser.KW_SHOW_DATABASE, 0)

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privilegeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeType" ):
                listener.enterPrivilegeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeType" ):
                listener.exitPrivilegeType(self)




    def privilegeType(self):

        localctx = HiveParser.PrivilegeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_privilegeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288230376151712384) != 0) or _la==83 or _la==98 or _la==155 or _la==182 or _la==288 or _la==298 or _la==354):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def principalName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrincipalNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrincipalNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_principalSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipalSpecification" ):
                listener.enterPrincipalSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipalSpecification" ):
                listener.exitPrincipalSpecification(self)




    def principalSpecification(self):

        localctx = HiveParser.PrincipalSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_principalSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.principalName()
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1786
                self.match(HiveParser.COMMA)
                self.state = 1787
                self.principalName()
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USER(self):
            return self.getToken(HiveParser.KW_USER, 0)

        def principalIdentifier(self):
            return self.getTypedRuleContext(HiveParser.PrincipalIdentifierContext,0)


        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_principalName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipalName" ):
                listener.enterPrincipalName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipalName" ):
                listener.exitPrincipalName(self)




    def principalName(self):

        localctx = HiveParser.PrincipalNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_principalName)
        try:
            self.state = 1799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [358]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1793
                self.match(HiveParser.KW_USER)
                self.state = 1794
                self.principalIdentifier()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.match(HiveParser.KW_GROUP)
                self.state = 1796
                self.principalIdentifier()
                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1797
                self.match(HiveParser.KW_ROLE)
                self.state = 1798
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithGrantOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withGrantOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithGrantOption" ):
                listener.enterWithGrantOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithGrantOption" ):
                listener.exitWithGrantOption(self)




    def withGrantOption(self):

        localctx = HiveParser.WithGrantOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_withGrantOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(HiveParser.KW_WITH)
            self.state = 1802
            self.match(HiveParser.KW_GRANT)
            self.state = 1803
            self.match(HiveParser.KW_OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_grantOptionFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOptionFor" ):
                listener.enterGrantOptionFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOptionFor" ):
                listener.exitGrantOptionFor(self)




    def grantOptionFor(self):

        localctx = HiveParser.GrantOptionForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_grantOptionFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(HiveParser.KW_GRANT)
            self.state = 1806
            self.match(HiveParser.KW_OPTION)
            self.state = 1807
            self.match(HiveParser.KW_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminOptionForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_adminOptionFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminOptionFor" ):
                listener.enterAdminOptionFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminOptionFor" ):
                listener.exitAdminOptionFor(self)




    def adminOptionFor(self):

        localctx = HiveParser.AdminOptionForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_adminOptionFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.match(HiveParser.KW_ADMIN)
            self.state = 1810
            self.match(HiveParser.KW_OPTION)
            self.state = 1811
            self.match(HiveParser.KW_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithAdminOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withAdminOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithAdminOption" ):
                listener.enterWithAdminOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithAdminOption" ):
                listener.exitWithAdminOption(self)




    def withAdminOption(self):

        localctx = HiveParser.WithAdminOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_withAdminOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(HiveParser.KW_WITH)
            self.state = 1814
            self.match(HiveParser.KW_ADMIN)
            self.state = 1815
            self.match(HiveParser.KW_OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetastoreCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.repair = None # Token
            self.opt = None # Token
            self.parts = None # Token

        def KW_MSCK(self):
            return self.getToken(HiveParser.KW_MSCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_REPAIR(self):
            return self.getToken(HiveParser.KW_REPAIR, 0)

        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_SYNC(self):
            return self.getToken(HiveParser.KW_SYNC, 0)

        def partitionSelectorSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSelectorSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_metastoreCheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetastoreCheck" ):
                listener.enterMetastoreCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetastoreCheck" ):
                listener.exitMetastoreCheck(self)




    def metastoreCheck(self):

        localctx = HiveParser.MetastoreCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_metastoreCheck)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817
            self.match(HiveParser.KW_MSCK)
            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==266:
                self.state = 1818
                localctx.repair = self.match(HiveParser.KW_REPAIR)


            self.state = 1821
            self.match(HiveParser.KW_TABLE)
            self.state = 1822
            self.tableName()
            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==98 or _la==315:
                self.state = 1823
                localctx.opt = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==4 or _la==98 or _la==315):
                    localctx.opt = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1824
                localctx.parts = self.match(HiveParser.KW_PARTITIONS)
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==386:
                    self.state = 1825
                    self.partitionSelectorSpec()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ResourceContext)
            else:
                return self.getTypedRuleContext(HiveParser.ResourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_resourceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceList" ):
                listener.enterResourceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceList" ):
                listener.exitResourceList(self)




    def resourceList(self):

        localctx = HiveParser.ResourceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_resourceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.resource()
            self.state = 1835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 1831
                self.match(HiveParser.COMMA)
                self.state = 1832
                self.resource()
                self.state = 1837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.resType = None # ResourceTypeContext
            self.resPath = None # Token

        def resourceType(self):
            return self.getTypedRuleContext(HiveParser.ResourceTypeContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = HiveParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            localctx.resType = self.resourceType()
            self.state = 1839
            localctx.resPath = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JAR(self):
            return self.getToken(HiveParser.KW_JAR, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_resourceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceType" ):
                listener.enterResourceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceType" ):
                listener.exitResourceType(self)




    def resourceType(self):

        localctx = HiveParser.ResourceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_resourceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            _la = self._input.LA(1)
            if not(_la==15 or _la==123 or _la==163):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.temp = None # Token
            self.rList = None # ResourceListContext

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def resourceList(self):
            return self.getTypedRuleContext(HiveParser.ResourceListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunctionStatement" ):
                listener.enterCreateFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunctionStatement" ):
                listener.exitCreateFunctionStatement(self)




    def createFunctionStatement(self):

        localctx = HiveParser.CreateFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_createFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.match(HiveParser.KW_CREATE)
            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322:
                self.state = 1844
                localctx.temp = self.match(HiveParser.KW_TEMPORARY)


            self.state = 1847
            self.match(HiveParser.KW_FUNCTION)
            self.state = 1848
            self.functionIdentifier()
            self.state = 1849
            self.match(HiveParser.KW_AS)
            self.state = 1850
            self.match(HiveParser.StringLiteral)
            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==359:
                self.state = 1851
                self.match(HiveParser.KW_USING)
                self.state = 1852
                localctx.rList = self.resourceList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.temp = None # Token

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dropFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunctionStatement" ):
                listener.enterDropFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunctionStatement" ):
                listener.exitDropFunctionStatement(self)




    def dropFunctionStatement(self):

        localctx = HiveParser.DropFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.match(HiveParser.KW_DROP)
            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322:
                self.state = 1856
                localctx.temp = self.match(HiveParser.KW_TEMPORARY)


            self.state = 1859
            self.match(HiveParser.KW_FUNCTION)
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1860
                self.ifExists()


            self.state = 1863
            self.functionIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReloadFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RELOAD(self):
            return self.getToken(HiveParser.KW_RELOAD, 0)

        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_reloadFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloadFunctionsStatement" ):
                listener.enterReloadFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloadFunctionsStatement" ):
                listener.exitReloadFunctionsStatement(self)




    def reloadFunctionsStatement(self):

        localctx = HiveParser.ReloadFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_reloadFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            self.match(HiveParser.KW_RELOAD)
            self.state = 1866
            _la = self._input.LA(1)
            if not(_la==136 or _la==137):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMacroStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_MACRO(self):
            return self.getToken(HiveParser.KW_MACRO, 0)

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createMacroStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMacroStatement" ):
                listener.enterCreateMacroStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMacroStatement" ):
                listener.exitCreateMacroStatement(self)




    def createMacroStatement(self):

        localctx = HiveParser.CreateMacroStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createMacroStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(HiveParser.KW_CREATE)
            self.state = 1869
            self.match(HiveParser.KW_TEMPORARY)
            self.state = 1870
            self.match(HiveParser.KW_MACRO)
            self.state = 1871
            self.match(HiveParser.Identifier)
            self.state = 1872
            self.match(HiveParser.LPAREN)
            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                self.state = 1873
                self.columnNameTypeList()


            self.state = 1876
            self.match(HiveParser.RPAREN)
            self.state = 1877
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMacroStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_MACRO(self):
            return self.getToken(HiveParser.KW_MACRO, 0)

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropMacroStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMacroStatement" ):
                listener.enterDropMacroStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMacroStatement" ):
                listener.exitDropMacroStatement(self)




    def dropMacroStatement(self):

        localctx = HiveParser.DropMacroStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dropMacroStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.match(HiveParser.KW_DROP)
            self.state = 1880
            self.match(HiveParser.KW_TEMPORARY)
            self.state = 1881
            self.match(HiveParser.KW_MACRO)
            self.state = 1883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1882
                self.ifExists()


            self.state = 1885
            self.match(HiveParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # TableNameContext

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def orReplace(self):
            return self.getTypedRuleContext(HiveParser.OrReplaceContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameCommentList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameCommentListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def viewPartition(self):
            return self.getTypedRuleContext(HiveParser.ViewPartitionContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateViewStatement" ):
                listener.enterCreateViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateViewStatement" ):
                listener.exitCreateViewStatement(self)




    def createViewStatement(self):

        localctx = HiveParser.CreateViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_createViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(HiveParser.KW_CREATE)
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1888
                self.orReplace()


            self.state = 1891
            self.match(HiveParser.KW_VIEW)
            self.state = 1893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1892
                self.ifNotExists()


            self.state = 1895
            localctx.name = self.tableName()
            self.state = 1900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 1896
                self.match(HiveParser.LPAREN)
                self.state = 1897
                self.columnNameCommentList()
                self.state = 1898
                self.match(HiveParser.RPAREN)


            self.state = 1903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1902
                self.tableComment()


            self.state = 1906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228:
                self.state = 1905
                self.viewPartition()


            self.state = 1909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==321:
                self.state = 1908
                self.tablePropertiesPrefixed()


            self.state = 1911
            self.match(HiveParser.KW_AS)
            self.state = 1912
            self.selectStatementWithCTE()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # PartitionTransformSpecContext

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def KW_SPEC(self):
            return self.getToken(HiveParser.KW_SPEC, 0)

        def partitionTransformSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionTransformSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_viewPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewPartition" ):
                listener.enterViewPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewPartition" ):
                listener.exitViewPartition(self)




    def viewPartition(self):

        localctx = HiveParser.ViewPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_viewPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(HiveParser.KW_PARTITIONED)
            self.state = 1915
            self.match(HiveParser.KW_ON)
            self.state = 1921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [386]:
                self.state = 1916
                self.match(HiveParser.LPAREN)
                self.state = 1917
                self.columnNameList()
                pass
            elif token in [305]:
                self.state = 1918
                self.match(HiveParser.KW_SPEC)
                self.state = 1919
                self.match(HiveParser.LPAREN)
                self.state = 1920
                localctx.spec = self.partitionTransformSpec()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1923
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viewClusterSpec(self):
            return self.getTypedRuleContext(HiveParser.ViewClusterSpecContext,0)


        def viewComplexSpec(self):
            return self.getTypedRuleContext(HiveParser.ViewComplexSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_viewOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewOrganization" ):
                listener.enterViewOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewOrganization" ):
                listener.exitViewOrganization(self)




    def viewOrganization(self):

        localctx = HiveParser.ViewOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_viewOrganization)
        try:
            self.state = 1927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.viewClusterSpec()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.viewComplexSpec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewClusterSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_viewClusterSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewClusterSpec" ):
                listener.enterViewClusterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewClusterSpec" ):
                listener.exitViewClusterSpec(self)




    def viewClusterSpec(self):

        localctx = HiveParser.ViewClusterSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_viewClusterSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(HiveParser.KW_CLUSTERED)
            self.state = 1930
            self.match(HiveParser.KW_ON)
            self.state = 1931
            self.match(HiveParser.LPAREN)
            self.state = 1932
            self.columnNameList()
            self.state = 1933
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewComplexSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viewDistSpec(self):
            return self.getTypedRuleContext(HiveParser.ViewDistSpecContext,0)


        def viewSortSpec(self):
            return self.getTypedRuleContext(HiveParser.ViewSortSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_viewComplexSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewComplexSpec" ):
                listener.enterViewComplexSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewComplexSpec" ):
                listener.exitViewComplexSpec(self)




    def viewComplexSpec(self):

        localctx = HiveParser.ViewComplexSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_viewComplexSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.viewDistSpec()
            self.state = 1936
            self.viewSortSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewDistSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colList = None # ColumnNameListContext

        def KW_DISTRIBUTED(self):
            return self.getToken(HiveParser.KW_DISTRIBUTED, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_viewDistSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewDistSpec" ):
                listener.enterViewDistSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewDistSpec" ):
                listener.exitViewDistSpec(self)




    def viewDistSpec(self):

        localctx = HiveParser.ViewDistSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_viewDistSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.match(HiveParser.KW_DISTRIBUTED)
            self.state = 1939
            self.match(HiveParser.KW_ON)
            self.state = 1940
            self.match(HiveParser.LPAREN)
            self.state = 1941
            localctx.colList = self.columnNameList()
            self.state = 1942
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSortSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colList = None # ColumnNameListContext

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_viewSortSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSortSpec" ):
                listener.enterViewSortSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSortSpec" ):
                listener.exitViewSortSpec(self)




    def viewSortSpec(self):

        localctx = HiveParser.ViewSortSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_viewSortSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            self.match(HiveParser.KW_SORTED)
            self.state = 1945
            self.match(HiveParser.KW_ON)
            self.state = 1946
            self.match(HiveParser.LPAREN)
            self.state = 1947
            localctx.colList = self.columnNameList()
            self.state = 1948
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def viewName(self):
            return self.getTypedRuleContext(HiveParser.ViewNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropViewStatement" ):
                listener.enterDropViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropViewStatement" ):
                listener.exitDropViewStatement(self)




    def dropViewStatement(self):

        localctx = HiveParser.DropViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dropViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.match(HiveParser.KW_DROP)
            self.state = 1951
            self.match(HiveParser.KW_VIEW)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1952
                self.ifExists()


            self.state = 1955
            self.viewName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # TableNameContext

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def rewriteDisabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteDisabledContext,0)


        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def viewPartition(self):
            return self.getTypedRuleContext(HiveParser.ViewPartitionContext,0)


        def viewOrganization(self):
            return self.getTypedRuleContext(HiveParser.ViewOrganizationContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedViewStatement" ):
                listener.enterCreateMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedViewStatement" ):
                listener.exitCreateMaterializedViewStatement(self)




    def createMaterializedViewStatement(self):

        localctx = HiveParser.CreateMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_createMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.match(HiveParser.KW_CREATE)
            self.state = 1958
            self.match(HiveParser.KW_MATERIALIZED)
            self.state = 1959
            self.match(HiveParser.KW_VIEW)
            self.state = 1961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1960
                self.ifNotExists()


            self.state = 1963
            localctx.name = self.tableName()
            self.state = 1965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1964
                self.rewriteDisabled()


            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1967
                self.tableComment()


            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228:
                self.state = 1970
                self.viewPartition()


            self.state = 1974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==94:
                self.state = 1973
                self.viewOrganization()


            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==281:
                self.state = 1976
                self.tableRowFormat()


            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==310:
                self.state = 1979
                self.tableFileFormat()


            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 1982
                self.tableLocation()


            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==321:
                self.state = 1985
                self.tablePropertiesPrefixed()


            self.state = 1988
            self.match(HiveParser.KW_AS)
            self.state = 1989
            self.selectStatementWithCTE()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def viewName(self):
            return self.getTypedRuleContext(HiveParser.ViewNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedViewStatement" ):
                listener.enterDropMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedViewStatement" ):
                listener.exitDropMaterializedViewStatement(self)




    def dropMaterializedViewStatement(self):

        localctx = HiveParser.DropMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dropMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.match(HiveParser.KW_DROP)
            self.state = 1992
            self.match(HiveParser.KW_MATERIALIZED)
            self.state = 1993
            self.match(HiveParser.KW_VIEW)
            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1994
                self.ifExists()


            self.state = 1997
            self.viewName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateScheduledQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_SCHEDULED(self):
            return self.getToken(HiveParser.KW_SCHEDULED, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def scheduleSpec(self):
            return self.getTypedRuleContext(HiveParser.ScheduleSpecContext,0)


        def definedAsSpec(self):
            return self.getTypedRuleContext(HiveParser.DefinedAsSpecContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def executedAsSpec(self):
            return self.getTypedRuleContext(HiveParser.ExecutedAsSpecContext,0)


        def enableSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableSpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createScheduledQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateScheduledQueryStatement" ):
                listener.enterCreateScheduledQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateScheduledQueryStatement" ):
                listener.exitCreateScheduledQueryStatement(self)




    def createScheduledQueryStatement(self):

        localctx = HiveParser.CreateScheduledQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_createScheduledQueryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(HiveParser.KW_CREATE)
            self.state = 2000
            self.match(HiveParser.KW_SCHEDULED)
            self.state = 2001
            self.match(HiveParser.KW_QUERY)
            self.state = 2002
            localctx.name = self.id_()
            self.state = 2003
            self.scheduleSpec()
            self.state = 2005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2004
                self.executedAsSpec()


            self.state = 2008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91 or _la==102:
                self.state = 2007
                self.enableSpecification()


            self.state = 2010
            self.definedAsSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropScheduledQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_SCHEDULED(self):
            return self.getToken(HiveParser.KW_SCHEDULED, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropScheduledQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropScheduledQueryStatement" ):
                listener.enterDropScheduledQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropScheduledQueryStatement" ):
                listener.exitDropScheduledQueryStatement(self)




    def dropScheduledQueryStatement(self):

        localctx = HiveParser.DropScheduledQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dropScheduledQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.match(HiveParser.KW_DROP)
            self.state = 2013
            self.match(HiveParser.KW_SCHEDULED)
            self.state = 2014
            self.match(HiveParser.KW_QUERY)
            self.state = 2015
            localctx.name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterScheduledQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context
            self.mod = None # AlterScheduledQueryChangeContext

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_SCHEDULED(self):
            return self.getToken(HiveParser.KW_SCHEDULED, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def alterScheduledQueryChange(self):
            return self.getTypedRuleContext(HiveParser.AlterScheduledQueryChangeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterScheduledQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterScheduledQueryStatement" ):
                listener.enterAlterScheduledQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterScheduledQueryStatement" ):
                listener.exitAlterScheduledQueryStatement(self)




    def alterScheduledQueryStatement(self):

        localctx = HiveParser.AlterScheduledQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_alterScheduledQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            self.match(HiveParser.KW_ALTER)
            self.state = 2018
            self.match(HiveParser.KW_SCHEDULED)
            self.state = 2019
            self.match(HiveParser.KW_QUERY)
            self.state = 2020
            localctx.name = self.id_()
            self.state = 2021
            localctx.mod = self.alterScheduledQueryChange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterScheduledQueryChangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheduleSpec(self):
            return self.getTypedRuleContext(HiveParser.ScheduleSpecContext,0)


        def executedAsSpec(self):
            return self.getTypedRuleContext(HiveParser.ExecutedAsSpecContext,0)


        def enableSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableSpecificationContext,0)


        def definedAsSpec(self):
            return self.getTypedRuleContext(HiveParser.DefinedAsSpecContext,0)


        def KW_EXECUTE(self):
            return self.getToken(HiveParser.KW_EXECUTE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterScheduledQueryChange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterScheduledQueryChange" ):
                listener.enterAlterScheduledQueryChange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterScheduledQueryChange" ):
                listener.exitAlterScheduledQueryChange(self)




    def alterScheduledQueryChange(self):

        localctx = HiveParser.AlterScheduledQueryChangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_alterScheduledQueryChange)
        try:
            self.state = 2028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2023
                self.scheduleSpec()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2024
                self.executedAsSpec()
                pass
            elif token in [91, 102]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2025
                self.enableSpecification()
                pass
            elif token in [17, 82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2026
                self.definedAsSpec()
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2027
                self.match(HiveParser.KW_EXECUTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cronString = None # Token
            self.value = None # Token
            self.qualifier = None # IntervalQualifiersContext
            self.offsetTs = None # Token

        def KW_CRON(self):
            return self.getToken(HiveParser.KW_CRON, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_EVERY(self):
            return self.getToken(HiveParser.KW_EVERY, 0)

        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_AT(self):
            return self.getToken(HiveParser.KW_AT, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_scheduleSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheduleSpec" ):
                listener.enterScheduleSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheduleSpec" ):
                listener.exitScheduleSpec(self)




    def scheduleSpec(self):

        localctx = HiveParser.ScheduleSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_scheduleSpec)
        self._la = 0 # Token type
        try:
            self.state = 2045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2030
                self.match(HiveParser.KW_CRON)
                self.state = 2031
                localctx.cronString = self.match(HiveParser.StringLiteral)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2032
                self.match(HiveParser.KW_EVERY)
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==417:
                    self.state = 2033
                    localctx.value = self.match(HiveParser.Number)


                self.state = 2036
                localctx.qualifier = self.intervalQualifiers()
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or _la==213:
                    self.state = 2040
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [20]:
                        self.state = 2037
                        self.match(HiveParser.KW_AT)
                        pass
                    elif token in [213]:
                        self.state = 2038
                        self.match(HiveParser.KW_OFFSET)
                        self.state = 2039
                        self.match(HiveParser.KW_BY)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2042
                    localctx.offsetTs = self.match(HiveParser.StringLiteral)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecutedAsSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.executedAs = None # Token

        def KW_EXECUTED(self):
            return self.getToken(HiveParser.KW_EXECUTED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_executedAsSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecutedAsSpec" ):
                listener.enterExecutedAsSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecutedAsSpec" ):
                listener.exitExecutedAsSpec(self)




    def executedAsSpec(self):

        localctx = HiveParser.ExecutedAsSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_executedAsSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self.match(HiveParser.KW_EXECUTED)
            self.state = 2048
            self.match(HiveParser.KW_AS)
            self.state = 2049
            localctx.executedAs = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinedAsSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def statement(self):
            return self.getTypedRuleContext(HiveParser.StatementContext,0)


        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_definedAsSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedAsSpec" ):
                listener.enterDefinedAsSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedAsSpec" ):
                listener.exitDefinedAsSpec(self)




    def definedAsSpec(self):

        localctx = HiveParser.DefinedAsSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_definedAsSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2051
                self.match(HiveParser.KW_DEFINED)


            self.state = 2054
            self.match(HiveParser.KW_AS)
            self.state = 2055
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctionIdentifier" ):
                listener.enterShowFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctionIdentifier" ):
                listener.exitShowFunctionIdentifier(self)




    def showFunctionIdentifier(self):

        localctx = HiveParser.ShowFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_showFunctionIdentifier)
        try:
            self.state = 2059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2057
                self.functionIdentifier()
                pass
            elif token in [412]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self.match(HiveParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStmtIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showStmtIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStmtIdentifier" ):
                listener.enterShowStmtIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStmtIdentifier" ):
                listener.exitShowStmtIdentifier(self)




    def showStmtIdentifier(self):

        localctx = HiveParser.ShowStmtIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_showStmtIdentifier)
        try:
            self.state = 2063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2061
                self.id_()
                pass
            elif token in [412]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2062
                self.match(HiveParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.comment = None # Token

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableComment" ):
                listener.enterTableComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableComment" ):
                listener.exitTableComment(self)




    def tableComment(self):

        localctx = HiveParser.TableCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tableComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(HiveParser.KW_COMMENT)
            self.state = 2066
            localctx.comment = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablePartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.opt1 = None # CreateTablePartitionColumnTypeSpecContext
            self.opt2 = None # CreateTablePartitionColumnSpecContext
            self.spec = None # PartitionTransformSpecContext

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_SPEC(self):
            return self.getToken(HiveParser.KW_SPEC, 0)

        def partitionTransformSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionTransformSpecContext,0)


        def createTablePartitionColumnTypeSpec(self):
            return self.getTypedRuleContext(HiveParser.CreateTablePartitionColumnTypeSpecContext,0)


        def createTablePartitionColumnSpec(self):
            return self.getTypedRuleContext(HiveParser.CreateTablePartitionColumnSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createTablePartitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablePartitionSpec" ):
                listener.enterCreateTablePartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablePartitionSpec" ):
                listener.exitCreateTablePartitionSpec(self)




    def createTablePartitionSpec(self):

        localctx = HiveParser.CreateTablePartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_createTablePartitionSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.match(HiveParser.KW_PARTITIONED)
            self.state = 2069
            self.match(HiveParser.KW_BY)
            self.state = 2078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [386]:
                self.state = 2070
                self.match(HiveParser.LPAREN)
                self.state = 2073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 2071
                    localctx.opt1 = self.createTablePartitionColumnTypeSpec()
                    pass

                elif la_ == 2:
                    self.state = 2072
                    localctx.opt2 = self.createTablePartitionColumnSpec()
                    pass


                pass
            elif token in [305]:
                self.state = 2075
                self.match(HiveParser.KW_SPEC)
                self.state = 2076
                self.match(HiveParser.LPAREN)
                self.state = 2077
                localctx.spec = self.partitionTransformSpec()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2080
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablePartitionColumnTypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameTypeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeConstraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_createTablePartitionColumnTypeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablePartitionColumnTypeSpec" ):
                listener.enterCreateTablePartitionColumnTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablePartitionColumnTypeSpec" ):
                listener.exitCreateTablePartitionColumnTypeSpec(self)




    def createTablePartitionColumnTypeSpec(self):

        localctx = HiveParser.CreateTablePartitionColumnTypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_createTablePartitionColumnTypeSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self.columnNameTypeConstraint()
            self.state = 2087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2083
                self.match(HiveParser.COMMA)
                self.state = 2084
                self.columnNameTypeConstraint()
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablePartitionColumnSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_createTablePartitionColumnSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablePartitionColumnSpec" ):
                listener.enterCreateTablePartitionColumnSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablePartitionColumnSpec" ):
                listener.exitCreateTablePartitionColumnSpec(self)




    def createTablePartitionColumnSpec(self):

        localctx = HiveParser.CreateTablePartitionColumnSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_createTablePartitionColumnSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            self.columnName()
            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2091
                self.match(HiveParser.COMMA)
                self.state = 2092
                self.columnName()
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTransformSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameTransformConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTransformConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTransformConstraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionTransformSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTransformSpec" ):
                listener.enterPartitionTransformSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTransformSpec" ):
                listener.exitPartitionTransformSpec(self)




    def partitionTransformSpec(self):

        localctx = HiveParser.PartitionTransformSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_partitionTransformSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.columnNameTransformConstraint()
            self.state = 2103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2099
                self.match(HiveParser.COMMA)
                self.state = 2100
                self.columnNameTransformConstraint()
                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTransformConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionTransformType(self):
            return self.getTypedRuleContext(HiveParser.PartitionTransformTypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTransformConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTransformConstraint" ):
                listener.enterColumnNameTransformConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTransformConstraint" ):
                listener.exitColumnNameTransformConstraint(self)




    def columnNameTransformConstraint(self):

        localctx = HiveParser.ColumnNameTransformConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_columnNameTransformConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.partitionTransformType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTransformTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_TRUNCATE(self):
            return self.getToken(HiveParser.KW_TRUNCATE, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionTransformType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTransformType" ):
                listener.enterPartitionTransformType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTransformType" ):
                listener.exitPartitionTransformType(self)




    def partitionTransformType(self):

        localctx = HiveParser.PartitionTransformTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_partitionTransformType)
        self._la = 0 # Token type
        try:
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self.columnName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                _la = self._input.LA(1)
                if not(_la==73 or _la==143 or _la==199 or _la==380):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2110
                self.match(HiveParser.LPAREN)
                self.state = 2111
                self.columnName()
                self.state = 2112
                self.match(HiveParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2114
                _la = self._input.LA(1)
                if not(_la==30 or _la==340):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2115
                self.match(HiveParser.LPAREN)
                self.state = 2116
                localctx.value = self.match(HiveParser.Number)
                self.state = 2117
                self.match(HiveParser.COMMA)
                self.state = 2118
                self.columnName()
                self.state = 2119
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBucketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bucketCols = None # ColumnNameListContext
            self.sortCols = None # ColumnNameOrderListContext
            self.num = None # Token

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_BY(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_BY)
            else:
                return self.getToken(HiveParser.KW_BY, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def columnNameOrderList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameOrderListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableBuckets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBuckets" ):
                listener.enterTableBuckets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBuckets" ):
                listener.exitTableBuckets(self)




    def tableBuckets(self):

        localctx = HiveParser.TableBucketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_tableBuckets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(HiveParser.KW_CLUSTERED)
            self.state = 2124
            self.match(HiveParser.KW_BY)
            self.state = 2125
            self.match(HiveParser.LPAREN)
            self.state = 2126
            localctx.bucketCols = self.columnNameList()
            self.state = 2127
            self.match(HiveParser.RPAREN)
            self.state = 2134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==304:
                self.state = 2128
                self.match(HiveParser.KW_SORTED)
                self.state = 2129
                self.match(HiveParser.KW_BY)
                self.state = 2130
                self.match(HiveParser.LPAREN)
                self.state = 2131
                localctx.sortCols = self.columnNameOrderList()
                self.state = 2132
                self.match(HiveParser.RPAREN)


            self.state = 2136
            self.match(HiveParser.KW_INTO)
            self.state = 2137
            localctx.num = self.match(HiveParser.Number)
            self.state = 2138
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableImplBucketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.num = None # Token

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableImplBuckets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableImplBuckets" ):
                listener.enterTableImplBuckets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableImplBuckets" ):
                listener.exitTableImplBuckets(self)




    def tableImplBuckets(self):

        localctx = HiveParser.TableImplBucketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_tableImplBuckets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.match(HiveParser.KW_CLUSTERED)
            self.state = 2141
            self.match(HiveParser.KW_INTO)
            self.state = 2142
            localctx.num = self.match(HiveParser.Number)
            self.state = 2143
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSkewedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.skewedCols = None # ColumnNameListContext
            self.skewedValues = None # SkewedValueElementContext

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def skewedValueElement(self):
            return self.getTypedRuleContext(HiveParser.SkewedValueElementContext,0)


        def storedAsDirs(self):
            return self.getTypedRuleContext(HiveParser.StoredAsDirsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableSkewed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSkewed" ):
                listener.enterTableSkewed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSkewed" ):
                listener.exitTableSkewed(self)




    def tableSkewed(self):

        localctx = HiveParser.TableSkewedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tableSkewed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.match(HiveParser.KW_SKEWED)
            self.state = 2146
            self.match(HiveParser.KW_BY)
            self.state = 2147
            self.match(HiveParser.LPAREN)
            self.state = 2148
            localctx.skewedCols = self.columnNameList()
            self.state = 2149
            self.match(HiveParser.RPAREN)
            self.state = 2150
            self.match(HiveParser.KW_ON)
            self.state = 2151
            self.match(HiveParser.LPAREN)
            self.state = 2152
            localctx.skewedValues = self.skewedValueElement()
            self.state = 2153
            self.match(HiveParser.RPAREN)
            self.state = 2155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2154
                self.storedAsDirs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowFormatSerde(self):
            return self.getTypedRuleContext(HiveParser.RowFormatSerdeContext,0)


        def rowFormatDelimited(self):
            return self.getTypedRuleContext(HiveParser.RowFormatDelimitedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormat" ):
                listener.enterRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormat" ):
                listener.exitRowFormat(self)




    def rowFormat(self):

        localctx = HiveParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_rowFormat)
        try:
            self.state = 2159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2157
                self.rowFormatSerde()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.rowFormatDelimited()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordReaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RECORDREADER(self):
            return self.getToken(HiveParser.KW_RECORDREADER, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_recordReader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordReader" ):
                listener.enterRecordReader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordReader" ):
                listener.exitRecordReader(self)




    def recordReader(self):

        localctx = HiveParser.RecordReaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_recordReader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self.match(HiveParser.KW_RECORDREADER)
            self.state = 2162
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordWriterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RECORDWRITER(self):
            return self.getToken(HiveParser.KW_RECORDWRITER, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_recordWriter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordWriter" ):
                listener.enterRecordWriter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordWriter" ):
                listener.exitRecordWriter(self)




    def recordWriter(self):

        localctx = HiveParser.RecordWriterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_recordWriter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.match(HiveParser.KW_RECORDWRITER)
            self.state = 2165
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatSerdeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.serdeprops = None # TablePropertiesContext

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormatSerde

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)




    def rowFormatSerde(self):

        localctx = HiveParser.RowFormatSerdeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_rowFormatSerde)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.match(HiveParser.KW_ROW)
            self.state = 2168
            self.match(HiveParser.KW_FORMAT)
            self.state = 2169
            self.match(HiveParser.KW_SERDE)
            self.state = 2170
            localctx.name = self.match(HiveParser.StringLiteral)
            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 2171
                self.match(HiveParser.KW_WITH)
                self.state = 2172
                self.match(HiveParser.KW_SERDEPROPERTIES)
                self.state = 2173
                localctx.serdeprops = self.tableProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatDelimitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_DELIMITED(self):
            return self.getToken(HiveParser.KW_DELIMITED, 0)

        def tableRowFormatFieldIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatFieldIdentifierContext,0)


        def tableRowFormatCollItemsIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatCollItemsIdentifierContext,0)


        def tableRowFormatMapKeysIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatMapKeysIdentifierContext,0)


        def tableRowFormatLinesIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatLinesIdentifierContext,0)


        def tableRowNullFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowNullFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormatDelimited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)




    def rowFormatDelimited(self):

        localctx = HiveParser.RowFormatDelimitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_rowFormatDelimited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            self.match(HiveParser.KW_ROW)
            self.state = 2177
            self.match(HiveParser.KW_FORMAT)
            self.state = 2178
            self.match(HiveParser.KW_DELIMITED)
            self.state = 2180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 2179
                self.tableRowFormatFieldIdentifier()


            self.state = 2183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 2182
                self.tableRowFormatCollItemsIdentifier()


            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 2185
                self.tableRowFormatMapKeysIdentifier()


            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 2188
                self.tableRowFormatLinesIdentifier()


            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==209:
                self.state = 2191
                self.tableRowNullFormat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowFormatDelimited(self):
            return self.getTypedRuleContext(HiveParser.RowFormatDelimitedContext,0)


        def rowFormatSerde(self):
            return self.getTypedRuleContext(HiveParser.RowFormatSerdeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormat" ):
                listener.enterTableRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormat" ):
                listener.exitTableRowFormat(self)




    def tableRowFormat(self):

        localctx = HiveParser.TableRowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tableRowFormat)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2194
                self.rowFormatDelimited()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2195
                self.rowFormatSerde()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesPrefixedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePropertiesPrefixed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertiesPrefixed" ):
                listener.enterTablePropertiesPrefixed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertiesPrefixed" ):
                listener.exitTablePropertiesPrefixed(self)




    def tablePropertiesPrefixed(self):

        localctx = HiveParser.TablePropertiesPrefixedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_tablePropertiesPrefixed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(HiveParser.KW_TBLPROPERTIES)
            self.state = 2199
            self.tableProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def tablePropertiesList(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperties" ):
                listener.enterTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperties" ):
                listener.exitTableProperties(self)




    def tableProperties(self):

        localctx = HiveParser.TablePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_tableProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.match(HiveParser.LPAREN)
            self.state = 2202
            self.tablePropertiesList()
            self.state = 2203
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def keyProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyPropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyPropertyContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePropertiesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertiesList" ):
                listener.enterTablePropertiesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertiesList" ):
                listener.exitTablePropertiesList(self)




    def tablePropertiesList(self):

        localctx = HiveParser.TablePropertiesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_tablePropertiesList)
        self._la = 0 # Token type
        try:
            self.state = 2221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2205
                self.keyValueProperty()
                self.state = 2210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 2206
                    self.match(HiveParser.COMMA)
                    self.state = 2207
                    self.keyValueProperty()
                    self.state = 2212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2213
                self.keyProperty()
                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 2214
                    self.match(HiveParser.COMMA)
                    self.state = 2215
                    self.keyProperty()
                    self.state = 2220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValuePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Token
            self.value = None # Token

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_keyValueProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValueProperty" ):
                listener.enterKeyValueProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValueProperty" ):
                listener.exitKeyValueProperty(self)




    def keyValueProperty(self):

        localctx = HiveParser.KeyValuePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_keyValueProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            localctx.key = self.match(HiveParser.StringLiteral)
            self.state = 2224
            self.match(HiveParser.EQUAL)
            self.state = 2225
            localctx.value = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Token

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_keyProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyProperty" ):
                listener.enterKeyProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyProperty" ):
                listener.exitKeyProperty(self)




    def keyProperty(self):

        localctx = HiveParser.KeyPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_keyProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2227
            localctx.key = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatFieldIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fldIdnt = None # Token
            self.fldEscape = None # Token

        def KW_FIELDS(self):
            return self.getToken(HiveParser.KW_FIELDS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_BY)
            else:
                return self.getToken(HiveParser.KW_BY, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_ESCAPED(self):
            return self.getToken(HiveParser.KW_ESCAPED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatFieldIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatFieldIdentifier" ):
                listener.enterTableRowFormatFieldIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatFieldIdentifier" ):
                listener.exitTableRowFormatFieldIdentifier(self)




    def tableRowFormatFieldIdentifier(self):

        localctx = HiveParser.TableRowFormatFieldIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_tableRowFormatFieldIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(HiveParser.KW_FIELDS)
            self.state = 2230
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2231
            self.match(HiveParser.KW_BY)
            self.state = 2232
            localctx.fldIdnt = self.match(HiveParser.StringLiteral)
            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 2233
                self.match(HiveParser.KW_ESCAPED)
                self.state = 2234
                self.match(HiveParser.KW_BY)
                self.state = 2235
                localctx.fldEscape = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatCollItemsIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.collIdnt = None # Token

        def KW_COLLECTION(self):
            return self.getToken(HiveParser.KW_COLLECTION, 0)

        def KW_ITEMS(self):
            return self.getToken(HiveParser.KW_ITEMS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatCollItemsIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatCollItemsIdentifier" ):
                listener.enterTableRowFormatCollItemsIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatCollItemsIdentifier" ):
                listener.exitTableRowFormatCollItemsIdentifier(self)




    def tableRowFormatCollItemsIdentifier(self):

        localctx = HiveParser.TableRowFormatCollItemsIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_tableRowFormatCollItemsIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            self.match(HiveParser.KW_COLLECTION)
            self.state = 2239
            self.match(HiveParser.KW_ITEMS)
            self.state = 2240
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2241
            self.match(HiveParser.KW_BY)
            self.state = 2242
            localctx.collIdnt = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatMapKeysIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mapKeysIdnt = None # Token

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_KEYS(self):
            return self.getToken(HiveParser.KW_KEYS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatMapKeysIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatMapKeysIdentifier" ):
                listener.enterTableRowFormatMapKeysIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatMapKeysIdentifier" ):
                listener.exitTableRowFormatMapKeysIdentifier(self)




    def tableRowFormatMapKeysIdentifier(self):

        localctx = HiveParser.TableRowFormatMapKeysIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_tableRowFormatMapKeysIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2244
            self.match(HiveParser.KW_MAP)
            self.state = 2245
            self.match(HiveParser.KW_KEYS)
            self.state = 2246
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2247
            self.match(HiveParser.KW_BY)
            self.state = 2248
            localctx.mapKeysIdnt = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatLinesIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linesIdnt = None # Token

        def KW_LINES(self):
            return self.getToken(HiveParser.KW_LINES, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatLinesIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatLinesIdentifier" ):
                listener.enterTableRowFormatLinesIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatLinesIdentifier" ):
                listener.exitTableRowFormatLinesIdentifier(self)




    def tableRowFormatLinesIdentifier(self):

        localctx = HiveParser.TableRowFormatLinesIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_tableRowFormatLinesIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(HiveParser.KW_LINES)
            self.state = 2251
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2252
            self.match(HiveParser.KW_BY)
            self.state = 2253
            localctx.linesIdnt = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowNullFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullIdnt = None # Token

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowNullFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowNullFormat" ):
                listener.enterTableRowNullFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowNullFormat" ):
                listener.exitTableRowNullFormat(self)




    def tableRowNullFormat(self):

        localctx = HiveParser.TableRowNullFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_tableRowNullFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(HiveParser.KW_NULL)
            self.state = 2256
            self.match(HiveParser.KW_DEFINED)
            self.state = 2257
            self.match(HiveParser.KW_AS)
            self.state = 2258
            localctx.nullIdnt = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.inDriver = None # Token
            self.outDriver = None # Token
            self.storageHandler = None # Token
            self.serdeprops = None # TablePropertiesContext
            self.fileformat = None # Id_Context
            self.genericSpec = None # Id_Context

        def KW_STORED(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_STORED)
            else:
                return self.getToken(HiveParser.KW_STORED, i)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def getRuleIndex(self):
            return HiveParser.RULE_tableFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)




    def tableFileFormat(self):

        localctx = HiveParser.TableFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_tableFileFormat)
        self._la = 0 # Token type
        try:
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2260
                self.match(HiveParser.KW_STORED)
                self.state = 2261
                self.match(HiveParser.KW_AS)
                self.state = 2262
                self.match(HiveParser.KW_INPUTFORMAT)
                self.state = 2263
                localctx.inFmt = self.match(HiveParser.StringLiteral)
                self.state = 2264
                self.match(HiveParser.KW_OUTPUTFORMAT)
                self.state = 2265
                localctx.outFmt = self.match(HiveParser.StringLiteral)
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 2266
                    self.match(HiveParser.KW_INPUTDRIVER)
                    self.state = 2267
                    localctx.inDriver = self.match(HiveParser.StringLiteral)
                    self.state = 2268
                    self.match(HiveParser.KW_OUTPUTDRIVER)
                    self.state = 2269
                    localctx.outDriver = self.match(HiveParser.StringLiteral)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2272
                self.match(HiveParser.KW_STORED)
                self.state = 2273
                self.match(HiveParser.KW_BY)
                self.state = 2274
                localctx.storageHandler = self.match(HiveParser.StringLiteral)
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==375:
                    self.state = 2275
                    self.match(HiveParser.KW_WITH)
                    self.state = 2276
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 2277
                    localctx.serdeprops = self.tableProperties()


                self.state = 2283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==310:
                    self.state = 2280
                    self.match(HiveParser.KW_STORED)
                    self.state = 2281
                    self.match(HiveParser.KW_AS)
                    self.state = 2282
                    localctx.fileformat = self.id_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2285
                self.match(HiveParser.KW_STORED)
                self.state = 2286
                self.match(HiveParser.KW_BY)
                self.state = 2287
                localctx.genericSpec = self.id_()
                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==375:
                    self.state = 2288
                    self.match(HiveParser.KW_WITH)
                    self.state = 2289
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 2290
                    localctx.serdeprops = self.tableProperties()


                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==310:
                    self.state = 2293
                    self.match(HiveParser.KW_STORED)
                    self.state = 2294
                    self.match(HiveParser.KW_AS)
                    self.state = 2295
                    localctx.fileformat = self.id_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2298
                self.match(HiveParser.KW_STORED)
                self.state = 2299
                self.match(HiveParser.KW_AS)
                self.state = 2300
                localctx.genericSpec = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.locn = None # Token

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableLocation" ):
                listener.enterTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableLocation" ):
                listener.exitTableLocation(self)




    def tableLocation(self):

        localctx = HiveParser.TableLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_tableLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.match(HiveParser.KW_LOCATION)
            self.state = 2304
            localctx.locn = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeList" ):
                listener.enterColumnNameTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeList" ):
                listener.exitColumnNameTypeList(self)




    def columnNameTypeList(self):

        localctx = HiveParser.ColumnNameTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_columnNameTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.columnNameType()
            self.state = 2311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2307
                self.match(HiveParser.COMMA)
                self.state = 2308
                self.columnNameType()
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeOrConstraintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameTypeOrConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeOrConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeOrConstraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeOrConstraintList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeOrConstraintList" ):
                listener.enterColumnNameTypeOrConstraintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeOrConstraintList" ):
                listener.exitColumnNameTypeOrConstraintList(self)




    def columnNameTypeOrConstraintList(self):

        localctx = HiveParser.ColumnNameTypeOrConstraintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_columnNameTypeOrConstraintList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.columnNameTypeOrConstraint()
            self.state = 2319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2315
                self.match(HiveParser.COMMA)
                self.state = 2316
                self.columnNameTypeOrConstraint()
                self.state = 2321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameColonTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameColonType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameColonTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameColonTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameColonTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameColonTypeList" ):
                listener.enterColumnNameColonTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameColonTypeList" ):
                listener.exitColumnNameColonTypeList(self)




    def columnNameColonTypeList(self):

        localctx = HiveParser.ColumnNameColonTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_columnNameColonTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.columnNameColonType()
            self.state = 2327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2323
                self.match(HiveParser.COMMA)
                self.state = 2324
                self.columnNameColonType()
                self.state = 2329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameList" ):
                listener.enterColumnNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameList" ):
                listener.exitColumnNameList(self)




    def columnNameList(self):

        localctx = HiveParser.ColumnNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_columnNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.columnName()
            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2331
                self.match(HiveParser.COMMA)
                self.state = 2332
                self.columnName()
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)




    def columnName(self):

        localctx = HiveParser.ColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_columnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def KW_ELEM_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ELEM_TYPE)
            else:
                return self.getToken(HiveParser.KW_ELEM_TYPE, i)

        def KW_KEY_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_KEY_TYPE)
            else:
                return self.getToken(HiveParser.KW_KEY_TYPE, i)

        def KW_VALUE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_VALUE_TYPE)
            else:
                return self.getToken(HiveParser.KW_VALUE_TYPE, i)

        def getRuleIndex(self):
            return HiveParser.RULE_extColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtColumnName" ):
                listener.enterExtColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtColumnName" ):
                listener.exitExtColumnName(self)




    def extColumnName(self):

        localctx = HiveParser.ExtColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_extColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.id_()
            self.state = 2350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==382:
                self.state = 2341
                self.match(HiveParser.DOT)
                self.state = 2346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 2342
                    self.match(HiveParser.KW_ELEM_TYPE)
                    pass

                elif la_ == 2:
                    self.state = 2343
                    self.match(HiveParser.KW_KEY_TYPE)
                    pass

                elif la_ == 3:
                    self.state = 2344
                    self.match(HiveParser.KW_VALUE_TYPE)
                    pass

                elif la_ == 4:
                    self.state = 2345
                    self.id_()
                    pass


                self.state = 2352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameOrderList" ):
                listener.enterColumnNameOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameOrderList" ):
                listener.exitColumnNameOrderList(self)




    def columnNameOrderList(self):

        localctx = HiveParser.ColumnNameOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_columnNameOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.columnNameOrder()
            self.state = 2358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2354
                self.match(HiveParser.COMMA)
                self.state = 2355
                self.columnNameOrder()
                self.state = 2360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnParenthesesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnParenthesesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnParenthesesList" ):
                listener.enterColumnParenthesesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnParenthesesList" ):
                listener.exitColumnParenthesesList(self)




    def columnParenthesesList(self):

        localctx = HiveParser.ColumnParenthesesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_columnParenthesesList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(HiveParser.LPAREN)
            self.state = 2362
            self.columnNameList()
            self.state = 2363
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableValidateSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableSpecificationContext,0)


        def validateSpecification(self):
            return self.getTypedRuleContext(HiveParser.ValidateSpecificationContext,0)


        def enforcedSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnforcedSpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_enableValidateSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableValidateSpecification" ):
                listener.enterEnableValidateSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableValidateSpecification" ):
                listener.exitEnableValidateSpecification(self)




    def enableValidateSpecification(self):

        localctx = HiveParser.EnableValidateSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_enableValidateSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2365
                self.enableSpecification()
                self.state = 2367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207 or _la==362:
                    self.state = 2366
                    self.validateSpecification()


                pass
            elif token in [104, 206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2369
                self.enforcedSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enableSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableSpecification" ):
                listener.enterEnableSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableSpecification" ):
                listener.exitEnableSpecification(self)




    def enableSpecification(self):

        localctx = HiveParser.EnableSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_enableSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            _la = self._input.LA(1)
            if not(_la==91 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValidateSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_NOVALIDATE(self):
            return self.getToken(HiveParser.KW_NOVALIDATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_validateSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidateSpecification" ):
                listener.enterValidateSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidateSpecification" ):
                listener.exitValidateSpecification(self)




    def validateSpecification(self):

        localctx = HiveParser.ValidateSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_validateSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2374
            _la = self._input.LA(1)
            if not(_la==207 or _la==362):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnforcedSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENFORCED(self):
            return self.getToken(HiveParser.KW_ENFORCED, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enforcedSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnforcedSpecification" ):
                listener.enterEnforcedSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnforcedSpecification" ):
                listener.exitEnforcedSpecification(self)




    def enforcedSpecification(self):

        localctx = HiveParser.EnforcedSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_enforcedSpecification)
        try:
            self.state = 2379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2376
                self.match(HiveParser.KW_ENFORCED)
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2377
                self.match(HiveParser.KW_NOT)
                self.state = 2378
                self.match(HiveParser.KW_ENFORCED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RELY(self):
            return self.getToken(HiveParser.KW_RELY, 0)

        def KW_NORELY(self):
            return self.getToken(HiveParser.KW_NORELY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_relySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelySpecification" ):
                listener.enterRelySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelySpecification" ):
                listener.exitRelySpecification(self)




    def relySpecification(self):

        localctx = HiveParser.RelySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_relySpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            _la = self._input.LA(1)
            if not(_la==204 or _la==262):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context

        def tableLevelConstraint(self):
            return self.getTypedRuleContext(HiveParser.TableLevelConstraintContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateConstraint" ):
                listener.enterCreateConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateConstraint" ):
                listener.exitCreateConstraint(self)




    def createConstraint(self):

        localctx = HiveParser.CreateConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_createConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2383
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2384
                localctx.constraintName = self.id_()


            self.state = 2387
            self.tableLevelConstraint()
            self.state = 2389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2388
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterConstraintWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def tableLevelConstraint(self):
            return self.getTypedRuleContext(HiveParser.TableLevelConstraintContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterConstraintWithName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterConstraintWithName" ):
                listener.enterAlterConstraintWithName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterConstraintWithName" ):
                listener.exitAlterConstraintWithName(self)




    def alterConstraintWithName(self):

        localctx = HiveParser.AlterConstraintWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_alterConstraintWithName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 2392
            localctx.constraintName = self.id_()
            self.state = 2393
            self.tableLevelConstraint()
            self.state = 2395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2394
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableLevelConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pkUkConstraint(self):
            return self.getTypedRuleContext(HiveParser.PkUkConstraintContext,0)


        def checkConstraint(self):
            return self.getTypedRuleContext(HiveParser.CheckConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableLevelConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableLevelConstraint" ):
                listener.enterTableLevelConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableLevelConstraint" ):
                listener.exitTableLevelConstraint(self)




    def tableLevelConstraint(self):

        localctx = HiveParser.TableLevelConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_tableLevelConstraint)
        try:
            self.state = 2399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [241, 347]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2397
                self.pkUkConstraint()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2398
                self.checkConstraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PkUkConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pkCols = None # ColumnParenthesesListContext

        def tableConstraintType(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintTypeContext,0)


        def columnParenthesesList(self):
            return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_pkUkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPkUkConstraint" ):
                listener.enterPkUkConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPkUkConstraint" ):
                listener.exitPkUkConstraint(self)




    def pkUkConstraint(self):

        localctx = HiveParser.PkUkConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_pkUkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.tableConstraintType()
            self.state = 2402
            localctx.pkCols = self.columnParenthesesList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CHECK(self):
            return self.getToken(HiveParser.KW_CHECK, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_checkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckConstraint" ):
                listener.enterCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckConstraint" ):
                listener.exitCheckConstraint(self)




    def checkConstraint(self):

        localctx = HiveParser.CheckConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_checkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.match(HiveParser.KW_CHECK)
            self.state = 2405
            self.match(HiveParser.LPAREN)
            self.state = 2406
            self.expression()
            self.state = 2407
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateForeignKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context
            self.fkCols = None # ColumnParenthesesListContext
            self.tabName = None # TableNameContext
            self.parCols = None # ColumnParenthesesListContext

        def KW_FOREIGN(self):
            return self.getToken(HiveParser.KW_FOREIGN, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createForeignKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateForeignKey" ):
                listener.enterCreateForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateForeignKey" ):
                listener.exitCreateForeignKey(self)




    def createForeignKey(self):

        localctx = HiveParser.CreateForeignKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_createForeignKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2409
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2410
                localctx.constraintName = self.id_()


            self.state = 2413
            self.match(HiveParser.KW_FOREIGN)
            self.state = 2414
            self.match(HiveParser.KW_KEY)
            self.state = 2415
            localctx.fkCols = self.columnParenthesesList()
            self.state = 2416
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2417
            localctx.tabName = self.tableName()
            self.state = 2418
            localctx.parCols = self.columnParenthesesList()
            self.state = 2420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2419
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterForeignKeyWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context
            self.fkCols = None # ColumnParenthesesListContext
            self.tabName = None # TableNameContext
            self.parCols = None # ColumnParenthesesListContext

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def KW_FOREIGN(self):
            return self.getToken(HiveParser.KW_FOREIGN, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterForeignKeyWithName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterForeignKeyWithName" ):
                listener.enterAlterForeignKeyWithName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterForeignKeyWithName" ):
                listener.exitAlterForeignKeyWithName(self)




    def alterForeignKeyWithName(self):

        localctx = HiveParser.AlterForeignKeyWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_alterForeignKeyWithName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2422
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 2423
            localctx.constraintName = self.id_()
            self.state = 2424
            self.match(HiveParser.KW_FOREIGN)
            self.state = 2425
            self.match(HiveParser.KW_KEY)
            self.state = 2426
            localctx.fkCols = self.columnParenthesesList()
            self.state = 2427
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2428
            localctx.tabName = self.tableName()
            self.state = 2429
            localctx.parCols = self.columnParenthesesList()
            self.state = 2431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2430
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedValueElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValues(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuesContext,0)


        def skewedColumnValuePairList(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedValueElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedValueElement" ):
                listener.enterSkewedValueElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedValueElement" ):
                listener.exitSkewedValueElement(self)




    def skewedValueElement(self):

        localctx = HiveParser.SkewedValueElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_skewedValueElement)
        try:
            self.state = 2435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 71, 120, 209, 326, 327, 339, 410, 412, 414, 415, 417, 419]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2433
                self.skewedColumnValues()
                pass
            elif token in [386]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2434
                self.skewedColumnValuePairList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedColumnValuePairContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValuePairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValuePairList" ):
                listener.enterSkewedColumnValuePairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValuePairList" ):
                listener.exitSkewedColumnValuePairList(self)




    def skewedColumnValuePairList(self):

        localctx = HiveParser.SkewedColumnValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_skewedColumnValuePairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            self.skewedColumnValuePair()
            self.state = 2442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2438
                self.match(HiveParser.COMMA)
                self.state = 2439
                self.skewedColumnValuePair()
                self.state = 2444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colValues = None # SkewedColumnValuesContext

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def skewedColumnValues(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValuePair" ):
                listener.enterSkewedColumnValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValuePair" ):
                listener.exitSkewedColumnValuePair(self)




    def skewedColumnValuePair(self):

        localctx = HiveParser.SkewedColumnValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_skewedColumnValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self.match(HiveParser.LPAREN)
            self.state = 2446
            localctx.colValues = self.skewedColumnValues()
            self.state = 2447
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedColumnValueContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedColumnValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValues" ):
                listener.enterSkewedColumnValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValues" ):
                listener.exitSkewedColumnValues(self)




    def skewedColumnValues(self):

        localctx = HiveParser.SkewedColumnValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_skewedColumnValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            self.skewedColumnValue()
            self.state = 2454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2450
                self.match(HiveParser.COMMA)
                self.state = 2451
                self.skewedColumnValue()
                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValue" ):
                listener.enterSkewedColumnValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValue" ):
                listener.exitSkewedColumnValue(self)




    def skewedColumnValue(self):

        localctx = HiveParser.SkewedColumnValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_skewedColumnValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedValueLocationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValue(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValueContext,0)


        def skewedColumnValuePair(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedValueLocationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedValueLocationElement" ):
                listener.enterSkewedValueLocationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedValueLocationElement" ):
                listener.exitSkewedValueLocationElement(self)




    def skewedValueLocationElement(self):

        localctx = HiveParser.SkewedValueLocationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_skewedValueLocationElement)
        try:
            self.state = 2461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 71, 120, 209, 326, 327, 339, 410, 412, 414, 415, 417, 419]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2459
                self.skewedColumnValue()
                pass
            elif token in [386]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2460
                self.skewedColumnValuePair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orderSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderSpecification" ):
                listener.enterOrderSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderSpecification" ):
                listener.exitOrderSpecification(self)




    def orderSpecification(self):

        localctx = HiveParser.OrderSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_orderSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            _la = self._input.LA(1)
            if not(_la==18 or _la==86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_LAST(self):
            return self.getToken(HiveParser.KW_LAST, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nullOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullOrdering" ):
                listener.enterNullOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullOrdering" ):
                listener.exitNullOrdering(self)




    def nullOrdering(self):

        localctx = HiveParser.NullOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_nullOrdering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.match(HiveParser.KW_NULLS)
            self.state = 2466
            _la = self._input.LA(1)
            if not(_la==125 or _la==170):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderSpec = None # OrderSpecificationContext
            self.nullSpec = None # NullOrderingContext

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def orderSpecification(self):
            return self.getTypedRuleContext(HiveParser.OrderSpecificationContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(HiveParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameOrder" ):
                listener.enterColumnNameOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameOrder" ):
                listener.exitColumnNameOrder(self)




    def columnNameOrder(self):

        localctx = HiveParser.ColumnNameOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_columnNameOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.id_()
            self.state = 2470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==86:
                self.state = 2469
                localctx.orderSpec = self.orderSpecification()


            self.state = 2473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 2472
                localctx.nullSpec = self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameCommentContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameCommentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameCommentList" ):
                listener.enterColumnNameCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameCommentList" ):
                listener.exitColumnNameCommentList(self)




    def columnNameCommentList(self):

        localctx = HiveParser.ColumnNameCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_columnNameCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            self.columnNameComment()
            self.state = 2480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2476
                self.match(HiveParser.COMMA)
                self.state = 2477
                self.columnNameComment()
                self.state = 2482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # Id_Context
            self.comment = None # Token

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameComment" ):
                listener.enterColumnNameComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameComment" ):
                listener.exitColumnNameComment(self)




    def columnNameComment(self):

        localctx = HiveParser.ColumnNameCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_columnNameComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            localctx.colName = self.id_()
            self.state = 2486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2484
                self.match(HiveParser.KW_COMMENT)
                self.state = 2485
                localctx.comment = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderSpecificationRewriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orderSpecificationRewrite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderSpecificationRewrite" ):
                listener.enterOrderSpecificationRewrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderSpecificationRewrite" ):
                listener.exitOrderSpecificationRewrite(self)




    def orderSpecificationRewrite(self):

        localctx = HiveParser.OrderSpecificationRewriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_orderSpecificationRewrite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            _la = self._input.LA(1)
            if not(_la==18 or _la==86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderSpec = None # OrderSpecificationRewriteContext
            self.nullSpec = None # NullOrderingContext

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def orderSpecificationRewrite(self):
            return self.getTypedRuleContext(HiveParser.OrderSpecificationRewriteContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(HiveParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRefOrder" ):
                listener.enterColumnRefOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRefOrder" ):
                listener.exitColumnRefOrder(self)




    def columnRefOrder(self):

        localctx = HiveParser.ColumnRefOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_columnRefOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2490
            self.expression()
            self.state = 2492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==86:
                self.state = 2491
                localctx.orderSpec = self.orderSpecificationRewrite()


            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 2494
                localctx.nullSpec = self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # Id_Context
            self.comment = None # Token

        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameType" ):
                listener.enterColumnNameType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameType" ):
                listener.exitColumnNameType(self)




    def columnNameType(self):

        localctx = HiveParser.ColumnNameTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_columnNameType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            localctx.colName = self.id_()
            self.state = 2498
            self.colType()
            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2499
                self.match(HiveParser.KW_COMMENT)
                self.state = 2500
                localctx.comment = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeOrConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraint(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintContext,0)


        def columnNameTypeConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeOrConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeOrConstraint" ):
                listener.enterColumnNameTypeOrConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeOrConstraint" ):
                listener.exitColumnNameTypeOrConstraint(self)




    def columnNameTypeOrConstraint(self):

        localctx = HiveParser.ColumnNameTypeOrConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_columnNameTypeOrConstraint)
        try:
            self.state = 2505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2503
                self.tableConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2504
                self.columnNameTypeConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createForeignKey(self):
            return self.getTypedRuleContext(HiveParser.CreateForeignKeyContext,0)


        def createConstraint(self):
            return self.getTypedRuleContext(HiveParser.CreateConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraint" ):
                listener.enterTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraint" ):
                listener.exitTableConstraint(self)




    def tableConstraint(self):

        localctx = HiveParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_tableConstraint)
        try:
            self.state = 2509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2507
                self.createForeignKey()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2508
                self.createConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # Id_Context
            self.comment = None # Token

        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def columnConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColumnConstraintContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeConstraint" ):
                listener.enterColumnNameTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeConstraint" ):
                listener.exitColumnNameTypeConstraint(self)




    def columnNameTypeConstraint(self):

        localctx = HiveParser.ColumnNameTypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_columnNameTypeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            localctx.colName = self.id_()
            self.state = 2512
            self.colType()
            self.state = 2514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 1099511660545) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 9007233614479361) != 0) or _la==347:
                self.state = 2513
                self.columnConstraint()


            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2516
                self.match(HiveParser.KW_COMMENT)
                self.state = 2517
                localctx.comment = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreignKeyConstraint(self):
            return self.getTypedRuleContext(HiveParser.ForeignKeyConstraintContext,0)


        def colConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraint" ):
                listener.enterColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraint" ):
                listener.exitColumnConstraint(self)




    def columnConstraint(self):

        localctx = HiveParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_columnConstraint)
        try:
            self.state = 2522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2520
                self.foreignKeyConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2521
                self.colConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeignKeyConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context
            self.tabName = None # TableNameContext
            self.colName = None # ColumnNameContext

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_foreignKeyConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyConstraint" ):
                listener.enterForeignKeyConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyConstraint" ):
                listener.exitForeignKeyConstraint(self)




    def foreignKeyConstraint(self):

        localctx = HiveParser.ForeignKeyConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_foreignKeyConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2524
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2525
                localctx.constraintName = self.id_()


            self.state = 2528
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2529
            localctx.tabName = self.tableName()
            self.state = 2530
            self.match(HiveParser.LPAREN)
            self.state = 2531
            localctx.colName = self.columnName()
            self.state = 2532
            self.match(HiveParser.RPAREN)
            self.state = 2534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2533
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context

        def columnConstraintType(self):
            return self.getTypedRuleContext(HiveParser.ColumnConstraintTypeContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_colConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColConstraint" ):
                listener.enterColConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColConstraint" ):
                listener.exitColConstraint(self)




    def colConstraint(self):

        localctx = HiveParser.ColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_colConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2536
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2537
                localctx.constraintName = self.id_()


            self.state = 2540
            self.columnConstraintType()
            self.state = 2542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2541
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterForeignKeyConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterForeignKeyConstraintContext,0)


        def alterColConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterColConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterColumnConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnConstraint" ):
                listener.enterAlterColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnConstraint" ):
                listener.exitAlterColumnConstraint(self)




    def alterColumnConstraint(self):

        localctx = HiveParser.AlterColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_alterColumnConstraint)
        try:
            self.state = 2546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2544
                self.alterForeignKeyConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2545
                self.alterColConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterForeignKeyConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context
            self.tabName = None # TableNameContext
            self.colName = None # ColumnNameContext

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterForeignKeyConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterForeignKeyConstraint" ):
                listener.enterAlterForeignKeyConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterForeignKeyConstraint" ):
                listener.exitAlterForeignKeyConstraint(self)




    def alterForeignKeyConstraint(self):

        localctx = HiveParser.AlterForeignKeyConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_alterForeignKeyConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2548
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2549
                localctx.constraintName = self.id_()


            self.state = 2552
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2553
            localctx.tabName = self.tableName()
            self.state = 2554
            self.match(HiveParser.LPAREN)
            self.state = 2555
            localctx.colName = self.columnName()
            self.state = 2556
            self.match(HiveParser.RPAREN)
            self.state = 2558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2557
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraintName = None # Id_Context

        def columnConstraintType(self):
            return self.getTypedRuleContext(HiveParser.ColumnConstraintTypeContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterColConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColConstraint" ):
                listener.enterAlterColConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColConstraint" ):
                listener.exitAlterColConstraint(self)




    def alterColConstraint(self):

        localctx = HiveParser.AlterColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_alterColConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2560
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2561
                localctx.constraintName = self.id_()


            self.state = 2564
            self.columnConstraintType()
            self.state = 2566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 10241) != 0) or _la==206:
                self.state = 2565
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def defaultVal(self):
            return self.getTypedRuleContext(HiveParser.DefaultValContext,0)


        def checkConstraint(self):
            return self.getTypedRuleContext(HiveParser.CheckConstraintContext,0)


        def tableConstraintType(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintTypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnConstraintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintType" ):
                listener.enterColumnConstraintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintType" ):
                listener.exitColumnConstraintType(self)




    def columnConstraintType(self):

        localctx = HiveParser.ColumnConstraintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_columnConstraintType)
        try:
            self.state = 2574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [206]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2568
                self.match(HiveParser.KW_NOT)
                self.state = 2569
                self.match(HiveParser.KW_NULL)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2570
                self.match(HiveParser.KW_DEFAULT)
                self.state = 2571
                self.defaultVal()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2572
                self.checkConstraint()
                pass
            elif token in [241, 347]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2573
                self.tableConstraintType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def castExpression(self):
            return self.getTypedRuleContext(HiveParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_defaultVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultVal" ):
                listener.enterDefaultVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultVal" ):
                listener.exitDefaultVal(self)




    def defaultVal(self):

        localctx = HiveParser.DefaultValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_defaultVal)
        try:
            self.state = 2579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2576
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2577
                self.function_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2578
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PRIMARY(self):
            return self.getToken(HiveParser.KW_PRIMARY, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def KW_UNIQUE(self):
            return self.getToken(HiveParser.KW_UNIQUE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableConstraintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraintType" ):
                listener.enterTableConstraintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraintType" ):
                listener.exitTableConstraintType(self)




    def tableConstraintType(self):

        localctx = HiveParser.TableConstraintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_tableConstraintType)
        try:
            self.state = 2584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [241]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2581
                self.match(HiveParser.KW_PRIMARY)
                self.state = 2582
                self.match(HiveParser.KW_KEY)
                pass
            elif token in [347]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2583
                self.match(HiveParser.KW_UNIQUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintOptsCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableValidateSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableValidateSpecificationContext,0)


        def relySpecification(self):
            return self.getTypedRuleContext(HiveParser.RelySpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constraintOptsCreate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintOptsCreate" ):
                listener.enterConstraintOptsCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintOptsCreate" ):
                listener.exitConstraintOptsCreate(self)




    def constraintOptsCreate(self):

        localctx = HiveParser.ConstraintOptsCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_constraintOptsCreate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.enableValidateSpecification()
            self.state = 2588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204 or _la==262:
                self.state = 2587
                self.relySpecification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintOptsAlterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableValidateSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableValidateSpecificationContext,0)


        def relySpecification(self):
            return self.getTypedRuleContext(HiveParser.RelySpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constraintOptsAlter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintOptsAlter" ):
                listener.enterConstraintOptsAlter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintOptsAlter" ):
                listener.exitConstraintOptsAlter(self)




    def constraintOptsAlter(self):

        localctx = HiveParser.ConstraintOptsAlterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_constraintOptsAlter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.enableValidateSpecification()
            self.state = 2592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204 or _la==262:
                self.state = 2591
                self.relySpecification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameColonTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # Id_Context
            self.comment = None # Token

        def COLON(self):
            return self.getToken(HiveParser.COLON, 0)

        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameColonType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameColonType" ):
                listener.enterColumnNameColonType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameColonType" ):
                listener.exitColumnNameColonType(self)




    def columnNameColonType(self):

        localctx = HiveParser.ColumnNameColonTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_columnNameColonType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            localctx.colName = self.id_()
            self.state = 2595
            self.match(HiveParser.COLON)
            self.state = 2596
            self.colType()
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2597
                self.match(HiveParser.KW_COMMENT)
                self.state = 2598
                localctx.comment = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(HiveParser.TypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = HiveParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = HiveParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_colTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2603
            self.colType()
            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2604
                self.match(HiveParser.COMMA)
                self.state = 2605
                self.colType()
                self.state = 2610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def listType(self):
            return self.getTypedRuleContext(HiveParser.ListTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(HiveParser.StructTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(HiveParser.MapTypeContext,0)


        def unionType(self):
            return self.getTypedRuleContext(HiveParser.UnionTypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = HiveParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_type)
        try:
            self.state = 2616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 27, 28, 39, 71, 72, 79, 96, 126, 156, 254, 300, 312, 326, 327, 329, 365]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2611
                self.primitiveType()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2612
                self.listType()
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2613
                self.structType()
                pass
            elif token in [190]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2614
                self.mapType()
                pass
            elif token in [346]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2615
                self.unionType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prec = None # Token
            self.scale = None # Token
            self.length = None # Token

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_REAL(self):
            return self.getToken(HiveParser.KW_REAL, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_PRECISION(self):
            return self.getToken(HiveParser.KW_PRECISION, 0)

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def KW_DATETIME(self):
            return self.getToken(HiveParser.KW_DATETIME, 0)

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def KW_TIMESTAMPLOCALTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_TIME(self):
            return self.getToken(HiveParser.KW_TIME, 0)

        def KW_ZONE(self):
            return self.getToken(HiveParser.KW_ZONE, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_DECIMAL(self):
            return self.getToken(HiveParser.KW_DECIMAL, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_VARCHAR(self):
            return self.getToken(HiveParser.KW_VARCHAR, 0)

        def KW_CHAR(self):
            return self.getToken(HiveParser.KW_CHAR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = HiveParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.state = 2654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2618
                self.match(HiveParser.KW_TINYINT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2619
                self.match(HiveParser.KW_SMALLINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2620
                self.match(HiveParser.KW_INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2621
                self.match(HiveParser.KW_BIGINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2622
                self.match(HiveParser.KW_BOOLEAN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2623
                self.match(HiveParser.KW_FLOAT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2624
                self.match(HiveParser.KW_REAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2625
                self.match(HiveParser.KW_DOUBLE)
                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==238:
                    self.state = 2626
                    self.match(HiveParser.KW_PRECISION)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2629
                self.match(HiveParser.KW_DATE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2630
                self.match(HiveParser.KW_DATETIME)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2631
                self.match(HiveParser.KW_TIMESTAMP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2632
                self.match(HiveParser.KW_TIMESTAMPLOCALTZ)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2633
                self.match(HiveParser.KW_TIMESTAMP)
                self.state = 2634
                self.match(HiveParser.KW_WITH)
                self.state = 2635
                self.match(HiveParser.KW_LOCAL)
                self.state = 2636
                self.match(HiveParser.KW_TIME)
                self.state = 2637
                self.match(HiveParser.KW_ZONE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2638
                self.match(HiveParser.KW_STRING)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2639
                self.match(HiveParser.KW_BINARY)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2640
                self.match(HiveParser.KW_DECIMAL)
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==386:
                    self.state = 2641
                    self.match(HiveParser.LPAREN)
                    self.state = 2642
                    localctx.prec = self.match(HiveParser.Number)
                    self.state = 2645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==384:
                        self.state = 2643
                        self.match(HiveParser.COMMA)
                        self.state = 2644
                        localctx.scale = self.match(HiveParser.Number)


                    self.state = 2647
                    self.match(HiveParser.RPAREN)


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2650
                _la = self._input.LA(1)
                if not(_la==39 or _la==365):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2651
                self.match(HiveParser.LPAREN)
                self.state = 2652
                localctx.length = self.match(HiveParser.Number)
                self.state = 2653
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def type_(self):
            return self.getTypedRuleContext(HiveParser.TypeContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_listType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType" ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType" ):
                listener.exitListType(self)




    def listType(self):

        localctx = HiveParser.ListTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_listType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self.match(HiveParser.KW_ARRAY)
            self.state = 2657
            self.match(HiveParser.LESSTHAN)
            self.state = 2658
            self.type_()
            self.state = 2659
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def columnNameColonTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameColonTypeListContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)




    def structType(self):

        localctx = HiveParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_structType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2661
            self.match(HiveParser.KW_STRUCT)
            self.state = 2662
            self.match(HiveParser.LESSTHAN)
            self.state = 2663
            self.columnNameColonTypeList()
            self.state = 2664
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # PrimitiveTypeContext
            self.right = None # TypeContext

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def type_(self):
            return self.getTypedRuleContext(HiveParser.TypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)




    def mapType(self):

        localctx = HiveParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2666
            self.match(HiveParser.KW_MAP)
            self.state = 2667
            self.match(HiveParser.LESSTHAN)
            self.state = 2668
            localctx.left = self.primitiveType()
            self.state = 2669
            self.match(HiveParser.COMMA)
            self.state = 2670
            localctx.right = self.type_()
            self.state = 2671
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColTypeListContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_unionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionType" ):
                listener.enterUnionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionType" ):
                listener.exitUnionType(self)




    def unionType(self):

        localctx = HiveParser.UnionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_unionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2673
            self.match(HiveParser.KW_UNIONTYPE)
            self.state = 2674
            self.match(HiveParser.LESSTHAN)
            self.state = 2675
            self.colTypeList()
            self.state = 2676
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(HiveParser.KW_UNION, 0)

        def KW_INTERSECT(self):
            return self.getToken(HiveParser.KW_INTERSECT, 0)

        def KW_EXCEPT(self):
            return self.getToken(HiveParser.KW_EXCEPT, 0)

        def KW_MINUS(self):
            return self.getToken(HiveParser.KW_MINUS, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_setOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperator" ):
                listener.enterSetOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperator" ):
                listener.exitSetOperator(self)




    def setOperator(self):

        localctx = HiveParser.SetOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_setOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            _la = self._input.LA(1)
            if not(_la==107 or _la==157 or _la==197 or _la==345):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==92:
                self.state = 2679
                _la = self._input.LA(1)
                if not(_la==7 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.w = None # WithClauseContext

        def queryStatementExpressionBody(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionBodyContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HiveParser.WithClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_queryStatementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatementExpression" ):
                listener.enterQueryStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatementExpression" ):
                listener.exitQueryStatementExpression(self)




    def queryStatementExpression(self):

        localctx = HiveParser.QueryStatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_queryStatementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 2682
                localctx.w = self.withClause()


            self.state = 2685
            self.queryStatementExpressionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromStatement(self):
            return self.getTypedRuleContext(HiveParser.FromStatementContext,0)


        def regularBody(self):
            return self.getTypedRuleContext(HiveParser.RegularBodyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_queryStatementExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatementExpressionBody" ):
                listener.enterQueryStatementExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatementExpressionBody" ):
                listener.exitQueryStatementExpressionBody(self)




    def queryStatementExpressionBody(self):

        localctx = HiveParser.QueryStatementExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_queryStatementExpressionBody)
        try:
            self.state = 2689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2687
                self.fromStatement()
                pass
            elif token in [155, 190, 258, 288, 363, 386]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2688
                self.regularBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def cteStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.CteStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.CteStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = HiveParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_withClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2691
            self.match(HiveParser.KW_WITH)
            self.state = 2692
            self.cteStatement()
            self.state = 2697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2693
                self.match(HiveParser.COMMA)
                self.state = 2694
                self.cteStatement()
                self.state = 2699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colAliases = None # ColumnNameListContext

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_cteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCteStatement" ):
                listener.enterCteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCteStatement" ):
                listener.exitCteStatement(self)




    def cteStatement(self):

        localctx = HiveParser.CteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_cteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            self.id_()
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 2701
                self.match(HiveParser.LPAREN)
                self.state = 2702
                localctx.colAliases = self.columnNameList()
                self.state = 2703
                self.match(HiveParser.RPAREN)


            self.state = 2707
            self.match(HiveParser.KW_AS)
            self.state = 2708
            self.match(HiveParser.LPAREN)
            self.state = 2709
            self.queryStatementExpression()
            self.state = 2710
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.u = None # SetOperatorContext
            self.r = None # SingleFromStatementContext

        def singleFromStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SingleFromStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.SingleFromStatementContext,i)


        def setOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SetOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.SetOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)




    def fromStatement(self):

        localctx = HiveParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_fromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            self.singleFromStatement()
            self.state = 2718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107 or _la==157 or _la==197 or _la==345:
                self.state = 2713
                localctx.u = self.setOperator()
                self.state = 2714
                localctx.r = self.singleFromStatement()
                self.state = 2720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._body = None # BodyContext
            self.b = list() # of BodyContexts

        def fromClause(self):
            return self.getTypedRuleContext(HiveParser.FromClauseContext,0)


        def body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.BodyContext)
            else:
                return self.getTypedRuleContext(HiveParser.BodyContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_singleFromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFromStatement" ):
                listener.enterSingleFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFromStatement" ):
                listener.exitSingleFromStatement(self)




    def singleFromStatement(self):

        localctx = HiveParser.SingleFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_singleFromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2721
            self.fromClause()
            self.state = 2723 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2722
                localctx._body = self.body()
                localctx.b.append(localctx._body)
                self.state = 2725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==155 or _la==190 or _la==258 or _la==288):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegularBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i = None # InsertClauseContext
            self.s = None # SelectStatementContext

        def insertClause(self):
            return self.getTypedRuleContext(HiveParser.InsertClauseContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_regularBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularBody" ):
                listener.enterRegularBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularBody" ):
                listener.exitRegularBody(self)




    def regularBody(self):

        localctx = HiveParser.RegularBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_regularBody)
        try:
            self.state = 2731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2727
                localctx.i = self.insertClause()
                self.state = 2728
                localctx.s = self.selectStatement()
                pass
            elif token in [190, 258, 288, 363, 386]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2730
                self.selectStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s = None # SelectClauseContext
            self.f = None # FromClauseContext
            self.w = None # WhereClauseContext
            self.g = None # GroupByClauseContext
            self.h = None # HavingClauseContext
            self.win = None # Window_clauseContext
            self.q = None # QualifyClauseContext

        def selectClause(self):
            return self.getTypedRuleContext(HiveParser.SelectClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HiveParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HiveParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(HiveParser.HavingClauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(HiveParser.Window_clauseContext,0)


        def qualifyClause(self):
            return self.getTypedRuleContext(HiveParser.QualifyClauseContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def valuesSource(self):
            return self.getTypedRuleContext(HiveParser.ValuesSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_atomSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomSelectStatement" ):
                listener.enterAtomSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomSelectStatement" ):
                listener.exitAtomSelectStatement(self)




    def atomSelectStatement(self):

        localctx = HiveParser.AtomSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_atomSelectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [190, 258, 288]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2733
                localctx.s = self.selectClause()
                self.state = 2735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 2734
                    localctx.f = self.fromClause()


                self.state = 2738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 2737
                    localctx.w = self.whereClause()


                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 2740
                    localctx.g = self.groupByClause()


                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2743
                    localctx.h = self.havingClause()


                self.state = 2747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==374:
                    self.state = 2746
                    localctx.win = self.window_clause()


                self.state = 2750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==246:
                    self.state = 2749
                    localctx.q = self.qualifyClause()


                pass
            elif token in [386]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2752
                self.match(HiveParser.LPAREN)
                self.state = 2753
                self.selectStatement()
                self.state = 2754
                self.match(HiveParser.RPAREN)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2756
                self.valuesSource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.a = None # AtomSelectStatementContext
            self.set_ = None # SetOpSelectStatementContext
            self.o = None # OrderByClauseContext
            self.c = None # ClusterByClauseContext
            self.d = None # DistributeByClauseContext
            self.sort = None # SortByClauseContext
            self.l = None # LimitClauseContext

        def atomSelectStatement(self):
            return self.getTypedRuleContext(HiveParser.AtomSelectStatementContext,0)


        def setOpSelectStatement(self):
            return self.getTypedRuleContext(HiveParser.SetOpSelectStatementContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)




    def selectStatement(self):

        localctx = HiveParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2759
            localctx.a = self.atomSelectStatement()
            self.state = 2761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107 or _la==157 or _la==197 or _la==345:
                self.state = 2760
                localctx.set_ = self.setOpSelectStatement()


            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 2763
                localctx.o = self.orderByClause()


            self.state = 2767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 2766
                localctx.c = self.clusterByClause()


            self.state = 2770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 2769
                localctx.d = self.distributeByClause()


            self.state = 2773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==303:
                self.state = 2772
                localctx.sort = self.sortByClause()


            self.state = 2776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 2775
                localctx.l = self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOpSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.u = None # SetOperatorContext
            self.b = None # AtomSelectStatementContext

        def setOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SetOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.SetOperatorContext,i)


        def atomSelectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AtomSelectStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.AtomSelectStatementContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_setOpSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOpSelectStatement" ):
                listener.enterSetOpSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOpSelectStatement" ):
                listener.exitSetOpSelectStatement(self)




    def setOpSelectStatement(self):

        localctx = HiveParser.SetOpSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_setOpSelectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2778
                localctx.u = self.setOperator()
                self.state = 2779
                localctx.b = self.atomSelectStatement()
                self.state = 2783 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==107 or _la==157 or _la==197 or _la==345):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementWithCTEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.w = None # WithClauseContext

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HiveParser.WithClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectStatementWithCTE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatementWithCTE" ):
                listener.enterSelectStatementWithCTE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatementWithCTE" ):
                listener.exitSelectStatementWithCTE(self)




    def selectStatementWithCTE(self):

        localctx = HiveParser.SelectStatementWithCTEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_selectStatementWithCTE)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 2785
                localctx.w = self.withClause()


            self.state = 2788
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertClause(self):
            return self.getTypedRuleContext(HiveParser.InsertClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(HiveParser.SelectClauseContext,0)


        def lateralView(self):
            return self.getTypedRuleContext(HiveParser.LateralViewContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HiveParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(HiveParser.HavingClauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(HiveParser.Window_clauseContext,0)


        def qualifyClause(self):
            return self.getTypedRuleContext(HiveParser.QualifyClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = HiveParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.state = 2859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2790
                self.insertClause()
                self.state = 2791
                self.selectClause()
                self.state = 2793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171 or _la==384:
                    self.state = 2792
                    self.lateralView()


                self.state = 2796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 2795
                    self.whereClause()


                self.state = 2799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 2798
                    self.groupByClause()


                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2801
                    self.havingClause()


                self.state = 2805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==374:
                    self.state = 2804
                    self.window_clause()


                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==246:
                    self.state = 2807
                    self.qualifyClause()


                self.state = 2811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 2810
                    self.orderByClause()


                self.state = 2814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2813
                    self.clusterByClause()


                self.state = 2817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2816
                    self.distributeByClause()


                self.state = 2820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 2819
                    self.sortByClause()


                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 2822
                    self.limitClause()


                pass
            elif token in [190, 258, 288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2825
                self.selectClause()
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171 or _la==384:
                    self.state = 2826
                    self.lateralView()


                self.state = 2830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 2829
                    self.whereClause()


                self.state = 2833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 2832
                    self.groupByClause()


                self.state = 2836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2835
                    self.havingClause()


                self.state = 2839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==374:
                    self.state = 2838
                    self.window_clause()


                self.state = 2842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==246:
                    self.state = 2841
                    self.qualifyClause()


                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 2844
                    self.orderByClause()


                self.state = 2848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2847
                    self.clusterByClause()


                self.state = 2851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2850
                    self.distributeByClause()


                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 2853
                    self.sortByClause()


                self.state = 2857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 2856
                    self.limitClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.targetCols = None # ColumnNameListContext

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def destination(self):
            return self.getTypedRuleContext(HiveParser.DestinationContext,0)


        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_insertClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertClause" ):
                listener.enterInsertClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertClause" ):
                listener.exitInsertClause(self)




    def insertClause(self):

        localctx = HiveParser.InsertClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_insertClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            self.match(HiveParser.KW_INSERT)
            self.state = 2878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [225]:
                self.state = 2862
                self.match(HiveParser.KW_OVERWRITE)
                self.state = 2863
                self.destination()
                self.state = 2865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 2864
                    self.ifNotExists()


                pass
            elif token in [159]:
                self.state = 2867
                self.match(HiveParser.KW_INTO)
                self.state = 2869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==318:
                    self.state = 2868
                    self.match(HiveParser.KW_TABLE)


                self.state = 2871
                self.tableOrPartition()
                self.state = 2876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2872
                    self.match(HiveParser.LPAREN)
                    self.state = 2873
                    localctx.targetCols = self.columnNameList()
                    self.state = 2874
                    self.match(HiveParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.local = None # Token

        def KW_DIRECTORY(self):
            return self.getToken(HiveParser.KW_DIRECTORY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_destination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestination" ):
                listener.enterDestination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestination" ):
                listener.exitDestination(self)




    def destination(self):

        localctx = HiveParser.DestinationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_destination)
        self._la = 0 # Token type
        try:
            self.state = 2893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90, 180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 2880
                    localctx.local = self.match(HiveParser.KW_LOCAL)


                self.state = 2883
                self.match(HiveParser.KW_DIRECTORY)
                self.state = 2884
                self.match(HiveParser.StringLiteral)
                self.state = 2886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==281:
                    self.state = 2885
                    self.tableRowFormat()


                self.state = 2889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==310:
                    self.state = 2888
                    self.tableFileFormat()


                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2891
                self.match(HiveParser.KW_TABLE)
                self.state = 2892
                self.tableOrPartition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # Token
            self.num = None # Token

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = HiveParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2895
            self.match(HiveParser.KW_LIMIT)
            self.state = 2904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2896
                    localctx.offset = self.match(HiveParser.Number)
                    self.state = 2897
                    self.match(HiveParser.COMMA)


                self.state = 2900
                localctx.num = self.match(HiveParser.Number)
                pass

            elif la_ == 2:
                self.state = 2901
                localctx.num = self.match(HiveParser.Number)
                self.state = 2902
                self.match(HiveParser.KW_OFFSET)
                self.state = 2903
                localctx.offset = self.match(HiveParser.Number)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = HiveParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2906
            self.match(HiveParser.KW_DELETE)
            self.state = 2907
            self.match(HiveParser.KW_FROM)
            self.state = 2908
            self.tableName()
            self.state = 2910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 2909
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAssignmentClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableOrColumn(self):
            return self.getTypedRuleContext(HiveParser.TableOrColumnContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def precedencePlusExpressionOrDefault(self):
            return self.getTypedRuleContext(HiveParser.PrecedencePlusExpressionOrDefaultContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnAssignmentClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAssignmentClause" ):
                listener.enterColumnAssignmentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAssignmentClause" ):
                listener.exitColumnAssignmentClause(self)




    def columnAssignmentClause(self):

        localctx = HiveParser.ColumnAssignmentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_columnAssignmentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2912
            self.tableOrColumn()
            self.state = 2913
            self.match(HiveParser.EQUAL)
            self.state = 2914
            self.precedencePlusExpressionOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedencePlusExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultValue(self):
            return self.getTypedRuleContext(HiveParser.DefaultValueContext,0)


        def precedencePlusExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedencePlusExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedencePlusExpressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedencePlusExpressionOrDefault" ):
                listener.enterPrecedencePlusExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedencePlusExpressionOrDefault" ):
                listener.exitPrecedencePlusExpressionOrDefault(self)




    def precedencePlusExpressionOrDefault(self):

        localctx = HiveParser.PrecedencePlusExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_precedencePlusExpressionOrDefault)
        try:
            self.state = 2918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2916
                self.defaultValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2917
                self.precedencePlusExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def columnAssignmentClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnAssignmentClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnAssignmentClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_setColumnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetColumnsClause" ):
                listener.enterSetColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetColumnsClause" ):
                listener.exitSetColumnsClause(self)




    def setColumnsClause(self):

        localctx = HiveParser.SetColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_setColumnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2920
            self.match(HiveParser.KW_SET)
            self.state = 2921
            self.columnAssignmentClause()
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2922
                self.match(HiveParser.COMMA)
                self.state = 2923
                self.columnAssignmentClause()
                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def setColumnsClause(self):
            return self.getTypedRuleContext(HiveParser.SetColumnsClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = HiveParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(HiveParser.KW_UPDATE)
            self.state = 2930
            self.tableName()
            self.state = 2931
            self.setColumnsClause()
            self.state = 2933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 2932
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.StartTransactionStatementContext,0)


        def commitStatement(self):
            return self.getTypedRuleContext(HiveParser.CommitStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(HiveParser.RollbackStatementContext,0)


        def setAutoCommitStatement(self):
            return self.getTypedRuleContext(HiveParser.SetAutoCommitStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sqlTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlTransactionStatement" ):
                listener.enterSqlTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlTransactionStatement" ):
                listener.exitSqlTransactionStatement(self)




    def sqlTransactionStatement(self):

        localctx = HiveParser.SqlTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_sqlTransactionStatement)
        try:
            self.state = 2939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [307]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2935
                self.startTransactionStatement()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2936
                self.commitStatement()
                pass
            elif token in [279]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2937
                self.rollbackStatement()
                pass
            elif token in [293]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2938
                self.setAutoCommitStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_START(self):
            return self.getToken(HiveParser.KW_START, 0)

        def KW_TRANSACTION(self):
            return self.getToken(HiveParser.KW_TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(HiveParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_startTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransactionStatement" ):
                listener.enterStartTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransactionStatement" ):
                listener.exitStartTransactionStatement(self)




    def startTransactionStatement(self):

        localctx = HiveParser.StartTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_startTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2941
            self.match(HiveParser.KW_START)
            self.state = 2942
            self.match(HiveParser.KW_TRANSACTION)
            self.state = 2951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==161 or _la==251:
                self.state = 2943
                self.transactionMode()
                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 2944
                    self.match(HiveParser.COMMA)
                    self.state = 2945
                    self.transactionMode()
                    self.state = 2950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isolationLevel(self):
            return self.getTypedRuleContext(HiveParser.IsolationLevelContext,0)


        def transactionAccessMode(self):
            return self.getTypedRuleContext(HiveParser.TransactionAccessModeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = HiveParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_transactionMode)
        try:
            self.state = 2955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2953
                self.isolationLevel()
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2954
                self.transactionAccessMode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ(self):
            return self.getToken(HiveParser.KW_READ, 0)

        def KW_ONLY(self):
            return self.getToken(HiveParser.KW_ONLY, 0)

        def KW_WRITE(self):
            return self.getToken(HiveParser.KW_WRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_transactionAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)




    def transactionAccessMode(self):

        localctx = HiveParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_transactionAccessMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.match(HiveParser.KW_READ)
            self.state = 2958
            _la = self._input.LA(1)
            if not(_la==215 or _la==379):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ISOLATION(self):
            return self.getToken(HiveParser.KW_ISOLATION, 0)

        def KW_LEVEL(self):
            return self.getToken(HiveParser.KW_LEVEL, 0)

        def levelOfIsolation(self):
            return self.getTypedRuleContext(HiveParser.LevelOfIsolationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)




    def isolationLevel(self):

        localctx = HiveParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_isolationLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2960
            self.match(HiveParser.KW_ISOLATION)
            self.state = 2961
            self.match(HiveParser.KW_LEVEL)
            self.state = 2962
            self.levelOfIsolation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SNAPSHOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_levelOfIsolation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelOfIsolation" ):
                listener.enterLevelOfIsolation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelOfIsolation" ):
                listener.exitLevelOfIsolation(self)




    def levelOfIsolation(self):

        localctx = HiveParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_levelOfIsolation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2964
            self.match(HiveParser.KW_SNAPSHOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMIT(self):
            return self.getToken(HiveParser.KW_COMMIT, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_commitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitStatement" ):
                listener.enterCommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitStatement" ):
                listener.exitCommitStatement(self)




    def commitStatement(self):

        localctx = HiveParser.CommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_commitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self.match(HiveParser.KW_COMMIT)
            self.state = 2968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==377:
                self.state = 2967
                self.match(HiveParser.KW_WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROLLBACK(self):
            return self.getToken(HiveParser.KW_ROLLBACK, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = HiveParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2970
            self.match(HiveParser.KW_ROLLBACK)
            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==377:
                self.state = 2971
                self.match(HiveParser.KW_WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutoCommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_AUTOCOMMIT(self):
            return self.getToken(HiveParser.KW_AUTOCOMMIT, 0)

        def booleanValueTok(self):
            return self.getTypedRuleContext(HiveParser.BooleanValueTokContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_setAutoCommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutoCommitStatement" ):
                listener.enterSetAutoCommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutoCommitStatement" ):
                listener.exitSetAutoCommitStatement(self)




    def setAutoCommitStatement(self):

        localctx = HiveParser.SetAutoCommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_setAutoCommitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2974
            self.match(HiveParser.KW_SET)
            self.state = 2975
            self.match(HiveParser.KW_AUTOCOMMIT)
            self.state = 2976
            self.booleanValueTok()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbortTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def getRuleIndex(self):
            return HiveParser.RULE_abortTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbortTransactionStatement" ):
                listener.enterAbortTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbortTransactionStatement" ):
                listener.exitAbortTransactionStatement(self)




    def abortTransactionStatement(self):

        localctx = HiveParser.AbortTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_abortTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2978
            self.match(HiveParser.KW_ABORT)
            self.state = 2979
            self.match(HiveParser.KW_TRANSACTIONS)
            self.state = 2981 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2980
                self.match(HiveParser.Number)
                self.state = 2983 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==417):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbortCompactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def getRuleIndex(self):
            return HiveParser.RULE_abortCompactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbortCompactionStatement" ):
                listener.enterAbortCompactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbortCompactionStatement" ):
                listener.exitAbortCompactionStatement(self)




    def abortCompactionStatement(self):

        localctx = HiveParser.AbortCompactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_abortCompactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self.match(HiveParser.KW_ABORT)
            self.state = 2986
            self.match(HiveParser.KW_COMPACTIONS)
            self.state = 2988 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2987
                self.match(HiveParser.Number)
                self.state = 2990 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==417):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MERGE(self):
            return self.getToken(HiveParser.KW_MERGE, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def joinSourcePart(self):
            return self.getTypedRuleContext(HiveParser.JoinSourcePartContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def whenClauses(self):
            return self.getTypedRuleContext(HiveParser.WhenClausesContext,0)


        def QUERY_HINT(self):
            return self.getToken(HiveParser.QUERY_HINT, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_mergeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeStatement" ):
                listener.enterMergeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeStatement" ):
                listener.exitMergeStatement(self)




    def mergeStatement(self):

        localctx = HiveParser.MergeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_mergeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.match(HiveParser.KW_MERGE)
            self.state = 2994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 2993
                self.match(HiveParser.QUERY_HINT)


            self.state = 2996
            self.match(HiveParser.KW_INTO)
            self.state = 2997
            self.tableName()
            self.state = 3002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591826814) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                self.state = 2999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 2998
                    self.match(HiveParser.KW_AS)


                self.state = 3001
                self.id_()


            self.state = 3004
            self.match(HiveParser.KW_USING)
            self.state = 3005
            self.joinSourcePart()
            self.state = 3006
            self.match(HiveParser.KW_ON)
            self.state = 3007
            self.expression()
            self.state = 3008
            self.whenClauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenMatchedAndClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.WhenMatchedAndClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.WhenMatchedAndClauseContext,i)


        def whenMatchedThenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.WhenMatchedThenClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.WhenMatchedThenClauseContext,i)


        def whenNotMatchedClause(self):
            return self.getTypedRuleContext(HiveParser.WhenNotMatchedClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClauses" ):
                listener.enterWhenClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClauses" ):
                listener.exitWhenClauses(self)




    def whenClauses(self):

        localctx = HiveParser.WhenClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_whenClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3012
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                    if la_ == 1:
                        self.state = 3010
                        self.whenMatchedAndClause()
                        pass

                    elif la_ == 2:
                        self.state = 3011
                        self.whenMatchedThenClause()
                        pass

             
                self.state = 3016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

            self.state = 3018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==371:
                self.state = 3017
                self.whenNotMatchedClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenNotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.targetCols = None # ColumnParenthesesListContext

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_VALUES(self):
            return self.getToken(HiveParser.KW_VALUES, 0)

        def valueRowConstructor(self):
            return self.getTypedRuleContext(HiveParser.ValueRowConstructorContext,0)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def columnParenthesesList(self):
            return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenNotMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenNotMatchedClause" ):
                listener.enterWhenNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenNotMatchedClause" ):
                listener.exitWhenNotMatchedClause(self)




    def whenNotMatchedClause(self):

        localctx = HiveParser.WhenNotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_whenNotMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3020
            self.match(HiveParser.KW_WHEN)
            self.state = 3021
            self.match(HiveParser.KW_NOT)
            self.state = 3022
            self.match(HiveParser.KW_MATCHED)
            self.state = 3025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 3023
                self.match(HiveParser.KW_AND)
                self.state = 3024
                self.expression()


            self.state = 3027
            self.match(HiveParser.KW_THEN)
            self.state = 3028
            self.match(HiveParser.KW_INSERT)
            self.state = 3030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 3029
                localctx.targetCols = self.columnParenthesesList()


            self.state = 3032
            self.match(HiveParser.KW_VALUES)
            self.state = 3033
            self.valueRowConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenMatchedAndClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def updateOrDelete(self):
            return self.getTypedRuleContext(HiveParser.UpdateOrDeleteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenMatchedAndClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenMatchedAndClause" ):
                listener.enterWhenMatchedAndClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenMatchedAndClause" ):
                listener.exitWhenMatchedAndClause(self)




    def whenMatchedAndClause(self):

        localctx = HiveParser.WhenMatchedAndClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_whenMatchedAndClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            self.match(HiveParser.KW_WHEN)
            self.state = 3036
            self.match(HiveParser.KW_MATCHED)
            self.state = 3037
            self.match(HiveParser.KW_AND)
            self.state = 3038
            self.expression()
            self.state = 3039
            self.match(HiveParser.KW_THEN)
            self.state = 3040
            self.updateOrDelete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenMatchedThenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def updateOrDelete(self):
            return self.getTypedRuleContext(HiveParser.UpdateOrDeleteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenMatchedThenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenMatchedThenClause" ):
                listener.enterWhenMatchedThenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenMatchedThenClause" ):
                listener.exitWhenMatchedThenClause(self)




    def whenMatchedThenClause(self):

        localctx = HiveParser.WhenMatchedThenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_whenMatchedThenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3042
            self.match(HiveParser.KW_WHEN)
            self.state = 3043
            self.match(HiveParser.KW_MATCHED)
            self.state = 3044
            self.match(HiveParser.KW_THEN)
            self.state = 3045
            self.updateOrDelete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateOrDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def setColumnsClause(self):
            return self.getTypedRuleContext(HiveParser.SetColumnsClauseContext,0)


        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_updateOrDelete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateOrDelete" ):
                listener.enterUpdateOrDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateOrDelete" ):
                listener.exitUpdateOrDelete(self)




    def updateOrDelete(self):

        localctx = HiveParser.UpdateOrDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_updateOrDelete)
        try:
            self.state = 3050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [354]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3047
                self.match(HiveParser.KW_UPDATE)
                self.state = 3048
                self.setColumnsClause()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3049
                self.match(HiveParser.KW_DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_killQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillQueryStatement" ):
                listener.enterKillQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillQueryStatement" ):
                listener.exitKillQueryStatement(self)




    def killQueryStatement(self):

        localctx = HiveParser.KillQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_killQueryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3052
            self.match(HiveParser.KW_KILL)
            self.state = 3053
            self.match(HiveParser.KW_QUERY)
            self.state = 3055 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3054
                self.match(HiveParser.StringLiteral)
                self.state = 3057 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==412):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactionIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.compactId = None # Token

        def KW_COMPACT_ID(self):
            return self.getToken(HiveParser.KW_COMPACT_ID, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_compactionId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactionId" ):
                listener.enterCompactionId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactionId" ):
                listener.exitCompactionId(self)




    def compactionId(self):

        localctx = HiveParser.CompactionIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_compactionId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3059
            self.match(HiveParser.KW_COMPACT_ID)
            self.state = 3060
            self.match(HiveParser.EQUAL)
            self.state = 3061
            localctx.compactId = self.match(HiveParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactionPoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.poolName = None # Token

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_compactionPool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactionPool" ):
                listener.enterCompactionPool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactionPool" ):
                listener.exitCompactionPool(self)




    def compactionPool(self):

        localctx = HiveParser.CompactionPoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_compactionPool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3063
            self.match(HiveParser.KW_POOL)
            self.state = 3064
            localctx.poolName = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.compactType = None # Token

        def KW_TYPE(self):
            return self.getToken(HiveParser.KW_TYPE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_compactionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactionType" ):
                listener.enterCompactionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactionType" ):
                listener.exitCompactionType(self)




    def compactionType(self):

        localctx = HiveParser.CompactionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_compactionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            self.match(HiveParser.KW_TYPE)
            self.state = 3067
            localctx.compactType = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactionStatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.status = None # Token

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_compactionStatus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactionStatus" ):
                listener.enterCompactionStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactionStatus" ):
                listener.exitCompactionStatus(self)




    def compactionStatus(self):

        localctx = HiveParser.CompactionStatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_compactionStatus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3069
            self.match(HiveParser.KW_STATUS)
            self.state = 3070
            localctx.status = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tableNameTree = None # TableNameContext

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def alterTableStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterTableStatementSuffixContext,0)


        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def alterViewStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterViewStatementSuffixContext,0)


        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def alterMaterializedViewStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewStatementSuffixContext,0)


        def db_schema(self):
            return self.getTypedRuleContext(HiveParser.Db_schemaContext,0)


        def alterDatabaseStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseStatementSuffixContext,0)


        def KW_DATACONNECTOR(self):
            return self.getToken(HiveParser.KW_DATACONNECTOR, 0)

        def alterDataConnectorStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterDataConnectorStatementSuffixContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatement" ):
                listener.enterAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatement" ):
                listener.exitAlterStatement(self)




    def alterStatement(self):

        localctx = HiveParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            self.match(HiveParser.KW_ALTER)
            self.state = 3094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [318]:
                self.state = 3073
                self.match(HiveParser.KW_TABLE)
                self.state = 3074
                self.tableName()
                self.state = 3075
                self.alterTableStatementSuffix()
                pass
            elif token in [367]:
                self.state = 3077
                self.match(HiveParser.KW_VIEW)
                self.state = 3078
                self.tableName()
                self.state = 3080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 3079
                    self.match(HiveParser.KW_AS)


                self.state = 3082
                self.alterViewStatementSuffix()
                pass
            elif token in [194]:
                self.state = 3084
                self.match(HiveParser.KW_MATERIALIZED)
                self.state = 3085
                self.match(HiveParser.KW_VIEW)
                self.state = 3086
                localctx.tableNameTree = self.tableName()
                self.state = 3087
                self.alterMaterializedViewStatementSuffix()
                pass
            elif token in [67, 285]:
                self.state = 3089
                self.db_schema()
                self.state = 3090
                self.alterDatabaseStatementSuffix()
                pass
            elif token in [69]:
                self.state = 3092
                self.match(HiveParser.KW_DATACONNECTOR)
                self.state = 3093
                self.alterDataConnectorStatementSuffix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatementSuffixRename(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameContext,0)


        def alterStatementSuffixDropPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropPartitionsContext,0)


        def alterStatementSuffixAddPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsContext,0)


        def alterStatementSuffixTouch(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixTouchContext,0)


        def alterStatementSuffixArchive(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixArchiveContext,0)


        def alterStatementSuffixUnArchive(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUnArchiveContext,0)


        def alterStatementSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixPropertiesContext,0)


        def alterStatementSuffixSkewedby(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSkewedbyContext,0)


        def alterStatementSuffixExchangePartition(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixExchangePartitionContext,0)


        def alterStatementPartitionKeyType(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementPartitionKeyTypeContext,0)


        def alterStatementSuffixDropConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropConstraintContext,0)


        def alterStatementSuffixAddConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddConstraintContext,0)


        def alterTblPartitionStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterTblPartitionStatementSuffixContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def alterStatementSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSetOwnerContext,0)


        def alterStatementSuffixSetPartSpec(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSetPartSpecContext,0)


        def alterStatementSuffixExecute(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixExecuteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTableStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableStatementSuffix" ):
                listener.enterAlterTableStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableStatementSuffix" ):
                listener.exitAlterTableStatementSuffix(self)




    def alterTableStatementSuffix(self):

        localctx = HiveParser.AlterTableStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_alterTableStatementSuffix)
        try:
            self.state = 3115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3096
                self.alterStatementSuffixRename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3097
                self.alterStatementSuffixDropPartitions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3098
                self.alterStatementSuffixAddPartitions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3099
                self.alterStatementSuffixTouch()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3100
                self.alterStatementSuffixArchive()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3101
                self.alterStatementSuffixUnArchive()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3102
                self.alterStatementSuffixProperties()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3103
                self.alterStatementSuffixSkewedby()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3104
                self.alterStatementSuffixExchangePartition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3105
                self.alterStatementPartitionKeyType()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3106
                self.alterStatementSuffixDropConstraint()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3107
                self.alterStatementSuffixAddConstraint()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3108
                self.alterTblPartitionStatementSuffix()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3109
                self.partitionSpec()
                self.state = 3110
                self.alterTblPartitionStatementSuffix()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3112
                self.alterStatementSuffixSetOwner()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3113
                self.alterStatementSuffixSetPartSpec()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3114
                self.alterStatementSuffixExecute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTblPartitionStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatementSuffixFileFormat(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixFileFormatContext,0)


        def alterStatementSuffixLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixLocationContext,0)


        def alterStatementSuffixMergeFiles(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixMergeFilesContext,0)


        def alterStatementSuffixSerdeProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSerdePropertiesContext,0)


        def alterStatementSuffixRenamePart(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenamePartContext,0)


        def alterStatementSuffixBucketNum(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixBucketNumContext,0)


        def alterTblPartitionStatementSuffixSkewedLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext,0)


        def alterStatementSuffixClusterbySortby(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixClusterbySortbyContext,0)


        def alterStatementSuffixCompact(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixCompactContext,0)


        def alterStatementSuffixUpdateStatsCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateStatsColContext,0)


        def alterStatementSuffixUpdateStats(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateStatsContext,0)


        def alterStatementSuffixRenameCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameColContext,0)


        def alterStatementSuffixAddCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddColContext,0)


        def alterStatementSuffixUpdateColumns(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateColumnsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTblPartitionStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTblPartitionStatementSuffix" ):
                listener.enterAlterTblPartitionStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTblPartitionStatementSuffix" ):
                listener.exitAlterTblPartitionStatementSuffix(self)




    def alterTblPartitionStatementSuffix(self):

        localctx = HiveParser.AlterTblPartitionStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_alterTblPartitionStatementSuffix)
        try:
            self.state = 3131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3117
                self.alterStatementSuffixFileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3118
                self.alterStatementSuffixLocation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3119
                self.alterStatementSuffixMergeFiles()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3120
                self.alterStatementSuffixSerdeProperties()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3121
                self.alterStatementSuffixRenamePart()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3122
                self.alterStatementSuffixBucketNum()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3123
                self.alterTblPartitionStatementSuffixSkewedLocation()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3124
                self.alterStatementSuffixClusterbySortby()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3125
                self.alterStatementSuffixCompact()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3126
                self.alterStatementSuffixUpdateStatsCol()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3127
                self.alterStatementSuffixUpdateStats()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3128
                self.alterStatementSuffixRenameCol()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3129
                self.alterStatementSuffixAddCol()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3130
                self.alterStatementSuffixUpdateColumns()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementPartitionKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameType(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementPartitionKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementPartitionKeyType" ):
                listener.enterAlterStatementPartitionKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementPartitionKeyType" ):
                listener.exitAlterStatementPartitionKeyType(self)




    def alterStatementPartitionKeyType(self):

        localctx = HiveParser.AlterStatementPartitionKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_alterStatementPartitionKeyType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3133
            self.match(HiveParser.KW_PARTITION)
            self.state = 3134
            self.match(HiveParser.KW_COLUMN)
            self.state = 3135
            self.match(HiveParser.LPAREN)
            self.state = 3136
            self.columnNameType()
            self.state = 3137
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterViewSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterViewSuffixPropertiesContext,0)


        def alterStatementSuffixRename(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameContext,0)


        def alterStatementSuffixAddPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsContext,0)


        def alterStatementSuffixDropPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropPartitionsContext,0)


        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterViewStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewStatementSuffix" ):
                listener.enterAlterViewStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewStatementSuffix" ):
                listener.exitAlterViewStatementSuffix(self)




    def alterViewStatementSuffix(self):

        localctx = HiveParser.AlterViewStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_alterViewStatementSuffix)
        try:
            self.state = 3144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293, 352]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3139
                self.alterViewSuffixProperties()
                pass
            elif token in [264]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3140
                self.alterStatementSuffixRename()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3141
                self.alterStatementSuffixAddPartitions()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3142
                self.alterStatementSuffixDropPartitions()
                pass
            elif token in [190, 258, 288, 363, 375, 386]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3143
                self.selectStatementWithCTE()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterMaterializedViewSuffixRewrite(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewSuffixRewriteContext,0)


        def alterMaterializedViewSuffixRebuild(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewSuffixRebuildContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewStatementSuffix" ):
                listener.enterAlterMaterializedViewStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewStatementSuffix" ):
                listener.exitAlterMaterializedViewStatementSuffix(self)




    def alterMaterializedViewStatementSuffix(self):

        localctx = HiveParser.AlterMaterializedViewStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_alterMaterializedViewStatementSuffix)
        try:
            self.state = 3148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3146
                self.alterMaterializedViewSuffixRewrite()
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3147
                self.alterMaterializedViewSuffixRebuild()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewSuffixRewriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mvRewriteFlag = None # RewriteEnabledContext
            self.mvRewriteFlag2 = None # RewriteDisabledContext

        def rewriteEnabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteEnabledContext,0)


        def rewriteDisabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteDisabledContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewSuffixRewrite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewSuffixRewrite" ):
                listener.enterAlterMaterializedViewSuffixRewrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewSuffixRewrite" ):
                listener.exitAlterMaterializedViewSuffixRewrite(self)




    def alterMaterializedViewSuffixRewrite(self):

        localctx = HiveParser.AlterMaterializedViewSuffixRewriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_alterMaterializedViewSuffixRewrite)
        try:
            self.state = 3152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3150
                localctx.mvRewriteFlag = self.rewriteEnabled()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3151
                localctx.mvRewriteFlag2 = self.rewriteDisabled()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewSuffixRebuildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewSuffixRebuild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewSuffixRebuild" ):
                listener.enterAlterMaterializedViewSuffixRebuild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewSuffixRebuild" ):
                listener.exitAlterMaterializedViewSuffixRebuild(self)




    def alterMaterializedViewSuffixRebuild(self):

        localctx = HiveParser.AlterMaterializedViewSuffixRebuildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_alterMaterializedViewSuffixRebuild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3154
            self.match(HiveParser.KW_REBUILD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterDatabaseSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixPropertiesContext,0)


        def alterDatabaseSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixSetOwnerContext,0)


        def alterDatabaseSuffixSetLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixSetLocationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseStatementSuffix" ):
                listener.enterAlterDatabaseStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseStatementSuffix" ):
                listener.exitAlterDatabaseStatementSuffix(self)




    def alterDatabaseStatementSuffix(self):

        localctx = HiveParser.AlterDatabaseStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_alterDatabaseStatementSuffix)
        try:
            self.state = 3159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3156
                self.alterDatabaseSuffixProperties()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3157
                self.alterDatabaseSuffixSetOwner()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3158
                self.alterDatabaseSuffixSetLocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def dbProperties(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixProperties" ):
                listener.enterAlterDatabaseSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixProperties" ):
                listener.exitAlterDatabaseSuffixProperties(self)




    def alterDatabaseSuffixProperties(self):

        localctx = HiveParser.AlterDatabaseSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_alterDatabaseSuffixProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            localctx.name = self.id_()
            self.state = 3162
            self.match(HiveParser.KW_SET)
            self.state = 3163
            self.match(HiveParser.KW_DBPROPERTIES)
            self.state = 3164
            self.dbProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetOwner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixSetOwner" ):
                listener.enterAlterDatabaseSuffixSetOwner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixSetOwner" ):
                listener.exitAlterDatabaseSuffixSetOwner(self)




    def alterDatabaseSuffixSetOwner(self):

        localctx = HiveParser.AlterDatabaseSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_alterDatabaseSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            localctx.dbName = self.id_()
            self.state = 3167
            self.match(HiveParser.KW_SET)
            self.state = 3168
            self.match(HiveParser.KW_OWNER)
            self.state = 3169
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context
            self.newLocation = None # Token

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def KW_MANAGEDLOCATION(self):
            return self.getToken(HiveParser.KW_MANAGEDLOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixSetLocation" ):
                listener.enterAlterDatabaseSuffixSetLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixSetLocation" ):
                listener.exitAlterDatabaseSuffixSetLocation(self)




    def alterDatabaseSuffixSetLocation(self):

        localctx = HiveParser.AlterDatabaseSuffixSetLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_alterDatabaseSuffixSetLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3171
            localctx.dbName = self.id_()
            self.state = 3172
            self.match(HiveParser.KW_SET)
            self.state = 3173
            _la = self._input.LA(1)
            if not(_la==181 or _la==188):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3174
            localctx.newLocation = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetManagedLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbName = None # Id_Context
            self.newLocation = None # Token

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_MANAGEDLOCATION(self):
            return self.getToken(HiveParser.KW_MANAGEDLOCATION, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetManagedLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixSetManagedLocation" ):
                listener.enterAlterDatabaseSuffixSetManagedLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixSetManagedLocation" ):
                listener.exitAlterDatabaseSuffixSetManagedLocation(self)




    def alterDatabaseSuffixSetManagedLocation(self):

        localctx = HiveParser.AlterDatabaseSuffixSetManagedLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_alterDatabaseSuffixSetManagedLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3176
            localctx.dbName = self.id_()
            self.state = 3177
            self.match(HiveParser.KW_SET)
            self.state = 3178
            self.match(HiveParser.KW_MANAGEDLOCATION)
            self.state = 3179
            localctx.newLocation = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixRename" ):
                listener.enterAlterStatementSuffixRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixRename" ):
                listener.exitAlterStatementSuffixRename(self)




    def alterStatementSuffixRename(self):

        localctx = HiveParser.AlterStatementSuffixRenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_alterStatementSuffixRename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3181
            self.match(HiveParser.KW_RENAME)
            self.state = 3182
            self.match(HiveParser.KW_TO)
            self.state = 3183
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.add = None # Token
            self.replace = None # Token

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddCol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddCol" ):
                listener.enterAlterStatementSuffixAddCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddCol" ):
                listener.exitAlterStatementSuffixAddCol(self)




    def alterStatementSuffixAddCol(self):

        localctx = HiveParser.AlterStatementSuffixAddColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_alterStatementSuffixAddCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.state = 3185
                localctx.add = self.match(HiveParser.KW_ADD)
                pass
            elif token in [268]:
                self.state = 3186
                localctx.replace = self.match(HiveParser.KW_REPLACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3189
            self.match(HiveParser.KW_COLUMNS)
            self.state = 3190
            self.match(HiveParser.LPAREN)
            self.state = 3191
            self.columnNameTypeList()
            self.state = 3192
            self.match(HiveParser.RPAREN)
            self.state = 3194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==272:
                self.state = 3193
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fk = None # AlterForeignKeyWithNameContext

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def alterConstraintWithName(self):
            return self.getTypedRuleContext(HiveParser.AlterConstraintWithNameContext,0)


        def alterForeignKeyWithName(self):
            return self.getTypedRuleContext(HiveParser.AlterForeignKeyWithNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddConstraint" ):
                listener.enterAlterStatementSuffixAddConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddConstraint" ):
                listener.exitAlterStatementSuffixAddConstraint(self)




    def alterStatementSuffixAddConstraint(self):

        localctx = HiveParser.AlterStatementSuffixAddConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_alterStatementSuffixAddConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3196
            self.match(HiveParser.KW_ADD)
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 3197
                localctx.fk = self.alterForeignKeyWithName()
                pass

            elif la_ == 2:
                self.state = 3198
                self.alterConstraintWithName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUpdateColumns" ):
                listener.enterAlterStatementSuffixUpdateColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUpdateColumns" ):
                listener.exitAlterStatementSuffixUpdateColumns(self)




    def alterStatementSuffixUpdateColumns(self):

        localctx = HiveParser.AlterStatementSuffixUpdateColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_alterStatementSuffixUpdateColumns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3201
            self.match(HiveParser.KW_UPDATE)
            self.state = 3202
            self.match(HiveParser.KW_COLUMNS)
            self.state = 3204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==272:
                self.state = 3203
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixDropConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cName = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixDropConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixDropConstraint" ):
                listener.enterAlterStatementSuffixDropConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixDropConstraint" ):
                listener.exitAlterStatementSuffixDropConstraint(self)




    def alterStatementSuffixDropConstraint(self):

        localctx = HiveParser.AlterStatementSuffixDropConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_alterStatementSuffixDropConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3206
            self.match(HiveParser.KW_DROP)
            self.state = 3207
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 3208
            localctx.cName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenameColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.oldName = None # Id_Context
            self.newName = None # Id_Context
            self.comment = None # Token

        def KW_CHANGE(self):
            return self.getToken(HiveParser.KW_CHANGE, 0)

        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def alterColumnConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterColumnConstraintContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def alterStatementChangeColPosition(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementChangeColPositionContext,0)


        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRenameCol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixRenameCol" ):
                listener.enterAlterStatementSuffixRenameCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixRenameCol" ):
                listener.exitAlterStatementSuffixRenameCol(self)




    def alterStatementSuffixRenameCol(self):

        localctx = HiveParser.AlterStatementSuffixRenameColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_alterStatementSuffixRenameCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            self.match(HiveParser.KW_CHANGE)
            self.state = 3212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 3211
                self.match(HiveParser.KW_COLUMN)


            self.state = 3214
            localctx.oldName = self.id_()
            self.state = 3215
            localctx.newName = self.id_()
            self.state = 3216
            self.colType()
            self.state = 3218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 1099511660545) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 9007233614479361) != 0) or _la==347:
                self.state = 3217
                self.alterColumnConstraint()


            self.state = 3222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 3220
                self.match(HiveParser.KW_COMMENT)
                self.state = 3221
                localctx.comment = self.match(HiveParser.StringLiteral)


            self.state = 3225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==125:
                self.state = 3224
                self.alterStatementChangeColPosition()


            self.state = 3228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==272:
                self.state = 3227
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateStatsColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # Id_Context
            self.comment = None # Token

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateStatsCol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUpdateStatsCol" ):
                listener.enterAlterStatementSuffixUpdateStatsCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUpdateStatsCol" ):
                listener.exitAlterStatementSuffixUpdateStatsCol(self)




    def alterStatementSuffixUpdateStatsCol(self):

        localctx = HiveParser.AlterStatementSuffixUpdateStatsColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_alterStatementSuffixUpdateStatsCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3230
            self.match(HiveParser.KW_UPDATE)
            self.state = 3231
            self.match(HiveParser.KW_STATISTICS)
            self.state = 3232
            self.match(HiveParser.KW_FOR)
            self.state = 3234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 3233
                self.match(HiveParser.KW_COLUMN)


            self.state = 3236
            localctx.colName = self.id_()
            self.state = 3237
            self.match(HiveParser.KW_SET)
            self.state = 3238
            self.tableProperties()
            self.state = 3241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 3239
                self.match(HiveParser.KW_COMMENT)
                self.state = 3240
                localctx.comment = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateStatsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateStats

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUpdateStats" ):
                listener.enterAlterStatementSuffixUpdateStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUpdateStats" ):
                listener.exitAlterStatementSuffixUpdateStats(self)




    def alterStatementSuffixUpdateStats(self):

        localctx = HiveParser.AlterStatementSuffixUpdateStatsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_alterStatementSuffixUpdateStats)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3243
            self.match(HiveParser.KW_UPDATE)
            self.state = 3244
            self.match(HiveParser.KW_STATISTICS)
            self.state = 3245
            self.match(HiveParser.KW_SET)
            self.state = 3246
            self.tableProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementChangeColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.afterCol = None # Id_Context

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_AFTER(self):
            return self.getToken(HiveParser.KW_AFTER, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementChangeColPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementChangeColPosition" ):
                listener.enterAlterStatementChangeColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementChangeColPosition" ):
                listener.exitAlterStatementChangeColPosition(self)




    def alterStatementChangeColPosition(self):

        localctx = HiveParser.AlterStatementChangeColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_alterStatementChangeColPosition)
        try:
            self.state = 3251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3248
                localctx.first = self.match(HiveParser.KW_FIRST)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3249
                self.match(HiveParser.KW_AFTER)
                self.state = 3250
                localctx.afterCol = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def alterStatementSuffixAddPartitionsElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AlterStatementSuffixAddPartitionsElementContext)
            else:
                return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsElementContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddPartitions" ):
                listener.enterAlterStatementSuffixAddPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddPartitions" ):
                listener.exitAlterStatementSuffixAddPartitions(self)




    def alterStatementSuffixAddPartitions(self):

        localctx = HiveParser.AlterStatementSuffixAddPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_alterStatementSuffixAddPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3253
            self.match(HiveParser.KW_ADD)
            self.state = 3255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 3254
                self.ifNotExists()


            self.state = 3258 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3257
                self.alterStatementSuffixAddPartitionsElement()
                self.state = 3260 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==227):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddPartitionsElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def partitionLocation(self):
            return self.getTypedRuleContext(HiveParser.PartitionLocationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddPartitionsElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddPartitionsElement" ):
                listener.enterAlterStatementSuffixAddPartitionsElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddPartitionsElement" ):
                listener.exitAlterStatementSuffixAddPartitionsElement(self)




    def alterStatementSuffixAddPartitionsElement(self):

        localctx = HiveParser.AlterStatementSuffixAddPartitionsElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_alterStatementSuffixAddPartitionsElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.partitionSpec()
            self.state = 3264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 3263
                self.partitionLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixTouchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TOUCH(self):
            return self.getToken(HiveParser.KW_TOUCH, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixTouch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixTouch" ):
                listener.enterAlterStatementSuffixTouch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixTouch" ):
                listener.exitAlterStatementSuffixTouch(self)




    def alterStatementSuffixTouch(self):

        localctx = HiveParser.AlterStatementSuffixTouchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_alterStatementSuffixTouch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3266
            self.match(HiveParser.KW_TOUCH)
            self.state = 3270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==227:
                self.state = 3267
                self.partitionSpec()
                self.state = 3272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixArchiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixArchive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixArchive" ):
                listener.enterAlterStatementSuffixArchive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixArchive" ):
                listener.exitAlterStatementSuffixArchive(self)




    def alterStatementSuffixArchive(self):

        localctx = HiveParser.AlterStatementSuffixArchiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_alterStatementSuffixArchive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3273
            self.match(HiveParser.KW_ARCHIVE)
            self.state = 3277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==227:
                self.state = 3274
                self.partitionSpec()
                self.state = 3279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUnArchiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNARCHIVE(self):
            return self.getToken(HiveParser.KW_UNARCHIVE, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUnArchive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUnArchive" ):
                listener.enterAlterStatementSuffixUnArchive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUnArchive" ):
                listener.exitAlterStatementSuffixUnArchive(self)




    def alterStatementSuffixUnArchive(self):

        localctx = HiveParser.AlterStatementSuffixUnArchiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_alterStatementSuffixUnArchive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3280
            self.match(HiveParser.KW_UNARCHIVE)
            self.state = 3284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==227:
                self.state = 3281
                self.partitionSpec()
                self.state = 3286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.locn = None # Token

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionLocation" ):
                listener.enterPartitionLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionLocation" ):
                listener.exitPartitionLocation(self)




    def partitionLocation(self):

        localctx = HiveParser.PartitionLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_partitionLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3287
            self.match(HiveParser.KW_LOCATION)
            self.state = 3288
            localctx.locn = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixDropPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_PARTITION)
            else:
                return self.getToken(HiveParser.KW_PARTITION, i)

        def partitionSelectorSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSelectorSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSelectorSpecContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixDropPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixDropPartitions" ):
                listener.enterAlterStatementSuffixDropPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixDropPartitions" ):
                listener.exitAlterStatementSuffixDropPartitions(self)




    def alterStatementSuffixDropPartitions(self):

        localctx = HiveParser.AlterStatementSuffixDropPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_alterStatementSuffixDropPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3290
            self.match(HiveParser.KW_DROP)
            self.state = 3292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 3291
                self.ifExists()


            self.state = 3294
            self.match(HiveParser.KW_PARTITION)
            self.state = 3295
            self.partitionSelectorSpec()
            self.state = 3301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 3296
                self.match(HiveParser.COMMA)
                self.state = 3297
                self.match(HiveParser.KW_PARTITION)
                self.state = 3298
                self.partitionSelectorSpec()
                self.state = 3303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==245:
                self.state = 3304
                self.match(HiveParser.KW_PURGE)


            self.state = 3308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 3307
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixProperties" ):
                listener.enterAlterStatementSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixProperties" ):
                listener.exitAlterStatementSuffixProperties(self)




    def alterStatementSuffixProperties(self):

        localctx = HiveParser.AlterStatementSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_alterStatementSuffixProperties)
        self._la = 0 # Token type
        try:
            self.state = 3319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3310
                self.match(HiveParser.KW_SET)
                self.state = 3311
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 3312
                self.tableProperties()
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3313
                self.match(HiveParser.KW_UNSET)
                self.state = 3314
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 3316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 3315
                    self.ifExists()


                self.state = 3318
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterViewSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewSuffixProperties" ):
                listener.enterAlterViewSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewSuffixProperties" ):
                listener.exitAlterViewSuffixProperties(self)




    def alterViewSuffixProperties(self):

        localctx = HiveParser.AlterViewSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_alterViewSuffixProperties)
        self._la = 0 # Token type
        try:
            self.state = 3330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3321
                self.match(HiveParser.KW_SET)
                self.state = 3322
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 3323
                self.tableProperties()
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3324
                self.match(HiveParser.KW_UNSET)
                self.state = 3325
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 3327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 3326
                    self.ifExists()


                self.state = 3329
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSerdePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.serdeName = None # Token

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSerdeProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSerdeProperties" ):
                listener.enterAlterStatementSuffixSerdeProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSerdeProperties" ):
                listener.exitAlterStatementSuffixSerdeProperties(self)




    def alterStatementSuffixSerdeProperties(self):

        localctx = HiveParser.AlterStatementSuffixSerdePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_alterStatementSuffixSerdeProperties)
        self._la = 0 # Token type
        try:
            self.state = 3347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3332
                self.match(HiveParser.KW_SET)
                self.state = 3342
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [290]:
                    self.state = 3333
                    self.match(HiveParser.KW_SERDE)
                    self.state = 3334
                    localctx.serdeName = self.match(HiveParser.StringLiteral)
                    self.state = 3338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==375:
                        self.state = 3335
                        self.match(HiveParser.KW_WITH)
                        self.state = 3336
                        self.match(HiveParser.KW_SERDEPROPERTIES)
                        self.state = 3337
                        self.tableProperties()


                    pass
                elif token in [291]:
                    self.state = 3340
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 3341
                    self.tableProperties()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3344
                self.match(HiveParser.KW_UNSET)
                self.state = 3345
                self.match(HiveParser.KW_SERDEPROPERTIES)
                self.state = 3346
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePartitionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePartitionPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePartitionPrefix" ):
                listener.enterTablePartitionPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePartitionPrefix" ):
                listener.exitTablePartitionPrefix(self)




    def tablePartitionPrefix(self):

        localctx = HiveParser.TablePartitionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_tablePartitionPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3349
            self.tableName()
            self.state = 3351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 3350
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_FILEFORMAT(self):
            return self.getToken(HiveParser.KW_FILEFORMAT, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(HiveParser.FileFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixFileFormat" ):
                listener.enterAlterStatementSuffixFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixFileFormat" ):
                listener.exitAlterStatementSuffixFileFormat(self)




    def alterStatementSuffixFileFormat(self):

        localctx = HiveParser.AlterStatementSuffixFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_alterStatementSuffixFileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3353
            self.match(HiveParser.KW_SET)
            self.state = 3354
            self.match(HiveParser.KW_FILEFORMAT)
            self.state = 3355
            self.fileFormat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixClusterbySortbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def tableBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableBucketsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixClusterbySortby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixClusterbySortby" ):
                listener.enterAlterStatementSuffixClusterbySortby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixClusterbySortby" ):
                listener.exitAlterStatementSuffixClusterbySortby(self)




    def alterStatementSuffixClusterbySortby(self):

        localctx = HiveParser.AlterStatementSuffixClusterbySortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_alterStatementSuffixClusterbySortby)
        self._la = 0 # Token type
        try:
            self.state = 3360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [206]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3357
                self.match(HiveParser.KW_NOT)
                self.state = 3358
                _la = self._input.LA(1)
                if not(_la==42 or _la==304):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3359
                self.tableBuckets()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTblPartitionStatementSuffixSkewedLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def skewedLocations(self):
            return self.getTypedRuleContext(HiveParser.SkewedLocationsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTblPartitionStatementSuffixSkewedLocation" ):
                listener.enterAlterTblPartitionStatementSuffixSkewedLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTblPartitionStatementSuffixSkewedLocation" ):
                listener.exitAlterTblPartitionStatementSuffixSkewedLocation(self)




    def alterTblPartitionStatementSuffixSkewedLocation(self):

        localctx = HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_alterTblPartitionStatementSuffixSkewedLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3362
            self.match(HiveParser.KW_SET)
            self.state = 3363
            self.match(HiveParser.KW_SKEWED)
            self.state = 3364
            self.match(HiveParser.KW_LOCATION)
            self.state = 3365
            self.skewedLocations()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def skewedLocationsList(self):
            return self.getTypedRuleContext(HiveParser.SkewedLocationsListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedLocations" ):
                listener.enterSkewedLocations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedLocations" ):
                listener.exitSkewedLocations(self)




    def skewedLocations(self):

        localctx = HiveParser.SkewedLocationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_skewedLocations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3367
            self.match(HiveParser.LPAREN)
            self.state = 3368
            self.skewedLocationsList()
            self.state = 3369
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedLocationMap(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedLocationMapContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedLocationMapContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocationsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedLocationsList" ):
                listener.enterSkewedLocationsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedLocationsList" ):
                listener.exitSkewedLocationsList(self)




    def skewedLocationsList(self):

        localctx = HiveParser.SkewedLocationsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_skewedLocationsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3371
            self.skewedLocationMap()
            self.state = 3376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 3372
                self.match(HiveParser.COMMA)
                self.state = 3373
                self.skewedLocationMap()
                self.state = 3378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # SkewedValueLocationElementContext
            self.value = None # Token

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def skewedValueLocationElement(self):
            return self.getTypedRuleContext(HiveParser.SkewedValueLocationElementContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocationMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedLocationMap" ):
                listener.enterSkewedLocationMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedLocationMap" ):
                listener.exitSkewedLocationMap(self)




    def skewedLocationMap(self):

        localctx = HiveParser.SkewedLocationMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_skewedLocationMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3379
            localctx.key = self.skewedValueLocationElement()
            self.state = 3380
            self.match(HiveParser.EQUAL)
            self.state = 3381
            localctx.value = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.newLoc = None # Token

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixLocation" ):
                listener.enterAlterStatementSuffixLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixLocation" ):
                listener.exitAlterStatementSuffixLocation(self)




    def alterStatementSuffixLocation(self):

        localctx = HiveParser.AlterStatementSuffixLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_alterStatementSuffixLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3383
            self.match(HiveParser.KW_SET)
            self.state = 3384
            self.match(HiveParser.KW_LOCATION)
            self.state = 3385
            localctx.newLoc = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSkewedbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSkewed(self):
            return self.getTypedRuleContext(HiveParser.TableSkewedContext,0)


        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def storedAsDirs(self):
            return self.getTypedRuleContext(HiveParser.StoredAsDirsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSkewedby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSkewedby" ):
                listener.enterAlterStatementSuffixSkewedby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSkewedby" ):
                listener.exitAlterStatementSuffixSkewedby(self)




    def alterStatementSuffixSkewedby(self):

        localctx = HiveParser.AlterStatementSuffixSkewedbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_alterStatementSuffixSkewedby)
        try:
            self.state = 3393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [299]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3387
                self.tableSkewed()
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3388
                self.match(HiveParser.KW_NOT)
                self.state = 3391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [299]:
                    self.state = 3389
                    self.match(HiveParser.KW_SKEWED)
                    pass
                elif token in [310]:
                    self.state = 3390
                    self.storedAsDirs()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixExchangePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exchangename = None # TableNameContext

        def KW_EXCHANGE(self):
            return self.getToken(HiveParser.KW_EXCHANGE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixExchangePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixExchangePartition" ):
                listener.enterAlterStatementSuffixExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixExchangePartition" ):
                listener.exitAlterStatementSuffixExchangePartition(self)




    def alterStatementSuffixExchangePartition(self):

        localctx = HiveParser.AlterStatementSuffixExchangePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_alterStatementSuffixExchangePartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3395
            self.match(HiveParser.KW_EXCHANGE)
            self.state = 3396
            self.partitionSpec()
            self.state = 3397
            self.match(HiveParser.KW_WITH)
            self.state = 3398
            self.match(HiveParser.KW_TABLE)
            self.state = 3399
            localctx.exchangename = self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenamePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRenamePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixRenamePart" ):
                listener.enterAlterStatementSuffixRenamePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixRenamePart" ):
                listener.exitAlterStatementSuffixRenamePart(self)




    def alterStatementSuffixRenamePart(self):

        localctx = HiveParser.AlterStatementSuffixRenamePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_alterStatementSuffixRenamePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3401
            self.match(HiveParser.KW_RENAME)
            self.state = 3402
            self.match(HiveParser.KW_TO)
            self.state = 3403
            self.partitionSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixStatsPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # Id_Context
            self.comment = None # Token

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixStatsPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixStatsPart" ):
                listener.enterAlterStatementSuffixStatsPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixStatsPart" ):
                listener.exitAlterStatementSuffixStatsPart(self)




    def alterStatementSuffixStatsPart(self):

        localctx = HiveParser.AlterStatementSuffixStatsPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_alterStatementSuffixStatsPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3405
            self.match(HiveParser.KW_UPDATE)
            self.state = 3406
            self.match(HiveParser.KW_STATISTICS)
            self.state = 3407
            self.match(HiveParser.KW_FOR)
            self.state = 3409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 3408
                self.match(HiveParser.KW_COLUMN)


            self.state = 3411
            localctx.colName = self.id_()
            self.state = 3412
            self.match(HiveParser.KW_SET)
            self.state = 3413
            self.tableProperties()
            self.state = 3416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 3414
                self.match(HiveParser.KW_COMMENT)
                self.state = 3415
                localctx.comment = self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixMergeFilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONCATENATE(self):
            return self.getToken(HiveParser.KW_CONCATENATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixMergeFiles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixMergeFiles" ):
                listener.enterAlterStatementSuffixMergeFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixMergeFiles" ):
                listener.exitAlterStatementSuffixMergeFiles(self)




    def alterStatementSuffixMergeFiles(self):

        localctx = HiveParser.AlterStatementSuffixMergeFilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_alterStatementSuffixMergeFiles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3418
            self.match(HiveParser.KW_CONCATENATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixBucketNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.num = None # Token

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixBucketNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixBucketNum" ):
                listener.enterAlterStatementSuffixBucketNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixBucketNum" ):
                listener.exitAlterStatementSuffixBucketNum(self)




    def alterStatementSuffixBucketNum(self):

        localctx = HiveParser.AlterStatementSuffixBucketNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_alterStatementSuffixBucketNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3420
            self.match(HiveParser.KW_INTO)
            self.state = 3421
            localctx.num = self.match(HiveParser.Number)
            self.state = 3422
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_WAIT(self):
            return self.getToken(HiveParser.KW_WAIT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_blocking

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocking" ):
                listener.enterBlocking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocking" ):
                listener.exitBlocking(self)




    def blocking(self):

        localctx = HiveParser.BlockingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_blocking)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3424
            self.match(HiveParser.KW_AND)
            self.state = 3425
            self.match(HiveParser.KW_WAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactPoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.poolName = None # Token

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_compactPool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactPool" ):
                listener.enterCompactPool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactPool" ):
                listener.exitCompactPool(self)




    def compactPool(self):

        localctx = HiveParser.CompactPoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_compactPool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3427
            self.match(HiveParser.KW_POOL)
            self.state = 3428
            localctx.poolName = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixCompactContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.compactType = None # Token

        def KW_COMPACT(self):
            return self.getToken(HiveParser.KW_COMPACT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def tableImplBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableImplBucketsContext,0)


        def blocking(self):
            return self.getTypedRuleContext(HiveParser.BlockingContext,0)


        def compactPool(self):
            return self.getTypedRuleContext(HiveParser.CompactPoolContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixCompact

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixCompact" ):
                listener.enterAlterStatementSuffixCompact(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixCompact" ):
                listener.exitAlterStatementSuffixCompact(self)




    def alterStatementSuffixCompact(self):

        localctx = HiveParser.AlterStatementSuffixCompactContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_alterStatementSuffixCompact)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            self.match(HiveParser.KW_COMPACT)
            self.state = 3431
            localctx.compactType = self.match(HiveParser.StringLiteral)
            self.state = 3433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 3432
                self.tableImplBuckets()


            self.state = 3436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 3435
                self.blocking()


            self.state = 3439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 3438
                self.compactPool()


            self.state = 3445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 3441
                self.match(HiveParser.KW_WITH)
                self.state = 3442
                self.match(HiveParser.KW_OVERWRITE)
                self.state = 3443
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 3444
                self.tableProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSetOwner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSetOwner" ):
                listener.enterAlterStatementSuffixSetOwner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSetOwner" ):
                listener.exitAlterStatementSuffixSetOwner(self)




    def alterStatementSuffixSetOwner(self):

        localctx = HiveParser.AlterStatementSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_alterStatementSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3447
            self.match(HiveParser.KW_SET)
            self.state = 3448
            self.match(HiveParser.KW_OWNER)
            self.state = 3449
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSetPartSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # PartitionTransformSpecContext

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_SPEC(self):
            return self.getToken(HiveParser.KW_SPEC, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitionTransformSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionTransformSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSetPartSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSetPartSpec" ):
                listener.enterAlterStatementSuffixSetPartSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSetPartSpec" ):
                listener.exitAlterStatementSuffixSetPartSpec(self)




    def alterStatementSuffixSetPartSpec(self):

        localctx = HiveParser.AlterStatementSuffixSetPartSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_alterStatementSuffixSetPartSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3451
            self.match(HiveParser.KW_SET)
            self.state = 3452
            self.match(HiveParser.KW_PARTITION)
            self.state = 3453
            self.match(HiveParser.KW_SPEC)
            self.state = 3454
            self.match(HiveParser.LPAREN)
            self.state = 3455
            localctx.spec = self.partitionTransformSpec()
            self.state = 3456
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollbackParam = None # Token
            self.expireParam = None # Token
            self.snapshotParam = None # Token

        def KW_EXECUTE(self):
            return self.getToken(HiveParser.KW_EXECUTE, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ROLLBACK(self):
            return self.getToken(HiveParser.KW_ROLLBACK, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_EXPIRE_SNAPSHOTS(self):
            return self.getToken(HiveParser.KW_EXPIRE_SNAPSHOTS, 0)

        def KW_SET_CURRENT_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SET_CURRENT_SNAPSHOT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixExecute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixExecute" ):
                listener.enterAlterStatementSuffixExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixExecute" ):
                listener.exitAlterStatementSuffixExecute(self)




    def alterStatementSuffixExecute(self):

        localctx = HiveParser.AlterStatementSuffixExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_alterStatementSuffixExecute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3458
            self.match(HiveParser.KW_EXECUTE)
            self.state = 3468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [279]:
                self.state = 3459
                self.match(HiveParser.KW_ROLLBACK)
                self.state = 3460
                self.match(HiveParser.LPAREN)
                self.state = 3461
                localctx.rollbackParam = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==412 or _la==417):
                    localctx.rollbackParam = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [113]:
                self.state = 3462
                self.match(HiveParser.KW_EXPIRE_SNAPSHOTS)
                self.state = 3463
                self.match(HiveParser.LPAREN)
                self.state = 3464
                localctx.expireParam = self.match(HiveParser.StringLiteral)
                pass
            elif token in [295]:
                self.state = 3465
                self.match(HiveParser.KW_SET_CURRENT_SNAPSHOT)
                self.state = 3466
                self.match(HiveParser.LPAREN)
                self.state = 3467
                localctx.snapshotParam = self.match(HiveParser.Number)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3470
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.serdeCls = None # Token
            self.inDriver = None # Token
            self.outDriver = None # Token
            self.genericSpec = None # Id_Context

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileFormat" ):
                listener.enterFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileFormat" ):
                listener.exitFileFormat(self)




    def fileFormat(self):

        localctx = HiveParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_fileFormat)
        self._la = 0 # Token type
        try:
            self.state = 3485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3472
                self.match(HiveParser.KW_INPUTFORMAT)
                self.state = 3473
                localctx.inFmt = self.match(HiveParser.StringLiteral)
                self.state = 3474
                self.match(HiveParser.KW_OUTPUTFORMAT)
                self.state = 3475
                localctx.outFmt = self.match(HiveParser.StringLiteral)
                self.state = 3476
                self.match(HiveParser.KW_SERDE)
                self.state = 3477
                localctx.serdeCls = self.match(HiveParser.StringLiteral)
                self.state = 3482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 3478
                    self.match(HiveParser.KW_INPUTDRIVER)
                    self.state = 3479
                    localctx.inDriver = self.match(HiveParser.StringLiteral)
                    self.state = 3480
                    self.match(HiveParser.KW_OUTPUTDRIVER)
                    self.state = 3481
                    localctx.outDriver = self.match(HiveParser.StringLiteral)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3484
                localctx.genericSpec = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDataConnectorStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterDataConnectorSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterDataConnectorSuffixPropertiesContext,0)


        def alterDataConnectorSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterDataConnectorSuffixSetOwnerContext,0)


        def alterDataConnectorSuffixSetUrl(self):
            return self.getTypedRuleContext(HiveParser.AlterDataConnectorSuffixSetUrlContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDataConnectorStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDataConnectorStatementSuffix" ):
                listener.enterAlterDataConnectorStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDataConnectorStatementSuffix" ):
                listener.exitAlterDataConnectorStatementSuffix(self)




    def alterDataConnectorStatementSuffix(self):

        localctx = HiveParser.AlterDataConnectorStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_alterDataConnectorStatementSuffix)
        try:
            self.state = 3490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3487
                self.alterDataConnectorSuffixProperties()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3488
                self.alterDataConnectorSuffixSetOwner()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3489
                self.alterDataConnectorSuffixSetUrl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDataConnectorSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_DCPROPERTIES(self):
            return self.getToken(HiveParser.KW_DCPROPERTIES, 0)

        def dcProperties(self):
            return self.getTypedRuleContext(HiveParser.DcPropertiesContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDataConnectorSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDataConnectorSuffixProperties" ):
                listener.enterAlterDataConnectorSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDataConnectorSuffixProperties" ):
                listener.exitAlterDataConnectorSuffixProperties(self)




    def alterDataConnectorSuffixProperties(self):

        localctx = HiveParser.AlterDataConnectorSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_alterDataConnectorSuffixProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3492
            localctx.name = self.id_()
            self.state = 3493
            self.match(HiveParser.KW_SET)
            self.state = 3494
            self.match(HiveParser.KW_DCPROPERTIES)
            self.state = 3495
            self.dcProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDataConnectorSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dcName = None # Id_Context

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDataConnectorSuffixSetOwner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDataConnectorSuffixSetOwner" ):
                listener.enterAlterDataConnectorSuffixSetOwner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDataConnectorSuffixSetOwner" ):
                listener.exitAlterDataConnectorSuffixSetOwner(self)




    def alterDataConnectorSuffixSetOwner(self):

        localctx = HiveParser.AlterDataConnectorSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_alterDataConnectorSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3497
            localctx.dcName = self.id_()
            self.state = 3498
            self.match(HiveParser.KW_SET)
            self.state = 3499
            self.match(HiveParser.KW_OWNER)
            self.state = 3500
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDataConnectorSuffixSetUrlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dcName = None # Id_Context
            self.newUri = None # Token

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_URL(self):
            return self.getToken(HiveParser.KW_URL, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterDataConnectorSuffixSetUrl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDataConnectorSuffixSetUrl" ):
                listener.enterAlterDataConnectorSuffixSetUrl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDataConnectorSuffixSetUrl" ):
                listener.exitAlterDataConnectorSuffixSetUrl(self)




    def alterDataConnectorSuffixSetUrl(self):

        localctx = HiveParser.AlterDataConnectorSuffixSetUrlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_alterDataConnectorSuffixSetUrl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3502
            localctx.dcName = self.id_()
            self.state = 3503
            self.match(HiveParser.KW_SET)
            self.state = 3504
            self.match(HiveParser.KW_URL)
            self.state = 3505
            localctx.newUri = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeTableOrFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Id_Context
            self.uri = None # Token
            self.likeName = None # TableNameContext

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_likeTableOrFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeTableOrFile" ):
                listener.enterLikeTableOrFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeTableOrFile" ):
                listener.exitLikeTableOrFile(self)




    def likeTableOrFile(self):

        localctx = HiveParser.LikeTableOrFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_likeTableOrFile)
        try:
            self.state = 3516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3507
                self.match(HiveParser.KW_LIKE)
                self.state = 3508
                self.match(HiveParser.KW_FILE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3509
                self.match(HiveParser.KW_LIKE)
                self.state = 3510
                self.match(HiveParser.KW_FILE)
                self.state = 3511
                localctx.format_ = self.id_()
                self.state = 3512
                localctx.uri = self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3514
                self.match(HiveParser.KW_LIKE)
                self.state = 3515
                localctx.likeName = self.tableName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.temp = None # Token
            self.trans = None # Token
            self.ext = None # Token
            self.name = None # TableNameContext
            self.mgd = None # Token

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def likeTableOrFile(self):
            return self.getTypedRuleContext(HiveParser.LikeTableOrFileContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_TRANSACTIONAL(self):
            return self.getToken(HiveParser.KW_TRANSACTIONAL, 0)

        def KW_EXTERNAL(self):
            return self.getToken(HiveParser.KW_EXTERNAL, 0)

        def createTablePartitionSpec(self):
            return self.getTypedRuleContext(HiveParser.CreateTablePartitionSpecContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeOrConstraintList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeOrConstraintListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tableBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableBucketsContext,0)


        def tableSkewed(self):
            return self.getTypedRuleContext(HiveParser.TableSkewedContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def KW_MANAGED(self):
            return self.getToken(HiveParser.KW_MANAGED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_createTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableStatement" ):
                listener.enterCreateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableStatement" ):
                listener.exitCreateTableStatement(self)




    def createTableStatement(self):

        localctx = HiveParser.CreateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_createTableStatement)
        self._la = 0 # Token type
        try:
            self.state = 3641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3518
                self.match(HiveParser.KW_CREATE)
                self.state = 3520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==322:
                    self.state = 3519
                    localctx.temp = self.match(HiveParser.KW_TEMPORARY)


                self.state = 3523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==334:
                    self.state = 3522
                    localctx.trans = self.match(HiveParser.KW_TRANSACTIONAL)


                self.state = 3526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 3525
                    localctx.ext = self.match(HiveParser.KW_EXTERNAL)


                self.state = 3528
                self.match(HiveParser.KW_TABLE)
                self.state = 3530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 3529
                    self.ifNotExists()


                self.state = 3532
                localctx.name = self.tableName()
                self.state = 3583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 3533
                    self.likeTableOrFile()
                    self.state = 3535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==228:
                        self.state = 3534
                        self.createTablePartitionSpec()


                    self.state = 3538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==281:
                        self.state = 3537
                        self.tableRowFormat()


                    self.state = 3541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==310:
                        self.state = 3540
                        self.tableFileFormat()


                    self.state = 3544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==181:
                        self.state = 3543
                        self.tableLocation()


                    self.state = 3547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==321:
                        self.state = 3546
                        self.tablePropertiesPrefixed()


                    pass
                elif token in [-1, 17, 42, 47, 181, 228, 281, 299, 310, 321, 386]:
                    self.state = 3553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==386:
                        self.state = 3549
                        self.match(HiveParser.LPAREN)
                        self.state = 3550
                        self.columnNameTypeOrConstraintList()
                        self.state = 3551
                        self.match(HiveParser.RPAREN)


                    self.state = 3556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==47:
                        self.state = 3555
                        self.tableComment()


                    self.state = 3559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==228:
                        self.state = 3558
                        self.createTablePartitionSpec()


                    self.state = 3562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 3561
                        self.tableBuckets()


                    self.state = 3565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==299:
                        self.state = 3564
                        self.tableSkewed()


                    self.state = 3568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==281:
                        self.state = 3567
                        self.tableRowFormat()


                    self.state = 3571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==310:
                        self.state = 3570
                        self.tableFileFormat()


                    self.state = 3574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==181:
                        self.state = 3573
                        self.tableLocation()


                    self.state = 3577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==321:
                        self.state = 3576
                        self.tablePropertiesPrefixed()


                    self.state = 3581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 3579
                        self.match(HiveParser.KW_AS)
                        self.state = 3580
                        self.selectStatementWithCTE()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3585
                self.match(HiveParser.KW_CREATE)
                self.state = 3586
                localctx.mgd = self.match(HiveParser.KW_MANAGED)
                self.state = 3587
                self.match(HiveParser.KW_TABLE)
                self.state = 3589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 3588
                    self.ifNotExists()


                self.state = 3591
                localctx.name = self.tableName()
                self.state = 3639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 3592
                    self.likeTableOrFile()
                    self.state = 3594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==281:
                        self.state = 3593
                        self.tableRowFormat()


                    self.state = 3597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==310:
                        self.state = 3596
                        self.tableFileFormat()


                    self.state = 3600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==181:
                        self.state = 3599
                        self.tableLocation()


                    self.state = 3603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==321:
                        self.state = 3602
                        self.tablePropertiesPrefixed()


                    pass
                elif token in [-1, 17, 42, 47, 181, 228, 281, 299, 310, 321, 386]:
                    self.state = 3609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==386:
                        self.state = 3605
                        self.match(HiveParser.LPAREN)
                        self.state = 3606
                        self.columnNameTypeOrConstraintList()
                        self.state = 3607
                        self.match(HiveParser.RPAREN)


                    self.state = 3612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==47:
                        self.state = 3611
                        self.tableComment()


                    self.state = 3615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==228:
                        self.state = 3614
                        self.createTablePartitionSpec()


                    self.state = 3618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 3617
                        self.tableBuckets()


                    self.state = 3621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==299:
                        self.state = 3620
                        self.tableSkewed()


                    self.state = 3624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==281:
                        self.state = 3623
                        self.tableRowFormat()


                    self.state = 3627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==310:
                        self.state = 3626
                        self.tableFileFormat()


                    self.state = 3630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==181:
                        self.state = 3629
                        self.tableLocation()


                    self.state = 3633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==321:
                        self.state = 3632
                        self.tablePropertiesPrefixed()


                    self.state = 3637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 3635
                        self.match(HiveParser.KW_AS)
                        self.state = 3636
                        self.selectStatementWithCTE()


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDataConnectorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context
            self.dcprops = None # DcPropertiesContext

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_DATACONNECTOR(self):
            return self.getToken(HiveParser.KW_DATACONNECTOR, 0)

        def dataConnectorType(self):
            return self.getTypedRuleContext(HiveParser.DataConnectorTypeContext,0)


        def dataConnectorUrl(self):
            return self.getTypedRuleContext(HiveParser.DataConnectorUrlContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def dataConnectorComment(self):
            return self.getTypedRuleContext(HiveParser.DataConnectorCommentContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_DCPROPERTIES(self):
            return self.getToken(HiveParser.KW_DCPROPERTIES, 0)

        def dcProperties(self):
            return self.getTypedRuleContext(HiveParser.DcPropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createDataConnectorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDataConnectorStatement" ):
                listener.enterCreateDataConnectorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDataConnectorStatement" ):
                listener.exitCreateDataConnectorStatement(self)




    def createDataConnectorStatement(self):

        localctx = HiveParser.CreateDataConnectorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_createDataConnectorStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.match(HiveParser.KW_CREATE)
            self.state = 3644
            self.match(HiveParser.KW_DATACONNECTOR)
            self.state = 3646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 3645
                self.ifNotExists()


            self.state = 3648
            localctx.name = self.id_()
            self.state = 3649
            self.dataConnectorType()
            self.state = 3650
            self.dataConnectorUrl()
            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 3651
                self.dataConnectorComment()


            self.state = 3657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 3654
                self.match(HiveParser.KW_WITH)
                self.state = 3655
                self.match(HiveParser.KW_DCPROPERTIES)
                self.state = 3656
                localctx.dcprops = self.dcProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataConnectorCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.comment = None # Token

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dataConnectorComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataConnectorComment" ):
                listener.enterDataConnectorComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataConnectorComment" ):
                listener.exitDataConnectorComment(self)




    def dataConnectorComment(self):

        localctx = HiveParser.DataConnectorCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_dataConnectorComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3659
            self.match(HiveParser.KW_COMMENT)
            self.state = 3660
            localctx.comment = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataConnectorUrlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.url = None # Token

        def KW_URL(self):
            return self.getToken(HiveParser.KW_URL, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dataConnectorUrl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataConnectorUrl" ):
                listener.enterDataConnectorUrl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataConnectorUrl" ):
                listener.exitDataConnectorUrl(self)




    def dataConnectorUrl(self):

        localctx = HiveParser.DataConnectorUrlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_dataConnectorUrl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3662
            self.match(HiveParser.KW_URL)
            self.state = 3663
            localctx.url = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataConnectorTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dcType = None # Token

        def KW_TYPE(self):
            return self.getToken(HiveParser.KW_TYPE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dataConnectorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataConnectorType" ):
                listener.enterDataConnectorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataConnectorType" ):
                listener.exitDataConnectorType(self)




    def dataConnectorType(self):

        localctx = HiveParser.DataConnectorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_dataConnectorType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3665
            self.match(HiveParser.KW_TYPE)
            self.state = 3666
            localctx.dcType = self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DcPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def dbPropertiesList(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dcProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDcProperties" ):
                listener.enterDcProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDcProperties" ):
                listener.exitDcProperties(self)




    def dcProperties(self):

        localctx = HiveParser.DcPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_dcProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3668
            self.match(HiveParser.LPAREN)
            self.state = 3669
            self.dbPropertiesList()
            self.state = 3670
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDataConnectorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_DATACONNECTOR(self):
            return self.getToken(HiveParser.KW_DATACONNECTOR, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropDataConnectorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDataConnectorStatement" ):
                listener.enterDropDataConnectorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDataConnectorStatement" ):
                listener.exitDropDataConnectorStatement(self)




    def dropDataConnectorStatement(self):

        localctx = HiveParser.DropDataConnectorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_dropDataConnectorStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3672
            self.match(HiveParser.KW_DROP)
            self.state = 3673
            self.match(HiveParser.KW_DATACONNECTOR)
            self.state = 3675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 3674
                self.ifExists()


            self.state = 3677
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAllColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableAllColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAllColumns" ):
                listener.enterTableAllColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAllColumns" ):
                listener.exitTableAllColumns(self)




    def tableAllColumns(self):

        localctx = HiveParser.TableAllColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_tableAllColumns)
        try:
            self.state = 3684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [402]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3679
                self.match(HiveParser.STAR)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3680
                self.tableName()
                self.state = 3681
                self.match(HiveParser.DOT)
                self.state = 3682
                self.match(HiveParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOrColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableOrColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOrColumn" ):
                listener.enterTableOrColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOrColumn" ):
                listener.exitTableOrColumn(self)




    def tableOrColumn(self):

        localctx = HiveParser.TableOrColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_tableOrColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3686
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = HiveParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            self.match(HiveParser.KW_DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = HiveParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3690
            self.expression()
            self.state = 3695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 3691
                self.match(HiveParser.COMMA)
                self.state = 3692
                self.expression()
                self.state = 3697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_aliasList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasList" ):
                listener.enterAliasList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasList" ):
                listener.exitAliasList(self)




    def aliasList(self):

        localctx = HiveParser.AliasListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_aliasList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3698
            self.id_()
            self.state = 3703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 3699
                self.match(HiveParser.COMMA)
                self.state = 3700
                self.id_()
                self.state = 3705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def fromSource(self):
            return self.getTypedRuleContext(HiveParser.FromSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = HiveParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3706
            self.match(HiveParser.KW_FROM)
            self.state = 3707
            self.fromSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uniqueJoinToken(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinTokenContext,0)


        def uniqueJoinSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.UniqueJoinSourceContext)
            else:
                return self.getTypedRuleContext(HiveParser.UniqueJoinSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def joinSource(self):
            return self.getTypedRuleContext(HiveParser.JoinSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fromSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromSource" ):
                listener.enterFromSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromSource" ):
                listener.exitFromSource(self)




    def fromSource(self):

        localctx = HiveParser.FromSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_fromSource)
        self._la = 0 # Token type
        try:
            self.state = 3718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [348]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3709
                self.uniqueJoinToken()
                self.state = 3710
                self.uniqueJoinSource()
                self.state = 3713 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3711
                    self.match(HiveParser.COMMA)
                    self.state = 3712
                    self.uniqueJoinSource()
                    self.state = 3715 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==384):
                        break

                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 386, 418]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3717
                self.joinSource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomjoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(HiveParser.LateralViewContext,i)


        def virtualTableSource(self):
            return self.getTypedRuleContext(HiveParser.VirtualTableSourceContext,0)


        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def joinSource(self):
            return self.getTypedRuleContext(HiveParser.JoinSourceContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_atomjoinSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomjoinSource" ):
                listener.enterAtomjoinSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomjoinSource" ):
                listener.exitAtomjoinSource(self)




    def atomjoinSource(self):

        localctx = HiveParser.AtomjoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_atomjoinSource)
        try:
            self.state = 3752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3720
                self.tableSource()
                self.state = 3724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,420,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3721
                        self.lateralView() 
                    self.state = 3726
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3727
                self.virtualTableSource()
                self.state = 3731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3728
                        self.lateralView() 
                    self.state = 3733
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3734
                self.subQuerySource()
                self.state = 3738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3735
                        self.lateralView() 
                    self.state = 3740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3741
                self.partitionedTableFunction()
                self.state = 3745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3742
                        self.lateralView() 
                    self.state = 3747
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3748
                self.match(HiveParser.LPAREN)
                self.state = 3749
                self.joinSource()
                self.state = 3750
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomjoinSource(self):
            return self.getTypedRuleContext(HiveParser.AtomjoinSourceContext,0)


        def joinToken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.JoinTokenContext)
            else:
                return self.getTypedRuleContext(HiveParser.JoinTokenContext,i)


        def joinSourcePart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.JoinSourcePartContext)
            else:
                return self.getTypedRuleContext(HiveParser.JoinSourcePartContext,i)


        def KW_ON(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ON)
            else:
                return self.getToken(HiveParser.KW_ON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_USING(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_USING)
            else:
                return self.getToken(HiveParser.KW_USING, i)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_joinSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinSource" ):
                listener.enterJoinSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinSource" ):
                listener.exitJoinSource(self)




    def joinSource(self):

        localctx = HiveParser.JoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_joinSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3754
            self.atomjoinSource()
            self.state = 3765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60 or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 275414843393) != 0) or _la==275 or _la==384:
                self.state = 3755
                self.joinToken()
                self.state = 3756
                self.joinSourcePart()
                self.state = 3761
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 3757
                    self.match(HiveParser.KW_ON)
                    self.state = 3758
                    self.expression()
                    pass
                elif token in [359]:
                    self.state = 3759
                    self.match(HiveParser.KW_USING)
                    self.state = 3760
                    self.columnParenthesesList()
                    pass
                elif token in [-1, 41, 60, 93, 107, 135, 139, 141, 151, 155, 157, 164, 173, 177, 190, 197, 219, 246, 258, 275, 288, 303, 345, 372, 374, 384, 387]:
                    pass
                else:
                    pass
                self.state = 3767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSourcePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def virtualTableSource(self):
            return self.getTypedRuleContext(HiveParser.VirtualTableSourceContext,0)


        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(HiveParser.LateralViewContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_joinSourcePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinSourcePart" ):
                listener.enterJoinSourcePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinSourcePart" ):
                listener.exitJoinSourcePart(self)




    def joinSourcePart(self):

        localctx = HiveParser.JoinSourcePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_joinSourcePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 3768
                self.tableSource()
                pass

            elif la_ == 2:
                self.state = 3769
                self.virtualTableSource()
                pass

            elif la_ == 3:
                self.state = 3770
                self.subQuerySource()
                pass

            elif la_ == 4:
                self.state = 3771
                self.partitionedTableFunction()
                pass


            self.state = 3777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,428,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3774
                    self.lateralView() 
                self.state = 3779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,428,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uniqueJoinTableSource(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinTableSourceContext,0)


        def uniqueJoinExpr(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinExprContext,0)


        def KW_PRESERVE(self):
            return self.getToken(HiveParser.KW_PRESERVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinSource" ):
                listener.enterUniqueJoinSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinSource" ):
                listener.exitUniqueJoinSource(self)




    def uniqueJoinSource(self):

        localctx = HiveParser.UniqueJoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_uniqueJoinSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==240:
                self.state = 3780
                self.match(HiveParser.KW_PRESERVE)


            self.state = 3783
            self.uniqueJoinTableSource()
            self.state = 3784
            self.uniqueJoinExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(HiveParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinExpr" ):
                listener.enterUniqueJoinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinExpr" ):
                listener.exitUniqueJoinExpr(self)




    def uniqueJoinExpr(self):

        localctx = HiveParser.UniqueJoinExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_uniqueJoinExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3786
            self.match(HiveParser.LPAREN)
            self.state = 3787
            self.expressionList()
            self.state = 3788
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNIQUEJOIN(self):
            return self.getToken(HiveParser.KW_UNIQUEJOIN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinToken" ):
                listener.enterUniqueJoinToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinToken" ):
                listener.exitUniqueJoinToken(self)




    def uniqueJoinToken(self):

        localctx = HiveParser.UniqueJoinTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_uniqueJoinToken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3790
            self.match(HiveParser.KW_UNIQUEJOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_JOIN(self):
            return self.getToken(HiveParser.KW_JOIN, 0)

        def KW_INNER(self):
            return self.getToken(HiveParser.KW_INNER, 0)

        def KW_CROSS(self):
            return self.getToken(HiveParser.KW_CROSS, 0)

        def KW_LEFT(self):
            return self.getToken(HiveParser.KW_LEFT, 0)

        def KW_RIGHT(self):
            return self.getToken(HiveParser.KW_RIGHT, 0)

        def KW_FULL(self):
            return self.getToken(HiveParser.KW_FULL, 0)

        def KW_OUTER(self):
            return self.getToken(HiveParser.KW_OUTER, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def KW_ANTI(self):
            return self.getToken(HiveParser.KW_ANTI, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_joinToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinToken" ):
                listener.enterJoinToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinToken" ):
                listener.exitJoinToken(self)




    def joinToken(self):

        localctx = HiveParser.JoinTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_joinToken)
        self._la = 0 # Token type
        try:
            self.state = 3806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3792
                self.match(HiveParser.COMMA)
                pass
            elif token in [60, 135, 151, 164, 173, 275]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3803
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [151]:
                    self.state = 3793
                    self.match(HiveParser.KW_INNER)
                    pass
                elif token in [60]:
                    self.state = 3794
                    self.match(HiveParser.KW_CROSS)
                    pass
                elif token in [135, 275]:
                    self.state = 3795
                    _la = self._input.LA(1)
                    if not(_la==135 or _la==275):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==221:
                        self.state = 3796
                        self.match(HiveParser.KW_OUTER)


                    pass
                elif token in [173]:
                    self.state = 3799
                    self.match(HiveParser.KW_LEFT)
                    self.state = 3801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12 or _la==221 or _la==289:
                        self.state = 3800
                        _la = self._input.LA(1)
                        if not(_la==12 or _la==221 or _la==289):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass
                elif token in [164]:
                    pass
                else:
                    pass
                self.state = 3805
                self.match(HiveParser.KW_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LATERAL(self):
            return self.getToken(HiveParser.KW_LATERAL, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_OUTER(self):
            return self.getToken(HiveParser.KW_OUTER, 0)

        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def getRuleIndex(self):
            return HiveParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = HiveParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.state = 3865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3808
                self.match(HiveParser.KW_LATERAL)
                self.state = 3809
                self.match(HiveParser.KW_VIEW)
                self.state = 3810
                self.match(HiveParser.KW_OUTER)
                self.state = 3811
                self.function_()
                self.state = 3812
                self.tableAlias()
                self.state = 3822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 3813
                    self.match(HiveParser.KW_AS)
                    self.state = 3814
                    self.id_()
                    self.state = 3819
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3815
                            self.match(HiveParser.COMMA)
                            self.state = 3816
                            self.id_() 
                        self.state = 3821
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,434,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==384:
                    self.state = 3824
                    self.match(HiveParser.COMMA)


                self.state = 3827
                self.match(HiveParser.KW_LATERAL)
                self.state = 3863
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [367]:
                    self.state = 3828
                    self.match(HiveParser.KW_VIEW)
                    self.state = 3829
                    self.function_()
                    self.state = 3830
                    self.tableAlias()
                    self.state = 3840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 3831
                        self.match(HiveParser.KW_AS)
                        self.state = 3832
                        self.id_()
                        self.state = 3837
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 3833
                                self.match(HiveParser.COMMA)
                                self.state = 3834
                                self.id_() 
                            self.state = 3839
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,437,self._ctx)



                    pass
                elif token in [318]:
                    self.state = 3842
                    self.match(HiveParser.KW_TABLE)
                    self.state = 3843
                    self.match(HiveParser.LPAREN)
                    self.state = 3844
                    self.valuesClause()
                    self.state = 3845
                    self.match(HiveParser.RPAREN)
                    self.state = 3847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 3846
                        self.match(HiveParser.KW_AS)


                    self.state = 3849
                    self.tableAlias()
                    self.state = 3861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==386:
                        self.state = 3850
                        self.match(HiveParser.LPAREN)
                        self.state = 3851
                        self.id_()
                        self.state = 3856
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==384:
                            self.state = 3852
                            self.match(HiveParser.COMMA)
                            self.state = 3853
                            self.id_()
                            self.state = 3858
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3859
                        self.match(HiveParser.RPAREN)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = HiveParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3867
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBucketSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.numerator = None # Token
            self.denominator = None # Token
            self._expression = None # ExpressionContext
            self.expr = list() # of ExpressionContexts

        def KW_TABLESAMPLE(self):
            return self.getToken(HiveParser.KW_TABLESAMPLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def KW_OUT(self):
            return self.getToken(HiveParser.KW_OUT, 0)

        def KW_OF(self):
            return self.getToken(HiveParser.KW_OF, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tableBucketSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBucketSample" ):
                listener.enterTableBucketSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBucketSample" ):
                listener.exitTableBucketSample(self)




    def tableBucketSample(self):

        localctx = HiveParser.TableBucketSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_tableBucketSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            self.match(HiveParser.KW_TABLESAMPLE)
            self.state = 3870
            self.match(HiveParser.LPAREN)
            self.state = 3871
            self.match(HiveParser.KW_BUCKET)
            self.state = 3872
            localctx.numerator = self.match(HiveParser.Number)
            self.state = 3873
            self.match(HiveParser.KW_OUT)
            self.state = 3874
            self.match(HiveParser.KW_OF)
            self.state = 3875
            localctx.denominator = self.match(HiveParser.Number)
            self.state = 3885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 3876
                self.match(HiveParser.KW_ON)
                self.state = 3877
                localctx._expression = self.expression()
                localctx.expr.append(localctx._expression)
                self.state = 3882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 3878
                    self.match(HiveParser.COMMA)
                    self.state = 3879
                    localctx._expression = self.expression()
                    localctx.expr.append(localctx._expression)
                    self.state = 3884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3887
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SplitSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLESAMPLE(self):
            return self.getToken(HiveParser.KW_TABLESAMPLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def ByteLengthLiteral(self):
            return self.getToken(HiveParser.ByteLengthLiteral, 0)

        def KW_PERCENT(self):
            return self.getToken(HiveParser.KW_PERCENT, 0)

        def KW_ROWS(self):
            return self.getToken(HiveParser.KW_ROWS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_splitSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplitSample" ):
                listener.enterSplitSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplitSample" ):
                listener.exitSplitSample(self)




    def splitSample(self):

        localctx = HiveParser.SplitSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_splitSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3889
            self.match(HiveParser.KW_TABLESAMPLE)
            self.state = 3890
            self.match(HiveParser.LPAREN)
            self.state = 3894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [417]:
                self.state = 3891
                self.match(HiveParser.Number)
                self.state = 3892
                _la = self._input.LA(1)
                if not(_la==231 or _la==282):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [416]:
                self.state = 3893
                self.match(HiveParser.ByteLengthLiteral)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3896
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableBucketSample(self):
            return self.getTypedRuleContext(HiveParser.TableBucketSampleContext,0)


        def splitSample(self):
            return self.getTypedRuleContext(HiveParser.SplitSampleContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSample" ):
                listener.enterTableSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSample" ):
                listener.exitTableSample(self)




    def tableSample(self):

        localctx = HiveParser.TableSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_tableSample)
        try:
            self.state = 3900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3898
                self.tableBucketSample()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3899
                self.splitSample()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tabname = None # TableNameContext
            self.props = None # TablePropertiesContext
            self.ts = None # TableSampleContext
            self.asOf = None # AsOfClauseContext
            self.alias = None # Id_Context

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def tableSample(self):
            return self.getTypedRuleContext(HiveParser.TableSampleContext,0)


        def asOfClause(self):
            return self.getTypedRuleContext(HiveParser.AsOfClauseContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSource" ):
                listener.enterTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSource" ):
                listener.exitTableSource(self)




    def tableSource(self):

        localctx = HiveParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3902
            localctx.tabname = self.tableName()
            self.state = 3904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 3903
                localctx.props = self.tableProperties()


            self.state = 3907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==320:
                self.state = 3906
                localctx.ts = self.tableSample()


            self.state = 3910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 3909
                localctx.asOf = self.asOfClause()


            self.state = 3916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 3913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 3912
                    self.match(HiveParser.KW_AS)


                self.state = 3915
                localctx.alias = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOfClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.asOfTime = None # ExpressionContext
            self.asOfVersion = None # Token

        def KW_FOR(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_FOR)
            else:
                return self.getToken(HiveParser.KW_FOR, i)

        def KW_SYSTEM_TIME(self):
            return self.getToken(HiveParser.KW_SYSTEM_TIME, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_OF(self):
            return self.getToken(HiveParser.KW_OF, 0)

        def KW_SYSTEM_VERSION(self):
            return self.getToken(HiveParser.KW_SYSTEM_VERSION, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_asOfClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOfClause" ):
                listener.enterAsOfClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOfClause" ):
                listener.exitAsOfClause(self)




    def asOfClause(self):

        localctx = HiveParser.AsOfClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_asOfClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3918
            self.match(HiveParser.KW_FOR)
            self.state = 3928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.state = 3919
                self.match(HiveParser.KW_SYSTEM_TIME)
                self.state = 3920
                self.match(HiveParser.KW_AS)
                self.state = 3921
                self.match(HiveParser.KW_OF)
                self.state = 3922
                localctx.asOfTime = self.expression()
                pass
            elif token in [129]:
                self.state = 3923
                self.match(HiveParser.KW_FOR)
                self.state = 3924
                self.match(HiveParser.KW_SYSTEM_VERSION)
                self.state = 3925
                self.match(HiveParser.KW_AS)
                self.state = 3926
                self.match(HiveParser.KW_OF)
                self.state = 3927
                localctx.asOfVersion = self.match(HiveParser.Number)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinTableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tabname = None # TableNameContext
            self.ts = None # TableSampleContext
            self.alias = None # Id_Context

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def tableSample(self):
            return self.getTypedRuleContext(HiveParser.TableSampleContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinTableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinTableSource" ):
                listener.enterUniqueJoinTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinTableSource" ):
                listener.exitUniqueJoinTableSource(self)




    def uniqueJoinTableSource(self):

        localctx = HiveParser.UniqueJoinTableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_uniqueJoinTableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3930
            localctx.tabname = self.tableName()
            self.state = 3932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==320:
                self.state = 3931
                localctx.ts = self.tableSample()


            self.state = 3938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591826814) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                self.state = 3935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 3934
                    self.match(HiveParser.KW_AS)


                self.state = 3937
                localctx.alias = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # Id_Context
            self.tab = None # Id_Context
            self.meta = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def getRuleIndex(self):
            return HiveParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = HiveParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_tableName)
        try:
            self.state = 3948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3940
                localctx.db = self.id_()
                self.state = 3941
                self.match(HiveParser.DOT)
                self.state = 3942
                localctx.tab = self.id_()
                self.state = 3945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 3943
                    self.match(HiveParser.DOT)
                    self.state = 3944
                    localctx.meta = self.id_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3947
                localctx.tab = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # Id_Context
            self.view = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = HiveParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3950
                localctx.db = self.id_()
                self.state = 3951
                self.match(HiveParser.DOT)


            self.state = 3955
            localctx.view = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQuerySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_subQuerySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubQuerySource" ):
                listener.enterSubQuerySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubQuerySource" ):
                listener.exitSubQuerySource(self)




    def subQuerySource(self):

        localctx = HiveParser.SubQuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_subQuerySource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3957
            self.match(HiveParser.LPAREN)
            self.state = 3958
            self.queryStatementExpression()
            self.state = 3959
            self.match(HiveParser.RPAREN)
            self.state = 3961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 3960
                self.match(HiveParser.KW_AS)


            self.state = 3963
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitioningSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionByClause(self):
            return self.getTypedRuleContext(HiveParser.PartitionByClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitioningSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningSpec" ):
                listener.enterPartitioningSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningSpec" ):
                listener.exitPartitioningSpec(self)




    def partitioningSpec(self):

        localctx = HiveParser.PartitioningSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_partitioningSpec)
        self._la = 0 # Token type
        try:
            self.state = 3976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3965
                self.partitionByClause()
                self.state = 3967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 3966
                    self.orderByClause()


                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3969
                self.orderByClause()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3970
                self.distributeByClause()
                self.state = 3972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3971
                    self.sortByClause()


                pass
            elif token in [303]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3974
                self.sortByClause()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3975
                self.clusterByClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTableFunctionSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionTableFunctionSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTableFunctionSource" ):
                listener.enterPartitionTableFunctionSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTableFunctionSource" ):
                listener.exitPartitionTableFunctionSource(self)




    def partitionTableFunctionSource(self):

        localctx = HiveParser.PartitionTableFunctionSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_partitionTableFunctionSource)
        try:
            self.state = 3981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3978
                self.subQuerySource()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3979
                self.tableSource()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3980
                self.partitionedTableFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedTableFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Id_Context
            self.ptfsrc = None # PartitionTableFunctionSourceContext
            self.spec = None # PartitioningSpecContext
            self.alias = None # Id_Context

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def partitionTableFunctionSource(self):
            return self.getTypedRuleContext(HiveParser.PartitionTableFunctionSourceContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Identifier)
            else:
                return self.getToken(HiveParser.Identifier, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def partitioningSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitioningSpecContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionedTableFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionedTableFunction" ):
                listener.enterPartitionedTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionedTableFunction" ):
                listener.exitPartitionedTableFunction(self)




    def partitionedTableFunction(self):

        localctx = HiveParser.PartitionedTableFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_partitionedTableFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3983
            localctx.n = self.id_()
            self.state = 3984
            self.match(HiveParser.LPAREN)
            self.state = 3985
            self.match(HiveParser.KW_ON)
            self.state = 3986
            localctx.ptfsrc = self.partitionTableFunctionSource()
            self.state = 3988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==93 or _la==219 or _la==227 or _la==303:
                self.state = 3987
                localctx.spec = self.partitioningSpec()


            self.state = 4005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==418:
                self.state = 3990
                self.match(HiveParser.Identifier)
                self.state = 3991
                self.match(HiveParser.LPAREN)
                self.state = 3992
                self.expression()
                self.state = 3993
                self.match(HiveParser.RPAREN)
                self.state = 4002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 3994
                    self.match(HiveParser.COMMA)
                    self.state = 3995
                    self.match(HiveParser.Identifier)
                    self.state = 3996
                    self.match(HiveParser.LPAREN)
                    self.state = 3997
                    self.expression()
                    self.state = 3998
                    self.match(HiveParser.RPAREN)
                    self.state = 4004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4007
            self.match(HiveParser.RPAREN)
            self.state = 4009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 4008
                localctx.alias = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHERE(self):
            return self.getToken(HiveParser.KW_WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(HiveParser.SearchConditionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = HiveParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4011
            self.match(HiveParser.KW_WHERE)
            self.state = 4012
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_searchCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchCondition" ):
                listener.enterSearchCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchCondition" ):
                listener.exitSearchCondition(self)




    def searchCondition(self):

        localctx = HiveParser.SearchConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_searchCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4014
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valuesSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesSource" ):
                listener.enterValuesSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesSource" ):
                listener.exitValuesSource(self)




    def valuesSource(self):

        localctx = HiveParser.ValuesSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_valuesSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4016
            self.valuesClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUES(self):
            return self.getToken(HiveParser.KW_VALUES, 0)

        def valuesTableConstructor(self):
            return self.getTypedRuleContext(HiveParser.ValuesTableConstructorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valuesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesClause" ):
                listener.enterValuesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesClause" ):
                listener.exitValuesClause(self)




    def valuesClause(self):

        localctx = HiveParser.ValuesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_valuesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4018
            self.match(HiveParser.KW_VALUES)
            self.state = 4019
            self.valuesTableConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesTableConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueRowConstructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ValueRowConstructorContext)
            else:
                return self.getTypedRuleContext(HiveParser.ValueRowConstructorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def firstValueRowConstructor(self):
            return self.getTypedRuleContext(HiveParser.FirstValueRowConstructorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valuesTableConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesTableConstructor" ):
                listener.enterValuesTableConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesTableConstructor" ):
                listener.exitValuesTableConstructor(self)




    def valuesTableConstructor(self):

        localctx = HiveParser.ValuesTableConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_valuesTableConstructor)
        self._la = 0 # Token type
        try:
            self.state = 4037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4021
                self.valueRowConstructor()
                self.state = 4026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 4022
                    self.match(HiveParser.COMMA)
                    self.state = 4023
                    self.valueRowConstructor()
                    self.state = 4028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4029
                self.firstValueRowConstructor()
                self.state = 4034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 4030
                    self.match(HiveParser.COMMA)
                    self.state = 4031
                    self.valueRowConstructor()
                    self.state = 4036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueRowConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valueRowConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueRowConstructor" ):
                listener.enterValueRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueRowConstructor" ):
                listener.exitValueRowConstructor(self)




    def valueRowConstructor(self):

        localctx = HiveParser.ValueRowConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_valueRowConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4039
            self.expressionsInParenthesis()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FirstValueRowConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def firstExpressionsWithAlias(self):
            return self.getTypedRuleContext(HiveParser.FirstExpressionsWithAliasContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_firstValueRowConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstValueRowConstructor" ):
                listener.enterFirstValueRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstValueRowConstructor" ):
                listener.exitFirstValueRowConstructor(self)




    def firstValueRowConstructor(self):

        localctx = HiveParser.FirstValueRowConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_firstValueRowConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4041
            self.match(HiveParser.LPAREN)
            self.state = 4042
            self.firstExpressionsWithAlias()
            self.state = 4043
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualTableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_virtualTableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualTableSource" ):
                listener.enterVirtualTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualTableSource" ):
                listener.exitVirtualTableSource(self)




    def virtualTableSource(self):

        localctx = HiveParser.VirtualTableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_virtualTableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4045
            self.match(HiveParser.KW_TABLE)
            self.state = 4046
            self.match(HiveParser.LPAREN)
            self.state = 4047
            self.valuesClause()
            self.state = 4048
            self.match(HiveParser.RPAREN)
            self.state = 4050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 4049
                self.match(HiveParser.KW_AS)


            self.state = 4052
            self.tableAlias()
            self.state = 4062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 4053
                self.match(HiveParser.LPAREN)
                self.state = 4054
                self.id_()
                self.state = 4059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 4055
                    self.match(HiveParser.COMMA)
                    self.state = 4056
                    self.id_()
                    self.state = 4061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4064
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SELECT(self):
            return self.getToken(HiveParser.KW_SELECT, 0)

        def selectList(self):
            return self.getTypedRuleContext(HiveParser.SelectListContext,0)


        def KW_TRANSFORM(self):
            return self.getToken(HiveParser.KW_TRANSFORM, 0)

        def selectTrfmClause(self):
            return self.getTypedRuleContext(HiveParser.SelectTrfmClauseContext,0)


        def QUERY_HINT(self):
            return self.getToken(HiveParser.QUERY_HINT, 0)

        def all_distinct(self):
            return self.getTypedRuleContext(HiveParser.All_distinctContext,0)


        def trfmClause(self):
            return self.getTypedRuleContext(HiveParser.TrfmClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)




    def selectClause(self):

        localctx = HiveParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.state = 4079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [288]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4066
                self.match(HiveParser.KW_SELECT)
                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==422:
                    self.state = 4067
                    self.match(HiveParser.QUERY_HINT)


                self.state = 4076
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 132, 133, 137, 140, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 156, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 326, 327, 328, 329, 331, 333, 334, 335, 338, 339, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 386, 400, 401, 402, 406, 410, 412, 414, 415, 417, 418, 419]:
                    self.state = 4071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==92:
                        self.state = 4070
                        self.all_distinct()


                    self.state = 4073
                    self.selectList()
                    pass
                elif token in [336]:
                    self.state = 4074
                    self.match(HiveParser.KW_TRANSFORM)
                    self.state = 4075
                    self.selectTrfmClause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [190, 258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4078
                self.trfmClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_all_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct" ):
                listener.enterAll_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct" ):
                listener.exitAll_distinct(self)




    def all_distinct(self):

        localctx = HiveParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4081
            _la = self._input.LA(1)
            if not(_la==7 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectList" ):
                listener.enterSelectList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectList" ):
                listener.exitSelectList(self)




    def selectList(self):

        localctx = HiveParser.SelectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_selectList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4083
            self.selectItem()
            self.state = 4088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,479,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4084
                    self.match(HiveParser.COMMA)
                    self.state = 4085
                    self.selectItem() 
                self.state = 4090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectTrfmClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def selectExpressionList(self):
            return self.getTypedRuleContext(HiveParser.SelectExpressionListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(HiveParser.RowFormatContext,i)


        def recordWriter(self):
            return self.getTypedRuleContext(HiveParser.RecordWriterContext,0)


        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def recordReader(self):
            return self.getTypedRuleContext(HiveParser.RecordReaderContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectTrfmClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectTrfmClause" ):
                listener.enterSelectTrfmClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectTrfmClause" ):
                listener.exitSelectTrfmClause(self)




    def selectTrfmClause(self):

        localctx = HiveParser.SelectTrfmClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_selectTrfmClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4091
            self.match(HiveParser.LPAREN)
            self.state = 4092
            self.selectExpressionList()
            self.state = 4093
            self.match(HiveParser.RPAREN)
            self.state = 4094
            self.rowFormat()
            self.state = 4095
            self.recordWriter()
            self.state = 4096
            self.match(HiveParser.KW_USING)
            self.state = 4097
            self.match(HiveParser.StringLiteral)
            self.state = 4110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 4098
                self.match(HiveParser.KW_AS)
                self.state = 4108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                if la_ == 1:
                    self.state = 4099
                    self.match(HiveParser.LPAREN)
                    self.state = 4102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
                    if la_ == 1:
                        self.state = 4100
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 4101
                        self.columnNameTypeList()
                        pass


                    self.state = 4104
                    self.match(HiveParser.RPAREN)
                    pass

                elif la_ == 2:
                    self.state = 4106
                    self.aliasList()
                    pass

                elif la_ == 3:
                    self.state = 4107
                    self.columnNameTypeList()
                    pass




            self.state = 4112
            self.rowFormat()
            self.state = 4113
            self.recordReader()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableAllColumns(self):
            return self.getTypedRuleContext(HiveParser.TableAllColumnsContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItem" ):
                listener.enterSelectItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItem" ):
                listener.exitSelectItem(self)




    def selectItem(self):

        localctx = HiveParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 4135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4115
                self.tableAllColumns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4116
                self.expression()
                self.state = 4133
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                if la_ == 1:
                    self.state = 4118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 4117
                        self.match(HiveParser.KW_AS)


                    self.state = 4120
                    self.id_()

                elif la_ == 2:
                    self.state = 4121
                    self.match(HiveParser.KW_AS)
                    self.state = 4122
                    self.match(HiveParser.LPAREN)
                    self.state = 4123
                    self.id_()
                    self.state = 4128
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==384:
                        self.state = 4124
                        self.match(HiveParser.COMMA)
                        self.state = 4125
                        self.id_()
                        self.state = 4130
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4131
                    self.match(HiveParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrfmClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectExpressionList(self):
            return self.getTypedRuleContext(HiveParser.SelectExpressionListContext,0)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(HiveParser.RowFormatContext,i)


        def recordWriter(self):
            return self.getTypedRuleContext(HiveParser.RecordWriterContext,0)


        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def recordReader(self):
            return self.getTypedRuleContext(HiveParser.RecordReaderContext,0)


        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_REDUCE(self):
            return self.getToken(HiveParser.KW_REDUCE, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_trfmClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrfmClause" ):
                listener.enterTrfmClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrfmClause" ):
                listener.exitTrfmClause(self)




    def trfmClause(self):

        localctx = HiveParser.TrfmClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_trfmClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4137
            _la = self._input.LA(1)
            if not(_la==190 or _la==258):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4138
            self.selectExpressionList()
            self.state = 4139
            self.rowFormat()
            self.state = 4140
            self.recordWriter()
            self.state = 4141
            self.match(HiveParser.KW_USING)
            self.state = 4142
            self.match(HiveParser.StringLiteral)
            self.state = 4155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 4143
                self.match(HiveParser.KW_AS)
                self.state = 4153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
                if la_ == 1:
                    self.state = 4144
                    self.match(HiveParser.LPAREN)
                    self.state = 4147
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                    if la_ == 1:
                        self.state = 4145
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 4146
                        self.columnNameTypeList()
                        pass


                    self.state = 4149
                    self.match(HiveParser.RPAREN)
                    pass

                elif la_ == 2:
                    self.state = 4151
                    self.aliasList()
                    pass

                elif la_ == 3:
                    self.state = 4152
                    self.columnNameTypeList()
                    pass




            self.state = 4157
            self.rowFormat()
            self.state = 4158
            self.recordReader()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableAllColumns(self):
            return self.getTypedRuleContext(HiveParser.TableAllColumnsContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpression" ):
                listener.enterSelectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpression" ):
                listener.exitSelectExpression(self)




    def selectExpression(self):

        localctx = HiveParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_selectExpression)
        try:
            self.state = 4162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4160
                self.tableAllColumns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4161
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionList" ):
                listener.enterSelectExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionList" ):
                listener.exitSelectExpressionList(self)




    def selectExpressionList(self):

        localctx = HiveParser.SelectExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_selectExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4164
            self.selectExpression()
            self.state = 4169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4165
                self.match(HiveParser.COMMA)
                self.state = 4166
                self.selectExpression()
                self.state = 4171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WINDOW(self):
            return self.getToken(HiveParser.KW_WINDOW, 0)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_defnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_window_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_clause" ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_clause" ):
                listener.exitWindow_clause(self)




    def window_clause(self):

        localctx = HiveParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_window_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4172
            self.match(HiveParser.KW_WINDOW)
            self.state = 4173
            self.window_defn()
            self.state = 4178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4174
                self.match(HiveParser.COMMA)
                self.state = 4175
                self.window_defn()
                self.state = 4180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def window_specification(self):
            return self.getTypedRuleContext(HiveParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = HiveParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_window_defn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4181
            self.id_()
            self.state = 4182
            self.match(HiveParser.KW_AS)
            self.state = 4183
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitioningSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitioningSpecContext,0)


        def window_frame(self):
            return self.getTypedRuleContext(HiveParser.Window_frameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_specification" ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_specification" ):
                listener.exitWindow_specification(self)




    def window_specification(self):

        localctx = HiveParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_window_specification)
        self._la = 0 # Token type
        try:
            self.state = 4197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4185
                self.id_()
                pass
            elif token in [386]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4186
                self.match(HiveParser.LPAREN)
                self.state = 4188
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 4187
                    self.id_()


                self.state = 4191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==93 or _la==219 or _la==227 or _la==303:
                    self.state = 4190
                    self.partitioningSpec()


                self.state = 4194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==250 or _la==282:
                    self.state = 4193
                    self.window_frame()


                self.state = 4196
                self.match(HiveParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_range_expression(self):
            return self.getTypedRuleContext(HiveParser.Window_range_expressionContext,0)


        def window_value_expression(self):
            return self.getTypedRuleContext(HiveParser.Window_value_expressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_frame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame" ):
                listener.enterWindow_frame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame" ):
                listener.exitWindow_frame(self)




    def window_frame(self):

        localctx = HiveParser.Window_frameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_window_frame)
        try:
            self.state = 4201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [282]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4199
                self.window_range_expression()
                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4200
                self.window_value_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROWS(self):
            return self.getToken(HiveParser.KW_ROWS, 0)

        def window_frame_start_boundary(self):
            return self.getTypedRuleContext(HiveParser.Window_frame_start_boundaryContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def window_frame_boundary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_frame_boundaryContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_frame_boundaryContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_range_expression" ):
                listener.enterWindow_range_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_range_expression" ):
                listener.exitWindow_range_expression(self)




    def window_range_expression(self):

        localctx = HiveParser.Window_range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_window_range_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4203
            self.match(HiveParser.KW_ROWS)
            self.state = 4210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62, 343, 417]:
                self.state = 4204
                self.window_frame_start_boundary()
                pass
            elif token in [25]:
                self.state = 4205
                self.match(HiveParser.KW_BETWEEN)
                self.state = 4206
                self.window_frame_boundary()
                self.state = 4207
                self.match(HiveParser.KW_AND)
                self.state = 4208
                self.window_frame_boundary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RANGE(self):
            return self.getToken(HiveParser.KW_RANGE, 0)

        def window_frame_start_boundary(self):
            return self.getTypedRuleContext(HiveParser.Window_frame_start_boundaryContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def window_frame_boundary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_frame_boundaryContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_frame_boundaryContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_value_expression" ):
                listener.enterWindow_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_value_expression" ):
                listener.exitWindow_value_expression(self)




    def window_value_expression(self):

        localctx = HiveParser.Window_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_window_value_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4212
            self.match(HiveParser.KW_RANGE)
            self.state = 4219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62, 343, 417]:
                self.state = 4213
                self.window_frame_start_boundary()
                pass
            elif token in [25]:
                self.state = 4214
                self.match(HiveParser.KW_BETWEEN)
                self.state = 4215
                self.window_frame_boundary()
                self.state = 4216
                self.match(HiveParser.KW_AND)
                self.state = 4217
                self.window_frame_boundary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_start_boundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNBOUNDED(self):
            return self.getToken(HiveParser.KW_UNBOUNDED, 0)

        def KW_PRECEDING(self):
            return self.getToken(HiveParser.KW_PRECEDING, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_frame_start_boundary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_start_boundary" ):
                listener.enterWindow_frame_start_boundary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_start_boundary" ):
                listener.exitWindow_frame_start_boundary(self)




    def window_frame_start_boundary(self):

        localctx = HiveParser.Window_frame_start_boundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_window_frame_start_boundary)
        try:
            self.state = 4227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [343]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4221
                self.match(HiveParser.KW_UNBOUNDED)
                self.state = 4222
                self.match(HiveParser.KW_PRECEDING)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4223
                self.match(HiveParser.KW_CURRENT)
                self.state = 4224
                self.match(HiveParser.KW_ROW)
                pass
            elif token in [417]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4225
                self.match(HiveParser.Number)
                self.state = 4226
                self.match(HiveParser.KW_PRECEDING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNBOUNDED(self):
            return self.getToken(HiveParser.KW_UNBOUNDED, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_PRECEDING(self):
            return self.getToken(HiveParser.KW_PRECEDING, 0)

        def KW_FOLLOWING(self):
            return self.getToken(HiveParser.KW_FOLLOWING, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_frame_boundary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_boundary" ):
                listener.enterWindow_frame_boundary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_boundary" ):
                listener.exitWindow_frame_boundary(self)




    def window_frame_boundary(self):

        localctx = HiveParser.Window_frame_boundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_window_frame_boundary)
        self._la = 0 # Token type
        try:
            self.state = 4233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [343, 417]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4229
                _la = self._input.LA(1)
                if not(_la==343 or _la==417):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4230
                _la = self._input.LA(1)
                if not(_la==128 or _la==237):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4231
                self.match(HiveParser.KW_CURRENT)
                self.state = 4232
                self.match(HiveParser.KW_ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def groupby_expression(self):
            return self.getTypedRuleContext(HiveParser.Groupby_expressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = HiveParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4235
            self.match(HiveParser.KW_GROUP)
            self.state = 4236
            self.match(HiveParser.KW_BY)
            self.state = 4237
            self.groupby_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollupStandard(self):
            return self.getTypedRuleContext(HiveParser.RollupStandardContext,0)


        def rollupOldSyntax(self):
            return self.getTypedRuleContext(HiveParser.RollupOldSyntaxContext,0)


        def groupByEmpty(self):
            return self.getTypedRuleContext(HiveParser.GroupByEmptyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupby_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_expression" ):
                listener.enterGroupby_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_expression" ):
                listener.exitGroupby_expression(self)




    def groupby_expression(self):

        localctx = HiveParser.Groupby_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_groupby_expression)
        try:
            self.state = 4242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4239
                self.rollupStandard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4240
                self.rollupOldSyntax()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4241
                self.groupByEmpty()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_groupByEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByEmpty" ):
                listener.enterGroupByEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByEmpty" ):
                listener.exitGroupByEmpty(self)




    def groupByEmpty(self):

        localctx = HiveParser.GroupByEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_groupByEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4244
            self.match(HiveParser.LPAREN)
            self.state = 4245
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupStandardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rollup = None # Token
            self.cube = None # Token

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ROLLUP(self):
            return self.getToken(HiveParser.KW_ROLLUP, 0)

        def KW_CUBE(self):
            return self.getToken(HiveParser.KW_CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rollupStandard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupStandard" ):
                listener.enterRollupStandard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupStandard" ):
                listener.exitRollupStandard(self)




    def rollupStandard(self):

        localctx = HiveParser.RollupStandardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_rollupStandard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [280]:
                self.state = 4247
                localctx.rollup = self.match(HiveParser.KW_ROLLUP)
                pass
            elif token in [61]:
                self.state = 4248
                localctx.cube = self.match(HiveParser.KW_CUBE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4251
            self.match(HiveParser.LPAREN)
            self.state = 4252
            self.expression()
            self.state = 4257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4253
                self.match(HiveParser.COMMA)
                self.state = 4254
                self.expression()
                self.state = 4259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4260
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupOldSyntaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # ExpressionsNotInParenthesisContext
            self.rollup = None # Token
            self.cube = None # Token
            self.sets = None # Token

        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def KW_ROLLUP(self):
            return self.getToken(HiveParser.KW_ROLLUP, 0)

        def KW_CUBE(self):
            return self.getToken(HiveParser.KW_CUBE, 0)

        def KW_SETS(self):
            return self.getToken(HiveParser.KW_SETS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def groupingSetExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.GroupingSetExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.GroupingSetExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_GROUPING(self):
            return self.getToken(HiveParser.KW_GROUPING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rollupOldSyntax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupOldSyntax" ):
                listener.enterRollupOldSyntax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupOldSyntax" ):
                listener.exitRollupOldSyntax(self)




    def rollupOldSyntax(self):

        localctx = HiveParser.RollupOldSyntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_rollupOldSyntax)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4262
            localctx.expr = self.expressionsNotInParenthesis()
            self.state = 4267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 4263
                localctx.rollup = self.match(HiveParser.KW_WITH)
                self.state = 4264
                self.match(HiveParser.KW_ROLLUP)

            elif la_ == 2:
                self.state = 4265
                localctx.cube = self.match(HiveParser.KW_WITH)
                self.state = 4266
                self.match(HiveParser.KW_CUBE)


            self.state = 4282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 4269
                localctx.sets = self.match(HiveParser.KW_GROUPING)
                self.state = 4270
                self.match(HiveParser.KW_SETS)
                self.state = 4271
                self.match(HiveParser.LPAREN)
                self.state = 4272
                self.groupingSetExpression()
                self.state = 4277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==384:
                    self.state = 4273
                    self.match(HiveParser.COMMA)
                    self.state = 4274
                    self.groupingSetExpression()
                    self.state = 4279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4280
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingSetExpressionMultiple(self):
            return self.getTypedRuleContext(HiveParser.GroupingSetExpressionMultipleContext,0)


        def groupingExpressionSingle(self):
            return self.getTypedRuleContext(HiveParser.GroupingExpressionSingleContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupingSetExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSetExpression" ):
                listener.enterGroupingSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSetExpression" ):
                listener.exitGroupingSetExpression(self)




    def groupingSetExpression(self):

        localctx = HiveParser.GroupingSetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_groupingSetExpression)
        try:
            self.state = 4286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4284
                self.groupingSetExpressionMultiple()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4285
                self.groupingExpressionSingle()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetExpressionMultipleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_groupingSetExpressionMultiple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSetExpressionMultiple" ):
                listener.enterGroupingSetExpressionMultiple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSetExpressionMultiple" ):
                listener.exitGroupingSetExpressionMultiple(self)




    def groupingSetExpressionMultiple(self):

        localctx = HiveParser.GroupingSetExpressionMultipleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_groupingSetExpressionMultiple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4288
            self.match(HiveParser.LPAREN)
            self.state = 4290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8415293117714037378) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -171163878771171435) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 9205050320105143587) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4448221519167061869) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484709125765410815) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & 1224028420243305391) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & 971843) != 0):
                self.state = 4289
                self.expression()


            self.state = 4296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4292
                self.match(HiveParser.COMMA)
                self.state = 4293
                self.expression()
                self.state = 4298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4299
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionSingleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupingExpressionSingle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingExpressionSingle" ):
                listener.enterGroupingExpressionSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingExpressionSingle" ):
                listener.exitGroupingExpressionSingle(self)




    def groupingExpressionSingle(self):

        localctx = HiveParser.GroupingExpressionSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_groupingExpressionSingle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4301
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAVING(self):
            return self.getToken(HiveParser.KW_HAVING, 0)

        def havingCondition(self):
            return self.getTypedRuleContext(HiveParser.HavingConditionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = HiveParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4303
            self.match(HiveParser.KW_HAVING)
            self.state = 4304
            self.havingCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_QUALIFY(self):
            return self.getToken(HiveParser.KW_QUALIFY, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_qualifyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifyClause" ):
                listener.enterQualifyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifyClause" ):
                listener.exitQualifyClause(self)




    def qualifyClause(self):

        localctx = HiveParser.QualifyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_qualifyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4306
            self.match(HiveParser.KW_QUALIFY)
            self.state = 4307
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_havingCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingCondition" ):
                listener.enterHavingCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingCondition" ):
                listener.exitHavingCondition(self)




    def havingCondition(self):

        localctx = HiveParser.HavingConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_havingCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4309
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_expressionsInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsInParenthesis" ):
                listener.enterExpressionsInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsInParenthesis" ):
                listener.exitExpressionsInParenthesis(self)




    def expressionsInParenthesis(self):

        localctx = HiveParser.ExpressionsInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_expressionsInParenthesis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4311
            self.match(HiveParser.LPAREN)
            self.state = 4312
            self.expressionsNotInParenthesis()
            self.state = 4313
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsNotInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # ExpressionOrDefaultContext
            self.more = None # ExpressionPartContext

        def expressionOrDefault(self):
            return self.getTypedRuleContext(HiveParser.ExpressionOrDefaultContext,0)


        def expressionPart(self):
            return self.getTypedRuleContext(HiveParser.ExpressionPartContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionsNotInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsNotInParenthesis" ):
                listener.enterExpressionsNotInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsNotInParenthesis" ):
                listener.exitExpressionsNotInParenthesis(self)




    def expressionsNotInParenthesis(self):

        localctx = HiveParser.ExpressionsNotInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_expressionsNotInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4315
            localctx.first = self.expressionOrDefault()
            self.state = 4317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==384:
                self.state = 4316
                localctx.more = self.expressionPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionOrDefaultContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionPart" ):
                listener.enterExpressionPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionPart" ):
                listener.exitExpressionPart(self)




    def expressionPart(self):

        localctx = HiveParser.ExpressionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_expressionPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4321 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4319
                self.match(HiveParser.COMMA)
                self.state = 4320
                self.expressionOrDefault()
                self.state = 4323 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==384):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultValue(self):
            return self.getTypedRuleContext(HiveParser.DefaultValueContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = HiveParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_expressionOrDefault)
        try:
            self.state = 4327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,513,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4325
                self.defaultValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4326
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FirstExpressionsWithAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # ExpressionContext
            self.colAlias = None # Id_Context

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def expressionWithAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionWithAliasContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionWithAliasContext,i)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_firstExpressionsWithAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstExpressionsWithAlias" ):
                listener.enterFirstExpressionsWithAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstExpressionsWithAlias" ):
                listener.exitFirstExpressionsWithAlias(self)




    def firstExpressionsWithAlias(self):

        localctx = HiveParser.FirstExpressionsWithAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_firstExpressionsWithAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4329
            localctx.first = self.expression()
            self.state = 4331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 4330
                self.match(HiveParser.KW_AS)


            self.state = 4334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                self.state = 4333
                localctx.colAlias = self.id_()


            self.state = 4340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4336
                self.match(HiveParser.COMMA)
                self.state = 4337
                self.expressionWithAlias()
                self.state = 4342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionWithAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Id_Context

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionWithAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionWithAlias" ):
                listener.enterExpressionWithAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionWithAlias" ):
                listener.exitExpressionWithAlias(self)




    def expressionWithAlias(self):

        localctx = HiveParser.ExpressionWithAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_expressionWithAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4343
            self.expression()
            self.state = 4345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 4344
                self.match(HiveParser.KW_AS)


            self.state = 4348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0) or _la==418:
                self.state = 4347
                localctx.alias = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = HiveParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_expressions)
        try:
            self.state = 4352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4350
                self.expressionsInParenthesis()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4351
                self.expressionsNotInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrderInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRefOrderInParenthesis" ):
                listener.enterColumnRefOrderInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRefOrderInParenthesis" ):
                listener.exitColumnRefOrderInParenthesis(self)




    def columnRefOrderInParenthesis(self):

        localctx = HiveParser.ColumnRefOrderInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_columnRefOrderInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4354
            self.match(HiveParser.LPAREN)
            self.state = 4355
            self.columnRefOrder()
            self.state = 4360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4356
                self.match(HiveParser.COMMA)
                self.state = 4357
                self.columnRefOrder()
                self.state = 4362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4363
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderNotInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrderNotInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRefOrderNotInParenthesis" ):
                listener.enterColumnRefOrderNotInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRefOrderNotInParenthesis" ):
                listener.exitColumnRefOrderNotInParenthesis(self)




    def columnRefOrderNotInParenthesis(self):

        localctx = HiveParser.ColumnRefOrderNotInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_columnRefOrderNotInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4365
            self.columnRefOrder()
            self.state = 4370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4366
                self.match(HiveParser.COMMA)
                self.state = 4367
                self.columnRefOrder()
                self.state = 4372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ORDER(self):
            return self.getToken(HiveParser.KW_ORDER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = HiveParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4373
            self.match(HiveParser.KW_ORDER)
            self.state = 4374
            self.match(HiveParser.KW_BY)
            self.state = 4375
            self.columnRefOrder()
            self.state = 4380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4376
                self.match(HiveParser.COMMA)
                self.state = 4377
                self.columnRefOrder()
                self.state = 4382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CLUSTER(self):
            return self.getToken(HiveParser.KW_CLUSTER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_clusterByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterByClause" ):
                listener.enterClusterByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterByClause" ):
                listener.exitClusterByClause(self)




    def clusterByClause(self):

        localctx = HiveParser.ClusterByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_clusterByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4383
            self.match(HiveParser.KW_CLUSTER)
            self.state = 4384
            self.match(HiveParser.KW_BY)
            self.state = 4385
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByClause" ):
                listener.enterPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByClause" ):
                listener.exitPartitionByClause(self)




    def partitionByClause(self):

        localctx = HiveParser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_partitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4387
            self.match(HiveParser.KW_PARTITION)
            self.state = 4388
            self.match(HiveParser.KW_BY)
            self.state = 4389
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistributeByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISTRIBUTE(self):
            return self.getToken(HiveParser.KW_DISTRIBUTE, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_distributeByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistributeByClause" ):
                listener.enterDistributeByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistributeByClause" ):
                listener.exitDistributeByClause(self)




    def distributeByClause(self):

        localctx = HiveParser.DistributeByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_distributeByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4391
            self.match(HiveParser.KW_DISTRIBUTE)
            self.state = 4392
            self.match(HiveParser.KW_BY)
            self.state = 4393
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SORT(self):
            return self.getToken(HiveParser.KW_SORT, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def columnRefOrderInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ColumnRefOrderInParenthesisContext,0)


        def columnRefOrderNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ColumnRefOrderNotInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sortByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortByClause" ):
                listener.enterSortByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortByClause" ):
                listener.exitSortByClause(self)




    def sortByClause(self):

        localctx = HiveParser.SortByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_sortByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4395
            self.match(HiveParser.KW_SORT)
            self.state = 4396
            self.match(HiveParser.KW_BY)
            self.state = 4399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.state = 4397
                self.columnRefOrderInParenthesis()
                pass

            elif la_ == 2:
                self.state = 4398
                self.columnRefOrderNotInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.leading = None # Token
            self.trailing = None # Token
            self.trim_characters = None # SelectExpressionContext
            self.str_ = None # SelectExpressionContext

        def KW_TRIM(self):
            return self.getToken(HiveParser.KW_TRIM, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def KW_BOTH(self):
            return self.getToken(HiveParser.KW_BOTH, 0)

        def KW_LEADING(self):
            return self.getToken(HiveParser.KW_LEADING, 0)

        def KW_TRAILING(self):
            return self.getToken(HiveParser.KW_TRAILING, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_trimFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunction" ):
                listener.enterTrimFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunction" ):
                listener.exitTrimFunction(self)




    def trimFunction(self):

        localctx = HiveParser.TrimFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_trimFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4401
            self.match(HiveParser.KW_TRIM)
            self.state = 4402
            self.match(HiveParser.LPAREN)
            self.state = 4406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [172]:
                self.state = 4403
                localctx.leading = self.match(HiveParser.KW_LEADING)
                pass
            elif token in [332]:
                self.state = 4404
                localctx.trailing = self.match(HiveParser.KW_TRAILING)
                pass
            elif token in [29]:
                self.state = 4405
                self.match(HiveParser.KW_BOTH)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 132, 133, 134, 137, 140, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 156, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 326, 327, 328, 329, 331, 333, 334, 335, 338, 339, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 386, 400, 401, 402, 406, 410, 412, 414, 415, 417, 418, 419]:
                pass
            else:
                pass
            self.state = 4409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8415293117714037378) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -171163878771171435) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 9205050320105143587) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4448221519167061869) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484709125765410815) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & 1224028420243305391) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & 971847) != 0):
                self.state = 4408
                localctx.trim_characters = self.selectExpression()


            self.state = 4411
            self.match(HiveParser.KW_FROM)
            self.state = 4412
            localctx.str_ = self.selectExpression()
            self.state = 4413
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token
            self.dist = None # All_distinctContext
            self.within = None # Token
            self.ordBy = None # OrderByClauseContext
            self.nt = None # Null_treatmentContext
            self.ws = None # Window_specificationContext

        def trimFunction(self):
            return self.getTypedRuleContext(HiveParser.TrimFunctionContext,0)


        def functionName(self):
            return self.getTypedRuleContext(HiveParser.FunctionNameContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_OVER(self):
            return self.getToken(HiveParser.KW_OVER, 0)

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def KW_WITHIN(self):
            return self.getToken(HiveParser.KW_WITHIN, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def window_specification(self):
            return self.getTypedRuleContext(HiveParser.Window_specificationContext,0)


        def null_treatment(self):
            return self.getTypedRuleContext(HiveParser.Null_treatmentContext,0)


        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def all_distinct(self):
            return self.getTypedRuleContext(HiveParser.All_distinctContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_function_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_" ):
                listener.enterFunction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_" ):
                listener.exitFunction_(self)




    def function_(self):

        localctx = HiveParser.Function_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_function_)
        self._la = 0 # Token type
        try:
            self.state = 4455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4415
                self.trimFunction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4416
                self.functionName()
                self.state = 4417
                self.match(HiveParser.LPAREN)
                self.state = 4432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                if la_ == 1:
                    self.state = 4418
                    localctx.star = self.match(HiveParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 4420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==92:
                        self.state = 4419
                        localctx.dist = self.all_distinct()


                    self.state = 4430
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                    if la_ == 1:
                        self.state = 4422
                        self.selectExpression()
                        self.state = 4427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==384:
                            self.state = 4423
                            self.match(HiveParser.COMMA)
                            self.state = 4424
                            self.selectExpression()
                            self.state = 4429
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass


                self.state = 4453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 4434
                    self.match(HiveParser.RPAREN)
                    self.state = 4435
                    localctx.within = self.match(HiveParser.KW_WITHIN)
                    self.state = 4436
                    self.match(HiveParser.KW_GROUP)
                    self.state = 4437
                    self.match(HiveParser.LPAREN)
                    self.state = 4438
                    localctx.ordBy = self.orderByClause()
                    self.state = 4439
                    self.match(HiveParser.RPAREN)
                    pass

                elif la_ == 2:
                    self.state = 4441
                    self.match(HiveParser.RPAREN)
                    self.state = 4443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146 or _la==271:
                        self.state = 4442
                        localctx.nt = self.null_treatment()


                    self.state = 4445
                    self.match(HiveParser.KW_OVER)
                    self.state = 4446
                    localctx.ws = self.window_specification()
                    pass

                elif la_ == 3:
                    self.state = 4447
                    localctx.nt = self.null_treatment()
                    self.state = 4448
                    self.match(HiveParser.RPAREN)
                    self.state = 4449
                    self.match(HiveParser.KW_OVER)
                    self.state = 4450
                    localctx.ws = self.window_specification()
                    pass

                elif la_ == 4:
                    self.state = 4452
                    self.match(HiveParser.RPAREN)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_treatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RESPECT(self):
            return self.getToken(HiveParser.KW_RESPECT, 0)

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_IGNORE(self):
            return self.getToken(HiveParser.KW_IGNORE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_null_treatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_treatment" ):
                listener.enterNull_treatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_treatment" ):
                listener.exitNull_treatment(self)




    def null_treatment(self):

        localctx = HiveParser.Null_treatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_null_treatment)
        try:
            self.state = 4461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4457
                self.match(HiveParser.KW_RESPECT)
                self.state = 4458
                self.match(HiveParser.KW_NULLS)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4459
                self.match(HiveParser.KW_IGNORE)
                self.state = 4460
                self.match(HiveParser.KW_NULLS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def sql11ReservedKeywordsUsedAsFunctionName(self):
            return self.getTypedRuleContext(HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = HiveParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_functionName)
        try:
            self.state = 4465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 418]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4463
                self.functionIdentifier()
                pass
            elif token in [16, 26, 27, 28, 63, 64, 71, 96, 126, 140, 145, 156, 190, 254, 300, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4464
                self.sql11ReservedKeywordsUsedAsFunctionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.toType = None # PrimitiveTypeContext
            self.fmt = None # Token

        def KW_CAST(self):
            return self.getToken(HiveParser.KW_CAST, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = HiveParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4467
            self.match(HiveParser.KW_CAST)
            self.state = 4468
            self.match(HiveParser.LPAREN)
            self.state = 4469
            self.expression()
            self.state = 4470
            self.match(HiveParser.KW_AS)
            self.state = 4471
            localctx.toType = self.primitiveType()
            self.state = 4474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 4472
                localctx.fmt = self.match(HiveParser.KW_FORMAT)
                self.state = 4473
                self.match(HiveParser.StringLiteral)


            self.state = 4476
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def KW_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_WHEN)
            else:
                return self.getToken(HiveParser.KW_WHEN, i)

        def KW_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_THEN)
            else:
                return self.getToken(HiveParser.KW_THEN, i)

        def KW_ELSE(self):
            return self.getToken(HiveParser.KW_ELSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_caseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpression" ):
                listener.enterCaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpression" ):
                listener.exitCaseExpression(self)




    def caseExpression(self):

        localctx = HiveParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_caseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4478
            self.match(HiveParser.KW_CASE)
            self.state = 4479
            self.expression()
            self.state = 4485 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4480
                self.match(HiveParser.KW_WHEN)
                self.state = 4481
                self.expression()
                self.state = 4482
                self.match(HiveParser.KW_THEN)
                self.state = 4483
                self.expression()
                self.state = 4487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==371):
                    break

            self.state = 4491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 4489
                self.match(HiveParser.KW_ELSE)
                self.state = 4490
                self.expression()


            self.state = 4493
            self.match(HiveParser.KW_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def KW_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_WHEN)
            else:
                return self.getToken(HiveParser.KW_WHEN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_THEN)
            else:
                return self.getToken(HiveParser.KW_THEN, i)

        def KW_ELSE(self):
            return self.getToken(HiveParser.KW_ELSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = HiveParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4495
            self.match(HiveParser.KW_CASE)
            self.state = 4501 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4496
                self.match(HiveParser.KW_WHEN)
                self.state = 4497
                self.expression()
                self.state = 4498
                self.match(HiveParser.KW_THEN)
                self.state = 4499
                self.expression()
                self.state = 4503 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==371):
                    break

            self.state = 4507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 4505
                self.match(HiveParser.KW_ELSE)
                self.state = 4506
                self.expression()


            self.state = 4509
            self.match(HiveParser.KW_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.floorUnit = None # FloorDateQualifiersContext

        def KW_FLOOR(self):
            return self.getToken(HiveParser.KW_FLOOR, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def floorDateQualifiers(self):
            return self.getTypedRuleContext(HiveParser.FloorDateQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_floorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloorExpression" ):
                listener.enterFloorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloorExpression" ):
                listener.exitFloorExpression(self)




    def floorExpression(self):

        localctx = HiveParser.FloorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_floorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4511
            self.match(HiveParser.KW_FLOOR)
            self.state = 4512
            self.match(HiveParser.LPAREN)
            self.state = 4513
            self.expression()
            self.state = 4516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==330:
                self.state = 4514
                self.match(HiveParser.KW_TO)
                self.state = 4515
                localctx.floorUnit = self.floorDateQualifiers()


            self.state = 4518
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorDateQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_floorDateQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloorDateQualifiers" ):
                listener.enterFloorDateQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloorDateQualifiers" ):
                listener.exitFloorDateQualifiers(self)




    def floorDateQualifiers(self):

        localctx = HiveParser.FloorDateQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_floorDateQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4520
            _la = self._input.LA(1)
            if not(_la==73 or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 108086391056891905) != 0) or _la==247 or _la==287 or _la==370 or _la==380):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timeUnit = None # TimeQualifiersContext

        def KW_EXTRACT(self):
            return self.getToken(HiveParser.KW_EXTRACT, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def timeQualifiers(self):
            return self.getTypedRuleContext(HiveParser.TimeQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_extractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractExpression" ):
                listener.enterExtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractExpression" ):
                listener.exitExtractExpression(self)




    def extractExpression(self):

        localctx = HiveParser.ExtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_extractExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4522
            self.match(HiveParser.KW_EXTRACT)
            self.state = 4523
            self.match(HiveParser.LPAREN)
            self.state = 4524
            localctx.timeUnit = self.timeQualifiers()
            self.state = 4525
            self.match(HiveParser.KW_FROM)
            self.state = 4526
            self.expression()
            self.state = 4527
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_DOW(self):
            return self.getToken(HiveParser.KW_DOW, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timeQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeQualifiers" ):
                listener.enterTimeQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeQualifiers" ):
                listener.exitTimeQualifiers(self)




    def timeQualifiers(self):

        localctx = HiveParser.TimeQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_timeQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4529
            _la = self._input.LA(1)
            if not(_la==73 or _la==97 or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 108086391056891905) != 0) or _la==247 or _la==287 or _la==370 or _la==380):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalLiteral(self):
            return self.getTypedRuleContext(HiveParser.IntervalLiteralContext,0)


        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def dateLiteral(self):
            return self.getTypedRuleContext(HiveParser.DateLiteralContext,0)


        def timestampLiteral(self):
            return self.getTypedRuleContext(HiveParser.TimestampLiteralContext,0)


        def timestampLocalTZLiteral(self):
            return self.getTypedRuleContext(HiveParser.TimestampLocalTZLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def stringLiteralSequence(self):
            return self.getTypedRuleContext(HiveParser.StringLiteralSequenceContext,0)


        def IntegralLiteral(self):
            return self.getToken(HiveParser.IntegralLiteral, 0)

        def NumberLiteral(self):
            return self.getToken(HiveParser.NumberLiteral, 0)

        def charSetStringLiteral(self):
            return self.getTypedRuleContext(HiveParser.CharSetStringLiteralContext,0)


        def booleanValue(self):
            return self.getTypedRuleContext(HiveParser.BooleanValueContext,0)


        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def prepareStmtParam(self):
            return self.getTypedRuleContext(HiveParser.PrepareStmtParamContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = HiveParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_constant)
        try:
            self.state = 4544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4531
                self.intervalLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4532
                self.match(HiveParser.Number)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4533
                self.dateLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4534
                self.timestampLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4535
                self.timestampLocalTZLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4536
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4537
                self.stringLiteralSequence()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4538
                self.match(HiveParser.IntegralLiteral)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4539
                self.match(HiveParser.NumberLiteral)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4540
                self.charSetStringLiteral()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4541
                self.booleanValue()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4542
                self.match(HiveParser.KW_NULL)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4543
                self.prepareStmtParam()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStmtParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.p = None # ParameterIdxContext

        def parameterIdx(self):
            return self.getTypedRuleContext(HiveParser.ParameterIdxContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_prepareStmtParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStmtParam" ):
                listener.enterPrepareStmtParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStmtParam" ):
                listener.exitPrepareStmtParam(self)




    def prepareStmtParam(self):

        localctx = HiveParser.PrepareStmtParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_prepareStmtParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4546
            localctx.p = self.parameterIdx()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterIdxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(HiveParser.QUESTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_parameterIdx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterIdx" ):
                listener.enterParameterIdx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterIdx" ):
                listener.exitParameterIdx(self)




    def parameterIdx(self):

        localctx = HiveParser.ParameterIdxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_parameterIdx)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4548
            self.match(HiveParser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_stringLiteralSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralSequence" ):
                listener.enterStringLiteralSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralSequence" ):
                listener.exitStringLiteralSequence(self)




    def stringLiteralSequence(self):

        localctx = HiveParser.StringLiteralSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_stringLiteralSequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4550
            self.match(HiveParser.StringLiteral)
            self.state = 4552 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4551
                self.match(HiveParser.StringLiteral)
                self.state = 4554 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==412):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharSetStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.csName = None # Token
            self.csLiteral = None # Token

        def CharSetName(self):
            return self.getToken(HiveParser.CharSetName, 0)

        def CharSetLiteral(self):
            return self.getToken(HiveParser.CharSetLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_charSetStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharSetStringLiteral" ):
                listener.enterCharSetStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharSetStringLiteral" ):
                listener.exitCharSetStringLiteral(self)




    def charSetStringLiteral(self):

        localctx = HiveParser.CharSetStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_charSetStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4556
            localctx.csName = self.match(HiveParser.CharSetName)
            self.state = 4557
            localctx.csLiteral = self.match(HiveParser.CharSetLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_CURRENT_DATE(self):
            return self.getToken(HiveParser.KW_CURRENT_DATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dateLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)




    def dateLiteral(self):

        localctx = HiveParser.DateLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_dateLiteral)
        try:
            self.state = 4562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4559
                self.match(HiveParser.KW_DATE)
                self.state = 4560
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4561
                self.match(HiveParser.KW_CURRENT_DATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_CURRENT_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timestampLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampLiteral" ):
                listener.enterTimestampLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampLiteral" ):
                listener.exitTimestampLiteral(self)




    def timestampLiteral(self):

        localctx = HiveParser.TimestampLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_timestampLiteral)
        try:
            self.state = 4567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [326]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4564
                self.match(HiveParser.KW_TIMESTAMP)
                self.state = 4565
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4566
                self.match(HiveParser.KW_CURRENT_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampLocalTZLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMESTAMPLOCALTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timestampLocalTZLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampLocalTZLiteral" ):
                listener.enterTimestampLocalTZLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampLocalTZLiteral" ):
                listener.exitTimestampLocalTZLiteral(self)




    def timestampLocalTZLiteral(self):

        localctx = HiveParser.TimestampLocalTZLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_timestampLocalTZLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4569
            self.match(HiveParser.KW_TIMESTAMPLOCALTZ)
            self.state = 4570
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = HiveParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4572
            _la = self._input.LA(1)
            if not(_la==412 or _la==417):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.qualifiers = None # IntervalQualifiersContext

        def intervalValue(self):
            return self.getTypedRuleContext(HiveParser.IntervalValueContext,0)


        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_intervalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)




    def intervalLiteral(self):

        localctx = HiveParser.IntervalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_intervalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4574
            localctx.value = self.intervalValue()
            self.state = 4575
            localctx.qualifiers = self.intervalQualifiers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.qualifiers = None # IntervalQualifiersContext
            self.expr = None # ExpressionContext

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(HiveParser.IntervalValueContext,0)


        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def KW_INTERVAL(self):
            return self.getToken(HiveParser.KW_INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_intervalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpression" ):
                listener.enterIntervalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpression" ):
                listener.exitIntervalExpression(self)




    def intervalExpression(self):

        localctx = HiveParser.IntervalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_intervalExpression)
        try:
            self.state = 4592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [386]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4577
                self.match(HiveParser.LPAREN)
                self.state = 4578
                localctx.value = self.intervalValue()
                self.state = 4579
                self.match(HiveParser.RPAREN)
                self.state = 4580
                localctx.qualifiers = self.intervalQualifiers()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4582
                self.match(HiveParser.KW_INTERVAL)
                self.state = 4588
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [412, 417]:
                    self.state = 4583
                    localctx.value = self.intervalValue()
                    pass
                elif token in [386]:
                    self.state = 4584
                    self.match(HiveParser.LPAREN)
                    self.state = 4585
                    localctx.expr = self.expression()
                    self.state = 4586
                    self.match(HiveParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4590
                localctx.qualifiers = self.intervalQualifiers()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_intervalQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalQualifiers" ):
                listener.enterIntervalQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalQualifiers" ):
                listener.exitIntervalQualifiers(self)




    def intervalQualifiers(self):

        localctx = HiveParser.IntervalQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_intervalQualifiers)
        try:
            self.state = 4606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4594
                self.match(HiveParser.KW_YEAR)
                self.state = 4595
                self.match(HiveParser.KW_TO)
                self.state = 4596
                self.match(HiveParser.KW_MONTH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4597
                self.match(HiveParser.KW_DAY)
                self.state = 4598
                self.match(HiveParser.KW_TO)
                self.state = 4599
                self.match(HiveParser.KW_SECOND)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4600
                self.match(HiveParser.KW_YEAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4601
                self.match(HiveParser.KW_MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4602
                self.match(HiveParser.KW_DAY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4603
                self.match(HiveParser.KW_HOUR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4604
                self.match(HiveParser.KW_MINUTE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4605
                self.match(HiveParser.KW_SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceOrExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceOrExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = HiveParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4608
            self.precedenceOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def intervalExpression(self):
            return self.getTypedRuleContext(HiveParser.IntervalExpressionContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(HiveParser.CastExpressionContext,0)


        def extractExpression(self):
            return self.getTypedRuleContext(HiveParser.ExtractExpressionContext,0)


        def floorExpression(self):
            return self.getTypedRuleContext(HiveParser.FloorExpressionContext,0)


        def caseExpression(self):
            return self.getTypedRuleContext(HiveParser.CaseExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(HiveParser.WhenExpressionContext,0)


        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def tableOrColumn(self):
            return self.getTypedRuleContext(HiveParser.TableOrColumnContext,0)


        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_atomExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpression" ):
                listener.enterAtomExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpression" ):
                listener.exitAtomExpression(self)




    def atomExpression(self):

        localctx = HiveParser.AtomExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_atomExpression)
        try:
            self.state = 4621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4610
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4611
                self.intervalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4612
                self.castExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4613
                self.extractExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4614
                self.floorExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4615
                self.caseExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4616
                self.whenExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4617
                self.subQueryExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4618
                self.function_()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4619
                self.tableOrColumn()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4620
                self.expressionsInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceFieldExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomExpression(self):
            return self.getTypedRuleContext(HiveParser.AtomExpressionContext,0)


        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LSQUARE)
            else:
                return self.getToken(HiveParser.LSQUARE, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RSQUARE)
            else:
                return self.getToken(HiveParser.RSQUARE, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceFieldExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceFieldExpression" ):
                listener.enterPrecedenceFieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceFieldExpression" ):
                listener.exitPrecedenceFieldExpression(self)




    def precedenceFieldExpression(self):

        localctx = HiveParser.PrecedenceFieldExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_precedenceFieldExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4623
            self.atomExpression()
            self.state = 4632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==382 or _la==388:
                self.state = 4630
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [388]:
                    self.state = 4624
                    self.match(HiveParser.LSQUARE)
                    self.state = 4625
                    self.expression()
                    self.state = 4626
                    self.match(HiveParser.RSQUARE)
                    pass
                elif token in [382]:
                    self.state = 4628
                    self.match(HiveParser.DOT)
                    self.state = 4629
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(HiveParser.TILDE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceUnaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceUnaryOperator" ):
                listener.enterPrecedenceUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceUnaryOperator" ):
                listener.exitPrecedenceUnaryOperator(self)




    def precedenceUnaryOperator(self):

        localctx = HiveParser.PrecedenceUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_precedenceUnaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4635
            _la = self._input.LA(1)
            if not(((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & 67) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceUnaryPrefixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceFieldExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceFieldExpressionContext,0)


        def precedenceUnaryOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceUnaryOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceUnaryOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceUnaryPrefixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceUnaryPrefixExpression" ):
                listener.enterPrecedenceUnaryPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceUnaryPrefixExpression" ):
                listener.exitPrecedenceUnaryPrefixExpression(self)




    def precedenceUnaryPrefixExpression(self):

        localctx = HiveParser.PrecedenceUnaryPrefixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_precedenceUnaryPrefixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & 67) != 0):
                self.state = 4637
                self.precedenceUnaryOperator()
                self.state = 4642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4643
            self.precedenceFieldExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseXorOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITWISEXOR(self):
            return self.getToken(HiveParser.BITWISEXOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseXorOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceBitwiseXorOperator" ):
                listener.enterPrecedenceBitwiseXorOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceBitwiseXorOperator" ):
                listener.exitPrecedenceBitwiseXorOperator(self)




    def precedenceBitwiseXorOperator(self):

        localctx = HiveParser.PrecedenceBitwiseXorOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_precedenceBitwiseXorOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4645
            self.match(HiveParser.BITWISEXOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseXorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceUnaryPrefixExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceUnaryPrefixExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceUnaryPrefixExpressionContext,i)


        def precedenceBitwiseXorOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceBitwiseXorOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseXorOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseXorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceBitwiseXorExpression" ):
                listener.enterPrecedenceBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceBitwiseXorExpression" ):
                listener.exitPrecedenceBitwiseXorExpression(self)




    def precedenceBitwiseXorExpression(self):

        localctx = HiveParser.PrecedenceBitwiseXorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_precedenceBitwiseXorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4647
            self.precedenceUnaryPrefixExpression()
            self.state = 4653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==409:
                self.state = 4648
                self.precedenceBitwiseXorOperator()
                self.state = 4649
                self.precedenceUnaryPrefixExpression()
                self.state = 4655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceStarOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(HiveParser.DIVIDE, 0)

        def MOD(self):
            return self.getToken(HiveParser.MOD, 0)

        def DIV(self):
            return self.getToken(HiveParser.DIV, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceStarOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceStarOperator" ):
                listener.enterPrecedenceStarOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceStarOperator" ):
                listener.exitPrecedenceStarOperator(self)




    def precedenceStarOperator(self):

        localctx = HiveParser.PrecedenceStarOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_precedenceStarOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4656
            _la = self._input.LA(1)
            if not(((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 57) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceStarExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceBitwiseXorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceBitwiseXorExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseXorExpressionContext,i)


        def precedenceStarOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceStarOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceStarOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceStarExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceStarExpression" ):
                listener.enterPrecedenceStarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceStarExpression" ):
                listener.exitPrecedenceStarExpression(self)




    def precedenceStarExpression(self):

        localctx = HiveParser.PrecedenceStarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_precedenceStarExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4658
            self.precedenceBitwiseXorExpression()
            self.state = 4664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 57) != 0):
                self.state = 4659
                self.precedenceStarOperator()
                self.state = 4660
                self.precedenceBitwiseXorExpression()
                self.state = 4666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedencePlusOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedencePlusOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedencePlusOperator" ):
                listener.enterPrecedencePlusOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedencePlusOperator" ):
                listener.exitPrecedencePlusOperator(self)




    def precedencePlusOperator(self):

        localctx = HiveParser.PrecedencePlusOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_precedencePlusOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4667
            _la = self._input.LA(1)
            if not(_la==400 or _la==401):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedencePlusExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceStarExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceStarExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceStarExpressionContext,i)


        def precedencePlusOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedencePlusOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedencePlusOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedencePlusExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedencePlusExpression" ):
                listener.enterPrecedencePlusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedencePlusExpression" ):
                listener.exitPrecedencePlusExpression(self)




    def precedencePlusExpression(self):

        localctx = HiveParser.PrecedencePlusExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_precedencePlusExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4669
            self.precedenceStarExpression()
            self.state = 4675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==400 or _la==401:
                self.state = 4670
                self.precedencePlusOperator()
                self.state = 4671
                self.precedenceStarExpression()
                self.state = 4677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceConcatenateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCATENATE(self):
            return self.getToken(HiveParser.CONCATENATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceConcatenateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceConcatenateOperator" ):
                listener.enterPrecedenceConcatenateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceConcatenateOperator" ):
                listener.exitPrecedenceConcatenateOperator(self)




    def precedenceConcatenateOperator(self):

        localctx = HiveParser.PrecedenceConcatenateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_precedenceConcatenateOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4678
            self.match(HiveParser.CONCATENATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceConcatenateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.plus = None # PrecedencePlusExpressionContext

        def precedencePlusExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedencePlusExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedencePlusExpressionContext,i)


        def precedenceConcatenateOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceConcatenateOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceConcatenateOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceConcatenateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceConcatenateExpression" ):
                listener.enterPrecedenceConcatenateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceConcatenateExpression" ):
                listener.exitPrecedenceConcatenateExpression(self)




    def precedenceConcatenateExpression(self):

        localctx = HiveParser.PrecedenceConcatenateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_precedenceConcatenateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4680
            self.precedencePlusExpression()
            self.state = 4686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==408:
                self.state = 4681
                self.precedenceConcatenateOperator()
                self.state = 4682
                localctx.plus = self.precedencePlusExpression()
                self.state = 4688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAmpersandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(HiveParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAmpersandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceAmpersandOperator" ):
                listener.enterPrecedenceAmpersandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceAmpersandOperator" ):
                listener.exitPrecedenceAmpersandOperator(self)




    def precedenceAmpersandOperator(self):

        localctx = HiveParser.PrecedenceAmpersandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_precedenceAmpersandOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.match(HiveParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAmpersandExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceConcatenateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceConcatenateExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceConcatenateExpressionContext,i)


        def precedenceAmpersandOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceAmpersandOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceAmpersandOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAmpersandExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceAmpersandExpression" ):
                listener.enterPrecedenceAmpersandExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceAmpersandExpression" ):
                listener.exitPrecedenceAmpersandExpression(self)




    def precedenceAmpersandExpression(self):

        localctx = HiveParser.PrecedenceAmpersandExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_precedenceAmpersandExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4691
            self.precedenceConcatenateExpression()
            self.state = 4697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==405:
                self.state = 4692
                self.precedenceAmpersandOperator()
                self.state = 4693
                self.precedenceConcatenateExpression()
                self.state = 4699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITWISEOR(self):
            return self.getToken(HiveParser.BITWISEOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseOrOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceBitwiseOrOperator" ):
                listener.enterPrecedenceBitwiseOrOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceBitwiseOrOperator" ):
                listener.exitPrecedenceBitwiseOrOperator(self)




    def precedenceBitwiseOrOperator(self):

        localctx = HiveParser.PrecedenceBitwiseOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_precedenceBitwiseOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4700
            self.match(HiveParser.BITWISEOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceAmpersandExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceAmpersandExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceAmpersandExpressionContext,i)


        def precedenceBitwiseOrOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceBitwiseOrOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceBitwiseOrExpression" ):
                listener.enterPrecedenceBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceBitwiseOrExpression" ):
                listener.exitPrecedenceBitwiseOrExpression(self)




    def precedenceBitwiseOrExpression(self):

        localctx = HiveParser.PrecedenceBitwiseOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_precedenceBitwiseOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4702
            self.precedenceAmpersandExpression()
            self.state = 4708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==407:
                self.state = 4703
                self.precedenceBitwiseOrOperator()
                self.state = 4704
                self.precedenceAmpersandExpression()
                self.state = 4710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceRegexpOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_RLIKE(self):
            return self.getToken(HiveParser.KW_RLIKE, 0)

        def KW_REGEXP(self):
            return self.getToken(HiveParser.KW_REGEXP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceRegexpOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceRegexpOperator" ):
                listener.enterPrecedenceRegexpOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceRegexpOperator" ):
                listener.exitPrecedenceRegexpOperator(self)




    def precedenceRegexpOperator(self):

        localctx = HiveParser.PrecedenceRegexpOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_precedenceRegexpOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4711
            _la = self._input.LA(1)
            if not(_la==176 or _la==260 or _la==276):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceRegexpOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceRegexpOperatorContext,0)


        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarOperator" ):
                listener.enterPrecedenceSimilarOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarOperator" ):
                listener.exitPrecedenceSimilarOperator(self)




    def precedenceSimilarOperator(self):

        localctx = HiveParser.PrecedenceSimilarOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_precedenceSimilarOperator)
        try:
            self.state = 4718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [176, 260, 276]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4713
                self.precedenceRegexpOperator()
                pass
            elif token in [395]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4714
                self.match(HiveParser.LESSTHANOREQUALTO)
                pass
            elif token in [396]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4715
                self.match(HiveParser.LESSTHAN)
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4716
                self.match(HiveParser.GREATERTHANOREQUALTO)
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4717
                self.match(HiveParser.GREATERTHAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_subQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubQueryExpression" ):
                listener.enterSubQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubQueryExpression" ):
                listener.exitSubQueryExpression(self)




    def subQueryExpression(self):

        localctx = HiveParser.SubQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_subQueryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4720
            self.match(HiveParser.LPAREN)
            self.state = 4721
            self.selectStatement()
            self.state = 4722
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceSimilarExpressionMain(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionMainContext,0)


        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpression" ):
                listener.enterPrecedenceSimilarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpression" ):
                listener.exitPrecedenceSimilarExpression(self)




    def precedenceSimilarExpression(self):

        localctx = HiveParser.PrecedenceSimilarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_precedenceSimilarExpression)
        try:
            self.state = 4727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 132, 133, 137, 140, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 156, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 326, 327, 328, 329, 331, 333, 334, 335, 338, 339, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 386, 400, 401, 406, 410, 412, 414, 415, 417, 418, 419]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4724
                self.precedenceSimilarExpressionMain()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4725
                self.match(HiveParser.KW_EXISTS)
                self.state = 4726
                self.subQueryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionMainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.a = None # PrecedenceBitwiseOrExpressionContext
            self.part = None # PrecedenceSimilarExpressionPartContext

        def precedenceBitwiseOrExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrExpressionContext,0)


        def precedenceSimilarExpressionPart(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionPartContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionMain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionMain" ):
                listener.enterPrecedenceSimilarExpressionMain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionMain" ):
                listener.exitPrecedenceSimilarExpressionMain(self)




    def precedenceSimilarExpressionMain(self):

        localctx = HiveParser.PrecedenceSimilarExpressionMainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_precedenceSimilarExpressionMain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4729
            localctx.a = self.precedenceBitwiseOrExpression()
            self.state = 4731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.state = 4730
                localctx.part = self.precedenceSimilarExpressionPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.equalExpr = None # PrecedenceBitwiseOrExpressionContext

        def precedenceSimilarOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarOperatorContext,0)


        def precedenceBitwiseOrExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrExpressionContext,0)


        def precedenceSimilarExpressionAtom(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionAtomContext,0)


        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def precedenceSimilarExpressionPartNot(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionPartNotContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionPart" ):
                listener.enterPrecedenceSimilarExpressionPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionPart" ):
                listener.exitPrecedenceSimilarExpressionPart(self)




    def precedenceSimilarExpressionPart(self):

        localctx = HiveParser.PrecedenceSimilarExpressionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_precedenceSimilarExpressionPart)
        try:
            self.state = 4739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4733
                self.precedenceSimilarOperator()
                self.state = 4734
                localctx.equalExpr = self.precedenceBitwiseOrExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4736
                self.precedenceSimilarExpressionAtom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4737
                self.match(HiveParser.KW_NOT)
                self.state = 4738
                self.precedenceSimilarExpressionPartNot()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.min_ = None # PrecedenceBitwiseOrExpressionContext
            self.max_ = None # PrecedenceBitwiseOrExpressionContext
            self.expr = None # ExpressionsInParenthesisContext

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def precedenceSimilarExpressionIn(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionInContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def precedenceBitwiseOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceBitwiseOrExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrExpressionContext,i)


        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_ANY(self):
            return self.getToken(HiveParser.KW_ANY, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def precedenceSimilarExpressionQuantifierPredicate(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionQuantifierPredicateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionAtom" ):
                listener.enterPrecedenceSimilarExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionAtom" ):
                listener.exitPrecedenceSimilarExpressionAtom(self)




    def precedenceSimilarExpressionAtom(self):

        localctx = HiveParser.PrecedenceSimilarExpressionAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_precedenceSimilarExpressionAtom)
        self._la = 0 # Token type
        try:
            self.state = 4752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4741
                self.match(HiveParser.KW_IN)
                self.state = 4742
                self.precedenceSimilarExpressionIn()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4743
                self.match(HiveParser.KW_BETWEEN)
                self.state = 4744
                localctx.min_ = self.precedenceBitwiseOrExpression()
                self.state = 4745
                self.match(HiveParser.KW_AND)
                self.state = 4746
                localctx.max_ = self.precedenceBitwiseOrExpression()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4748
                self.match(HiveParser.KW_LIKE)
                self.state = 4749
                _la = self._input.LA(1)
                if not(_la==7 or _la==13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4750
                localctx.expr = self.expressionsInParenthesis()
                pass
            elif token in [392, 394, 395, 396, 397, 398]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4751
                self.precedenceSimilarExpressionQuantifierPredicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionQuantifierPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subQuerySelectorOperator(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySelectorOperatorContext,0)


        def quantifierType(self):
            return self.getTypedRuleContext(HiveParser.QuantifierTypeContext,0)


        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionQuantifierPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionQuantifierPredicate" ):
                listener.enterPrecedenceSimilarExpressionQuantifierPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionQuantifierPredicate" ):
                listener.exitPrecedenceSimilarExpressionQuantifierPredicate(self)




    def precedenceSimilarExpressionQuantifierPredicate(self):

        localctx = HiveParser.PrecedenceSimilarExpressionQuantifierPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_precedenceSimilarExpressionQuantifierPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4754
            self.subQuerySelectorOperator()
            self.state = 4755
            self.quantifierType()
            self.state = 4756
            self.subQueryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANY(self):
            return self.getToken(HiveParser.KW_ANY, 0)

        def KW_SOME(self):
            return self.getToken(HiveParser.KW_SOME, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_quantifierType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifierType" ):
                listener.enterQuantifierType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifierType" ):
                listener.exitQuantifierType(self)




    def quantifierType(self):

        localctx = HiveParser.QuantifierTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_quantifierType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4758
            _la = self._input.LA(1)
            if not(_la==7 or _la==13 or _la==302):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # ExpressionsInParenthesisContext

        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionIn" ):
                listener.enterPrecedenceSimilarExpressionIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionIn" ):
                listener.exitPrecedenceSimilarExpressionIn(self)




    def precedenceSimilarExpressionIn(self):

        localctx = HiveParser.PrecedenceSimilarExpressionInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_precedenceSimilarExpressionIn)
        try:
            self.state = 4762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4760
                self.subQueryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4761
                localctx.expr = self.expressionsInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionPartNotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notExpr = None # PrecedenceBitwiseOrExpressionContext

        def precedenceRegexpOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceRegexpOperatorContext,0)


        def precedenceBitwiseOrExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrExpressionContext,0)


        def precedenceSimilarExpressionAtom(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionAtomContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionPartNot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionPartNot" ):
                listener.enterPrecedenceSimilarExpressionPartNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionPartNot" ):
                listener.exitPrecedenceSimilarExpressionPartNot(self)




    def precedenceSimilarExpressionPartNot(self):

        localctx = HiveParser.PrecedenceSimilarExpressionPartNotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_precedenceSimilarExpressionPartNot)
        try:
            self.state = 4768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4764
                self.precedenceRegexpOperator()
                self.state = 4765
                localctx.notExpr = self.precedenceBitwiseOrExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4767
                self.precedenceSimilarExpressionAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceDistinctOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceDistinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceDistinctOperator" ):
                listener.enterPrecedenceDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceDistinctOperator" ):
                listener.exitPrecedenceDistinctOperator(self)




    def precedenceDistinctOperator(self):

        localctx = HiveParser.PrecedenceDistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_precedenceDistinctOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4770
            self.match(HiveParser.KW_IS)
            self.state = 4771
            self.match(HiveParser.KW_DISTINCT)
            self.state = 4772
            self.match(HiveParser.KW_FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceEqualOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def EQUAL_NS(self):
            return self.getToken(HiveParser.EQUAL_NS, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceEqualOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceEqualOperator" ):
                listener.enterPrecedenceEqualOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceEqualOperator" ):
                listener.exitPrecedenceEqualOperator(self)




    def precedenceEqualOperator(self):

        localctx = HiveParser.PrecedenceEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_precedenceEqualOperator)
        try:
            self.state = 4781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [392]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4774
                self.match(HiveParser.EQUAL)
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4775
                self.match(HiveParser.EQUAL_NS)
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4776
                self.match(HiveParser.NOTEQUAL)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4777
                self.match(HiveParser.KW_IS)
                self.state = 4778
                self.match(HiveParser.KW_NOT)
                self.state = 4779
                self.match(HiveParser.KW_DISTINCT)
                self.state = 4780
                self.match(HiveParser.KW_FROM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceEqualExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._precedenceEqualOperator = None # PrecedenceEqualOperatorContext
            self.equal = list() # of PrecedenceEqualOperatorContexts
            self._precedenceSimilarExpression = None # PrecedenceSimilarExpressionContext
            self.p = list() # of PrecedenceSimilarExpressionContexts
            self._precedenceDistinctOperator = None # PrecedenceDistinctOperatorContext
            self.dist = list() # of PrecedenceDistinctOperatorContexts

        def precedenceSimilarExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceSimilarExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionContext,i)


        def precedenceEqualOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceEqualOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceEqualOperatorContext,i)


        def precedenceDistinctOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceDistinctOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceDistinctOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceEqualExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceEqualExpression" ):
                listener.enterPrecedenceEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceEqualExpression" ):
                listener.exitPrecedenceEqualExpression(self)




    def precedenceEqualExpression(self):

        localctx = HiveParser.PrecedenceEqualExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_precedenceEqualExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4783
            self.precedenceSimilarExpression()
            self.state = 4792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,567,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4790
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
                    if la_ == 1:
                        self.state = 4784
                        localctx._precedenceEqualOperator = self.precedenceEqualOperator()
                        localctx.equal.append(localctx._precedenceEqualOperator)
                        self.state = 4785
                        localctx._precedenceSimilarExpression = self.precedenceSimilarExpression()
                        localctx.p.append(localctx._precedenceSimilarExpression)
                        pass

                    elif la_ == 2:
                        self.state = 4787
                        localctx._precedenceDistinctOperator = self.precedenceDistinctOperator()
                        localctx.dist.append(localctx._precedenceDistinctOperator)
                        self.state = 4788
                        localctx._precedenceSimilarExpression = self.precedenceSimilarExpression()
                        localctx.p.append(localctx._precedenceSimilarExpression)
                        pass

             
                self.state = 4794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,567,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def KW_UNKNOWN(self):
            return self.getToken(HiveParser.KW_UNKNOWN, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_isCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsCondition" ):
                listener.enterIsCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsCondition" ):
                listener.exitIsCondition(self)




    def isCondition(self):

        localctx = HiveParser.IsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_isCondition)
        try:
            self.state = 4807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4795
                self.match(HiveParser.KW_NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4796
                self.match(HiveParser.KW_TRUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4797
                self.match(HiveParser.KW_FALSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4798
                self.match(HiveParser.KW_UNKNOWN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4799
                self.match(HiveParser.KW_NOT)
                self.state = 4800
                self.match(HiveParser.KW_NULL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4801
                self.match(HiveParser.KW_NOT)
                self.state = 4802
                self.match(HiveParser.KW_TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4803
                self.match(HiveParser.KW_NOT)
                self.state = 4804
                self.match(HiveParser.KW_FALSE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4805
                self.match(HiveParser.KW_NOT)
                self.state = 4806
                self.match(HiveParser.KW_UNKNOWN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceUnarySuffixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.a = None # Token

        def precedenceEqualExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceEqualExpressionContext,0)


        def isCondition(self):
            return self.getTypedRuleContext(HiveParser.IsConditionContext,0)


        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceUnarySuffixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceUnarySuffixExpression" ):
                listener.enterPrecedenceUnarySuffixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceUnarySuffixExpression" ):
                listener.exitPrecedenceUnarySuffixExpression(self)




    def precedenceUnarySuffixExpression(self):

        localctx = HiveParser.PrecedenceUnarySuffixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_precedenceUnarySuffixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4809
            self.precedenceEqualExpression()
            self.state = 4812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 4810
                localctx.a = self.match(HiveParser.KW_IS)
                self.state = 4811
                self.isCondition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceNotOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceNotOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceNotOperator" ):
                listener.enterPrecedenceNotOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceNotOperator" ):
                listener.exitPrecedenceNotOperator(self)




    def precedenceNotOperator(self):

        localctx = HiveParser.PrecedenceNotOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_precedenceNotOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4814
            self.match(HiveParser.KW_NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceNotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceUnarySuffixExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceUnarySuffixExpressionContext,0)


        def precedenceNotOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceNotOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceNotOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceNotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceNotExpression" ):
                listener.enterPrecedenceNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceNotExpression" ):
                listener.exitPrecedenceNotExpression(self)




    def precedenceNotExpression(self):

        localctx = HiveParser.PrecedenceNotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_precedenceNotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==206:
                self.state = 4816
                self.precedenceNotOperator()
                self.state = 4821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4822
            self.precedenceUnarySuffixExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAndOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAndOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceAndOperator" ):
                listener.enterPrecedenceAndOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceAndOperator" ):
                listener.exitPrecedenceAndOperator(self)




    def precedenceAndOperator(self):

        localctx = HiveParser.PrecedenceAndOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_precedenceAndOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4824
            self.match(HiveParser.KW_AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceNotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceNotExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceNotExpressionContext,i)


        def precedenceAndOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceAndOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceAndOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceAndExpression" ):
                listener.enterPrecedenceAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceAndExpression" ):
                listener.exitPrecedenceAndExpression(self)




    def precedenceAndExpression(self):

        localctx = HiveParser.PrecedenceAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_precedenceAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4826
            self.precedenceNotExpression()
            self.state = 4832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 4827
                self.precedenceAndOperator()
                self.state = 4828
                self.precedenceNotExpression()
                self.state = 4834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceOrOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceOrOperator" ):
                listener.enterPrecedenceOrOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceOrOperator" ):
                listener.exitPrecedenceOrOperator(self)




    def precedenceOrOperator(self):

        localctx = HiveParser.PrecedenceOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_precedenceOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4835
            self.match(HiveParser.KW_OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceAndExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceAndExpressionContext,i)


        def precedenceOrOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceOrOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceOrOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceOrExpression" ):
                listener.enterPrecedenceOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceOrExpression" ):
                listener.exitPrecedenceOrExpression(self)




    def precedenceOrExpression(self):

        localctx = HiveParser.PrecedenceOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_precedenceOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4837
            self.precedenceAndExpression()
            self.state = 4843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 4838
                self.precedenceOrOperator()
                self.state = 4839
                self.precedenceAndExpression()
                self.state = 4845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = HiveParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4846
            _la = self._input.LA(1)
            if not(_la==120 or _la==339):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueTokContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_booleanValueTok

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValueTok" ):
                listener.enterBooleanValueTok(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValueTok" ):
                listener.exitBooleanValueTok(self)




    def booleanValueTok(self):

        localctx = HiveParser.BooleanValueTokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_booleanValueTok)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4848
            _la = self._input.LA(1)
            if not(_la==120 or _la==339):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOrPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableOrPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOrPartition" ):
                listener.enterTableOrPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOrPartition" ):
                listener.exitTableOrPartition(self)




    def tableOrPartition(self):

        localctx = HiveParser.TableOrPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_tableOrPartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4850
            self.tableName()
            self.state = 4852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 4851
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionValContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = HiveParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4854
            self.match(HiveParser.KW_PARTITION)
            self.state = 4855
            self.match(HiveParser.LPAREN)
            self.state = 4856
            self.partitionVal()
            self.state = 4861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4857
                self.match(HiveParser.COMMA)
                self.state = 4858
                self.partitionVal()
                self.state = 4863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4864
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = HiveParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4866
            self.id_()
            self.state = 4869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==392:
                self.state = 4867
                self.match(HiveParser.EQUAL)
                self.state = 4868
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSelectorSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def partitionSelectorVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSelectorValContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSelectorValContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionSelectorSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSelectorSpec" ):
                listener.enterPartitionSelectorSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSelectorSpec" ):
                listener.exitPartitionSelectorSpec(self)




    def partitionSelectorSpec(self):

        localctx = HiveParser.PartitionSelectorSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_partitionSelectorSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4871
            self.match(HiveParser.LPAREN)
            self.state = 4872
            self.partitionSelectorVal()
            self.state = 4877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4873
                self.match(HiveParser.COMMA)
                self.state = 4874
                self.partitionSelectorVal()
                self.state = 4879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4880
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSelectorValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def partitionSelectorOperator(self):
            return self.getTypedRuleContext(HiveParser.PartitionSelectorOperatorContext,0)


        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionSelectorVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSelectorVal" ):
                listener.enterPartitionSelectorVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSelectorVal" ):
                listener.exitPartitionSelectorVal(self)




    def partitionSelectorVal(self):

        localctx = HiveParser.PartitionSelectorValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_partitionSelectorVal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4882
            self.id_()
            self.state = 4883
            self.partitionSelectorOperator()
            self.state = 4884
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSelectorOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def subQuerySelectorOperator(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySelectorOperatorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionSelectorOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSelectorOperator" ):
                listener.enterPartitionSelectorOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSelectorOperator" ):
                listener.exitPartitionSelectorOperator(self)




    def partitionSelectorOperator(self):

        localctx = HiveParser.PartitionSelectorOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_partitionSelectorOperator)
        try:
            self.state = 4888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4886
                self.match(HiveParser.KW_LIKE)
                pass
            elif token in [392, 394, 395, 396, 397, 398]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4887
                self.subQuerySelectorOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQuerySelectorOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_subQuerySelectorOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubQuerySelectorOperator" ):
                listener.enterSubQuerySelectorOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubQuerySelectorOperator" ):
                listener.exitSubQuerySelectorOperator(self)




    def subQuerySelectorOperator(self):

        localctx = HiveParser.SubQuerySelectorOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_subQuerySelectorOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4890
            _la = self._input.LA(1)
            if not(((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 125) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysFuncNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_FLOOR(self):
            return self.getToken(HiveParser.KW_FLOOR, 0)

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_REAL(self):
            return self.getToken(HiveParser.KW_REAL, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def EQUAL_NS(self):
            return self.getToken(HiveParser.EQUAL_NS, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def DIVIDE(self):
            return self.getToken(HiveParser.DIVIDE, 0)

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def MOD(self):
            return self.getToken(HiveParser.MOD, 0)

        def DIV(self):
            return self.getToken(HiveParser.DIV, 0)

        def AMPERSAND(self):
            return self.getToken(HiveParser.AMPERSAND, 0)

        def TILDE(self):
            return self.getToken(HiveParser.TILDE, 0)

        def BITWISEOR(self):
            return self.getToken(HiveParser.BITWISEOR, 0)

        def BITWISEXOR(self):
            return self.getToken(HiveParser.BITWISEXOR, 0)

        def KW_RLIKE(self):
            return self.getToken(HiveParser.KW_RLIKE, 0)

        def KW_REGEXP(self):
            return self.getToken(HiveParser.KW_REGEXP, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_sysFuncNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysFuncNames" ):
                listener.enterSysFuncNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysFuncNames" ):
                listener.exitSysFuncNames(self)




    def sysFuncNames(self):

        localctx = HiveParser.SysFuncNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_sysFuncNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4892
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34863122432) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 1157988057408864257) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 4399120269313) != 0) or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & 864761497203507265) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & -9223367638808133631) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 98303) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescFuncNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sysFuncNames(self):
            return self.getTypedRuleContext(HiveParser.SysFuncNamesContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_descFuncNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescFuncNames" ):
                listener.enterDescFuncNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescFuncNames" ):
                listener.exitDescFuncNames(self)




    def descFuncNames(self):

        localctx = HiveParser.DescFuncNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_descFuncNames)
        try:
            self.state = 4897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4894
                self.sysFuncNames()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4895
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4896
                self.functionIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def nonReserved(self):
            return self.getTypedRuleContext(HiveParser.NonReservedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)




    def id_(self):

        localctx = HiveParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_id_)
        try:
            self.state = 4901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [418]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4899
                self.match(HiveParser.Identifier)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 8, 10, 15, 18, 19, 20, 22, 23, 24, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 56, 57, 59, 66, 68, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 132, 133, 137, 142, 143, 144, 146, 149, 150, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 212, 213, 216, 217, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 247, 248, 249, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 278, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 323, 328, 329, 331, 333, 334, 335, 338, 341, 342, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4900
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fn = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = HiveParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_functionIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4903
            self.id_()
            self.state = 4906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==382:
                self.state = 4904
                self.match(HiveParser.DOT)
                self.state = 4905
                localctx.fn = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_principalIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipalIdentifier" ):
                listener.enterPrincipalIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipalIdentifier" ):
                listener.exitPrincipalIdentifier(self)




    def principalIdentifier(self):

        localctx = HiveParser.PrincipalIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_principalIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4908
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_ACTIVATE(self):
            return self.getToken(HiveParser.KW_ACTIVATE, 0)

        def KW_ACTIVE(self):
            return self.getToken(HiveParser.KW_ACTIVE, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_AFTER(self):
            return self.getToken(HiveParser.KW_AFTER, 0)

        def KW_ALLOC_FRACTION(self):
            return self.getToken(HiveParser.KW_ALLOC_FRACTION, 0)

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_AST(self):
            return self.getToken(HiveParser.KW_AST, 0)

        def KW_AT(self):
            return self.getToken(HiveParser.KW_AT, 0)

        def KW_AUTOCOMMIT(self):
            return self.getToken(HiveParser.KW_AUTOCOMMIT, 0)

        def KW_BATCH(self):
            return self.getToken(HiveParser.KW_BATCH, 0)

        def KW_BEFORE(self):
            return self.getToken(HiveParser.KW_BEFORE, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def KW_CACHE(self):
            return self.getToken(HiveParser.KW_CACHE, 0)

        def KW_CASCADE(self):
            return self.getToken(HiveParser.KW_CASCADE, 0)

        def KW_CBO(self):
            return self.getToken(HiveParser.KW_CBO, 0)

        def KW_CHANGE(self):
            return self.getToken(HiveParser.KW_CHANGE, 0)

        def KW_CHECK(self):
            return self.getToken(HiveParser.KW_CHECK, 0)

        def KW_CLUSTER(self):
            return self.getToken(HiveParser.KW_CLUSTER, 0)

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_CLUSTERSTATUS(self):
            return self.getToken(HiveParser.KW_CLUSTERSTATUS, 0)

        def KW_COLLECTION(self):
            return self.getToken(HiveParser.KW_COLLECTION, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def KW_COMPACT(self):
            return self.getToken(HiveParser.KW_COMPACT, 0)

        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def KW_COMPUTE(self):
            return self.getToken(HiveParser.KW_COMPUTE, 0)

        def KW_CONCATENATE(self):
            return self.getToken(HiveParser.KW_CONCATENATE, 0)

        def KW_CONTINUE(self):
            return self.getToken(HiveParser.KW_CONTINUE, 0)

        def KW_COST(self):
            return self.getToken(HiveParser.KW_COST, 0)

        def KW_CRON(self):
            return self.getToken(HiveParser.KW_CRON, 0)

        def KW_DATA(self):
            return self.getToken(HiveParser.KW_DATA, 0)

        def KW_DATABASES(self):
            return self.getToken(HiveParser.KW_DATABASES, 0)

        def KW_DATETIME(self):
            return self.getToken(HiveParser.KW_DATETIME, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_DAYOFWEEK(self):
            return self.getToken(HiveParser.KW_DAYOFWEEK, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def KW_DCPROPERTIES(self):
            return self.getToken(HiveParser.KW_DCPROPERTIES, 0)

        def KW_DEBUG(self):
            return self.getToken(HiveParser.KW_DEBUG, 0)

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def KW_DEFERRED(self):
            return self.getToken(HiveParser.KW_DEFERRED, 0)

        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def KW_DELIMITED(self):
            return self.getToken(HiveParser.KW_DELIMITED, 0)

        def KW_DEPENDENCY(self):
            return self.getToken(HiveParser.KW_DEPENDENCY, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def KW_DETAIL(self):
            return self.getToken(HiveParser.KW_DETAIL, 0)

        def KW_DIRECTORIES(self):
            return self.getToken(HiveParser.KW_DIRECTORIES, 0)

        def KW_DIRECTORY(self):
            return self.getToken(HiveParser.KW_DIRECTORY, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_DISTRIBUTE(self):
            return self.getToken(HiveParser.KW_DISTRIBUTE, 0)

        def KW_DISTRIBUTED(self):
            return self.getToken(HiveParser.KW_DISTRIBUTED, 0)

        def KW_DO(self):
            return self.getToken(HiveParser.KW_DO, 0)

        def KW_DOW(self):
            return self.getToken(HiveParser.KW_DOW, 0)

        def KW_DUMP(self):
            return self.getToken(HiveParser.KW_DUMP, 0)

        def KW_ELEM_TYPE(self):
            return self.getToken(HiveParser.KW_ELEM_TYPE, 0)

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_ENFORCED(self):
            return self.getToken(HiveParser.KW_ENFORCED, 0)

        def KW_ESCAPED(self):
            return self.getToken(HiveParser.KW_ESCAPED, 0)

        def KW_EVERY(self):
            return self.getToken(HiveParser.KW_EVERY, 0)

        def KW_EXCLUSIVE(self):
            return self.getToken(HiveParser.KW_EXCLUSIVE, 0)

        def KW_EXECUTE(self):
            return self.getToken(HiveParser.KW_EXECUTE, 0)

        def KW_EXECUTED(self):
            return self.getToken(HiveParser.KW_EXECUTED, 0)

        def KW_EXPIRE_SNAPSHOTS(self):
            return self.getToken(HiveParser.KW_EXPIRE_SNAPSHOTS, 0)

        def KW_EXPLAIN(self):
            return self.getToken(HiveParser.KW_EXPLAIN, 0)

        def KW_EXPORT(self):
            return self.getToken(HiveParser.KW_EXPORT, 0)

        def KW_EXPRESSION(self):
            return self.getToken(HiveParser.KW_EXPRESSION, 0)

        def KW_FIELDS(self):
            return self.getToken(HiveParser.KW_FIELDS, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def KW_FILEFORMAT(self):
            return self.getToken(HiveParser.KW_FILEFORMAT, 0)

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def KW_HOLD_DDLTIME(self):
            return self.getToken(HiveParser.KW_HOLD_DDLTIME, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_IDXPROPERTIES(self):
            return self.getToken(HiveParser.KW_IDXPROPERTIES, 0)

        def KW_IGNORE(self):
            return self.getToken(HiveParser.KW_IGNORE, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def KW_INDEXES(self):
            return self.getToken(HiveParser.KW_INDEXES, 0)

        def KW_INPATH(self):
            return self.getToken(HiveParser.KW_INPATH, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def KW_ISOLATION(self):
            return self.getToken(HiveParser.KW_ISOLATION, 0)

        def KW_ITEMS(self):
            return self.getToken(HiveParser.KW_ITEMS, 0)

        def KW_JAR(self):
            return self.getToken(HiveParser.KW_JAR, 0)

        def KW_JOINCOST(self):
            return self.getToken(HiveParser.KW_JOINCOST, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def KW_KEYS(self):
            return self.getToken(HiveParser.KW_KEYS, 0)

        def KW_KEY_TYPE(self):
            return self.getToken(HiveParser.KW_KEY_TYPE, 0)

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_LAST(self):
            return self.getToken(HiveParser.KW_LAST, 0)

        def KW_LEVEL(self):
            return self.getToken(HiveParser.KW_LEVEL, 0)

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def KW_LINES(self):
            return self.getToken(HiveParser.KW_LINES, 0)

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def KW_LOGICAL(self):
            return self.getToken(HiveParser.KW_LOGICAL, 0)

        def KW_LONG(self):
            return self.getToken(HiveParser.KW_LONG, 0)

        def KW_MANAGED(self):
            return self.getToken(HiveParser.KW_MANAGED, 0)

        def KW_MANAGEDLOCATION(self):
            return self.getToken(HiveParser.KW_MANAGEDLOCATION, 0)

        def KW_MANAGEMENT(self):
            return self.getToken(HiveParser.KW_MANAGEMENT, 0)

        def KW_MAPJOIN(self):
            return self.getToken(HiveParser.KW_MAPJOIN, 0)

        def KW_MAPPING(self):
            return self.getToken(HiveParser.KW_MAPPING, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_MOVE(self):
            return self.getToken(HiveParser.KW_MOVE, 0)

        def KW_MSCK(self):
            return self.getToken(HiveParser.KW_MSCK, 0)

        def KW_NORELY(self):
            return self.getToken(HiveParser.KW_NORELY, 0)

        def KW_NOSCAN(self):
            return self.getToken(HiveParser.KW_NOSCAN, 0)

        def KW_NOVALIDATE(self):
            return self.getToken(HiveParser.KW_NOVALIDATE, 0)

        def KW_NO_DROP(self):
            return self.getToken(HiveParser.KW_NO_DROP, 0)

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_OFFLINE(self):
            return self.getToken(HiveParser.KW_OFFLINE, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def KW_OPERATOR(self):
            return self.getToken(HiveParser.KW_OPERATOR, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def KW_PATH(self):
            return self.getToken(HiveParser.KW_PATH, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def KW_PLANS(self):
            return self.getToken(HiveParser.KW_PLANS, 0)

        def KW_PLUS(self):
            return self.getToken(HiveParser.KW_PLUS, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def KW_PRINCIPALS(self):
            return self.getToken(HiveParser.KW_PRINCIPALS, 0)

        def KW_PROTECTION(self):
            return self.getToken(HiveParser.KW_PROTECTION, 0)

        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def KW_QUERY_PARALLELISM(self):
            return self.getToken(HiveParser.KW_QUERY_PARALLELISM, 0)

        def KW_READ(self):
            return self.getToken(HiveParser.KW_READ, 0)

        def KW_READONLY(self):
            return self.getToken(HiveParser.KW_READONLY, 0)

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def KW_RECORDREADER(self):
            return self.getToken(HiveParser.KW_RECORDREADER, 0)

        def KW_RECORDWRITER(self):
            return self.getToken(HiveParser.KW_RECORDWRITER, 0)

        def KW_RELOAD(self):
            return self.getToken(HiveParser.KW_RELOAD, 0)

        def KW_RELY(self):
            return self.getToken(HiveParser.KW_RELY, 0)

        def KW_REMOTE(self):
            return self.getToken(HiveParser.KW_REMOTE, 0)

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_REOPTIMIZATION(self):
            return self.getToken(HiveParser.KW_REOPTIMIZATION, 0)

        def KW_REPAIR(self):
            return self.getToken(HiveParser.KW_REPAIR, 0)

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def KW_REPLICATION(self):
            return self.getToken(HiveParser.KW_REPLICATION, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_RESPECT(self):
            return self.getToken(HiveParser.KW_RESPECT, 0)

        def KW_RESTRICT(self):
            return self.getToken(HiveParser.KW_RESTRICT, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def KW_SCHEDULED(self):
            return self.getToken(HiveParser.KW_SCHEDULED, 0)

        def KW_SCHEDULING_POLICY(self):
            return self.getToken(HiveParser.KW_SCHEDULING_POLICY, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_SCHEMAS(self):
            return self.getToken(HiveParser.KW_SCHEMAS, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def KW_SETS(self):
            return self.getToken(HiveParser.KW_SETS, 0)

        def KW_SET_CURRENT_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SET_CURRENT_SNAPSHOT, 0)

        def KW_SHARED(self):
            return self.getToken(HiveParser.KW_SHARED, 0)

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_SHOW_DATABASE(self):
            return self.getToken(HiveParser.KW_SHOW_DATABASE, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SNAPSHOT, 0)

        def KW_SORT(self):
            return self.getToken(HiveParser.KW_SORT, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def KW_SPEC(self):
            return self.getToken(HiveParser.KW_SPEC, 0)

        def KW_SSL(self):
            return self.getToken(HiveParser.KW_SSL, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_STREAMTABLE(self):
            return self.getToken(HiveParser.KW_STREAMTABLE, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def KW_SUMMARY(self):
            return self.getToken(HiveParser.KW_SUMMARY, 0)

        def KW_SYSTEM_TIME(self):
            return self.getToken(HiveParser.KW_SYSTEM_TIME, 0)

        def KW_SYSTEM_VERSION(self):
            return self.getToken(HiveParser.KW_SYSTEM_VERSION, 0)

        def KW_TABLES(self):
            return self.getToken(HiveParser.KW_TABLES, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_TIMESTAMPTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPTZ, 0)

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_TOUCH(self):
            return self.getToken(HiveParser.KW_TOUCH, 0)

        def KW_TRANSACTION(self):
            return self.getToken(HiveParser.KW_TRANSACTION, 0)

        def KW_TRANSACTIONAL(self):
            return self.getToken(HiveParser.KW_TRANSACTIONAL, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def KW_TRIM(self):
            return self.getToken(HiveParser.KW_TRIM, 0)

        def KW_TYPE(self):
            return self.getToken(HiveParser.KW_TYPE, 0)

        def KW_UNARCHIVE(self):
            return self.getToken(HiveParser.KW_UNARCHIVE, 0)

        def KW_UNDO(self):
            return self.getToken(HiveParser.KW_UNDO, 0)

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def KW_UNKNOWN(self):
            return self.getToken(HiveParser.KW_UNKNOWN, 0)

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def KW_UNMANAGED(self):
            return self.getToken(HiveParser.KW_UNMANAGED, 0)

        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def KW_UNSIGNED(self):
            return self.getToken(HiveParser.KW_UNSIGNED, 0)

        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def KW_URL(self):
            return self.getToken(HiveParser.KW_URL, 0)

        def KW_USE(self):
            return self.getToken(HiveParser.KW_USE, 0)

        def KW_UTC(self):
            return self.getToken(HiveParser.KW_UTC, 0)

        def KW_UTCTIMESTAMP(self):
            return self.getToken(HiveParser.KW_UTCTIMESTAMP, 0)

        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_VALUE_TYPE(self):
            return self.getToken(HiveParser.KW_VALUE_TYPE, 0)

        def KW_VECTORIZATION(self):
            return self.getToken(HiveParser.KW_VECTORIZATION, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_VIEWS(self):
            return self.getToken(HiveParser.KW_VIEWS, 0)

        def KW_WAIT(self):
            return self.getToken(HiveParser.KW_WAIT, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_WHILE(self):
            return self.getToken(HiveParser.KW_WHILE, 0)

        def KW_WITHIN(self):
            return self.getToken(HiveParser.KW_WITHIN, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def KW_WORKLOAD(self):
            return self.getToken(HiveParser.KW_WORKLOAD, 0)

        def KW_WRITE(self):
            return self.getToken(HiveParser.KW_WRITE, 0)

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_ZONE(self):
            return self.getToken(HiveParser.KW_ZONE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = HiveParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4910
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 808078815591695742) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1083038567331911621) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 8916819943869537315) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 4159991143015340909) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 8484708576009596927) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 17776728909112555) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql11ReservedKeywordsUsedAsFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_CURRENT_DATE(self):
            return self.getToken(HiveParser.KW_CURRENT_DATE, 0)

        def KW_CURRENT_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0)

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_GROUPING(self):
            return self.getToken(HiveParser.KW_GROUPING, 0)

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_REAL(self):
            return self.getToken(HiveParser.KW_REAL, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql11ReservedKeywordsUsedAsFunctionName" ):
                listener.enterSql11ReservedKeywordsUsedAsFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql11ReservedKeywordsUsedAsFunctionName" ):
                listener.exitSql11ReservedKeywordsUsedAsFunctionName(self)




    def sql11ReservedKeywordsUsedAsFunctionName(self):

        localctx = HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_sql11ReservedKeywordsUsedAsFunctionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4912
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036384948224) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611686022722355329) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 1125899906908193) != 0) or _la==254 or _la==300 or _la==326):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hintList(self):
            return self.getTypedRuleContext(HiveParser.HintListContext,0)


        def EOF(self):
            return self.getToken(HiveParser.EOF, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)




    def hint(self):

        localctx = HiveParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4914
            self.hintList()
            self.state = 4915
            self.match(HiveParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hintItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.HintItemContext)
            else:
                return self.getTypedRuleContext(HiveParser.HintItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_hintList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintList" ):
                listener.enterHintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintList" ):
                listener.exitHintList(self)




    def hintList(self):

        localctx = HiveParser.HintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_hintList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4917
            self.hintItem()
            self.state = 4922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4918
                self.match(HiveParser.COMMA)
                self.state = 4919
                self.hintItem()
                self.state = 4924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hintName(self):
            return self.getTypedRuleContext(HiveParser.HintNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def hintArgs(self):
            return self.getTypedRuleContext(HiveParser.HintArgsContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_hintItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintItem" ):
                listener.enterHintItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintItem" ):
                listener.exitHintItem(self)




    def hintItem(self):

        localctx = HiveParser.HintItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_hintItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4925
            self.hintName()
            self.state = 4930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 4926
                self.match(HiveParser.LPAREN)
                self.state = 4927
                self.hintArgs()
                self.state = 4928
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MAPJOIN(self):
            return self.getToken(HiveParser.KW_MAPJOIN, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def KW_STREAMTABLE(self):
            return self.getToken(HiveParser.KW_STREAMTABLE, 0)

        def KW_PKFK_JOIN(self):
            return self.getToken(HiveParser.KW_PKFK_JOIN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_hintName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintName" ):
                listener.enterHintName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintName" ):
                listener.exitHintName(self)




    def hintName(self):

        localctx = HiveParser.HintNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_hintName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4932
            _la = self._input.LA(1)
            if not(_la==191 or _la==232 or _la==289 or _la==311):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hintArgName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.HintArgNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.HintArgNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_hintArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintArgs" ):
                listener.enterHintArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintArgs" ):
                listener.exitHintArgs(self)




    def hintArgs(self):

        localctx = HiveParser.HintArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_hintArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4934
            self.hintArgName()
            self.state = 4939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4935
                self.match(HiveParser.COMMA)
                self.state = 4936
                self.hintArgName()
                self.state = 4941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintArgNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_NONE(self):
            return self.getToken(HiveParser.KW_NONE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_hintArgName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintArgName" ):
                listener.enterHintArgName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintArgName" ):
                listener.exitHintArgName(self)




    def hintArgName(self):

        localctx = HiveParser.HintArgNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_hintArgName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4942
            _la = self._input.LA(1)
            if not(_la==203 or _la==417 or _la==418):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PREPARE(self):
            return self.getToken(HiveParser.KW_PREPARE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = HiveParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4944
            self.match(HiveParser.KW_PREPARE)
            self.state = 4945
            self.id_()
            self.state = 4946
            self.match(HiveParser.KW_FROM)
            self.state = 4947
            self.queryStatementExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXECUTE(self):
            return self.getToken(HiveParser.KW_EXECUTE, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def executeParamList(self):
            return self.getTypedRuleContext(HiveParser.ExecuteParamListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = HiveParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_executeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4949
            self.match(HiveParser.KW_EXECUTE)
            self.state = 4950
            self.id_()
            self.state = 4951
            self.match(HiveParser.KW_USING)
            self.state = 4952
            self.executeParamList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ConstantContext)
            else:
                return self.getTypedRuleContext(HiveParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_executeParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteParamList" ):
                listener.enterExecuteParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteParamList" ):
                listener.exitExecuteParamList(self)




    def executeParamList(self):

        localctx = HiveParser.ExecuteParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_executeParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4954
            self.constant()
            self.state = 4959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4955
                self.match(HiveParser.COMMA)
                self.state = 4956
                self.constant()
                self.state = 4961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcePlanDdlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createResourcePlanStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateResourcePlanStatementContext,0)


        def alterResourcePlanStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterResourcePlanStatementContext,0)


        def dropResourcePlanStatement(self):
            return self.getTypedRuleContext(HiveParser.DropResourcePlanStatementContext,0)


        def globalWmStatement(self):
            return self.getTypedRuleContext(HiveParser.GlobalWmStatementContext,0)


        def replaceResourcePlanStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplaceResourcePlanStatementContext,0)


        def createTriggerStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateTriggerStatementContext,0)


        def alterTriggerStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterTriggerStatementContext,0)


        def dropTriggerStatement(self):
            return self.getTypedRuleContext(HiveParser.DropTriggerStatementContext,0)


        def createPoolStatement(self):
            return self.getTypedRuleContext(HiveParser.CreatePoolStatementContext,0)


        def alterPoolStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterPoolStatementContext,0)


        def dropPoolStatement(self):
            return self.getTypedRuleContext(HiveParser.DropPoolStatementContext,0)


        def createMappingStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMappingStatementContext,0)


        def alterMappingStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterMappingStatementContext,0)


        def dropMappingStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMappingStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_resourcePlanDdlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourcePlanDdlStatements" ):
                listener.enterResourcePlanDdlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourcePlanDdlStatements" ):
                listener.exitResourcePlanDdlStatements(self)




    def resourcePlanDdlStatements(self):

        localctx = HiveParser.ResourcePlanDdlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_resourcePlanDdlStatements)
        try:
            self.state = 4976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,585,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4962
                self.createResourcePlanStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4963
                self.alterResourcePlanStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4964
                self.dropResourcePlanStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4965
                self.globalWmStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4966
                self.replaceResourcePlanStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4967
                self.createTriggerStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4968
                self.alterTriggerStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4969
                self.dropTriggerStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4970
                self.createPoolStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4971
                self.alterPoolStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4972
                self.dropPoolStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4973
                self.createMappingStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4974
                self.alterMappingStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4975
                self.dropMappingStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RpAssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parallelism = None # Token

        def KW_QUERY_PARALLELISM(self):
            return self.getToken(HiveParser.KW_QUERY_PARALLELISM, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rpAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpAssign" ):
                listener.enterRpAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpAssign" ):
                listener.exitRpAssign(self)




    def rpAssign(self):

        localctx = HiveParser.RpAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_rpAssign)
        try:
            self.state = 4985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4978
                self.match(HiveParser.KW_QUERY_PARALLELISM)
                self.state = 4979
                self.match(HiveParser.EQUAL)
                self.state = 4980
                localctx.parallelism = self.match(HiveParser.Number)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4981
                self.match(HiveParser.KW_DEFAULT)
                self.state = 4982
                self.match(HiveParser.KW_POOL)
                self.state = 4983
                self.match(HiveParser.EQUAL)
                self.state = 4984
                self.poolPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RpAssignListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rpAssign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RpAssignContext)
            else:
                return self.getTypedRuleContext(HiveParser.RpAssignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rpAssignList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpAssignList" ):
                listener.enterRpAssignList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpAssignList" ):
                listener.exitRpAssignList(self)




    def rpAssignList(self):

        localctx = HiveParser.RpAssignListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_rpAssignList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4987
            self.rpAssign()
            self.state = 4992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 4988
                self.match(HiveParser.COMMA)
                self.state = 4989
                self.rpAssign()
                self.state = 4994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RpUnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_QUERY_PARALLELISM(self):
            return self.getToken(HiveParser.KW_QUERY_PARALLELISM, 0)

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rpUnassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpUnassign" ):
                listener.enterRpUnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpUnassign" ):
                listener.exitRpUnassign(self)




    def rpUnassign(self):

        localctx = HiveParser.RpUnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_rpUnassign)
        try:
            self.state = 4998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4995
                self.match(HiveParser.KW_QUERY_PARALLELISM)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4996
                self.match(HiveParser.KW_DEFAULT)
                self.state = 4997
                self.match(HiveParser.KW_POOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RpUnassignListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rpUnassign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RpUnassignContext)
            else:
                return self.getTypedRuleContext(HiveParser.RpUnassignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rpUnassignList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRpUnassignList" ):
                listener.enterRpUnassignList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRpUnassignList" ):
                listener.exitRpUnassignList(self)




    def rpUnassignList(self):

        localctx = HiveParser.RpUnassignListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_rpUnassignList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5000
            self.rpUnassign()
            self.state = 5005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 5001
                self.match(HiveParser.COMMA)
                self.state = 5002
                self.rpUnassign()
                self.state = 5007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateResourcePlanStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context
            self.likeName = None # Id_Context

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def rpAssignList(self):
            return self.getTypedRuleContext(HiveParser.RpAssignListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createResourcePlanStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateResourcePlanStatement" ):
                listener.enterCreateResourcePlanStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateResourcePlanStatement" ):
                listener.exitCreateResourcePlanStatement(self)




    def createResourcePlanStatement(self):

        localctx = HiveParser.CreateResourcePlanStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_createResourcePlanStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5008
            self.match(HiveParser.KW_CREATE)
            self.state = 5009
            self.match(HiveParser.KW_RESOURCE)
            self.state = 5010
            self.match(HiveParser.KW_PLAN)
            self.state = 5012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 5011
                self.ifNotExists()


            self.state = 5023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.state = 5014
                localctx.name = self.id_()
                self.state = 5015
                self.match(HiveParser.KW_LIKE)
                self.state = 5016
                localctx.likeName = self.id_()
                pass

            elif la_ == 2:
                self.state = 5018
                localctx.name = self.id_()
                self.state = 5021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==375:
                    self.state = 5019
                    self.match(HiveParser.KW_WITH)
                    self.state = 5020
                    self.rpAssignList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withReplace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithReplace" ):
                listener.enterWithReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithReplace" ):
                listener.exitWithReplace(self)




    def withReplace(self):

        localctx = HiveParser.WithReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_withReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5025
            self.match(HiveParser.KW_WITH)
            self.state = 5026
            self.match(HiveParser.KW_REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ACTIVATE(self):
            return self.getToken(HiveParser.KW_ACTIVATE, 0)

        def withReplace(self):
            return self.getTypedRuleContext(HiveParser.WithReplaceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_activate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivate" ):
                listener.enterActivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivate" ):
                listener.exitActivate(self)




    def activate(self):

        localctx = HiveParser.ActivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_activate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5028
            self.match(HiveParser.KW_ACTIVATE)
            self.state = 5030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 5029
                self.withReplace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable" ):
                listener.enterEnable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable" ):
                listener.exitEnable(self)




    def enable(self):

        localctx = HiveParser.EnableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_enable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5032
            self.match(HiveParser.KW_ENABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_disable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisable" ):
                listener.enterDisable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisable" ):
                listener.exitDisable(self)




    def disable(self):

        localctx = HiveParser.DisableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_disable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5034
            self.match(HiveParser.KW_DISABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnmanagedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNMANAGED(self):
            return self.getToken(HiveParser.KW_UNMANAGED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_unmanaged

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged" ):
                listener.enterUnmanaged(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged" ):
                listener.exitUnmanaged(self)




    def unmanaged(self):

        localctx = HiveParser.UnmanagedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_unmanaged)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5036
            self.match(HiveParser.KW_UNMANAGED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterResourcePlanStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context
            self.newName = None # Id_Context

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def rpAssignList(self):
            return self.getTypedRuleContext(HiveParser.RpAssignListContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def rpUnassignList(self):
            return self.getTypedRuleContext(HiveParser.RpUnassignListContext,0)


        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def activate(self):
            return self.getTypedRuleContext(HiveParser.ActivateContext,0)


        def enable(self):
            return self.getTypedRuleContext(HiveParser.EnableContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterResourcePlanStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterResourcePlanStatement" ):
                listener.enterAlterResourcePlanStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterResourcePlanStatement" ):
                listener.exitAlterResourcePlanStatement(self)




    def alterResourcePlanStatement(self):

        localctx = HiveParser.AlterResourcePlanStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_alterResourcePlanStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5038
            self.match(HiveParser.KW_ALTER)
            self.state = 5039
            self.match(HiveParser.KW_RESOURCE)
            self.state = 5040
            self.match(HiveParser.KW_PLAN)
            self.state = 5041
            localctx.name = self.id_()
            self.state = 5059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [362]:
                self.state = 5042
                self.match(HiveParser.KW_VALIDATE)
                pass
            elif token in [91]:
                self.state = 5043
                self.match(HiveParser.KW_DISABLE)
                pass
            elif token in [293]:
                self.state = 5044
                self.match(HiveParser.KW_SET)
                self.state = 5045
                self.rpAssignList()
                pass
            elif token in [352]:
                self.state = 5046
                self.match(HiveParser.KW_UNSET)
                self.state = 5047
                self.rpUnassignList()
                pass
            elif token in [264]:
                self.state = 5048
                self.match(HiveParser.KW_RENAME)
                self.state = 5049
                self.match(HiveParser.KW_TO)
                self.state = 5050
                localctx.newName = self.id_()
                pass
            elif token in [2]:
                self.state = 5051
                self.activate()
                self.state = 5053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 5052
                    self.enable()


                pass
            elif token in [102]:
                self.state = 5055
                self.enable()
                self.state = 5057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5056
                    self.activate()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalWmStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WORKLOAD(self):
            return self.getToken(HiveParser.KW_WORKLOAD, 0)

        def KW_MANAGEMENT(self):
            return self.getToken(HiveParser.KW_MANAGEMENT, 0)

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_globalWmStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalWmStatement" ):
                listener.enterGlobalWmStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalWmStatement" ):
                listener.exitGlobalWmStatement(self)




    def globalWmStatement(self):

        localctx = HiveParser.GlobalWmStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_globalWmStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5061
            _la = self._input.LA(1)
            if not(_la==91 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5062
            self.match(HiveParser.KW_WORKLOAD)
            self.state = 5063
            self.match(HiveParser.KW_MANAGEMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceResourcePlanStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.src = None # Id_Context
            self.dest = None # Id_Context

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def KW_ACTIVE(self):
            return self.getToken(HiveParser.KW_ACTIVE, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def getRuleIndex(self):
            return HiveParser.RULE_replaceResourcePlanStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceResourcePlanStatement" ):
                listener.enterReplaceResourcePlanStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceResourcePlanStatement" ):
                listener.exitReplaceResourcePlanStatement(self)




    def replaceResourcePlanStatement(self):

        localctx = HiveParser.ReplaceResourcePlanStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_replaceResourcePlanStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5065
            self.match(HiveParser.KW_REPLACE)
            self.state = 5077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 5066
                self.match(HiveParser.KW_ACTIVE)
                self.state = 5067
                self.match(HiveParser.KW_RESOURCE)
                self.state = 5068
                self.match(HiveParser.KW_PLAN)
                self.state = 5069
                self.match(HiveParser.KW_WITH)
                self.state = 5070
                localctx.src = self.id_()
                pass
            elif token in [270]:
                self.state = 5071
                self.match(HiveParser.KW_RESOURCE)
                self.state = 5072
                self.match(HiveParser.KW_PLAN)
                self.state = 5073
                localctx.dest = self.id_()
                self.state = 5074
                self.match(HiveParser.KW_WITH)
                self.state = 5075
                localctx.src = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropResourcePlanStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropResourcePlanStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropResourcePlanStatement" ):
                listener.enterDropResourcePlanStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropResourcePlanStatement" ):
                listener.exitDropResourcePlanStatement(self)




    def dropResourcePlanStatement(self):

        localctx = HiveParser.DropResourcePlanStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_dropResourcePlanStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5079
            self.match(HiveParser.KW_DROP)
            self.state = 5080
            self.match(HiveParser.KW_RESOURCE)
            self.state = 5081
            self.match(HiveParser.KW_PLAN)
            self.state = 5083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 5082
                self.ifExists()


            self.state = 5085
            localctx.name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoolPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def getRuleIndex(self):
            return HiveParser.RULE_poolPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoolPath" ):
                listener.enterPoolPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoolPath" ):
                listener.exitPoolPath(self)




    def poolPath(self):

        localctx = HiveParser.PoolPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_poolPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5087
            self.id_()
            self.state = 5092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==382:
                self.state = 5088
                self.match(HiveParser.DOT)
                self.state = 5089
                self.id_()
                self.state = 5094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerAtomExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerAtomExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_triggerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerExpression" ):
                listener.enterTriggerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerExpression" ):
                listener.exitTriggerExpression(self)




    def triggerExpression(self):

        localctx = HiveParser.TriggerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_triggerExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5095
            self.triggerAtomExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerExpressionStandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerExpressionContext,0)


        def EOF(self):
            return self.getToken(HiveParser.EOF, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_triggerExpressionStandalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerExpressionStandalone" ):
                listener.enterTriggerExpressionStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerExpressionStandalone" ):
                listener.exitTriggerExpressionStandalone(self)




    def triggerExpressionStandalone(self):

        localctx = HiveParser.TriggerExpressionStandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_triggerExpressionStandalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5097
            self.triggerExpression()
            self.state = 5098
            self.match(HiveParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TriggerAndExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.TriggerAndExpressionContext,i)


        def KW_OR(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_OR)
            else:
                return self.getToken(HiveParser.KW_OR, i)

        def getRuleIndex(self):
            return HiveParser.RULE_triggerOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerOrExpression" ):
                listener.enterTriggerOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerOrExpression" ):
                listener.exitTriggerOrExpression(self)




    def triggerOrExpression(self):

        localctx = HiveParser.TriggerOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_triggerOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5100
            self.triggerAndExpression()
            self.state = 5105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 5101
                self.match(HiveParser.KW_OR)
                self.state = 5102
                self.triggerAndExpression()
                self.state = 5107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerAtomExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TriggerAtomExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.TriggerAtomExpressionContext,i)


        def KW_AND(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_AND)
            else:
                return self.getToken(HiveParser.KW_AND, i)

        def getRuleIndex(self):
            return HiveParser.RULE_triggerAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerAndExpression" ):
                listener.enterTriggerAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerAndExpression" ):
                listener.exitTriggerAndExpression(self)




    def triggerAndExpression(self):

        localctx = HiveParser.TriggerAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_triggerAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5108
            self.triggerAtomExpression()
            self.state = 5113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 5109
                self.match(HiveParser.KW_AND)
                self.state = 5110
                self.triggerAtomExpression()
                self.state = 5115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerAtomExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def comparisionOperator(self):
            return self.getTypedRuleContext(HiveParser.ComparisionOperatorContext,0)


        def triggerLiteral(self):
            return self.getTypedRuleContext(HiveParser.TriggerLiteralContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_triggerAtomExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerAtomExpression" ):
                listener.enterTriggerAtomExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerAtomExpression" ):
                listener.exitTriggerAtomExpression(self)




    def triggerAtomExpression(self):

        localctx = HiveParser.TriggerAtomExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_triggerAtomExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5116
            self.id_()
            self.state = 5117
            self.comparisionOperator()
            self.state = 5118
            self.triggerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_triggerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerLiteral" ):
                listener.enterTriggerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerLiteral" ):
                listener.exitTriggerLiteral(self)




    def triggerLiteral(self):

        localctx = HiveParser.TriggerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_triggerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5120
            _la = self._input.LA(1)
            if not(_la==412 or _la==417):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_comparisionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisionOperator" ):
                listener.enterComparisionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisionOperator" ):
                listener.exitComparisionOperator(self)




    def comparisionOperator(self):

        localctx = HiveParser.ComparisionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_comparisionOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5122
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerActionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_MOVE(self):
            return self.getToken(HiveParser.KW_MOVE, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_triggerActionExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerActionExpression" ):
                listener.enterTriggerActionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerActionExpression" ):
                listener.exitTriggerActionExpression(self)




    def triggerActionExpression(self):

        localctx = HiveParser.TriggerActionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_triggerActionExpression)
        try:
            self.state = 5128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5124
                self.match(HiveParser.KW_KILL)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5125
                self.match(HiveParser.KW_MOVE)
                self.state = 5126
                self.match(HiveParser.KW_TO)
                self.state = 5127
                self.poolPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerActionExpressionStandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerActionExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerActionExpressionContext,0)


        def EOF(self):
            return self.getToken(HiveParser.EOF, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_triggerActionExpressionStandalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerActionExpressionStandalone" ):
                listener.enterTriggerActionExpressionStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerActionExpressionStandalone" ):
                listener.exitTriggerActionExpressionStandalone(self)




    def triggerActionExpressionStandalone(self):

        localctx = HiveParser.TriggerActionExpressionStandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_triggerActionExpressionStandalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5130
            self.triggerActionExpression()
            self.state = 5131
            self.match(HiveParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rpName = None # Id_Context
            self.triggerName = None # Id_Context

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TRIGGER(self):
            return self.getToken(HiveParser.KW_TRIGGER, 0)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def triggerExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerExpressionContext,0)


        def KW_DO(self):
            return self.getToken(HiveParser.KW_DO, 0)

        def triggerActionExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerActionExpressionContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def getRuleIndex(self):
            return HiveParser.RULE_createTriggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTriggerStatement" ):
                listener.enterCreateTriggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTriggerStatement" ):
                listener.exitCreateTriggerStatement(self)




    def createTriggerStatement(self):

        localctx = HiveParser.CreateTriggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_createTriggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5133
            self.match(HiveParser.KW_CREATE)
            self.state = 5134
            self.match(HiveParser.KW_TRIGGER)
            self.state = 5135
            localctx.rpName = self.id_()
            self.state = 5136
            self.match(HiveParser.DOT)
            self.state = 5137
            localctx.triggerName = self.id_()
            self.state = 5138
            self.match(HiveParser.KW_WHEN)
            self.state = 5139
            self.triggerExpression()
            self.state = 5140
            self.match(HiveParser.KW_DO)
            self.state = 5141
            self.triggerActionExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTriggerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rpName = None # Id_Context
            self.triggerName = None # Id_Context
            self.poolName = None # PoolPathContext

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_TRIGGER(self):
            return self.getToken(HiveParser.KW_TRIGGER, 0)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def triggerExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerExpressionContext,0)


        def KW_DO(self):
            return self.getToken(HiveParser.KW_DO, 0)

        def triggerActionExpression(self):
            return self.getTypedRuleContext(HiveParser.TriggerActionExpressionContext,0)


        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def KW_UNMANAGED(self):
            return self.getToken(HiveParser.KW_UNMANAGED, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTriggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTriggerStatement" ):
                listener.enterAlterTriggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTriggerStatement" ):
                listener.exitAlterTriggerStatement(self)




    def alterTriggerStatement(self):

        localctx = HiveParser.AlterTriggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_alterTriggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5143
            self.match(HiveParser.KW_ALTER)
            self.state = 5144
            self.match(HiveParser.KW_TRIGGER)
            self.state = 5145
            localctx.rpName = self.id_()
            self.state = 5146
            self.match(HiveParser.DOT)
            self.state = 5147
            localctx.triggerName = self.id_()
            self.state = 5164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [371]:
                self.state = 5148
                self.match(HiveParser.KW_WHEN)
                self.state = 5149
                self.triggerExpression()
                self.state = 5150
                self.match(HiveParser.KW_DO)
                self.state = 5151
                self.triggerActionExpression()
                pass
            elif token in [4, 98]:
                self.state = 5157
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [4]:
                    self.state = 5153
                    self.match(HiveParser.KW_ADD)
                    self.state = 5154
                    self.match(HiveParser.KW_TO)
                    pass
                elif token in [98]:
                    self.state = 5155
                    self.match(HiveParser.KW_DROP)
                    self.state = 5156
                    self.match(HiveParser.KW_FROM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5162
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [236]:
                    self.state = 5159
                    self.match(HiveParser.KW_POOL)
                    self.state = 5160
                    localctx.poolName = self.poolPath()
                    pass
                elif token in [351]:
                    self.state = 5161
                    self.match(HiveParser.KW_UNMANAGED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rpName = None # Id_Context
            self.triggerName = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TRIGGER(self):
            return self.getToken(HiveParser.KW_TRIGGER, 0)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def getRuleIndex(self):
            return HiveParser.RULE_dropTriggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTriggerStatement" ):
                listener.enterDropTriggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTriggerStatement" ):
                listener.exitDropTriggerStatement(self)




    def dropTriggerStatement(self):

        localctx = HiveParser.DropTriggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_dropTriggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5166
            self.match(HiveParser.KW_DROP)
            self.state = 5167
            self.match(HiveParser.KW_TRIGGER)
            self.state = 5168
            localctx.rpName = self.id_()
            self.state = 5169
            self.match(HiveParser.DOT)
            self.state = 5170
            localctx.triggerName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoolAssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.allocFraction = None # Token
            self.parallelism = None # Token
            self.policy = None # Token
            self.path = None # PoolPathContext

        def KW_ALLOC_FRACTION(self):
            return self.getToken(HiveParser.KW_ALLOC_FRACTION, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def KW_QUERY_PARALLELISM(self):
            return self.getToken(HiveParser.KW_QUERY_PARALLELISM, 0)

        def KW_SCHEDULING_POLICY(self):
            return self.getToken(HiveParser.KW_SCHEDULING_POLICY, 0)

        def KW_PATH(self):
            return self.getToken(HiveParser.KW_PATH, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_poolAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoolAssign" ):
                listener.enterPoolAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoolAssign" ):
                listener.exitPoolAssign(self)




    def poolAssign(self):

        localctx = HiveParser.PoolAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_poolAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 5172
                self.match(HiveParser.KW_ALLOC_FRACTION)
                self.state = 5173
                self.match(HiveParser.EQUAL)
                self.state = 5174
                localctx.allocFraction = self.match(HiveParser.Number)
                pass
            elif token in [249]:
                self.state = 5175
                self.match(HiveParser.KW_QUERY_PARALLELISM)
                self.state = 5176
                self.match(HiveParser.EQUAL)
                self.state = 5177
                localctx.parallelism = self.match(HiveParser.Number)
                pass
            elif token in [284]:
                self.state = 5178
                self.match(HiveParser.KW_SCHEDULING_POLICY)
                self.state = 5179
                self.match(HiveParser.EQUAL)
                self.state = 5180
                localctx.policy = self.match(HiveParser.StringLiteral)
                pass
            elif token in [230]:
                self.state = 5181
                self.match(HiveParser.KW_PATH)
                self.state = 5182
                self.match(HiveParser.EQUAL)
                self.state = 5183
                localctx.path = self.poolPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoolAssignListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def poolAssign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PoolAssignContext)
            else:
                return self.getTypedRuleContext(HiveParser.PoolAssignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_poolAssignList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoolAssignList" ):
                listener.enterPoolAssignList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoolAssignList" ):
                listener.exitPoolAssignList(self)




    def poolAssignList(self):

        localctx = HiveParser.PoolAssignListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_poolAssignList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5186
            self.poolAssign()
            self.state = 5191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 5187
                self.match(HiveParser.COMMA)
                self.state = 5188
                self.poolAssign()
                self.state = 5193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatePoolStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rpName = None # Id_Context

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def poolAssignList(self):
            return self.getTypedRuleContext(HiveParser.PoolAssignListContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createPoolStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatePoolStatement" ):
                listener.enterCreatePoolStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatePoolStatement" ):
                listener.exitCreatePoolStatement(self)




    def createPoolStatement(self):

        localctx = HiveParser.CreatePoolStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_createPoolStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5194
            self.match(HiveParser.KW_CREATE)
            self.state = 5195
            self.match(HiveParser.KW_POOL)
            self.state = 5196
            localctx.rpName = self.id_()
            self.state = 5197
            self.match(HiveParser.DOT)
            self.state = 5198
            self.poolPath()
            self.state = 5199
            self.match(HiveParser.KW_WITH)
            self.state = 5200
            self.poolAssignList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterPoolStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rpName = None # Id_Context
            self.triggerName = None # Id_Context

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Id_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Id_Context,i)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def poolAssignList(self):
            return self.getTypedRuleContext(HiveParser.PoolAssignListContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def KW_SCHEDULING_POLICY(self):
            return self.getToken(HiveParser.KW_SCHEDULING_POLICY, 0)

        def KW_TRIGGER(self):
            return self.getToken(HiveParser.KW_TRIGGER, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterPoolStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPoolStatement" ):
                listener.enterAlterPoolStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPoolStatement" ):
                listener.exitAlterPoolStatement(self)




    def alterPoolStatement(self):

        localctx = HiveParser.AlterPoolStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_alterPoolStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5202
            self.match(HiveParser.KW_ALTER)
            self.state = 5203
            self.match(HiveParser.KW_POOL)
            self.state = 5204
            localctx.rpName = self.id_()
            self.state = 5205
            self.match(HiveParser.DOT)
            self.state = 5206
            self.poolPath()
            self.state = 5214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293]:
                self.state = 5207
                self.match(HiveParser.KW_SET)
                self.state = 5208
                self.poolAssignList()
                pass
            elif token in [352]:
                self.state = 5209
                self.match(HiveParser.KW_UNSET)
                self.state = 5210
                self.match(HiveParser.KW_SCHEDULING_POLICY)
                pass
            elif token in [4, 98]:
                self.state = 5211
                _la = self._input.LA(1)
                if not(_la==4 or _la==98):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5212
                self.match(HiveParser.KW_TRIGGER)
                self.state = 5213
                localctx.triggerName = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPoolStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rpName = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropPoolStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPoolStatement" ):
                listener.enterDropPoolStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPoolStatement" ):
                listener.exitDropPoolStatement(self)




    def dropPoolStatement(self):

        localctx = HiveParser.DropPoolStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_dropPoolStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5216
            self.match(HiveParser.KW_DROP)
            self.state = 5217
            self.match(HiveParser.KW_POOL)
            self.state = 5218
            localctx.rpName = self.id_()
            self.state = 5219
            self.match(HiveParser.DOT)
            self.state = 5220
            self.poolPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMappingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mappingType = None # Token
            self.name = None # Token
            self.rpName = None # Id_Context
            self.path = None # PoolPathContext
            self.order = None # Token

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_MAPPING(self):
            return self.getToken(HiveParser.KW_MAPPING, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_USER(self):
            return self.getToken(HiveParser.KW_USER, 0)

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_APPLICATION(self):
            return self.getToken(HiveParser.KW_APPLICATION, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def unmanaged(self):
            return self.getTypedRuleContext(HiveParser.UnmanagedContext,0)


        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ORDER(self):
            return self.getToken(HiveParser.KW_ORDER, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_createMappingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMappingStatement" ):
                listener.enterCreateMappingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMappingStatement" ):
                listener.exitCreateMappingStatement(self)




    def createMappingStatement(self):

        localctx = HiveParser.CreateMappingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_createMappingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5222
            self.match(HiveParser.KW_CREATE)
            self.state = 5223
            localctx.mappingType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==14 or _la==139 or _la==358):
                localctx.mappingType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5224
            self.match(HiveParser.KW_MAPPING)
            self.state = 5225
            localctx.name = self.match(HiveParser.StringLiteral)
            self.state = 5226
            self.match(HiveParser.KW_IN)
            self.state = 5227
            localctx.rpName = self.id_()
            self.state = 5231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330]:
                self.state = 5228
                self.match(HiveParser.KW_TO)
                self.state = 5229
                localctx.path = self.poolPath()
                pass
            elif token in [351]:
                self.state = 5230
                self.unmanaged()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 5233
                self.match(HiveParser.KW_WITH)
                self.state = 5234
                self.match(HiveParser.KW_ORDER)
                self.state = 5235
                localctx.order = self.match(HiveParser.Number)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMappingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mappingType = None # Token
            self.name = None # Token
            self.rpName = None # Id_Context
            self.path = None # PoolPathContext
            self.order = None # Token

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_MAPPING(self):
            return self.getToken(HiveParser.KW_MAPPING, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_USER(self):
            return self.getToken(HiveParser.KW_USER, 0)

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_APPLICATION(self):
            return self.getToken(HiveParser.KW_APPLICATION, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def unmanaged(self):
            return self.getTypedRuleContext(HiveParser.UnmanagedContext,0)


        def poolPath(self):
            return self.getTypedRuleContext(HiveParser.PoolPathContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ORDER(self):
            return self.getToken(HiveParser.KW_ORDER, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterMappingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMappingStatement" ):
                listener.enterAlterMappingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMappingStatement" ):
                listener.exitAlterMappingStatement(self)




    def alterMappingStatement(self):

        localctx = HiveParser.AlterMappingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_alterMappingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5238
            self.match(HiveParser.KW_ALTER)
            self.state = 5239
            localctx.mappingType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==14 or _la==139 or _la==358):
                localctx.mappingType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5240
            self.match(HiveParser.KW_MAPPING)
            self.state = 5241
            localctx.name = self.match(HiveParser.StringLiteral)
            self.state = 5242
            self.match(HiveParser.KW_IN)
            self.state = 5243
            localctx.rpName = self.id_()
            self.state = 5247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330]:
                self.state = 5244
                self.match(HiveParser.KW_TO)
                self.state = 5245
                localctx.path = self.poolPath()
                pass
            elif token in [351]:
                self.state = 5246
                self.unmanaged()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==375:
                self.state = 5249
                self.match(HiveParser.KW_WITH)
                self.state = 5250
                self.match(HiveParser.KW_ORDER)
                self.state = 5251
                localctx.order = self.match(HiveParser.Number)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMappingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mappingType = None # Token
            self.name = None # Token
            self.rpName = None # Id_Context

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_MAPPING(self):
            return self.getToken(HiveParser.KW_MAPPING, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def id_(self):
            return self.getTypedRuleContext(HiveParser.Id_Context,0)


        def KW_USER(self):
            return self.getToken(HiveParser.KW_USER, 0)

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_APPLICATION(self):
            return self.getToken(HiveParser.KW_APPLICATION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dropMappingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMappingStatement" ):
                listener.enterDropMappingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMappingStatement" ):
                listener.exitDropMappingStatement(self)




    def dropMappingStatement(self):

        localctx = HiveParser.DropMappingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_dropMappingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5254
            self.match(HiveParser.KW_DROP)
            self.state = 5255
            localctx.mappingType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==14 or _la==139 or _la==358):
                localctx.mappingType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5256
            self.match(HiveParser.KW_MAPPING)
            self.state = 5257
            localctx.name = self.match(HiveParser.StringLiteral)
            self.state = 5258
            self.match(HiveParser.KW_IN)
            self.state = 5259
            localctx.rpName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





