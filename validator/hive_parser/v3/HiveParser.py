# Generated from sql/hive/v3/HiveParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,375,4089,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,1,0,1,0,1,0,5,0,744,8,0,10,0,12,0,747,9,
        0,1,0,1,0,1,1,1,1,3,1,753,8,1,1,2,1,2,3,2,757,8,2,1,3,1,3,5,3,761,
        8,3,10,3,12,3,764,9,3,1,3,1,3,1,3,3,3,769,8,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,780,8,4,1,4,3,4,783,8,4,3,4,785,8,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,803,
        8,7,1,8,1,8,1,8,3,8,808,8,8,1,8,1,8,1,8,3,8,813,8,8,1,8,1,8,1,8,
        1,8,3,8,819,8,8,1,9,1,9,3,9,823,8,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,3,10,836,8,10,1,11,1,11,3,11,840,8,11,1,11,1,
        11,3,11,844,8,11,1,11,1,11,1,11,3,11,849,8,11,1,12,1,12,1,12,1,12,
        1,12,3,12,856,8,12,1,12,1,12,1,12,1,12,3,12,862,8,12,1,12,1,12,3,
        12,866,8,12,3,12,868,8,12,1,12,1,12,3,12,872,8,12,1,13,1,13,1,13,
        1,13,1,13,3,13,879,8,13,3,13,881,8,13,1,13,1,13,1,13,1,13,3,13,887,
        8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,896,8,15,10,15,12,15,
        899,9,15,1,16,1,16,1,16,1,16,1,16,3,16,906,8,16,1,16,1,16,3,16,910,
        8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,952,8,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,25,1,25,1,25,3,25,979,8,25,1,25,1,25,3,25,983,8,25,1,25,3,
        25,986,8,25,1,25,1,25,1,25,3,25,991,8,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,5,28,1003,8,28,10,28,12,28,1006,9,28,1,
        29,1,29,1,29,1,30,1,30,1,30,3,30,1014,8,30,1,30,1,30,3,30,1018,8,
        30,1,31,1,31,1,31,1,32,1,32,3,32,1025,8,32,1,32,3,32,1028,8,32,1,
        32,1,32,3,32,1032,8,32,1,32,1,32,1,32,1,32,3,32,1038,8,32,1,32,3,
        32,1041,8,32,1,32,3,32,1044,8,32,1,32,3,32,1047,8,32,1,32,1,32,1,
        32,1,32,3,32,1053,8,32,1,32,3,32,1056,8,32,1,32,3,32,1059,8,32,1,
        32,3,32,1062,8,32,1,32,3,32,1065,8,32,1,32,3,32,1068,8,32,1,32,3,
        32,1071,8,32,1,32,3,32,1074,8,32,1,32,3,32,1077,8,32,1,32,1,32,3,
        32,1081,8,32,3,32,1083,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,3,33,1093,8,33,1,34,1,34,1,34,3,34,1098,8,34,1,34,1,34,3,34,1102,
        8,34,1,34,3,34,1105,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,3,35,1116,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,1132,8,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1147,8,36,1,36,1,36,
        3,36,1151,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,3,37,1166,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,1,39,3,39,1179,8,39,1,40,1,40,3,40,1183,8,40,1,41,
        1,41,1,41,3,41,1188,8,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1215,8,46,1,47,1,47,1,47,3,47,1220,8,47,
        1,48,1,48,1,48,1,48,1,49,1,49,3,49,1228,8,49,1,49,1,49,1,49,1,49,
        3,49,1234,8,49,1,49,1,49,3,49,1238,8,49,1,49,3,49,1241,8,49,1,49,
        3,49,1244,8,49,1,50,1,50,1,50,1,50,3,50,1250,8,50,1,50,1,50,1,50,
        1,50,1,50,3,50,1257,8,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,
        3,52,1267,8,52,1,53,1,53,3,53,1271,8,53,1,53,4,53,1274,8,53,11,53,
        12,53,1275,1,54,1,54,3,54,1280,8,54,1,55,1,55,5,55,1284,8,55,10,
        55,12,55,1287,9,55,1,56,1,56,5,56,1291,8,56,10,56,12,56,1294,9,56,
        1,57,1,57,5,57,1298,8,57,10,57,12,57,1301,9,57,1,58,1,58,1,58,1,
        59,1,59,3,59,1308,8,59,1,59,1,59,1,59,5,59,1313,8,59,10,59,12,59,
        1316,9,59,1,59,3,59,1319,8,59,1,59,3,59,1322,8,59,1,60,1,60,1,60,
        1,60,1,60,1,60,3,60,1330,8,60,1,60,3,60,1333,8,60,1,61,1,61,1,61,
        1,61,1,61,1,61,3,61,1341,8,61,1,61,3,61,1344,8,61,1,62,1,62,3,62,
        1348,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1358,8,64,
        1,64,1,64,1,64,3,64,1363,8,64,1,65,1,65,1,65,1,65,3,65,1369,8,65,
        1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,1382,
        8,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,
        5,70,1396,8,70,10,70,12,70,1399,9,70,1,71,1,71,1,71,1,71,1,72,1,
        72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,3,73,1414,8,73,1,74,1,74,1,
        74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,3,76,1430,
        8,76,1,76,1,76,1,76,1,76,1,76,3,76,1437,8,76,1,77,1,77,1,78,1,78,
        1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,3,79,1457,8,79,1,79,1,79,3,79,1461,8,79,1,79,1,79,1,79,3,79,
        1466,8,79,1,79,1,79,1,79,3,79,1471,8,79,1,79,3,79,1474,8,79,1,79,
        3,79,1477,8,79,1,79,1,79,3,79,1481,8,79,1,79,3,79,1484,8,79,1,79,
        3,79,1487,8,79,1,80,1,80,1,80,5,80,1492,8,80,10,80,12,80,1495,9,
        80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,3,82,1505,8,82,1,83,1,
        83,1,83,1,84,1,84,1,84,3,84,1513,8,84,1,84,1,84,1,84,1,84,3,84,1519,
        8,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
        1,86,1,86,3,86,1535,8,86,1,86,3,86,1538,8,86,1,87,1,87,1,87,1,87,
        1,87,1,88,1,88,1,88,3,88,1548,8,88,1,88,1,88,1,88,1,88,1,88,1,88,
        3,88,1556,8,88,5,88,1558,8,88,10,88,12,88,1561,9,88,3,88,1563,8,
        88,1,89,1,89,3,89,1567,8,89,1,90,1,90,3,90,1571,8,90,1,90,3,90,1574,
        8,90,1,91,1,91,1,91,3,91,1579,8,91,1,91,1,91,1,91,3,91,1584,8,91,
        1,91,1,91,1,91,1,91,3,91,1590,8,91,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,3,92,1601,8,92,3,92,1603,8,92,1,92,1,92,3,92,1607,
        8,92,1,93,1,93,1,93,1,93,3,93,1613,8,93,1,93,1,93,1,93,1,93,3,93,
        1619,8,93,1,93,1,93,1,93,3,93,1624,8,93,1,93,1,93,1,93,1,93,3,93,
        1630,8,93,1,93,1,93,1,93,3,93,1635,8,93,1,93,1,93,1,93,1,93,1,93,
        3,93,1642,8,93,1,93,1,93,1,93,3,93,1647,8,93,1,93,1,93,1,93,1,93,
        1,93,1,93,3,93,1655,8,93,1,93,1,93,1,93,3,93,1660,8,93,1,93,1,93,
        1,93,1,93,1,93,3,93,1667,8,93,1,93,1,93,1,93,1,93,3,93,1673,8,93,
        1,93,1,93,1,93,1,93,1,93,1,93,3,93,1681,8,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1688,8,93,1,93,1,93,1,93,3,93,1693,8,93,1,93,1,93,1,93,
        1,93,1,93,1,93,3,93,1701,8,93,1,93,1,93,1,93,1,93,1,93,3,93,1708,
        8,93,1,93,3,93,1711,8,93,1,93,3,93,1714,8,93,3,93,1716,8,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1730,
        8,93,3,93,1732,8,93,1,94,1,94,1,94,1,94,3,94,1738,8,94,1,94,1,94,
        1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,97,3,97,1753,
        8,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,
        100,1,101,1,101,1,101,3,101,1770,8,101,1,101,1,101,1,101,3,101,1775,
        8,101,1,102,1,102,3,102,1779,8,102,1,102,1,102,3,102,1783,8,102,
        1,102,1,102,1,102,1,103,1,103,3,103,1790,8,103,1,103,1,103,1,103,
        5,103,1795,8,103,10,103,12,103,1798,9,103,1,103,1,103,1,103,3,103,
        1803,8,103,1,104,1,104,3,104,1807,8,104,1,104,3,104,1810,8,104,1,
        104,1,104,1,104,5,104,1815,8,104,10,104,12,104,1818,9,104,1,104,
        1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,3,108,1840,8,108,
        1,109,1,109,1,109,3,109,1845,8,109,1,109,1,109,3,109,1849,8,109,
        1,110,1,110,1,110,1,110,1,111,1,111,3,111,1857,8,111,1,112,1,112,
        1,112,1,113,1,113,1,113,3,113,1865,8,113,1,113,1,113,3,113,1869,
        8,113,1,113,1,113,1,113,1,113,3,113,1875,8,113,1,114,1,114,1,114,
        3,114,1880,8,114,1,114,1,114,1,114,1,114,1,114,3,114,1887,8,114,
        1,114,3,114,1890,8,114,1,114,1,114,1,114,1,114,3,114,1896,8,114,
        1,115,1,115,1,115,5,115,1901,8,115,10,115,12,115,1904,9,115,1,116,
        1,116,1,116,1,116,1,116,3,116,1911,8,116,1,117,1,117,1,118,1,118,
        1,118,5,118,1918,8,118,10,118,12,118,1921,9,118,1,119,1,119,1,119,
        1,119,1,119,1,119,3,119,1929,8,119,1,120,1,120,1,120,1,120,1,121,
        1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,
        1,124,1,124,3,124,1949,8,124,1,124,1,124,1,124,1,124,3,124,1955,
        8,124,1,124,3,124,1958,8,124,3,124,1960,8,124,1,125,1,125,1,125,
        5,125,1965,8,125,10,125,12,125,1968,9,125,1,126,1,126,1,126,1,127,
        1,127,1,128,1,128,3,128,1977,8,128,1,128,1,128,1,128,1,128,1,128,
        1,128,3,128,1985,8,128,1,129,1,129,3,129,1989,8,129,1,129,1,129,
        3,129,1993,8,129,1,129,1,129,1,130,1,130,1,130,1,131,1,131,1,131,
        1,131,1,131,1,131,3,131,2006,8,131,1,131,1,131,1,131,1,132,1,132,
        1,132,1,132,3,132,2015,8,132,1,132,1,132,1,133,1,133,3,133,2021,
        8,133,1,133,1,133,3,133,2025,8,133,1,133,1,133,1,133,1,133,1,133,
        3,133,2032,8,133,1,133,3,133,2035,8,133,1,133,3,133,2038,8,133,1,
        133,3,133,2041,8,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,3,
        134,2050,8,134,1,134,1,134,3,134,2054,8,134,1,134,3,134,2057,8,134,
        1,134,3,134,2060,8,134,1,134,3,134,2063,8,134,1,134,3,134,2066,8,
        134,1,134,3,134,2069,8,134,1,134,1,134,1,134,1,135,1,135,1,135,1,
        135,1,135,1,135,1,136,1,136,1,136,3,136,2083,8,136,1,136,1,136,1,
        137,1,137,1,137,1,137,3,137,2091,8,137,1,137,1,137,1,138,1,138,3,
        138,2097,8,138,1,139,1,139,3,139,2101,8,139,1,140,1,140,1,140,1,
        141,1,141,1,141,1,141,1,141,1,141,5,141,2112,8,141,10,141,12,141,
        2115,9,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,3,142,2130,8,142,1,142,1,142,1,142,1,142,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,
        2146,8,143,1,144,1,144,3,144,2150,8,144,1,145,1,145,1,145,1,146,
        1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2165,
        8,147,1,148,1,148,1,148,1,148,3,148,2171,8,148,1,148,3,148,2174,
        8,148,1,148,3,148,2177,8,148,1,148,3,148,2180,8,148,1,148,3,148,
        2183,8,148,1,149,1,149,3,149,2187,8,149,1,150,1,150,1,150,1,151,
        1,151,1,151,1,151,1,152,1,152,1,152,5,152,2199,8,152,10,152,12,152,
        2202,9,152,1,152,1,152,1,152,5,152,2207,8,152,10,152,12,152,2210,
        9,152,3,152,2212,8,152,1,153,1,153,1,153,1,153,1,154,1,154,1,155,
        1,155,1,155,1,155,1,155,1,155,1,155,3,155,2227,8,155,1,156,1,156,
        1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,1,157,1,158,
        1,158,1,158,1,158,1,158,1,159,1,159,1,159,1,159,1,159,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,2261,8,160,
        1,160,1,160,1,160,1,160,1,160,1,160,3,160,2269,8,160,1,160,1,160,
        1,160,3,160,2274,8,160,1,161,1,161,1,161,1,162,1,162,1,162,5,162,
        2282,8,162,10,162,12,162,2285,9,162,1,163,1,163,1,163,5,163,2290,
        8,163,10,163,12,163,2293,9,163,1,164,1,164,1,164,5,164,2298,8,164,
        10,164,12,164,2301,9,164,1,165,1,165,1,165,5,165,2306,8,165,10,165,
        12,165,2309,9,165,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,
        3,167,2319,8,167,5,167,2321,8,167,10,167,12,167,2324,9,167,1,168,
        1,168,1,168,5,168,2329,8,168,10,168,12,168,2332,9,168,1,169,1,169,
        1,169,1,169,1,170,1,170,3,170,2340,8,170,1,170,3,170,2343,8,170,
        1,171,1,171,1,172,1,172,1,173,1,173,1,173,3,173,2352,8,173,1,174,
        1,174,3,174,2356,8,174,3,174,2358,8,174,1,175,1,175,3,175,2362,8,
        175,1,175,1,175,3,175,2366,8,175,1,176,1,176,1,176,1,176,3,176,2372,
        8,176,1,177,1,177,1,177,1,178,1,178,3,178,2379,8,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,3,178,2388,8,178,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,1,179,3,179,2399,8,179,1,180,1,180,
        3,180,2403,8,180,1,181,1,181,1,181,5,181,2408,8,181,10,181,12,181,
        2411,9,181,1,182,1,182,1,182,1,182,1,183,1,183,1,183,5,183,2420,
        8,183,10,183,12,183,2423,9,183,1,184,1,184,1,185,1,185,3,185,2429,
        8,185,1,186,1,186,1,187,1,187,1,187,1,187,3,187,2437,8,187,1,188,
        1,188,3,188,2441,8,188,1,188,3,188,2444,8,188,1,189,1,189,1,189,
        5,189,2449,8,189,10,189,12,189,2452,9,189,1,190,1,190,1,190,3,190,
        2457,8,190,1,191,1,191,3,191,2461,8,191,1,191,3,191,2464,8,191,1,
        192,1,192,1,192,1,192,3,192,2470,8,192,1,193,1,193,3,193,2474,8,
        193,1,194,1,194,3,194,2478,8,194,1,195,1,195,1,195,3,195,2483,8,
        195,1,195,1,195,3,195,2487,8,195,1,196,1,196,3,196,2491,8,196,1,
        197,1,197,3,197,2495,8,197,1,197,1,197,1,197,1,197,1,197,1,197,3,
        197,2503,8,197,1,198,1,198,3,198,2507,8,198,1,198,1,198,3,198,2511,
        8,198,1,199,1,199,3,199,2515,8,199,1,200,1,200,3,200,2519,8,200,
        1,200,1,200,1,200,1,200,1,200,1,200,3,200,2527,8,200,1,201,1,201,
        3,201,2531,8,201,1,201,1,201,3,201,2535,8,201,1,202,1,202,1,202,
        1,203,1,203,1,203,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,205,
        3,205,2551,8,205,1,206,1,206,1,207,1,207,1,207,5,207,2558,8,207,
        10,207,12,207,2561,9,207,1,208,1,208,1,208,1,208,1,208,3,208,2568,
        8,208,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,2578,
        8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,1,209,1,209,3,209,2596,8,209,1,209,3,209,
        2599,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,
        2609,8,209,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,
        1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,
        1,213,1,213,1,214,1,214,1,214,1,214,3,214,2637,8,214,1,214,1,214,
        1,214,1,214,3,214,2643,8,214,1,214,1,214,1,214,1,214,3,214,2649,
        8,214,1,214,1,214,1,214,1,214,3,214,2655,8,214,3,214,2657,8,214,
        1,215,3,215,2660,8,215,1,215,1,215,1,216,1,216,3,216,2666,8,216,
        1,217,1,217,1,217,1,217,5,217,2672,8,217,10,217,12,217,2675,9,217,
        1,218,1,218,1,218,1,218,1,218,1,218,1,219,1,219,1,219,1,219,5,219,
        2687,8,219,10,219,12,219,2690,9,219,1,220,1,220,4,220,2694,8,220,
        11,220,12,220,2695,1,221,1,221,1,221,3,221,2701,8,221,1,221,3,221,
        2704,8,221,1,222,1,222,3,222,2708,8,222,1,222,3,222,2711,8,222,1,
        222,3,222,2714,8,222,1,222,3,222,2717,8,222,1,222,3,222,2720,8,222,
        1,222,1,222,1,222,1,222,3,222,2726,8,222,1,223,1,223,3,223,2730,
        8,223,1,223,3,223,2733,8,223,1,223,3,223,2736,8,223,1,223,3,223,
        2739,8,223,1,223,3,223,2742,8,223,1,223,3,223,2745,8,223,1,224,1,
        224,1,224,4,224,2750,8,224,11,224,12,224,2751,1,225,3,225,2755,8,
        225,1,225,1,225,1,226,1,226,1,226,3,226,2762,8,226,1,226,3,226,2765,
        8,226,1,226,3,226,2768,8,226,1,226,3,226,2771,8,226,1,226,3,226,
        2774,8,226,1,226,3,226,2777,8,226,1,226,3,226,2780,8,226,1,226,3,
        226,2783,8,226,1,226,3,226,2786,8,226,1,226,3,226,2789,8,226,1,226,
        1,226,3,226,2793,8,226,1,226,3,226,2796,8,226,1,226,3,226,2799,8,
        226,1,226,3,226,2802,8,226,1,226,3,226,2805,8,226,1,226,3,226,2808,
        8,226,1,226,3,226,2811,8,226,1,226,3,226,2814,8,226,1,226,3,226,
        2817,8,226,1,226,3,226,2820,8,226,3,226,2822,8,226,1,227,1,227,1,
        227,1,227,3,227,2828,8,227,1,227,1,227,1,227,3,227,2833,8,227,1,
        227,1,227,1,227,1,227,1,227,3,227,2840,8,227,3,227,2842,8,227,1,
        228,3,228,2845,8,228,1,228,1,228,1,228,3,228,2850,8,228,1,228,3,
        228,2853,8,228,1,228,1,228,3,228,2857,8,228,1,229,1,229,1,229,3,
        229,2862,8,229,1,229,1,229,1,229,1,229,1,229,3,229,2869,8,229,1,
        230,1,230,1,230,1,230,3,230,2875,8,230,1,231,1,231,1,231,1,231,1,
        232,1,232,1,232,1,232,5,232,2885,8,232,10,232,12,232,2888,9,232,
        1,233,1,233,1,233,1,233,3,233,2894,8,233,1,234,1,234,1,234,1,234,
        3,234,2900,8,234,1,235,1,235,1,235,1,235,1,235,5,235,2907,8,235,
        10,235,12,235,2910,9,235,3,235,2912,8,235,1,236,1,236,3,236,2916,
        8,236,1,237,1,237,1,237,1,237,3,237,2922,8,237,1,238,1,238,1,238,
        1,238,1,239,1,239,1,240,1,240,3,240,2932,8,240,1,241,1,241,3,241,
        2936,8,241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,4,243,2945,
        8,243,11,243,12,243,2946,1,244,1,244,1,244,1,244,3,244,2953,8,244,
        1,244,3,244,2956,8,244,1,244,1,244,1,244,1,244,1,244,1,244,1,245,
        1,245,5,245,2966,8,245,10,245,12,245,2969,9,245,1,245,3,245,2972,
        8,245,1,246,1,246,1,246,1,246,1,246,3,246,2979,8,246,1,246,1,246,
        1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,248,
        1,248,1,248,1,248,1,248,1,249,1,249,1,249,3,249,3001,8,249,1,250,
        1,250,1,250,4,250,3006,8,250,11,250,12,250,3007,1,251,1,251,3,251,
        3012,8,251,1,251,3,251,3015,8,251,1,251,1,251,1,251,3,251,3020,8,
        251,1,251,3,251,3023,8,251,1,252,1,252,1,252,5,252,3028,8,252,10,
        252,12,252,3031,9,252,1,253,1,253,1,253,1,253,3,253,3037,8,253,1,
        253,3,253,3040,8,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,3048,
        8,253,1,253,1,253,1,253,1,253,3,253,3054,8,253,3,253,3056,8,253,
        3,253,3058,8,253,1,253,3,253,3061,8,253,1,253,3,253,3064,8,253,1,
        254,1,254,1,254,3,254,3069,8,254,1,254,1,254,1,254,1,254,1,254,1,
        254,5,254,3077,8,254,10,254,12,254,3080,9,254,1,254,1,254,3,254,
        3084,8,254,3,254,3086,8,254,1,255,1,255,1,255,1,255,3,255,3092,8,
        255,1,255,3,255,3095,8,255,1,255,3,255,3098,8,255,1,255,1,255,1,
        255,1,255,1,255,1,255,3,255,3106,8,255,1,255,1,255,1,255,1,255,3,
        255,3112,8,255,3,255,3114,8,255,3,255,3116,8,255,1,255,3,255,3119,
        8,255,1,255,3,255,3122,8,255,1,256,1,256,3,256,3126,8,256,1,257,
        1,257,1,257,5,257,3131,8,257,10,257,12,257,3134,9,257,1,258,1,258,
        1,258,1,258,5,258,3140,8,258,10,258,12,258,3143,9,258,1,259,1,259,
        1,259,1,259,1,260,1,260,1,260,3,260,3152,8,260,1,260,3,260,3155,
        8,260,1,260,3,260,3158,8,260,1,260,3,260,3161,8,260,1,261,1,261,
        3,261,3165,8,261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        3,262,3175,8,262,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
        3,263,3185,8,263,1,264,1,264,1,264,1,264,1,264,1,264,3,264,3193,
        8,264,1,265,1,265,1,265,1,265,1,265,1,265,3,265,3201,8,265,1,266,
        1,266,1,266,1,266,1,266,3,266,3208,8,266,1,267,1,267,1,268,1,268,
        1,268,5,268,3215,8,268,10,268,12,268,3218,9,268,1,269,1,269,1,269,
        5,269,3223,8,269,10,269,12,269,3226,9,269,1,270,1,270,1,270,1,271,
        1,271,1,271,1,271,4,271,3235,8,271,11,271,12,271,3236,1,271,3,271,
        3240,8,271,1,272,1,272,5,272,3244,8,272,10,272,12,272,3247,9,272,
        1,272,1,272,5,272,3251,8,272,10,272,12,272,3254,9,272,1,272,1,272,
        5,272,3258,8,272,10,272,12,272,3261,9,272,1,272,1,272,5,272,3265,
        8,272,10,272,12,272,3268,9,272,1,272,1,272,1,272,1,272,3,272,3274,
        8,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,3283,8,273,
        5,273,3285,8,273,10,273,12,273,3288,9,273,1,274,1,274,1,274,1,274,
        3,274,3294,8,274,1,274,5,274,3297,8,274,10,274,12,274,3300,9,274,
        1,275,3,275,3303,8,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,
        1,277,1,277,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,3,278,
        3322,8,278,1,278,1,278,1,278,3,278,3327,8,278,1,278,1,278,1,278,
        3,278,3332,8,278,1,278,1,278,1,278,1,278,3,278,3338,8,278,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,5,279,3349,8,279,
        10,279,12,279,3352,9,279,3,279,3354,8,279,1,279,3,279,3357,8,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,5,279,3367,8,279,
        10,279,12,279,3370,9,279,3,279,3372,8,279,1,279,3,279,3375,8,279,
        1,279,1,279,1,279,1,279,1,279,1,279,3,279,3383,8,279,1,279,1,279,
        1,279,1,279,1,279,5,279,3390,8,279,10,279,12,279,3393,9,279,1,279,
        1,279,3,279,3397,8,279,3,279,3399,8,279,1,280,1,280,1,281,1,281,
        1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,5,281,3414,
        8,281,10,281,12,281,3417,9,281,3,281,3419,8,281,1,281,1,281,1,282,
        1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,3,282,3432,8,282,
        1,283,1,283,3,283,3436,8,283,1,284,1,284,3,284,3440,8,284,1,284,
        3,284,3443,8,284,1,284,3,284,3446,8,284,1,284,3,284,3449,8,284,1,
        285,1,285,3,285,3453,8,285,1,285,3,285,3456,8,285,1,285,3,285,3459,
        8,285,1,286,1,286,1,286,1,286,1,286,3,286,3466,8,286,1,287,1,287,
        1,287,3,287,3471,8,287,1,287,1,287,1,288,1,288,1,288,1,288,3,288,
        3479,8,288,1,288,1,288,1,289,1,289,3,289,3485,8,289,1,289,1,289,
        1,289,3,289,3490,8,289,1,289,1,289,3,289,3494,8,289,1,290,1,290,
        1,290,3,290,3499,8,290,1,291,1,291,1,291,1,291,1,291,3,291,3506,
        8,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        5,291,3518,8,291,10,291,12,291,3521,9,291,3,291,3523,8,291,1,291,
        1,291,3,291,3527,8,291,1,292,1,292,1,292,1,293,1,293,1,294,1,294,
        1,294,1,295,1,295,1,295,5,295,3540,8,295,10,295,12,295,3543,9,295,
        1,296,1,296,1,297,1,297,1,297,1,297,1,297,3,297,3552,8,297,1,297,
        1,297,1,297,1,297,1,297,5,297,3559,8,297,10,297,12,297,3562,9,297,
        3,297,3564,8,297,1,297,1,297,1,298,1,298,1,298,1,298,1,299,1,299,
        1,299,3,299,3575,8,299,1,300,1,300,1,300,1,301,1,301,1,301,1,301,
        1,301,5,301,3585,8,301,10,301,12,301,3588,9,301,1,301,1,301,1,302,
        1,302,1,302,1,302,1,302,3,302,3597,8,302,1,302,1,302,1,302,1,302,
        1,302,1,302,5,302,3605,8,302,10,302,12,302,3608,9,302,1,302,1,302,
        3,302,3612,8,302,1,303,1,303,3,303,3616,8,303,1,304,1,304,3,304,
        3620,8,304,1,304,1,304,5,304,3624,8,304,10,304,12,304,3627,9,304,
        1,304,1,304,1,305,1,305,1,306,1,306,1,306,1,307,1,307,1,308,1,308,
        1,308,1,308,1,309,1,309,3,309,3644,8,309,1,310,1,310,4,310,3648,
        8,310,11,310,12,310,3649,1,311,1,311,3,311,3654,8,311,1,312,1,312,
        1,312,1,312,5,312,3660,8,312,10,312,12,312,3663,9,312,1,312,1,312,
        1,313,1,313,1,313,5,313,3670,8,313,10,313,12,313,3673,9,313,1,314,
        1,314,1,314,1,314,1,314,5,314,3680,8,314,10,314,12,314,3683,9,314,
        1,315,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,
        1,317,1,318,1,318,1,318,1,318,3,318,3701,8,318,1,319,1,319,1,319,
        1,319,3,319,3707,8,319,1,319,1,319,1,319,5,319,3712,8,319,10,319,
        12,319,3715,9,319,3,319,3717,8,319,3,319,3719,8,319,1,319,1,319,
        1,319,3,319,3724,8,319,1,320,1,320,3,320,3728,8,320,1,321,1,321,
        1,321,1,321,1,321,1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,
        1,322,4,322,3744,8,322,11,322,12,322,3745,1,322,1,322,3,322,3750,
        8,322,1,322,1,322,1,323,1,323,1,323,1,323,1,323,1,323,4,323,3760,
        8,323,11,323,12,323,3761,1,323,1,323,3,323,3766,8,323,1,323,1,323,
        1,324,1,324,1,324,1,324,1,324,3,324,3775,8,324,1,324,1,324,1,325,
        1,325,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,327,1,327,1,328,
        1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
        3,328,3802,8,328,1,329,1,329,4,329,3806,8,329,11,329,12,329,3807,
        1,330,1,330,1,330,1,331,1,331,1,331,3,331,3816,8,331,1,332,1,332,
        1,332,3,332,3821,8,332,1,333,1,333,1,333,1,334,1,334,1,335,1,335,
        1,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,
        1,336,1,336,1,336,1,336,1,336,3,336,3846,8,336,1,337,1,337,1,337,
        1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,3860,
        8,337,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        1,338,3,338,3873,8,338,1,339,1,339,1,340,3,340,3878,8,340,1,340,
        1,340,1,340,1,340,1,340,3,340,3885,8,340,1,341,1,341,1,342,1,342,
        1,343,1,343,1,344,1,344,1,345,1,345,1,346,1,346,1,347,1,347,1,348,
        1,348,1,349,1,349,1,350,1,350,1,351,1,351,1,351,1,351,1,351,1,351,
        3,351,3913,8,351,1,351,1,351,1,351,1,351,5,351,3919,8,351,10,351,
        12,351,3922,9,351,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        5,352,3932,8,352,10,352,12,352,3935,9,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,3,352,3945,8,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,3,352,3977,8,352,1,352,1,352,1,352,1,352,
        1,352,3,352,3984,8,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,3,352,3996,8,352,1,352,1,352,1,352,1,352,1,352,
        3,352,4003,8,352,1,352,1,352,5,352,4007,8,352,10,352,12,352,4010,
        9,352,1,353,1,353,3,353,4014,8,353,1,354,1,354,1,354,1,354,1,355,
        1,355,1,356,1,356,1,357,1,357,3,357,4026,8,357,1,358,1,358,1,358,
        1,358,1,358,5,358,4033,8,358,10,358,12,358,4036,9,358,1,358,1,358,
        1,359,1,359,1,359,3,359,4043,8,359,1,360,1,360,1,360,1,360,1,360,
        5,360,4050,8,360,10,360,12,360,4053,9,360,1,360,1,360,1,361,1,361,
        1,361,1,361,1,362,1,362,1,363,1,363,1,364,1,364,1,364,3,364,4068,
        8,364,1,365,1,365,3,365,4072,8,365,1,366,1,366,1,366,1,366,1,366,
        3,366,4079,8,366,1,367,1,367,3,367,4083,8,367,1,368,1,368,1,369,
        1,369,1,369,0,2,702,704,370,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
        336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
        368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
        400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,
        432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
        464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
        496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,
        528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
        560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,
        592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,
        624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,
        656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
        688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,
        720,722,724,726,728,730,732,734,736,738,0,34,1,0,307,310,1,0,225,
        226,2,0,181,181,184,184,1,0,134,135,2,0,13,13,72,72,1,0,144,145,
        2,0,182,182,185,185,2,0,21,21,180,180,1,0,193,194,9,0,3,3,23,23,
        25,25,65,65,67,67,73,73,173,173,190,190,223,224,3,0,73,73,134,134,
        331,331,2,0,141,142,216,216,1,0,125,126,1,0,292,293,1,0,12,13,2,
        0,3,3,24,24,1,0,234,235,2,0,107,107,132,132,1,0,228,229,3,0,265,
        265,267,270,272,274,2,0,265,265,267,274,2,0,362,362,367,367,2,0,
        350,351,356,356,2,0,349,349,352,354,1,0,350,351,2,0,8,8,136,137,
        1,0,342,348,1,0,5,6,2,0,3,3,9,9,1,0,1,2,2,0,342,342,344,348,13,0,
        5,8,10,10,77,83,93,93,96,99,136,137,162,163,180,180,204,204,206,
        206,300,300,342,357,359,359,52,0,12,15,26,26,36,36,38,47,51,53,56,
        57,59,62,68,68,70,71,74,74,76,76,78,78,86,86,90,90,93,93,97,97,99,
        99,101,103,105,105,108,127,129,129,134,135,138,138,141,143,145,148,
        150,154,156,161,167,172,174,174,178,179,182,185,188,194,196,198,
        200,200,202,203,208,208,211,213,215,223,225,227,230,230,243,243,
        245,245,247,248,251,259,261,261,264,274,276,276,279,279,281,286,
        291,295,297,298,302,329,10,0,10,10,77,77,79,83,85,85,87,87,96,96,
        98,98,206,206,237,238,242,242,4421,0,745,1,0,0,0,2,752,1,0,0,0,4,
        756,1,0,0,0,6,758,1,0,0,0,8,784,1,0,0,0,10,786,1,0,0,0,12,788,1,
        0,0,0,14,802,1,0,0,0,16,804,1,0,0,0,18,820,1,0,0,0,20,829,1,0,0,
        0,22,837,1,0,0,0,24,850,1,0,0,0,26,873,1,0,0,0,28,888,1,0,0,0,30,
        892,1,0,0,0,32,900,1,0,0,0,34,951,1,0,0,0,36,953,1,0,0,0,38,956,
        1,0,0,0,40,958,1,0,0,0,42,962,1,0,0,0,44,965,1,0,0,0,46,968,1,0,
        0,0,48,972,1,0,0,0,50,975,1,0,0,0,52,992,1,0,0,0,54,995,1,0,0,0,
        56,999,1,0,0,0,58,1007,1,0,0,0,60,1010,1,0,0,0,62,1019,1,0,0,0,64,
        1022,1,0,0,0,66,1084,1,0,0,0,68,1094,1,0,0,0,70,1131,1,0,0,0,72,
        1150,1,0,0,0,74,1165,1,0,0,0,76,1167,1,0,0,0,78,1178,1,0,0,0,80,
        1182,1,0,0,0,82,1187,1,0,0,0,84,1189,1,0,0,0,86,1194,1,0,0,0,88,
        1199,1,0,0,0,90,1204,1,0,0,0,92,1208,1,0,0,0,94,1216,1,0,0,0,96,
        1221,1,0,0,0,98,1225,1,0,0,0,100,1245,1,0,0,0,102,1258,1,0,0,0,104,
        1266,1,0,0,0,106,1268,1,0,0,0,108,1277,1,0,0,0,110,1281,1,0,0,0,
        112,1288,1,0,0,0,114,1295,1,0,0,0,116,1302,1,0,0,0,118,1305,1,0,
        0,0,120,1332,1,0,0,0,122,1343,1,0,0,0,124,1347,1,0,0,0,126,1349,
        1,0,0,0,128,1362,1,0,0,0,130,1364,1,0,0,0,132,1372,1,0,0,0,134,1381,
        1,0,0,0,136,1383,1,0,0,0,138,1388,1,0,0,0,140,1392,1,0,0,0,142,1400,
        1,0,0,0,144,1404,1,0,0,0,146,1413,1,0,0,0,148,1415,1,0,0,0,150,1421,
        1,0,0,0,152,1425,1,0,0,0,154,1438,1,0,0,0,156,1440,1,0,0,0,158,1444,
        1,0,0,0,160,1488,1,0,0,0,162,1496,1,0,0,0,164,1502,1,0,0,0,166,1506,
        1,0,0,0,168,1509,1,0,0,0,170,1520,1,0,0,0,172,1537,1,0,0,0,174,1539,
        1,0,0,0,176,1544,1,0,0,0,178,1564,1,0,0,0,180,1568,1,0,0,0,182,1575,
        1,0,0,0,184,1591,1,0,0,0,186,1731,1,0,0,0,188,1733,1,0,0,0,190,1741,
        1,0,0,0,192,1746,1,0,0,0,194,1748,1,0,0,0,196,1754,1,0,0,0,198,1758,
        1,0,0,0,200,1762,1,0,0,0,202,1766,1,0,0,0,204,1776,1,0,0,0,206,1787,
        1,0,0,0,208,1804,1,0,0,0,210,1822,1,0,0,0,212,1827,1,0,0,0,214,1830,
        1,0,0,0,216,1834,1,0,0,0,218,1841,1,0,0,0,220,1850,1,0,0,0,222,1856,
        1,0,0,0,224,1858,1,0,0,0,226,1874,1,0,0,0,228,1895,1,0,0,0,230,1897,
        1,0,0,0,232,1905,1,0,0,0,234,1912,1,0,0,0,236,1914,1,0,0,0,238,1928,
        1,0,0,0,240,1930,1,0,0,0,242,1934,1,0,0,0,244,1938,1,0,0,0,246,1942,
        1,0,0,0,248,1946,1,0,0,0,250,1961,1,0,0,0,252,1969,1,0,0,0,254,1972,
        1,0,0,0,256,1974,1,0,0,0,258,1986,1,0,0,0,260,1996,1,0,0,0,262,1999,
        1,0,0,0,264,2010,1,0,0,0,266,2018,1,0,0,0,268,2045,1,0,0,0,270,2073,
        1,0,0,0,272,2079,1,0,0,0,274,2086,1,0,0,0,276,2096,1,0,0,0,278,2100,
        1,0,0,0,280,2102,1,0,0,0,282,2105,1,0,0,0,284,2118,1,0,0,0,286,2135,
        1,0,0,0,288,2149,1,0,0,0,290,2151,1,0,0,0,292,2154,1,0,0,0,294,2157,
        1,0,0,0,296,2166,1,0,0,0,298,2186,1,0,0,0,300,2188,1,0,0,0,302,2191,
        1,0,0,0,304,2211,1,0,0,0,306,2213,1,0,0,0,308,2217,1,0,0,0,310,2219,
        1,0,0,0,312,2228,1,0,0,0,314,2234,1,0,0,0,316,2240,1,0,0,0,318,2245,
        1,0,0,0,320,2273,1,0,0,0,322,2275,1,0,0,0,324,2278,1,0,0,0,326,2286,
        1,0,0,0,328,2294,1,0,0,0,330,2302,1,0,0,0,332,2310,1,0,0,0,334,2312,
        1,0,0,0,336,2325,1,0,0,0,338,2333,1,0,0,0,340,2342,1,0,0,0,342,2344,
        1,0,0,0,344,2346,1,0,0,0,346,2351,1,0,0,0,348,2357,1,0,0,0,350,2361,
        1,0,0,0,352,2367,1,0,0,0,354,2373,1,0,0,0,356,2378,1,0,0,0,358,2389,
        1,0,0,0,360,2402,1,0,0,0,362,2404,1,0,0,0,364,2412,1,0,0,0,366,2416,
        1,0,0,0,368,2424,1,0,0,0,370,2428,1,0,0,0,372,2430,1,0,0,0,374,2436,
        1,0,0,0,376,2438,1,0,0,0,378,2445,1,0,0,0,380,2453,1,0,0,0,382,2458,
        1,0,0,0,384,2465,1,0,0,0,386,2473,1,0,0,0,388,2477,1,0,0,0,390,2479,
        1,0,0,0,392,2490,1,0,0,0,394,2494,1,0,0,0,396,2506,1,0,0,0,398,2514,
        1,0,0,0,400,2518,1,0,0,0,402,2530,1,0,0,0,404,2536,1,0,0,0,406,2539,
        1,0,0,0,408,2542,1,0,0,0,410,2545,1,0,0,0,412,2552,1,0,0,0,414,2554,
        1,0,0,0,416,2567,1,0,0,0,418,2608,1,0,0,0,420,2610,1,0,0,0,422,2615,
        1,0,0,0,424,2620,1,0,0,0,426,2627,1,0,0,0,428,2656,1,0,0,0,430,2659,
        1,0,0,0,432,2665,1,0,0,0,434,2667,1,0,0,0,436,2676,1,0,0,0,438,2682,
        1,0,0,0,440,2691,1,0,0,0,442,2703,1,0,0,0,444,2725,1,0,0,0,446,2727,
        1,0,0,0,448,2749,1,0,0,0,450,2754,1,0,0,0,452,2821,1,0,0,0,454,2841,
        1,0,0,0,456,2856,1,0,0,0,458,2868,1,0,0,0,460,2870,1,0,0,0,462,2876,
        1,0,0,0,464,2880,1,0,0,0,466,2889,1,0,0,0,468,2899,1,0,0,0,470,2901,
        1,0,0,0,472,2915,1,0,0,0,474,2921,1,0,0,0,476,2923,1,0,0,0,478,2927,
        1,0,0,0,480,2929,1,0,0,0,482,2933,1,0,0,0,484,2937,1,0,0,0,486,2941,
        1,0,0,0,488,2948,1,0,0,0,490,2967,1,0,0,0,492,2973,1,0,0,0,494,2985,
        1,0,0,0,496,2992,1,0,0,0,498,3000,1,0,0,0,500,3002,1,0,0,0,502,3022,
        1,0,0,0,504,3024,1,0,0,0,506,3032,1,0,0,0,508,3085,1,0,0,0,510,3091,
        1,0,0,0,512,3125,1,0,0,0,514,3127,1,0,0,0,516,3135,1,0,0,0,518,3144,
        1,0,0,0,520,3160,1,0,0,0,522,3164,1,0,0,0,524,3174,1,0,0,0,526,3184,
        1,0,0,0,528,3192,1,0,0,0,530,3200,1,0,0,0,532,3207,1,0,0,0,534,3209,
        1,0,0,0,536,3211,1,0,0,0,538,3219,1,0,0,0,540,3227,1,0,0,0,542,3239,
        1,0,0,0,544,3273,1,0,0,0,546,3275,1,0,0,0,548,3293,1,0,0,0,550,3302,
        1,0,0,0,552,3307,1,0,0,0,554,3311,1,0,0,0,556,3337,1,0,0,0,558,3398,
        1,0,0,0,560,3400,1,0,0,0,562,3402,1,0,0,0,564,3431,1,0,0,0,566,3435,
        1,0,0,0,568,3437,1,0,0,0,570,3450,1,0,0,0,572,3465,1,0,0,0,574,3470,
        1,0,0,0,576,3474,1,0,0,0,578,3493,1,0,0,0,580,3498,1,0,0,0,582,3500,
        1,0,0,0,584,3528,1,0,0,0,586,3531,1,0,0,0,588,3533,1,0,0,0,590,3536,
        1,0,0,0,592,3544,1,0,0,0,594,3546,1,0,0,0,596,3567,1,0,0,0,598,3574,
        1,0,0,0,600,3576,1,0,0,0,602,3579,1,0,0,0,604,3591,1,0,0,0,606,3615,
        1,0,0,0,608,3617,1,0,0,0,610,3630,1,0,0,0,612,3632,1,0,0,0,614,3635,
        1,0,0,0,616,3637,1,0,0,0,618,3641,1,0,0,0,620,3647,1,0,0,0,622,3653,
        1,0,0,0,624,3655,1,0,0,0,626,3666,1,0,0,0,628,3674,1,0,0,0,630,3684,
        1,0,0,0,632,3688,1,0,0,0,634,3692,1,0,0,0,636,3696,1,0,0,0,638,3702,
        1,0,0,0,640,3727,1,0,0,0,642,3729,1,0,0,0,644,3736,1,0,0,0,646,3753,
        1,0,0,0,648,3769,1,0,0,0,650,3778,1,0,0,0,652,3780,1,0,0,0,654,3787,
        1,0,0,0,656,3801,1,0,0,0,658,3803,1,0,0,0,660,3809,1,0,0,0,662,3815,
        1,0,0,0,664,3820,1,0,0,0,666,3822,1,0,0,0,668,3825,1,0,0,0,670,3827,
        1,0,0,0,672,3845,1,0,0,0,674,3859,1,0,0,0,676,3872,1,0,0,0,678,3874,
        1,0,0,0,680,3877,1,0,0,0,682,3886,1,0,0,0,684,3888,1,0,0,0,686,3890,
        1,0,0,0,688,3892,1,0,0,0,690,3894,1,0,0,0,692,3896,1,0,0,0,694,3898,
        1,0,0,0,696,3900,1,0,0,0,698,3902,1,0,0,0,700,3904,1,0,0,0,702,3912,
        1,0,0,0,704,3944,1,0,0,0,706,4013,1,0,0,0,708,4015,1,0,0,0,710,4019,
        1,0,0,0,712,4021,1,0,0,0,714,4023,1,0,0,0,716,4027,1,0,0,0,718,4039,
        1,0,0,0,720,4044,1,0,0,0,722,4056,1,0,0,0,724,4060,1,0,0,0,726,4062,
        1,0,0,0,728,4067,1,0,0,0,730,4071,1,0,0,0,732,4078,1,0,0,0,734,4082,
        1,0,0,0,736,4084,1,0,0,0,738,4086,1,0,0,0,740,741,3,4,2,0,741,742,
        3,2,1,0,742,744,1,0,0,0,743,740,1,0,0,0,744,747,1,0,0,0,745,743,
        1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,745,1,0,0,0,748,749,
        5,0,0,1,749,1,1,0,0,0,750,753,5,335,0,0,751,753,1,0,0,0,752,750,
        1,0,0,0,752,751,1,0,0,0,753,3,1,0,0,0,754,757,3,6,3,0,755,757,3,
        14,7,0,756,754,1,0,0,0,756,755,1,0,0,0,757,5,1,0,0,0,758,768,5,143,
        0,0,759,761,3,8,4,0,760,759,1,0,0,0,761,764,1,0,0,0,762,760,1,0,
        0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,762,1,0,0,0,765,769,3,14,
        7,0,766,767,5,259,0,0,767,769,3,430,215,0,768,762,1,0,0,0,768,766,
        1,0,0,0,769,7,1,0,0,0,770,785,5,144,0,0,771,785,5,145,0,0,772,785,
        5,146,0,0,773,785,5,147,0,0,774,785,5,260,0,0,775,785,5,202,0,0,
        776,785,5,261,0,0,777,779,5,306,0,0,778,780,3,10,5,0,779,778,1,0,
        0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,3,12,6,0,782,781,1,0,
        0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,770,1,0,0,0,784,771,1,0,
        0,0,784,772,1,0,0,0,784,773,1,0,0,0,784,774,1,0,0,0,784,775,1,0,
        0,0,784,776,1,0,0,0,784,777,1,0,0,0,785,9,1,0,0,0,786,787,5,280,
        0,0,787,11,1,0,0,0,788,789,7,0,0,0,789,13,1,0,0,0,790,803,3,430,
        215,0,791,803,3,16,8,0,792,803,3,20,10,0,793,803,3,22,11,0,794,803,
        3,24,12,0,795,803,3,26,13,0,796,803,3,32,16,0,797,803,3,34,17,0,
        798,803,3,460,230,0,799,803,3,466,233,0,800,803,3,468,234,0,801,
        803,3,488,244,0,802,790,1,0,0,0,802,791,1,0,0,0,802,792,1,0,0,0,
        802,793,1,0,0,0,802,794,1,0,0,0,802,795,1,0,0,0,802,796,1,0,0,0,
        802,797,1,0,0,0,802,798,1,0,0,0,802,799,1,0,0,0,802,800,1,0,0,0,
        802,801,1,0,0,0,803,15,1,0,0,0,804,805,5,56,0,0,805,807,5,61,0,0,
        806,808,5,48,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,
        809,810,5,62,0,0,810,812,5,362,0,0,811,813,5,26,0,0,812,811,1,0,
        0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,5,104,0,0,815,816,5,
        37,0,0,816,818,3,714,357,0,817,819,3,174,87,0,818,817,1,0,0,0,818,
        819,1,0,0,0,819,17,1,0,0,0,820,822,5,231,0,0,821,823,5,60,0,0,822,
        821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,825,5,59,0,0,825,
        826,5,336,0,0,826,827,5,362,0,0,827,828,5,337,0,0,828,19,1,0,0,0,
        829,830,5,57,0,0,830,831,5,37,0,0,831,832,3,714,357,0,832,833,5,
        75,0,0,833,835,5,362,0,0,834,836,3,18,9,0,835,834,1,0,0,0,835,836,
        1,0,0,0,836,21,1,0,0,0,837,843,5,58,0,0,838,840,5,66,0,0,839,838,
        1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,842,5,37,0,0,842,844,
        3,714,357,0,843,839,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,
        846,5,21,0,0,846,848,5,362,0,0,847,849,3,322,161,0,848,847,1,0,0,
        0,848,849,1,0,0,0,849,23,1,0,0,0,850,851,5,303,0,0,851,852,5,304,
        0,0,852,855,3,730,365,0,853,854,5,332,0,0,854,856,3,730,365,0,855,
        853,1,0,0,0,855,856,1,0,0,0,856,867,1,0,0,0,857,858,5,21,0,0,858,
        861,5,367,0,0,859,860,5,75,0,0,860,862,5,367,0,0,861,859,1,0,0,0,
        861,862,1,0,0,0,862,865,1,0,0,0,863,864,5,153,0,0,864,866,5,367,
        0,0,865,863,1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,857,1,0,
        0,0,867,868,1,0,0,0,868,871,1,0,0,0,869,870,5,149,0,0,870,872,3,
        28,14,0,871,869,1,0,0,0,871,872,1,0,0,0,872,25,1,0,0,0,873,874,5,
        303,0,0,874,880,5,56,0,0,875,878,3,730,365,0,876,877,5,332,0,0,877,
        879,3,730,365,0,878,876,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,
        880,875,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,883,5,21,0,0,
        883,886,5,362,0,0,884,885,5,149,0,0,885,887,3,28,14,0,886,884,1,
        0,0,0,886,887,1,0,0,0,887,27,1,0,0,0,888,889,5,336,0,0,889,890,3,
        30,15,0,890,891,5,337,0,0,891,29,1,0,0,0,892,897,3,306,153,0,893,
        894,5,334,0,0,894,896,3,306,153,0,895,893,1,0,0,0,896,899,1,0,0,
        0,897,895,1,0,0,0,897,898,1,0,0,0,898,31,1,0,0,0,899,897,1,0,0,0,
        900,901,5,303,0,0,901,902,5,305,0,0,902,905,3,730,365,0,903,904,
        5,332,0,0,904,906,3,730,365,0,905,903,1,0,0,0,905,906,1,0,0,0,906,
        909,1,0,0,0,907,908,5,149,0,0,908,910,3,28,14,0,909,907,1,0,0,0,
        909,910,1,0,0,0,910,33,1,0,0,0,911,952,3,50,25,0,912,952,3,58,29,
        0,913,952,3,60,30,0,914,952,3,64,32,0,915,952,3,68,34,0,916,952,
        3,66,33,0,917,952,3,70,35,0,918,952,3,182,91,0,919,952,3,186,93,
        0,920,952,3,248,124,0,921,952,3,266,133,0,922,952,3,268,134,0,923,
        952,3,272,136,0,924,952,3,274,137,0,925,952,3,256,128,0,926,952,
        3,262,131,0,927,952,3,258,129,0,928,952,3,260,130,0,929,952,3,264,
        132,0,930,952,3,184,92,0,931,952,3,188,94,0,932,952,3,194,97,0,933,
        952,3,190,95,0,934,952,3,196,98,0,935,952,3,198,99,0,936,952,3,200,
        100,0,937,952,3,202,101,0,938,952,3,204,102,0,939,952,3,218,109,
        0,940,952,3,210,105,0,941,952,3,220,110,0,942,952,3,212,106,0,943,
        952,3,206,103,0,944,952,3,208,104,0,945,952,3,216,108,0,946,952,
        3,214,107,0,947,952,3,486,243,0,948,952,3,500,250,0,949,952,3,158,
        79,0,950,952,3,162,81,0,951,911,1,0,0,0,951,912,1,0,0,0,951,913,
        1,0,0,0,951,914,1,0,0,0,951,915,1,0,0,0,951,916,1,0,0,0,951,917,
        1,0,0,0,951,918,1,0,0,0,951,919,1,0,0,0,951,920,1,0,0,0,951,921,
        1,0,0,0,951,922,1,0,0,0,951,923,1,0,0,0,951,924,1,0,0,0,951,925,
        1,0,0,0,951,926,1,0,0,0,951,927,1,0,0,0,951,928,1,0,0,0,951,929,
        1,0,0,0,951,930,1,0,0,0,951,931,1,0,0,0,951,932,1,0,0,0,951,933,
        1,0,0,0,951,934,1,0,0,0,951,935,1,0,0,0,951,936,1,0,0,0,951,937,
        1,0,0,0,951,938,1,0,0,0,951,939,1,0,0,0,951,940,1,0,0,0,951,941,
        1,0,0,0,951,942,1,0,0,0,951,943,1,0,0,0,951,944,1,0,0,0,951,945,
        1,0,0,0,951,946,1,0,0,0,951,947,1,0,0,0,951,948,1,0,0,0,951,949,
        1,0,0,0,951,950,1,0,0,0,952,35,1,0,0,0,953,954,5,10,0,0,954,955,
        5,11,0,0,955,37,1,0,0,0,956,957,7,1,0,0,957,39,1,0,0,0,958,959,5,
        10,0,0,959,960,5,7,0,0,960,961,5,11,0,0,961,41,1,0,0,0,962,963,5,
        125,0,0,963,964,5,259,0,0,964,43,1,0,0,0,965,966,5,126,0,0,966,967,
        5,259,0,0,967,45,1,0,0,0,968,969,5,119,0,0,969,970,5,22,0,0,970,
        971,5,230,0,0,971,47,1,0,0,0,972,973,5,6,0,0,973,974,5,135,0,0,974,
        49,1,0,0,0,975,976,5,65,0,0,976,978,7,2,0,0,977,979,3,40,20,0,978,
        977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,982,3,730,365,0,
        981,983,3,62,31,0,982,981,1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,
        0,984,986,3,52,26,0,985,984,1,0,0,0,985,986,1,0,0,0,986,990,1,0,
        0,0,987,988,5,149,0,0,988,989,5,152,0,0,989,991,3,54,27,0,990,987,
        1,0,0,0,990,991,1,0,0,0,991,51,1,0,0,0,992,993,5,127,0,0,993,994,
        5,362,0,0,994,53,1,0,0,0,995,996,5,336,0,0,996,997,3,56,28,0,997,
        998,5,337,0,0,998,55,1,0,0,0,999,1004,3,306,153,0,1000,1001,5,334,
        0,0,1001,1003,3,306,153,0,1002,1000,1,0,0,0,1003,1006,1,0,0,0,1004,
        1002,1,0,0,0,1004,1005,1,0,0,0,1005,57,1,0,0,0,1006,1004,1,0,0,0,
        1007,1008,5,220,0,0,1008,1009,3,730,365,0,1009,59,1,0,0,0,1010,1011,
        5,73,0,0,1011,1013,7,2,0,0,1012,1014,3,36,18,0,1013,1012,1,0,0,0,
        1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1017,3,730,365,0,1016,1018,
        3,38,19,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,61,1,0,0,0,1019,
        1020,5,76,0,0,1020,1021,5,362,0,0,1021,63,1,0,0,0,1022,1024,5,65,
        0,0,1023,1025,5,138,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,
        1027,1,0,0,0,1026,1028,5,66,0,0,1027,1026,1,0,0,0,1027,1028,1,0,
        0,0,1028,1029,1,0,0,0,1029,1031,5,37,0,0,1030,1032,3,40,20,0,1031,
        1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1082,3,572,
        286,0,1034,1035,5,8,0,0,1035,1037,3,572,286,0,1036,1038,3,298,149,
        0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1040,1,0,0,0,1039,1041,
        3,320,160,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,
        0,1042,1044,3,322,161,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,
        1046,1,0,0,0,1045,1047,3,300,150,0,1046,1045,1,0,0,0,1046,1047,1,
        0,0,0,1047,1083,1,0,0,0,1048,1049,5,336,0,0,1049,1050,3,326,163,
        0,1050,1051,5,337,0,0,1051,1053,1,0,0,0,1052,1048,1,0,0,0,1052,1053,
        1,0,0,0,1053,1055,1,0,0,0,1054,1056,3,280,140,0,1055,1054,1,0,0,
        0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1059,3,282,141,0,1058,
        1057,1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1062,3,284,
        142,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,
        1065,3,286,143,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1067,1,
        0,0,0,1066,1068,3,298,149,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,
        1068,1070,1,0,0,0,1069,1071,3,320,160,0,1070,1069,1,0,0,0,1070,1071,
        1,0,0,0,1071,1073,1,0,0,0,1072,1074,3,322,161,0,1073,1072,1,0,0,
        0,1073,1074,1,0,0,0,1074,1076,1,0,0,0,1075,1077,3,300,150,0,1076,
        1075,1,0,0,0,1076,1077,1,0,0,0,1077,1080,1,0,0,0,1078,1079,5,22,
        0,0,1079,1081,3,450,225,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,
        1083,1,0,0,0,1082,1034,1,0,0,0,1082,1052,1,0,0,0,1083,65,1,0,0,0,
        1084,1085,5,244,0,0,1085,1086,5,37,0,0,1086,1092,3,164,82,0,1087,
        1088,5,39,0,0,1088,1089,5,336,0,0,1089,1090,3,330,165,0,1090,1091,
        5,337,0,0,1091,1093,1,0,0,0,1092,1087,1,0,0,0,1092,1093,1,0,0,0,
        1093,67,1,0,0,0,1094,1095,5,73,0,0,1095,1097,5,37,0,0,1096,1098,
        3,36,18,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,
        1099,1101,3,572,286,0,1100,1102,5,200,0,0,1101,1100,1,0,0,0,1101,
        1102,1,0,0,0,1102,1104,1,0,0,0,1103,1105,3,18,9,0,1104,1103,1,0,
        0,0,1104,1105,1,0,0,0,1105,69,1,0,0,0,1106,1107,5,67,0,0,1107,1108,
        5,37,0,0,1108,1109,3,572,286,0,1109,1110,3,72,36,0,1110,1132,1,0,
        0,0,1111,1112,5,67,0,0,1112,1113,5,178,0,0,1113,1115,3,572,286,0,
        1114,1116,5,22,0,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,
        1,0,0,0,1117,1118,3,78,39,0,1118,1132,1,0,0,0,1119,1120,5,67,0,0,
        1120,1121,5,183,0,0,1121,1122,5,178,0,0,1122,1123,3,572,286,0,1123,
        1124,3,80,40,0,1124,1132,1,0,0,0,1125,1126,5,67,0,0,1126,1127,7,
        2,0,0,1127,1132,3,82,41,0,1128,1129,5,67,0,0,1129,1130,5,40,0,0,
        1130,1132,3,130,65,0,1131,1106,1,0,0,0,1131,1111,1,0,0,0,1131,1119,
        1,0,0,0,1131,1125,1,0,0,0,1131,1128,1,0,0,0,1132,71,1,0,0,0,1133,
        1151,3,90,45,0,1134,1151,3,118,59,0,1135,1151,3,106,53,0,1136,1151,
        3,110,55,0,1137,1151,3,112,56,0,1138,1151,3,114,57,0,1139,1151,3,
        120,60,0,1140,1151,3,146,73,0,1141,1151,3,148,74,0,1142,1151,3,76,
        38,0,1143,1151,3,96,48,0,1144,1151,3,94,47,0,1145,1147,3,716,358,
        0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,1148,1151,
        3,74,37,0,1149,1151,3,170,85,0,1150,1133,1,0,0,0,1150,1134,1,0,0,
        0,1150,1135,1,0,0,0,1150,1136,1,0,0,0,1150,1137,1,0,0,0,1150,1138,
        1,0,0,0,1150,1139,1,0,0,0,1150,1140,1,0,0,0,1150,1141,1,0,0,0,1150,
        1142,1,0,0,0,1150,1143,1,0,0,0,1150,1144,1,0,0,0,1150,1146,1,0,0,
        0,1150,1149,1,0,0,0,1151,73,1,0,0,0,1152,1166,3,132,66,0,1153,1166,
        3,144,72,0,1154,1166,3,154,77,0,1155,1166,3,128,64,0,1156,1166,3,
        150,75,0,1157,1166,3,156,78,0,1158,1166,3,136,68,0,1159,1166,3,134,
        67,0,1160,1166,3,168,84,0,1161,1166,3,100,50,0,1162,1166,3,102,51,
        0,1163,1166,3,98,49,0,1164,1166,3,92,46,0,1165,1152,1,0,0,0,1165,
        1153,1,0,0,0,1165,1154,1,0,0,0,1165,1155,1,0,0,0,1165,1156,1,0,0,
        0,1165,1157,1,0,0,0,1165,1158,1,0,0,0,1165,1159,1,0,0,0,1165,1160,
        1,0,0,0,1165,1161,1,0,0,0,1165,1162,1,0,0,0,1165,1163,1,0,0,0,1165,
        1164,1,0,0,0,1166,75,1,0,0,0,1167,1168,5,35,0,0,1168,1169,5,69,0,
        0,1169,1170,5,336,0,0,1170,1171,3,384,192,0,1171,1172,5,337,0,0,
        1172,77,1,0,0,0,1173,1179,3,122,61,0,1174,1179,3,90,45,0,1175,1179,
        3,106,53,0,1176,1179,3,118,59,0,1177,1179,3,450,225,0,1178,1173,
        1,0,0,0,1178,1174,1,0,0,0,1178,1175,1,0,0,0,1178,1176,1,0,0,0,1178,
        1177,1,0,0,0,1179,79,1,0,0,0,1180,1183,3,124,62,0,1181,1183,3,126,
        63,0,1182,1180,1,0,0,0,1182,1181,1,0,0,0,1183,81,1,0,0,0,1184,1188,
        3,84,42,0,1185,1188,3,86,43,0,1186,1188,3,88,44,0,1187,1184,1,0,
        0,0,1187,1185,1,0,0,0,1187,1186,1,0,0,0,1188,83,1,0,0,0,1189,1190,
        3,730,365,0,1190,1191,5,155,0,0,1191,1192,5,152,0,0,1192,1193,3,
        54,27,0,1193,85,1,0,0,0,1194,1195,3,730,365,0,1195,1196,5,155,0,
        0,1196,1197,5,254,0,0,1197,1198,3,238,119,0,1198,87,1,0,0,0,1199,
        1200,3,730,365,0,1200,1201,5,155,0,0,1201,1202,5,127,0,0,1202,1203,
        5,362,0,0,1203,89,1,0,0,0,1204,1205,5,74,0,0,1205,1206,5,75,0,0,
        1206,1207,3,572,286,0,1207,91,1,0,0,0,1208,1209,7,3,0,0,1209,1210,
        5,39,0,0,1210,1211,5,336,0,0,1211,1212,3,324,162,0,1212,1214,5,337,
        0,0,1213,1215,3,38,19,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,
        93,1,0,0,0,1216,1219,5,134,0,0,1217,1220,3,358,179,0,1218,1220,3,
        352,176,0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,95,1,0,0,0,1221,
        1222,5,73,0,0,1222,1223,5,290,0,0,1223,1224,3,730,365,0,1224,97,
        1,0,0,0,1225,1227,5,68,0,0,1226,1228,5,69,0,0,1227,1226,1,0,0,0,
        1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1230,3,730,365,0,1230,1231,
        3,730,365,0,1231,1233,3,412,206,0,1232,1234,3,398,199,0,1233,1232,
        1,0,0,0,1233,1234,1,0,0,0,1234,1237,1,0,0,0,1235,1236,5,76,0,0,1236,
        1238,5,362,0,0,1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,1240,1,0,
        0,0,1239,1241,3,104,52,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,
        1243,1,0,0,0,1242,1244,3,38,19,0,1243,1242,1,0,0,0,1243,1244,1,0,
        0,0,1244,99,1,0,0,0,1245,1246,5,224,0,0,1246,1247,5,219,0,0,1247,
        1249,5,231,0,0,1248,1250,5,69,0,0,1249,1248,1,0,0,0,1249,1250,1,
        0,0,0,1250,1251,1,0,0,0,1251,1252,3,730,365,0,1252,1253,5,155,0,
        0,1253,1256,3,302,151,0,1254,1255,5,76,0,0,1255,1257,5,362,0,0,1256,
        1254,1,0,0,0,1256,1257,1,0,0,0,1257,101,1,0,0,0,1258,1259,5,224,
        0,0,1259,1260,5,219,0,0,1260,1261,5,155,0,0,1261,1262,3,302,151,
        0,1262,103,1,0,0,0,1263,1267,5,70,0,0,1264,1265,5,71,0,0,1265,1267,
        3,730,365,0,1266,1263,1,0,0,0,1266,1264,1,0,0,0,1267,105,1,0,0,0,
        1268,1270,5,134,0,0,1269,1271,3,40,20,0,1270,1269,1,0,0,0,1270,1271,
        1,0,0,0,1271,1273,1,0,0,0,1272,1274,3,108,54,0,1273,1272,1,0,0,0,
        1274,1275,1,0,0,0,1275,1273,1,0,0,0,1275,1276,1,0,0,0,1276,107,1,
        0,0,0,1277,1279,3,716,358,0,1278,1280,3,116,58,0,1279,1278,1,0,0,
        0,1279,1280,1,0,0,0,1280,109,1,0,0,0,1281,1285,5,215,0,0,1282,1284,
        3,716,358,0,1283,1282,1,0,0,0,1284,1287,1,0,0,0,1285,1283,1,0,0,
        0,1285,1286,1,0,0,0,1286,111,1,0,0,0,1287,1285,1,0,0,0,1288,1292,
        5,216,0,0,1289,1291,3,716,358,0,1290,1289,1,0,0,0,1291,1294,1,0,
        0,0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,113,1,0,0,0,1294,1292,
        1,0,0,0,1295,1299,5,217,0,0,1296,1298,3,716,358,0,1297,1296,1,0,
        0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,115,
        1,0,0,0,1301,1299,1,0,0,0,1302,1303,5,127,0,0,1303,1304,5,362,0,
        0,1304,117,1,0,0,0,1305,1307,5,73,0,0,1306,1308,3,36,18,0,1307,1306,
        1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,0,0,0,1309,1314,3,720,360,
        0,1310,1311,5,334,0,0,1311,1313,3,720,360,0,1312,1310,1,0,0,0,1313,
        1316,1,0,0,0,1314,1312,1,0,0,0,1314,1315,1,0,0,0,1315,1318,1,0,0,
        0,1316,1314,1,0,0,0,1317,1319,5,200,0,0,1318,1317,1,0,0,0,1318,1319,
        1,0,0,0,1319,1321,1,0,0,0,1320,1322,3,18,9,0,1321,1320,1,0,0,0,1321,
        1322,1,0,0,0,1322,119,1,0,0,0,1323,1324,5,155,0,0,1324,1325,5,157,
        0,0,1325,1333,3,302,151,0,1326,1327,5,156,0,0,1327,1329,5,157,0,
        0,1328,1330,3,36,18,0,1329,1328,1,0,0,0,1329,1330,1,0,0,0,1330,1331,
        1,0,0,0,1331,1333,3,302,151,0,1332,1323,1,0,0,0,1332,1326,1,0,0,
        0,1333,121,1,0,0,0,1334,1335,5,155,0,0,1335,1336,5,157,0,0,1336,
        1344,3,302,151,0,1337,1338,5,156,0,0,1338,1340,5,157,0,0,1339,1341,
        3,36,18,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,
        1342,1344,3,302,151,0,1343,1334,1,0,0,0,1343,1337,1,0,0,0,1344,123,
        1,0,0,0,1345,1348,3,42,21,0,1346,1348,3,44,22,0,1347,1345,1,0,0,
        0,1347,1346,1,0,0,0,1348,125,1,0,0,0,1349,1350,5,42,0,0,1350,127,
        1,0,0,0,1351,1352,5,155,0,0,1352,1353,5,148,0,0,1353,1357,5,362,
        0,0,1354,1355,5,149,0,0,1355,1356,5,151,0,0,1356,1358,3,302,151,
        0,1357,1354,1,0,0,0,1357,1358,1,0,0,0,1358,1363,1,0,0,0,1359,1360,
        5,155,0,0,1360,1361,5,151,0,0,1361,1363,3,302,151,0,1362,1351,1,
        0,0,0,1362,1359,1,0,0,0,1363,129,1,0,0,0,1364,1365,3,730,365,0,1365,
        1366,5,34,0,0,1366,1368,3,572,286,0,1367,1369,3,716,358,0,1368,1367,
        1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,0,0,0,1370,1371,5,42,0,0,1371,
        131,1,0,0,0,1372,1373,5,155,0,0,1373,1374,5,120,0,0,1374,1375,3,
        172,86,0,1375,133,1,0,0,0,1376,1377,5,7,0,0,1377,1382,5,102,0,0,
        1378,1379,5,7,0,0,1379,1382,5,103,0,0,1380,1382,3,284,142,0,1381,
        1376,1,0,0,0,1381,1378,1,0,0,0,1381,1380,1,0,0,0,1382,135,1,0,0,
        0,1383,1384,5,155,0,0,1384,1385,5,227,0,0,1385,1386,5,127,0,0,1386,
        1387,3,138,69,0,1387,137,1,0,0,0,1388,1389,5,336,0,0,1389,1390,3,
        140,70,0,1390,1391,5,337,0,0,1391,139,1,0,0,0,1392,1397,3,142,71,
        0,1393,1394,5,334,0,0,1394,1396,3,142,71,0,1395,1393,1,0,0,0,1396,
        1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,141,1,0,0,
        0,1399,1397,1,0,0,0,1400,1401,3,370,185,0,1401,1402,5,342,0,0,1402,
        1403,5,362,0,0,1403,143,1,0,0,0,1404,1405,5,155,0,0,1405,1406,5,
        127,0,0,1406,1407,5,362,0,0,1407,145,1,0,0,0,1408,1414,3,286,143,
        0,1409,1410,5,7,0,0,1410,1414,5,227,0,0,1411,1412,5,7,0,0,1412,1414,
        3,46,23,0,1413,1408,1,0,0,0,1413,1409,1,0,0,0,1413,1411,1,0,0,0,
        1414,147,1,0,0,0,1415,1416,5,250,0,0,1416,1417,3,716,358,0,1417,
        1418,5,149,0,0,1418,1419,5,37,0,0,1419,1420,3,572,286,0,1420,149,
        1,0,0,0,1421,1422,5,74,0,0,1422,1423,5,75,0,0,1423,1424,3,716,358,
        0,1424,151,1,0,0,0,1425,1426,5,224,0,0,1426,1427,5,219,0,0,1427,
        1429,5,231,0,0,1428,1430,5,69,0,0,1429,1428,1,0,0,0,1429,1430,1,
        0,0,0,1430,1431,1,0,0,0,1431,1432,3,730,365,0,1432,1433,5,155,0,
        0,1433,1436,3,302,151,0,1434,1435,5,76,0,0,1435,1437,5,362,0,0,1436,
        1434,1,0,0,0,1436,1437,1,0,0,0,1437,153,1,0,0,0,1438,1439,5,222,
        0,0,1439,155,1,0,0,0,1440,1441,5,104,0,0,1441,1442,5,367,0,0,1442,
        1443,5,105,0,0,1443,157,1,0,0,0,1444,1445,5,65,0,0,1445,1446,5,40,
        0,0,1446,1447,3,730,365,0,1447,1448,5,34,0,0,1448,1449,5,37,0,0,
        1449,1450,3,572,286,0,1450,1451,3,338,169,0,1451,1452,5,22,0,0,1452,
        1456,5,362,0,0,1453,1454,5,149,0,0,1454,1455,5,150,0,0,1455,1457,
        5,42,0,0,1456,1453,1,0,0,0,1456,1457,1,0,0,0,1457,1460,1,0,0,0,1458,
        1459,5,158,0,0,1459,1461,3,302,151,0,1460,1458,1,0,0,0,1460,1461,
        1,0,0,0,1461,1465,1,0,0,0,1462,1463,5,180,0,0,1463,1464,5,37,0,0,
        1464,1466,3,572,286,0,1465,1462,1,0,0,0,1465,1466,1,0,0,0,1466,1470,
        1,0,0,0,1467,1468,5,101,0,0,1468,1469,5,18,0,0,1469,1471,3,338,169,
        0,1470,1467,1,0,0,0,1470,1471,1,0,0,0,1471,1476,1,0,0,0,1472,1474,
        3,298,149,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,
        0,1475,1477,3,320,160,0,1476,1473,1,0,0,0,1476,1477,1,0,0,0,1477,
        1480,1,0,0,0,1478,1479,5,127,0,0,1479,1481,3,160,80,0,1480,1478,
        1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,0,0,1482,1484,3,300,150,
        0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1486,1,0,0,0,1485,1487,
        3,280,140,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,159,1,0,0,0,
        1488,1493,3,730,365,0,1489,1490,5,332,0,0,1490,1492,3,730,365,0,
        1491,1489,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,1494,
        1,0,0,0,1494,161,1,0,0,0,1495,1493,1,0,0,0,1496,1497,5,73,0,0,1497,
        1498,5,40,0,0,1498,1499,3,730,365,0,1499,1500,5,34,0,0,1500,1501,
        3,572,286,0,1501,163,1,0,0,0,1502,1504,3,572,286,0,1503,1505,3,716,
        358,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,165,1,0,0,0,1506,
        1507,5,5,0,0,1507,1508,5,311,0,0,1508,167,1,0,0,0,1509,1510,5,256,
        0,0,1510,1512,5,362,0,0,1511,1513,3,166,83,0,1512,1511,1,0,0,0,1512,
        1513,1,0,0,0,1513,1518,1,0,0,0,1514,1515,5,149,0,0,1515,1516,5,26,
        0,0,1516,1517,5,157,0,0,1517,1519,3,302,151,0,1518,1514,1,0,0,0,
        1518,1519,1,0,0,0,1519,169,1,0,0,0,1520,1521,5,155,0,0,1521,1522,
        5,254,0,0,1522,1523,3,238,119,0,1523,171,1,0,0,0,1524,1525,5,121,
        0,0,1525,1526,5,362,0,0,1526,1527,5,122,0,0,1527,1528,5,362,0,0,
        1528,1529,5,148,0,0,1529,1534,5,362,0,0,1530,1531,5,123,0,0,1531,
        1532,5,362,0,0,1532,1533,5,124,0,0,1533,1535,5,362,0,0,1534,1530,
        1,0,0,0,1534,1535,1,0,0,0,1535,1538,1,0,0,0,1536,1538,3,730,365,
        0,1537,1524,1,0,0,0,1537,1536,1,0,0,0,1538,173,1,0,0,0,1539,1540,
        5,121,0,0,1540,1541,5,362,0,0,1541,1542,5,148,0,0,1542,1543,5,362,
        0,0,1543,175,1,0,0,0,1544,1547,3,730,365,0,1545,1546,5,332,0,0,1546,
        1548,3,730,365,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,1562,1,
        0,0,0,1549,1559,3,730,365,0,1550,1555,5,332,0,0,1551,1556,5,160,
        0,0,1552,1556,5,116,0,0,1553,1556,5,159,0,0,1554,1556,3,730,365,
        0,1555,1551,1,0,0,0,1555,1552,1,0,0,0,1555,1553,1,0,0,0,1555,1554,
        1,0,0,0,1556,1558,1,0,0,0,1557,1550,1,0,0,0,1558,1561,1,0,0,0,1559,
        1557,1,0,0,0,1559,1560,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,
        0,1562,1549,1,0,0,0,1562,1563,1,0,0,0,1563,177,1,0,0,0,1564,1566,
        3,176,88,0,1565,1567,3,716,358,0,1566,1565,1,0,0,0,1566,1567,1,0,
        0,0,1567,179,1,0,0,0,1568,1570,3,572,286,0,1569,1571,3,716,358,0,
        1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,1573,1,0,0,0,1572,1574,
        3,334,167,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,181,1,0,0,0,
        1575,1589,7,4,0,0,1576,1578,7,2,0,0,1577,1579,5,144,0,0,1578,1577,
        1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1590,3,730,365,
        0,1581,1583,5,139,0,0,1582,1584,5,144,0,0,1583,1582,1,0,0,0,1583,
        1584,1,0,0,0,1584,1585,1,0,0,0,1585,1590,3,728,364,0,1586,1587,7,
        5,0,0,1587,1590,3,180,90,0,1588,1590,3,180,90,0,1589,1576,1,0,0,
        0,1589,1581,1,0,0,0,1589,1586,1,0,0,0,1589,1588,1,0,0,0,1590,183,
        1,0,0,0,1591,1592,5,202,0,0,1592,1593,5,37,0,0,1593,1606,3,714,357,
        0,1594,1595,5,218,0,0,1595,1602,5,219,0,0,1596,1603,5,245,0,0,1597,
        1598,5,231,0,0,1598,1600,5,39,0,0,1599,1601,3,330,165,0,1600,1599,
        1,0,0,0,1600,1601,1,0,0,0,1601,1603,1,0,0,0,1602,1596,1,0,0,0,1602,
        1597,1,0,0,0,1602,1603,1,0,0,0,1603,1607,1,0,0,0,1604,1605,5,286,
        0,0,1605,1607,5,60,0,0,1606,1594,1,0,0,0,1606,1604,1,0,0,0,1607,
        185,1,0,0,0,1608,1609,5,44,0,0,1609,1612,7,6,0,0,1610,1611,5,8,0,
        0,1611,1613,3,278,139,0,1612,1610,1,0,0,0,1612,1613,1,0,0,0,1613,
        1732,1,0,0,0,1614,1615,5,44,0,0,1615,1618,5,38,0,0,1616,1617,7,7,
        0,0,1617,1619,3,730,365,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,
        1623,1,0,0,0,1620,1621,5,8,0,0,1621,1624,3,278,139,0,1622,1624,3,
        278,139,0,1623,1620,1,0,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,
        1624,1732,1,0,0,0,1625,1626,5,44,0,0,1626,1629,5,179,0,0,1627,1628,
        7,7,0,0,1628,1630,3,730,365,0,1629,1627,1,0,0,0,1629,1630,1,0,0,
        0,1630,1634,1,0,0,0,1631,1632,5,8,0,0,1632,1635,3,278,139,0,1633,
        1635,3,278,139,0,1634,1631,1,0,0,0,1634,1633,1,0,0,0,1634,1635,1,
        0,0,0,1635,1732,1,0,0,0,1636,1637,5,44,0,0,1637,1638,5,183,0,0,1638,
        1641,5,179,0,0,1639,1640,7,7,0,0,1640,1642,3,730,365,0,1641,1639,
        1,0,0,0,1641,1642,1,0,0,0,1642,1646,1,0,0,0,1643,1644,5,8,0,0,1644,
        1647,3,278,139,0,1645,1647,3,278,139,0,1646,1643,1,0,0,0,1646,1645,
        1,0,0,0,1646,1647,1,0,0,0,1647,1732,1,0,0,0,1648,1649,5,44,0,0,1649,
        1650,5,39,0,0,1650,1651,7,7,0,0,1651,1654,3,572,286,0,1652,1653,
        7,7,0,0,1653,1655,3,730,365,0,1654,1652,1,0,0,0,1654,1655,1,0,0,
        0,1655,1659,1,0,0,0,1656,1657,5,8,0,0,1657,1660,3,278,139,0,1658,
        1660,3,278,139,0,1659,1656,1,0,0,0,1659,1658,1,0,0,0,1659,1660,1,
        0,0,0,1660,1732,1,0,0,0,1661,1662,5,44,0,0,1662,1666,5,43,0,0,1663,
        1664,5,8,0,0,1664,1667,3,276,138,0,1665,1667,3,276,138,0,1666,1663,
        1,0,0,0,1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,1732,1,0,0,0,1668,
        1669,5,44,0,0,1669,1670,5,36,0,0,1670,1672,3,572,286,0,1671,1673,
        3,716,358,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1732,1,0,0,
        0,1674,1675,5,44,0,0,1675,1680,5,65,0,0,1676,1677,7,2,0,0,1677,1681,
        3,730,365,0,1678,1679,5,37,0,0,1679,1681,3,572,286,0,1680,1676,1,
        0,0,0,1680,1678,1,0,0,0,1681,1732,1,0,0,0,1682,1683,5,44,0,0,1683,
        1684,5,37,0,0,1684,1687,5,144,0,0,1685,1686,7,7,0,0,1686,1688,3,
        730,365,0,1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,
        1689,1690,5,8,0,0,1690,1692,3,278,139,0,1691,1693,3,716,358,0,1692,
        1691,1,0,0,0,1692,1693,1,0,0,0,1693,1732,1,0,0,0,1694,1695,5,44,
        0,0,1695,1696,5,157,0,0,1696,1700,3,572,286,0,1697,1698,5,336,0,
        0,1698,1699,5,362,0,0,1699,1701,5,337,0,0,1700,1697,1,0,0,0,1700,
        1701,1,0,0,0,1701,1732,1,0,0,0,1702,1703,5,44,0,0,1703,1715,5,191,
        0,0,1704,1705,7,2,0,0,1705,1707,3,730,365,0,1706,1708,5,144,0,0,
        1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1716,1,0,0,0,1709,1711,
        3,178,89,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,0,
        1712,1714,5,144,0,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,1716,
        1,0,0,0,1715,1704,1,0,0,0,1715,1710,1,0,0,0,1716,1732,1,0,0,0,1717,
        1718,5,44,0,0,1718,1732,5,257,0,0,1719,1720,5,44,0,0,1720,1732,5,
        258,0,0,1721,1722,5,44,0,0,1722,1723,5,262,0,0,1723,1732,5,362,0,
        0,1724,1725,5,44,0,0,1725,1729,5,312,0,0,1726,1727,5,313,0,0,1727,
        1730,3,730,365,0,1728,1730,5,315,0,0,1729,1726,1,0,0,0,1729,1728,
        1,0,0,0,1730,1732,1,0,0,0,1731,1608,1,0,0,0,1731,1614,1,0,0,0,1731,
        1625,1,0,0,0,1731,1636,1,0,0,0,1731,1648,1,0,0,0,1731,1661,1,0,0,
        0,1731,1668,1,0,0,0,1731,1674,1,0,0,0,1731,1682,1,0,0,0,1731,1694,
        1,0,0,0,1731,1702,1,0,0,0,1731,1717,1,0,0,0,1731,1719,1,0,0,0,1731,
        1721,1,0,0,0,1731,1724,1,0,0,0,1732,187,1,0,0,0,1733,1734,5,190,
        0,0,1734,1735,5,37,0,0,1735,1737,3,572,286,0,1736,1738,3,716,358,
        0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1740,
        3,192,96,0,1740,189,1,0,0,0,1741,1742,5,190,0,0,1742,1743,7,2,0,
        0,1743,1744,3,730,365,0,1744,1745,3,192,96,0,1745,191,1,0,0,0,1746,
        1747,7,8,0,0,1747,193,1,0,0,0,1748,1749,5,192,0,0,1749,1750,5,37,
        0,0,1750,1752,3,572,286,0,1751,1753,3,716,358,0,1752,1751,1,0,0,
        0,1752,1753,1,0,0,0,1753,195,1,0,0,0,1754,1755,5,192,0,0,1755,1756,
        7,2,0,0,1756,1757,3,730,365,0,1757,197,1,0,0,0,1758,1759,5,65,0,
        0,1759,1760,5,247,0,0,1760,1761,3,730,365,0,1761,199,1,0,0,0,1762,
        1763,5,73,0,0,1763,1764,5,247,0,0,1764,1765,3,730,365,0,1765,201,
        1,0,0,0,1766,1767,5,186,0,0,1767,1769,3,230,115,0,1768,1770,3,224,
        112,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,
        1772,5,75,0,0,1772,1774,3,236,118,0,1773,1775,3,240,120,0,1774,1773,
        1,0,0,0,1774,1775,1,0,0,0,1775,203,1,0,0,0,1776,1778,5,187,0,0,1777,
        1779,3,242,121,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,
        0,0,0,1780,1782,3,230,115,0,1781,1783,3,224,112,0,1782,1781,1,0,
        0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,1785,5,21,0,0,1785,
        1786,3,236,118,0,1786,205,1,0,0,0,1787,1789,5,186,0,0,1788,1790,
        5,247,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,
        1791,1796,3,730,365,0,1792,1793,5,334,0,0,1793,1795,3,730,365,0,
        1794,1792,1,0,0,0,1795,1798,1,0,0,0,1796,1794,1,0,0,0,1796,1797,
        1,0,0,0,1797,1799,1,0,0,0,1798,1796,1,0,0,0,1799,1800,5,75,0,0,1800,
        1802,3,236,118,0,1801,1803,3,246,123,0,1802,1801,1,0,0,0,1802,1803,
        1,0,0,0,1803,207,1,0,0,0,1804,1806,5,187,0,0,1805,1807,3,244,122,
        0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1809,1,0,0,0,1808,1810,
        5,247,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,
        1811,1816,3,730,365,0,1812,1813,5,334,0,0,1813,1815,3,730,365,0,
        1814,1812,1,0,0,0,1815,1818,1,0,0,0,1816,1814,1,0,0,0,1816,1817,
        1,0,0,0,1817,1819,1,0,0,0,1818,1816,1,0,0,0,1819,1820,5,21,0,0,1820,
        1821,3,236,118,0,1821,209,1,0,0,0,1822,1823,5,44,0,0,1823,1824,5,
        247,0,0,1824,1825,5,186,0,0,1825,1826,3,238,119,0,1826,211,1,0,0,
        0,1827,1828,5,44,0,0,1828,1829,5,248,0,0,1829,213,1,0,0,0,1830,1831,
        5,44,0,0,1831,1832,5,236,0,0,1832,1833,5,248,0,0,1833,215,1,0,0,
        0,1834,1835,5,155,0,0,1835,1839,5,247,0,0,1836,1840,5,3,0,0,1837,
        1840,5,4,0,0,1838,1840,3,730,365,0,1839,1836,1,0,0,0,1839,1837,1,
        0,0,0,1839,1838,1,0,0,0,1840,217,1,0,0,0,1841,1842,5,44,0,0,1842,
        1844,5,186,0,0,1843,1845,3,238,119,0,1844,1843,1,0,0,0,1844,1845,
        1,0,0,0,1845,1848,1,0,0,0,1846,1847,5,34,0,0,1847,1849,3,222,111,
        0,1848,1846,1,0,0,0,1848,1849,1,0,0,0,1849,219,1,0,0,0,1850,1851,
        5,44,0,0,1851,1852,5,255,0,0,1852,1853,3,730,365,0,1853,221,1,0,
        0,0,1854,1857,5,3,0,0,1855,1857,3,228,114,0,1856,1854,1,0,0,0,1856,
        1855,1,0,0,0,1857,223,1,0,0,0,1858,1859,5,34,0,0,1859,1860,3,226,
        113,0,1860,225,1,0,0,0,1861,1862,7,2,0,0,1862,1875,3,730,365,0,1863,
        1865,5,37,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,
        0,0,1866,1868,3,572,286,0,1867,1869,3,716,358,0,1868,1867,1,0,0,
        0,1868,1869,1,0,0,0,1869,1875,1,0,0,0,1870,1871,5,251,0,0,1871,1875,
        5,362,0,0,1872,1873,5,252,0,0,1873,1875,3,730,365,0,1874,1861,1,
        0,0,0,1874,1864,1,0,0,0,1874,1870,1,0,0,0,1874,1872,1,0,0,0,1875,
        227,1,0,0,0,1876,1877,7,2,0,0,1877,1896,3,730,365,0,1878,1880,5,
        37,0,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,
        1886,3,572,286,0,1882,1883,5,336,0,0,1883,1884,3,330,165,0,1884,
        1885,5,337,0,0,1885,1887,1,0,0,0,1886,1882,1,0,0,0,1886,1887,1,0,
        0,0,1887,1889,1,0,0,0,1888,1890,3,716,358,0,1889,1888,1,0,0,0,1889,
        1890,1,0,0,0,1890,1896,1,0,0,0,1891,1892,5,251,0,0,1892,1896,5,362,
        0,0,1893,1894,5,252,0,0,1894,1896,3,730,365,0,1895,1876,1,0,0,0,
        1895,1879,1,0,0,0,1895,1891,1,0,0,0,1895,1893,1,0,0,0,1896,229,1,
        0,0,0,1897,1902,3,232,116,0,1898,1899,5,334,0,0,1899,1901,3,232,
        116,0,1900,1898,1,0,0,0,1901,1904,1,0,0,0,1902,1900,1,0,0,0,1902,
        1903,1,0,0,0,1903,231,1,0,0,0,1904,1902,1,0,0,0,1905,1910,3,234,
        117,0,1906,1907,5,336,0,0,1907,1908,3,330,165,0,1908,1909,5,337,
        0,0,1909,1911,1,0,0,0,1910,1906,1,0,0,0,1910,1911,1,0,0,0,1911,233,
        1,0,0,0,1912,1913,7,9,0,0,1913,235,1,0,0,0,1914,1919,3,238,119,0,
        1915,1916,5,334,0,0,1916,1918,3,238,119,0,1917,1915,1,0,0,0,1918,
        1921,1,0,0,0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,237,1,0,0,
        0,1921,1919,1,0,0,0,1922,1923,5,246,0,0,1923,1929,3,734,367,0,1924,
        1925,5,17,0,0,1925,1929,3,734,367,0,1926,1927,5,247,0,0,1927,1929,
        3,730,365,0,1928,1922,1,0,0,0,1928,1924,1,0,0,0,1928,1926,1,0,0,
        0,1929,239,1,0,0,0,1930,1931,5,149,0,0,1931,1932,5,186,0,0,1932,
        1933,5,221,0,0,1933,241,1,0,0,0,1934,1935,5,186,0,0,1935,1936,5,
        221,0,0,1936,1937,5,231,0,0,1937,243,1,0,0,0,1938,1939,5,253,0,0,
        1939,1940,5,221,0,0,1940,1941,5,231,0,0,1941,245,1,0,0,0,1942,1943,
        5,149,0,0,1943,1944,5,253,0,0,1944,1945,5,221,0,0,1945,247,1,0,0,
        0,1946,1948,5,45,0,0,1947,1949,5,46,0,0,1948,1947,1,0,0,0,1948,1949,
        1,0,0,0,1949,1959,1,0,0,0,1950,1951,5,37,0,0,1951,1954,3,572,286,
        0,1952,1953,7,10,0,0,1953,1955,5,36,0,0,1954,1952,1,0,0,0,1954,1955,
        1,0,0,0,1955,1960,1,0,0,0,1956,1958,3,716,358,0,1957,1956,1,0,0,
        0,1957,1958,1,0,0,0,1958,1960,1,0,0,0,1959,1950,1,0,0,0,1959,1957,
        1,0,0,0,1960,249,1,0,0,0,1961,1966,3,252,126,0,1962,1963,5,334,0,
        0,1963,1965,3,252,126,0,1964,1962,1,0,0,0,1965,1968,1,0,0,0,1966,
        1964,1,0,0,0,1966,1967,1,0,0,0,1967,251,1,0,0,0,1968,1966,1,0,0,
        0,1969,1970,3,254,127,0,1970,1971,5,362,0,0,1971,253,1,0,0,0,1972,
        1973,7,11,0,0,1973,255,1,0,0,0,1974,1976,5,65,0,0,1975,1977,5,138,
        0,0,1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,1978,1,0,0,0,1978,1979,
        5,139,0,0,1979,1980,3,732,366,0,1980,1981,5,22,0,0,1981,1984,5,362,
        0,0,1982,1983,5,50,0,0,1983,1985,3,250,125,0,1984,1982,1,0,0,0,1984,
        1985,1,0,0,0,1985,257,1,0,0,0,1986,1988,5,73,0,0,1987,1989,5,138,
        0,0,1988,1987,1,0,0,0,1988,1989,1,0,0,0,1989,1990,1,0,0,0,1990,1992,
        5,139,0,0,1991,1993,3,36,18,0,1992,1991,1,0,0,0,1992,1993,1,0,0,
        0,1993,1994,1,0,0,0,1994,1995,3,732,366,0,1995,259,1,0,0,0,1996,
        1997,5,264,0,0,1997,1998,5,139,0,0,1998,261,1,0,0,0,1999,2000,5,
        65,0,0,2000,2001,5,138,0,0,2001,2002,5,140,0,0,2002,2003,5,368,0,
        0,2003,2005,5,336,0,0,2004,2006,3,324,162,0,2005,2004,1,0,0,0,2005,
        2006,1,0,0,0,2006,2007,1,0,0,0,2007,2008,5,337,0,0,2008,2009,3,702,
        351,0,2009,263,1,0,0,0,2010,2011,5,73,0,0,2011,2012,5,138,0,0,2012,
        2014,5,140,0,0,2013,2015,3,36,18,0,2014,2013,1,0,0,0,2014,2015,1,
        0,0,0,2015,2016,1,0,0,0,2016,2017,5,368,0,0,2017,265,1,0,0,0,2018,
        2020,5,65,0,0,2019,2021,3,48,24,0,2020,2019,1,0,0,0,2020,2021,1,
        0,0,0,2021,2022,1,0,0,0,2022,2024,5,178,0,0,2023,2025,3,40,20,0,
        2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,2026,1,0,0,0,2026,2031,
        3,572,286,0,2027,2028,5,336,0,0,2028,2029,3,378,189,0,2029,2030,
        5,337,0,0,2030,2032,1,0,0,0,2031,2027,1,0,0,0,2031,2032,1,0,0,0,
        2032,2034,1,0,0,0,2033,2035,3,280,140,0,2034,2033,1,0,0,0,2034,2035,
        1,0,0,0,2035,2037,1,0,0,0,2036,2038,3,270,135,0,2037,2036,1,0,0,
        0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2041,3,300,150,0,2040,
        2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2043,5,22,
        0,0,2043,2044,3,450,225,0,2044,267,1,0,0,0,2045,2046,5,65,0,0,2046,
        2047,5,183,0,0,2047,2049,5,178,0,0,2048,2050,3,40,20,0,2049,2048,
        1,0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2053,3,572,286,
        0,2052,2054,3,44,22,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2056,
        1,0,0,0,2055,2057,3,280,140,0,2056,2055,1,0,0,0,2056,2057,1,0,0,
        0,2057,2059,1,0,0,0,2058,2060,3,298,149,0,2059,2058,1,0,0,0,2059,
        2060,1,0,0,0,2060,2062,1,0,0,0,2061,2063,3,320,160,0,2062,2061,1,
        0,0,0,2062,2063,1,0,0,0,2063,2065,1,0,0,0,2064,2066,3,322,161,0,
        2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,2068,1,0,0,0,2067,2069,
        3,300,150,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,2070,1,0,0,
        0,2070,2071,5,22,0,0,2071,2072,3,450,225,0,2072,269,1,0,0,0,2073,
        2074,5,101,0,0,2074,2075,5,34,0,0,2075,2076,5,336,0,0,2076,2077,
        3,330,165,0,2077,2078,5,337,0,0,2078,271,1,0,0,0,2079,2080,5,73,
        0,0,2080,2082,5,178,0,0,2081,2083,3,36,18,0,2082,2081,1,0,0,0,2082,
        2083,1,0,0,0,2083,2084,1,0,0,0,2084,2085,3,574,287,0,2085,273,1,
        0,0,0,2086,2087,5,73,0,0,2087,2088,5,183,0,0,2088,2090,5,178,0,0,
        2089,2091,3,36,18,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,
        1,0,0,0,2092,2093,3,574,287,0,2093,275,1,0,0,0,2094,2097,3,732,366,
        0,2095,2097,5,362,0,0,2096,2094,1,0,0,0,2096,2095,1,0,0,0,2097,277,
        1,0,0,0,2098,2101,3,730,365,0,2099,2101,5,362,0,0,2100,2098,1,0,
        0,0,2100,2099,1,0,0,0,2101,279,1,0,0,0,2102,2103,5,76,0,0,2103,2104,
        5,362,0,0,2104,281,1,0,0,0,2105,2106,5,101,0,0,2106,2107,5,18,0,
        0,2107,2108,5,336,0,0,2108,2113,3,390,195,0,2109,2110,5,334,0,0,
        2110,2112,3,390,195,0,2111,2109,1,0,0,0,2112,2115,1,0,0,0,2113,2111,
        1,0,0,0,2113,2114,1,0,0,0,2114,2116,1,0,0,0,2115,2113,1,0,0,0,2116,
        2117,5,337,0,0,2117,283,1,0,0,0,2118,2119,5,102,0,0,2119,2120,5,
        18,0,0,2120,2121,5,336,0,0,2121,2122,3,330,165,0,2122,2129,5,337,
        0,0,2123,2124,5,103,0,0,2124,2125,5,18,0,0,2125,2126,5,336,0,0,2126,
        2127,3,336,168,0,2127,2128,5,337,0,0,2128,2130,1,0,0,0,2129,2123,
        1,0,0,0,2129,2130,1,0,0,0,2130,2131,1,0,0,0,2131,2132,5,104,0,0,
        2132,2133,5,367,0,0,2133,2134,5,105,0,0,2134,285,1,0,0,0,2135,2136,
        5,227,0,0,2136,2137,5,18,0,0,2137,2138,5,336,0,0,2138,2139,3,330,
        165,0,2139,2140,5,337,0,0,2140,2141,5,34,0,0,2141,2142,5,336,0,0,
        2142,2143,3,360,180,0,2143,2145,5,337,0,0,2144,2146,3,46,23,0,2145,
        2144,1,0,0,0,2145,2146,1,0,0,0,2146,287,1,0,0,0,2147,2150,3,294,
        147,0,2148,2150,3,296,148,0,2149,2147,1,0,0,0,2149,2148,1,0,0,0,
        2150,289,1,0,0,0,2151,2152,5,211,0,0,2152,2153,5,362,0,0,2153,291,
        1,0,0,0,2154,2155,5,212,0,0,2155,2156,5,362,0,0,2156,293,1,0,0,0,
        2157,2158,5,106,0,0,2158,2159,5,108,0,0,2159,2160,5,148,0,0,2160,
        2164,5,362,0,0,2161,2162,5,149,0,0,2162,2163,5,151,0,0,2163,2165,
        3,302,151,0,2164,2161,1,0,0,0,2164,2165,1,0,0,0,2165,295,1,0,0,0,
        2166,2167,5,106,0,0,2167,2168,5,108,0,0,2168,2170,5,109,0,0,2169,
        2171,3,310,155,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2173,1,
        0,0,0,2172,2174,3,312,156,0,2173,2172,1,0,0,0,2173,2174,1,0,0,0,
        2174,2176,1,0,0,0,2175,2177,3,314,157,0,2176,2175,1,0,0,0,2176,2177,
        1,0,0,0,2177,2179,1,0,0,0,2178,2180,3,316,158,0,2179,2178,1,0,0,
        0,2179,2180,1,0,0,0,2180,2182,1,0,0,0,2181,2183,3,318,159,0,2182,
        2181,1,0,0,0,2182,2183,1,0,0,0,2183,297,1,0,0,0,2184,2187,3,296,
        148,0,2185,2187,3,294,147,0,2186,2184,1,0,0,0,2186,2185,1,0,0,0,
        2187,299,1,0,0,0,2188,2189,5,157,0,0,2189,2190,3,302,151,0,2190,
        301,1,0,0,0,2191,2192,5,336,0,0,2192,2193,3,304,152,0,2193,2194,
        5,337,0,0,2194,303,1,0,0,0,2195,2200,3,306,153,0,2196,2197,5,334,
        0,0,2197,2199,3,306,153,0,2198,2196,1,0,0,0,2199,2202,1,0,0,0,2200,
        2198,1,0,0,0,2200,2201,1,0,0,0,2201,2212,1,0,0,0,2202,2200,1,0,0,
        0,2203,2208,3,308,154,0,2204,2205,5,334,0,0,2205,2207,3,308,154,
        0,2206,2204,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2208,2209,
        1,0,0,0,2209,2212,1,0,0,0,2210,2208,1,0,0,0,2211,2195,1,0,0,0,2211,
        2203,1,0,0,0,2212,305,1,0,0,0,2213,2214,5,362,0,0,2214,2215,5,342,
        0,0,2215,2216,5,362,0,0,2216,307,1,0,0,0,2217,2218,5,362,0,0,2218,
        309,1,0,0,0,2219,2220,5,110,0,0,2220,2221,5,111,0,0,2221,2222,5,
        18,0,0,2222,2226,5,362,0,0,2223,2224,5,112,0,0,2224,2225,5,18,0,
        0,2225,2227,5,362,0,0,2226,2223,1,0,0,0,2226,2227,1,0,0,0,2227,311,
        1,0,0,0,2228,2229,5,113,0,0,2229,2230,5,114,0,0,2230,2231,5,111,
        0,0,2231,2232,5,18,0,0,2232,2233,5,362,0,0,2233,313,1,0,0,0,2234,
        2235,5,98,0,0,2235,2236,5,115,0,0,2236,2237,5,111,0,0,2237,2238,
        5,18,0,0,2238,2239,5,362,0,0,2239,315,1,0,0,0,2240,2241,5,118,0,
        0,2241,2242,5,111,0,0,2242,2243,5,18,0,0,2243,2244,5,362,0,0,2244,
        317,1,0,0,0,2245,2246,5,64,0,0,2246,2247,5,161,0,0,2247,2248,5,22,
        0,0,2248,2249,5,362,0,0,2249,319,1,0,0,0,2250,2251,5,119,0,0,2251,
        2252,5,22,0,0,2252,2253,5,121,0,0,2253,2254,5,362,0,0,2254,2255,
        5,122,0,0,2255,2260,5,362,0,0,2256,2257,5,123,0,0,2257,2258,5,362,
        0,0,2258,2259,5,124,0,0,2259,2261,5,362,0,0,2260,2256,1,0,0,0,2260,
        2261,1,0,0,0,2261,2274,1,0,0,0,2262,2263,5,119,0,0,2263,2264,5,18,
        0,0,2264,2268,5,362,0,0,2265,2266,5,149,0,0,2266,2267,5,151,0,0,
        2267,2269,3,302,151,0,2268,2265,1,0,0,0,2268,2269,1,0,0,0,2269,2274,
        1,0,0,0,2270,2271,5,119,0,0,2271,2272,5,22,0,0,2272,2274,3,730,365,
        0,2273,2250,1,0,0,0,2273,2262,1,0,0,0,2273,2270,1,0,0,0,2274,321,
        1,0,0,0,2275,2276,5,127,0,0,2276,2277,5,362,0,0,2277,323,1,0,0,0,
        2278,2283,3,384,192,0,2279,2280,5,334,0,0,2280,2282,3,384,192,0,
        2281,2279,1,0,0,0,2282,2285,1,0,0,0,2283,2281,1,0,0,0,2283,2284,
        1,0,0,0,2284,325,1,0,0,0,2285,2283,1,0,0,0,2286,2291,3,386,193,0,
        2287,2288,5,334,0,0,2288,2290,3,386,193,0,2289,2287,1,0,0,0,2290,
        2293,1,0,0,0,2291,2289,1,0,0,0,2291,2292,1,0,0,0,2292,327,1,0,0,
        0,2293,2291,1,0,0,0,2294,2299,3,410,205,0,2295,2296,5,334,0,0,2296,
        2298,3,410,205,0,2297,2295,1,0,0,0,2298,2301,1,0,0,0,2299,2297,1,
        0,0,0,2299,2300,1,0,0,0,2300,329,1,0,0,0,2301,2299,1,0,0,0,2302,
        2307,3,332,166,0,2303,2304,5,334,0,0,2304,2306,3,332,166,0,2305,
        2303,1,0,0,0,2306,2309,1,0,0,0,2307,2305,1,0,0,0,2307,2308,1,0,0,
        0,2308,331,1,0,0,0,2309,2307,1,0,0,0,2310,2311,3,730,365,0,2311,
        333,1,0,0,0,2312,2322,3,730,365,0,2313,2318,5,332,0,0,2314,2319,
        5,160,0,0,2315,2319,5,116,0,0,2316,2319,5,159,0,0,2317,2319,3,730,
        365,0,2318,2314,1,0,0,0,2318,2315,1,0,0,0,2318,2316,1,0,0,0,2318,
        2317,1,0,0,0,2319,2321,1,0,0,0,2320,2313,1,0,0,0,2321,2324,1,0,0,
        0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,335,1,0,0,0,2324,2322,
        1,0,0,0,2325,2330,3,376,188,0,2326,2327,5,334,0,0,2327,2329,3,376,
        188,0,2328,2326,1,0,0,0,2329,2332,1,0,0,0,2330,2328,1,0,0,0,2330,
        2331,1,0,0,0,2331,337,1,0,0,0,2332,2330,1,0,0,0,2333,2334,5,336,
        0,0,2334,2335,3,330,165,0,2335,2336,5,337,0,0,2336,339,1,0,0,0,2337,
        2339,3,342,171,0,2338,2340,3,344,172,0,2339,2338,1,0,0,0,2339,2340,
        1,0,0,0,2340,2343,1,0,0,0,2341,2343,3,346,173,0,2342,2337,1,0,0,
        0,2342,2341,1,0,0,0,2343,341,1,0,0,0,2344,2345,7,12,0,0,2345,343,
        1,0,0,0,2346,2347,7,13,0,0,2347,345,1,0,0,0,2348,2352,5,291,0,0,
        2349,2350,5,7,0,0,2350,2352,5,291,0,0,2351,2348,1,0,0,0,2351,2349,
        1,0,0,0,2352,347,1,0,0,0,2353,2358,5,294,0,0,2354,2356,5,295,0,0,
        2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,2358,1,0,0,0,2357,2353,
        1,0,0,0,2357,2355,1,0,0,0,2358,349,1,0,0,0,2359,2360,5,290,0,0,2360,
        2362,3,730,365,0,2361,2359,1,0,0,0,2361,2362,1,0,0,0,2362,2363,1,
        0,0,0,2363,2365,3,354,177,0,2364,2366,3,406,203,0,2365,2364,1,0,
        0,0,2365,2366,1,0,0,0,2366,351,1,0,0,0,2367,2368,5,290,0,0,2368,
        2369,3,730,365,0,2369,2371,3,354,177,0,2370,2372,3,408,204,0,2371,
        2370,1,0,0,0,2371,2372,1,0,0,0,2372,353,1,0,0,0,2373,2374,3,404,
        202,0,2374,2375,3,338,169,0,2375,355,1,0,0,0,2376,2377,5,290,0,0,
        2377,2379,3,730,365,0,2378,2376,1,0,0,0,2378,2379,1,0,0,0,2379,2380,
        1,0,0,0,2380,2381,5,288,0,0,2381,2382,5,297,0,0,2382,2383,3,338,
        169,0,2383,2384,5,289,0,0,2384,2385,3,572,286,0,2385,2387,3,338,
        169,0,2386,2388,3,406,203,0,2387,2386,1,0,0,0,2387,2388,1,0,0,0,
        2388,357,1,0,0,0,2389,2390,5,290,0,0,2390,2391,3,730,365,0,2391,
        2392,5,288,0,0,2392,2393,5,297,0,0,2393,2394,3,338,169,0,2394,2395,
        5,289,0,0,2395,2396,3,572,286,0,2396,2398,3,338,169,0,2397,2399,
        3,408,204,0,2398,2397,1,0,0,0,2398,2399,1,0,0,0,2399,359,1,0,0,0,
        2400,2403,3,366,183,0,2401,2403,3,362,181,0,2402,2400,1,0,0,0,2402,
        2401,1,0,0,0,2403,361,1,0,0,0,2404,2409,3,364,182,0,2405,2406,5,
        334,0,0,2406,2408,3,364,182,0,2407,2405,1,0,0,0,2408,2411,1,0,0,
        0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,2410,363,1,0,0,0,2411,2409,
        1,0,0,0,2412,2413,5,336,0,0,2413,2414,3,366,183,0,2414,2415,5,337,
        0,0,2415,365,1,0,0,0,2416,2421,3,368,184,0,2417,2418,5,334,0,0,2418,
        2420,3,368,184,0,2419,2417,1,0,0,0,2420,2423,1,0,0,0,2421,2419,1,
        0,0,0,2421,2422,1,0,0,0,2422,367,1,0,0,0,2423,2421,1,0,0,0,2424,
        2425,3,656,328,0,2425,369,1,0,0,0,2426,2429,3,368,184,0,2427,2429,
        3,364,182,0,2428,2426,1,0,0,0,2428,2427,1,0,0,0,2429,371,1,0,0,0,
        2430,2431,7,14,0,0,2431,373,1,0,0,0,2432,2433,5,14,0,0,2433,2437,
        5,70,0,0,2434,2435,5,14,0,0,2435,2437,5,15,0,0,2436,2432,1,0,0,0,
        2436,2434,1,0,0,0,2437,375,1,0,0,0,2438,2440,3,730,365,0,2439,2441,
        3,372,186,0,2440,2439,1,0,0,0,2440,2441,1,0,0,0,2441,2443,1,0,0,
        0,2442,2444,3,374,187,0,2443,2442,1,0,0,0,2443,2444,1,0,0,0,2444,
        377,1,0,0,0,2445,2450,3,380,190,0,2446,2447,5,334,0,0,2447,2449,
        3,380,190,0,2448,2446,1,0,0,0,2449,2452,1,0,0,0,2450,2448,1,0,0,
        0,2450,2451,1,0,0,0,2451,379,1,0,0,0,2452,2450,1,0,0,0,2453,2456,
        3,730,365,0,2454,2455,5,76,0,0,2455,2457,5,362,0,0,2456,2454,1,0,
        0,0,2456,2457,1,0,0,0,2457,381,1,0,0,0,2458,2460,3,702,351,0,2459,
        2461,3,372,186,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,2461,2463,1,
        0,0,0,2462,2464,3,374,187,0,2463,2462,1,0,0,0,2463,2464,1,0,0,0,
        2464,383,1,0,0,0,2465,2466,3,730,365,0,2466,2469,3,412,206,0,2467,
        2468,5,76,0,0,2468,2470,5,362,0,0,2469,2467,1,0,0,0,2469,2470,1,
        0,0,0,2470,385,1,0,0,0,2471,2474,3,388,194,0,2472,2474,3,390,195,
        0,2473,2471,1,0,0,0,2473,2472,1,0,0,0,2474,387,1,0,0,0,2475,2478,
        3,356,178,0,2476,2478,3,350,175,0,2477,2475,1,0,0,0,2477,2476,1,
        0,0,0,2478,389,1,0,0,0,2479,2480,3,730,365,0,2480,2482,3,412,206,
        0,2481,2483,3,392,196,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,
        2486,1,0,0,0,2484,2485,5,76,0,0,2485,2487,5,362,0,0,2486,2484,1,
        0,0,0,2486,2487,1,0,0,0,2487,391,1,0,0,0,2488,2491,3,394,197,0,2489,
        2491,3,396,198,0,2490,2488,1,0,0,0,2490,2489,1,0,0,0,2491,393,1,
        0,0,0,2492,2493,5,290,0,0,2493,2495,3,730,365,0,2494,2492,1,0,0,
        0,2494,2495,1,0,0,0,2495,2496,1,0,0,0,2496,2497,5,289,0,0,2497,2498,
        3,572,286,0,2498,2499,5,336,0,0,2499,2500,3,332,166,0,2500,2502,
        5,337,0,0,2501,2503,3,406,203,0,2502,2501,1,0,0,0,2502,2503,1,0,
        0,0,2503,395,1,0,0,0,2504,2505,5,290,0,0,2505,2507,3,730,365,0,2506,
        2504,1,0,0,0,2506,2507,1,0,0,0,2507,2508,1,0,0,0,2508,2510,3,404,
        202,0,2509,2511,3,406,203,0,2510,2509,1,0,0,0,2510,2511,1,0,0,0,
        2511,397,1,0,0,0,2512,2515,3,400,200,0,2513,2515,3,402,201,0,2514,
        2512,1,0,0,0,2514,2513,1,0,0,0,2515,399,1,0,0,0,2516,2517,5,290,
        0,0,2517,2519,3,730,365,0,2518,2516,1,0,0,0,2518,2519,1,0,0,0,2519,
        2520,1,0,0,0,2520,2521,5,289,0,0,2521,2522,3,572,286,0,2522,2523,
        5,336,0,0,2523,2524,3,332,166,0,2524,2526,5,337,0,0,2525,2527,3,
        408,204,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,401,1,0,0,0,2528,
        2529,5,290,0,0,2529,2531,3,730,365,0,2530,2528,1,0,0,0,2530,2531,
        1,0,0,0,2531,2532,1,0,0,0,2532,2534,3,404,202,0,2533,2535,3,408,
        204,0,2534,2533,1,0,0,0,2534,2535,1,0,0,0,2535,403,1,0,0,0,2536,
        2537,5,287,0,0,2537,2538,5,297,0,0,2538,405,1,0,0,0,2539,2540,3,
        340,170,0,2540,2541,3,348,174,0,2541,407,1,0,0,0,2542,2543,3,340,
        170,0,2543,2544,3,348,174,0,2544,409,1,0,0,0,2545,2546,3,730,365,
        0,2546,2547,5,333,0,0,2547,2550,3,412,206,0,2548,2549,5,76,0,0,2549,
        2551,5,362,0,0,2550,2548,1,0,0,0,2550,2551,1,0,0,0,2551,411,1,0,
        0,0,2552,2553,3,416,208,0,2553,413,1,0,0,0,2554,2559,3,412,206,0,
        2555,2556,5,334,0,0,2556,2558,3,412,206,0,2557,2555,1,0,0,0,2558,
        2561,1,0,0,0,2559,2557,1,0,0,0,2559,2560,1,0,0,0,2560,415,1,0,0,
        0,2561,2559,1,0,0,0,2562,2568,3,418,209,0,2563,2568,3,420,210,0,
        2564,2568,3,422,211,0,2565,2568,3,424,212,0,2566,2568,3,426,213,
        0,2567,2562,1,0,0,0,2567,2563,1,0,0,0,2567,2564,1,0,0,0,2567,2565,
        1,0,0,0,2567,2566,1,0,0,0,2568,417,1,0,0,0,2569,2609,5,78,0,0,2570,
        2609,5,79,0,0,2571,2609,5,80,0,0,2572,2609,5,81,0,0,2573,2609,5,
        77,0,0,2574,2609,5,82,0,0,2575,2577,5,83,0,0,2576,2578,5,84,0,0,
        2577,2576,1,0,0,0,2577,2578,1,0,0,0,2578,2609,1,0,0,0,2579,2609,
        5,85,0,0,2580,2609,5,86,0,0,2581,2609,5,87,0,0,2582,2609,5,88,0,
        0,2583,2584,5,87,0,0,2584,2585,5,149,0,0,2585,2586,5,48,0,0,2586,
        2587,5,89,0,0,2587,2609,5,90,0,0,2588,2609,5,93,0,0,2589,2609,5,
        206,0,0,2590,2598,5,92,0,0,2591,2592,5,336,0,0,2592,2595,5,367,0,
        0,2593,2594,5,334,0,0,2594,2596,5,367,0,0,2595,2593,1,0,0,0,2595,
        2596,1,0,0,0,2596,2597,1,0,0,0,2597,2599,5,337,0,0,2598,2591,1,0,
        0,0,2598,2599,1,0,0,0,2599,2609,1,0,0,0,2600,2601,5,95,0,0,2601,
        2602,5,336,0,0,2602,2603,5,367,0,0,2603,2609,5,337,0,0,2604,2605,
        5,94,0,0,2605,2606,5,336,0,0,2606,2607,5,367,0,0,2607,2609,5,337,
        0,0,2608,2569,1,0,0,0,2608,2570,1,0,0,0,2608,2571,1,0,0,0,2608,2572,
        1,0,0,0,2608,2573,1,0,0,0,2608,2574,1,0,0,0,2608,2575,1,0,0,0,2608,
        2579,1,0,0,0,2608,2580,1,0,0,0,2608,2581,1,0,0,0,2608,2582,1,0,0,
        0,2608,2583,1,0,0,0,2608,2588,1,0,0,0,2608,2589,1,0,0,0,2608,2590,
        1,0,0,0,2608,2600,1,0,0,0,2608,2604,1,0,0,0,2609,419,1,0,0,0,2610,
        2611,5,96,0,0,2611,2612,5,346,0,0,2612,2613,3,416,208,0,2613,2614,
        5,348,0,0,2614,421,1,0,0,0,2615,2616,5,97,0,0,2616,2617,5,346,0,
        0,2617,2618,3,328,164,0,2618,2619,5,348,0,0,2619,423,1,0,0,0,2620,
        2621,5,98,0,0,2621,2622,5,346,0,0,2622,2623,3,418,209,0,2623,2624,
        5,334,0,0,2624,2625,3,416,208,0,2625,2626,5,348,0,0,2626,425,1,0,
        0,0,2627,2628,5,99,0,0,2628,2629,5,346,0,0,2629,2630,3,414,207,0,
        2630,2631,5,348,0,0,2631,427,1,0,0,0,2632,2633,5,54,0,0,2633,2657,
        5,3,0,0,2634,2636,5,54,0,0,2635,2637,5,24,0,0,2636,2635,1,0,0,0,
        2636,2637,1,0,0,0,2637,2657,1,0,0,0,2638,2639,5,177,0,0,2639,2657,
        5,3,0,0,2640,2642,5,177,0,0,2641,2643,5,24,0,0,2642,2641,1,0,0,0,
        2642,2643,1,0,0,0,2643,2657,1,0,0,0,2644,2645,5,55,0,0,2645,2657,
        5,3,0,0,2646,2648,5,55,0,0,2647,2649,5,24,0,0,2648,2647,1,0,0,0,
        2648,2649,1,0,0,0,2649,2657,1,0,0,0,2650,2651,5,175,0,0,2651,2657,
        5,3,0,0,2652,2654,5,175,0,0,2653,2655,5,24,0,0,2654,2653,1,0,0,0,
        2654,2655,1,0,0,0,2655,2657,1,0,0,0,2656,2632,1,0,0,0,2656,2634,
        1,0,0,0,2656,2638,1,0,0,0,2656,2640,1,0,0,0,2656,2644,1,0,0,0,2656,
        2646,1,0,0,0,2656,2650,1,0,0,0,2656,2652,1,0,0,0,2657,429,1,0,0,
        0,2658,2660,3,434,217,0,2659,2658,1,0,0,0,2659,2660,1,0,0,0,2660,
        2661,1,0,0,0,2661,2662,3,432,216,0,2662,431,1,0,0,0,2663,2666,3,
        438,219,0,2664,2666,3,442,221,0,2665,2663,1,0,0,0,2665,2664,1,0,
        0,0,2666,433,1,0,0,0,2667,2668,5,149,0,0,2668,2673,3,436,218,0,2669,
        2670,5,334,0,0,2670,2672,3,436,218,0,2671,2669,1,0,0,0,2672,2675,
        1,0,0,0,2673,2671,1,0,0,0,2673,2674,1,0,0,0,2674,435,1,0,0,0,2675,
        2673,1,0,0,0,2676,2677,3,730,365,0,2677,2678,5,22,0,0,2678,2679,
        5,336,0,0,2679,2680,3,430,215,0,2680,2681,5,337,0,0,2681,437,1,0,
        0,0,2682,2688,3,440,220,0,2683,2684,3,428,214,0,2684,2685,3,440,
        220,0,2685,2687,1,0,0,0,2686,2683,1,0,0,0,2687,2690,1,0,0,0,2688,
        2686,1,0,0,0,2688,2689,1,0,0,0,2689,439,1,0,0,0,2690,2688,1,0,0,
        0,2691,2693,3,540,270,0,2692,2694,3,452,226,0,2693,2692,1,0,0,0,
        2694,2695,1,0,0,0,2695,2693,1,0,0,0,2695,2696,1,0,0,0,2696,441,1,
        0,0,0,2697,2700,3,454,227,0,2698,2701,3,446,223,0,2699,2701,3,588,
        294,0,2700,2698,1,0,0,0,2700,2699,1,0,0,0,2701,2704,1,0,0,0,2702,
        2704,3,446,223,0,2703,2697,1,0,0,0,2703,2702,1,0,0,0,2704,443,1,
        0,0,0,2705,2707,3,502,251,0,2706,2708,3,540,270,0,2707,2706,1,0,
        0,0,2707,2708,1,0,0,0,2708,2710,1,0,0,0,2709,2711,3,584,292,0,2710,
        2709,1,0,0,0,2710,2711,1,0,0,0,2711,2713,1,0,0,0,2712,2714,3,596,
        298,0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,2716,1,0,0,0,2715,
        2717,3,612,306,0,2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,2719,1,
        0,0,0,2718,2720,3,516,258,0,2719,2718,1,0,0,0,2719,2720,1,0,0,0,
        2720,2726,1,0,0,0,2721,2722,5,336,0,0,2722,2723,3,446,223,0,2723,
        2724,5,337,0,0,2724,2726,1,0,0,0,2725,2705,1,0,0,0,2725,2721,1,0,
        0,0,2726,445,1,0,0,0,2727,2729,3,444,222,0,2728,2730,3,448,224,0,
        2729,2728,1,0,0,0,2729,2730,1,0,0,0,2730,2732,1,0,0,0,2731,2733,
        3,628,314,0,2732,2731,1,0,0,0,2732,2733,1,0,0,0,2733,2735,1,0,0,
        0,2734,2736,3,630,315,0,2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,
        2738,1,0,0,0,2737,2739,3,634,317,0,2738,2737,1,0,0,0,2738,2739,1,
        0,0,0,2739,2741,1,0,0,0,2740,2742,3,636,318,0,2741,2740,1,0,0,0,
        2741,2742,1,0,0,0,2742,2744,1,0,0,0,2743,2745,3,458,229,0,2744,2743,
        1,0,0,0,2744,2745,1,0,0,0,2745,447,1,0,0,0,2746,2747,3,428,214,0,
        2747,2748,3,444,222,0,2748,2750,1,0,0,0,2749,2746,1,0,0,0,2750,2751,
        1,0,0,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,449,1,0,0,0,2753,
        2755,3,434,217,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,2756,1,
        0,0,0,2756,2757,3,446,223,0,2757,451,1,0,0,0,2758,2759,3,454,227,
        0,2759,2761,3,502,251,0,2760,2762,3,558,279,0,2761,2760,1,0,0,0,
        2761,2762,1,0,0,0,2762,2764,1,0,0,0,2763,2765,3,584,292,0,2764,2763,
        1,0,0,0,2764,2765,1,0,0,0,2765,2767,1,0,0,0,2766,2768,3,596,298,
        0,2767,2766,1,0,0,0,2767,2768,1,0,0,0,2768,2770,1,0,0,0,2769,2771,
        3,612,306,0,2770,2769,1,0,0,0,2770,2771,1,0,0,0,2771,2773,1,0,0,
        0,2772,2774,3,516,258,0,2773,2772,1,0,0,0,2773,2774,1,0,0,0,2774,
        2776,1,0,0,0,2775,2777,3,628,314,0,2776,2775,1,0,0,0,2776,2777,1,
        0,0,0,2777,2779,1,0,0,0,2778,2780,3,630,315,0,2779,2778,1,0,0,0,
        2779,2780,1,0,0,0,2780,2782,1,0,0,0,2781,2783,3,634,317,0,2782,2781,
        1,0,0,0,2782,2783,1,0,0,0,2783,2785,1,0,0,0,2784,2786,3,636,318,
        0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,2788,1,0,0,0,2787,2789,
        3,458,229,0,2788,2787,1,0,0,0,2788,2789,1,0,0,0,2789,2822,1,0,0,
        0,2790,2792,3,502,251,0,2791,2793,3,558,279,0,2792,2791,1,0,0,0,
        2792,2793,1,0,0,0,2793,2795,1,0,0,0,2794,2796,3,584,292,0,2795,2794,
        1,0,0,0,2795,2796,1,0,0,0,2796,2798,1,0,0,0,2797,2799,3,596,298,
        0,2798,2797,1,0,0,0,2798,2799,1,0,0,0,2799,2801,1,0,0,0,2800,2802,
        3,612,306,0,2801,2800,1,0,0,0,2801,2802,1,0,0,0,2802,2804,1,0,0,
        0,2803,2805,3,516,258,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,
        2807,1,0,0,0,2806,2808,3,628,314,0,2807,2806,1,0,0,0,2807,2808,1,
        0,0,0,2808,2810,1,0,0,0,2809,2811,3,630,315,0,2810,2809,1,0,0,0,
        2810,2811,1,0,0,0,2811,2813,1,0,0,0,2812,2814,3,634,317,0,2813,2812,
        1,0,0,0,2813,2814,1,0,0,0,2814,2816,1,0,0,0,2815,2817,3,636,318,
        0,2816,2815,1,0,0,0,2816,2817,1,0,0,0,2817,2819,1,0,0,0,2818,2820,
        3,458,229,0,2819,2818,1,0,0,0,2819,2820,1,0,0,0,2820,2822,1,0,0,
        0,2821,2758,1,0,0,0,2821,2790,1,0,0,0,2822,453,1,0,0,0,2823,2824,
        5,25,0,0,2824,2825,5,26,0,0,2825,2827,3,456,228,0,2826,2828,3,40,
        20,0,2827,2826,1,0,0,0,2827,2828,1,0,0,0,2828,2842,1,0,0,0,2829,
        2830,5,25,0,0,2830,2832,5,104,0,0,2831,2833,5,37,0,0,2832,2831,1,
        0,0,0,2832,2833,1,0,0,0,2833,2834,1,0,0,0,2834,2839,3,714,357,0,
        2835,2836,5,336,0,0,2836,2837,3,330,165,0,2837,2838,5,337,0,0,2838,
        2840,1,0,0,0,2839,2835,1,0,0,0,2839,2840,1,0,0,0,2840,2842,1,0,0,
        0,2841,2823,1,0,0,0,2841,2829,1,0,0,0,2842,455,1,0,0,0,2843,2845,
        5,48,0,0,2844,2843,1,0,0,0,2844,2845,1,0,0,0,2845,2846,1,0,0,0,2846,
        2847,5,47,0,0,2847,2849,5,362,0,0,2848,2850,3,298,149,0,2849,2848,
        1,0,0,0,2849,2850,1,0,0,0,2850,2852,1,0,0,0,2851,2853,3,320,160,
        0,2852,2851,1,0,0,0,2852,2853,1,0,0,0,2853,2857,1,0,0,0,2854,2855,
        5,37,0,0,2855,2857,3,714,357,0,2856,2844,1,0,0,0,2856,2854,1,0,0,
        0,2857,457,1,0,0,0,2858,2861,5,153,0,0,2859,2860,5,367,0,0,2860,
        2862,5,334,0,0,2861,2859,1,0,0,0,2861,2862,1,0,0,0,2862,2863,1,0,
        0,0,2863,2869,5,367,0,0,2864,2865,5,153,0,0,2865,2866,5,367,0,0,
        2866,2867,5,154,0,0,2867,2869,5,367,0,0,2868,2858,1,0,0,0,2868,2864,
        1,0,0,0,2869,459,1,0,0,0,2870,2871,5,173,0,0,2871,2872,5,21,0,0,
        2872,2874,3,572,286,0,2873,2875,3,584,292,0,2874,2873,1,0,0,0,2874,
        2875,1,0,0,0,2875,461,1,0,0,0,2876,2877,3,534,267,0,2877,2878,5,
        342,0,0,2878,2879,3,702,351,0,2879,463,1,0,0,0,2880,2881,5,155,0,
        0,2881,2886,3,462,231,0,2882,2883,5,334,0,0,2883,2885,3,462,231,
        0,2884,2882,1,0,0,0,2885,2888,1,0,0,0,2886,2884,1,0,0,0,2886,2887,
        1,0,0,0,2887,465,1,0,0,0,2888,2886,1,0,0,0,2889,2890,5,224,0,0,2890,
        2891,3,572,286,0,2891,2893,3,464,232,0,2892,2894,3,584,292,0,2893,
        2892,1,0,0,0,2893,2894,1,0,0,0,2894,467,1,0,0,0,2895,2900,3,470,
        235,0,2896,2900,3,480,240,0,2897,2900,3,482,241,0,2898,2900,3,484,
        242,0,2899,2895,1,0,0,0,2899,2896,1,0,0,0,2899,2897,1,0,0,0,2899,
        2898,1,0,0,0,2900,469,1,0,0,0,2901,2902,5,275,0,0,2902,2911,5,276,
        0,0,2903,2908,3,472,236,0,2904,2905,5,334,0,0,2905,2907,3,472,236,
        0,2906,2904,1,0,0,0,2907,2910,1,0,0,0,2908,2906,1,0,0,0,2908,2909,
        1,0,0,0,2909,2912,1,0,0,0,2910,2908,1,0,0,0,2911,2903,1,0,0,0,2911,
        2912,1,0,0,0,2912,471,1,0,0,0,2913,2916,3,476,238,0,2914,2916,3,
        474,237,0,2915,2913,1,0,0,0,2915,2914,1,0,0,0,2916,473,1,0,0,0,2917,
        2918,5,198,0,0,2918,2922,5,280,0,0,2919,2920,5,198,0,0,2920,2922,
        5,281,0,0,2921,2917,1,0,0,0,2921,2919,1,0,0,0,2922,475,1,0,0,0,2923,
        2924,5,282,0,0,2924,2925,5,283,0,0,2925,2926,3,478,239,0,2926,477,
        1,0,0,0,2927,2928,5,284,0,0,2928,479,1,0,0,0,2929,2931,5,277,0,0,
        2930,2932,5,279,0,0,2931,2930,1,0,0,0,2931,2932,1,0,0,0,2932,481,
        1,0,0,0,2933,2935,5,278,0,0,2934,2936,5,279,0,0,2935,2934,1,0,0,
        0,2935,2936,1,0,0,0,2936,483,1,0,0,0,2937,2938,5,155,0,0,2938,2939,
        5,285,0,0,2939,2940,3,712,356,0,2940,485,1,0,0,0,2941,2942,5,298,
        0,0,2942,2944,5,258,0,0,2943,2945,5,367,0,0,2944,2943,1,0,0,0,2945,
        2946,1,0,0,0,2946,2944,1,0,0,0,2946,2947,1,0,0,0,2947,487,1,0,0,
        0,2948,2949,5,301,0,0,2949,2950,5,104,0,0,2950,2955,3,572,286,0,
        2951,2953,5,22,0,0,2952,2951,1,0,0,0,2952,2953,1,0,0,0,2953,2954,
        1,0,0,0,2954,2956,3,730,365,0,2955,2952,1,0,0,0,2955,2956,1,0,0,
        0,2956,2957,1,0,0,0,2957,2958,5,50,0,0,2958,2959,3,548,274,0,2959,
        2960,5,34,0,0,2960,2961,3,702,351,0,2961,2962,3,490,245,0,2962,489,
        1,0,0,0,2963,2966,3,494,247,0,2964,2966,3,496,248,0,2965,2963,1,
        0,0,0,2965,2964,1,0,0,0,2966,2969,1,0,0,0,2967,2965,1,0,0,0,2967,
        2968,1,0,0,0,2968,2971,1,0,0,0,2969,2967,1,0,0,0,2970,2972,3,492,
        246,0,2971,2970,1,0,0,0,2971,2972,1,0,0,0,2972,491,1,0,0,0,2973,
        2974,5,163,0,0,2974,2975,5,7,0,0,2975,2978,5,302,0,0,2976,2977,5,
        5,0,0,2977,2979,3,702,351,0,2978,2976,1,0,0,0,2978,2979,1,0,0,0,
        2979,2980,1,0,0,0,2980,2981,5,164,0,0,2981,2982,5,25,0,0,2982,2983,
        5,263,0,0,2983,2984,3,592,296,0,2984,493,1,0,0,0,2985,2986,5,163,
        0,0,2986,2987,5,302,0,0,2987,2988,5,5,0,0,2988,2989,3,702,351,0,
        2989,2990,5,164,0,0,2990,2991,3,498,249,0,2991,495,1,0,0,0,2992,
        2993,5,163,0,0,2993,2994,5,302,0,0,2994,2995,5,164,0,0,2995,2996,
        3,498,249,0,2996,497,1,0,0,0,2997,2998,5,224,0,0,2998,3001,3,464,
        232,0,2999,3001,5,173,0,0,3000,2997,1,0,0,0,3000,2999,1,0,0,0,3001,
        499,1,0,0,0,3002,3003,5,117,0,0,3003,3005,5,266,0,0,3004,3006,5,
        362,0,0,3005,3004,1,0,0,0,3006,3007,1,0,0,0,3007,3005,1,0,0,0,3007,
        3008,1,0,0,0,3008,501,1,0,0,0,3009,3011,5,23,0,0,3010,3012,5,373,
        0,0,3011,3010,1,0,0,0,3011,3012,1,0,0,0,3012,3019,1,0,0,0,3013,3015,
        7,15,0,0,3014,3013,1,0,0,0,3014,3015,1,0,0,0,3015,3016,1,0,0,0,3016,
        3020,3,504,252,0,3017,3018,5,49,0,0,3018,3020,3,506,253,0,3019,3014,
        1,0,0,0,3019,3017,1,0,0,0,3020,3023,1,0,0,0,3021,3023,3,510,255,
        0,3022,3009,1,0,0,0,3022,3021,1,0,0,0,3023,503,1,0,0,0,3024,3029,
        3,508,254,0,3025,3026,5,334,0,0,3026,3028,3,508,254,0,3027,3025,
        1,0,0,0,3028,3031,1,0,0,0,3029,3027,1,0,0,0,3029,3030,1,0,0,0,3030,
        505,1,0,0,0,3031,3029,1,0,0,0,3032,3033,5,336,0,0,3033,3034,3,514,
        257,0,3034,3036,5,337,0,0,3035,3037,3,288,144,0,3036,3035,1,0,0,
        0,3036,3037,1,0,0,0,3037,3039,1,0,0,0,3038,3040,3,292,146,0,3039,
        3038,1,0,0,0,3039,3040,1,0,0,0,3040,3041,1,0,0,0,3041,3042,5,50,
        0,0,3042,3057,5,362,0,0,3043,3055,5,22,0,0,3044,3047,5,336,0,0,3045,
        3048,3,538,269,0,3046,3048,3,324,162,0,3047,3045,1,0,0,0,3047,3046,
        1,0,0,0,3048,3049,1,0,0,0,3049,3050,5,337,0,0,3050,3056,1,0,0,0,
        3051,3054,3,538,269,0,3052,3054,3,324,162,0,3053,3051,1,0,0,0,3053,
        3052,1,0,0,0,3054,3056,1,0,0,0,3055,3044,1,0,0,0,3055,3053,1,0,0,
        0,3056,3058,1,0,0,0,3057,3043,1,0,0,0,3057,3058,1,0,0,0,3058,3060,
        1,0,0,0,3059,3061,3,288,144,0,3060,3059,1,0,0,0,3060,3061,1,0,0,
        0,3061,3063,1,0,0,0,3062,3064,3,290,145,0,3063,3062,1,0,0,0,3063,
        3064,1,0,0,0,3064,507,1,0,0,0,3065,3086,3,532,266,0,3066,3083,3,
        702,351,0,3067,3069,5,22,0,0,3068,3067,1,0,0,0,3068,3069,1,0,0,0,
        3069,3070,1,0,0,0,3070,3084,3,730,365,0,3071,3072,5,22,0,0,3072,
        3073,5,336,0,0,3073,3078,3,730,365,0,3074,3075,5,334,0,0,3075,3077,
        3,730,365,0,3076,3074,1,0,0,0,3077,3080,1,0,0,0,3078,3076,1,0,0,
        0,3078,3079,1,0,0,0,3079,3081,1,0,0,0,3080,3078,1,0,0,0,3081,3082,
        5,337,0,0,3082,3084,1,0,0,0,3083,3068,1,0,0,0,3083,3071,1,0,0,0,
        3083,3084,1,0,0,0,3084,3086,1,0,0,0,3085,3065,1,0,0,0,3085,3066,
        1,0,0,0,3086,509,1,0,0,0,3087,3088,5,98,0,0,3088,3092,3,514,257,
        0,3089,3090,5,100,0,0,3090,3092,3,514,257,0,3091,3087,1,0,0,0,3091,
        3089,1,0,0,0,3092,3094,1,0,0,0,3093,3095,3,288,144,0,3094,3093,1,
        0,0,0,3094,3095,1,0,0,0,3095,3097,1,0,0,0,3096,3098,3,292,146,0,
        3097,3096,1,0,0,0,3097,3098,1,0,0,0,3098,3099,1,0,0,0,3099,3100,
        5,50,0,0,3100,3115,5,362,0,0,3101,3113,5,22,0,0,3102,3105,5,336,
        0,0,3103,3106,3,538,269,0,3104,3106,3,324,162,0,3105,3103,1,0,0,
        0,3105,3104,1,0,0,0,3106,3107,1,0,0,0,3107,3108,5,337,0,0,3108,3114,
        1,0,0,0,3109,3112,3,538,269,0,3110,3112,3,324,162,0,3111,3109,1,
        0,0,0,3111,3110,1,0,0,0,3112,3114,1,0,0,0,3113,3102,1,0,0,0,3113,
        3111,1,0,0,0,3114,3116,1,0,0,0,3115,3101,1,0,0,0,3115,3116,1,0,0,
        0,3116,3118,1,0,0,0,3117,3119,3,288,144,0,3118,3117,1,0,0,0,3118,
        3119,1,0,0,0,3119,3121,1,0,0,0,3120,3122,3,290,145,0,3121,3120,1,
        0,0,0,3121,3122,1,0,0,0,3122,511,1,0,0,0,3123,3126,3,532,266,0,3124,
        3126,3,702,351,0,3125,3123,1,0,0,0,3125,3124,1,0,0,0,3126,513,1,
        0,0,0,3127,3132,3,512,256,0,3128,3129,5,334,0,0,3129,3131,3,512,
        256,0,3130,3128,1,0,0,0,3131,3134,1,0,0,0,3132,3130,1,0,0,0,3132,
        3133,1,0,0,0,3133,515,1,0,0,0,3134,3132,1,0,0,0,3135,3136,5,232,
        0,0,3136,3141,3,518,259,0,3137,3138,5,334,0,0,3138,3140,3,518,259,
        0,3139,3137,1,0,0,0,3140,3143,1,0,0,0,3141,3139,1,0,0,0,3141,3142,
        1,0,0,0,3142,517,1,0,0,0,3143,3141,1,0,0,0,3144,3145,3,730,365,0,
        3145,3146,5,22,0,0,3146,3147,3,520,260,0,3147,519,1,0,0,0,3148,3161,
        3,730,365,0,3149,3151,5,336,0,0,3150,3152,3,730,365,0,3151,3150,
        1,0,0,0,3151,3152,1,0,0,0,3152,3154,1,0,0,0,3153,3155,3,578,289,
        0,3154,3153,1,0,0,0,3154,3155,1,0,0,0,3155,3157,1,0,0,0,3156,3158,
        3,522,261,0,3157,3156,1,0,0,0,3157,3158,1,0,0,0,3158,3159,1,0,0,
        0,3159,3161,5,337,0,0,3160,3148,1,0,0,0,3160,3149,1,0,0,0,3161,521,
        1,0,0,0,3162,3165,3,524,262,0,3163,3165,3,526,263,0,3164,3162,1,
        0,0,0,3164,3163,1,0,0,0,3165,523,1,0,0,0,3166,3167,5,107,0,0,3167,
        3175,3,528,264,0,3168,3169,5,107,0,0,3169,3170,5,204,0,0,3170,3171,
        3,530,265,0,3171,3172,5,5,0,0,3172,3173,3,530,265,0,3173,3175,1,
        0,0,0,3174,3166,1,0,0,0,3174,3168,1,0,0,0,3175,525,1,0,0,0,3176,
        3177,5,201,0,0,3177,3185,3,528,264,0,3178,3179,5,201,0,0,3179,3180,
        5,204,0,0,3180,3181,3,530,265,0,3181,3182,5,5,0,0,3182,3183,3,530,
        265,0,3183,3185,1,0,0,0,3184,3176,1,0,0,0,3184,3178,1,0,0,0,3185,
        527,1,0,0,0,3186,3187,5,233,0,0,3187,3193,5,234,0,0,3188,3189,5,
        236,0,0,3189,3193,5,106,0,0,3190,3191,5,367,0,0,3191,3193,5,234,
        0,0,3192,3186,1,0,0,0,3192,3188,1,0,0,0,3192,3190,1,0,0,0,3193,529,
        1,0,0,0,3194,3195,5,233,0,0,3195,3201,7,16,0,0,3196,3197,5,236,0,
        0,3197,3201,5,106,0,0,3198,3199,5,367,0,0,3199,3201,7,16,0,0,3200,
        3194,1,0,0,0,3200,3196,1,0,0,0,3200,3198,1,0,0,0,3201,531,1,0,0,
        0,3202,3208,5,352,0,0,3203,3204,3,572,286,0,3204,3205,5,332,0,0,
        3205,3206,5,352,0,0,3206,3208,1,0,0,0,3207,3202,1,0,0,0,3207,3203,
        1,0,0,0,3208,533,1,0,0,0,3209,3210,3,730,365,0,3210,535,1,0,0,0,
        3211,3216,3,702,351,0,3212,3213,5,334,0,0,3213,3215,3,702,351,0,
        3214,3212,1,0,0,0,3215,3218,1,0,0,0,3216,3214,1,0,0,0,3216,3217,
        1,0,0,0,3217,537,1,0,0,0,3218,3216,1,0,0,0,3219,3224,3,730,365,0,
        3220,3221,5,334,0,0,3221,3223,3,730,365,0,3222,3220,1,0,0,0,3223,
        3226,1,0,0,0,3224,3222,1,0,0,0,3224,3225,1,0,0,0,3225,539,1,0,0,
        0,3226,3224,1,0,0,0,3227,3228,5,21,0,0,3228,3229,3,542,271,0,3229,
        541,1,0,0,0,3230,3231,3,554,277,0,3231,3234,3,550,275,0,3232,3233,
        5,334,0,0,3233,3235,3,550,275,0,3234,3232,1,0,0,0,3235,3236,1,0,
        0,0,3236,3234,1,0,0,0,3236,3237,1,0,0,0,3237,3240,1,0,0,0,3238,3240,
        3,546,273,0,3239,3230,1,0,0,0,3239,3238,1,0,0,0,3240,543,1,0,0,0,
        3241,3245,3,568,284,0,3242,3244,3,558,279,0,3243,3242,1,0,0,0,3244,
        3247,1,0,0,0,3245,3243,1,0,0,0,3245,3246,1,0,0,0,3246,3274,1,0,0,
        0,3247,3245,1,0,0,0,3248,3252,3,594,297,0,3249,3251,3,558,279,0,
        3250,3249,1,0,0,0,3251,3254,1,0,0,0,3252,3250,1,0,0,0,3252,3253,
        1,0,0,0,3253,3274,1,0,0,0,3254,3252,1,0,0,0,3255,3259,3,576,288,
        0,3256,3258,3,558,279,0,3257,3256,1,0,0,0,3258,3261,1,0,0,0,3259,
        3257,1,0,0,0,3259,3260,1,0,0,0,3260,3274,1,0,0,0,3261,3259,1,0,0,
        0,3262,3266,3,582,291,0,3263,3265,3,558,279,0,3264,3263,1,0,0,0,
        3265,3268,1,0,0,0,3266,3264,1,0,0,0,3266,3267,1,0,0,0,3267,3274,
        1,0,0,0,3268,3266,1,0,0,0,3269,3270,5,336,0,0,3270,3271,3,546,273,
        0,3271,3272,5,337,0,0,3272,3274,1,0,0,0,3273,3241,1,0,0,0,3273,3248,
        1,0,0,0,3273,3255,1,0,0,0,3273,3262,1,0,0,0,3273,3269,1,0,0,0,3274,
        545,1,0,0,0,3275,3286,3,544,272,0,3276,3277,3,556,278,0,3277,3282,
        3,548,274,0,3278,3279,5,34,0,0,3279,3283,3,702,351,0,3280,3281,5,
        50,0,0,3281,3283,3,338,169,0,3282,3278,1,0,0,0,3282,3280,1,0,0,0,
        3282,3283,1,0,0,0,3283,3285,1,0,0,0,3284,3276,1,0,0,0,3285,3288,
        1,0,0,0,3286,3284,1,0,0,0,3286,3287,1,0,0,0,3287,547,1,0,0,0,3288,
        3286,1,0,0,0,3289,3294,3,568,284,0,3290,3294,3,594,297,0,3291,3294,
        3,576,288,0,3292,3294,3,582,291,0,3293,3289,1,0,0,0,3293,3290,1,
        0,0,0,3293,3291,1,0,0,0,3293,3292,1,0,0,0,3294,3298,1,0,0,0,3295,
        3297,3,558,279,0,3296,3295,1,0,0,0,3297,3300,1,0,0,0,3298,3296,1,
        0,0,0,3298,3299,1,0,0,0,3299,549,1,0,0,0,3300,3298,1,0,0,0,3301,
        3303,5,29,0,0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,3304,1,0,
        0,0,3304,3305,3,570,285,0,3305,3306,3,552,276,0,3306,551,1,0,0,0,
        3307,3308,5,336,0,0,3308,3309,3,536,268,0,3309,3310,5,337,0,0,3310,
        553,1,0,0,0,3311,3312,5,28,0,0,3312,555,1,0,0,0,3313,3338,5,30,0,
        0,3314,3315,5,249,0,0,3315,3338,5,30,0,0,3316,3338,5,334,0,0,3317,
        3318,5,207,0,0,3318,3338,5,30,0,0,3319,3321,5,31,0,0,3320,3322,5,
        27,0,0,3321,3320,1,0,0,0,3321,3322,1,0,0,0,3322,3323,1,0,0,0,3323,
        3338,5,30,0,0,3324,3326,5,32,0,0,3325,3327,5,27,0,0,3326,3325,1,
        0,0,0,3326,3327,1,0,0,0,3327,3328,1,0,0,0,3328,3338,5,30,0,0,3329,
        3331,5,33,0,0,3330,3332,5,27,0,0,3331,3330,1,0,0,0,3331,3332,1,0,
        0,0,3332,3333,1,0,0,0,3333,3338,5,30,0,0,3334,3335,5,31,0,0,3335,
        3336,5,213,0,0,3336,3338,5,30,0,0,3337,3313,1,0,0,0,3337,3314,1,
        0,0,0,3337,3316,1,0,0,0,3337,3317,1,0,0,0,3337,3319,1,0,0,0,3337,
        3324,1,0,0,0,3337,3329,1,0,0,0,3337,3334,1,0,0,0,3338,557,1,0,0,
        0,3339,3340,5,214,0,0,3340,3341,5,178,0,0,3341,3342,5,27,0,0,3342,
        3343,3,638,319,0,3343,3353,3,560,280,0,3344,3345,5,22,0,0,3345,3350,
        3,730,365,0,3346,3347,5,334,0,0,3347,3349,3,730,365,0,3348,3346,
        1,0,0,0,3349,3352,1,0,0,0,3350,3348,1,0,0,0,3350,3351,1,0,0,0,3351,
        3354,1,0,0,0,3352,3350,1,0,0,0,3353,3344,1,0,0,0,3353,3354,1,0,0,
        0,3354,3399,1,0,0,0,3355,3357,5,334,0,0,3356,3355,1,0,0,0,3356,3357,
        1,0,0,0,3357,3358,1,0,0,0,3358,3359,5,214,0,0,3359,3360,5,178,0,
        0,3360,3361,3,638,319,0,3361,3371,3,560,280,0,3362,3363,5,22,0,0,
        3363,3368,3,730,365,0,3364,3365,5,334,0,0,3365,3367,3,730,365,0,
        3366,3364,1,0,0,0,3367,3370,1,0,0,0,3368,3366,1,0,0,0,3368,3369,
        1,0,0,0,3369,3372,1,0,0,0,3370,3368,1,0,0,0,3371,3362,1,0,0,0,3371,
        3372,1,0,0,0,3372,3399,1,0,0,0,3373,3375,5,334,0,0,3374,3373,1,0,
        0,0,3374,3375,1,0,0,0,3375,3376,1,0,0,0,3376,3377,5,214,0,0,3377,
        3378,5,37,0,0,3378,3379,5,336,0,0,3379,3380,3,588,294,0,3380,3382,
        5,337,0,0,3381,3383,5,22,0,0,3382,3381,1,0,0,0,3382,3383,1,0,0,0,
        3383,3384,1,0,0,0,3384,3396,3,560,280,0,3385,3386,5,336,0,0,3386,
        3391,3,730,365,0,3387,3388,5,334,0,0,3388,3390,3,730,365,0,3389,
        3387,1,0,0,0,3390,3393,1,0,0,0,3391,3389,1,0,0,0,3391,3392,1,0,0,
        0,3392,3394,1,0,0,0,3393,3391,1,0,0,0,3394,3395,5,337,0,0,3395,3397,
        1,0,0,0,3396,3385,1,0,0,0,3396,3397,1,0,0,0,3397,3399,1,0,0,0,3398,
        3339,1,0,0,0,3398,3356,1,0,0,0,3398,3374,1,0,0,0,3399,559,1,0,0,
        0,3400,3401,3,730,365,0,3401,561,1,0,0,0,3402,3403,5,128,0,0,3403,
        3404,5,336,0,0,3404,3405,5,129,0,0,3405,3406,5,367,0,0,3406,3407,
        5,130,0,0,3407,3408,5,131,0,0,3408,3418,5,367,0,0,3409,3410,5,34,
        0,0,3410,3415,3,702,351,0,3411,3412,5,334,0,0,3412,3414,3,702,351,
        0,3413,3411,1,0,0,0,3414,3417,1,0,0,0,3415,3413,1,0,0,0,3415,3416,
        1,0,0,0,3416,3419,1,0,0,0,3417,3415,1,0,0,0,3418,3409,1,0,0,0,3418,
        3419,1,0,0,0,3419,3420,1,0,0,0,3420,3421,5,337,0,0,3421,563,1,0,
        0,0,3422,3423,5,128,0,0,3423,3424,5,336,0,0,3424,3425,5,367,0,0,
        3425,3426,7,17,0,0,3426,3432,5,337,0,0,3427,3428,5,128,0,0,3428,
        3429,5,336,0,0,3429,3430,5,366,0,0,3430,3432,5,337,0,0,3431,3422,
        1,0,0,0,3431,3427,1,0,0,0,3432,565,1,0,0,0,3433,3436,3,562,281,0,
        3434,3436,3,564,282,0,3435,3433,1,0,0,0,3435,3434,1,0,0,0,3436,567,
        1,0,0,0,3437,3439,3,572,286,0,3438,3440,3,302,151,0,3439,3438,1,
        0,0,0,3439,3440,1,0,0,0,3440,3442,1,0,0,0,3441,3443,3,566,283,0,
        3442,3441,1,0,0,0,3442,3443,1,0,0,0,3443,3448,1,0,0,0,3444,3446,
        5,22,0,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,3447,1,0,0,0,3447,
        3449,3,730,365,0,3448,3445,1,0,0,0,3448,3449,1,0,0,0,3449,569,1,
        0,0,0,3450,3452,3,572,286,0,3451,3453,3,566,283,0,3452,3451,1,0,
        0,0,3452,3453,1,0,0,0,3453,3458,1,0,0,0,3454,3456,5,22,0,0,3455,
        3454,1,0,0,0,3455,3456,1,0,0,0,3456,3457,1,0,0,0,3457,3459,3,730,
        365,0,3458,3455,1,0,0,0,3458,3459,1,0,0,0,3459,571,1,0,0,0,3460,
        3461,3,730,365,0,3461,3462,5,332,0,0,3462,3463,3,730,365,0,3463,
        3466,1,0,0,0,3464,3466,3,730,365,0,3465,3460,1,0,0,0,3465,3464,1,
        0,0,0,3466,573,1,0,0,0,3467,3468,3,730,365,0,3468,3469,5,332,0,0,
        3469,3471,1,0,0,0,3470,3467,1,0,0,0,3470,3471,1,0,0,0,3471,3472,
        1,0,0,0,3472,3473,3,730,365,0,3473,575,1,0,0,0,3474,3475,5,336,0,
        0,3475,3476,3,430,215,0,3476,3478,5,337,0,0,3477,3479,5,22,0,0,3478,
        3477,1,0,0,0,3478,3479,1,0,0,0,3479,3480,1,0,0,0,3480,3481,3,730,
        365,0,3481,577,1,0,0,0,3482,3484,3,632,316,0,3483,3485,3,628,314,
        0,3484,3483,1,0,0,0,3484,3485,1,0,0,0,3485,3494,1,0,0,0,3486,3494,
        3,628,314,0,3487,3489,3,634,317,0,3488,3490,3,636,318,0,3489,3488,
        1,0,0,0,3489,3490,1,0,0,0,3490,3494,1,0,0,0,3491,3494,3,636,318,
        0,3492,3494,3,630,315,0,3493,3482,1,0,0,0,3493,3486,1,0,0,0,3493,
        3487,1,0,0,0,3493,3491,1,0,0,0,3493,3492,1,0,0,0,3494,579,1,0,0,
        0,3495,3499,3,576,288,0,3496,3499,3,568,284,0,3497,3499,3,582,291,
        0,3498,3495,1,0,0,0,3498,3496,1,0,0,0,3498,3497,1,0,0,0,3499,581,
        1,0,0,0,3500,3501,3,730,365,0,3501,3502,5,336,0,0,3502,3503,5,34,
        0,0,3503,3505,3,580,290,0,3504,3506,3,578,289,0,3505,3504,1,0,0,
        0,3505,3506,1,0,0,0,3506,3522,1,0,0,0,3507,3508,5,368,0,0,3508,3509,
        5,336,0,0,3509,3510,3,702,351,0,3510,3519,5,337,0,0,3511,3512,5,
        334,0,0,3512,3513,5,368,0,0,3513,3514,5,336,0,0,3514,3515,3,702,
        351,0,3515,3516,5,337,0,0,3516,3518,1,0,0,0,3517,3511,1,0,0,0,3518,
        3521,1,0,0,0,3519,3517,1,0,0,0,3519,3520,1,0,0,0,3520,3523,1,0,0,
        0,3521,3519,1,0,0,0,3522,3507,1,0,0,0,3522,3523,1,0,0,0,3523,3524,
        1,0,0,0,3524,3526,5,337,0,0,3525,3527,3,730,365,0,3526,3525,1,0,
        0,0,3526,3527,1,0,0,0,3527,583,1,0,0,0,3528,3529,5,20,0,0,3529,3530,
        3,586,293,0,3530,585,1,0,0,0,3531,3532,3,702,351,0,3532,587,1,0,
        0,0,3533,3534,5,263,0,0,3534,3535,3,590,295,0,3535,589,1,0,0,0,3536,
        3541,3,592,296,0,3537,3538,5,334,0,0,3538,3540,3,592,296,0,3539,
        3537,1,0,0,0,3540,3543,1,0,0,0,3541,3539,1,0,0,0,3541,3542,1,0,0,
        0,3542,591,1,0,0,0,3543,3541,1,0,0,0,3544,3545,3,616,308,0,3545,
        593,1,0,0,0,3546,3547,5,37,0,0,3547,3548,5,336,0,0,3548,3549,3,588,
        294,0,3549,3551,5,337,0,0,3550,3552,5,22,0,0,3551,3550,1,0,0,0,3551,
        3552,1,0,0,0,3552,3553,1,0,0,0,3553,3563,3,560,280,0,3554,3555,5,
        336,0,0,3555,3560,3,730,365,0,3556,3557,5,334,0,0,3557,3559,3,730,
        365,0,3558,3556,1,0,0,0,3559,3562,1,0,0,0,3560,3558,1,0,0,0,3560,
        3561,1,0,0,0,3561,3564,1,0,0,0,3562,3560,1,0,0,0,3563,3554,1,0,0,
        0,3563,3564,1,0,0,0,3564,3565,1,0,0,0,3565,3566,5,337,0,0,3566,595,
        1,0,0,0,3567,3568,5,17,0,0,3568,3569,5,18,0,0,3569,3570,3,598,299,
        0,3570,597,1,0,0,0,3571,3575,3,602,301,0,3572,3575,3,604,302,0,3573,
        3575,3,600,300,0,3574,3571,1,0,0,0,3574,3572,1,0,0,0,3574,3573,1,
        0,0,0,3575,599,1,0,0,0,3576,3577,5,336,0,0,3577,3578,5,337,0,0,3578,
        601,1,0,0,0,3579,3580,7,18,0,0,3580,3581,5,336,0,0,3581,3586,3,702,
        351,0,3582,3583,5,334,0,0,3583,3585,3,702,351,0,3584,3582,1,0,0,
        0,3585,3588,1,0,0,0,3586,3584,1,0,0,0,3586,3587,1,0,0,0,3587,3589,
        1,0,0,0,3588,3586,1,0,0,0,3589,3590,5,337,0,0,3590,603,1,0,0,0,3591,
        3596,3,618,309,0,3592,3593,5,149,0,0,3593,3597,5,228,0,0,3594,3595,
        5,149,0,0,3595,3597,5,229,0,0,3596,3592,1,0,0,0,3596,3594,1,0,0,
        0,3596,3597,1,0,0,0,3597,3611,1,0,0,0,3598,3599,5,242,0,0,3599,3600,
        5,243,0,0,3600,3601,5,336,0,0,3601,3606,3,606,303,0,3602,3603,5,
        334,0,0,3603,3605,3,606,303,0,3604,3602,1,0,0,0,3605,3608,1,0,0,
        0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,3609,1,0,0,0,3608,3606,
        1,0,0,0,3609,3610,5,337,0,0,3610,3612,1,0,0,0,3611,3598,1,0,0,0,
        3611,3612,1,0,0,0,3612,605,1,0,0,0,3613,3616,3,608,304,0,3614,3616,
        3,610,305,0,3615,3613,1,0,0,0,3615,3614,1,0,0,0,3616,607,1,0,0,0,
        3617,3619,5,336,0,0,3618,3620,3,702,351,0,3619,3618,1,0,0,0,3619,
        3620,1,0,0,0,3620,3625,1,0,0,0,3621,3622,5,334,0,0,3622,3624,3,702,
        351,0,3623,3621,1,0,0,0,3624,3627,1,0,0,0,3625,3623,1,0,0,0,3625,
        3626,1,0,0,0,3626,3628,1,0,0,0,3627,3625,1,0,0,0,3628,3629,5,337,
        0,0,3629,609,1,0,0,0,3630,3631,3,702,351,0,3631,611,1,0,0,0,3632,
        3633,5,19,0,0,3633,3634,3,614,307,0,3634,613,1,0,0,0,3635,3636,3,
        702,351,0,3636,615,1,0,0,0,3637,3638,5,336,0,0,3638,3639,3,618,309,
        0,3639,3640,5,337,0,0,3640,617,1,0,0,0,3641,3643,3,702,351,0,3642,
        3644,3,620,310,0,3643,3642,1,0,0,0,3643,3644,1,0,0,0,3644,619,1,
        0,0,0,3645,3646,5,334,0,0,3646,3648,3,702,351,0,3647,3645,1,0,0,
        0,3648,3649,1,0,0,0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,3650,621,
        1,0,0,0,3651,3654,3,616,308,0,3652,3654,3,618,309,0,3653,3651,1,
        0,0,0,3653,3652,1,0,0,0,3654,623,1,0,0,0,3655,3656,5,336,0,0,3656,
        3661,3,382,191,0,3657,3658,5,334,0,0,3658,3660,3,382,191,0,3659,
        3657,1,0,0,0,3660,3663,1,0,0,0,3661,3659,1,0,0,0,3661,3662,1,0,0,
        0,3662,3664,1,0,0,0,3663,3661,1,0,0,0,3664,3665,5,337,0,0,3665,625,
        1,0,0,0,3666,3671,3,382,191,0,3667,3668,5,334,0,0,3668,3670,3,382,
        191,0,3669,3667,1,0,0,0,3670,3673,1,0,0,0,3671,3669,1,0,0,0,3671,
        3672,1,0,0,0,3672,627,1,0,0,0,3673,3671,1,0,0,0,3674,3675,5,16,0,
        0,3675,3676,5,18,0,0,3676,3681,3,382,191,0,3677,3678,5,334,0,0,3678,
        3680,3,382,191,0,3679,3677,1,0,0,0,3680,3683,1,0,0,0,3681,3679,1,
        0,0,0,3681,3682,1,0,0,0,3682,629,1,0,0,0,3683,3681,1,0,0,0,3684,
        3685,5,51,0,0,3685,3686,5,18,0,0,3686,3687,3,622,311,0,3687,631,
        1,0,0,0,3688,3689,5,35,0,0,3689,3690,5,18,0,0,3690,3691,3,622,311,
        0,3691,633,1,0,0,0,3692,3693,5,52,0,0,3693,3694,5,18,0,0,3694,3695,
        3,622,311,0,3695,635,1,0,0,0,3696,3697,5,53,0,0,3697,3700,5,18,0,
        0,3698,3701,3,624,312,0,3699,3701,3,626,313,0,3700,3698,1,0,0,0,
        3700,3699,1,0,0,0,3701,637,1,0,0,0,3702,3703,3,640,320,0,3703,3718,
        5,336,0,0,3704,3719,5,352,0,0,3705,3707,7,15,0,0,3706,3705,1,0,0,
        0,3706,3707,1,0,0,0,3707,3716,1,0,0,0,3708,3713,3,512,256,0,3709,
        3710,5,334,0,0,3710,3712,3,512,256,0,3711,3709,1,0,0,0,3712,3715,
        1,0,0,0,3713,3711,1,0,0,0,3713,3714,1,0,0,0,3714,3717,1,0,0,0,3715,
        3713,1,0,0,0,3716,3708,1,0,0,0,3716,3717,1,0,0,0,3717,3719,1,0,0,
        0,3718,3704,1,0,0,0,3718,3706,1,0,0,0,3719,3720,1,0,0,0,3720,3723,
        5,337,0,0,3721,3722,5,241,0,0,3722,3724,3,520,260,0,3723,3721,1,
        0,0,0,3723,3724,1,0,0,0,3724,639,1,0,0,0,3725,3728,3,732,366,0,3726,
        3728,3,738,369,0,3727,3725,1,0,0,0,3727,3726,1,0,0,0,3728,641,1,
        0,0,0,3729,3730,5,133,0,0,3730,3731,5,336,0,0,3731,3732,3,702,351,
        0,3732,3733,5,22,0,0,3733,3734,3,418,209,0,3734,3735,5,337,0,0,3735,
        643,1,0,0,0,3736,3737,5,162,0,0,3737,3743,3,702,351,0,3738,3739,
        5,163,0,0,3739,3740,3,702,351,0,3740,3741,5,164,0,0,3741,3742,3,
        702,351,0,3742,3744,1,0,0,0,3743,3738,1,0,0,0,3744,3745,1,0,0,0,
        3745,3743,1,0,0,0,3745,3746,1,0,0,0,3746,3749,1,0,0,0,3747,3748,
        5,165,0,0,3748,3750,3,702,351,0,3749,3747,1,0,0,0,3749,3750,1,0,
        0,0,3750,3751,1,0,0,0,3751,3752,5,166,0,0,3752,645,1,0,0,0,3753,
        3759,5,162,0,0,3754,3755,5,163,0,0,3755,3756,3,702,351,0,3756,3757,
        5,164,0,0,3757,3758,3,702,351,0,3758,3760,1,0,0,0,3759,3754,1,0,
        0,0,3760,3761,1,0,0,0,3761,3759,1,0,0,0,3761,3762,1,0,0,0,3762,3765,
        1,0,0,0,3763,3764,5,165,0,0,3764,3766,3,702,351,0,3765,3763,1,0,
        0,0,3765,3766,1,0,0,0,3766,3767,1,0,0,0,3767,3768,5,166,0,0,3768,
        647,1,0,0,0,3769,3770,5,300,0,0,3770,3771,5,336,0,0,3771,3774,3,
        702,351,0,3772,3773,5,75,0,0,3773,3775,3,650,325,0,3774,3772,1,0,
        0,0,3774,3775,1,0,0,0,3775,3776,1,0,0,0,3776,3777,5,337,0,0,3777,
        649,1,0,0,0,3778,3779,7,19,0,0,3779,651,1,0,0,0,3780,3781,5,299,
        0,0,3781,3782,5,336,0,0,3782,3783,3,654,327,0,3783,3784,5,21,0,0,
        3784,3785,3,702,351,0,3785,3786,5,337,0,0,3786,653,1,0,0,0,3787,
        3788,7,20,0,0,3788,655,1,0,0,0,3789,3802,3,670,335,0,3790,3802,5,
        367,0,0,3791,3802,3,662,331,0,3792,3802,3,664,332,0,3793,3802,3,
        666,333,0,3794,3802,5,362,0,0,3795,3802,3,658,329,0,3796,3802,5,
        364,0,0,3797,3802,5,365,0,0,3798,3802,3,660,330,0,3799,3802,3,710,
        355,0,3800,3802,5,64,0,0,3801,3789,1,0,0,0,3801,3790,1,0,0,0,3801,
        3791,1,0,0,0,3801,3792,1,0,0,0,3801,3793,1,0,0,0,3801,3794,1,0,0,
        0,3801,3795,1,0,0,0,3801,3796,1,0,0,0,3801,3797,1,0,0,0,3801,3798,
        1,0,0,0,3801,3799,1,0,0,0,3801,3800,1,0,0,0,3802,657,1,0,0,0,3803,
        3805,5,362,0,0,3804,3806,5,362,0,0,3805,3804,1,0,0,0,3806,3807,1,
        0,0,0,3807,3805,1,0,0,0,3807,3808,1,0,0,0,3808,659,1,0,0,0,3809,
        3810,5,370,0,0,3810,3811,5,363,0,0,3811,661,1,0,0,0,3812,3813,5,
        85,0,0,3813,3816,5,362,0,0,3814,3816,5,237,0,0,3815,3812,1,0,0,0,
        3815,3814,1,0,0,0,3816,663,1,0,0,0,3817,3818,5,87,0,0,3818,3821,
        5,362,0,0,3819,3821,5,238,0,0,3820,3817,1,0,0,0,3820,3819,1,0,0,
        0,3821,665,1,0,0,0,3822,3823,5,88,0,0,3823,3824,5,362,0,0,3824,667,
        1,0,0,0,3825,3826,7,21,0,0,3826,669,1,0,0,0,3827,3828,3,668,334,
        0,3828,3829,3,674,337,0,3829,671,1,0,0,0,3830,3831,5,336,0,0,3831,
        3832,3,668,334,0,3832,3833,5,337,0,0,3833,3834,3,674,337,0,3834,
        3846,1,0,0,0,3835,3836,5,91,0,0,3836,3837,3,668,334,0,3837,3838,
        3,674,337,0,3838,3846,1,0,0,0,3839,3840,5,91,0,0,3840,3841,5,336,
        0,0,3841,3842,3,702,351,0,3842,3843,5,337,0,0,3843,3844,3,674,337,
        0,3844,3846,1,0,0,0,3845,3830,1,0,0,0,3845,3835,1,0,0,0,3845,3839,
        1,0,0,0,3846,673,1,0,0,0,3847,3848,5,265,0,0,3848,3849,5,75,0,0,
        3849,3860,5,268,0,0,3850,3851,5,270,0,0,3851,3852,5,75,0,0,3852,
        3860,5,274,0,0,3853,3860,5,265,0,0,3854,3860,5,268,0,0,3855,3860,
        5,270,0,0,3856,3860,5,272,0,0,3857,3860,5,273,0,0,3858,3860,5,274,
        0,0,3859,3847,1,0,0,0,3859,3850,1,0,0,0,3859,3853,1,0,0,0,3859,3854,
        1,0,0,0,3859,3855,1,0,0,0,3859,3856,1,0,0,0,3859,3857,1,0,0,0,3859,
        3858,1,0,0,0,3860,675,1,0,0,0,3861,3873,3,656,328,0,3862,3873,3,
        672,336,0,3863,3873,3,642,321,0,3864,3873,3,652,326,0,3865,3873,
        3,648,324,0,3866,3873,3,644,322,0,3867,3873,3,646,323,0,3868,3873,
        3,708,354,0,3869,3873,3,638,319,0,3870,3873,3,534,267,0,3871,3873,
        3,616,308,0,3872,3861,1,0,0,0,3872,3862,1,0,0,0,3872,3863,1,0,0,
        0,3872,3864,1,0,0,0,3872,3865,1,0,0,0,3872,3866,1,0,0,0,3872,3867,
        1,0,0,0,3872,3868,1,0,0,0,3872,3869,1,0,0,0,3872,3870,1,0,0,0,3872,
        3871,1,0,0,0,3873,677,1,0,0,0,3874,3875,7,22,0,0,3875,679,1,0,0,
        0,3876,3878,5,7,0,0,3877,3876,1,0,0,0,3877,3878,1,0,0,0,3878,3884,
        1,0,0,0,3879,3885,5,64,0,0,3880,3885,5,1,0,0,3881,3885,5,2,0,0,3882,
        3883,5,24,0,0,3883,3885,5,21,0,0,3884,3879,1,0,0,0,3884,3880,1,0,
        0,0,3884,3881,1,0,0,0,3884,3882,1,0,0,0,3885,681,1,0,0,0,3886,3887,
        5,359,0,0,3887,683,1,0,0,0,3888,3889,7,23,0,0,3889,685,1,0,0,0,3890,
        3891,7,24,0,0,3891,687,1,0,0,0,3892,3893,5,358,0,0,3893,689,1,0,
        0,0,3894,3895,5,355,0,0,3895,691,1,0,0,0,3896,3897,5,357,0,0,3897,
        693,1,0,0,0,3898,3899,7,25,0,0,3899,695,1,0,0,0,3900,3901,7,26,0,
        0,3901,697,1,0,0,0,3902,3903,5,7,0,0,3903,699,1,0,0,0,3904,3905,
        7,27,0,0,3905,701,1,0,0,0,3906,3907,6,351,-1,0,3907,3908,5,336,0,
        0,3908,3909,3,702,351,0,3909,3910,5,337,0,0,3910,3913,1,0,0,0,3911,
        3913,3,704,352,0,3912,3906,1,0,0,0,3912,3911,1,0,0,0,3913,3920,1,
        0,0,0,3914,3915,10,3,0,0,3915,3916,3,700,350,0,3916,3917,3,702,351,
        4,3917,3919,1,0,0,0,3918,3914,1,0,0,0,3919,3922,1,0,0,0,3920,3918,
        1,0,0,0,3920,3921,1,0,0,0,3921,703,1,0,0,0,3922,3920,1,0,0,0,3923,
        3924,6,352,-1,0,3924,3933,3,676,338,0,3925,3926,5,338,0,0,3926,3927,
        3,702,351,0,3927,3928,5,339,0,0,3928,3932,1,0,0,0,3929,3930,5,332,
        0,0,3930,3932,3,730,365,0,3931,3925,1,0,0,0,3931,3929,1,0,0,0,3932,
        3935,1,0,0,0,3933,3931,1,0,0,0,3933,3934,1,0,0,0,3934,3945,1,0,0,
        0,3935,3933,1,0,0,0,3936,3937,3,678,339,0,3937,3938,3,704,352,15,
        3938,3945,1,0,0,0,3939,3940,5,11,0,0,3940,3945,3,708,354,0,3941,
        3942,3,698,349,0,3942,3943,3,704,352,1,3943,3945,1,0,0,0,3944,3923,
        1,0,0,0,3944,3936,1,0,0,0,3944,3939,1,0,0,0,3944,3941,1,0,0,0,3945,
        4008,1,0,0,0,3946,3947,10,13,0,0,3947,3948,3,682,341,0,3948,3949,
        3,704,352,14,3949,4007,1,0,0,0,3950,3951,10,12,0,0,3951,3952,3,684,
        342,0,3952,3953,3,704,352,13,3953,4007,1,0,0,0,3954,3955,10,11,0,
        0,3955,3956,3,686,343,0,3956,3957,3,704,352,12,3957,4007,1,0,0,0,
        3958,3959,10,10,0,0,3959,3960,3,688,344,0,3960,3961,3,704,352,11,
        3961,4007,1,0,0,0,3962,3963,10,9,0,0,3963,3964,3,690,345,0,3964,
        3965,3,704,352,10,3965,4007,1,0,0,0,3966,3967,10,8,0,0,3967,3968,
        3,692,346,0,3968,3969,3,704,352,9,3969,4007,1,0,0,0,3970,3971,10,
        7,0,0,3971,3972,3,696,348,0,3972,3973,3,704,352,8,3973,4007,1,0,
        0,0,3974,3976,10,6,0,0,3975,3977,5,7,0,0,3976,3975,1,0,0,0,3976,
        3977,1,0,0,0,3977,3978,1,0,0,0,3978,3979,3,694,347,0,3979,3980,3,
        704,352,7,3980,4007,1,0,0,0,3981,3983,10,3,0,0,3982,3984,5,7,0,0,
        3983,3982,1,0,0,0,3983,3984,1,0,0,0,3984,3985,1,0,0,0,3985,3986,
        5,204,0,0,3986,3987,3,704,352,0,3987,3988,5,5,0,0,3988,3989,3,704,
        352,4,3989,4007,1,0,0,0,3990,3991,10,14,0,0,3991,3992,5,63,0,0,3992,
        4007,3,680,340,0,3993,3995,10,5,0,0,3994,3996,5,7,0,0,3995,3994,
        1,0,0,0,3995,3996,1,0,0,0,3996,3997,1,0,0,0,3997,3998,5,8,0,0,3998,
        3999,7,28,0,0,3999,4007,3,616,308,0,4000,4002,10,4,0,0,4001,4003,
        5,7,0,0,4002,4001,1,0,0,0,4002,4003,1,0,0,0,4003,4004,1,0,0,0,4004,
        4005,5,180,0,0,4005,4007,3,706,353,0,4006,3946,1,0,0,0,4006,3950,
        1,0,0,0,4006,3954,1,0,0,0,4006,3958,1,0,0,0,4006,3962,1,0,0,0,4006,
        3966,1,0,0,0,4006,3970,1,0,0,0,4006,3974,1,0,0,0,4006,3981,1,0,0,
        0,4006,3990,1,0,0,0,4006,3993,1,0,0,0,4006,4000,1,0,0,0,4007,4010,
        1,0,0,0,4008,4006,1,0,0,0,4008,4009,1,0,0,0,4009,705,1,0,0,0,4010,
        4008,1,0,0,0,4011,4014,3,708,354,0,4012,4014,3,616,308,0,4013,4011,
        1,0,0,0,4013,4012,1,0,0,0,4014,707,1,0,0,0,4015,4016,5,336,0,0,4016,
        4017,3,446,223,0,4017,4018,5,337,0,0,4018,709,1,0,0,0,4019,4020,
        7,29,0,0,4020,711,1,0,0,0,4021,4022,7,29,0,0,4022,713,1,0,0,0,4023,
        4025,3,572,286,0,4024,4026,3,716,358,0,4025,4024,1,0,0,0,4025,4026,
        1,0,0,0,4026,715,1,0,0,0,4027,4028,5,35,0,0,4028,4029,5,336,0,0,
        4029,4034,3,718,359,0,4030,4031,5,334,0,0,4031,4033,3,718,359,0,
        4032,4030,1,0,0,0,4033,4036,1,0,0,0,4034,4032,1,0,0,0,4034,4035,
        1,0,0,0,4035,4037,1,0,0,0,4036,4034,1,0,0,0,4037,4038,5,337,0,0,
        4038,717,1,0,0,0,4039,4042,3,730,365,0,4040,4041,5,342,0,0,4041,
        4043,3,656,328,0,4042,4040,1,0,0,0,4042,4043,1,0,0,0,4043,719,1,
        0,0,0,4044,4045,5,35,0,0,4045,4046,5,336,0,0,4046,4051,3,722,361,
        0,4047,4048,5,334,0,0,4048,4050,3,722,361,0,4049,4047,1,0,0,0,4050,
        4053,1,0,0,0,4051,4049,1,0,0,0,4051,4052,1,0,0,0,4052,4054,1,0,0,
        0,4053,4051,1,0,0,0,4054,4055,5,337,0,0,4055,721,1,0,0,0,4056,4057,
        3,730,365,0,4057,4058,3,724,362,0,4058,4059,3,656,328,0,4059,723,
        1,0,0,0,4060,4061,7,30,0,0,4061,725,1,0,0,0,4062,4063,7,31,0,0,4063,
        727,1,0,0,0,4064,4068,3,726,363,0,4065,4068,5,362,0,0,4066,4068,
        3,732,366,0,4067,4064,1,0,0,0,4067,4065,1,0,0,0,4067,4066,1,0,0,
        0,4068,729,1,0,0,0,4069,4072,5,368,0,0,4070,4072,3,736,368,0,4071,
        4069,1,0,0,0,4071,4070,1,0,0,0,4072,731,1,0,0,0,4073,4074,3,730,
        365,0,4074,4075,5,332,0,0,4075,4076,3,730,365,0,4076,4079,1,0,0,
        0,4077,4079,3,730,365,0,4078,4073,1,0,0,0,4078,4077,1,0,0,0,4079,
        733,1,0,0,0,4080,4083,3,730,365,0,4081,4083,5,369,0,0,4082,4080,
        1,0,0,0,4082,4081,1,0,0,0,4083,735,1,0,0,0,4084,4085,7,32,0,0,4085,
        737,1,0,0,0,4086,4087,7,33,0,0,4087,739,1,0,0,0,496,745,752,756,
        762,768,779,782,784,802,807,812,818,822,835,839,843,848,855,861,
        865,867,871,878,880,886,897,905,909,951,978,982,985,990,1004,1013,
        1017,1024,1027,1031,1037,1040,1043,1046,1052,1055,1058,1061,1064,
        1067,1070,1073,1076,1080,1082,1092,1097,1101,1104,1115,1131,1146,
        1150,1165,1178,1182,1187,1214,1219,1227,1233,1237,1240,1243,1249,
        1256,1266,1270,1275,1279,1285,1292,1299,1307,1314,1318,1321,1329,
        1332,1340,1343,1347,1357,1362,1368,1381,1397,1413,1429,1436,1456,
        1460,1465,1470,1473,1476,1480,1483,1486,1493,1504,1512,1518,1534,
        1537,1547,1555,1559,1562,1566,1570,1573,1578,1583,1589,1600,1602,
        1606,1612,1618,1623,1629,1634,1641,1646,1654,1659,1666,1672,1680,
        1687,1692,1700,1707,1710,1713,1715,1729,1731,1737,1752,1769,1774,
        1778,1782,1789,1796,1802,1806,1809,1816,1839,1844,1848,1856,1864,
        1868,1874,1879,1886,1889,1895,1902,1910,1919,1928,1948,1954,1957,
        1959,1966,1976,1984,1988,1992,2005,2014,2020,2024,2031,2034,2037,
        2040,2049,2053,2056,2059,2062,2065,2068,2082,2090,2096,2100,2113,
        2129,2145,2149,2164,2170,2173,2176,2179,2182,2186,2200,2208,2211,
        2226,2260,2268,2273,2283,2291,2299,2307,2318,2322,2330,2339,2342,
        2351,2355,2357,2361,2365,2371,2378,2387,2398,2402,2409,2421,2428,
        2436,2440,2443,2450,2456,2460,2463,2469,2473,2477,2482,2486,2490,
        2494,2502,2506,2510,2514,2518,2526,2530,2534,2550,2559,2567,2577,
        2595,2598,2608,2636,2642,2648,2654,2656,2659,2665,2673,2688,2695,
        2700,2703,2707,2710,2713,2716,2719,2725,2729,2732,2735,2738,2741,
        2744,2751,2754,2761,2764,2767,2770,2773,2776,2779,2782,2785,2788,
        2792,2795,2798,2801,2804,2807,2810,2813,2816,2819,2821,2827,2832,
        2839,2841,2844,2849,2852,2856,2861,2868,2874,2886,2893,2899,2908,
        2911,2915,2921,2931,2935,2946,2952,2955,2965,2967,2971,2978,3000,
        3007,3011,3014,3019,3022,3029,3036,3039,3047,3053,3055,3057,3060,
        3063,3068,3078,3083,3085,3091,3094,3097,3105,3111,3113,3115,3118,
        3121,3125,3132,3141,3151,3154,3157,3160,3164,3174,3184,3192,3200,
        3207,3216,3224,3236,3239,3245,3252,3259,3266,3273,3282,3286,3293,
        3298,3302,3321,3326,3331,3337,3350,3353,3356,3368,3371,3374,3382,
        3391,3396,3398,3415,3418,3431,3435,3439,3442,3445,3448,3452,3455,
        3458,3465,3470,3478,3484,3489,3493,3498,3505,3519,3522,3526,3541,
        3551,3560,3563,3574,3586,3596,3606,3611,3615,3619,3625,3643,3649,
        3653,3661,3671,3681,3700,3706,3713,3716,3718,3723,3727,3745,3749,
        3761,3765,3774,3801,3807,3815,3820,3845,3859,3872,3877,3884,3912,
        3920,3931,3933,3944,3976,3983,3995,4002,4006,4008,4013,4025,4034,
        4042,4051,4067,4071,4078,4082
    ]

class HiveParser ( Parser ):

    grammarFileName = "HiveParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'TRUE'", "'FALSE'", "'ALL'", "'NONE'", 
                     "'AND'", "'OR'", "<INVALID>", "'LIKE'", "'ANY'", "'IF'", 
                     "'EXISTS'", "'ASC'", "'DESC'", "'NULLS'", "'LAST'", 
                     "'ORDER'", "'GROUP'", "'BY'", "'HAVING'", "'WHERE'", 
                     "'FROM'", "'AS'", "'SELECT'", "'DISTINCT'", "'INSERT'", 
                     "'OVERWRITE'", "'OUTER'", "'UNIQUEJOIN'", "'PRESERVE'", 
                     "'JOIN'", "'LEFT'", "'RIGHT'", "'FULL'", "'ON'", "'PARTITION'", 
                     "'PARTITIONS'", "'TABLE'", "'TABLES'", "'COLUMNS'", 
                     "'INDEX'", "'INDEXES'", "'REBUILD'", "'FUNCTIONS'", 
                     "'SHOW'", "'MSCK'", "'REPAIR'", "'DIRECTORY'", "'LOCAL'", 
                     "'TRANSFORM'", "'USING'", "'CLUSTER'", "'DISTRIBUTE'", 
                     "'SORT'", "'UNION'", "'EXCEPT'", "'LOAD'", "'EXPORT'", 
                     "'IMPORT'", "'REPLICATION'", "'METADATA'", "'DATA'", 
                     "'INPATH'", "'IS'", "'NULL'", "'CREATE'", "'EXTERNAL'", 
                     "'ALTER'", "'CHANGE'", "'COLUMN'", "'FIRST'", "'AFTER'", 
                     "'DESCRIBE'", "'DROP'", "'RENAME'", "'TO'", "'COMMENT'", 
                     "'BOOLEAN'", "'TINYINT'", "'SMALLINT'", "<INVALID>", 
                     "'BIGINT'", "'FLOAT'", "'DOUBLE'", "'PRECISION'", "'DATE'", 
                     "'DATETIME'", "'TIMESTAMP'", "'TIMESTAMPLOCALTZ'", 
                     "'TIME'", "'ZONE'", "'INTERVAL'", "<INVALID>", "'STRING'", 
                     "'CHAR'", "'VARCHAR'", "'ARRAY'", "'STRUCT'", "'MAP'", 
                     "'UNIONTYPE'", "'REDUCE'", "'PARTITIONED'", "'CLUSTERED'", 
                     "'SORTED'", "'INTO'", "'BUCKETS'", "'ROW'", "'ROWS'", 
                     "'FORMAT'", "'DELIMITED'", "'FIELDS'", "'TERMINATED'", 
                     "'ESCAPED'", "'COLLECTION'", "'ITEMS'", "'KEYS'", "'$KEY$'", 
                     "'KILL'", "'LINES'", "'STORED'", "'FILEFORMAT'", "'INPUTFORMAT'", 
                     "'OUTPUTFORMAT'", "'INPUTDRIVER'", "'OUTPUTDRIVER'", 
                     "'ENABLE'", "'DISABLE'", "'LOCATION'", "'TABLESAMPLE'", 
                     "'BUCKET'", "'OUT'", "'OF'", "'PERCENT'", "'CAST'", 
                     "'ADD'", "'REPLACE'", "'RLIKE'", "'REGEXP'", "'TEMPORARY'", 
                     "'FUNCTION'", "'MACRO'", "'FILE'", "'JAR'", "'EXPLAIN'", 
                     "'EXTENDED'", "'FORMATTED'", "'DEPENDENCY'", "'LOGICAL'", 
                     "'SERDE'", "'WITH'", "'DEFERRED'", "'SERDEPROPERTIES'", 
                     "'DBPROPERTIES'", "'LIMIT'", "'OFFSET'", "'SET'", "'UNSET'", 
                     "'TBLPROPERTIES'", "'IDXPROPERTIES'", "'$VALUE$'", 
                     "'$ELEM$'", "'DEFINED'", "'CASE'", "'WHEN'", "'THEN'", 
                     "'ELSE'", "'END'", "'MAPJOIN'", "'STREAMTABLE'", "'CLUSTERSTATUS'", 
                     "'UTC'", "'UTC_TMESTAMP'", "'LONG'", "'DELETE'", "'PLUS'", 
                     "'MINUS'", "'FETCH'", "'INTERSECT'", "'VIEW'", "'VIEWS'", 
                     "'IN'", "'DATABASE'", "'DATABASES'", "'MATERIALIZED'", 
                     "'SCHEMA'", "'SCHEMAS'", "'GRANT'", "'REVOKE'", "'SSL'", 
                     "'UNDO'", "'LOCK'", "'LOCKS'", "'UNLOCK'", "'SHARED'", 
                     "'EXCLUSIVE'", "'PROCEDURE'", "'UNSIGNED'", "'WHILE'", 
                     "'READ'", "'READS'", "'PURGE'", "'RANGE'", "'ANALYZE'", 
                     "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BINARY'", "'CROSS'", 
                     "'CONTINUE'", "'CURSOR'", "'TRIGGER'", "'RECORDREADER'", 
                     "'RECORDWRITER'", "'SEMI'", "'LATERAL'", "'TOUCH'", 
                     "'ARCHIVE'", "'UNARCHIVE'", "'COMPUTE'", "'STATISTICS'", 
                     "'USE'", "'OPTION'", "'CONCATENATE'", "'SHOW_DATABASE'", 
                     "'UPDATE'", "'RESTRICT'", "'CASCADE'", "'SKEWED'", 
                     "'ROLLUP'", "'CUBE'", "'DIRECTORIES'", "'FOR'", "'WINDOW'", 
                     "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", 
                     "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'LESS'", 
                     "'MORE'", "'OVER'", "'GROUPING'", "'SETS'", "'TRUNCATE'", 
                     "'NOSCAN'", "'USER'", "'ROLE'", "'ROLES'", "'INNER'", 
                     "'EXCHANGE'", "'URI'", "'SERVER'", "'ADMIN'", "'OWNER'", 
                     "'PRINCIPALS'", "'COMPACT'", "'COMPACTIONS'", "'TRANSACTIONS'", 
                     "'REWRITE'", "'AUTHORIZATION'", "'REOPTIMIZATION'", 
                     "'CONF'", "'VALUES'", "'RELOAD'", "<INVALID>", "'QUERY'", 
                     "'QUARTER'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'DAYOFWEEK'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'WORK'", "'ONLY'", "'WRITE'", "'ISOLATION'", "'LEVEL'", 
                     "'SNAPSHOT'", "'AUTOCOMMIT'", "'CACHE'", "'PRIMARY'", 
                     "'FOREIGN'", "'REFERENCES'", "'CONSTRAINT'", "'ENFORCED'", 
                     "'VALIDATE'", "'NOVALIDATE'", "'RELY'", "'NORELY'", 
                     "'UNIQUE'", "'KEY'", "'ABORT'", "'EXTRACT'", "'FLOOR'", 
                     "'MERGE'", "'MATCHED'", "'REPL'", "'DUMP'", "'STATUS'", 
                     "'VECTORIZATION'", "'SUMMARY'", "'OPERATOR'", "'EXPRESSION'", 
                     "'DETAIL'", "'WAIT'", "'RESOURCE'", "'PLAN'", "'QUERY_PARALLELISM'", 
                     "'PLANS'", "'ACTIVATE'", "'DEFAULT'", "'CHECK'", "'POOL'", 
                     "'MOVE'", "'DO'", "'ALLOC_FRACTION'", "'SCHEDULING_POLICY'", 
                     "'PATH'", "'MAPPING'", "'WORKLOAD'", "'MANAGEMENT'", 
                     "'ACTIVE'", "'UNMANAGED'", "'APPLICATION'", "'SYNC'", 
                     "'.'", "':'", "','", "';'", "'('", "')'", "'['", "']'", 
                     "'{'", "'}'", "<INVALID>", "'<=>'", "<INVALID>", "'<='", 
                     "'<'", "'>='", "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", 
                     "'DIV'", "'&'", "'~'", "'|'", "'||'", "'^'", "'?'", 
                     "'$'" ]

    symbolicNames = [ "<INVALID>", "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", 
                      "KW_AND", "KW_OR", "KW_NOT", "KW_LIKE", "KW_ANY", 
                      "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", "KW_NULLS", 
                      "KW_LAST", "KW_ORDER", "KW_GROUP", "KW_BY", "KW_HAVING", 
                      "KW_WHERE", "KW_FROM", "KW_AS", "KW_SELECT", "KW_DISTINCT", 
                      "KW_INSERT", "KW_OVERWRITE", "KW_OUTER", "KW_UNIQUEJOIN", 
                      "KW_PRESERVE", "KW_JOIN", "KW_LEFT", "KW_RIGHT", "KW_FULL", 
                      "KW_ON", "KW_PARTITION", "KW_PARTITIONS", "KW_TABLE", 
                      "KW_TABLES", "KW_COLUMNS", "KW_INDEX", "KW_INDEXES", 
                      "KW_REBUILD", "KW_FUNCTIONS", "KW_SHOW", "KW_MSCK", 
                      "KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", "KW_TRANSFORM", 
                      "KW_USING", "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", 
                      "KW_UNION", "KW_EXCEPT", "KW_LOAD", "KW_EXPORT", "KW_IMPORT", 
                      "KW_REPLICATION", "KW_METADATA", "KW_DATA", "KW_INPATH", 
                      "KW_IS", "KW_NULL", "KW_CREATE", "KW_EXTERNAL", "KW_ALTER", 
                      "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", 
                      "KW_DESCRIBE", "KW_DROP", "KW_RENAME", "KW_TO", "KW_COMMENT", 
                      "KW_BOOLEAN", "KW_TINYINT", "KW_SMALLINT", "KW_INT", 
                      "KW_BIGINT", "KW_FLOAT", "KW_DOUBLE", "KW_PRECISION", 
                      "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", 
                      "KW_TIME", "KW_ZONE", "KW_INTERVAL", "KW_DECIMAL", 
                      "KW_STRING", "KW_CHAR", "KW_VARCHAR", "KW_ARRAY", 
                      "KW_STRUCT", "KW_MAP", "KW_UNIONTYPE", "KW_REDUCE", 
                      "KW_PARTITIONED", "KW_CLUSTERED", "KW_SORTED", "KW_INTO", 
                      "KW_BUCKETS", "KW_ROW", "KW_ROWS", "KW_FORMAT", "KW_DELIMITED", 
                      "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", 
                      "KW_ITEMS", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LINES", 
                      "KW_STORED", "KW_FILEFORMAT", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", 
                      "KW_INPUTDRIVER", "KW_OUTPUTDRIVER", "KW_ENABLE", 
                      "KW_DISABLE", "KW_LOCATION", "KW_TABLESAMPLE", "KW_BUCKET", 
                      "KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", "KW_ADD", 
                      "KW_REPLACE", "KW_RLIKE", "KW_REGEXP", "KW_TEMPORARY", 
                      "KW_FUNCTION", "KW_MACRO", "KW_FILE", "KW_JAR", "KW_EXPLAIN", 
                      "KW_EXTENDED", "KW_FORMATTED", "KW_DEPENDENCY", "KW_LOGICAL", 
                      "KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
                      "KW_DBPROPERTIES", "KW_LIMIT", "KW_OFFSET", "KW_SET", 
                      "KW_UNSET", "KW_TBLPROPERTIES", "KW_IDXPROPERTIES", 
                      "KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", "KW_CASE", 
                      "KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "KW_MAPJOIN", 
                      "KW_STREAMTABLE", "KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", 
                      "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS", "KW_FETCH", 
                      "KW_INTERSECT", "KW_VIEW", "KW_VIEWS", "KW_IN", "KW_DATABASE", 
                      "KW_DATABASES", "KW_MATERIALIZED", "KW_SCHEMA", "KW_SCHEMAS", 
                      "KW_GRANT", "KW_REVOKE", "KW_SSL", "KW_UNDO", "KW_LOCK", 
                      "KW_LOCKS", "KW_UNLOCK", "KW_SHARED", "KW_EXCLUSIVE", 
                      "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", 
                      "KW_READS", "KW_PURGE", "KW_RANGE", "KW_ANALYZE", 
                      "KW_BEFORE", "KW_BETWEEN", "KW_BOTH", "KW_BINARY", 
                      "KW_CROSS", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", 
                      "KW_RECORDREADER", "KW_RECORDWRITER", "KW_SEMI", "KW_LATERAL", 
                      "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_COMPUTE", 
                      "KW_STATISTICS", "KW_USE", "KW_OPTION", "KW_CONCATENATE", 
                      "KW_SHOW_DATABASE", "KW_UPDATE", "KW_RESTRICT", "KW_CASCADE", 
                      "KW_SKEWED", "KW_ROLLUP", "KW_CUBE", "KW_DIRECTORIES", 
                      "KW_FOR", "KW_WINDOW", "KW_UNBOUNDED", "KW_PRECEDING", 
                      "KW_FOLLOWING", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
                      "KW_LESS", "KW_MORE", "KW_OVER", "KW_GROUPING", "KW_SETS", 
                      "KW_TRUNCATE", "KW_NOSCAN", "KW_USER", "KW_ROLE", 
                      "KW_ROLES", "KW_INNER", "KW_EXCHANGE", "KW_URI", "KW_SERVER", 
                      "KW_ADMIN", "KW_OWNER", "KW_PRINCIPALS", "KW_COMPACT", 
                      "KW_COMPACTIONS", "KW_TRANSACTIONS", "KW_REWRITE", 
                      "KW_AUTHORIZATION", "KW_REOPTIMIZATION", "KW_CONF", 
                      "KW_VALUES", "KW_RELOAD", "KW_YEAR", "KW_QUERY", "KW_QUARTER", 
                      "KW_MONTH", "KW_WEEK", "KW_DAY", "KW_DOW", "KW_HOUR", 
                      "KW_MINUTE", "KW_SECOND", "KW_START", "KW_TRANSACTION", 
                      "KW_COMMIT", "KW_ROLLBACK", "KW_WORK", "KW_ONLY", 
                      "KW_WRITE", "KW_ISOLATION", "KW_LEVEL", "KW_SNAPSHOT", 
                      "KW_AUTOCOMMIT", "KW_CACHE", "KW_PRIMARY", "KW_FOREIGN", 
                      "KW_REFERENCES", "KW_CONSTRAINT", "KW_ENFORCED", "KW_VALIDATE", 
                      "KW_NOVALIDATE", "KW_RELY", "KW_NORELY", "KW_UNIQUE", 
                      "KW_KEY", "KW_ABORT", "KW_EXTRACT", "KW_FLOOR", "KW_MERGE", 
                      "KW_MATCHED", "KW_REPL", "KW_DUMP", "KW_STATUS", "KW_VECTORIZATION", 
                      "KW_SUMMARY", "KW_OPERATOR", "KW_EXPRESSION", "KW_DETAIL", 
                      "KW_WAIT", "KW_RESOURCE", "KW_PLAN", "KW_QUERY_PARALLELISM", 
                      "KW_PLANS", "KW_ACTIVATE", "KW_DEFAULT", "KW_CHECK", 
                      "KW_POOL", "KW_MOVE", "KW_DO", "KW_ALLOC_FRACTION", 
                      "KW_SCHEDULING_POLICY", "KW_PATH", "KW_MAPPING", "KW_WORKLOAD", 
                      "KW_MANAGEMENT", "KW_ACTIVE", "KW_UNMANAGED", "KW_APPLICATION", 
                      "KW_SYNC", "DOT", "COLON", "COMMA", "SEMICOLON", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", 
                      "EQUAL", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", 
                      "LESSTHAN", "GREATERTHANOREQUALTO", "GREATERTHAN", 
                      "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", "AMPERSAND", 
                      "TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", 
                      "QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", 
                      "IntegralLiteral", "NumberLiteral", "ByteLengthLiteral", 
                      "Number", "Identifier", "QuotedIdentifier", "CharSetName", 
                      "WS", "LINE_COMMENT", "QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT" ]

    RULE_statements = 0
    RULE_statementSeparator = 1
    RULE_statement = 2
    RULE_explainStatement = 3
    RULE_explainOption = 4
    RULE_vectorizationOnly = 5
    RULE_vectorizatonDetail = 6
    RULE_execStatement = 7
    RULE_loadStatement = 8
    RULE_replicationClause = 9
    RULE_exportStatement = 10
    RULE_importStatement = 11
    RULE_replDumpStatement = 12
    RULE_replLoadStatement = 13
    RULE_replConfigs = 14
    RULE_replConfigsList = 15
    RULE_replStatusStatement = 16
    RULE_ddlStatement = 17
    RULE_ifExists = 18
    RULE_restrictOrCascade = 19
    RULE_ifNotExists = 20
    RULE_rewriteEnabled = 21
    RULE_rewriteDisabled = 22
    RULE_storedAsDirs = 23
    RULE_orReplace = 24
    RULE_createDatabaseStatement = 25
    RULE_dbLocation = 26
    RULE_dbProperties = 27
    RULE_dbPropertiesList = 28
    RULE_switchDatabaseStatement = 29
    RULE_dropDatabaseStatement = 30
    RULE_databaseComment = 31
    RULE_createTableStatement = 32
    RULE_truncateTableStatement = 33
    RULE_dropTableStatement = 34
    RULE_alterStatement = 35
    RULE_alterTableStatementSuffix = 36
    RULE_alterTblPartitionStatementSuffix = 37
    RULE_alterStatementPartitionKeyType = 38
    RULE_alterViewStatementSuffix = 39
    RULE_alterMaterializedViewStatementSuffix = 40
    RULE_alterDatabaseStatementSuffix = 41
    RULE_alterDatabaseSuffixProperties = 42
    RULE_alterDatabaseSuffixSetOwner = 43
    RULE_alterDatabaseSuffixSetLocation = 44
    RULE_alterStatementSuffixRename = 45
    RULE_alterStatementSuffixAddCol = 46
    RULE_alterStatementSuffixAddConstraint = 47
    RULE_alterStatementSuffixDropConstraint = 48
    RULE_alterStatementSuffixRenameCol = 49
    RULE_alterStatementSuffixUpdateStatsCol = 50
    RULE_alterStatementSuffixUpdateStats = 51
    RULE_alterStatementChangeColPosition = 52
    RULE_alterStatementSuffixAddPartitions = 53
    RULE_alterStatementSuffixAddPartitionsElement = 54
    RULE_alterStatementSuffixTouch = 55
    RULE_alterStatementSuffixArchive = 56
    RULE_alterStatementSuffixUnArchive = 57
    RULE_partitionLocation = 58
    RULE_alterStatementSuffixDropPartitions = 59
    RULE_alterStatementSuffixProperties = 60
    RULE_alterViewSuffixProperties = 61
    RULE_alterMaterializedViewSuffixRewrite = 62
    RULE_alterMaterializedViewSuffixRebuild = 63
    RULE_alterStatementSuffixSerdeProperties = 64
    RULE_alterIndexStatementSuffix = 65
    RULE_alterStatementSuffixFileFormat = 66
    RULE_alterStatementSuffixClusterbySortby = 67
    RULE_alterTblPartitionStatementSuffixSkewedLocation = 68
    RULE_skewedLocations = 69
    RULE_skewedLocationsList = 70
    RULE_skewedLocationMap = 71
    RULE_alterStatementSuffixLocation = 72
    RULE_alterStatementSuffixSkewedby = 73
    RULE_alterStatementSuffixExchangePartition = 74
    RULE_alterStatementSuffixRenamePart = 75
    RULE_alterStatementSuffixStatsPart = 76
    RULE_alterStatementSuffixMergeFiles = 77
    RULE_alterStatementSuffixBucketNum = 78
    RULE_createIndexStatement = 79
    RULE_locationPath = 80
    RULE_dropIndexStatement = 81
    RULE_tablePartitionPrefix = 82
    RULE_blocking = 83
    RULE_alterStatementSuffixCompact = 84
    RULE_alterStatementSuffixSetOwner = 85
    RULE_fileFormat = 86
    RULE_inputFileFormat = 87
    RULE_tabTypeExpr = 88
    RULE_partTypeExpr = 89
    RULE_tabPartColTypeExpr = 90
    RULE_descStatement = 91
    RULE_analyzeStatement = 92
    RULE_showStatement = 93
    RULE_lockStatement = 94
    RULE_lockDatabase = 95
    RULE_lockMode = 96
    RULE_unlockStatement = 97
    RULE_unlockDatabase = 98
    RULE_createRoleStatement = 99
    RULE_dropRoleStatement = 100
    RULE_grantPrivileges = 101
    RULE_revokePrivileges = 102
    RULE_grantRole = 103
    RULE_revokeRole = 104
    RULE_showRoleGrants = 105
    RULE_showRoles = 106
    RULE_showCurrentRole = 107
    RULE_setRole = 108
    RULE_showGrants = 109
    RULE_showRolePrincipals = 110
    RULE_privilegeIncludeColObject = 111
    RULE_privilegeObject = 112
    RULE_privObject = 113
    RULE_privObjectCols = 114
    RULE_privilegeList = 115
    RULE_privlegeDef = 116
    RULE_privilegeType = 117
    RULE_principalSpecification = 118
    RULE_principalName = 119
    RULE_withGrantOption = 120
    RULE_grantOptionFor = 121
    RULE_adminOptionFor = 122
    RULE_withAdminOption = 123
    RULE_metastoreCheck = 124
    RULE_resourceList = 125
    RULE_resource = 126
    RULE_resourceType = 127
    RULE_createFunctionStatement = 128
    RULE_dropFunctionStatement = 129
    RULE_reloadFunctionStatement = 130
    RULE_createMacroStatement = 131
    RULE_dropMacroStatement = 132
    RULE_createViewStatement = 133
    RULE_createMaterializedViewStatement = 134
    RULE_viewPartition = 135
    RULE_dropViewStatement = 136
    RULE_dropMaterializedViewStatement = 137
    RULE_showFunctionIdentifier = 138
    RULE_showStmtIdentifier = 139
    RULE_tableComment = 140
    RULE_tablePartition = 141
    RULE_tableBuckets = 142
    RULE_tableSkewed = 143
    RULE_rowFormat = 144
    RULE_recordReader = 145
    RULE_recordWriter = 146
    RULE_rowFormatSerde = 147
    RULE_rowFormatDelimited = 148
    RULE_tableRowFormat = 149
    RULE_tablePropertiesPrefixed = 150
    RULE_tableProperties = 151
    RULE_tablePropertiesList = 152
    RULE_keyValueProperty = 153
    RULE_keyProperty = 154
    RULE_tableRowFormatFieldIdentifier = 155
    RULE_tableRowFormatCollItemsIdentifier = 156
    RULE_tableRowFormatMapKeysIdentifier = 157
    RULE_tableRowFormatLinesIdentifier = 158
    RULE_tableRowNullFormat = 159
    RULE_tableFileFormat = 160
    RULE_tableLocation = 161
    RULE_columnNameTypeList = 162
    RULE_columnNameTypeOrConstraintList = 163
    RULE_columnNameColonTypeList = 164
    RULE_columnNameList = 165
    RULE_columnName = 166
    RULE_extColumnName = 167
    RULE_columnNameOrderList = 168
    RULE_columnParenthesesList = 169
    RULE_enableValidateSpecification = 170
    RULE_enableSpecification = 171
    RULE_validateSpecification = 172
    RULE_enforcedSpecification = 173
    RULE_relySpecification = 174
    RULE_createConstraint = 175
    RULE_alterConstraintWithName = 176
    RULE_pkConstraint = 177
    RULE_createForeignKey = 178
    RULE_alterForeignKeyWithName = 179
    RULE_skewedValueElement = 180
    RULE_skewedColumnValuePairList = 181
    RULE_skewedColumnValuePair = 182
    RULE_skewedColumnValues = 183
    RULE_skewedColumnValue = 184
    RULE_skewedValueLocationElement = 185
    RULE_orderSpecification = 186
    RULE_nullOrdering = 187
    RULE_columnNameOrder = 188
    RULE_columnNameCommentList = 189
    RULE_columnNameComment = 190
    RULE_columnRefOrder = 191
    RULE_columnNameType = 192
    RULE_columnNameTypeOrConstraint = 193
    RULE_tableConstraint = 194
    RULE_columnNameTypeConstraint = 195
    RULE_columnConstraint = 196
    RULE_foreignKeyConstraint = 197
    RULE_colConstraint = 198
    RULE_alterColumnConstraint = 199
    RULE_alterForeignKeyConstraint = 200
    RULE_alterColConstraint = 201
    RULE_tableConstraintPrimaryKey = 202
    RULE_constraintOptsCreate = 203
    RULE_constraintOptsAlter = 204
    RULE_columnNameColonType = 205
    RULE_colType = 206
    RULE_colTypeList = 207
    RULE_type_db_col = 208
    RULE_primitiveType = 209
    RULE_listType = 210
    RULE_structType = 211
    RULE_mapType = 212
    RULE_unionType = 213
    RULE_setOperator = 214
    RULE_queryStatementExpression = 215
    RULE_queryStatementExpressionBody = 216
    RULE_withClause = 217
    RULE_cteStatement = 218
    RULE_fromStatement = 219
    RULE_singleFromStatement = 220
    RULE_regularBody = 221
    RULE_atomSelectStatement = 222
    RULE_selectStatement = 223
    RULE_setOpSelectStatement = 224
    RULE_selectStatementWithCTE = 225
    RULE_body = 226
    RULE_insertClause = 227
    RULE_destination = 228
    RULE_limitClause = 229
    RULE_deleteStatement = 230
    RULE_columnAssignmentClause = 231
    RULE_setColumnsClause = 232
    RULE_updateStatement = 233
    RULE_sqlTransactionStatement = 234
    RULE_startTransactionStatement = 235
    RULE_transactionMode = 236
    RULE_transactionAccessMode = 237
    RULE_isolationLevel = 238
    RULE_levelOfIsolation = 239
    RULE_commitStatement = 240
    RULE_rollbackStatement = 241
    RULE_setAutoCommitStatement = 242
    RULE_abortTransactionStatement = 243
    RULE_mergeStatement = 244
    RULE_whenClauses = 245
    RULE_whenNotMatchedClause = 246
    RULE_whenMatchedAndClause = 247
    RULE_whenMatchedThenClause = 248
    RULE_updateOrDelete = 249
    RULE_killQueryStatement = 250
    RULE_selectClause = 251
    RULE_selectList = 252
    RULE_selectTrfmClause = 253
    RULE_selectItem = 254
    RULE_trfmClause = 255
    RULE_selectExpression = 256
    RULE_selectExpressionList = 257
    RULE_window_clause = 258
    RULE_window_defn = 259
    RULE_window_specification = 260
    RULE_window_frame = 261
    RULE_window_range_expression = 262
    RULE_window_value_expression = 263
    RULE_window_frame_start_boundary = 264
    RULE_window_frame_boundary = 265
    RULE_tableAllColumns = 266
    RULE_tableOrColumn = 267
    RULE_expressionList = 268
    RULE_aliasList = 269
    RULE_fromClause = 270
    RULE_fromSource = 271
    RULE_atomjoinSource = 272
    RULE_joinSource = 273
    RULE_joinSourcePart = 274
    RULE_uniqueJoinSource = 275
    RULE_uniqueJoinExpr = 276
    RULE_uniqueJoinToken = 277
    RULE_joinToken = 278
    RULE_lateralView = 279
    RULE_tableAlias = 280
    RULE_tableBucketSample = 281
    RULE_splitSample = 282
    RULE_tableSample = 283
    RULE_tableSource = 284
    RULE_uniqueJoinTableSource = 285
    RULE_tableName = 286
    RULE_viewName = 287
    RULE_subQuerySource = 288
    RULE_partitioningSpec = 289
    RULE_partitionTableFunctionSource = 290
    RULE_partitionedTableFunction = 291
    RULE_whereClause = 292
    RULE_searchCondition = 293
    RULE_valuesClause = 294
    RULE_valuesTableConstructor = 295
    RULE_valueRowConstructor = 296
    RULE_virtualTableSource = 297
    RULE_groupByClause = 298
    RULE_groupby_expression = 299
    RULE_groupByEmpty = 300
    RULE_rollupStandard = 301
    RULE_rollupOldSyntax = 302
    RULE_groupingSetExpression = 303
    RULE_groupingSetExpressionMultiple = 304
    RULE_groupingExpressionSingle = 305
    RULE_havingClause = 306
    RULE_havingCondition = 307
    RULE_expressionsInParenthesis = 308
    RULE_expressionsNotInParenthesis = 309
    RULE_expressionPart = 310
    RULE_expressions = 311
    RULE_columnRefOrderInParenthesis = 312
    RULE_columnRefOrderNotInParenthesis = 313
    RULE_orderByClause = 314
    RULE_clusterByClause = 315
    RULE_partitionByClause = 316
    RULE_distributeByClause = 317
    RULE_sortByClause = 318
    RULE_function_ = 319
    RULE_functionName = 320
    RULE_castExpression = 321
    RULE_caseExpression = 322
    RULE_whenExpression = 323
    RULE_floorExpression = 324
    RULE_floorDateQualifiers = 325
    RULE_extractExpression = 326
    RULE_timeQualifiers = 327
    RULE_constant = 328
    RULE_stringLiteralSequence = 329
    RULE_charSetStringLiteral = 330
    RULE_dateLiteral = 331
    RULE_timestampLiteral = 332
    RULE_timestampLocalTZLiteral = 333
    RULE_intervalValue = 334
    RULE_intervalLiteral = 335
    RULE_intervalExpression = 336
    RULE_intervalQualifiers = 337
    RULE_atomExpression = 338
    RULE_precedenceUnaryOperator = 339
    RULE_isCondition = 340
    RULE_precedenceBitwiseXorOperator = 341
    RULE_precedenceStarOperator = 342
    RULE_precedencePlusOperator = 343
    RULE_precedenceConcatenateOperator = 344
    RULE_precedenceAmpersandOperator = 345
    RULE_precedenceBitwiseOrOperator = 346
    RULE_precedenceRegexpOperator = 347
    RULE_precedenceComparisonOperator = 348
    RULE_precedenceNotOperator = 349
    RULE_precedenceLogicOperator = 350
    RULE_expression = 351
    RULE_precedenceExpression = 352
    RULE_precedenceSimilarExpressionIn = 353
    RULE_subQueryExpression = 354
    RULE_booleanValue = 355
    RULE_booleanValueTok = 356
    RULE_tableOrPartition = 357
    RULE_partitionSpec = 358
    RULE_partitionVal = 359
    RULE_dropPartitionSpec = 360
    RULE_dropPartitionVal = 361
    RULE_dropPartitionOperator = 362
    RULE_sysFuncNames = 363
    RULE_descFuncNames = 364
    RULE_identifier = 365
    RULE_functionIdentifier = 366
    RULE_principalIdentifier = 367
    RULE_nonReserved = 368
    RULE_sql11ReservedKeywordsUsedAsFunctionName = 369

    ruleNames =  [ "statements", "statementSeparator", "statement", "explainStatement", 
                   "explainOption", "vectorizationOnly", "vectorizatonDetail", 
                   "execStatement", "loadStatement", "replicationClause", 
                   "exportStatement", "importStatement", "replDumpStatement", 
                   "replLoadStatement", "replConfigs", "replConfigsList", 
                   "replStatusStatement", "ddlStatement", "ifExists", "restrictOrCascade", 
                   "ifNotExists", "rewriteEnabled", "rewriteDisabled", "storedAsDirs", 
                   "orReplace", "createDatabaseStatement", "dbLocation", 
                   "dbProperties", "dbPropertiesList", "switchDatabaseStatement", 
                   "dropDatabaseStatement", "databaseComment", "createTableStatement", 
                   "truncateTableStatement", "dropTableStatement", "alterStatement", 
                   "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
                   "alterStatementPartitionKeyType", "alterViewStatementSuffix", 
                   "alterMaterializedViewStatementSuffix", "alterDatabaseStatementSuffix", 
                   "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
                   "alterDatabaseSuffixSetLocation", "alterStatementSuffixRename", 
                   "alterStatementSuffixAddCol", "alterStatementSuffixAddConstraint", 
                   "alterStatementSuffixDropConstraint", "alterStatementSuffixRenameCol", 
                   "alterStatementSuffixUpdateStatsCol", "alterStatementSuffixUpdateStats", 
                   "alterStatementChangeColPosition", "alterStatementSuffixAddPartitions", 
                   "alterStatementSuffixAddPartitionsElement", "alterStatementSuffixTouch", 
                   "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
                   "partitionLocation", "alterStatementSuffixDropPartitions", 
                   "alterStatementSuffixProperties", "alterViewSuffixProperties", 
                   "alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
                   "alterStatementSuffixSerdeProperties", "alterIndexStatementSuffix", 
                   "alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
                   "alterTblPartitionStatementSuffixSkewedLocation", "skewedLocations", 
                   "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
                   "alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
                   "alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", 
                   "alterStatementSuffixMergeFiles", "alterStatementSuffixBucketNum", 
                   "createIndexStatement", "locationPath", "dropIndexStatement", 
                   "tablePartitionPrefix", "blocking", "alterStatementSuffixCompact", 
                   "alterStatementSuffixSetOwner", "fileFormat", "inputFileFormat", 
                   "tabTypeExpr", "partTypeExpr", "tabPartColTypeExpr", 
                   "descStatement", "analyzeStatement", "showStatement", 
                   "lockStatement", "lockDatabase", "lockMode", "unlockStatement", 
                   "unlockDatabase", "createRoleStatement", "dropRoleStatement", 
                   "grantPrivileges", "revokePrivileges", "grantRole", "revokeRole", 
                   "showRoleGrants", "showRoles", "showCurrentRole", "setRole", 
                   "showGrants", "showRolePrincipals", "privilegeIncludeColObject", 
                   "privilegeObject", "privObject", "privObjectCols", "privilegeList", 
                   "privlegeDef", "privilegeType", "principalSpecification", 
                   "principalName", "withGrantOption", "grantOptionFor", 
                   "adminOptionFor", "withAdminOption", "metastoreCheck", 
                   "resourceList", "resource", "resourceType", "createFunctionStatement", 
                   "dropFunctionStatement", "reloadFunctionStatement", "createMacroStatement", 
                   "dropMacroStatement", "createViewStatement", "createMaterializedViewStatement", 
                   "viewPartition", "dropViewStatement", "dropMaterializedViewStatement", 
                   "showFunctionIdentifier", "showStmtIdentifier", "tableComment", 
                   "tablePartition", "tableBuckets", "tableSkewed", "rowFormat", 
                   "recordReader", "recordWriter", "rowFormatSerde", "rowFormatDelimited", 
                   "tableRowFormat", "tablePropertiesPrefixed", "tableProperties", 
                   "tablePropertiesList", "keyValueProperty", "keyProperty", 
                   "tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
                   "tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", 
                   "tableRowNullFormat", "tableFileFormat", "tableLocation", 
                   "columnNameTypeList", "columnNameTypeOrConstraintList", 
                   "columnNameColonTypeList", "columnNameList", "columnName", 
                   "extColumnName", "columnNameOrderList", "columnParenthesesList", 
                   "enableValidateSpecification", "enableSpecification", 
                   "validateSpecification", "enforcedSpecification", "relySpecification", 
                   "createConstraint", "alterConstraintWithName", "pkConstraint", 
                   "createForeignKey", "alterForeignKeyWithName", "skewedValueElement", 
                   "skewedColumnValuePairList", "skewedColumnValuePair", 
                   "skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
                   "orderSpecification", "nullOrdering", "columnNameOrder", 
                   "columnNameCommentList", "columnNameComment", "columnRefOrder", 
                   "columnNameType", "columnNameTypeOrConstraint", "tableConstraint", 
                   "columnNameTypeConstraint", "columnConstraint", "foreignKeyConstraint", 
                   "colConstraint", "alterColumnConstraint", "alterForeignKeyConstraint", 
                   "alterColConstraint", "tableConstraintPrimaryKey", "constraintOptsCreate", 
                   "constraintOptsAlter", "columnNameColonType", "colType", 
                   "colTypeList", "type_db_col", "primitiveType", "listType", 
                   "structType", "mapType", "unionType", "setOperator", 
                   "queryStatementExpression", "queryStatementExpressionBody", 
                   "withClause", "cteStatement", "fromStatement", "singleFromStatement", 
                   "regularBody", "atomSelectStatement", "selectStatement", 
                   "setOpSelectStatement", "selectStatementWithCTE", "body", 
                   "insertClause", "destination", "limitClause", "deleteStatement", 
                   "columnAssignmentClause", "setColumnsClause", "updateStatement", 
                   "sqlTransactionStatement", "startTransactionStatement", 
                   "transactionMode", "transactionAccessMode", "isolationLevel", 
                   "levelOfIsolation", "commitStatement", "rollbackStatement", 
                   "setAutoCommitStatement", "abortTransactionStatement", 
                   "mergeStatement", "whenClauses", "whenNotMatchedClause", 
                   "whenMatchedAndClause", "whenMatchedThenClause", "updateOrDelete", 
                   "killQueryStatement", "selectClause", "selectList", "selectTrfmClause", 
                   "selectItem", "trfmClause", "selectExpression", "selectExpressionList", 
                   "window_clause", "window_defn", "window_specification", 
                   "window_frame", "window_range_expression", "window_value_expression", 
                   "window_frame_start_boundary", "window_frame_boundary", 
                   "tableAllColumns", "tableOrColumn", "expressionList", 
                   "aliasList", "fromClause", "fromSource", "atomjoinSource", 
                   "joinSource", "joinSourcePart", "uniqueJoinSource", "uniqueJoinExpr", 
                   "uniqueJoinToken", "joinToken", "lateralView", "tableAlias", 
                   "tableBucketSample", "splitSample", "tableSample", "tableSource", 
                   "uniqueJoinTableSource", "tableName", "viewName", "subQuerySource", 
                   "partitioningSpec", "partitionTableFunctionSource", "partitionedTableFunction", 
                   "whereClause", "searchCondition", "valuesClause", "valuesTableConstructor", 
                   "valueRowConstructor", "virtualTableSource", "groupByClause", 
                   "groupby_expression", "groupByEmpty", "rollupStandard", 
                   "rollupOldSyntax", "groupingSetExpression", "groupingSetExpressionMultiple", 
                   "groupingExpressionSingle", "havingClause", "havingCondition", 
                   "expressionsInParenthesis", "expressionsNotInParenthesis", 
                   "expressionPart", "expressions", "columnRefOrderInParenthesis", 
                   "columnRefOrderNotInParenthesis", "orderByClause", "clusterByClause", 
                   "partitionByClause", "distributeByClause", "sortByClause", 
                   "function_", "functionName", "castExpression", "caseExpression", 
                   "whenExpression", "floorExpression", "floorDateQualifiers", 
                   "extractExpression", "timeQualifiers", "constant", "stringLiteralSequence", 
                   "charSetStringLiteral", "dateLiteral", "timestampLiteral", 
                   "timestampLocalTZLiteral", "intervalValue", "intervalLiteral", 
                   "intervalExpression", "intervalQualifiers", "atomExpression", 
                   "precedenceUnaryOperator", "isCondition", "precedenceBitwiseXorOperator", 
                   "precedenceStarOperator", "precedencePlusOperator", "precedenceConcatenateOperator", 
                   "precedenceAmpersandOperator", "precedenceBitwiseOrOperator", 
                   "precedenceRegexpOperator", "precedenceComparisonOperator", 
                   "precedenceNotOperator", "precedenceLogicOperator", "expression", 
                   "precedenceExpression", "precedenceSimilarExpressionIn", 
                   "subQueryExpression", "booleanValue", "booleanValueTok", 
                   "tableOrPartition", "partitionSpec", "partitionVal", 
                   "dropPartitionSpec", "dropPartitionVal", "dropPartitionOperator", 
                   "sysFuncNames", "descFuncNames", "identifier", "functionIdentifier", 
                   "principalIdentifier", "nonReserved", "sql11ReservedKeywordsUsedAsFunctionName" ]

    EOF = Token.EOF
    KW_TRUE=1
    KW_FALSE=2
    KW_ALL=3
    KW_NONE=4
    KW_AND=5
    KW_OR=6
    KW_NOT=7
    KW_LIKE=8
    KW_ANY=9
    KW_IF=10
    KW_EXISTS=11
    KW_ASC=12
    KW_DESC=13
    KW_NULLS=14
    KW_LAST=15
    KW_ORDER=16
    KW_GROUP=17
    KW_BY=18
    KW_HAVING=19
    KW_WHERE=20
    KW_FROM=21
    KW_AS=22
    KW_SELECT=23
    KW_DISTINCT=24
    KW_INSERT=25
    KW_OVERWRITE=26
    KW_OUTER=27
    KW_UNIQUEJOIN=28
    KW_PRESERVE=29
    KW_JOIN=30
    KW_LEFT=31
    KW_RIGHT=32
    KW_FULL=33
    KW_ON=34
    KW_PARTITION=35
    KW_PARTITIONS=36
    KW_TABLE=37
    KW_TABLES=38
    KW_COLUMNS=39
    KW_INDEX=40
    KW_INDEXES=41
    KW_REBUILD=42
    KW_FUNCTIONS=43
    KW_SHOW=44
    KW_MSCK=45
    KW_REPAIR=46
    KW_DIRECTORY=47
    KW_LOCAL=48
    KW_TRANSFORM=49
    KW_USING=50
    KW_CLUSTER=51
    KW_DISTRIBUTE=52
    KW_SORT=53
    KW_UNION=54
    KW_EXCEPT=55
    KW_LOAD=56
    KW_EXPORT=57
    KW_IMPORT=58
    KW_REPLICATION=59
    KW_METADATA=60
    KW_DATA=61
    KW_INPATH=62
    KW_IS=63
    KW_NULL=64
    KW_CREATE=65
    KW_EXTERNAL=66
    KW_ALTER=67
    KW_CHANGE=68
    KW_COLUMN=69
    KW_FIRST=70
    KW_AFTER=71
    KW_DESCRIBE=72
    KW_DROP=73
    KW_RENAME=74
    KW_TO=75
    KW_COMMENT=76
    KW_BOOLEAN=77
    KW_TINYINT=78
    KW_SMALLINT=79
    KW_INT=80
    KW_BIGINT=81
    KW_FLOAT=82
    KW_DOUBLE=83
    KW_PRECISION=84
    KW_DATE=85
    KW_DATETIME=86
    KW_TIMESTAMP=87
    KW_TIMESTAMPLOCALTZ=88
    KW_TIME=89
    KW_ZONE=90
    KW_INTERVAL=91
    KW_DECIMAL=92
    KW_STRING=93
    KW_CHAR=94
    KW_VARCHAR=95
    KW_ARRAY=96
    KW_STRUCT=97
    KW_MAP=98
    KW_UNIONTYPE=99
    KW_REDUCE=100
    KW_PARTITIONED=101
    KW_CLUSTERED=102
    KW_SORTED=103
    KW_INTO=104
    KW_BUCKETS=105
    KW_ROW=106
    KW_ROWS=107
    KW_FORMAT=108
    KW_DELIMITED=109
    KW_FIELDS=110
    KW_TERMINATED=111
    KW_ESCAPED=112
    KW_COLLECTION=113
    KW_ITEMS=114
    KW_KEYS=115
    KW_KEY_TYPE=116
    KW_KILL=117
    KW_LINES=118
    KW_STORED=119
    KW_FILEFORMAT=120
    KW_INPUTFORMAT=121
    KW_OUTPUTFORMAT=122
    KW_INPUTDRIVER=123
    KW_OUTPUTDRIVER=124
    KW_ENABLE=125
    KW_DISABLE=126
    KW_LOCATION=127
    KW_TABLESAMPLE=128
    KW_BUCKET=129
    KW_OUT=130
    KW_OF=131
    KW_PERCENT=132
    KW_CAST=133
    KW_ADD=134
    KW_REPLACE=135
    KW_RLIKE=136
    KW_REGEXP=137
    KW_TEMPORARY=138
    KW_FUNCTION=139
    KW_MACRO=140
    KW_FILE=141
    KW_JAR=142
    KW_EXPLAIN=143
    KW_EXTENDED=144
    KW_FORMATTED=145
    KW_DEPENDENCY=146
    KW_LOGICAL=147
    KW_SERDE=148
    KW_WITH=149
    KW_DEFERRED=150
    KW_SERDEPROPERTIES=151
    KW_DBPROPERTIES=152
    KW_LIMIT=153
    KW_OFFSET=154
    KW_SET=155
    KW_UNSET=156
    KW_TBLPROPERTIES=157
    KW_IDXPROPERTIES=158
    KW_VALUE_TYPE=159
    KW_ELEM_TYPE=160
    KW_DEFINED=161
    KW_CASE=162
    KW_WHEN=163
    KW_THEN=164
    KW_ELSE=165
    KW_END=166
    KW_MAPJOIN=167
    KW_STREAMTABLE=168
    KW_CLUSTERSTATUS=169
    KW_UTC=170
    KW_UTCTIMESTAMP=171
    KW_LONG=172
    KW_DELETE=173
    KW_PLUS=174
    KW_MINUS=175
    KW_FETCH=176
    KW_INTERSECT=177
    KW_VIEW=178
    KW_VIEWS=179
    KW_IN=180
    KW_DATABASE=181
    KW_DATABASES=182
    KW_MATERIALIZED=183
    KW_SCHEMA=184
    KW_SCHEMAS=185
    KW_GRANT=186
    KW_REVOKE=187
    KW_SSL=188
    KW_UNDO=189
    KW_LOCK=190
    KW_LOCKS=191
    KW_UNLOCK=192
    KW_SHARED=193
    KW_EXCLUSIVE=194
    KW_PROCEDURE=195
    KW_UNSIGNED=196
    KW_WHILE=197
    KW_READ=198
    KW_READS=199
    KW_PURGE=200
    KW_RANGE=201
    KW_ANALYZE=202
    KW_BEFORE=203
    KW_BETWEEN=204
    KW_BOTH=205
    KW_BINARY=206
    KW_CROSS=207
    KW_CONTINUE=208
    KW_CURSOR=209
    KW_TRIGGER=210
    KW_RECORDREADER=211
    KW_RECORDWRITER=212
    KW_SEMI=213
    KW_LATERAL=214
    KW_TOUCH=215
    KW_ARCHIVE=216
    KW_UNARCHIVE=217
    KW_COMPUTE=218
    KW_STATISTICS=219
    KW_USE=220
    KW_OPTION=221
    KW_CONCATENATE=222
    KW_SHOW_DATABASE=223
    KW_UPDATE=224
    KW_RESTRICT=225
    KW_CASCADE=226
    KW_SKEWED=227
    KW_ROLLUP=228
    KW_CUBE=229
    KW_DIRECTORIES=230
    KW_FOR=231
    KW_WINDOW=232
    KW_UNBOUNDED=233
    KW_PRECEDING=234
    KW_FOLLOWING=235
    KW_CURRENT=236
    KW_CURRENT_DATE=237
    KW_CURRENT_TIMESTAMP=238
    KW_LESS=239
    KW_MORE=240
    KW_OVER=241
    KW_GROUPING=242
    KW_SETS=243
    KW_TRUNCATE=244
    KW_NOSCAN=245
    KW_USER=246
    KW_ROLE=247
    KW_ROLES=248
    KW_INNER=249
    KW_EXCHANGE=250
    KW_URI=251
    KW_SERVER=252
    KW_ADMIN=253
    KW_OWNER=254
    KW_PRINCIPALS=255
    KW_COMPACT=256
    KW_COMPACTIONS=257
    KW_TRANSACTIONS=258
    KW_REWRITE=259
    KW_AUTHORIZATION=260
    KW_REOPTIMIZATION=261
    KW_CONF=262
    KW_VALUES=263
    KW_RELOAD=264
    KW_YEAR=265
    KW_QUERY=266
    KW_QUARTER=267
    KW_MONTH=268
    KW_WEEK=269
    KW_DAY=270
    KW_DOW=271
    KW_HOUR=272
    KW_MINUTE=273
    KW_SECOND=274
    KW_START=275
    KW_TRANSACTION=276
    KW_COMMIT=277
    KW_ROLLBACK=278
    KW_WORK=279
    KW_ONLY=280
    KW_WRITE=281
    KW_ISOLATION=282
    KW_LEVEL=283
    KW_SNAPSHOT=284
    KW_AUTOCOMMIT=285
    KW_CACHE=286
    KW_PRIMARY=287
    KW_FOREIGN=288
    KW_REFERENCES=289
    KW_CONSTRAINT=290
    KW_ENFORCED=291
    KW_VALIDATE=292
    KW_NOVALIDATE=293
    KW_RELY=294
    KW_NORELY=295
    KW_UNIQUE=296
    KW_KEY=297
    KW_ABORT=298
    KW_EXTRACT=299
    KW_FLOOR=300
    KW_MERGE=301
    KW_MATCHED=302
    KW_REPL=303
    KW_DUMP=304
    KW_STATUS=305
    KW_VECTORIZATION=306
    KW_SUMMARY=307
    KW_OPERATOR=308
    KW_EXPRESSION=309
    KW_DETAIL=310
    KW_WAIT=311
    KW_RESOURCE=312
    KW_PLAN=313
    KW_QUERY_PARALLELISM=314
    KW_PLANS=315
    KW_ACTIVATE=316
    KW_DEFAULT=317
    KW_CHECK=318
    KW_POOL=319
    KW_MOVE=320
    KW_DO=321
    KW_ALLOC_FRACTION=322
    KW_SCHEDULING_POLICY=323
    KW_PATH=324
    KW_MAPPING=325
    KW_WORKLOAD=326
    KW_MANAGEMENT=327
    KW_ACTIVE=328
    KW_UNMANAGED=329
    KW_APPLICATION=330
    KW_SYNC=331
    DOT=332
    COLON=333
    COMMA=334
    SEMICOLON=335
    LPAREN=336
    RPAREN=337
    LSQUARE=338
    RSQUARE=339
    LCURLY=340
    RCURLY=341
    EQUAL=342
    EQUAL_NS=343
    NOTEQUAL=344
    LESSTHANOREQUALTO=345
    LESSTHAN=346
    GREATERTHANOREQUALTO=347
    GREATERTHAN=348
    DIVIDE=349
    PLUS=350
    MINUS=351
    STAR=352
    MOD=353
    DIV=354
    AMPERSAND=355
    TILDE=356
    BITWISEOR=357
    CONCATENATE=358
    BITWISEXOR=359
    QUESTION=360
    DOLLAR=361
    StringLiteral=362
    CharSetLiteral=363
    IntegralLiteral=364
    NumberLiteral=365
    ByteLengthLiteral=366
    Number=367
    Identifier=368
    QuotedIdentifier=369
    CharSetName=370
    WS=371
    LINE_COMMENT=372
    QUERY_HINT=373
    SHOW_HINT=374
    HIDDEN_HINT=375

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HiveParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.StatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.StatementContext,i)


        def statementSeparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.StatementSeparatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.StatementSeparatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = HiveParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 504455934867677184) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4503642577043845) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 577190829098012737) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & 468391953449353233) != 0) or ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & 274877906985) != 0):
                self.state = 740
                self.statement()
                self.state = 741
                self.statementSeparator()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 748
            self.match(HiveParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSeparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HiveParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_statementSeparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSeparator" ):
                listener.enterStatementSeparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSeparator" ):
                listener.exitStatementSeparator(self)




    def statementSeparator(self):

        localctx = HiveParser.StatementSeparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statementSeparator)
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [335]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.match(HiveParser.SEMICOLON)
                pass
            elif token in [-1, 13, 21, 23, 25, 44, 45, 56, 57, 58, 65, 67, 72, 73, 98, 100, 117, 143, 149, 155, 173, 186, 187, 190, 192, 202, 220, 224, 244, 264, 275, 277, 278, 298, 301, 303, 336]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explainStatement(self):
            return self.getTypedRuleContext(HiveParser.ExplainStatementContext,0)


        def execStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = HiveParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.explainStatement()
                pass
            elif token in [13, 21, 23, 25, 44, 45, 56, 57, 58, 65, 67, 72, 73, 98, 100, 117, 149, 155, 173, 186, 187, 190, 192, 202, 220, 224, 244, 264, 275, 277, 278, 298, 301, 303, 336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.execStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXPLAIN(self):
            return self.getToken(HiveParser.KW_EXPLAIN, 0)

        def execStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecStatementContext,0)


        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExplainOptionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_explainStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainStatement" ):
                listener.enterExplainStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainStatement" ):
                listener.exitExplainStatement(self)




    def explainStatement(self):

        localctx = HiveParser.ExplainStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_explainStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(HiveParser.KW_EXPLAIN)
            self.state = 768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 21, 23, 25, 44, 45, 56, 57, 58, 65, 67, 72, 73, 98, 100, 117, 144, 145, 146, 147, 149, 155, 173, 186, 187, 190, 192, 202, 220, 224, 244, 260, 261, 264, 275, 277, 278, 298, 301, 303, 306, 336]:
                self.state = 762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 759
                        self.explainOption() 
                    self.state = 764
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                self.state = 765
                self.execStatement()
                pass
            elif token in [259]:
                self.state = 766
                self.match(HiveParser.KW_REWRITE)
                self.state = 767
                self.queryStatementExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def KW_DEPENDENCY(self):
            return self.getToken(HiveParser.KW_DEPENDENCY, 0)

        def KW_LOGICAL(self):
            return self.getToken(HiveParser.KW_LOGICAL, 0)

        def KW_AUTHORIZATION(self):
            return self.getToken(HiveParser.KW_AUTHORIZATION, 0)

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_REOPTIMIZATION(self):
            return self.getToken(HiveParser.KW_REOPTIMIZATION, 0)

        def KW_VECTORIZATION(self):
            return self.getToken(HiveParser.KW_VECTORIZATION, 0)

        def vectorizationOnly(self):
            return self.getTypedRuleContext(HiveParser.VectorizationOnlyContext,0)


        def vectorizatonDetail(self):
            return self.getTypedRuleContext(HiveParser.VectorizatonDetailContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_explainOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOption" ):
                listener.enterExplainOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOption" ):
                listener.exitExplainOption(self)




    def explainOption(self):

        localctx = HiveParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [144]:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.match(HiveParser.KW_EXTENDED)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(HiveParser.KW_FORMATTED)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 3)
                self.state = 772
                self.match(HiveParser.KW_DEPENDENCY)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 4)
                self.state = 773
                self.match(HiveParser.KW_LOGICAL)
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 5)
                self.state = 774
                self.match(HiveParser.KW_AUTHORIZATION)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 6)
                self.state = 775
                self.match(HiveParser.KW_ANALYZE)
                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 7)
                self.state = 776
                self.match(HiveParser.KW_REOPTIMIZATION)
                pass
            elif token in [306]:
                self.enterOuterAlt(localctx, 8)
                self.state = 777
                self.match(HiveParser.KW_VECTORIZATION)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==280:
                    self.state = 778
                    self.vectorizationOnly()


                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & 15) != 0):
                    self.state = 781
                    self.vectorizatonDetail()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorizationOnlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ONLY(self):
            return self.getToken(HiveParser.KW_ONLY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_vectorizationOnly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorizationOnly" ):
                listener.enterVectorizationOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorizationOnly" ):
                listener.exitVectorizationOnly(self)




    def vectorizationOnly(self):

        localctx = HiveParser.VectorizationOnlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_vectorizationOnly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(HiveParser.KW_ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorizatonDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SUMMARY(self):
            return self.getToken(HiveParser.KW_SUMMARY, 0)

        def KW_OPERATOR(self):
            return self.getToken(HiveParser.KW_OPERATOR, 0)

        def KW_EXPRESSION(self):
            return self.getToken(HiveParser.KW_EXPRESSION, 0)

        def KW_DETAIL(self):
            return self.getToken(HiveParser.KW_DETAIL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_vectorizatonDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorizatonDetail" ):
                listener.enterVectorizatonDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorizatonDetail" ):
                listener.exitVectorizatonDetail(self)




    def vectorizatonDetail(self):

        localctx = HiveParser.VectorizatonDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_vectorizatonDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            _la = self._input.LA(1)
            if not(((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(HiveParser.LoadStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(HiveParser.ExportStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(HiveParser.ImportStatementContext,0)


        def replDumpStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplDumpStatementContext,0)


        def replLoadStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplLoadStatementContext,0)


        def replStatusStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplStatusStatementContext,0)


        def ddlStatement(self):
            return self.getTypedRuleContext(HiveParser.DdlStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(HiveParser.DeleteStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(HiveParser.UpdateStatementContext,0)


        def sqlTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.SqlTransactionStatementContext,0)


        def mergeStatement(self):
            return self.getTypedRuleContext(HiveParser.MergeStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_execStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecStatement" ):
                listener.enterExecStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecStatement" ):
                listener.exitExecStatement(self)




    def execStatement(self):

        localctx = HiveParser.ExecStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_execStatement)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.queryStatementExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.loadStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.exportStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 793
                self.importStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 794
                self.replDumpStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 795
                self.replLoadStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 796
                self.replStatusStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 797
                self.ddlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 798
                self.deleteStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 799
                self.updateStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 800
                self.sqlTransactionStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 801
                self.mergeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_DATA(self):
            return self.getToken(HiveParser.KW_DATA, 0)

        def KW_INPATH(self):
            return self.getToken(HiveParser.KW_INPATH, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def inputFileFormat(self):
            return self.getTypedRuleContext(HiveParser.InputFileFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)




    def loadStatement(self):

        localctx = HiveParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(HiveParser.KW_LOAD)
            self.state = 805
            self.match(HiveParser.KW_DATA)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 806
                self.match(HiveParser.KW_LOCAL)


            self.state = 809
            self.match(HiveParser.KW_INPATH)
            self.state = 810
            self.match(HiveParser.StringLiteral)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 811
                self.match(HiveParser.KW_OVERWRITE)


            self.state = 814
            self.match(HiveParser.KW_INTO)
            self.state = 815
            self.match(HiveParser.KW_TABLE)
            self.state = 816
            self.tableOrPartition()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 817
                self.inputFileFormat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_REPLICATION(self):
            return self.getToken(HiveParser.KW_REPLICATION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replicationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationClause" ):
                listener.enterReplicationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationClause" ):
                listener.exitReplicationClause(self)




    def replicationClause(self):

        localctx = HiveParser.ReplicationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_replicationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(HiveParser.KW_FOR)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 821
                self.match(HiveParser.KW_METADATA)


            self.state = 824
            self.match(HiveParser.KW_REPLICATION)
            self.state = 825
            self.match(HiveParser.LPAREN)
            self.state = 826
            self.match(HiveParser.StringLiteral)
            self.state = 827
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXPORT(self):
            return self.getToken(HiveParser.KW_EXPORT, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_exportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStatement" ):
                listener.enterExportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStatement" ):
                listener.exitExportStatement(self)




    def exportStatement(self):

        localctx = HiveParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_exportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(HiveParser.KW_EXPORT)
            self.state = 830
            self.match(HiveParser.KW_TABLE)
            self.state = 831
            self.tableOrPartition()
            self.state = 832
            self.match(HiveParser.KW_TO)
            self.state = 833
            self.match(HiveParser.StringLiteral)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==231:
                self.state = 834
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token

        def KW_IMPORT(self):
            return self.getToken(HiveParser.KW_IMPORT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def KW_EXTERNAL(self):
            return self.getToken(HiveParser.KW_EXTERNAL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = HiveParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(HiveParser.KW_IMPORT)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37 or _la==66:
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 838
                    self.match(HiveParser.KW_EXTERNAL)


                self.state = 841
                self.match(HiveParser.KW_TABLE)
                self.state = 842
                self.tableOrPartition()


            self.state = 845
            self.match(HiveParser.KW_FROM)

            self.state = 846
            localctx.path = self.match(HiveParser.StringLiteral)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 847
                self.tableLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplDumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_DUMP(self):
            return self.getToken(HiveParser.KW_DUMP, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replDumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplDumpStatement" ):
                listener.enterReplDumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplDumpStatement" ):
                listener.exitReplDumpStatement(self)




    def replDumpStatement(self):

        localctx = HiveParser.ReplDumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_replDumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(HiveParser.KW_REPL)
            self.state = 851
            self.match(HiveParser.KW_DUMP)
            self.state = 852
            self.identifier()
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==332:
                self.state = 853
                self.match(HiveParser.DOT)
                self.state = 854
                self.identifier()


            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 857
                self.match(HiveParser.KW_FROM)
                self.state = 858
                self.match(HiveParser.Number)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 859
                    self.match(HiveParser.KW_TO)
                    self.state = 860
                    self.match(HiveParser.Number)


                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 863
                    self.match(HiveParser.KW_LIMIT)
                    self.state = 864
                    self.match(HiveParser.Number)




            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 869
                self.match(HiveParser.KW_WITH)
                self.state = 870
                self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replLoadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplLoadStatement" ):
                listener.enterReplLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplLoadStatement" ):
                listener.exitReplLoadStatement(self)




    def replLoadStatement(self):

        localctx = HiveParser.ReplLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_replLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(HiveParser.KW_REPL)
            self.state = 874
            self.match(HiveParser.KW_LOAD)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8879127934246383616) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3458763614599775565) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -2319580865570571373) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -4618828440659893195) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -244939057153) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 1099511627779) != 0):
                self.state = 875
                self.identifier()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==332:
                    self.state = 876
                    self.match(HiveParser.DOT)
                    self.state = 877
                    self.identifier()




            self.state = 882
            self.match(HiveParser.KW_FROM)
            self.state = 883
            self.match(HiveParser.StringLiteral)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 884
                self.match(HiveParser.KW_WITH)
                self.state = 885
                self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplConfigsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def replConfigsList(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replConfigs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplConfigs" ):
                listener.enterReplConfigs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplConfigs" ):
                listener.exitReplConfigs(self)




    def replConfigs(self):

        localctx = HiveParser.ReplConfigsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_replConfigs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(HiveParser.LPAREN)
            self.state = 889
            self.replConfigsList()
            self.state = 890
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplConfigsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_replConfigsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplConfigsList" ):
                listener.enterReplConfigsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplConfigsList" ):
                listener.exitReplConfigsList(self)




    def replConfigsList(self):

        localctx = HiveParser.ReplConfigsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_replConfigsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.keyValueProperty()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 893
                self.match(HiveParser.COMMA)
                self.state = 894
                self.keyValueProperty()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_replStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplStatusStatement" ):
                listener.enterReplStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplStatusStatement" ):
                listener.exitReplStatusStatement(self)




    def replStatusStatement(self):

        localctx = HiveParser.ReplStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_replStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(HiveParser.KW_REPL)
            self.state = 901
            self.match(HiveParser.KW_STATUS)
            self.state = 902
            self.identifier()
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==332:
                self.state = 903
                self.match(HiveParser.DOT)
                self.state = 904
                self.identifier()


            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 907
                self.match(HiveParser.KW_WITH)
                self.state = 908
                self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateDatabaseStatementContext,0)


        def switchDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.SwitchDatabaseStatementContext,0)


        def dropDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.DropDatabaseStatementContext,0)


        def createTableStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateTableStatementContext,0)


        def dropTableStatement(self):
            return self.getTypedRuleContext(HiveParser.DropTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(HiveParser.TruncateTableStatementContext,0)


        def alterStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementContext,0)


        def descStatement(self):
            return self.getTypedRuleContext(HiveParser.DescStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(HiveParser.ShowStatementContext,0)


        def metastoreCheck(self):
            return self.getTypedRuleContext(HiveParser.MetastoreCheckContext,0)


        def createViewStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateViewStatementContext,0)


        def createMaterializedViewStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMaterializedViewStatementContext,0)


        def dropViewStatement(self):
            return self.getTypedRuleContext(HiveParser.DropViewStatementContext,0)


        def dropMaterializedViewStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMaterializedViewStatementContext,0)


        def createFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateFunctionStatementContext,0)


        def createMacroStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMacroStatementContext,0)


        def dropFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.DropFunctionStatementContext,0)


        def reloadFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.ReloadFunctionStatementContext,0)


        def dropMacroStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMacroStatementContext,0)


        def analyzeStatement(self):
            return self.getTypedRuleContext(HiveParser.AnalyzeStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(HiveParser.LockStatementContext,0)


        def unlockStatement(self):
            return self.getTypedRuleContext(HiveParser.UnlockStatementContext,0)


        def lockDatabase(self):
            return self.getTypedRuleContext(HiveParser.LockDatabaseContext,0)


        def unlockDatabase(self):
            return self.getTypedRuleContext(HiveParser.UnlockDatabaseContext,0)


        def createRoleStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateRoleStatementContext,0)


        def dropRoleStatement(self):
            return self.getTypedRuleContext(HiveParser.DropRoleStatementContext,0)


        def grantPrivileges(self):
            return self.getTypedRuleContext(HiveParser.GrantPrivilegesContext,0)


        def revokePrivileges(self):
            return self.getTypedRuleContext(HiveParser.RevokePrivilegesContext,0)


        def showGrants(self):
            return self.getTypedRuleContext(HiveParser.ShowGrantsContext,0)


        def showRoleGrants(self):
            return self.getTypedRuleContext(HiveParser.ShowRoleGrantsContext,0)


        def showRolePrincipals(self):
            return self.getTypedRuleContext(HiveParser.ShowRolePrincipalsContext,0)


        def showRoles(self):
            return self.getTypedRuleContext(HiveParser.ShowRolesContext,0)


        def grantRole(self):
            return self.getTypedRuleContext(HiveParser.GrantRoleContext,0)


        def revokeRole(self):
            return self.getTypedRuleContext(HiveParser.RevokeRoleContext,0)


        def setRole(self):
            return self.getTypedRuleContext(HiveParser.SetRoleContext,0)


        def showCurrentRole(self):
            return self.getTypedRuleContext(HiveParser.ShowCurrentRoleContext,0)


        def abortTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.AbortTransactionStatementContext,0)


        def killQueryStatement(self):
            return self.getTypedRuleContext(HiveParser.KillQueryStatementContext,0)


        def createIndexStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateIndexStatementContext,0)


        def dropIndexStatement(self):
            return self.getTypedRuleContext(HiveParser.DropIndexStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = HiveParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ddlStatement)
        try:
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.createDatabaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.switchDatabaseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.dropDatabaseStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 914
                self.createTableStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 915
                self.dropTableStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 916
                self.truncateTableStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 917
                self.alterStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 918
                self.descStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 919
                self.showStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 920
                self.metastoreCheck()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 921
                self.createViewStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 922
                self.createMaterializedViewStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 923
                self.dropViewStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 924
                self.dropMaterializedViewStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 925
                self.createFunctionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 926
                self.createMacroStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 927
                self.dropFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 928
                self.reloadFunctionStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 929
                self.dropMacroStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 930
                self.analyzeStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 931
                self.lockStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 932
                self.unlockStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 933
                self.lockDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 934
                self.unlockDatabase()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 935
                self.createRoleStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 936
                self.dropRoleStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 937
                self.grantPrivileges()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 938
                self.revokePrivileges()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 939
                self.showGrants()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 940
                self.showRoleGrants()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 941
                self.showRolePrincipals()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 942
                self.showRoles()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 943
                self.grantRole()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 944
                self.revokeRole()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 945
                self.setRole()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 946
                self.showCurrentRole()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 947
                self.abortTransactionStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 948
                self.killQueryStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 949
                self.createIndexStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 950
                self.dropIndexStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = HiveParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(HiveParser.KW_IF)
            self.state = 954
            self.match(HiveParser.KW_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictOrCascadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RESTRICT(self):
            return self.getToken(HiveParser.KW_RESTRICT, 0)

        def KW_CASCADE(self):
            return self.getToken(HiveParser.KW_CASCADE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_restrictOrCascade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictOrCascade" ):
                listener.enterRestrictOrCascade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictOrCascade" ):
                listener.exitRestrictOrCascade(self)




    def restrictOrCascade(self):

        localctx = HiveParser.RestrictOrCascadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restrictOrCascade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            _la = self._input.LA(1)
            if not(_la==225 or _la==226):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = HiveParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(HiveParser.KW_IF)
            self.state = 959
            self.match(HiveParser.KW_NOT)
            self.state = 960
            self.match(HiveParser.KW_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteEnabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rewriteEnabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteEnabled" ):
                listener.enterRewriteEnabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteEnabled" ):
                listener.exitRewriteEnabled(self)




    def rewriteEnabled(self):

        localctx = HiveParser.RewriteEnabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_rewriteEnabled)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(HiveParser.KW_ENABLE)
            self.state = 963
            self.match(HiveParser.KW_REWRITE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rewriteDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDisabled" ):
                listener.enterRewriteDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDisabled" ):
                listener.exitRewriteDisabled(self)




    def rewriteDisabled(self):

        localctx = HiveParser.RewriteDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rewriteDisabled)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(HiveParser.KW_DISABLE)
            self.state = 966
            self.match(HiveParser.KW_REWRITE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StoredAsDirsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_DIRECTORIES(self):
            return self.getToken(HiveParser.KW_DIRECTORIES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_storedAsDirs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoredAsDirs" ):
                listener.enterStoredAsDirs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoredAsDirs" ):
                listener.exitStoredAsDirs(self)




    def storedAsDirs(self):

        localctx = HiveParser.StoredAsDirsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_storedAsDirs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(HiveParser.KW_STORED)
            self.state = 969
            self.match(HiveParser.KW_AS)
            self.state = 970
            self.match(HiveParser.KW_DIRECTORIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orReplace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrReplace" ):
                listener.enterOrReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrReplace" ):
                listener.exitOrReplace(self)




    def orReplace(self):

        localctx = HiveParser.OrReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_orReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(HiveParser.KW_OR)
            self.state = 973
            self.match(HiveParser.KW_REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def databaseComment(self):
            return self.getTypedRuleContext(HiveParser.DatabaseCommentContext,0)


        def dbLocation(self):
            return self.getTypedRuleContext(HiveParser.DbLocationContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def dbProperties(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseStatement" ):
                listener.enterCreateDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseStatement" ):
                listener.exitCreateDatabaseStatement(self)




    def createDatabaseStatement(self):

        localctx = HiveParser.CreateDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_createDatabaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(HiveParser.KW_CREATE)
            self.state = 976
            _la = self._input.LA(1)
            if not(_la==181 or _la==184):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 977
                self.ifNotExists()


            self.state = 980
            self.identifier()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 981
                self.databaseComment()


            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 984
                self.dbLocation()


            self.state = 990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 987
                self.match(HiveParser.KW_WITH)
                self.state = 988
                self.match(HiveParser.KW_DBPROPERTIES)
                self.state = 989
                self.dbProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbLocation" ):
                listener.enterDbLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbLocation" ):
                listener.exitDbLocation(self)




    def dbLocation(self):

        localctx = HiveParser.DbLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dbLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(HiveParser.KW_LOCATION)
            self.state = 993
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def dbPropertiesList(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbProperties" ):
                listener.enterDbProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbProperties" ):
                listener.exitDbProperties(self)




    def dbProperties(self):

        localctx = HiveParser.DbPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dbProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(HiveParser.LPAREN)
            self.state = 996
            self.dbPropertiesList()
            self.state = 997
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbPropertiesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_dbPropertiesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbPropertiesList" ):
                listener.enterDbPropertiesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbPropertiesList" ):
                listener.exitDbPropertiesList(self)




    def dbPropertiesList(self):

        localctx = HiveParser.DbPropertiesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dbPropertiesList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.keyValueProperty()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1000
                self.match(HiveParser.COMMA)
                self.state = 1001
                self.keyValueProperty()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USE(self):
            return self.getToken(HiveParser.KW_USE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_switchDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchDatabaseStatement" ):
                listener.enterSwitchDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchDatabaseStatement" ):
                listener.exitSwitchDatabaseStatement(self)




    def switchDatabaseStatement(self):

        localctx = HiveParser.SwitchDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_switchDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(HiveParser.KW_USE)
            self.state = 1008
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabaseStatement" ):
                listener.enterDropDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabaseStatement" ):
                listener.exitDropDatabaseStatement(self)




    def dropDatabaseStatement(self):

        localctx = HiveParser.DropDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dropDatabaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(HiveParser.KW_DROP)
            self.state = 1011
            _la = self._input.LA(1)
            if not(_la==181 or _la==184):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1012
                self.ifExists()


            self.state = 1015
            self.identifier()
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225 or _la==226:
                self.state = 1016
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_databaseComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabaseComment" ):
                listener.enterDatabaseComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabaseComment" ):
                listener.exitDatabaseComment(self)




    def databaseComment(self):

        localctx = HiveParser.DatabaseCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_databaseComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(HiveParser.KW_COMMENT)
            self.state = 1020
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TableNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.TableNameContext,i)


        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_EXTERNAL(self):
            return self.getToken(HiveParser.KW_EXTERNAL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeOrConstraintList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeOrConstraintListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tablePartition(self):
            return self.getTypedRuleContext(HiveParser.TablePartitionContext,0)


        def tableBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableBucketsContext,0)


        def tableSkewed(self):
            return self.getTypedRuleContext(HiveParser.TableSkewedContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableStatement" ):
                listener.enterCreateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableStatement" ):
                listener.exitCreateTableStatement(self)




    def createTableStatement(self):

        localctx = HiveParser.CreateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_createTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(HiveParser.KW_CREATE)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1023
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1026
                self.match(HiveParser.KW_EXTERNAL)


            self.state = 1029
            self.match(HiveParser.KW_TABLE)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1030
                self.ifNotExists()


            self.state = 1033
            self.tableName()
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 1034
                self.match(HiveParser.KW_LIKE)
                self.state = 1035
                self.tableName()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 1036
                    self.tableRowFormat()


                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1039
                    self.tableFileFormat()


                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1042
                    self.tableLocation()


                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 1045
                    self.tablePropertiesPrefixed()


                pass
            elif token in [-1, 13, 21, 22, 23, 25, 44, 45, 56, 57, 58, 65, 67, 72, 73, 76, 98, 100, 101, 102, 106, 117, 119, 127, 143, 149, 155, 157, 173, 186, 187, 190, 192, 202, 220, 224, 227, 244, 264, 275, 277, 278, 298, 301, 303, 335, 336]:
                self.state = 1052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 1048
                    self.match(HiveParser.LPAREN)
                    self.state = 1049
                    self.columnNameTypeOrConstraintList()
                    self.state = 1050
                    self.match(HiveParser.RPAREN)


                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 1054
                    self.tableComment()


                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 1057
                    self.tablePartition()


                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 1060
                    self.tableBuckets()


                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 1063
                    self.tableSkewed()


                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 1066
                    self.tableRowFormat()


                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1069
                    self.tableFileFormat()


                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1072
                    self.tableLocation()


                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 1075
                    self.tablePropertiesPrefixed()


                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 1078
                    self.match(HiveParser.KW_AS)
                    self.state = 1079
                    self.selectStatementWithCTE()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUNCATE(self):
            return self.getToken(HiveParser.KW_TRUNCATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tablePartitionPrefix(self):
            return self.getTypedRuleContext(HiveParser.TablePartitionPrefixContext,0)


        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_truncateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTableStatement" ):
                listener.enterTruncateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTableStatement" ):
                listener.exitTruncateTableStatement(self)




    def truncateTableStatement(self):

        localctx = HiveParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_truncateTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(HiveParser.KW_TRUNCATE)
            self.state = 1085
            self.match(HiveParser.KW_TABLE)
            self.state = 1086
            self.tablePartitionPrefix()
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1087
                self.match(HiveParser.KW_COLUMNS)
                self.state = 1088
                self.match(HiveParser.LPAREN)
                self.state = 1089
                self.columnNameList()
                self.state = 1090
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableStatement" ):
                listener.enterDropTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableStatement" ):
                listener.exitDropTableStatement(self)




    def dropTableStatement(self):

        localctx = HiveParser.DropTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dropTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(HiveParser.KW_DROP)
            self.state = 1095
            self.match(HiveParser.KW_TABLE)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1096
                self.ifExists()


            self.state = 1099
            self.tableName()
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==200:
                self.state = 1100
                self.match(HiveParser.KW_PURGE)


            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==231:
                self.state = 1103
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def alterTableStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterTableStatementSuffixContext,0)


        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def alterViewStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterViewStatementSuffixContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def alterMaterializedViewStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewStatementSuffixContext,0)


        def alterDatabaseStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseStatementSuffixContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def alterIndexStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterIndexStatementSuffixContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatement" ):
                listener.enterAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatement" ):
                listener.exitAlterStatement(self)




    def alterStatement(self):

        localctx = HiveParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.match(HiveParser.KW_ALTER)
                self.state = 1107
                self.match(HiveParser.KW_TABLE)
                self.state = 1108
                self.tableName()
                self.state = 1109
                self.alterTableStatementSuffix()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(HiveParser.KW_ALTER)
                self.state = 1112
                self.match(HiveParser.KW_VIEW)
                self.state = 1113
                self.tableName()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 1114
                    self.match(HiveParser.KW_AS)


                self.state = 1117
                self.alterViewStatementSuffix()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1119
                self.match(HiveParser.KW_ALTER)
                self.state = 1120
                self.match(HiveParser.KW_MATERIALIZED)
                self.state = 1121
                self.match(HiveParser.KW_VIEW)
                self.state = 1122
                self.tableName()
                self.state = 1123
                self.alterMaterializedViewStatementSuffix()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1125
                self.match(HiveParser.KW_ALTER)
                self.state = 1126
                _la = self._input.LA(1)
                if not(_la==181 or _la==184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1127
                self.alterDatabaseStatementSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1128
                self.match(HiveParser.KW_ALTER)
                self.state = 1129
                self.match(HiveParser.KW_INDEX)
                self.state = 1130
                self.alterIndexStatementSuffix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatementSuffixRename(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameContext,0)


        def alterStatementSuffixDropPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropPartitionsContext,0)


        def alterStatementSuffixAddPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsContext,0)


        def alterStatementSuffixTouch(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixTouchContext,0)


        def alterStatementSuffixArchive(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixArchiveContext,0)


        def alterStatementSuffixUnArchive(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUnArchiveContext,0)


        def alterStatementSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixPropertiesContext,0)


        def alterStatementSuffixSkewedby(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSkewedbyContext,0)


        def alterStatementSuffixExchangePartition(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixExchangePartitionContext,0)


        def alterStatementPartitionKeyType(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementPartitionKeyTypeContext,0)


        def alterStatementSuffixDropConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropConstraintContext,0)


        def alterStatementSuffixAddConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddConstraintContext,0)


        def alterTblPartitionStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterTblPartitionStatementSuffixContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def alterStatementSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSetOwnerContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTableStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableStatementSuffix" ):
                listener.enterAlterTableStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableStatementSuffix" ):
                listener.exitAlterTableStatementSuffix(self)




    def alterTableStatementSuffix(self):

        localctx = HiveParser.AlterTableStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alterTableStatementSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1133
                self.alterStatementSuffixRename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self.alterStatementSuffixDropPartitions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1135
                self.alterStatementSuffixAddPartitions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1136
                self.alterStatementSuffixTouch()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1137
                self.alterStatementSuffixArchive()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1138
                self.alterStatementSuffixUnArchive()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1139
                self.alterStatementSuffixProperties()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1140
                self.alterStatementSuffixSkewedby()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1141
                self.alterStatementSuffixExchangePartition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1142
                self.alterStatementPartitionKeyType()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1143
                self.alterStatementSuffixDropConstraint()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1144
                self.alterStatementSuffixAddConstraint()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1145
                    self.partitionSpec()


                self.state = 1148
                self.alterTblPartitionStatementSuffix()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1149
                self.alterStatementSuffixSetOwner()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTblPartitionStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatementSuffixFileFormat(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixFileFormatContext,0)


        def alterStatementSuffixLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixLocationContext,0)


        def alterStatementSuffixMergeFiles(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixMergeFilesContext,0)


        def alterStatementSuffixSerdeProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSerdePropertiesContext,0)


        def alterStatementSuffixRenamePart(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenamePartContext,0)


        def alterStatementSuffixBucketNum(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixBucketNumContext,0)


        def alterTblPartitionStatementSuffixSkewedLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext,0)


        def alterStatementSuffixClusterbySortby(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixClusterbySortbyContext,0)


        def alterStatementSuffixCompact(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixCompactContext,0)


        def alterStatementSuffixUpdateStatsCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateStatsColContext,0)


        def alterStatementSuffixUpdateStats(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateStatsContext,0)


        def alterStatementSuffixRenameCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameColContext,0)


        def alterStatementSuffixAddCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddColContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTblPartitionStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTblPartitionStatementSuffix" ):
                listener.enterAlterTblPartitionStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTblPartitionStatementSuffix" ):
                listener.exitAlterTblPartitionStatementSuffix(self)




    def alterTblPartitionStatementSuffix(self):

        localctx = HiveParser.AlterTblPartitionStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_alterTblPartitionStatementSuffix)
        try:
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1152
                self.alterStatementSuffixFileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.alterStatementSuffixLocation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1154
                self.alterStatementSuffixMergeFiles()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1155
                self.alterStatementSuffixSerdeProperties()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1156
                self.alterStatementSuffixRenamePart()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1157
                self.alterStatementSuffixBucketNum()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1158
                self.alterTblPartitionStatementSuffixSkewedLocation()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1159
                self.alterStatementSuffixClusterbySortby()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1160
                self.alterStatementSuffixCompact()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1161
                self.alterStatementSuffixUpdateStatsCol()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1162
                self.alterStatementSuffixUpdateStats()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1163
                self.alterStatementSuffixRenameCol()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1164
                self.alterStatementSuffixAddCol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementPartitionKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameType(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementPartitionKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementPartitionKeyType" ):
                listener.enterAlterStatementPartitionKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementPartitionKeyType" ):
                listener.exitAlterStatementPartitionKeyType(self)




    def alterStatementPartitionKeyType(self):

        localctx = HiveParser.AlterStatementPartitionKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_alterStatementPartitionKeyType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(HiveParser.KW_PARTITION)
            self.state = 1168
            self.match(HiveParser.KW_COLUMN)
            self.state = 1169
            self.match(HiveParser.LPAREN)
            self.state = 1170
            self.columnNameType()
            self.state = 1171
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterViewSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterViewSuffixPropertiesContext,0)


        def alterStatementSuffixRename(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameContext,0)


        def alterStatementSuffixAddPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsContext,0)


        def alterStatementSuffixDropPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropPartitionsContext,0)


        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterViewStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewStatementSuffix" ):
                listener.enterAlterViewStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewStatementSuffix" ):
                listener.exitAlterViewStatementSuffix(self)




    def alterViewStatementSuffix(self):

        localctx = HiveParser.AlterViewStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_alterViewStatementSuffix)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155, 156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.alterViewSuffixProperties()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.alterStatementSuffixRename()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1175
                self.alterStatementSuffixAddPartitions()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1176
                self.alterStatementSuffixDropPartitions()
                pass
            elif token in [23, 98, 100, 149, 336]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1177
                self.selectStatementWithCTE()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterMaterializedViewSuffixRewrite(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewSuffixRewriteContext,0)


        def alterMaterializedViewSuffixRebuild(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewSuffixRebuildContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewStatementSuffix" ):
                listener.enterAlterMaterializedViewStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewStatementSuffix" ):
                listener.exitAlterMaterializedViewStatementSuffix(self)




    def alterMaterializedViewStatementSuffix(self):

        localctx = HiveParser.AlterMaterializedViewStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alterMaterializedViewStatementSuffix)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.alterMaterializedViewSuffixRewrite()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.alterMaterializedViewSuffixRebuild()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterDatabaseSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixPropertiesContext,0)


        def alterDatabaseSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixSetOwnerContext,0)


        def alterDatabaseSuffixSetLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixSetLocationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseStatementSuffix" ):
                listener.enterAlterDatabaseStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseStatementSuffix" ):
                listener.exitAlterDatabaseStatementSuffix(self)




    def alterDatabaseStatementSuffix(self):

        localctx = HiveParser.AlterDatabaseStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_alterDatabaseStatementSuffix)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.alterDatabaseSuffixProperties()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self.alterDatabaseSuffixSetOwner()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1186
                self.alterDatabaseSuffixSetLocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def dbProperties(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixProperties" ):
                listener.enterAlterDatabaseSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixProperties" ):
                listener.exitAlterDatabaseSuffixProperties(self)




    def alterDatabaseSuffixProperties(self):

        localctx = HiveParser.AlterDatabaseSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_alterDatabaseSuffixProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.identifier()
            self.state = 1190
            self.match(HiveParser.KW_SET)
            self.state = 1191
            self.match(HiveParser.KW_DBPROPERTIES)
            self.state = 1192
            self.dbProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetOwner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixSetOwner" ):
                listener.enterAlterDatabaseSuffixSetOwner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixSetOwner" ):
                listener.exitAlterDatabaseSuffixSetOwner(self)




    def alterDatabaseSuffixSetOwner(self):

        localctx = HiveParser.AlterDatabaseSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alterDatabaseSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.identifier()
            self.state = 1195
            self.match(HiveParser.KW_SET)
            self.state = 1196
            self.match(HiveParser.KW_OWNER)
            self.state = 1197
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabaseSuffixSetLocation" ):
                listener.enterAlterDatabaseSuffixSetLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabaseSuffixSetLocation" ):
                listener.exitAlterDatabaseSuffixSetLocation(self)




    def alterDatabaseSuffixSetLocation(self):

        localctx = HiveParser.AlterDatabaseSuffixSetLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alterDatabaseSuffixSetLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.identifier()
            self.state = 1200
            self.match(HiveParser.KW_SET)
            self.state = 1201
            self.match(HiveParser.KW_LOCATION)
            self.state = 1202
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixRename" ):
                listener.enterAlterStatementSuffixRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixRename" ):
                listener.exitAlterStatementSuffixRename(self)




    def alterStatementSuffixRename(self):

        localctx = HiveParser.AlterStatementSuffixRenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_alterStatementSuffixRename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(HiveParser.KW_RENAME)
            self.state = 1205
            self.match(HiveParser.KW_TO)
            self.state = 1206
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddCol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddCol" ):
                listener.enterAlterStatementSuffixAddCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddCol" ):
                listener.exitAlterStatementSuffixAddCol(self)




    def alterStatementSuffixAddCol(self):

        localctx = HiveParser.AlterStatementSuffixAddColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alterStatementSuffixAddCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            _la = self._input.LA(1)
            if not(_la==134 or _la==135):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1209
            self.match(HiveParser.KW_COLUMNS)
            self.state = 1210
            self.match(HiveParser.LPAREN)
            self.state = 1211
            self.columnNameTypeList()
            self.state = 1212
            self.match(HiveParser.RPAREN)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225 or _la==226:
                self.state = 1213
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def alterForeignKeyWithName(self):
            return self.getTypedRuleContext(HiveParser.AlterForeignKeyWithNameContext,0)


        def alterConstraintWithName(self):
            return self.getTypedRuleContext(HiveParser.AlterConstraintWithNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddConstraint" ):
                listener.enterAlterStatementSuffixAddConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddConstraint" ):
                listener.exitAlterStatementSuffixAddConstraint(self)




    def alterStatementSuffixAddConstraint(self):

        localctx = HiveParser.AlterStatementSuffixAddConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alterStatementSuffixAddConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(HiveParser.KW_ADD)
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1217
                self.alterForeignKeyWithName()
                pass

            elif la_ == 2:
                self.state = 1218
                self.alterConstraintWithName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixDropConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixDropConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixDropConstraint" ):
                listener.enterAlterStatementSuffixDropConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixDropConstraint" ):
                listener.exitAlterStatementSuffixDropConstraint(self)




    def alterStatementSuffixDropConstraint(self):

        localctx = HiveParser.AlterStatementSuffixDropConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_alterStatementSuffixDropConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(HiveParser.KW_DROP)
            self.state = 1222
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 1223
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenameColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CHANGE(self):
            return self.getToken(HiveParser.KW_CHANGE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def alterColumnConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterColumnConstraintContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def alterStatementChangeColPosition(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementChangeColPositionContext,0)


        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRenameCol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixRenameCol" ):
                listener.enterAlterStatementSuffixRenameCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixRenameCol" ):
                listener.exitAlterStatementSuffixRenameCol(self)




    def alterStatementSuffixRenameCol(self):

        localctx = HiveParser.AlterStatementSuffixRenameColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_alterStatementSuffixRenameCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(HiveParser.KW_CHANGE)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 1226
                self.match(HiveParser.KW_COLUMN)


            self.state = 1229
            self.identifier()
            self.state = 1230
            self.identifier()
            self.state = 1231
            self.colType()
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 13) != 0):
                self.state = 1232
                self.alterColumnConstraint()


            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1235
                self.match(HiveParser.KW_COMMENT)
                self.state = 1236
                self.match(HiveParser.StringLiteral)


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70 or _la==71:
                self.state = 1239
                self.alterStatementChangeColPosition()


            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225 or _la==226:
                self.state = 1242
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateStatsColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateStatsCol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUpdateStatsCol" ):
                listener.enterAlterStatementSuffixUpdateStatsCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUpdateStatsCol" ):
                listener.exitAlterStatementSuffixUpdateStatsCol(self)




    def alterStatementSuffixUpdateStatsCol(self):

        localctx = HiveParser.AlterStatementSuffixUpdateStatsColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alterStatementSuffixUpdateStatsCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(HiveParser.KW_UPDATE)
            self.state = 1246
            self.match(HiveParser.KW_STATISTICS)
            self.state = 1247
            self.match(HiveParser.KW_FOR)
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 1248
                self.match(HiveParser.KW_COLUMN)


            self.state = 1251
            self.identifier()
            self.state = 1252
            self.match(HiveParser.KW_SET)
            self.state = 1253
            self.tableProperties()
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1254
                self.match(HiveParser.KW_COMMENT)
                self.state = 1255
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateStatsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateStats

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUpdateStats" ):
                listener.enterAlterStatementSuffixUpdateStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUpdateStats" ):
                listener.exitAlterStatementSuffixUpdateStats(self)




    def alterStatementSuffixUpdateStats(self):

        localctx = HiveParser.AlterStatementSuffixUpdateStatsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alterStatementSuffixUpdateStats)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(HiveParser.KW_UPDATE)
            self.state = 1259
            self.match(HiveParser.KW_STATISTICS)
            self.state = 1260
            self.match(HiveParser.KW_SET)
            self.state = 1261
            self.tableProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementChangeColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_AFTER(self):
            return self.getToken(HiveParser.KW_AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementChangeColPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementChangeColPosition" ):
                listener.enterAlterStatementChangeColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementChangeColPosition" ):
                listener.exitAlterStatementChangeColPosition(self)




    def alterStatementChangeColPosition(self):

        localctx = HiveParser.AlterStatementChangeColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_alterStatementChangeColPosition)
        try:
            self.state = 1266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1263
                localctx.first = self.match(HiveParser.KW_FIRST)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.match(HiveParser.KW_AFTER)
                self.state = 1265
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def alterStatementSuffixAddPartitionsElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AlterStatementSuffixAddPartitionsElementContext)
            else:
                return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsElementContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddPartitions" ):
                listener.enterAlterStatementSuffixAddPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddPartitions" ):
                listener.exitAlterStatementSuffixAddPartitions(self)




    def alterStatementSuffixAddPartitions(self):

        localctx = HiveParser.AlterStatementSuffixAddPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_alterStatementSuffixAddPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(HiveParser.KW_ADD)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1269
                self.ifNotExists()


            self.state = 1273 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1272
                self.alterStatementSuffixAddPartitionsElement()
                self.state = 1275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==35):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddPartitionsElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def partitionLocation(self):
            return self.getTypedRuleContext(HiveParser.PartitionLocationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddPartitionsElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixAddPartitionsElement" ):
                listener.enterAlterStatementSuffixAddPartitionsElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixAddPartitionsElement" ):
                listener.exitAlterStatementSuffixAddPartitionsElement(self)




    def alterStatementSuffixAddPartitionsElement(self):

        localctx = HiveParser.AlterStatementSuffixAddPartitionsElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alterStatementSuffixAddPartitionsElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.partitionSpec()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1278
                self.partitionLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixTouchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TOUCH(self):
            return self.getToken(HiveParser.KW_TOUCH, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixTouch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixTouch" ):
                listener.enterAlterStatementSuffixTouch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixTouch" ):
                listener.exitAlterStatementSuffixTouch(self)




    def alterStatementSuffixTouch(self):

        localctx = HiveParser.AlterStatementSuffixTouchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_alterStatementSuffixTouch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(HiveParser.KW_TOUCH)
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 1282
                self.partitionSpec()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixArchiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixArchive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixArchive" ):
                listener.enterAlterStatementSuffixArchive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixArchive" ):
                listener.exitAlterStatementSuffixArchive(self)




    def alterStatementSuffixArchive(self):

        localctx = HiveParser.AlterStatementSuffixArchiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alterStatementSuffixArchive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(HiveParser.KW_ARCHIVE)
            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 1289
                self.partitionSpec()
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUnArchiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNARCHIVE(self):
            return self.getToken(HiveParser.KW_UNARCHIVE, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUnArchive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixUnArchive" ):
                listener.enterAlterStatementSuffixUnArchive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixUnArchive" ):
                listener.exitAlterStatementSuffixUnArchive(self)




    def alterStatementSuffixUnArchive(self):

        localctx = HiveParser.AlterStatementSuffixUnArchiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterStatementSuffixUnArchive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(HiveParser.KW_UNARCHIVE)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 1296
                self.partitionSpec()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionLocation" ):
                listener.enterPartitionLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionLocation" ):
                listener.exitPartitionLocation(self)




    def partitionLocation(self):

        localctx = HiveParser.PartitionLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partitionLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(HiveParser.KW_LOCATION)
            self.state = 1303
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixDropPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def dropPartitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.DropPartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.DropPartitionSpecContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixDropPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixDropPartitions" ):
                listener.enterAlterStatementSuffixDropPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixDropPartitions" ):
                listener.exitAlterStatementSuffixDropPartitions(self)




    def alterStatementSuffixDropPartitions(self):

        localctx = HiveParser.AlterStatementSuffixDropPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterStatementSuffixDropPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(HiveParser.KW_DROP)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1306
                self.ifExists()


            self.state = 1309
            self.dropPartitionSpec()
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1310
                self.match(HiveParser.COMMA)
                self.state = 1311
                self.dropPartitionSpec()
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==200:
                self.state = 1317
                self.match(HiveParser.KW_PURGE)


            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==231:
                self.state = 1320
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixProperties" ):
                listener.enterAlterStatementSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixProperties" ):
                listener.exitAlterStatementSuffixProperties(self)




    def alterStatementSuffixProperties(self):

        localctx = HiveParser.AlterStatementSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterStatementSuffixProperties)
        self._la = 0 # Token type
        try:
            self.state = 1332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self.match(HiveParser.KW_SET)
                self.state = 1324
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1325
                self.tableProperties()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.match(HiveParser.KW_UNSET)
                self.state = 1327
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1328
                    self.ifExists()


                self.state = 1331
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterViewSuffixProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewSuffixProperties" ):
                listener.enterAlterViewSuffixProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewSuffixProperties" ):
                listener.exitAlterViewSuffixProperties(self)




    def alterViewSuffixProperties(self):

        localctx = HiveParser.AlterViewSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterViewSuffixProperties)
        self._la = 0 # Token type
        try:
            self.state = 1343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self.match(HiveParser.KW_SET)
                self.state = 1335
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1336
                self.tableProperties()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                self.match(HiveParser.KW_UNSET)
                self.state = 1338
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1339
                    self.ifExists()


                self.state = 1342
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewSuffixRewriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rewriteEnabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteEnabledContext,0)


        def rewriteDisabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteDisabledContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewSuffixRewrite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewSuffixRewrite" ):
                listener.enterAlterMaterializedViewSuffixRewrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewSuffixRewrite" ):
                listener.exitAlterMaterializedViewSuffixRewrite(self)




    def alterMaterializedViewSuffixRewrite(self):

        localctx = HiveParser.AlterMaterializedViewSuffixRewriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterMaterializedViewSuffixRewrite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 1345
                self.rewriteEnabled()
                pass
            elif token in [126]:
                self.state = 1346
                self.rewriteDisabled()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewSuffixRebuildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewSuffixRebuild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterMaterializedViewSuffixRebuild" ):
                listener.enterAlterMaterializedViewSuffixRebuild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterMaterializedViewSuffixRebuild" ):
                listener.exitAlterMaterializedViewSuffixRebuild(self)




    def alterMaterializedViewSuffixRebuild(self):

        localctx = HiveParser.AlterMaterializedViewSuffixRebuildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterMaterializedViewSuffixRebuild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(HiveParser.KW_REBUILD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSerdePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSerdeProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSerdeProperties" ):
                listener.enterAlterStatementSuffixSerdeProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSerdeProperties" ):
                listener.exitAlterStatementSuffixSerdeProperties(self)




    def alterStatementSuffixSerdeProperties(self):

        localctx = HiveParser.AlterStatementSuffixSerdePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterStatementSuffixSerdeProperties)
        try:
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.match(HiveParser.KW_SET)
                self.state = 1352
                self.match(HiveParser.KW_SERDE)
                self.state = 1353
                self.match(HiveParser.StringLiteral)
                self.state = 1357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1354
                    self.match(HiveParser.KW_WITH)
                    self.state = 1355
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 1356
                    self.tableProperties()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.match(HiveParser.KW_SET)
                self.state = 1360
                self.match(HiveParser.KW_SERDEPROPERTIES)
                self.state = 1361
                self.tableProperties()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterIndexStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterIndexStatementSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterIndexStatementSuffix" ):
                listener.enterAlterIndexStatementSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterIndexStatementSuffix" ):
                listener.exitAlterIndexStatementSuffix(self)




    def alterIndexStatementSuffix(self):

        localctx = HiveParser.AlterIndexStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterIndexStatementSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.identifier()
            self.state = 1365
            self.match(HiveParser.KW_ON)
            self.state = 1366
            self.tableName()
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1367
                self.partitionSpec()


            self.state = 1370
            self.match(HiveParser.KW_REBUILD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_FILEFORMAT(self):
            return self.getToken(HiveParser.KW_FILEFORMAT, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(HiveParser.FileFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixFileFormat" ):
                listener.enterAlterStatementSuffixFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixFileFormat" ):
                listener.exitAlterStatementSuffixFileFormat(self)




    def alterStatementSuffixFileFormat(self):

        localctx = HiveParser.AlterStatementSuffixFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterStatementSuffixFileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(HiveParser.KW_SET)
            self.state = 1373
            self.match(HiveParser.KW_FILEFORMAT)
            self.state = 1374
            self.fileFormat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixClusterbySortbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def tableBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableBucketsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixClusterbySortby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixClusterbySortby" ):
                listener.enterAlterStatementSuffixClusterbySortby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixClusterbySortby" ):
                listener.exitAlterStatementSuffixClusterbySortby(self)




    def alterStatementSuffixClusterbySortby(self):

        localctx = HiveParser.AlterStatementSuffixClusterbySortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterStatementSuffixClusterbySortby)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.match(HiveParser.KW_NOT)
                self.state = 1377
                self.match(HiveParser.KW_CLUSTERED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(HiveParser.KW_NOT)
                self.state = 1379
                self.match(HiveParser.KW_SORTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1380
                self.tableBuckets()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTblPartitionStatementSuffixSkewedLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def skewedLocations(self):
            return self.getTypedRuleContext(HiveParser.SkewedLocationsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTblPartitionStatementSuffixSkewedLocation" ):
                listener.enterAlterTblPartitionStatementSuffixSkewedLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTblPartitionStatementSuffixSkewedLocation" ):
                listener.exitAlterTblPartitionStatementSuffixSkewedLocation(self)




    def alterTblPartitionStatementSuffixSkewedLocation(self):

        localctx = HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterTblPartitionStatementSuffixSkewedLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(HiveParser.KW_SET)
            self.state = 1384
            self.match(HiveParser.KW_SKEWED)
            self.state = 1385
            self.match(HiveParser.KW_LOCATION)
            self.state = 1386
            self.skewedLocations()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def skewedLocationsList(self):
            return self.getTypedRuleContext(HiveParser.SkewedLocationsListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedLocations" ):
                listener.enterSkewedLocations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedLocations" ):
                listener.exitSkewedLocations(self)




    def skewedLocations(self):

        localctx = HiveParser.SkewedLocationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_skewedLocations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(HiveParser.LPAREN)
            self.state = 1389
            self.skewedLocationsList()
            self.state = 1390
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedLocationMap(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedLocationMapContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedLocationMapContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocationsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedLocationsList" ):
                listener.enterSkewedLocationsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedLocationsList" ):
                listener.exitSkewedLocationsList(self)




    def skewedLocationsList(self):

        localctx = HiveParser.SkewedLocationsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_skewedLocationsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.skewedLocationMap()
            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1393
                self.match(HiveParser.COMMA)
                self.state = 1394
                self.skewedLocationMap()
                self.state = 1399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedValueLocationElement(self):
            return self.getTypedRuleContext(HiveParser.SkewedValueLocationElementContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocationMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedLocationMap" ):
                listener.enterSkewedLocationMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedLocationMap" ):
                listener.exitSkewedLocationMap(self)




    def skewedLocationMap(self):

        localctx = HiveParser.SkewedLocationMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_skewedLocationMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.skewedValueLocationElement()
            self.state = 1401
            self.match(HiveParser.EQUAL)
            self.state = 1402
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixLocation" ):
                listener.enterAlterStatementSuffixLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixLocation" ):
                listener.exitAlterStatementSuffixLocation(self)




    def alterStatementSuffixLocation(self):

        localctx = HiveParser.AlterStatementSuffixLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alterStatementSuffixLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(HiveParser.KW_SET)
            self.state = 1405
            self.match(HiveParser.KW_LOCATION)
            self.state = 1406
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSkewedbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSkewed(self):
            return self.getTypedRuleContext(HiveParser.TableSkewedContext,0)


        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def storedAsDirs(self):
            return self.getTypedRuleContext(HiveParser.StoredAsDirsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSkewedby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSkewedby" ):
                listener.enterAlterStatementSuffixSkewedby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSkewedby" ):
                listener.exitAlterStatementSuffixSkewedby(self)




    def alterStatementSuffixSkewedby(self):

        localctx = HiveParser.AlterStatementSuffixSkewedbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alterStatementSuffixSkewedby)
        try:
            self.state = 1413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.tableSkewed()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.match(HiveParser.KW_NOT)
                self.state = 1410
                self.match(HiveParser.KW_SKEWED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1411
                self.match(HiveParser.KW_NOT)
                self.state = 1412
                self.storedAsDirs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixExchangePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXCHANGE(self):
            return self.getToken(HiveParser.KW_EXCHANGE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixExchangePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixExchangePartition" ):
                listener.enterAlterStatementSuffixExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixExchangePartition" ):
                listener.exitAlterStatementSuffixExchangePartition(self)




    def alterStatementSuffixExchangePartition(self):

        localctx = HiveParser.AlterStatementSuffixExchangePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alterStatementSuffixExchangePartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(HiveParser.KW_EXCHANGE)
            self.state = 1416
            self.partitionSpec()
            self.state = 1417
            self.match(HiveParser.KW_WITH)
            self.state = 1418
            self.match(HiveParser.KW_TABLE)
            self.state = 1419
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenamePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRenamePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixRenamePart" ):
                listener.enterAlterStatementSuffixRenamePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixRenamePart" ):
                listener.exitAlterStatementSuffixRenamePart(self)




    def alterStatementSuffixRenamePart(self):

        localctx = HiveParser.AlterStatementSuffixRenamePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alterStatementSuffixRenamePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(HiveParser.KW_RENAME)
            self.state = 1422
            self.match(HiveParser.KW_TO)
            self.state = 1423
            self.partitionSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixStatsPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixStatsPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixStatsPart" ):
                listener.enterAlterStatementSuffixStatsPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixStatsPart" ):
                listener.exitAlterStatementSuffixStatsPart(self)




    def alterStatementSuffixStatsPart(self):

        localctx = HiveParser.AlterStatementSuffixStatsPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_alterStatementSuffixStatsPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(HiveParser.KW_UPDATE)
            self.state = 1426
            self.match(HiveParser.KW_STATISTICS)
            self.state = 1427
            self.match(HiveParser.KW_FOR)
            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 1428
                self.match(HiveParser.KW_COLUMN)


            self.state = 1431
            self.identifier()
            self.state = 1432
            self.match(HiveParser.KW_SET)
            self.state = 1433
            self.tableProperties()
            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1434
                self.match(HiveParser.KW_COMMENT)
                self.state = 1435
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixMergeFilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONCATENATE(self):
            return self.getToken(HiveParser.KW_CONCATENATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixMergeFiles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixMergeFiles" ):
                listener.enterAlterStatementSuffixMergeFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixMergeFiles" ):
                listener.exitAlterStatementSuffixMergeFiles(self)




    def alterStatementSuffixMergeFiles(self):

        localctx = HiveParser.AlterStatementSuffixMergeFilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_alterStatementSuffixMergeFiles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.match(HiveParser.KW_CONCATENATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixBucketNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixBucketNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixBucketNum" ):
                listener.enterAlterStatementSuffixBucketNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixBucketNum" ):
                listener.exitAlterStatementSuffixBucketNum(self)




    def alterStatementSuffixBucketNum(self):

        localctx = HiveParser.AlterStatementSuffixBucketNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_alterStatementSuffixBucketNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(HiveParser.KW_INTO)
            self.state = 1441
            self.match(HiveParser.Number)
            self.state = 1442
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def KW_TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_TABLE)
            else:
                return self.getToken(HiveParser.KW_TABLE, i)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TableNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.TableNameContext,i)


        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_DEFERRED(self):
            return self.getToken(HiveParser.KW_DEFERRED, 0)

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def KW_IDXPROPERTIES(self):
            return self.getToken(HiveParser.KW_IDXPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def locationPath(self):
            return self.getTypedRuleContext(HiveParser.LocationPathContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndexStatement" ):
                listener.enterCreateIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndexStatement" ):
                listener.exitCreateIndexStatement(self)




    def createIndexStatement(self):

        localctx = HiveParser.CreateIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_createIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.match(HiveParser.KW_CREATE)
            self.state = 1445
            self.match(HiveParser.KW_INDEX)
            self.state = 1446
            self.identifier()
            self.state = 1447
            self.match(HiveParser.KW_ON)
            self.state = 1448
            self.match(HiveParser.KW_TABLE)
            self.state = 1449
            self.tableName()
            self.state = 1450
            self.columnParenthesesList()
            self.state = 1451
            self.match(HiveParser.KW_AS)
            self.state = 1452
            self.match(HiveParser.StringLiteral)
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1453
                self.match(HiveParser.KW_WITH)
                self.state = 1454
                self.match(HiveParser.KW_DEFERRED)
                self.state = 1455
                self.match(HiveParser.KW_REBUILD)


            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1458
                self.match(HiveParser.KW_IDXPROPERTIES)
                self.state = 1459
                self.tableProperties()


            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==180:
                self.state = 1462
                self.match(HiveParser.KW_IN)
                self.state = 1463
                self.match(HiveParser.KW_TABLE)
                self.state = 1464
                self.tableName()


            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 1467
                self.match(HiveParser.KW_PARTITIONED)
                self.state = 1468
                self.match(HiveParser.KW_BY)
                self.state = 1469
                self.columnParenthesesList()


            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==119:
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 1472
                    self.tableRowFormat()


                self.state = 1475
                self.tableFileFormat()


            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1478
                self.match(HiveParser.KW_LOCATION)
                self.state = 1479
                self.locationPath()


            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 1482
                self.tablePropertiesPrefixed()


            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1485
                self.tableComment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def getRuleIndex(self):
            return HiveParser.RULE_locationPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationPath" ):
                listener.enterLocationPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationPath" ):
                listener.exitLocationPath(self)




    def locationPath(self):

        localctx = HiveParser.LocationPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_locationPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.identifier()
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==332:
                self.state = 1489
                self.match(HiveParser.DOT)
                self.state = 1490
                self.identifier()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndexStatement" ):
                listener.enterDropIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndexStatement" ):
                listener.exitDropIndexStatement(self)




    def dropIndexStatement(self):

        localctx = HiveParser.DropIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dropIndexStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self.match(HiveParser.KW_DROP)
            self.state = 1497
            self.match(HiveParser.KW_INDEX)
            self.state = 1498
            self.identifier()
            self.state = 1499
            self.match(HiveParser.KW_ON)
            self.state = 1500
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePartitionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePartitionPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePartitionPrefix" ):
                listener.enterTablePartitionPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePartitionPrefix" ):
                listener.exitTablePartitionPrefix(self)




    def tablePartitionPrefix(self):

        localctx = HiveParser.TablePartitionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tablePartitionPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.tableName()
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1503
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_WAIT(self):
            return self.getToken(HiveParser.KW_WAIT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_blocking

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocking" ):
                listener.enterBlocking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocking" ):
                listener.exitBlocking(self)




    def blocking(self):

        localctx = HiveParser.BlockingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_blocking)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.match(HiveParser.KW_AND)
            self.state = 1507
            self.match(HiveParser.KW_WAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixCompactContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMPACT(self):
            return self.getToken(HiveParser.KW_COMPACT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def blocking(self):
            return self.getTypedRuleContext(HiveParser.BlockingContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixCompact

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixCompact" ):
                listener.enterAlterStatementSuffixCompact(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixCompact" ):
                listener.exitAlterStatementSuffixCompact(self)




    def alterStatementSuffixCompact(self):

        localctx = HiveParser.AlterStatementSuffixCompactContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_alterStatementSuffixCompact)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(HiveParser.KW_COMPACT)
            self.state = 1510
            self.match(HiveParser.StringLiteral)
            self.state = 1512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1511
                self.blocking()


            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1514
                self.match(HiveParser.KW_WITH)
                self.state = 1515
                self.match(HiveParser.KW_OVERWRITE)
                self.state = 1516
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1517
                self.tableProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSetOwner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatementSuffixSetOwner" ):
                listener.enterAlterStatementSuffixSetOwner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatementSuffixSetOwner" ):
                listener.exitAlterStatementSuffixSetOwner(self)




    def alterStatementSuffixSetOwner(self):

        localctx = HiveParser.AlterStatementSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_alterStatementSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(HiveParser.KW_SET)
            self.state = 1521
            self.match(HiveParser.KW_OWNER)
            self.state = 1522
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileFormat" ):
                listener.enterFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileFormat" ):
                listener.exitFileFormat(self)




    def fileFormat(self):

        localctx = HiveParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_fileFormat)
        self._la = 0 # Token type
        try:
            self.state = 1537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1524
                self.match(HiveParser.KW_INPUTFORMAT)
                self.state = 1525
                self.match(HiveParser.StringLiteral)
                self.state = 1526
                self.match(HiveParser.KW_OUTPUTFORMAT)
                self.state = 1527
                self.match(HiveParser.StringLiteral)
                self.state = 1528
                self.match(HiveParser.KW_SERDE)
                self.state = 1529
                self.match(HiveParser.StringLiteral)
                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 1530
                    self.match(HiveParser.KW_INPUTDRIVER)
                    self.state = 1531
                    self.match(HiveParser.StringLiteral)
                    self.state = 1532
                    self.match(HiveParser.KW_OUTPUTDRIVER)
                    self.state = 1533
                    self.match(HiveParser.StringLiteral)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1536
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_inputFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputFileFormat" ):
                listener.enterInputFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputFileFormat" ):
                listener.exitInputFileFormat(self)




    def inputFileFormat(self):

        localctx = HiveParser.InputFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_inputFileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(HiveParser.KW_INPUTFORMAT)
            self.state = 1540
            self.match(HiveParser.StringLiteral)
            self.state = 1541
            self.match(HiveParser.KW_SERDE)
            self.state = 1542
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def KW_ELEM_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ELEM_TYPE)
            else:
                return self.getToken(HiveParser.KW_ELEM_TYPE, i)

        def KW_KEY_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_KEY_TYPE)
            else:
                return self.getToken(HiveParser.KW_KEY_TYPE, i)

        def KW_VALUE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_VALUE_TYPE)
            else:
                return self.getToken(HiveParser.KW_VALUE_TYPE, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tabTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabTypeExpr" ):
                listener.enterTabTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabTypeExpr" ):
                listener.exitTabTypeExpr(self)




    def tabTypeExpr(self):

        localctx = HiveParser.TabTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tabTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.identifier()
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==332:
                self.state = 1545
                self.match(HiveParser.DOT)
                self.state = 1546
                self.identifier()


            self.state = 1562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1549
                self.identifier()
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==332:
                    self.state = 1550
                    self.match(HiveParser.DOT)
                    self.state = 1555
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                    if la_ == 1:
                        self.state = 1551
                        self.match(HiveParser.KW_ELEM_TYPE)
                        pass

                    elif la_ == 2:
                        self.state = 1552
                        self.match(HiveParser.KW_KEY_TYPE)
                        pass

                    elif la_ == 3:
                        self.state = 1553
                        self.match(HiveParser.KW_VALUE_TYPE)
                        pass

                    elif la_ == 4:
                        self.state = 1554
                        self.identifier()
                        pass


                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tabTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.TabTypeExprContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartTypeExpr" ):
                listener.enterPartTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartTypeExpr" ):
                listener.exitPartTypeExpr(self)




    def partTypeExpr(self):

        localctx = HiveParser.PartTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_partTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            self.tabTypeExpr()
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1565
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabPartColTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def extColumnName(self):
            return self.getTypedRuleContext(HiveParser.ExtColumnNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tabPartColTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabPartColTypeExpr" ):
                listener.enterTabPartColTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabPartColTypeExpr" ):
                listener.exitTabPartColTypeExpr(self)




    def tabPartColTypeExpr(self):

        localctx = HiveParser.TabPartColTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tabPartColTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self.tableName()
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1569
                self.partitionSpec()


            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1572
                self.extColumnName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESCRIBE(self):
            return self.getToken(HiveParser.KW_DESCRIBE, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def descFuncNames(self):
            return self.getTypedRuleContext(HiveParser.DescFuncNamesContext,0)


        def tabPartColTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.TabPartColTypeExprContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_descStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescStatement" ):
                listener.enterDescStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescStatement" ):
                listener.exitDescStatement(self)




    def descStatement(self):

        localctx = HiveParser.DescStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_descStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            _la = self._input.LA(1)
            if not(_la==13 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1576
                _la = self._input.LA(1)
                if not(_la==181 or _la==184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 1577
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1580
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 1581
                self.match(HiveParser.KW_FUNCTION)
                self.state = 1583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 1582
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1585
                self.descFuncNames()
                pass

            elif la_ == 3:
                self.state = 1586
                _la = self._input.LA(1)
                if not(_la==144 or _la==145):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1587
                self.tabPartColTypeExpr()
                pass

            elif la_ == 4:
                self.state = 1588
                self.tabPartColTypeExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_COMPUTE(self):
            return self.getToken(HiveParser.KW_COMPUTE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_CACHE(self):
            return self.getToken(HiveParser.KW_CACHE, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def KW_NOSCAN(self):
            return self.getToken(HiveParser.KW_NOSCAN, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_analyzeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeStatement" ):
                listener.enterAnalyzeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeStatement" ):
                listener.exitAnalyzeStatement(self)




    def analyzeStatement(self):

        localctx = HiveParser.AnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_analyzeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(HiveParser.KW_ANALYZE)
            self.state = 1592
            self.match(HiveParser.KW_TABLE)

            self.state = 1593
            self.tableOrPartition()
            self.state = 1606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.state = 1594
                self.match(HiveParser.KW_COMPUTE)
                self.state = 1595
                self.match(HiveParser.KW_STATISTICS)
                self.state = 1602
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [245]:
                    self.state = 1596
                    self.match(HiveParser.KW_NOSCAN)
                    pass
                elif token in [231]:
                    self.state = 1597
                    self.match(HiveParser.KW_FOR)
                    self.state = 1598
                    self.match(HiveParser.KW_COLUMNS)
                    self.state = 1600
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                    if la_ == 1:
                        self.state = 1599
                        self.columnNameList()


                    pass
                elif token in [-1, 13, 21, 23, 25, 44, 45, 56, 57, 58, 65, 67, 72, 73, 98, 100, 117, 143, 149, 155, 173, 186, 187, 190, 192, 202, 220, 224, 244, 264, 275, 277, 278, 298, 301, 303, 335, 336]:
                    pass
                else:
                    pass
                pass
            elif token in [286]:
                self.state = 1604
                self.match(HiveParser.KW_CACHE)
                self.state = 1605
                self.match(HiveParser.KW_METADATA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_DATABASES(self):
            return self.getToken(HiveParser.KW_DATABASES, 0)

        def KW_SCHEMAS(self):
            return self.getToken(HiveParser.KW_SCHEMAS, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def showStmtIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowStmtIdentifierContext,0)


        def KW_TABLES(self):
            return self.getToken(HiveParser.KW_TABLES, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_FROM(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_FROM)
            else:
                return self.getToken(HiveParser.KW_FROM, i)

        def KW_IN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_IN)
            else:
                return self.getToken(HiveParser.KW_IN, i)

        def KW_VIEWS(self):
            return self.getToken(HiveParser.KW_VIEWS, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def showFunctionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowFunctionIdentifierContext,0)


        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def partTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.PartTypeExprContext,0)


        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def KW_CONF(self):
            return self.getToken(HiveParser.KW_CONF, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLANS(self):
            return self.getToken(HiveParser.KW_PLANS, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)




    def showStatement(self):

        localctx = HiveParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 1731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1608
                self.match(HiveParser.KW_SHOW)
                self.state = 1609
                _la = self._input.LA(1)
                if not(_la==182 or _la==185):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 1610
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1611
                    self.showStmtIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1614
                self.match(HiveParser.KW_SHOW)
                self.state = 1615
                self.match(HiveParser.KW_TABLES)
                self.state = 1618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1616
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==180):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1617
                    self.identifier()


                self.state = 1623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1620
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1621
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1622
                    self.showStmtIdentifier()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1625
                self.match(HiveParser.KW_SHOW)
                self.state = 1626
                self.match(HiveParser.KW_VIEWS)
                self.state = 1629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==180):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1628
                    self.identifier()


                self.state = 1634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1631
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1632
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1633
                    self.showStmtIdentifier()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1636
                self.match(HiveParser.KW_SHOW)
                self.state = 1637
                self.match(HiveParser.KW_MATERIALIZED)
                self.state = 1638
                self.match(HiveParser.KW_VIEWS)
                self.state = 1641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1639
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==180):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1640
                    self.identifier()


                self.state = 1646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1643
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1644
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1645
                    self.showStmtIdentifier()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1648
                self.match(HiveParser.KW_SHOW)
                self.state = 1649
                self.match(HiveParser.KW_COLUMNS)
                self.state = 1650
                _la = self._input.LA(1)
                if not(_la==21 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1651
                self.tableName()
                self.state = 1654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1652
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==180):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1653
                    self.identifier()


                self.state = 1659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1656
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1657
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1658
                    self.showStmtIdentifier()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1661
                self.match(HiveParser.KW_SHOW)
                self.state = 1662
                self.match(HiveParser.KW_FUNCTIONS)
                self.state = 1666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1663
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1664
                    self.showFunctionIdentifier()

                elif la_ == 2:
                    self.state = 1665
                    self.showFunctionIdentifier()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1668
                self.match(HiveParser.KW_SHOW)
                self.state = 1669
                self.match(HiveParser.KW_PARTITIONS)
                self.state = 1670
                self.tableName()
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1671
                    self.partitionSpec()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1674
                self.match(HiveParser.KW_SHOW)
                self.state = 1675
                self.match(HiveParser.KW_CREATE)
                self.state = 1680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [181, 184]:
                    self.state = 1676
                    _la = self._input.LA(1)
                    if not(_la==181 or _la==184):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1677
                    self.identifier()
                    pass
                elif token in [37]:
                    self.state = 1678
                    self.match(HiveParser.KW_TABLE)
                    self.state = 1679
                    self.tableName()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1682
                self.match(HiveParser.KW_SHOW)
                self.state = 1683
                self.match(HiveParser.KW_TABLE)
                self.state = 1684
                self.match(HiveParser.KW_EXTENDED)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21 or _la==180:
                    self.state = 1685
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==180):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1686
                    self.identifier()


                self.state = 1689
                self.match(HiveParser.KW_LIKE)
                self.state = 1690
                self.showStmtIdentifier()
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1691
                    self.partitionSpec()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1694
                self.match(HiveParser.KW_SHOW)
                self.state = 1695
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1696
                self.tableName()
                self.state = 1700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self.match(HiveParser.LPAREN)
                    self.state = 1698
                    self.match(HiveParser.StringLiteral)
                    self.state = 1699
                    self.match(HiveParser.RPAREN)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1702
                self.match(HiveParser.KW_SHOW)
                self.state = 1703
                self.match(HiveParser.KW_LOCKS)
                self.state = 1715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1704
                    _la = self._input.LA(1)
                    if not(_la==181 or _la==184):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1705
                    self.identifier()
                    self.state = 1707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==144:
                        self.state = 1706
                        self.match(HiveParser.KW_EXTENDED)


                    pass

                elif la_ == 2:
                    self.state = 1710
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1709
                        self.partTypeExpr()


                    self.state = 1713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==144:
                        self.state = 1712
                        self.match(HiveParser.KW_EXTENDED)


                    pass


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1717
                self.match(HiveParser.KW_SHOW)
                self.state = 1718
                self.match(HiveParser.KW_COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1719
                self.match(HiveParser.KW_SHOW)
                self.state = 1720
                self.match(HiveParser.KW_TRANSACTIONS)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1721
                self.match(HiveParser.KW_SHOW)
                self.state = 1722
                self.match(HiveParser.KW_CONF)
                self.state = 1723
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1724
                self.match(HiveParser.KW_SHOW)
                self.state = 1725
                self.match(HiveParser.KW_RESOURCE)
                self.state = 1729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [313]:
                    self.state = 1726
                    self.match(HiveParser.KW_PLAN)
                    self.state = 1727
                    self.identifier()
                    pass
                elif token in [315]:
                    self.state = 1728
                    self.match(HiveParser.KW_PLANS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def lockMode(self):
            return self.getTypedRuleContext(HiveParser.LockModeContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)




    def lockStatement(self):

        localctx = HiveParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.match(HiveParser.KW_LOCK)
            self.state = 1734
            self.match(HiveParser.KW_TABLE)
            self.state = 1735
            self.tableName()
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1736
                self.partitionSpec()


            self.state = 1739
            self.lockMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def lockMode(self):
            return self.getTypedRuleContext(HiveParser.LockModeContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_lockDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockDatabase" ):
                listener.enterLockDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockDatabase" ):
                listener.exitLockDatabase(self)




    def lockDatabase(self):

        localctx = HiveParser.LockDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_lockDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.match(HiveParser.KW_LOCK)
            self.state = 1742
            _la = self._input.LA(1)
            if not(_la==181 or _la==184):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1743
            self.identifier()
            self.state = 1744
            self.lockMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHARED(self):
            return self.getToken(HiveParser.KW_SHARED, 0)

        def KW_EXCLUSIVE(self):
            return self.getToken(HiveParser.KW_EXCLUSIVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_lockMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockMode" ):
                listener.enterLockMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockMode" ):
                listener.exitLockMode(self)




    def lockMode(self):

        localctx = HiveParser.LockModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lockMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            _la = self._input.LA(1)
            if not(_la==193 or _la==194):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_unlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStatement" ):
                listener.enterUnlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStatement" ):
                listener.exitUnlockStatement(self)




    def unlockStatement(self):

        localctx = HiveParser.UnlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.match(HiveParser.KW_UNLOCK)
            self.state = 1749
            self.match(HiveParser.KW_TABLE)
            self.state = 1750
            self.tableName()
            self.state = 1752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1751
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_unlockDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockDatabase" ):
                listener.enterUnlockDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockDatabase" ):
                listener.exitUnlockDatabase(self)




    def unlockDatabase(self):

        localctx = HiveParser.UnlockDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_unlockDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(HiveParser.KW_UNLOCK)
            self.state = 1755
            _la = self._input.LA(1)
            if not(_la==181 or _la==184):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1756
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoleStatement" ):
                listener.enterCreateRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoleStatement" ):
                listener.exitCreateRoleStatement(self)




    def createRoleStatement(self):

        localctx = HiveParser.CreateRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_createRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.match(HiveParser.KW_CREATE)
            self.state = 1759
            self.match(HiveParser.KW_ROLE)
            self.state = 1760
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRoleStatement" ):
                listener.enterDropRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRoleStatement" ):
                listener.exitDropRoleStatement(self)




    def dropRoleStatement(self):

        localctx = HiveParser.DropRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dropRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.match(HiveParser.KW_DROP)
            self.state = 1763
            self.match(HiveParser.KW_ROLE)
            self.state = 1764
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeListContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def privilegeObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeObjectContext,0)


        def withGrantOption(self):
            return self.getTypedRuleContext(HiveParser.WithGrantOptionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_grantPrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantPrivileges" ):
                listener.enterGrantPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantPrivileges" ):
                listener.exitGrantPrivileges(self)




    def grantPrivileges(self):

        localctx = HiveParser.GrantPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_grantPrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(HiveParser.KW_GRANT)
            self.state = 1767
            self.privilegeList()
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1768
                self.privilegeObject()


            self.state = 1771
            self.match(HiveParser.KW_TO)
            self.state = 1772
            self.principalSpecification()
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1773
                self.withGrantOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokePrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REVOKE(self):
            return self.getToken(HiveParser.KW_REVOKE, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeListContext,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def grantOptionFor(self):
            return self.getTypedRuleContext(HiveParser.GrantOptionForContext,0)


        def privilegeObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_revokePrivileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokePrivileges" ):
                listener.enterRevokePrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokePrivileges" ):
                listener.exitRevokePrivileges(self)




    def revokePrivileges(self):

        localctx = HiveParser.RevokePrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_revokePrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.match(HiveParser.KW_REVOKE)
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 1777
                self.grantOptionFor()


            self.state = 1780
            self.privilegeList()
            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1781
                self.privilegeObject()


            self.state = 1784
            self.match(HiveParser.KW_FROM)
            self.state = 1785
            self.principalSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def withAdminOption(self):
            return self.getTypedRuleContext(HiveParser.WithAdminOptionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_grantRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRole" ):
                listener.enterGrantRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRole" ):
                listener.exitGrantRole(self)




    def grantRole(self):

        localctx = HiveParser.GrantRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_grantRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.match(HiveParser.KW_GRANT)
            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1788
                self.match(HiveParser.KW_ROLE)


            self.state = 1791
            self.identifier()
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1792
                self.match(HiveParser.COMMA)
                self.state = 1793
                self.identifier()
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1799
            self.match(HiveParser.KW_TO)
            self.state = 1800
            self.principalSpecification()
            self.state = 1802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1801
                self.withAdminOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REVOKE(self):
            return self.getToken(HiveParser.KW_REVOKE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def adminOptionFor(self):
            return self.getTypedRuleContext(HiveParser.AdminOptionForContext,0)


        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_revokeRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRole" ):
                listener.enterRevokeRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRole" ):
                listener.exitRevokeRole(self)




    def revokeRole(self):

        localctx = HiveParser.RevokeRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_revokeRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(HiveParser.KW_REVOKE)
            self.state = 1806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1805
                self.adminOptionFor()


            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1808
                self.match(HiveParser.KW_ROLE)


            self.state = 1811
            self.identifier()
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1812
                self.match(HiveParser.COMMA)
                self.state = 1813
                self.identifier()
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1819
            self.match(HiveParser.KW_FROM)
            self.state = 1820
            self.principalSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRoleGrantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showRoleGrants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)




    def showRoleGrants(self):

        localctx = HiveParser.ShowRoleGrantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_showRoleGrants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.match(HiveParser.KW_SHOW)
            self.state = 1823
            self.match(HiveParser.KW_ROLE)
            self.state = 1824
            self.match(HiveParser.KW_GRANT)
            self.state = 1825
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showRoles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)




    def showRoles(self):

        localctx = HiveParser.ShowRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_showRoles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.match(HiveParser.KW_SHOW)
            self.state = 1828
            self.match(HiveParser.KW_ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCurrentRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showCurrentRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentRole" ):
                listener.enterShowCurrentRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentRole" ):
                listener.exitShowCurrentRole(self)




    def showCurrentRole(self):

        localctx = HiveParser.ShowCurrentRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_showCurrentRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.match(HiveParser.KW_SHOW)
            self.state = 1831
            self.match(HiveParser.KW_CURRENT)
            self.state = 1832
            self.match(HiveParser.KW_ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_NONE(self):
            return self.getToken(HiveParser.KW_NONE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)




    def setRole(self):

        localctx = HiveParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_setRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(HiveParser.KW_SET)
            self.state = 1835
            self.match(HiveParser.KW_ROLE)
            self.state = 1839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 1836
                self.match(HiveParser.KW_ALL)
                pass
            elif token in [4]:
                self.state = 1837
                self.match(HiveParser.KW_NONE)
                pass
            elif token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.state = 1838
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGrantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def privilegeIncludeColObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeIncludeColObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showGrants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)




    def showGrants(self):

        localctx = HiveParser.ShowGrantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_showGrants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.match(HiveParser.KW_SHOW)
            self.state = 1842
            self.match(HiveParser.KW_GRANT)
            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==246 or _la==247:
                self.state = 1843
                self.principalName()


            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1846
                self.match(HiveParser.KW_ON)
                self.state = 1847
                self.privilegeIncludeColObject()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolePrincipalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_PRINCIPALS(self):
            return self.getToken(HiveParser.KW_PRINCIPALS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showRolePrincipals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRolePrincipals" ):
                listener.enterShowRolePrincipals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRolePrincipals" ):
                listener.exitShowRolePrincipals(self)




    def showRolePrincipals(self):

        localctx = HiveParser.ShowRolePrincipalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_showRolePrincipals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.match(HiveParser.KW_SHOW)
            self.state = 1851
            self.match(HiveParser.KW_PRINCIPALS)
            self.state = 1852
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeIncludeColObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def privObjectCols(self):
            return self.getTypedRuleContext(HiveParser.PrivObjectColsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privilegeIncludeColObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeIncludeColObject" ):
                listener.enterPrivilegeIncludeColObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeIncludeColObject" ):
                listener.exitPrivilegeIncludeColObject(self)




    def privilegeIncludeColObject(self):

        localctx = HiveParser.PrivilegeIncludeColObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_privilegeIncludeColObject)
        try:
            self.state = 1856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self.match(HiveParser.KW_ALL)
                pass
            elif token in [12, 13, 14, 15, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1855
                self.privObjectCols()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def privObject(self):
            return self.getTypedRuleContext(HiveParser.PrivObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privilegeObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeObject" ):
                listener.enterPrivilegeObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeObject" ):
                listener.exitPrivilegeObject(self)




    def privilegeObject(self):

        localctx = HiveParser.PrivilegeObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_privilegeObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.match(HiveParser.KW_ON)
            self.state = 1859
            self.privObject()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObject" ):
                listener.enterPrivObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObject" ):
                listener.exitPrivObject(self)




    def privObject(self):

        localctx = HiveParser.PrivObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_privObject)
        self._la = 0 # Token type
        try:
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1861
                _la = self._input.LA(1)
                if not(_la==181 or _la==184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1862
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 1863
                    self.match(HiveParser.KW_TABLE)


                self.state = 1866
                self.tableName()
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1867
                    self.partitionSpec()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1870
                self.match(HiveParser.KW_URI)
                self.state = 1871
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1872
                self.match(HiveParser.KW_SERVER)
                self.state = 1873
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectColsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privObjectCols

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivObjectCols" ):
                listener.enterPrivObjectCols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivObjectCols" ):
                listener.exitPrivObjectCols(self)




    def privObjectCols(self):

        localctx = HiveParser.PrivObjectColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_privObjectCols)
        self._la = 0 # Token type
        try:
            self.state = 1895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1876
                _la = self._input.LA(1)
                if not(_la==181 or _la==184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1877
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 1878
                    self.match(HiveParser.KW_TABLE)


                self.state = 1881
                self.tableName()
                self.state = 1886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1882
                    self.match(HiveParser.LPAREN)
                    self.state = 1883
                    self.columnNameList()
                    self.state = 1884
                    self.match(HiveParser.RPAREN)


                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1888
                    self.partitionSpec()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1891
                self.match(HiveParser.KW_URI)
                self.state = 1892
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1893
                self.match(HiveParser.KW_SERVER)
                self.state = 1894
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privlegeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrivlegeDefContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrivlegeDefContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = HiveParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_privilegeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.privlegeDef()
            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1898
                self.match(HiveParser.COMMA)
                self.state = 1899
                self.privlegeDef()
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivlegeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeType(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeTypeContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privlegeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivlegeDef" ):
                listener.enterPrivlegeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivlegeDef" ):
                listener.exitPrivlegeDef(self)




    def privlegeDef(self):

        localctx = HiveParser.PrivlegeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_privlegeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.privilegeType()
            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==336:
                self.state = 1906
                self.match(HiveParser.LPAREN)
                self.state = 1907
                self.columnNameList()
                self.state = 1908
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_SELECT(self):
            return self.getToken(HiveParser.KW_SELECT, 0)

        def KW_SHOW_DATABASE(self):
            return self.getToken(HiveParser.KW_SHOW_DATABASE, 0)

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privilegeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeType" ):
                listener.enterPrivilegeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeType" ):
                listener.exitPrivilegeType(self)




    def privilegeType(self):

        localctx = HiveParser.PrivilegeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_privilegeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 41943048) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 261) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 3377699720658945) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def principalName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrincipalNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrincipalNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_principalSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipalSpecification" ):
                listener.enterPrincipalSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipalSpecification" ):
                listener.exitPrincipalSpecification(self)




    def principalSpecification(self):

        localctx = HiveParser.PrincipalSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_principalSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.principalName()
            self.state = 1919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1915
                self.match(HiveParser.COMMA)
                self.state = 1916
                self.principalName()
                self.state = 1921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USER(self):
            return self.getToken(HiveParser.KW_USER, 0)

        def principalIdentifier(self):
            return self.getTypedRuleContext(HiveParser.PrincipalIdentifierContext,0)


        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_principalName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipalName" ):
                listener.enterPrincipalName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipalName" ):
                listener.exitPrincipalName(self)




    def principalName(self):

        localctx = HiveParser.PrincipalNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_principalName)
        try:
            self.state = 1928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [246]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.match(HiveParser.KW_USER)
                self.state = 1923
                self.principalIdentifier()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.match(HiveParser.KW_GROUP)
                self.state = 1925
                self.principalIdentifier()
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1926
                self.match(HiveParser.KW_ROLE)
                self.state = 1927
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithGrantOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withGrantOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithGrantOption" ):
                listener.enterWithGrantOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithGrantOption" ):
                listener.exitWithGrantOption(self)




    def withGrantOption(self):

        localctx = HiveParser.WithGrantOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_withGrantOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(HiveParser.KW_WITH)
            self.state = 1931
            self.match(HiveParser.KW_GRANT)
            self.state = 1932
            self.match(HiveParser.KW_OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_grantOptionFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOptionFor" ):
                listener.enterGrantOptionFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOptionFor" ):
                listener.exitGrantOptionFor(self)




    def grantOptionFor(self):

        localctx = HiveParser.GrantOptionForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_grantOptionFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.match(HiveParser.KW_GRANT)
            self.state = 1935
            self.match(HiveParser.KW_OPTION)
            self.state = 1936
            self.match(HiveParser.KW_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminOptionForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_adminOptionFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminOptionFor" ):
                listener.enterAdminOptionFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminOptionFor" ):
                listener.exitAdminOptionFor(self)




    def adminOptionFor(self):

        localctx = HiveParser.AdminOptionForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_adminOptionFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.match(HiveParser.KW_ADMIN)
            self.state = 1939
            self.match(HiveParser.KW_OPTION)
            self.state = 1940
            self.match(HiveParser.KW_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithAdminOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withAdminOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithAdminOption" ):
                listener.enterWithAdminOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithAdminOption" ):
                listener.exitWithAdminOption(self)




    def withAdminOption(self):

        localctx = HiveParser.WithAdminOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_withAdminOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.match(HiveParser.KW_WITH)
            self.state = 1943
            self.match(HiveParser.KW_ADMIN)
            self.state = 1944
            self.match(HiveParser.KW_OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetastoreCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MSCK(self):
            return self.getToken(HiveParser.KW_MSCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_REPAIR(self):
            return self.getToken(HiveParser.KW_REPAIR, 0)

        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_SYNC(self):
            return self.getToken(HiveParser.KW_SYNC, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_metastoreCheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetastoreCheck" ):
                listener.enterMetastoreCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetastoreCheck" ):
                listener.exitMetastoreCheck(self)




    def metastoreCheck(self):

        localctx = HiveParser.MetastoreCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_metastoreCheck)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.match(HiveParser.KW_MSCK)
            self.state = 1948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 1947
                self.match(HiveParser.KW_REPAIR)


            self.state = 1959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 1950
                self.match(HiveParser.KW_TABLE)
                self.state = 1951
                self.tableName()
                self.state = 1954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1952
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==134 or _la==331):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1953
                    self.match(HiveParser.KW_PARTITIONS)


                pass
            elif token in [-1, 13, 21, 23, 25, 35, 44, 45, 56, 57, 58, 65, 67, 72, 73, 98, 100, 117, 143, 149, 155, 173, 186, 187, 190, 192, 202, 220, 224, 244, 264, 275, 277, 278, 298, 301, 303, 335, 336]:
                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 1956
                    self.partitionSpec()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ResourceContext)
            else:
                return self.getTypedRuleContext(HiveParser.ResourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_resourceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceList" ):
                listener.enterResourceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceList" ):
                listener.exitResourceList(self)




    def resourceList(self):

        localctx = HiveParser.ResourceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_resourceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.resource()
            self.state = 1966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 1962
                self.match(HiveParser.COMMA)
                self.state = 1963
                self.resource()
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resourceType(self):
            return self.getTypedRuleContext(HiveParser.ResourceTypeContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = HiveParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.resourceType()
            self.state = 1970
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JAR(self):
            return self.getToken(HiveParser.KW_JAR, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_resourceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceType" ):
                listener.enterResourceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceType" ):
                listener.exitResourceType(self)




    def resourceType(self):

        localctx = HiveParser.ResourceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_resourceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            _la = self._input.LA(1)
            if not(_la==141 or _la==142 or _la==216):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def resourceList(self):
            return self.getTypedRuleContext(HiveParser.ResourceListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunctionStatement" ):
                listener.enterCreateFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunctionStatement" ):
                listener.exitCreateFunctionStatement(self)




    def createFunctionStatement(self):

        localctx = HiveParser.CreateFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_createFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(HiveParser.KW_CREATE)
            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1975
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 1978
            self.match(HiveParser.KW_FUNCTION)
            self.state = 1979
            self.functionIdentifier()
            self.state = 1980
            self.match(HiveParser.KW_AS)
            self.state = 1981
            self.match(HiveParser.StringLiteral)
            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1982
                self.match(HiveParser.KW_USING)
                self.state = 1983
                self.resourceList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunctionStatement" ):
                listener.enterDropFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunctionStatement" ):
                listener.exitDropFunctionStatement(self)




    def dropFunctionStatement(self):

        localctx = HiveParser.DropFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_dropFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self.match(HiveParser.KW_DROP)
            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1987
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 1990
            self.match(HiveParser.KW_FUNCTION)
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1991
                self.ifExists()


            self.state = 1994
            self.functionIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReloadFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RELOAD(self):
            return self.getToken(HiveParser.KW_RELOAD, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_reloadFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloadFunctionStatement" ):
                listener.enterReloadFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloadFunctionStatement" ):
                listener.exitReloadFunctionStatement(self)




    def reloadFunctionStatement(self):

        localctx = HiveParser.ReloadFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_reloadFunctionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(HiveParser.KW_RELOAD)
            self.state = 1997
            self.match(HiveParser.KW_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMacroStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_MACRO(self):
            return self.getToken(HiveParser.KW_MACRO, 0)

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createMacroStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMacroStatement" ):
                listener.enterCreateMacroStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMacroStatement" ):
                listener.exitCreateMacroStatement(self)




    def createMacroStatement(self):

        localctx = HiveParser.CreateMacroStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_createMacroStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(HiveParser.KW_CREATE)
            self.state = 2000
            self.match(HiveParser.KW_TEMPORARY)
            self.state = 2001
            self.match(HiveParser.KW_MACRO)
            self.state = 2002
            self.match(HiveParser.Identifier)
            self.state = 2003
            self.match(HiveParser.LPAREN)
            self.state = 2005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8879127934246383616) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3458763614599775565) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -2319580865570571373) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -4618828440659893195) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -244939057153) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 1099511627779) != 0):
                self.state = 2004
                self.columnNameTypeList()


            self.state = 2007
            self.match(HiveParser.RPAREN)
            self.state = 2008
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMacroStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_MACRO(self):
            return self.getToken(HiveParser.KW_MACRO, 0)

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropMacroStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMacroStatement" ):
                listener.enterDropMacroStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMacroStatement" ):
                listener.exitDropMacroStatement(self)




    def dropMacroStatement(self):

        localctx = HiveParser.DropMacroStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_dropMacroStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.match(HiveParser.KW_DROP)
            self.state = 2011
            self.match(HiveParser.KW_TEMPORARY)
            self.state = 2012
            self.match(HiveParser.KW_MACRO)
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2013
                self.ifExists()


            self.state = 2016
            self.match(HiveParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def orReplace(self):
            return self.getTypedRuleContext(HiveParser.OrReplaceContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameCommentList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameCommentListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def viewPartition(self):
            return self.getTypedRuleContext(HiveParser.ViewPartitionContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateViewStatement" ):
                listener.enterCreateViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateViewStatement" ):
                listener.exitCreateViewStatement(self)




    def createViewStatement(self):

        localctx = HiveParser.CreateViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_createViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.match(HiveParser.KW_CREATE)
            self.state = 2020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 2019
                self.orReplace()


            self.state = 2022
            self.match(HiveParser.KW_VIEW)
            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2023
                self.ifNotExists()


            self.state = 2026
            self.tableName()
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==336:
                self.state = 2027
                self.match(HiveParser.LPAREN)
                self.state = 2028
                self.columnNameCommentList()
                self.state = 2029
                self.match(HiveParser.RPAREN)


            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 2033
                self.tableComment()


            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 2036
                self.viewPartition()


            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2039
                self.tablePropertiesPrefixed()


            self.state = 2042
            self.match(HiveParser.KW_AS)
            self.state = 2043
            self.selectStatementWithCTE()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def rewriteDisabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteDisabledContext,0)


        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedViewStatement" ):
                listener.enterCreateMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedViewStatement" ):
                listener.exitCreateMaterializedViewStatement(self)




    def createMaterializedViewStatement(self):

        localctx = HiveParser.CreateMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_createMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.match(HiveParser.KW_CREATE)
            self.state = 2046
            self.match(HiveParser.KW_MATERIALIZED)
            self.state = 2047
            self.match(HiveParser.KW_VIEW)
            self.state = 2049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2048
                self.ifNotExists()


            self.state = 2051
            self.tableName()
            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 2052
                self.rewriteDisabled()


            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 2055
                self.tableComment()


            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 2058
                self.tableRowFormat()


            self.state = 2062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 2061
                self.tableFileFormat()


            self.state = 2065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2064
                self.tableLocation()


            self.state = 2068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2067
                self.tablePropertiesPrefixed()


            self.state = 2070
            self.match(HiveParser.KW_AS)
            self.state = 2071
            self.selectStatementWithCTE()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_viewPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewPartition" ):
                listener.enterViewPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewPartition" ):
                listener.exitViewPartition(self)




    def viewPartition(self):

        localctx = HiveParser.ViewPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_viewPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.match(HiveParser.KW_PARTITIONED)
            self.state = 2074
            self.match(HiveParser.KW_ON)
            self.state = 2075
            self.match(HiveParser.LPAREN)
            self.state = 2076
            self.columnNameList()
            self.state = 2077
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def viewName(self):
            return self.getTypedRuleContext(HiveParser.ViewNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropViewStatement" ):
                listener.enterDropViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropViewStatement" ):
                listener.exitDropViewStatement(self)




    def dropViewStatement(self):

        localctx = HiveParser.DropViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_dropViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.match(HiveParser.KW_DROP)
            self.state = 2080
            self.match(HiveParser.KW_VIEW)
            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2081
                self.ifExists()


            self.state = 2084
            self.viewName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def viewName(self):
            return self.getTypedRuleContext(HiveParser.ViewNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropMaterializedViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedViewStatement" ):
                listener.enterDropMaterializedViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedViewStatement" ):
                listener.exitDropMaterializedViewStatement(self)




    def dropMaterializedViewStatement(self):

        localctx = HiveParser.DropMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_dropMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2086
            self.match(HiveParser.KW_DROP)
            self.state = 2087
            self.match(HiveParser.KW_MATERIALIZED)
            self.state = 2088
            self.match(HiveParser.KW_VIEW)
            self.state = 2090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2089
                self.ifExists()


            self.state = 2092
            self.viewName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctionIdentifier" ):
                listener.enterShowFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctionIdentifier" ):
                listener.exitShowFunctionIdentifier(self)




    def showFunctionIdentifier(self):

        localctx = HiveParser.ShowFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_showFunctionIdentifier)
        try:
            self.state = 2096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2094
                self.functionIdentifier()
                pass
            elif token in [362]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self.match(HiveParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStmtIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showStmtIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStmtIdentifier" ):
                listener.enterShowStmtIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStmtIdentifier" ):
                listener.exitShowStmtIdentifier(self)




    def showStmtIdentifier(self):

        localctx = HiveParser.ShowStmtIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_showStmtIdentifier)
        try:
            self.state = 2100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2098
                self.identifier()
                pass
            elif token in [362]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2099
                self.match(HiveParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableComment" ):
                listener.enterTableComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableComment" ):
                listener.exitTableComment(self)




    def tableComment(self):

        localctx = HiveParser.TableCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_tableComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.match(HiveParser.KW_COMMENT)
            self.state = 2103
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeConstraintContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tablePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePartition" ):
                listener.enterTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePartition" ):
                listener.exitTablePartition(self)




    def tablePartition(self):

        localctx = HiveParser.TablePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_tablePartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(HiveParser.KW_PARTITIONED)
            self.state = 2106
            self.match(HiveParser.KW_BY)
            self.state = 2107
            self.match(HiveParser.LPAREN)
            self.state = 2108
            self.columnNameTypeConstraint()
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2109
                self.match(HiveParser.COMMA)
                self.state = 2110
                self.columnNameTypeConstraint()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2116
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBucketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_BY(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_BY)
            else:
                return self.getToken(HiveParser.KW_BY, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def columnNameOrderList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameOrderListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableBuckets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBuckets" ):
                listener.enterTableBuckets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBuckets" ):
                listener.exitTableBuckets(self)




    def tableBuckets(self):

        localctx = HiveParser.TableBucketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_tableBuckets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.match(HiveParser.KW_CLUSTERED)
            self.state = 2119
            self.match(HiveParser.KW_BY)
            self.state = 2120
            self.match(HiveParser.LPAREN)
            self.state = 2121
            self.columnNameList()
            self.state = 2122
            self.match(HiveParser.RPAREN)
            self.state = 2129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 2123
                self.match(HiveParser.KW_SORTED)
                self.state = 2124
                self.match(HiveParser.KW_BY)
                self.state = 2125
                self.match(HiveParser.LPAREN)
                self.state = 2126
                self.columnNameOrderList()
                self.state = 2127
                self.match(HiveParser.RPAREN)


            self.state = 2131
            self.match(HiveParser.KW_INTO)
            self.state = 2132
            self.match(HiveParser.Number)
            self.state = 2133
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSkewedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def skewedValueElement(self):
            return self.getTypedRuleContext(HiveParser.SkewedValueElementContext,0)


        def storedAsDirs(self):
            return self.getTypedRuleContext(HiveParser.StoredAsDirsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableSkewed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSkewed" ):
                listener.enterTableSkewed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSkewed" ):
                listener.exitTableSkewed(self)




    def tableSkewed(self):

        localctx = HiveParser.TableSkewedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_tableSkewed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(HiveParser.KW_SKEWED)
            self.state = 2136
            self.match(HiveParser.KW_BY)
            self.state = 2137
            self.match(HiveParser.LPAREN)
            self.state = 2138
            self.columnNameList()
            self.state = 2139
            self.match(HiveParser.RPAREN)
            self.state = 2140
            self.match(HiveParser.KW_ON)
            self.state = 2141
            self.match(HiveParser.LPAREN)
            self.state = 2142
            self.skewedValueElement()
            self.state = 2143
            self.match(HiveParser.RPAREN)
            self.state = 2145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2144
                self.storedAsDirs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowFormatSerde(self):
            return self.getTypedRuleContext(HiveParser.RowFormatSerdeContext,0)


        def rowFormatDelimited(self):
            return self.getTypedRuleContext(HiveParser.RowFormatDelimitedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormat" ):
                listener.enterRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormat" ):
                listener.exitRowFormat(self)




    def rowFormat(self):

        localctx = HiveParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rowFormat)
        try:
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2147
                self.rowFormatSerde()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2148
                self.rowFormatDelimited()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordReaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RECORDREADER(self):
            return self.getToken(HiveParser.KW_RECORDREADER, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_recordReader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordReader" ):
                listener.enterRecordReader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordReader" ):
                listener.exitRecordReader(self)




    def recordReader(self):

        localctx = HiveParser.RecordReaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_recordReader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.match(HiveParser.KW_RECORDREADER)
            self.state = 2152
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordWriterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RECORDWRITER(self):
            return self.getToken(HiveParser.KW_RECORDWRITER, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_recordWriter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordWriter" ):
                listener.enterRecordWriter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordWriter" ):
                listener.exitRecordWriter(self)




    def recordWriter(self):

        localctx = HiveParser.RecordWriterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_recordWriter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self.match(HiveParser.KW_RECORDWRITER)
            self.state = 2155
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatSerdeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormatSerde

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)




    def rowFormatSerde(self):

        localctx = HiveParser.RowFormatSerdeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_rowFormatSerde)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            self.match(HiveParser.KW_ROW)
            self.state = 2158
            self.match(HiveParser.KW_FORMAT)
            self.state = 2159
            self.match(HiveParser.KW_SERDE)
            self.state = 2160
            self.match(HiveParser.StringLiteral)
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 2161
                self.match(HiveParser.KW_WITH)
                self.state = 2162
                self.match(HiveParser.KW_SERDEPROPERTIES)
                self.state = 2163
                self.tableProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatDelimitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_DELIMITED(self):
            return self.getToken(HiveParser.KW_DELIMITED, 0)

        def tableRowFormatFieldIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatFieldIdentifierContext,0)


        def tableRowFormatCollItemsIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatCollItemsIdentifierContext,0)


        def tableRowFormatMapKeysIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatMapKeysIdentifierContext,0)


        def tableRowFormatLinesIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatLinesIdentifierContext,0)


        def tableRowNullFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowNullFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormatDelimited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)




    def rowFormatDelimited(self):

        localctx = HiveParser.RowFormatDelimitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_rowFormatDelimited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            self.match(HiveParser.KW_ROW)
            self.state = 2167
            self.match(HiveParser.KW_FORMAT)
            self.state = 2168
            self.match(HiveParser.KW_DELIMITED)
            self.state = 2170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 2169
                self.tableRowFormatFieldIdentifier()


            self.state = 2173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 2172
                self.tableRowFormatCollItemsIdentifier()


            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 2175
                self.tableRowFormatMapKeysIdentifier()


            self.state = 2179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 2178
                self.tableRowFormatLinesIdentifier()


            self.state = 2182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 2181
                self.tableRowNullFormat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowFormatDelimited(self):
            return self.getTypedRuleContext(HiveParser.RowFormatDelimitedContext,0)


        def rowFormatSerde(self):
            return self.getTypedRuleContext(HiveParser.RowFormatSerdeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormat" ):
                listener.enterTableRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormat" ):
                listener.exitTableRowFormat(self)




    def tableRowFormat(self):

        localctx = HiveParser.TableRowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_tableRowFormat)
        try:
            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2184
                self.rowFormatDelimited()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2185
                self.rowFormatSerde()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesPrefixedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePropertiesPrefixed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertiesPrefixed" ):
                listener.enterTablePropertiesPrefixed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertiesPrefixed" ):
                listener.exitTablePropertiesPrefixed(self)




    def tablePropertiesPrefixed(self):

        localctx = HiveParser.TablePropertiesPrefixedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_tablePropertiesPrefixed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.match(HiveParser.KW_TBLPROPERTIES)
            self.state = 2189
            self.tableProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def tablePropertiesList(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperties" ):
                listener.enterTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperties" ):
                listener.exitTableProperties(self)




    def tableProperties(self):

        localctx = HiveParser.TablePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_tableProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(HiveParser.LPAREN)
            self.state = 2192
            self.tablePropertiesList()
            self.state = 2193
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def keyProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyPropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyPropertyContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePropertiesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertiesList" ):
                listener.enterTablePropertiesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertiesList" ):
                listener.exitTablePropertiesList(self)




    def tablePropertiesList(self):

        localctx = HiveParser.TablePropertiesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_tablePropertiesList)
        self._la = 0 # Token type
        try:
            self.state = 2211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2195
                self.keyValueProperty()
                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 2196
                    self.match(HiveParser.COMMA)
                    self.state = 2197
                    self.keyValueProperty()
                    self.state = 2202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2203
                self.keyProperty()
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 2204
                    self.match(HiveParser.COMMA)
                    self.state = 2205
                    self.keyProperty()
                    self.state = 2210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValuePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_keyValueProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValueProperty" ):
                listener.enterKeyValueProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValueProperty" ):
                listener.exitKeyValueProperty(self)




    def keyValueProperty(self):

        localctx = HiveParser.KeyValuePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_keyValueProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.match(HiveParser.StringLiteral)
            self.state = 2214
            self.match(HiveParser.EQUAL)
            self.state = 2215
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_keyProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyProperty" ):
                listener.enterKeyProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyProperty" ):
                listener.exitKeyProperty(self)




    def keyProperty(self):

        localctx = HiveParser.KeyPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_keyProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatFieldIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(HiveParser.KW_FIELDS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_BY)
            else:
                return self.getToken(HiveParser.KW_BY, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_ESCAPED(self):
            return self.getToken(HiveParser.KW_ESCAPED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatFieldIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatFieldIdentifier" ):
                listener.enterTableRowFormatFieldIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatFieldIdentifier" ):
                listener.exitTableRowFormatFieldIdentifier(self)




    def tableRowFormatFieldIdentifier(self):

        localctx = HiveParser.TableRowFormatFieldIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_tableRowFormatFieldIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self.match(HiveParser.KW_FIELDS)
            self.state = 2220
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2221
            self.match(HiveParser.KW_BY)
            self.state = 2222
            self.match(HiveParser.StringLiteral)
            self.state = 2226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2223
                self.match(HiveParser.KW_ESCAPED)
                self.state = 2224
                self.match(HiveParser.KW_BY)
                self.state = 2225
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatCollItemsIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COLLECTION(self):
            return self.getToken(HiveParser.KW_COLLECTION, 0)

        def KW_ITEMS(self):
            return self.getToken(HiveParser.KW_ITEMS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatCollItemsIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatCollItemsIdentifier" ):
                listener.enterTableRowFormatCollItemsIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatCollItemsIdentifier" ):
                listener.exitTableRowFormatCollItemsIdentifier(self)




    def tableRowFormatCollItemsIdentifier(self):

        localctx = HiveParser.TableRowFormatCollItemsIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_tableRowFormatCollItemsIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(HiveParser.KW_COLLECTION)
            self.state = 2229
            self.match(HiveParser.KW_ITEMS)
            self.state = 2230
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2231
            self.match(HiveParser.KW_BY)
            self.state = 2232
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatMapKeysIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_KEYS(self):
            return self.getToken(HiveParser.KW_KEYS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatMapKeysIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatMapKeysIdentifier" ):
                listener.enterTableRowFormatMapKeysIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatMapKeysIdentifier" ):
                listener.exitTableRowFormatMapKeysIdentifier(self)




    def tableRowFormatMapKeysIdentifier(self):

        localctx = HiveParser.TableRowFormatMapKeysIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_tableRowFormatMapKeysIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self.match(HiveParser.KW_MAP)
            self.state = 2235
            self.match(HiveParser.KW_KEYS)
            self.state = 2236
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2237
            self.match(HiveParser.KW_BY)
            self.state = 2238
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatLinesIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LINES(self):
            return self.getToken(HiveParser.KW_LINES, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatLinesIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowFormatLinesIdentifier" ):
                listener.enterTableRowFormatLinesIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowFormatLinesIdentifier" ):
                listener.exitTableRowFormatLinesIdentifier(self)




    def tableRowFormatLinesIdentifier(self):

        localctx = HiveParser.TableRowFormatLinesIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_tableRowFormatLinesIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.match(HiveParser.KW_LINES)
            self.state = 2241
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2242
            self.match(HiveParser.KW_BY)
            self.state = 2243
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowNullFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowNullFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRowNullFormat" ):
                listener.enterTableRowNullFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRowNullFormat" ):
                listener.exitTableRowNullFormat(self)




    def tableRowNullFormat(self):

        localctx = HiveParser.TableRowNullFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_tableRowNullFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.match(HiveParser.KW_NULL)
            self.state = 2246
            self.match(HiveParser.KW_DEFINED)
            self.state = 2247
            self.match(HiveParser.KW_AS)
            self.state = 2248
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)




    def tableFileFormat(self):

        localctx = HiveParser.TableFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_tableFileFormat)
        self._la = 0 # Token type
        try:
            self.state = 2273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2250
                self.match(HiveParser.KW_STORED)
                self.state = 2251
                self.match(HiveParser.KW_AS)
                self.state = 2252
                self.match(HiveParser.KW_INPUTFORMAT)
                self.state = 2253
                self.match(HiveParser.StringLiteral)
                self.state = 2254
                self.match(HiveParser.KW_OUTPUTFORMAT)
                self.state = 2255
                self.match(HiveParser.StringLiteral)
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 2256
                    self.match(HiveParser.KW_INPUTDRIVER)
                    self.state = 2257
                    self.match(HiveParser.StringLiteral)
                    self.state = 2258
                    self.match(HiveParser.KW_OUTPUTDRIVER)
                    self.state = 2259
                    self.match(HiveParser.StringLiteral)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2262
                self.match(HiveParser.KW_STORED)
                self.state = 2263
                self.match(HiveParser.KW_BY)
                self.state = 2264
                self.match(HiveParser.StringLiteral)
                self.state = 2268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 2265
                    self.match(HiveParser.KW_WITH)
                    self.state = 2266
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 2267
                    self.tableProperties()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2270
                self.match(HiveParser.KW_STORED)
                self.state = 2271
                self.match(HiveParser.KW_AS)
                self.state = 2272
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableLocation" ):
                listener.enterTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableLocation" ):
                listener.exitTableLocation(self)




    def tableLocation(self):

        localctx = HiveParser.TableLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_tableLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.match(HiveParser.KW_LOCATION)
            self.state = 2276
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeList" ):
                listener.enterColumnNameTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeList" ):
                listener.exitColumnNameTypeList(self)




    def columnNameTypeList(self):

        localctx = HiveParser.ColumnNameTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_columnNameTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self.columnNameType()
            self.state = 2283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2279
                    self.match(HiveParser.COMMA)
                    self.state = 2280
                    self.columnNameType() 
                self.state = 2285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeOrConstraintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameTypeOrConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeOrConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeOrConstraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeOrConstraintList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeOrConstraintList" ):
                listener.enterColumnNameTypeOrConstraintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeOrConstraintList" ):
                listener.exitColumnNameTypeOrConstraintList(self)




    def columnNameTypeOrConstraintList(self):

        localctx = HiveParser.ColumnNameTypeOrConstraintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_columnNameTypeOrConstraintList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.columnNameTypeOrConstraint()
            self.state = 2291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2287
                self.match(HiveParser.COMMA)
                self.state = 2288
                self.columnNameTypeOrConstraint()
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameColonTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameColonType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameColonTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameColonTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameColonTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameColonTypeList" ):
                listener.enterColumnNameColonTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameColonTypeList" ):
                listener.exitColumnNameColonTypeList(self)




    def columnNameColonTypeList(self):

        localctx = HiveParser.ColumnNameColonTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_columnNameColonTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            self.columnNameColonType()
            self.state = 2299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2295
                self.match(HiveParser.COMMA)
                self.state = 2296
                self.columnNameColonType()
                self.state = 2301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameList" ):
                listener.enterColumnNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameList" ):
                listener.exitColumnNameList(self)




    def columnNameList(self):

        localctx = HiveParser.ColumnNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_columnNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302
            self.columnName()
            self.state = 2307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2303
                self.match(HiveParser.COMMA)
                self.state = 2304
                self.columnName()
                self.state = 2309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)




    def columnName(self):

        localctx = HiveParser.ColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_columnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def KW_ELEM_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ELEM_TYPE)
            else:
                return self.getToken(HiveParser.KW_ELEM_TYPE, i)

        def KW_KEY_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_KEY_TYPE)
            else:
                return self.getToken(HiveParser.KW_KEY_TYPE, i)

        def KW_VALUE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_VALUE_TYPE)
            else:
                return self.getToken(HiveParser.KW_VALUE_TYPE, i)

        def getRuleIndex(self):
            return HiveParser.RULE_extColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtColumnName" ):
                listener.enterExtColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtColumnName" ):
                listener.exitExtColumnName(self)




    def extColumnName(self):

        localctx = HiveParser.ExtColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_extColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2312
            self.identifier()
            self.state = 2322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==332:
                self.state = 2313
                self.match(HiveParser.DOT)
                self.state = 2318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 2314
                    self.match(HiveParser.KW_ELEM_TYPE)
                    pass

                elif la_ == 2:
                    self.state = 2315
                    self.match(HiveParser.KW_KEY_TYPE)
                    pass

                elif la_ == 3:
                    self.state = 2316
                    self.match(HiveParser.KW_VALUE_TYPE)
                    pass

                elif la_ == 4:
                    self.state = 2317
                    self.identifier()
                    pass


                self.state = 2324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameOrderList" ):
                listener.enterColumnNameOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameOrderList" ):
                listener.exitColumnNameOrderList(self)




    def columnNameOrderList(self):

        localctx = HiveParser.ColumnNameOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_columnNameOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2325
            self.columnNameOrder()
            self.state = 2330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2326
                self.match(HiveParser.COMMA)
                self.state = 2327
                self.columnNameOrder()
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnParenthesesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnParenthesesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnParenthesesList" ):
                listener.enterColumnParenthesesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnParenthesesList" ):
                listener.exitColumnParenthesesList(self)




    def columnParenthesesList(self):

        localctx = HiveParser.ColumnParenthesesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_columnParenthesesList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self.match(HiveParser.LPAREN)
            self.state = 2334
            self.columnNameList()
            self.state = 2335
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableValidateSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableSpecificationContext,0)


        def validateSpecification(self):
            return self.getTypedRuleContext(HiveParser.ValidateSpecificationContext,0)


        def enforcedSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnforcedSpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_enableValidateSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableValidateSpecification" ):
                listener.enterEnableValidateSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableValidateSpecification" ):
                listener.exitEnableValidateSpecification(self)




    def enableValidateSpecification(self):

        localctx = HiveParser.EnableValidateSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_enableValidateSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2337
                self.enableSpecification()
                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==292 or _la==293:
                    self.state = 2338
                    self.validateSpecification()


                pass
            elif token in [7, 291]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2341
                self.enforcedSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enableSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableSpecification" ):
                listener.enterEnableSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableSpecification" ):
                listener.exitEnableSpecification(self)




    def enableSpecification(self):

        localctx = HiveParser.EnableSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_enableSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            _la = self._input.LA(1)
            if not(_la==125 or _la==126):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValidateSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_NOVALIDATE(self):
            return self.getToken(HiveParser.KW_NOVALIDATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_validateSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidateSpecification" ):
                listener.enterValidateSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidateSpecification" ):
                listener.exitValidateSpecification(self)




    def validateSpecification(self):

        localctx = HiveParser.ValidateSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_validateSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            _la = self._input.LA(1)
            if not(_la==292 or _la==293):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnforcedSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENFORCED(self):
            return self.getToken(HiveParser.KW_ENFORCED, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enforcedSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnforcedSpecification" ):
                listener.enterEnforcedSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnforcedSpecification" ):
                listener.exitEnforcedSpecification(self)




    def enforcedSpecification(self):

        localctx = HiveParser.EnforcedSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_enforcedSpecification)
        try:
            self.state = 2351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [291]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2348
                self.match(HiveParser.KW_ENFORCED)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2349
                self.match(HiveParser.KW_NOT)
                self.state = 2350
                self.match(HiveParser.KW_ENFORCED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RELY(self):
            return self.getToken(HiveParser.KW_RELY, 0)

        def KW_NORELY(self):
            return self.getToken(HiveParser.KW_NORELY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_relySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelySpecification" ):
                listener.enterRelySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelySpecification" ):
                listener.exitRelySpecification(self)




    def relySpecification(self):

        localctx = HiveParser.RelySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_relySpecification)
        self._la = 0 # Token type
        try:
            self.state = 2357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [294]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2353
                self.match(HiveParser.KW_RELY)
                pass
            elif token in [-1, 13, 21, 23, 25, 44, 45, 56, 57, 58, 65, 67, 70, 71, 72, 73, 76, 98, 100, 117, 143, 149, 155, 173, 186, 187, 190, 192, 202, 220, 224, 225, 226, 244, 264, 275, 277, 278, 295, 298, 301, 303, 334, 335, 336, 337]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==295:
                    self.state = 2354
                    self.match(HiveParser.KW_NORELY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pkConstraint(self):
            return self.getTypedRuleContext(HiveParser.PkConstraintContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateConstraint" ):
                listener.enterCreateConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateConstraint" ):
                listener.exitCreateConstraint(self)




    def createConstraint(self):

        localctx = HiveParser.CreateConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_createConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2359
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2360
                self.identifier()


            self.state = 2363
            self.pkConstraint()
            self.state = 2365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2364
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterConstraintWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def pkConstraint(self):
            return self.getTypedRuleContext(HiveParser.PkConstraintContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterConstraintWithName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterConstraintWithName" ):
                listener.enterAlterConstraintWithName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterConstraintWithName" ):
                listener.exitAlterConstraintWithName(self)




    def alterConstraintWithName(self):

        localctx = HiveParser.AlterConstraintWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_alterConstraintWithName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 2368
            self.identifier()
            self.state = 2369
            self.pkConstraint()
            self.state = 2371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2370
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PkConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pkCols = None # ColumnParenthesesListContext

        def tableConstraintPrimaryKey(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintPrimaryKeyContext,0)


        def columnParenthesesList(self):
            return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_pkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPkConstraint" ):
                listener.enterPkConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPkConstraint" ):
                listener.exitPkConstraint(self)




    def pkConstraint(self):

        localctx = HiveParser.PkConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_pkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.tableConstraintPrimaryKey()
            self.state = 2374
            localctx.pkCols = self.columnParenthesesList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateForeignKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOREIGN(self):
            return self.getToken(HiveParser.KW_FOREIGN, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createForeignKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateForeignKey" ):
                listener.enterCreateForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateForeignKey" ):
                listener.exitCreateForeignKey(self)




    def createForeignKey(self):

        localctx = HiveParser.CreateForeignKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_createForeignKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2376
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2377
                self.identifier()


            self.state = 2380
            self.match(HiveParser.KW_FOREIGN)
            self.state = 2381
            self.match(HiveParser.KW_KEY)
            self.state = 2382
            self.columnParenthesesList()
            self.state = 2383
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2384
            self.tableName()
            self.state = 2385
            self.columnParenthesesList()
            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2386
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterForeignKeyWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_FOREIGN(self):
            return self.getToken(HiveParser.KW_FOREIGN, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterForeignKeyWithName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterForeignKeyWithName" ):
                listener.enterAlterForeignKeyWithName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterForeignKeyWithName" ):
                listener.exitAlterForeignKeyWithName(self)




    def alterForeignKeyWithName(self):

        localctx = HiveParser.AlterForeignKeyWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_alterForeignKeyWithName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 2390
            self.identifier()
            self.state = 2391
            self.match(HiveParser.KW_FOREIGN)
            self.state = 2392
            self.match(HiveParser.KW_KEY)
            self.state = 2393
            self.columnParenthesesList()
            self.state = 2394
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2395
            self.tableName()
            self.state = 2396
            self.columnParenthesesList()
            self.state = 2398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2397
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedValueElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValues(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuesContext,0)


        def skewedColumnValuePairList(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedValueElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedValueElement" ):
                listener.enterSkewedValueElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedValueElement" ):
                listener.exitSkewedValueElement(self)




    def skewedValueElement(self):

        localctx = HiveParser.SkewedValueElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_skewedValueElement)
        try:
            self.state = 2402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 64, 85, 87, 88, 237, 238, 362, 364, 365, 367, 370]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2400
                self.skewedColumnValues()
                pass
            elif token in [336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2401
                self.skewedColumnValuePairList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedColumnValuePairContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValuePairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValuePairList" ):
                listener.enterSkewedColumnValuePairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValuePairList" ):
                listener.exitSkewedColumnValuePairList(self)




    def skewedColumnValuePairList(self):

        localctx = HiveParser.SkewedColumnValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_skewedColumnValuePairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.skewedColumnValuePair()
            self.state = 2409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2405
                self.match(HiveParser.COMMA)
                self.state = 2406
                self.skewedColumnValuePair()
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def skewedColumnValues(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuesContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValuePair" ):
                listener.enterSkewedColumnValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValuePair" ):
                listener.exitSkewedColumnValuePair(self)




    def skewedColumnValuePair(self):

        localctx = HiveParser.SkewedColumnValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_skewedColumnValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(HiveParser.LPAREN)
            self.state = 2413
            self.skewedColumnValues()
            self.state = 2414
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedColumnValueContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedColumnValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValues" ):
                listener.enterSkewedColumnValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValues" ):
                listener.exitSkewedColumnValues(self)




    def skewedColumnValues(self):

        localctx = HiveParser.SkewedColumnValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_skewedColumnValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self.skewedColumnValue()
            self.state = 2421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2417
                self.match(HiveParser.COMMA)
                self.state = 2418
                self.skewedColumnValue()
                self.state = 2423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedColumnValue" ):
                listener.enterSkewedColumnValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedColumnValue" ):
                listener.exitSkewedColumnValue(self)




    def skewedColumnValue(self):

        localctx = HiveParser.SkewedColumnValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_skewedColumnValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2424
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedValueLocationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValue(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValueContext,0)


        def skewedColumnValuePair(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedValueLocationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewedValueLocationElement" ):
                listener.enterSkewedValueLocationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewedValueLocationElement" ):
                listener.exitSkewedValueLocationElement(self)




    def skewedValueLocationElement(self):

        localctx = HiveParser.SkewedValueLocationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_skewedValueLocationElement)
        try:
            self.state = 2428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 64, 85, 87, 88, 237, 238, 362, 364, 365, 367, 370]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2426
                self.skewedColumnValue()
                pass
            elif token in [336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2427
                self.skewedColumnValuePair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orderSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderSpecification" ):
                listener.enterOrderSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderSpecification" ):
                listener.exitOrderSpecification(self)




    def orderSpecification(self):

        localctx = HiveParser.OrderSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_orderSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            _la = self._input.LA(1)
            if not(_la==12 or _la==13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_LAST(self):
            return self.getToken(HiveParser.KW_LAST, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nullOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullOrdering" ):
                listener.enterNullOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullOrdering" ):
                listener.exitNullOrdering(self)




    def nullOrdering(self):

        localctx = HiveParser.NullOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_nullOrdering)
        try:
            self.state = 2436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2432
                self.match(HiveParser.KW_NULLS)
                self.state = 2433
                self.match(HiveParser.KW_FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2434
                self.match(HiveParser.KW_NULLS)
                self.state = 2435
                self.match(HiveParser.KW_LAST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def orderSpecification(self):
            return self.getTypedRuleContext(HiveParser.OrderSpecificationContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(HiveParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameOrder" ):
                listener.enterColumnNameOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameOrder" ):
                listener.exitColumnNameOrder(self)




    def columnNameOrder(self):

        localctx = HiveParser.ColumnNameOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_columnNameOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.identifier()
            self.state = 2440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==13:
                self.state = 2439
                self.orderSpecification()


            self.state = 2443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 2442
                self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameCommentContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameCommentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameCommentList" ):
                listener.enterColumnNameCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameCommentList" ):
                listener.exitColumnNameCommentList(self)




    def columnNameCommentList(self):

        localctx = HiveParser.ColumnNameCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_columnNameCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self.columnNameComment()
            self.state = 2450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2446
                self.match(HiveParser.COMMA)
                self.state = 2447
                self.columnNameComment()
                self.state = 2452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameComment" ):
                listener.enterColumnNameComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameComment" ):
                listener.exitColumnNameComment(self)




    def columnNameComment(self):

        localctx = HiveParser.ColumnNameCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_columnNameComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            self.identifier()
            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 2454
                self.match(HiveParser.KW_COMMENT)
                self.state = 2455
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def orderSpecification(self):
            return self.getTypedRuleContext(HiveParser.OrderSpecificationContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(HiveParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRefOrder" ):
                listener.enterColumnRefOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRefOrder" ):
                listener.exitColumnRefOrder(self)




    def columnRefOrder(self):

        localctx = HiveParser.ColumnRefOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_columnRefOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            self.expression(0)
            self.state = 2460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 2459
                self.orderSpecification()


            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 2462
                self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameType" ):
                listener.enterColumnNameType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameType" ):
                listener.exitColumnNameType(self)




    def columnNameType(self):

        localctx = HiveParser.ColumnNameTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_columnNameType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.identifier()
            self.state = 2466
            self.colType()
            self.state = 2469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 2467
                self.match(HiveParser.KW_COMMENT)
                self.state = 2468
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeOrConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraint(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintContext,0)


        def columnNameTypeConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeOrConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeOrConstraint" ):
                listener.enterColumnNameTypeOrConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeOrConstraint" ):
                listener.exitColumnNameTypeOrConstraint(self)




    def columnNameTypeOrConstraint(self):

        localctx = HiveParser.ColumnNameTypeOrConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_columnNameTypeOrConstraint)
        try:
            self.state = 2473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [287, 288, 290]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                self.tableConstraint()
                pass
            elif token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2472
                self.columnNameTypeConstraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createForeignKey(self):
            return self.getTypedRuleContext(HiveParser.CreateForeignKeyContext,0)


        def createConstraint(self):
            return self.getTypedRuleContext(HiveParser.CreateConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraint" ):
                listener.enterTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraint" ):
                listener.exitTableConstraint(self)




    def tableConstraint(self):

        localctx = HiveParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_tableConstraint)
        try:
            self.state = 2477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2475
                self.createForeignKey()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2476
                self.createConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def columnConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColumnConstraintContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameTypeConstraint" ):
                listener.enterColumnNameTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameTypeConstraint" ):
                listener.exitColumnNameTypeConstraint(self)




    def columnNameTypeConstraint(self):

        localctx = HiveParser.ColumnNameTypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_columnNameTypeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.identifier()
            self.state = 2480
            self.colType()
            self.state = 2482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 13) != 0):
                self.state = 2481
                self.columnConstraint()


            self.state = 2486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 2484
                self.match(HiveParser.KW_COMMENT)
                self.state = 2485
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreignKeyConstraint(self):
            return self.getTypedRuleContext(HiveParser.ForeignKeyConstraintContext,0)


        def colConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraint" ):
                listener.enterColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraint" ):
                listener.exitColumnConstraint(self)




    def columnConstraint(self):

        localctx = HiveParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_columnConstraint)
        try:
            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2488
                self.foreignKeyConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2489
                self.colConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeignKeyConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_foreignKeyConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyConstraint" ):
                listener.enterForeignKeyConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyConstraint" ):
                listener.exitForeignKeyConstraint(self)




    def foreignKeyConstraint(self):

        localctx = HiveParser.ForeignKeyConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_foreignKeyConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2492
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2493
                self.identifier()


            self.state = 2496
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2497
            self.tableName()
            self.state = 2498
            self.match(HiveParser.LPAREN)
            self.state = 2499
            self.columnName()
            self.state = 2500
            self.match(HiveParser.RPAREN)
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2501
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraintPrimaryKey(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintPrimaryKeyContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_colConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColConstraint" ):
                listener.enterColConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColConstraint" ):
                listener.exitColConstraint(self)




    def colConstraint(self):

        localctx = HiveParser.ColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_colConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2504
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2505
                self.identifier()


            self.state = 2508
            self.tableConstraintPrimaryKey()
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2509
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterForeignKeyConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterForeignKeyConstraintContext,0)


        def alterColConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterColConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterColumnConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnConstraint" ):
                listener.enterAlterColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnConstraint" ):
                listener.exitAlterColumnConstraint(self)




    def alterColumnConstraint(self):

        localctx = HiveParser.AlterColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_alterColumnConstraint)
        try:
            self.state = 2514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2512
                self.alterForeignKeyConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2513
                self.alterColConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterForeignKeyConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterForeignKeyConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterForeignKeyConstraint" ):
                listener.enterAlterForeignKeyConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterForeignKeyConstraint" ):
                listener.exitAlterForeignKeyConstraint(self)




    def alterForeignKeyConstraint(self):

        localctx = HiveParser.AlterForeignKeyConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_alterForeignKeyConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2516
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2517
                self.identifier()


            self.state = 2520
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2521
            self.tableName()
            self.state = 2522
            self.match(HiveParser.LPAREN)
            self.state = 2523
            self.columnName()
            self.state = 2524
            self.match(HiveParser.RPAREN)
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2525
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraintPrimaryKey(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintPrimaryKeyContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterColConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColConstraint" ):
                listener.enterAlterColConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColConstraint" ):
                listener.exitAlterColConstraint(self)




    def alterColConstraint(self):

        localctx = HiveParser.AlterColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_alterColConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2528
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2529
                self.identifier()


            self.state = 2532
            self.tableConstraintPrimaryKey()
            self.state = 2534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==125 or _la==126 or _la==291:
                self.state = 2533
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintPrimaryKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PRIMARY(self):
            return self.getToken(HiveParser.KW_PRIMARY, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableConstraintPrimaryKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraintPrimaryKey" ):
                listener.enterTableConstraintPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraintPrimaryKey" ):
                listener.exitTableConstraintPrimaryKey(self)




    def tableConstraintPrimaryKey(self):

        localctx = HiveParser.TableConstraintPrimaryKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_tableConstraintPrimaryKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.match(HiveParser.KW_PRIMARY)
            self.state = 2537
            self.match(HiveParser.KW_KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintOptsCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableValidateSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableValidateSpecificationContext,0)


        def relySpecification(self):
            return self.getTypedRuleContext(HiveParser.RelySpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constraintOptsCreate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintOptsCreate" ):
                listener.enterConstraintOptsCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintOptsCreate" ):
                listener.exitConstraintOptsCreate(self)




    def constraintOptsCreate(self):

        localctx = HiveParser.ConstraintOptsCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_constraintOptsCreate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            self.enableValidateSpecification()
            self.state = 2540
            self.relySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintOptsAlterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableValidateSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableValidateSpecificationContext,0)


        def relySpecification(self):
            return self.getTypedRuleContext(HiveParser.RelySpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constraintOptsAlter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintOptsAlter" ):
                listener.enterConstraintOptsAlter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintOptsAlter" ):
                listener.exitConstraintOptsAlter(self)




    def constraintOptsAlter(self):

        localctx = HiveParser.ConstraintOptsAlterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_constraintOptsAlter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self.enableValidateSpecification()
            self.state = 2543
            self.relySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameColonTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HiveParser.COLON, 0)

        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameColonType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameColonType" ):
                listener.enterColumnNameColonType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameColonType" ):
                listener.exitColumnNameColonType(self)




    def columnNameColonType(self):

        localctx = HiveParser.ColumnNameColonTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_columnNameColonType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            self.identifier()
            self.state = 2546
            self.match(HiveParser.COLON)
            self.state = 2547
            self.colType()
            self.state = 2550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 2548
                self.match(HiveParser.KW_COMMENT)
                self.state = 2549
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_db_col(self):
            return self.getTypedRuleContext(HiveParser.Type_db_colContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = HiveParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.type_db_col()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = HiveParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_colTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2554
            self.colType()
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2555
                self.match(HiveParser.COMMA)
                self.state = 2556
                self.colType()
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_db_colContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def listType(self):
            return self.getTypedRuleContext(HiveParser.ListTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(HiveParser.StructTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(HiveParser.MapTypeContext,0)


        def unionType(self):
            return self.getTypedRuleContext(HiveParser.UnionTypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_type_db_col

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_db_col" ):
                listener.enterType_db_col(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_db_col" ):
                listener.exitType_db_col(self)




    def type_db_col(self):

        localctx = HiveParser.Type_db_colContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_type_db_col)
        try:
            self.state = 2567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 92, 93, 94, 95, 206]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2562
                self.primitiveType()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2563
                self.listType()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2564
                self.structType()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2565
                self.mapType()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2566
                self.unionType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_PRECISION(self):
            return self.getToken(HiveParser.KW_PRECISION, 0)

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def KW_DATETIME(self):
            return self.getToken(HiveParser.KW_DATETIME, 0)

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def KW_TIMESTAMPLOCALTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_TIME(self):
            return self.getToken(HiveParser.KW_TIME, 0)

        def KW_ZONE(self):
            return self.getToken(HiveParser.KW_ZONE, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_DECIMAL(self):
            return self.getToken(HiveParser.KW_DECIMAL, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_VARCHAR(self):
            return self.getToken(HiveParser.KW_VARCHAR, 0)

        def KW_CHAR(self):
            return self.getToken(HiveParser.KW_CHAR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = HiveParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2569
                self.match(HiveParser.KW_TINYINT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2570
                self.match(HiveParser.KW_SMALLINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2571
                self.match(HiveParser.KW_INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2572
                self.match(HiveParser.KW_BIGINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2573
                self.match(HiveParser.KW_BOOLEAN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2574
                self.match(HiveParser.KW_FLOAT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2575
                self.match(HiveParser.KW_DOUBLE)
                self.state = 2577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 2576
                    self.match(HiveParser.KW_PRECISION)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2579
                self.match(HiveParser.KW_DATE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2580
                self.match(HiveParser.KW_DATETIME)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2581
                self.match(HiveParser.KW_TIMESTAMP)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2582
                self.match(HiveParser.KW_TIMESTAMPLOCALTZ)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2583
                self.match(HiveParser.KW_TIMESTAMP)
                self.state = 2584
                self.match(HiveParser.KW_WITH)
                self.state = 2585
                self.match(HiveParser.KW_LOCAL)
                self.state = 2586
                self.match(HiveParser.KW_TIME)
                self.state = 2587
                self.match(HiveParser.KW_ZONE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2588
                self.match(HiveParser.KW_STRING)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2589
                self.match(HiveParser.KW_BINARY)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2590
                self.match(HiveParser.KW_DECIMAL)
                self.state = 2598
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2591
                    self.match(HiveParser.LPAREN)
                    self.state = 2592
                    self.match(HiveParser.Number)
                    self.state = 2595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==334:
                        self.state = 2593
                        self.match(HiveParser.COMMA)
                        self.state = 2594
                        self.match(HiveParser.Number)


                    self.state = 2597
                    self.match(HiveParser.RPAREN)


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2600
                self.match(HiveParser.KW_VARCHAR)
                self.state = 2601
                self.match(HiveParser.LPAREN)
                self.state = 2602
                self.match(HiveParser.Number)
                self.state = 2603
                self.match(HiveParser.RPAREN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2604
                self.match(HiveParser.KW_CHAR)
                self.state = 2605
                self.match(HiveParser.LPAREN)
                self.state = 2606
                self.match(HiveParser.Number)
                self.state = 2607
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def type_db_col(self):
            return self.getTypedRuleContext(HiveParser.Type_db_colContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_listType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType" ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType" ):
                listener.exitListType(self)




    def listType(self):

        localctx = HiveParser.ListTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_listType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2610
            self.match(HiveParser.KW_ARRAY)
            self.state = 2611
            self.match(HiveParser.LESSTHAN)
            self.state = 2612
            self.type_db_col()
            self.state = 2613
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def columnNameColonTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameColonTypeListContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)




    def structType(self):

        localctx = HiveParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_structType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.match(HiveParser.KW_STRUCT)
            self.state = 2616
            self.match(HiveParser.LESSTHAN)
            self.state = 2617
            self.columnNameColonTypeList()
            self.state = 2618
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def type_db_col(self):
            return self.getTypedRuleContext(HiveParser.Type_db_colContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)




    def mapType(self):

        localctx = HiveParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(HiveParser.KW_MAP)
            self.state = 2621
            self.match(HiveParser.LESSTHAN)
            self.state = 2622
            self.primitiveType()
            self.state = 2623
            self.match(HiveParser.COMMA)
            self.state = 2624
            self.type_db_col()
            self.state = 2625
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColTypeListContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_unionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionType" ):
                listener.enterUnionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionType" ):
                listener.exitUnionType(self)




    def unionType(self):

        localctx = HiveParser.UnionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_unionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.match(HiveParser.KW_UNIONTYPE)
            self.state = 2628
            self.match(HiveParser.LESSTHAN)
            self.state = 2629
            self.colTypeList()
            self.state = 2630
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(HiveParser.KW_UNION, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_INTERSECT(self):
            return self.getToken(HiveParser.KW_INTERSECT, 0)

        def KW_EXCEPT(self):
            return self.getToken(HiveParser.KW_EXCEPT, 0)

        def KW_MINUS(self):
            return self.getToken(HiveParser.KW_MINUS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_setOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperator" ):
                listener.enterSetOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperator" ):
                listener.exitSetOperator(self)




    def setOperator(self):

        localctx = HiveParser.SetOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_setOperator)
        self._la = 0 # Token type
        try:
            self.state = 2656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2632
                self.match(HiveParser.KW_UNION)
                self.state = 2633
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2634
                self.match(HiveParser.KW_UNION)
                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2635
                    self.match(HiveParser.KW_DISTINCT)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2638
                self.match(HiveParser.KW_INTERSECT)
                self.state = 2639
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2640
                self.match(HiveParser.KW_INTERSECT)
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2641
                    self.match(HiveParser.KW_DISTINCT)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2644
                self.match(HiveParser.KW_EXCEPT)
                self.state = 2645
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2646
                self.match(HiveParser.KW_EXCEPT)
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2647
                    self.match(HiveParser.KW_DISTINCT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2650
                self.match(HiveParser.KW_MINUS)
                self.state = 2651
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2652
                self.match(HiveParser.KW_MINUS)
                self.state = 2654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2653
                    self.match(HiveParser.KW_DISTINCT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStatementExpressionBody(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionBodyContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HiveParser.WithClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_queryStatementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatementExpression" ):
                listener.enterQueryStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatementExpression" ):
                listener.exitQueryStatementExpression(self)




    def queryStatementExpression(self):

        localctx = HiveParser.QueryStatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_queryStatementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 2658
                self.withClause()


            self.state = 2661
            self.queryStatementExpressionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromStatement(self):
            return self.getTypedRuleContext(HiveParser.FromStatementContext,0)


        def regularBody(self):
            return self.getTypedRuleContext(HiveParser.RegularBodyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_queryStatementExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatementExpressionBody" ):
                listener.enterQueryStatementExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatementExpressionBody" ):
                listener.exitQueryStatementExpressionBody(self)




    def queryStatementExpressionBody(self):

        localctx = HiveParser.QueryStatementExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_queryStatementExpressionBody)
        try:
            self.state = 2665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2663
                self.fromStatement()
                pass
            elif token in [23, 25, 98, 100, 336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2664
                self.regularBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def cteStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.CteStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.CteStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = HiveParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_withClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(HiveParser.KW_WITH)
            self.state = 2668
            self.cteStatement()
            self.state = 2673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2669
                self.match(HiveParser.COMMA)
                self.state = 2670
                self.cteStatement()
                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_cteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCteStatement" ):
                listener.enterCteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCteStatement" ):
                listener.exitCteStatement(self)




    def cteStatement(self):

        localctx = HiveParser.CteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_cteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2676
            self.identifier()
            self.state = 2677
            self.match(HiveParser.KW_AS)
            self.state = 2678
            self.match(HiveParser.LPAREN)
            self.state = 2679
            self.queryStatementExpression()
            self.state = 2680
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleFromStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SingleFromStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.SingleFromStatementContext,i)


        def setOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SetOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.SetOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)




    def fromStatement(self):

        localctx = HiveParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_fromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2682
            self.singleFromStatement()
            self.state = 2688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54 or _la==55 or _la==175 or _la==177:
                self.state = 2683
                self.setOperator()
                self.state = 2684
                self.singleFromStatement()
                self.state = 2690
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(HiveParser.FromClauseContext,0)


        def body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.BodyContext)
            else:
                return self.getTypedRuleContext(HiveParser.BodyContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_singleFromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFromStatement" ):
                listener.enterSingleFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFromStatement" ):
                listener.exitSingleFromStatement(self)




    def singleFromStatement(self):

        localctx = HiveParser.SingleFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_singleFromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2691
            self.fromClause()
            self.state = 2693 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2692
                    self.body()

                else:
                    raise NoViableAltException(self)
                self.state = 2695 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegularBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertClause(self):
            return self.getTypedRuleContext(HiveParser.InsertClauseContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_regularBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularBody" ):
                listener.enterRegularBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularBody" ):
                listener.exitRegularBody(self)




    def regularBody(self):

        localctx = HiveParser.RegularBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_regularBody)
        try:
            self.state = 2703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2697
                self.insertClause()
                self.state = 2700
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23, 98, 100, 336]:
                    self.state = 2698
                    self.selectStatement()
                    pass
                elif token in [263]:
                    self.state = 2699
                    self.valuesClause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [23, 98, 100, 336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2702
                self.selectStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(HiveParser.SelectClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HiveParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HiveParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(HiveParser.HavingClauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(HiveParser.Window_clauseContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_atomSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomSelectStatement" ):
                listener.enterAtomSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomSelectStatement" ):
                listener.exitAtomSelectStatement(self)




    def atomSelectStatement(self):

        localctx = HiveParser.AtomSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_atomSelectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 98, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2705
                self.selectClause()
                self.state = 2707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2706
                    self.fromClause()


                self.state = 2710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2709
                    self.whereClause()


                self.state = 2713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 2712
                    self.groupByClause()


                self.state = 2716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 2715
                    self.havingClause()


                self.state = 2719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 2718
                    self.window_clause()


                pass
            elif token in [336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2721
                self.match(HiveParser.LPAREN)
                self.state = 2722
                self.selectStatement()
                self.state = 2723
                self.match(HiveParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomSelectStatement(self):
            return self.getTypedRuleContext(HiveParser.AtomSelectStatementContext,0)


        def setOpSelectStatement(self):
            return self.getTypedRuleContext(HiveParser.SetOpSelectStatementContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)




    def selectStatement(self):

        localctx = HiveParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2727
            self.atomSelectStatement()
            self.state = 2729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54 or _la==55 or _la==175 or _la==177:
                self.state = 2728
                self.setOpSelectStatement()


            self.state = 2732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 2731
                self.orderByClause()


            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2734
                self.clusterByClause()


            self.state = 2738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 2737
                self.distributeByClause()


            self.state = 2741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 2740
                self.sortByClause()


            self.state = 2744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 2743
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOpSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SetOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.SetOperatorContext,i)


        def atomSelectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AtomSelectStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.AtomSelectStatementContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_setOpSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOpSelectStatement" ):
                listener.enterSetOpSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOpSelectStatement" ):
                listener.exitSetOpSelectStatement(self)




    def setOpSelectStatement(self):

        localctx = HiveParser.SetOpSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_setOpSelectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2746
                self.setOperator()
                self.state = 2747
                self.atomSelectStatement()
                self.state = 2751 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==54 or _la==55 or _la==175 or _la==177):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementWithCTEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HiveParser.WithClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectStatementWithCTE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatementWithCTE" ):
                listener.enterSelectStatementWithCTE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatementWithCTE" ):
                listener.exitSelectStatementWithCTE(self)




    def selectStatementWithCTE(self):

        localctx = HiveParser.SelectStatementWithCTEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_selectStatementWithCTE)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 2753
                self.withClause()


            self.state = 2756
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertClause(self):
            return self.getTypedRuleContext(HiveParser.InsertClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(HiveParser.SelectClauseContext,0)


        def lateralView(self):
            return self.getTypedRuleContext(HiveParser.LateralViewContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HiveParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(HiveParser.HavingClauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(HiveParser.Window_clauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = HiveParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.state = 2821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2758
                self.insertClause()
                self.state = 2759
                self.selectClause()
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214 or _la==334:
                    self.state = 2760
                    self.lateralView()


                self.state = 2764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2763
                    self.whereClause()


                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 2766
                    self.groupByClause()


                self.state = 2770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 2769
                    self.havingClause()


                self.state = 2773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 2772
                    self.window_clause()


                self.state = 2776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 2775
                    self.orderByClause()


                self.state = 2779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 2778
                    self.clusterByClause()


                self.state = 2782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 2781
                    self.distributeByClause()


                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2784
                    self.sortByClause()


                self.state = 2788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 2787
                    self.limitClause()


                pass
            elif token in [23, 98, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2790
                self.selectClause()
                self.state = 2792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214 or _la==334:
                    self.state = 2791
                    self.lateralView()


                self.state = 2795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2794
                    self.whereClause()


                self.state = 2798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 2797
                    self.groupByClause()


                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 2800
                    self.havingClause()


                self.state = 2804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 2803
                    self.window_clause()


                self.state = 2807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 2806
                    self.orderByClause()


                self.state = 2810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 2809
                    self.clusterByClause()


                self.state = 2813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 2812
                    self.distributeByClause()


                self.state = 2816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2815
                    self.sortByClause()


                self.state = 2819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 2818
                    self.limitClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def destination(self):
            return self.getTypedRuleContext(HiveParser.DestinationContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_insertClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertClause" ):
                listener.enterInsertClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertClause" ):
                listener.exitInsertClause(self)




    def insertClause(self):

        localctx = HiveParser.InsertClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_insertClause)
        self._la = 0 # Token type
        try:
            self.state = 2841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2823
                self.match(HiveParser.KW_INSERT)
                self.state = 2824
                self.match(HiveParser.KW_OVERWRITE)
                self.state = 2825
                self.destination()
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 2826
                    self.ifNotExists()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2829
                self.match(HiveParser.KW_INSERT)
                self.state = 2830
                self.match(HiveParser.KW_INTO)
                self.state = 2832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 2831
                    self.match(HiveParser.KW_TABLE)


                self.state = 2834
                self.tableOrPartition()
                self.state = 2839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2835
                    self.match(HiveParser.LPAREN)
                    self.state = 2836
                    self.columnNameList()
                    self.state = 2837
                    self.match(HiveParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DIRECTORY(self):
            return self.getToken(HiveParser.KW_DIRECTORY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_destination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestination" ):
                listener.enterDestination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestination" ):
                listener.exitDestination(self)




    def destination(self):

        localctx = HiveParser.DestinationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_destination)
        self._la = 0 # Token type
        try:
            self.state = 2856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47, 48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 2843
                    self.match(HiveParser.KW_LOCAL)


                self.state = 2846
                self.match(HiveParser.KW_DIRECTORY)
                self.state = 2847
                self.match(HiveParser.StringLiteral)
                self.state = 2849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2848
                    self.tableRowFormat()


                self.state = 2852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 2851
                    self.tableFileFormat()


                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2854
                self.match(HiveParser.KW_TABLE)
                self.state = 2855
                self.tableOrPartition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = HiveParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_limitClause)
        try:
            self.state = 2868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2858
                self.match(HiveParser.KW_LIMIT)

                self.state = 2861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2859
                    self.match(HiveParser.Number)
                    self.state = 2860
                    self.match(HiveParser.COMMA)


                self.state = 2863
                self.match(HiveParser.Number)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2864
                self.match(HiveParser.KW_LIMIT)
                self.state = 2865
                self.match(HiveParser.Number)
                self.state = 2866
                self.match(HiveParser.KW_OFFSET)
                self.state = 2867
                self.match(HiveParser.Number)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = HiveParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2870
            self.match(HiveParser.KW_DELETE)
            self.state = 2871
            self.match(HiveParser.KW_FROM)
            self.state = 2872
            self.tableName()
            self.state = 2874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2873
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAssignmentClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableOrColumn(self):
            return self.getTypedRuleContext(HiveParser.TableOrColumnContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnAssignmentClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAssignmentClause" ):
                listener.enterColumnAssignmentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAssignmentClause" ):
                listener.exitColumnAssignmentClause(self)




    def columnAssignmentClause(self):

        localctx = HiveParser.ColumnAssignmentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_columnAssignmentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2876
            self.tableOrColumn()
            self.state = 2877
            self.match(HiveParser.EQUAL)
            self.state = 2878
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def columnAssignmentClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnAssignmentClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnAssignmentClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_setColumnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetColumnsClause" ):
                listener.enterSetColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetColumnsClause" ):
                listener.exitSetColumnsClause(self)




    def setColumnsClause(self):

        localctx = HiveParser.SetColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_setColumnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2880
            self.match(HiveParser.KW_SET)
            self.state = 2881
            self.columnAssignmentClause()
            self.state = 2886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 2882
                self.match(HiveParser.COMMA)
                self.state = 2883
                self.columnAssignmentClause()
                self.state = 2888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def setColumnsClause(self):
            return self.getTypedRuleContext(HiveParser.SetColumnsClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = HiveParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2889
            self.match(HiveParser.KW_UPDATE)
            self.state = 2890
            self.tableName()
            self.state = 2891
            self.setColumnsClause()
            self.state = 2893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2892
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.StartTransactionStatementContext,0)


        def commitStatement(self):
            return self.getTypedRuleContext(HiveParser.CommitStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(HiveParser.RollbackStatementContext,0)


        def setAutoCommitStatement(self):
            return self.getTypedRuleContext(HiveParser.SetAutoCommitStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sqlTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlTransactionStatement" ):
                listener.enterSqlTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlTransactionStatement" ):
                listener.exitSqlTransactionStatement(self)




    def sqlTransactionStatement(self):

        localctx = HiveParser.SqlTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_sqlTransactionStatement)
        try:
            self.state = 2899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [275]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2895
                self.startTransactionStatement()
                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2896
                self.commitStatement()
                pass
            elif token in [278]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2897
                self.rollbackStatement()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2898
                self.setAutoCommitStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_START(self):
            return self.getToken(HiveParser.KW_START, 0)

        def KW_TRANSACTION(self):
            return self.getToken(HiveParser.KW_TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(HiveParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_startTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransactionStatement" ):
                listener.enterStartTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransactionStatement" ):
                listener.exitStartTransactionStatement(self)




    def startTransactionStatement(self):

        localctx = HiveParser.StartTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_startTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2901
            self.match(HiveParser.KW_START)
            self.state = 2902
            self.match(HiveParser.KW_TRANSACTION)
            self.state = 2911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198 or _la==282:
                self.state = 2903
                self.transactionMode()
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 2904
                    self.match(HiveParser.COMMA)
                    self.state = 2905
                    self.transactionMode()
                    self.state = 2910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isolationLevel(self):
            return self.getTypedRuleContext(HiveParser.IsolationLevelContext,0)


        def transactionAccessMode(self):
            return self.getTypedRuleContext(HiveParser.TransactionAccessModeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = HiveParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_transactionMode)
        try:
            self.state = 2915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [282]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2913
                self.isolationLevel()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2914
                self.transactionAccessMode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ(self):
            return self.getToken(HiveParser.KW_READ, 0)

        def KW_ONLY(self):
            return self.getToken(HiveParser.KW_ONLY, 0)

        def KW_WRITE(self):
            return self.getToken(HiveParser.KW_WRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_transactionAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)




    def transactionAccessMode(self):

        localctx = HiveParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_transactionAccessMode)
        try:
            self.state = 2921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2917
                self.match(HiveParser.KW_READ)
                self.state = 2918
                self.match(HiveParser.KW_ONLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2919
                self.match(HiveParser.KW_READ)
                self.state = 2920
                self.match(HiveParser.KW_WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ISOLATION(self):
            return self.getToken(HiveParser.KW_ISOLATION, 0)

        def KW_LEVEL(self):
            return self.getToken(HiveParser.KW_LEVEL, 0)

        def levelOfIsolation(self):
            return self.getTypedRuleContext(HiveParser.LevelOfIsolationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)




    def isolationLevel(self):

        localctx = HiveParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_isolationLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.match(HiveParser.KW_ISOLATION)
            self.state = 2924
            self.match(HiveParser.KW_LEVEL)
            self.state = 2925
            self.levelOfIsolation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SNAPSHOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_levelOfIsolation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelOfIsolation" ):
                listener.enterLevelOfIsolation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelOfIsolation" ):
                listener.exitLevelOfIsolation(self)




    def levelOfIsolation(self):

        localctx = HiveParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_levelOfIsolation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2927
            self.match(HiveParser.KW_SNAPSHOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMIT(self):
            return self.getToken(HiveParser.KW_COMMIT, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_commitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitStatement" ):
                listener.enterCommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitStatement" ):
                listener.exitCommitStatement(self)




    def commitStatement(self):

        localctx = HiveParser.CommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_commitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(HiveParser.KW_COMMIT)
            self.state = 2931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 2930
                self.match(HiveParser.KW_WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROLLBACK(self):
            return self.getToken(HiveParser.KW_ROLLBACK, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = HiveParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(HiveParser.KW_ROLLBACK)
            self.state = 2935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 2934
                self.match(HiveParser.KW_WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutoCommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_AUTOCOMMIT(self):
            return self.getToken(HiveParser.KW_AUTOCOMMIT, 0)

        def booleanValueTok(self):
            return self.getTypedRuleContext(HiveParser.BooleanValueTokContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_setAutoCommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutoCommitStatement" ):
                listener.enterSetAutoCommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutoCommitStatement" ):
                listener.exitSetAutoCommitStatement(self)




    def setAutoCommitStatement(self):

        localctx = HiveParser.SetAutoCommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_setAutoCommitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2937
            self.match(HiveParser.KW_SET)
            self.state = 2938
            self.match(HiveParser.KW_AUTOCOMMIT)
            self.state = 2939
            self.booleanValueTok()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbortTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def getRuleIndex(self):
            return HiveParser.RULE_abortTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbortTransactionStatement" ):
                listener.enterAbortTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbortTransactionStatement" ):
                listener.exitAbortTransactionStatement(self)




    def abortTransactionStatement(self):

        localctx = HiveParser.AbortTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_abortTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2941
            self.match(HiveParser.KW_ABORT)
            self.state = 2942
            self.match(HiveParser.KW_TRANSACTIONS)
            self.state = 2944 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2943
                self.match(HiveParser.Number)
                self.state = 2946 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==367):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MERGE(self):
            return self.getToken(HiveParser.KW_MERGE, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def joinSourcePart(self):
            return self.getTypedRuleContext(HiveParser.JoinSourcePartContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def whenClauses(self):
            return self.getTypedRuleContext(HiveParser.WhenClausesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_mergeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeStatement" ):
                listener.enterMergeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeStatement" ):
                listener.exitMergeStatement(self)




    def mergeStatement(self):

        localctx = HiveParser.MergeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_mergeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2948
            self.match(HiveParser.KW_MERGE)
            self.state = 2949
            self.match(HiveParser.KW_INTO)
            self.state = 2950
            self.tableName()
            self.state = 2955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8879127934250577920) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3458763614599775565) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -2319580865570571373) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -4618828440659893195) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -244939057153) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 1099511627779) != 0):
                self.state = 2952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 2951
                    self.match(HiveParser.KW_AS)


                self.state = 2954
                self.identifier()


            self.state = 2957
            self.match(HiveParser.KW_USING)
            self.state = 2958
            self.joinSourcePart()
            self.state = 2959
            self.match(HiveParser.KW_ON)
            self.state = 2960
            self.expression(0)
            self.state = 2961
            self.whenClauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenMatchedAndClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.WhenMatchedAndClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.WhenMatchedAndClauseContext,i)


        def whenMatchedThenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.WhenMatchedThenClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.WhenMatchedThenClauseContext,i)


        def whenNotMatchedClause(self):
            return self.getTypedRuleContext(HiveParser.WhenNotMatchedClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClauses" ):
                listener.enterWhenClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClauses" ):
                listener.exitWhenClauses(self)




    def whenClauses(self):

        localctx = HiveParser.WhenClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_whenClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2967
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2965
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                    if la_ == 1:
                        self.state = 2963
                        self.whenMatchedAndClause()
                        pass

                    elif la_ == 2:
                        self.state = 2964
                        self.whenMatchedThenClause()
                        pass

             
                self.state = 2969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

            self.state = 2971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163:
                self.state = 2970
                self.whenNotMatchedClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenNotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_VALUES(self):
            return self.getToken(HiveParser.KW_VALUES, 0)

        def valueRowConstructor(self):
            return self.getTypedRuleContext(HiveParser.ValueRowConstructorContext,0)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenNotMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenNotMatchedClause" ):
                listener.enterWhenNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenNotMatchedClause" ):
                listener.exitWhenNotMatchedClause(self)




    def whenNotMatchedClause(self):

        localctx = HiveParser.WhenNotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_whenNotMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.match(HiveParser.KW_WHEN)
            self.state = 2974
            self.match(HiveParser.KW_NOT)
            self.state = 2975
            self.match(HiveParser.KW_MATCHED)
            self.state = 2978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 2976
                self.match(HiveParser.KW_AND)
                self.state = 2977
                self.expression(0)


            self.state = 2980
            self.match(HiveParser.KW_THEN)
            self.state = 2981
            self.match(HiveParser.KW_INSERT)
            self.state = 2982
            self.match(HiveParser.KW_VALUES)
            self.state = 2983
            self.valueRowConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenMatchedAndClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def updateOrDelete(self):
            return self.getTypedRuleContext(HiveParser.UpdateOrDeleteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenMatchedAndClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenMatchedAndClause" ):
                listener.enterWhenMatchedAndClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenMatchedAndClause" ):
                listener.exitWhenMatchedAndClause(self)




    def whenMatchedAndClause(self):

        localctx = HiveParser.WhenMatchedAndClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_whenMatchedAndClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self.match(HiveParser.KW_WHEN)
            self.state = 2986
            self.match(HiveParser.KW_MATCHED)
            self.state = 2987
            self.match(HiveParser.KW_AND)
            self.state = 2988
            self.expression(0)
            self.state = 2989
            self.match(HiveParser.KW_THEN)
            self.state = 2990
            self.updateOrDelete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenMatchedThenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def updateOrDelete(self):
            return self.getTypedRuleContext(HiveParser.UpdateOrDeleteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenMatchedThenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenMatchedThenClause" ):
                listener.enterWhenMatchedThenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenMatchedThenClause" ):
                listener.exitWhenMatchedThenClause(self)




    def whenMatchedThenClause(self):

        localctx = HiveParser.WhenMatchedThenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_whenMatchedThenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.match(HiveParser.KW_WHEN)
            self.state = 2993
            self.match(HiveParser.KW_MATCHED)
            self.state = 2994
            self.match(HiveParser.KW_THEN)
            self.state = 2995
            self.updateOrDelete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateOrDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def setColumnsClause(self):
            return self.getTypedRuleContext(HiveParser.SetColumnsClauseContext,0)


        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_updateOrDelete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateOrDelete" ):
                listener.enterUpdateOrDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateOrDelete" ):
                listener.exitUpdateOrDelete(self)




    def updateOrDelete(self):

        localctx = HiveParser.UpdateOrDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_updateOrDelete)
        try:
            self.state = 3000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2997
                self.match(HiveParser.KW_UPDATE)
                self.state = 2998
                self.setColumnsClause()
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2999
                self.match(HiveParser.KW_DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_killQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillQueryStatement" ):
                listener.enterKillQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillQueryStatement" ):
                listener.exitKillQueryStatement(self)




    def killQueryStatement(self):

        localctx = HiveParser.KillQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_killQueryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3002
            self.match(HiveParser.KW_KILL)
            self.state = 3003
            self.match(HiveParser.KW_QUERY)
            self.state = 3005 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3004
                self.match(HiveParser.StringLiteral)
                self.state = 3007 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==362):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SELECT(self):
            return self.getToken(HiveParser.KW_SELECT, 0)

        def QUERY_HINT(self):
            return self.getToken(HiveParser.QUERY_HINT, 0)

        def selectList(self):
            return self.getTypedRuleContext(HiveParser.SelectListContext,0)


        def KW_TRANSFORM(self):
            return self.getToken(HiveParser.KW_TRANSFORM, 0)

        def selectTrfmClause(self):
            return self.getTypedRuleContext(HiveParser.SelectTrfmClauseContext,0)


        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def trfmClause(self):
            return self.getTypedRuleContext(HiveParser.TrfmClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)




    def selectClause(self):

        localctx = HiveParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.state = 3022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3009
                self.match(HiveParser.KW_SELECT)
                self.state = 3011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==373:
                    self.state = 3010
                    self.match(HiveParser.QUERY_HINT)


                self.state = 3019
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 24, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 64, 68, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 93, 96, 97, 98, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 206, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 237, 238, 242, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 350, 351, 352, 356, 362, 364, 365, 367, 368, 370]:
                    self.state = 3014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==3 or _la==24:
                        self.state = 3013
                        _la = self._input.LA(1)
                        if not(_la==3 or _la==24):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3016
                    self.selectList()
                    pass
                elif token in [49]:
                    self.state = 3017
                    self.match(HiveParser.KW_TRANSFORM)
                    self.state = 3018
                    self.selectTrfmClause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [98, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3021
                self.trfmClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectList" ):
                listener.enterSelectList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectList" ):
                listener.exitSelectList(self)




    def selectList(self):

        localctx = HiveParser.SelectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_selectList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3024
            self.selectItem()
            self.state = 3029
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,352,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3025
                    self.match(HiveParser.COMMA)
                    self.state = 3026
                    self.selectItem() 
                self.state = 3031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,352,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectTrfmClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def selectExpressionList(self):
            return self.getTypedRuleContext(HiveParser.SelectExpressionListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(HiveParser.RowFormatContext,i)


        def recordWriter(self):
            return self.getTypedRuleContext(HiveParser.RecordWriterContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def recordReader(self):
            return self.getTypedRuleContext(HiveParser.RecordReaderContext,0)


        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectTrfmClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectTrfmClause" ):
                listener.enterSelectTrfmClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectTrfmClause" ):
                listener.exitSelectTrfmClause(self)




    def selectTrfmClause(self):

        localctx = HiveParser.SelectTrfmClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_selectTrfmClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(HiveParser.LPAREN)
            self.state = 3033
            self.selectExpressionList()
            self.state = 3034
            self.match(HiveParser.RPAREN)
            self.state = 3036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 3035
                self.rowFormat()


            self.state = 3039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 3038
                self.recordWriter()


            self.state = 3041
            self.match(HiveParser.KW_USING)
            self.state = 3042
            self.match(HiveParser.StringLiteral)
            self.state = 3057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 3043
                self.match(HiveParser.KW_AS)
                self.state = 3055
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [336]:
                    self.state = 3044
                    self.match(HiveParser.LPAREN)
                    self.state = 3047
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                    if la_ == 1:
                        self.state = 3045
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3046
                        self.columnNameTypeList()
                        pass


                    self.state = 3049
                    self.match(HiveParser.RPAREN)
                    pass
                elif token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                    self.state = 3053
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                    if la_ == 1:
                        self.state = 3051
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3052
                        self.columnNameTypeList()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 3059
                self.rowFormat()


            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==211:
                self.state = 3062
                self.recordReader()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableAllColumns(self):
            return self.getTypedRuleContext(HiveParser.TableAllColumnsContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItem" ):
                listener.enterSelectItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItem" ):
                listener.exitSelectItem(self)




    def selectItem(self):

        localctx = HiveParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 3085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3065
                self.tableAllColumns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3066
                self.expression(0)
                self.state = 3083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 3068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 3067
                        self.match(HiveParser.KW_AS)


                    self.state = 3070
                    self.identifier()

                elif la_ == 2:
                    self.state = 3071
                    self.match(HiveParser.KW_AS)
                    self.state = 3072
                    self.match(HiveParser.LPAREN)
                    self.state = 3073
                    self.identifier()
                    self.state = 3078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==334:
                        self.state = 3074
                        self.match(HiveParser.COMMA)
                        self.state = 3075
                        self.identifier()
                        self.state = 3080
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3081
                    self.match(HiveParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrfmClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def selectExpressionList(self):
            return self.getTypedRuleContext(HiveParser.SelectExpressionListContext,0)


        def KW_REDUCE(self):
            return self.getToken(HiveParser.KW_REDUCE, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(HiveParser.RowFormatContext,i)


        def recordWriter(self):
            return self.getTypedRuleContext(HiveParser.RecordWriterContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def recordReader(self):
            return self.getTypedRuleContext(HiveParser.RecordReaderContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_trfmClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrfmClause" ):
                listener.enterTrfmClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrfmClause" ):
                listener.exitTrfmClause(self)




    def trfmClause(self):

        localctx = HiveParser.TrfmClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_trfmClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                self.state = 3087
                self.match(HiveParser.KW_MAP)
                self.state = 3088
                self.selectExpressionList()
                pass
            elif token in [100]:
                self.state = 3089
                self.match(HiveParser.KW_REDUCE)
                self.state = 3090
                self.selectExpressionList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 3093
                self.rowFormat()


            self.state = 3097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 3096
                self.recordWriter()


            self.state = 3099
            self.match(HiveParser.KW_USING)
            self.state = 3100
            self.match(HiveParser.StringLiteral)
            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 3101
                self.match(HiveParser.KW_AS)
                self.state = 3113
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [336]:
                    self.state = 3102
                    self.match(HiveParser.LPAREN)
                    self.state = 3105
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                    if la_ == 1:
                        self.state = 3103
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3104
                        self.columnNameTypeList()
                        pass


                    self.state = 3107
                    self.match(HiveParser.RPAREN)
                    pass
                elif token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                    self.state = 3111
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                    if la_ == 1:
                        self.state = 3109
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3110
                        self.columnNameTypeList()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 3117
                self.rowFormat()


            self.state = 3121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==211:
                self.state = 3120
                self.recordReader()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableAllColumns(self):
            return self.getTypedRuleContext(HiveParser.TableAllColumnsContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpression" ):
                listener.enterSelectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpression" ):
                listener.exitSelectExpression(self)




    def selectExpression(self):

        localctx = HiveParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_selectExpression)
        try:
            self.state = 3125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3123
                self.tableAllColumns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3124
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionList" ):
                listener.enterSelectExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionList" ):
                listener.exitSelectExpressionList(self)




    def selectExpressionList(self):

        localctx = HiveParser.SelectExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_selectExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3127
            self.selectExpression()
            self.state = 3132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3128
                self.match(HiveParser.COMMA)
                self.state = 3129
                self.selectExpression()
                self.state = 3134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WINDOW(self):
            return self.getToken(HiveParser.KW_WINDOW, 0)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_defnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_window_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_clause" ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_clause" ):
                listener.exitWindow_clause(self)




    def window_clause(self):

        localctx = HiveParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_window_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3135
            self.match(HiveParser.KW_WINDOW)
            self.state = 3136
            self.window_defn()
            self.state = 3141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3137
                self.match(HiveParser.COMMA)
                self.state = 3138
                self.window_defn()
                self.state = 3143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def window_specification(self):
            return self.getTypedRuleContext(HiveParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = HiveParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_window_defn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3144
            self.identifier()
            self.state = 3145
            self.match(HiveParser.KW_AS)
            self.state = 3146
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitioningSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitioningSpecContext,0)


        def window_frame(self):
            return self.getTypedRuleContext(HiveParser.Window_frameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_specification" ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_specification" ):
                listener.exitWindow_specification(self)




    def window_specification(self):

        localctx = HiveParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_window_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.state = 3148
                self.identifier()
                pass
            elif token in [336]:
                self.state = 3149
                self.match(HiveParser.LPAREN)
                self.state = 3151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 3150
                    self.identifier()


                self.state = 3154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15762633055600640) != 0):
                    self.state = 3153
                    self.partitioningSpec()


                self.state = 3157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107 or _la==201:
                    self.state = 3156
                    self.window_frame()


                self.state = 3159
                self.match(HiveParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_range_expression(self):
            return self.getTypedRuleContext(HiveParser.Window_range_expressionContext,0)


        def window_value_expression(self):
            return self.getTypedRuleContext(HiveParser.Window_value_expressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_frame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame" ):
                listener.enterWindow_frame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame" ):
                listener.exitWindow_frame(self)




    def window_frame(self):

        localctx = HiveParser.Window_frameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_window_frame)
        try:
            self.state = 3164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3162
                self.window_range_expression()
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3163
                self.window_value_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROWS(self):
            return self.getToken(HiveParser.KW_ROWS, 0)

        def window_frame_start_boundary(self):
            return self.getTypedRuleContext(HiveParser.Window_frame_start_boundaryContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def window_frame_boundary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_frame_boundaryContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_frame_boundaryContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_range_expression" ):
                listener.enterWindow_range_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_range_expression" ):
                listener.exitWindow_range_expression(self)




    def window_range_expression(self):

        localctx = HiveParser.Window_range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_window_range_expression)
        try:
            self.state = 3174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3166
                self.match(HiveParser.KW_ROWS)
                self.state = 3167
                self.window_frame_start_boundary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3168
                self.match(HiveParser.KW_ROWS)
                self.state = 3169
                self.match(HiveParser.KW_BETWEEN)
                self.state = 3170
                self.window_frame_boundary()
                self.state = 3171
                self.match(HiveParser.KW_AND)
                self.state = 3172
                self.window_frame_boundary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RANGE(self):
            return self.getToken(HiveParser.KW_RANGE, 0)

        def window_frame_start_boundary(self):
            return self.getTypedRuleContext(HiveParser.Window_frame_start_boundaryContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def window_frame_boundary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_frame_boundaryContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_frame_boundaryContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_value_expression" ):
                listener.enterWindow_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_value_expression" ):
                listener.exitWindow_value_expression(self)




    def window_value_expression(self):

        localctx = HiveParser.Window_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_window_value_expression)
        try:
            self.state = 3184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3176
                self.match(HiveParser.KW_RANGE)
                self.state = 3177
                self.window_frame_start_boundary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3178
                self.match(HiveParser.KW_RANGE)
                self.state = 3179
                self.match(HiveParser.KW_BETWEEN)
                self.state = 3180
                self.window_frame_boundary()
                self.state = 3181
                self.match(HiveParser.KW_AND)
                self.state = 3182
                self.window_frame_boundary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_start_boundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNBOUNDED(self):
            return self.getToken(HiveParser.KW_UNBOUNDED, 0)

        def KW_PRECEDING(self):
            return self.getToken(HiveParser.KW_PRECEDING, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_frame_start_boundary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_start_boundary" ):
                listener.enterWindow_frame_start_boundary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_start_boundary" ):
                listener.exitWindow_frame_start_boundary(self)




    def window_frame_start_boundary(self):

        localctx = HiveParser.Window_frame_start_boundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_window_frame_start_boundary)
        try:
            self.state = 3192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [233]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3186
                self.match(HiveParser.KW_UNBOUNDED)
                self.state = 3187
                self.match(HiveParser.KW_PRECEDING)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3188
                self.match(HiveParser.KW_CURRENT)
                self.state = 3189
                self.match(HiveParser.KW_ROW)
                pass
            elif token in [367]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3190
                self.match(HiveParser.Number)
                self.state = 3191
                self.match(HiveParser.KW_PRECEDING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNBOUNDED(self):
            return self.getToken(HiveParser.KW_UNBOUNDED, 0)

        def KW_PRECEDING(self):
            return self.getToken(HiveParser.KW_PRECEDING, 0)

        def KW_FOLLOWING(self):
            return self.getToken(HiveParser.KW_FOLLOWING, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_frame_boundary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_boundary" ):
                listener.enterWindow_frame_boundary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_boundary" ):
                listener.exitWindow_frame_boundary(self)




    def window_frame_boundary(self):

        localctx = HiveParser.Window_frame_boundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_window_frame_boundary)
        self._la = 0 # Token type
        try:
            self.state = 3200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [233]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3194
                self.match(HiveParser.KW_UNBOUNDED)
                self.state = 3195
                _la = self._input.LA(1)
                if not(_la==234 or _la==235):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3196
                self.match(HiveParser.KW_CURRENT)
                self.state = 3197
                self.match(HiveParser.KW_ROW)
                pass
            elif token in [367]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3198
                self.match(HiveParser.Number)
                self.state = 3199
                _la = self._input.LA(1)
                if not(_la==234 or _la==235):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAllColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableAllColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAllColumns" ):
                listener.enterTableAllColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAllColumns" ):
                listener.exitTableAllColumns(self)




    def tableAllColumns(self):

        localctx = HiveParser.TableAllColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_tableAllColumns)
        try:
            self.state = 3207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [352]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3202
                self.match(HiveParser.STAR)
                pass
            elif token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3203
                self.tableName()
                self.state = 3204
                self.match(HiveParser.DOT)
                self.state = 3205
                self.match(HiveParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOrColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableOrColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOrColumn" ):
                listener.enterTableOrColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOrColumn" ):
                listener.exitTableOrColumn(self)




    def tableOrColumn(self):

        localctx = HiveParser.TableOrColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_tableOrColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = HiveParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3211
            self.expression(0)
            self.state = 3216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3212
                self.match(HiveParser.COMMA)
                self.state = 3213
                self.expression(0)
                self.state = 3218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_aliasList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasList" ):
                listener.enterAliasList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasList" ):
                listener.exitAliasList(self)




    def aliasList(self):

        localctx = HiveParser.AliasListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_aliasList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.identifier()
            self.state = 3224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3220
                    self.match(HiveParser.COMMA)
                    self.state = 3221
                    self.identifier() 
                self.state = 3226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def fromSource(self):
            return self.getTypedRuleContext(HiveParser.FromSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = HiveParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.match(HiveParser.KW_FROM)
            self.state = 3228
            self.fromSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uniqueJoinToken(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinTokenContext,0)


        def uniqueJoinSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.UniqueJoinSourceContext)
            else:
                return self.getTypedRuleContext(HiveParser.UniqueJoinSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def joinSource(self):
            return self.getTypedRuleContext(HiveParser.JoinSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fromSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromSource" ):
                listener.enterFromSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromSource" ):
                listener.exitFromSource(self)




    def fromSource(self):

        localctx = HiveParser.FromSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_fromSource)
        self._la = 0 # Token type
        try:
            self.state = 3239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3230
                self.uniqueJoinToken()
                self.state = 3231
                self.uniqueJoinSource()
                self.state = 3234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3232
                    self.match(HiveParser.COMMA)
                    self.state = 3233
                    self.uniqueJoinSource()
                    self.state = 3236 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==334):
                        break

                pass
            elif token in [12, 13, 14, 15, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3238
                self.joinSource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomjoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(HiveParser.LateralViewContext,i)


        def virtualTableSource(self):
            return self.getTypedRuleContext(HiveParser.VirtualTableSourceContext,0)


        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def joinSource(self):
            return self.getTypedRuleContext(HiveParser.JoinSourceContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_atomjoinSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomjoinSource" ):
                listener.enterAtomjoinSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomjoinSource" ):
                listener.exitAtomjoinSource(self)




    def atomjoinSource(self):

        localctx = HiveParser.AtomjoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_atomjoinSource)
        try:
            self.state = 3273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3241
                self.tableSource()
                self.state = 3245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3242
                        self.lateralView() 
                    self.state = 3247
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3248
                self.virtualTableSource()
                self.state = 3252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,392,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3249
                        self.lateralView() 
                    self.state = 3254
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3255
                self.subQuerySource()
                self.state = 3259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,393,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3256
                        self.lateralView() 
                    self.state = 3261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,393,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3262
                self.partitionedTableFunction()
                self.state = 3266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3263
                        self.lateralView() 
                    self.state = 3268
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3269
                self.match(HiveParser.LPAREN)
                self.state = 3270
                self.joinSource()
                self.state = 3271
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomjoinSource(self):
            return self.getTypedRuleContext(HiveParser.AtomjoinSourceContext,0)


        def joinToken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.JoinTokenContext)
            else:
                return self.getTypedRuleContext(HiveParser.JoinTokenContext,i)


        def joinSourcePart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.JoinSourcePartContext)
            else:
                return self.getTypedRuleContext(HiveParser.JoinSourcePartContext,i)


        def KW_ON(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ON)
            else:
                return self.getToken(HiveParser.KW_ON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_USING(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_USING)
            else:
                return self.getToken(HiveParser.KW_USING, i)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_joinSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinSource" ):
                listener.enterJoinSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinSource" ):
                listener.exitJoinSource(self)




    def joinSource(self):

        localctx = HiveParser.JoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_joinSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.atomjoinSource()
            self.state = 3286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 16106127360) != 0) or _la==207 or _la==249 or _la==334:
                self.state = 3276
                self.joinToken()
                self.state = 3277
                self.joinSourcePart()
                self.state = 3282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 3278
                    self.match(HiveParser.KW_ON)
                    self.state = 3279
                    self.expression(0)
                    pass
                elif token in [50]:
                    self.state = 3280
                    self.match(HiveParser.KW_USING)
                    self.state = 3281
                    self.columnParenthesesList()
                    pass
                elif token in [-1, 13, 16, 17, 19, 20, 21, 23, 25, 30, 31, 32, 33, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67, 72, 73, 98, 100, 117, 143, 149, 153, 155, 173, 175, 177, 186, 187, 190, 192, 202, 207, 220, 224, 232, 244, 249, 264, 275, 277, 278, 298, 301, 303, 334, 335, 336, 337]:
                    pass
                else:
                    pass
                self.state = 3288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSourcePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def virtualTableSource(self):
            return self.getTypedRuleContext(HiveParser.VirtualTableSourceContext,0)


        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(HiveParser.LateralViewContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_joinSourcePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinSourcePart" ):
                listener.enterJoinSourcePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinSourcePart" ):
                listener.exitJoinSourcePart(self)




    def joinSourcePart(self):

        localctx = HiveParser.JoinSourcePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_joinSourcePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 3289
                self.tableSource()
                pass

            elif la_ == 2:
                self.state = 3290
                self.virtualTableSource()
                pass

            elif la_ == 3:
                self.state = 3291
                self.subQuerySource()
                pass

            elif la_ == 4:
                self.state = 3292
                self.partitionedTableFunction()
                pass


            self.state = 3298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3295
                    self.lateralView() 
                self.state = 3300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uniqueJoinTableSource(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinTableSourceContext,0)


        def uniqueJoinExpr(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinExprContext,0)


        def KW_PRESERVE(self):
            return self.getToken(HiveParser.KW_PRESERVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinSource" ):
                listener.enterUniqueJoinSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinSource" ):
                listener.exitUniqueJoinSource(self)




    def uniqueJoinSource(self):

        localctx = HiveParser.UniqueJoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_uniqueJoinSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 3301
                self.match(HiveParser.KW_PRESERVE)


            self.state = 3304
            self.uniqueJoinTableSource()
            self.state = 3305
            self.uniqueJoinExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(HiveParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinExpr" ):
                listener.enterUniqueJoinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinExpr" ):
                listener.exitUniqueJoinExpr(self)




    def uniqueJoinExpr(self):

        localctx = HiveParser.UniqueJoinExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_uniqueJoinExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            self.match(HiveParser.LPAREN)
            self.state = 3308
            self.expressionList()
            self.state = 3309
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNIQUEJOIN(self):
            return self.getToken(HiveParser.KW_UNIQUEJOIN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinToken" ):
                listener.enterUniqueJoinToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinToken" ):
                listener.exitUniqueJoinToken(self)




    def uniqueJoinToken(self):

        localctx = HiveParser.UniqueJoinTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_uniqueJoinToken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3311
            self.match(HiveParser.KW_UNIQUEJOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JOIN(self):
            return self.getToken(HiveParser.KW_JOIN, 0)

        def KW_INNER(self):
            return self.getToken(HiveParser.KW_INNER, 0)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_CROSS(self):
            return self.getToken(HiveParser.KW_CROSS, 0)

        def KW_LEFT(self):
            return self.getToken(HiveParser.KW_LEFT, 0)

        def KW_OUTER(self):
            return self.getToken(HiveParser.KW_OUTER, 0)

        def KW_RIGHT(self):
            return self.getToken(HiveParser.KW_RIGHT, 0)

        def KW_FULL(self):
            return self.getToken(HiveParser.KW_FULL, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_joinToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinToken" ):
                listener.enterJoinToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinToken" ):
                listener.exitJoinToken(self)




    def joinToken(self):

        localctx = HiveParser.JoinTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_joinToken)
        self._la = 0 # Token type
        try:
            self.state = 3337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3313
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3314
                self.match(HiveParser.KW_INNER)
                self.state = 3315
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3316
                self.match(HiveParser.COMMA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3317
                self.match(HiveParser.KW_CROSS)
                self.state = 3318
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3319
                self.match(HiveParser.KW_LEFT)
                self.state = 3321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 3320
                    self.match(HiveParser.KW_OUTER)


                self.state = 3323
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3324
                self.match(HiveParser.KW_RIGHT)
                self.state = 3326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 3325
                    self.match(HiveParser.KW_OUTER)


                self.state = 3328
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3329
                self.match(HiveParser.KW_FULL)
                self.state = 3331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 3330
                    self.match(HiveParser.KW_OUTER)


                self.state = 3333
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3334
                self.match(HiveParser.KW_LEFT)
                self.state = 3335
                self.match(HiveParser.KW_SEMI)
                self.state = 3336
                self.match(HiveParser.KW_JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LATERAL(self):
            return self.getToken(HiveParser.KW_LATERAL, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_OUTER(self):
            return self.getToken(HiveParser.KW_OUTER, 0)

        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def getRuleIndex(self):
            return HiveParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = HiveParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.state = 3398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3339
                self.match(HiveParser.KW_LATERAL)
                self.state = 3340
                self.match(HiveParser.KW_VIEW)
                self.state = 3341
                self.match(HiveParser.KW_OUTER)
                self.state = 3342
                self.function_()
                self.state = 3343
                self.tableAlias()
                self.state = 3353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 3344
                    self.match(HiveParser.KW_AS)
                    self.state = 3345
                    self.identifier()
                    self.state = 3350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,405,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3346
                            self.match(HiveParser.COMMA)
                            self.state = 3347
                            self.identifier() 
                        self.state = 3352
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,405,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==334:
                    self.state = 3355
                    self.match(HiveParser.COMMA)


                self.state = 3358
                self.match(HiveParser.KW_LATERAL)
                self.state = 3359
                self.match(HiveParser.KW_VIEW)
                self.state = 3360
                self.function_()
                self.state = 3361
                self.tableAlias()
                self.state = 3371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 3362
                    self.match(HiveParser.KW_AS)
                    self.state = 3363
                    self.identifier()
                    self.state = 3368
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,408,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3364
                            self.match(HiveParser.COMMA)
                            self.state = 3365
                            self.identifier() 
                        self.state = 3370
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,408,self._ctx)



                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==334:
                    self.state = 3373
                    self.match(HiveParser.COMMA)


                self.state = 3376
                self.match(HiveParser.KW_LATERAL)
                self.state = 3377
                self.match(HiveParser.KW_TABLE)
                self.state = 3378
                self.match(HiveParser.LPAREN)
                self.state = 3379
                self.valuesClause()
                self.state = 3380
                self.match(HiveParser.RPAREN)
                self.state = 3382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 3381
                    self.match(HiveParser.KW_AS)


                self.state = 3384
                self.tableAlias()
                self.state = 3396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3385
                    self.match(HiveParser.LPAREN)
                    self.state = 3386
                    self.identifier()
                    self.state = 3391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==334:
                        self.state = 3387
                        self.match(HiveParser.COMMA)
                        self.state = 3388
                        self.identifier()
                        self.state = 3393
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3394
                    self.match(HiveParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = HiveParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3400
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBucketSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLESAMPLE(self):
            return self.getToken(HiveParser.KW_TABLESAMPLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def KW_OUT(self):
            return self.getToken(HiveParser.KW_OUT, 0)

        def KW_OF(self):
            return self.getToken(HiveParser.KW_OF, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tableBucketSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBucketSample" ):
                listener.enterTableBucketSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBucketSample" ):
                listener.exitTableBucketSample(self)




    def tableBucketSample(self):

        localctx = HiveParser.TableBucketSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_tableBucketSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3402
            self.match(HiveParser.KW_TABLESAMPLE)
            self.state = 3403
            self.match(HiveParser.LPAREN)
            self.state = 3404
            self.match(HiveParser.KW_BUCKET)
            self.state = 3405
            self.match(HiveParser.Number)
            self.state = 3406
            self.match(HiveParser.KW_OUT)
            self.state = 3407
            self.match(HiveParser.KW_OF)
            self.state = 3408
            self.match(HiveParser.Number)
            self.state = 3418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 3409
                self.match(HiveParser.KW_ON)
                self.state = 3410
                self.expression(0)
                self.state = 3415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 3411
                    self.match(HiveParser.COMMA)
                    self.state = 3412
                    self.expression(0)
                    self.state = 3417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3420
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SplitSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLESAMPLE(self):
            return self.getToken(HiveParser.KW_TABLESAMPLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_PERCENT(self):
            return self.getToken(HiveParser.KW_PERCENT, 0)

        def KW_ROWS(self):
            return self.getToken(HiveParser.KW_ROWS, 0)

        def ByteLengthLiteral(self):
            return self.getToken(HiveParser.ByteLengthLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_splitSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplitSample" ):
                listener.enterSplitSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplitSample" ):
                listener.exitSplitSample(self)




    def splitSample(self):

        localctx = HiveParser.SplitSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_splitSample)
        self._la = 0 # Token type
        try:
            self.state = 3431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3422
                self.match(HiveParser.KW_TABLESAMPLE)
                self.state = 3423
                self.match(HiveParser.LPAREN)
                self.state = 3424
                self.match(HiveParser.Number)
                self.state = 3425
                _la = self._input.LA(1)
                if not(_la==107 or _la==132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3426
                self.match(HiveParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3427
                self.match(HiveParser.KW_TABLESAMPLE)
                self.state = 3428
                self.match(HiveParser.LPAREN)
                self.state = 3429
                self.match(HiveParser.ByteLengthLiteral)
                self.state = 3430
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableBucketSample(self):
            return self.getTypedRuleContext(HiveParser.TableBucketSampleContext,0)


        def splitSample(self):
            return self.getTypedRuleContext(HiveParser.SplitSampleContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSample" ):
                listener.enterTableSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSample" ):
                listener.exitTableSample(self)




    def tableSample(self):

        localctx = HiveParser.TableSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_tableSample)
        try:
            self.state = 3435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3433
                self.tableBucketSample()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3434
                self.splitSample()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def tableSample(self):
            return self.getTypedRuleContext(HiveParser.TableSampleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSource" ):
                listener.enterTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSource" ):
                listener.exitTableSource(self)




    def tableSource(self):

        localctx = HiveParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3437
            self.tableName()
            self.state = 3439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 3438
                self.tableProperties()


            self.state = 3442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 3441
                self.tableSample()


            self.state = 3448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 3445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 3444
                    self.match(HiveParser.KW_AS)


                self.state = 3447
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinTableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def tableSample(self):
            return self.getTypedRuleContext(HiveParser.TableSampleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinTableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueJoinTableSource" ):
                listener.enterUniqueJoinTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueJoinTableSource" ):
                listener.exitUniqueJoinTableSource(self)




    def uniqueJoinTableSource(self):

        localctx = HiveParser.UniqueJoinTableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_uniqueJoinTableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3450
            self.tableName()
            self.state = 3452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 3451
                self.tableSample()


            self.state = 3458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8879127934250577920) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3458763614599775565) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -2319580865570571373) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -4618828440659893195) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -244939057153) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & 1099511627779) != 0):
                self.state = 3455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 3454
                    self.match(HiveParser.KW_AS)


                self.state = 3457
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = HiveParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_tableName)
        try:
            self.state = 3465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3460
                self.identifier()
                self.state = 3461
                self.match(HiveParser.DOT)
                self.state = 3462
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3464
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = HiveParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 3467
                self.identifier()
                self.state = 3468
                self.match(HiveParser.DOT)


            self.state = 3472
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQuerySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_subQuerySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubQuerySource" ):
                listener.enterSubQuerySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubQuerySource" ):
                listener.exitSubQuerySource(self)




    def subQuerySource(self):

        localctx = HiveParser.SubQuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_subQuerySource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3474
            self.match(HiveParser.LPAREN)
            self.state = 3475
            self.queryStatementExpression()
            self.state = 3476
            self.match(HiveParser.RPAREN)
            self.state = 3478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 3477
                self.match(HiveParser.KW_AS)


            self.state = 3480
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitioningSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionByClause(self):
            return self.getTypedRuleContext(HiveParser.PartitionByClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitioningSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningSpec" ):
                listener.enterPartitioningSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningSpec" ):
                listener.exitPartitioningSpec(self)




    def partitioningSpec(self):

        localctx = HiveParser.PartitioningSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_partitioningSpec)
        self._la = 0 # Token type
        try:
            self.state = 3493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3482
                self.partitionByClause()
                self.state = 3484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 3483
                    self.orderByClause()


                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3486
                self.orderByClause()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3487
                self.distributeByClause()
                self.state = 3489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 3488
                    self.sortByClause()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3491
                self.sortByClause()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3492
                self.clusterByClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTableFunctionSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionTableFunctionSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTableFunctionSource" ):
                listener.enterPartitionTableFunctionSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTableFunctionSource" ):
                listener.exitPartitionTableFunctionSource(self)




    def partitionTableFunctionSource(self):

        localctx = HiveParser.PartitionTableFunctionSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_partitionTableFunctionSource)
        try:
            self.state = 3498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3495
                self.subQuerySource()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3496
                self.tableSource()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3497
                self.partitionedTableFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedTableFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def partitionTableFunctionSource(self):
            return self.getTypedRuleContext(HiveParser.PartitionTableFunctionSourceContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def partitioningSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitioningSpecContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Identifier)
            else:
                return self.getToken(HiveParser.Identifier, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionedTableFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionedTableFunction" ):
                listener.enterPartitionedTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionedTableFunction" ):
                listener.exitPartitionedTableFunction(self)




    def partitionedTableFunction(self):

        localctx = HiveParser.PartitionedTableFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_partitionedTableFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3500
            self.identifier()
            self.state = 3501
            self.match(HiveParser.LPAREN)
            self.state = 3502
            self.match(HiveParser.KW_ON)
            self.state = 3503
            self.partitionTableFunctionSource()
            self.state = 3505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15762633055600640) != 0):
                self.state = 3504
                self.partitioningSpec()


            self.state = 3522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==368:
                self.state = 3507
                self.match(HiveParser.Identifier)
                self.state = 3508
                self.match(HiveParser.LPAREN)
                self.state = 3509
                self.expression(0)
                self.state = 3510
                self.match(HiveParser.RPAREN)
                self.state = 3519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 3511
                    self.match(HiveParser.COMMA)
                    self.state = 3512
                    self.match(HiveParser.Identifier)
                    self.state = 3513
                    self.match(HiveParser.LPAREN)
                    self.state = 3514
                    self.expression(0)
                    self.state = 3515
                    self.match(HiveParser.RPAREN)
                    self.state = 3521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3524
            self.match(HiveParser.RPAREN)
            self.state = 3526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.state = 3525
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHERE(self):
            return self.getToken(HiveParser.KW_WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(HiveParser.SearchConditionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = HiveParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3528
            self.match(HiveParser.KW_WHERE)
            self.state = 3529
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_searchCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchCondition" ):
                listener.enterSearchCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchCondition" ):
                listener.exitSearchCondition(self)




    def searchCondition(self):

        localctx = HiveParser.SearchConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_searchCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3531
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUES(self):
            return self.getToken(HiveParser.KW_VALUES, 0)

        def valuesTableConstructor(self):
            return self.getTypedRuleContext(HiveParser.ValuesTableConstructorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valuesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesClause" ):
                listener.enterValuesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesClause" ):
                listener.exitValuesClause(self)




    def valuesClause(self):

        localctx = HiveParser.ValuesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_valuesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3533
            self.match(HiveParser.KW_VALUES)
            self.state = 3534
            self.valuesTableConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesTableConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueRowConstructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ValueRowConstructorContext)
            else:
                return self.getTypedRuleContext(HiveParser.ValueRowConstructorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_valuesTableConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesTableConstructor" ):
                listener.enterValuesTableConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesTableConstructor" ):
                listener.exitValuesTableConstructor(self)




    def valuesTableConstructor(self):

        localctx = HiveParser.ValuesTableConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_valuesTableConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3536
            self.valueRowConstructor()
            self.state = 3541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3537
                self.match(HiveParser.COMMA)
                self.state = 3538
                self.valueRowConstructor()
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueRowConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valueRowConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueRowConstructor" ):
                listener.enterValueRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueRowConstructor" ):
                listener.exitValueRowConstructor(self)




    def valueRowConstructor(self):

        localctx = HiveParser.ValueRowConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_valueRowConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3544
            self.expressionsInParenthesis()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualTableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_virtualTableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualTableSource" ):
                listener.enterVirtualTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualTableSource" ):
                listener.exitVirtualTableSource(self)




    def virtualTableSource(self):

        localctx = HiveParser.VirtualTableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_virtualTableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3546
            self.match(HiveParser.KW_TABLE)
            self.state = 3547
            self.match(HiveParser.LPAREN)
            self.state = 3548
            self.valuesClause()
            self.state = 3549
            self.match(HiveParser.RPAREN)
            self.state = 3551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 3550
                self.match(HiveParser.KW_AS)


            self.state = 3553
            self.tableAlias()
            self.state = 3563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==336:
                self.state = 3554
                self.match(HiveParser.LPAREN)
                self.state = 3555
                self.identifier()
                self.state = 3560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 3556
                    self.match(HiveParser.COMMA)
                    self.state = 3557
                    self.identifier()
                    self.state = 3562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3565
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def groupby_expression(self):
            return self.getTypedRuleContext(HiveParser.Groupby_expressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = HiveParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3567
            self.match(HiveParser.KW_GROUP)
            self.state = 3568
            self.match(HiveParser.KW_BY)
            self.state = 3569
            self.groupby_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollupStandard(self):
            return self.getTypedRuleContext(HiveParser.RollupStandardContext,0)


        def rollupOldSyntax(self):
            return self.getTypedRuleContext(HiveParser.RollupOldSyntaxContext,0)


        def groupByEmpty(self):
            return self.getTypedRuleContext(HiveParser.GroupByEmptyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupby_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_expression" ):
                listener.enterGroupby_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_expression" ):
                listener.exitGroupby_expression(self)




    def groupby_expression(self):

        localctx = HiveParser.Groupby_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_groupby_expression)
        try:
            self.state = 3574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3571
                self.rollupStandard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3572
                self.rollupOldSyntax()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3573
                self.groupByEmpty()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_groupByEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByEmpty" ):
                listener.enterGroupByEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByEmpty" ):
                listener.exitGroupByEmpty(self)




    def groupByEmpty(self):

        localctx = HiveParser.GroupByEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_groupByEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3576
            self.match(HiveParser.LPAREN)
            self.state = 3577
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupStandardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ROLLUP(self):
            return self.getToken(HiveParser.KW_ROLLUP, 0)

        def KW_CUBE(self):
            return self.getToken(HiveParser.KW_CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rollupStandard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupStandard" ):
                listener.enterRollupStandard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupStandard" ):
                listener.exitRollupStandard(self)




    def rollupStandard(self):

        localctx = HiveParser.RollupStandardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_rollupStandard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            _la = self._input.LA(1)
            if not(_la==228 or _la==229):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3580
            self.match(HiveParser.LPAREN)
            self.state = 3581
            self.expression(0)
            self.state = 3586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3582
                self.match(HiveParser.COMMA)
                self.state = 3583
                self.expression(0)
                self.state = 3588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3589
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupOldSyntaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ROLLUP(self):
            return self.getToken(HiveParser.KW_ROLLUP, 0)

        def KW_CUBE(self):
            return self.getToken(HiveParser.KW_CUBE, 0)

        def KW_GROUPING(self):
            return self.getToken(HiveParser.KW_GROUPING, 0)

        def KW_SETS(self):
            return self.getToken(HiveParser.KW_SETS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def groupingSetExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.GroupingSetExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.GroupingSetExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rollupOldSyntax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollupOldSyntax" ):
                listener.enterRollupOldSyntax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollupOldSyntax" ):
                listener.exitRollupOldSyntax(self)




    def rollupOldSyntax(self):

        localctx = HiveParser.RollupOldSyntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_rollupOldSyntax)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.expressionsNotInParenthesis()
            self.state = 3596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3592
                self.match(HiveParser.KW_WITH)
                self.state = 3593
                self.match(HiveParser.KW_ROLLUP)

            elif la_ == 2:
                self.state = 3594
                self.match(HiveParser.KW_WITH)
                self.state = 3595
                self.match(HiveParser.KW_CUBE)


            self.state = 3611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==242:
                self.state = 3598
                self.match(HiveParser.KW_GROUPING)
                self.state = 3599
                self.match(HiveParser.KW_SETS)
                self.state = 3600
                self.match(HiveParser.LPAREN)
                self.state = 3601
                self.groupingSetExpression()
                self.state = 3606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==334:
                    self.state = 3602
                    self.match(HiveParser.COMMA)
                    self.state = 3603
                    self.groupingSetExpression()
                    self.state = 3608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3609
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingSetExpressionMultiple(self):
            return self.getTypedRuleContext(HiveParser.GroupingSetExpressionMultipleContext,0)


        def groupingExpressionSingle(self):
            return self.getTypedRuleContext(HiveParser.GroupingExpressionSingleContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupingSetExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSetExpression" ):
                listener.enterGroupingSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSetExpression" ):
                listener.exitGroupingSetExpression(self)




    def groupingSetExpression(self):

        localctx = HiveParser.GroupingSetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_groupingSetExpression)
        try:
            self.state = 3615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3613
                self.groupingSetExpressionMultiple()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3614
                self.groupingExpressionSingle()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetExpressionMultipleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_groupingSetExpressionMultiple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSetExpressionMultiple" ):
                listener.enterGroupingSetExpressionMultiple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSetExpressionMultiple" ):
                listener.exitGroupingSetExpressionMultiple(self)




    def groupingSetExpressionMultiple(self):

        localctx = HiveParser.GroupingSetExpressionMultipleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_groupingSetExpressionMultiple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3617
            self.match(HiveParser.LPAREN)
            self.state = 3619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8879127934246386822) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -14365894904623) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -439611394830142863) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -227941784928606533) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -18158059782249) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 802679458660863) != 0):
                self.state = 3618
                self.expression(0)


            self.state = 3625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3621
                self.match(HiveParser.COMMA)
                self.state = 3622
                self.expression(0)
                self.state = 3627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3628
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionSingleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupingExpressionSingle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingExpressionSingle" ):
                listener.enterGroupingExpressionSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingExpressionSingle" ):
                listener.exitGroupingExpressionSingle(self)




    def groupingExpressionSingle(self):

        localctx = HiveParser.GroupingExpressionSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_groupingExpressionSingle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3630
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAVING(self):
            return self.getToken(HiveParser.KW_HAVING, 0)

        def havingCondition(self):
            return self.getTypedRuleContext(HiveParser.HavingConditionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = HiveParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3632
            self.match(HiveParser.KW_HAVING)
            self.state = 3633
            self.havingCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_havingCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingCondition" ):
                listener.enterHavingCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingCondition" ):
                listener.exitHavingCondition(self)




    def havingCondition(self):

        localctx = HiveParser.HavingConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_havingCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3635
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_expressionsInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsInParenthesis" ):
                listener.enterExpressionsInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsInParenthesis" ):
                listener.exitExpressionsInParenthesis(self)




    def expressionsInParenthesis(self):

        localctx = HiveParser.ExpressionsInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_expressionsInParenthesis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3637
            self.match(HiveParser.LPAREN)
            self.state = 3638
            self.expressionsNotInParenthesis()
            self.state = 3639
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsNotInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def expressionPart(self):
            return self.getTypedRuleContext(HiveParser.ExpressionPartContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionsNotInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsNotInParenthesis" ):
                listener.enterExpressionsNotInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsNotInParenthesis" ):
                listener.exitExpressionsNotInParenthesis(self)




    def expressionsNotInParenthesis(self):

        localctx = HiveParser.ExpressionsNotInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_expressionsNotInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3641
            self.expression(0)
            self.state = 3643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==334:
                self.state = 3642
                self.expressionPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionPart" ):
                listener.enterExpressionPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionPart" ):
                listener.exitExpressionPart(self)




    def expressionPart(self):

        localctx = HiveParser.ExpressionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_expressionPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3647 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3645
                self.match(HiveParser.COMMA)
                self.state = 3646
                self.expression(0)
                self.state = 3649 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==334):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = HiveParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_expressions)
        try:
            self.state = 3653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3651
                self.expressionsInParenthesis()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3652
                self.expressionsNotInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrderInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRefOrderInParenthesis" ):
                listener.enterColumnRefOrderInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRefOrderInParenthesis" ):
                listener.exitColumnRefOrderInParenthesis(self)




    def columnRefOrderInParenthesis(self):

        localctx = HiveParser.ColumnRefOrderInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_columnRefOrderInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self.match(HiveParser.LPAREN)
            self.state = 3656
            self.columnRefOrder()
            self.state = 3661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3657
                self.match(HiveParser.COMMA)
                self.state = 3658
                self.columnRefOrder()
                self.state = 3663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3664
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderNotInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrderNotInParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRefOrderNotInParenthesis" ):
                listener.enterColumnRefOrderNotInParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRefOrderNotInParenthesis" ):
                listener.exitColumnRefOrderNotInParenthesis(self)




    def columnRefOrderNotInParenthesis(self):

        localctx = HiveParser.ColumnRefOrderNotInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_columnRefOrderNotInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3666
            self.columnRefOrder()
            self.state = 3671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3667
                self.match(HiveParser.COMMA)
                self.state = 3668
                self.columnRefOrder()
                self.state = 3673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ORDER(self):
            return self.getToken(HiveParser.KW_ORDER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = HiveParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3674
            self.match(HiveParser.KW_ORDER)
            self.state = 3675
            self.match(HiveParser.KW_BY)
            self.state = 3676
            self.columnRefOrder()
            self.state = 3681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 3677
                self.match(HiveParser.COMMA)
                self.state = 3678
                self.columnRefOrder()
                self.state = 3683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CLUSTER(self):
            return self.getToken(HiveParser.KW_CLUSTER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_clusterByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterByClause" ):
                listener.enterClusterByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterByClause" ):
                listener.exitClusterByClause(self)




    def clusterByClause(self):

        localctx = HiveParser.ClusterByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_clusterByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3684
            self.match(HiveParser.KW_CLUSTER)
            self.state = 3685
            self.match(HiveParser.KW_BY)
            self.state = 3686
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByClause" ):
                listener.enterPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByClause" ):
                listener.exitPartitionByClause(self)




    def partitionByClause(self):

        localctx = HiveParser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_partitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            self.match(HiveParser.KW_PARTITION)
            self.state = 3689
            self.match(HiveParser.KW_BY)
            self.state = 3690
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistributeByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISTRIBUTE(self):
            return self.getToken(HiveParser.KW_DISTRIBUTE, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_distributeByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistributeByClause" ):
                listener.enterDistributeByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistributeByClause" ):
                listener.exitDistributeByClause(self)




    def distributeByClause(self):

        localctx = HiveParser.DistributeByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_distributeByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3692
            self.match(HiveParser.KW_DISTRIBUTE)
            self.state = 3693
            self.match(HiveParser.KW_BY)
            self.state = 3694
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SORT(self):
            return self.getToken(HiveParser.KW_SORT, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def columnRefOrderInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ColumnRefOrderInParenthesisContext,0)


        def columnRefOrderNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ColumnRefOrderNotInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sortByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortByClause" ):
                listener.enterSortByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortByClause" ):
                listener.exitSortByClause(self)




    def sortByClause(self):

        localctx = HiveParser.SortByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_sortByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3696
            self.match(HiveParser.KW_SORT)
            self.state = 3697
            self.match(HiveParser.KW_BY)
            self.state = 3700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.state = 3698
                self.columnRefOrderInParenthesis()
                pass

            elif la_ == 2:
                self.state = 3699
                self.columnRefOrderNotInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionName(self):
            return self.getTypedRuleContext(HiveParser.FunctionNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def KW_OVER(self):
            return self.getToken(HiveParser.KW_OVER, 0)

        def window_specification(self):
            return self.getTypedRuleContext(HiveParser.Window_specificationContext,0)


        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_function_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_" ):
                listener.enterFunction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_" ):
                listener.exitFunction_(self)




    def function_(self):

        localctx = HiveParser.Function_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_function_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3702
            self.functionName()
            self.state = 3703
            self.match(HiveParser.LPAREN)
            self.state = 3718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3704
                self.match(HiveParser.STAR)
                pass

            elif la_ == 2:
                self.state = 3706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==24:
                    self.state = 3705
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==24):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8879127934246386822) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -14365894904623) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -439611394830142863) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -227941784928606533) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -18158059782249) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 802681606144511) != 0):
                    self.state = 3708
                    self.selectExpression()
                    self.state = 3713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==334:
                        self.state = 3709
                        self.match(HiveParser.COMMA)
                        self.state = 3710
                        self.selectExpression()
                        self.state = 3715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass


            self.state = 3720
            self.match(HiveParser.RPAREN)
            self.state = 3723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3721
                self.match(HiveParser.KW_OVER)
                self.state = 3722
                self.window_specification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def sql11ReservedKeywordsUsedAsFunctionName(self):
            return self.getTypedRuleContext(HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = HiveParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_functionName)
        try:
            self.state = 3727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3725
                self.functionIdentifier()
                pass
            elif token in [10, 77, 79, 80, 81, 82, 83, 85, 87, 96, 98, 206, 237, 238, 242]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3726
                self.sql11ReservedKeywordsUsedAsFunctionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAST(self):
            return self.getToken(HiveParser.KW_CAST, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = HiveParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_castExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3729
            self.match(HiveParser.KW_CAST)
            self.state = 3730
            self.match(HiveParser.LPAREN)
            self.state = 3731
            self.expression(0)
            self.state = 3732
            self.match(HiveParser.KW_AS)
            self.state = 3733
            self.primitiveType()
            self.state = 3734
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def KW_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_WHEN)
            else:
                return self.getToken(HiveParser.KW_WHEN, i)

        def KW_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_THEN)
            else:
                return self.getToken(HiveParser.KW_THEN, i)

        def KW_ELSE(self):
            return self.getToken(HiveParser.KW_ELSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_caseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpression" ):
                listener.enterCaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpression" ):
                listener.exitCaseExpression(self)




    def caseExpression(self):

        localctx = HiveParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_caseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3736
            self.match(HiveParser.KW_CASE)
            self.state = 3737
            self.expression(0)
            self.state = 3743 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3738
                self.match(HiveParser.KW_WHEN)
                self.state = 3739
                self.expression(0)
                self.state = 3740
                self.match(HiveParser.KW_THEN)
                self.state = 3741
                self.expression(0)
                self.state = 3745 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==163):
                    break

            self.state = 3749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==165:
                self.state = 3747
                self.match(HiveParser.KW_ELSE)
                self.state = 3748
                self.expression(0)


            self.state = 3751
            self.match(HiveParser.KW_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def KW_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_WHEN)
            else:
                return self.getToken(HiveParser.KW_WHEN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_THEN)
            else:
                return self.getToken(HiveParser.KW_THEN, i)

        def KW_ELSE(self):
            return self.getToken(HiveParser.KW_ELSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = HiveParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3753
            self.match(HiveParser.KW_CASE)
            self.state = 3759 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3754
                self.match(HiveParser.KW_WHEN)
                self.state = 3755
                self.expression(0)
                self.state = 3756
                self.match(HiveParser.KW_THEN)
                self.state = 3757
                self.expression(0)
                self.state = 3761 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==163):
                    break

            self.state = 3765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==165:
                self.state = 3763
                self.match(HiveParser.KW_ELSE)
                self.state = 3764
                self.expression(0)


            self.state = 3767
            self.match(HiveParser.KW_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FLOOR(self):
            return self.getToken(HiveParser.KW_FLOOR, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def floorDateQualifiers(self):
            return self.getTypedRuleContext(HiveParser.FloorDateQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_floorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloorExpression" ):
                listener.enterFloorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloorExpression" ):
                listener.exitFloorExpression(self)




    def floorExpression(self):

        localctx = HiveParser.FloorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_floorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3769
            self.match(HiveParser.KW_FLOOR)
            self.state = 3770
            self.match(HiveParser.LPAREN)
            self.state = 3771
            self.expression(0)
            self.state = 3774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 3772
                self.match(HiveParser.KW_TO)
                self.state = 3773
                self.floorDateQualifiers()


            self.state = 3776
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorDateQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_floorDateQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloorDateQualifiers" ):
                listener.enterFloorDateQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloorDateQualifiers" ):
                listener.exitFloorDateQualifiers(self)




    def floorDateQualifiers(self):

        localctx = HiveParser.FloorDateQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_floorDateQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3778
            _la = self._input.LA(1)
            if not(((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & 957) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTRACT(self):
            return self.getToken(HiveParser.KW_EXTRACT, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def timeQualifiers(self):
            return self.getTypedRuleContext(HiveParser.TimeQualifiersContext,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_extractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractExpression" ):
                listener.enterExtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractExpression" ):
                listener.exitExtractExpression(self)




    def extractExpression(self):

        localctx = HiveParser.ExtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_extractExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3780
            self.match(HiveParser.KW_EXTRACT)
            self.state = 3781
            self.match(HiveParser.LPAREN)
            self.state = 3782
            self.timeQualifiers()
            self.state = 3783
            self.match(HiveParser.KW_FROM)
            self.state = 3784
            self.expression(0)
            self.state = 3785
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_DOW(self):
            return self.getToken(HiveParser.KW_DOW, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timeQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeQualifiers" ):
                listener.enterTimeQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeQualifiers" ):
                listener.exitTimeQualifiers(self)




    def timeQualifiers(self):

        localctx = HiveParser.TimeQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_timeQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3787
            _la = self._input.LA(1)
            if not(((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & 1021) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalLiteral(self):
            return self.getTypedRuleContext(HiveParser.IntervalLiteralContext,0)


        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def dateLiteral(self):
            return self.getTypedRuleContext(HiveParser.DateLiteralContext,0)


        def timestampLiteral(self):
            return self.getTypedRuleContext(HiveParser.TimestampLiteralContext,0)


        def timestampLocalTZLiteral(self):
            return self.getTypedRuleContext(HiveParser.TimestampLocalTZLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def stringLiteralSequence(self):
            return self.getTypedRuleContext(HiveParser.StringLiteralSequenceContext,0)


        def IntegralLiteral(self):
            return self.getToken(HiveParser.IntegralLiteral, 0)

        def NumberLiteral(self):
            return self.getToken(HiveParser.NumberLiteral, 0)

        def charSetStringLiteral(self):
            return self.getTypedRuleContext(HiveParser.CharSetStringLiteralContext,0)


        def booleanValue(self):
            return self.getTypedRuleContext(HiveParser.BooleanValueContext,0)


        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = HiveParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_constant)
        try:
            self.state = 3801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3789
                self.intervalLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3790
                self.match(HiveParser.Number)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3791
                self.dateLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3792
                self.timestampLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3793
                self.timestampLocalTZLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3794
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3795
                self.stringLiteralSequence()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3796
                self.match(HiveParser.IntegralLiteral)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3797
                self.match(HiveParser.NumberLiteral)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3798
                self.charSetStringLiteral()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3799
                self.booleanValue()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3800
                self.match(HiveParser.KW_NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_stringLiteralSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralSequence" ):
                listener.enterStringLiteralSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralSequence" ):
                listener.exitStringLiteralSequence(self)




    def stringLiteralSequence(self):

        localctx = HiveParser.StringLiteralSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_stringLiteralSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3803
            self.match(HiveParser.StringLiteral)
            self.state = 3805 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3804
                    self.match(HiveParser.StringLiteral)

                else:
                    raise NoViableAltException(self)
                self.state = 3807 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,468,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharSetStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CharSetName(self):
            return self.getToken(HiveParser.CharSetName, 0)

        def CharSetLiteral(self):
            return self.getToken(HiveParser.CharSetLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_charSetStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharSetStringLiteral" ):
                listener.enterCharSetStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharSetStringLiteral" ):
                listener.exitCharSetStringLiteral(self)




    def charSetStringLiteral(self):

        localctx = HiveParser.CharSetStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_charSetStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3809
            self.match(HiveParser.CharSetName)
            self.state = 3810
            self.match(HiveParser.CharSetLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_CURRENT_DATE(self):
            return self.getToken(HiveParser.KW_CURRENT_DATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dateLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)




    def dateLiteral(self):

        localctx = HiveParser.DateLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_dateLiteral)
        try:
            self.state = 3815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3812
                self.match(HiveParser.KW_DATE)
                self.state = 3813
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3814
                self.match(HiveParser.KW_CURRENT_DATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_CURRENT_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timestampLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampLiteral" ):
                listener.enterTimestampLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampLiteral" ):
                listener.exitTimestampLiteral(self)




    def timestampLiteral(self):

        localctx = HiveParser.TimestampLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_timestampLiteral)
        try:
            self.state = 3820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3817
                self.match(HiveParser.KW_TIMESTAMP)
                self.state = 3818
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3819
                self.match(HiveParser.KW_CURRENT_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampLocalTZLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMESTAMPLOCALTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timestampLocalTZLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampLocalTZLiteral" ):
                listener.enterTimestampLocalTZLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampLocalTZLiteral" ):
                listener.exitTimestampLocalTZLiteral(self)




    def timestampLocalTZLiteral(self):

        localctx = HiveParser.TimestampLocalTZLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_timestampLocalTZLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3822
            self.match(HiveParser.KW_TIMESTAMPLOCALTZ)
            self.state = 3823
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = HiveParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3825
            _la = self._input.LA(1)
            if not(_la==362 or _la==367):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self):
            return self.getTypedRuleContext(HiveParser.IntervalValueContext,0)


        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_intervalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)




    def intervalLiteral(self):

        localctx = HiveParser.IntervalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_intervalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3827
            self.intervalValue()
            self.state = 3828
            self.intervalQualifiers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(HiveParser.IntervalValueContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def KW_INTERVAL(self):
            return self.getToken(HiveParser.KW_INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_intervalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpression" ):
                listener.enterIntervalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpression" ):
                listener.exitIntervalExpression(self)




    def intervalExpression(self):

        localctx = HiveParser.IntervalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_intervalExpression)
        try:
            self.state = 3845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3830
                self.match(HiveParser.LPAREN)
                self.state = 3831
                self.intervalValue()
                self.state = 3832
                self.match(HiveParser.RPAREN)
                self.state = 3833
                self.intervalQualifiers()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3835
                self.match(HiveParser.KW_INTERVAL)
                self.state = 3836
                self.intervalValue()
                self.state = 3837
                self.intervalQualifiers()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3839
                self.match(HiveParser.KW_INTERVAL)
                self.state = 3840
                self.match(HiveParser.LPAREN)
                self.state = 3841
                self.expression(0)
                self.state = 3842
                self.match(HiveParser.RPAREN)
                self.state = 3843
                self.intervalQualifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_intervalQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalQualifiers" ):
                listener.enterIntervalQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalQualifiers" ):
                listener.exitIntervalQualifiers(self)




    def intervalQualifiers(self):

        localctx = HiveParser.IntervalQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_intervalQualifiers)
        try:
            self.state = 3859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3847
                self.match(HiveParser.KW_YEAR)
                self.state = 3848
                self.match(HiveParser.KW_TO)
                self.state = 3849
                self.match(HiveParser.KW_MONTH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3850
                self.match(HiveParser.KW_DAY)
                self.state = 3851
                self.match(HiveParser.KW_TO)
                self.state = 3852
                self.match(HiveParser.KW_SECOND)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3853
                self.match(HiveParser.KW_YEAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3854
                self.match(HiveParser.KW_MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3855
                self.match(HiveParser.KW_DAY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3856
                self.match(HiveParser.KW_HOUR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3857
                self.match(HiveParser.KW_MINUTE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3858
                self.match(HiveParser.KW_SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def intervalExpression(self):
            return self.getTypedRuleContext(HiveParser.IntervalExpressionContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(HiveParser.CastExpressionContext,0)


        def extractExpression(self):
            return self.getTypedRuleContext(HiveParser.ExtractExpressionContext,0)


        def floorExpression(self):
            return self.getTypedRuleContext(HiveParser.FloorExpressionContext,0)


        def caseExpression(self):
            return self.getTypedRuleContext(HiveParser.CaseExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(HiveParser.WhenExpressionContext,0)


        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def tableOrColumn(self):
            return self.getTypedRuleContext(HiveParser.TableOrColumnContext,0)


        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_atomExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpression" ):
                listener.enterAtomExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpression" ):
                listener.exitAtomExpression(self)




    def atomExpression(self):

        localctx = HiveParser.AtomExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_atomExpression)
        try:
            self.state = 3872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3861
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3862
                self.intervalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3863
                self.castExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3864
                self.extractExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3865
                self.floorExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3866
                self.caseExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3867
                self.whenExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3868
                self.subQueryExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3869
                self.function_()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3870
                self.tableOrColumn()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3871
                self.expressionsInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(HiveParser.TILDE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceUnaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceUnaryOperator" ):
                listener.enterPrecedenceUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceUnaryOperator" ):
                listener.exitPrecedenceUnaryOperator(self)




    def precedenceUnaryOperator(self):

        localctx = HiveParser.PrecedenceUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_precedenceUnaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3874
            _la = self._input.LA(1)
            if not(((((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & 67) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_isCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsCondition" ):
                listener.enterIsCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsCondition" ):
                listener.exitIsCondition(self)




    def isCondition(self):

        localctx = HiveParser.IsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_isCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 3876
                self.match(HiveParser.KW_NOT)


            self.state = 3884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 3879
                self.match(HiveParser.KW_NULL)
                pass
            elif token in [1]:
                self.state = 3880
                self.match(HiveParser.KW_TRUE)
                pass
            elif token in [2]:
                self.state = 3881
                self.match(HiveParser.KW_FALSE)
                pass
            elif token in [24]:
                self.state = 3882
                self.match(HiveParser.KW_DISTINCT)
                self.state = 3883
                self.match(HiveParser.KW_FROM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseXorOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITWISEXOR(self):
            return self.getToken(HiveParser.BITWISEXOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseXorOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceBitwiseXorOperator" ):
                listener.enterPrecedenceBitwiseXorOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceBitwiseXorOperator" ):
                listener.exitPrecedenceBitwiseXorOperator(self)




    def precedenceBitwiseXorOperator(self):

        localctx = HiveParser.PrecedenceBitwiseXorOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_precedenceBitwiseXorOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3886
            self.match(HiveParser.BITWISEXOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceStarOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(HiveParser.DIVIDE, 0)

        def MOD(self):
            return self.getToken(HiveParser.MOD, 0)

        def DIV(self):
            return self.getToken(HiveParser.DIV, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceStarOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceStarOperator" ):
                listener.enterPrecedenceStarOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceStarOperator" ):
                listener.exitPrecedenceStarOperator(self)




    def precedenceStarOperator(self):

        localctx = HiveParser.PrecedenceStarOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_precedenceStarOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3888
            _la = self._input.LA(1)
            if not(((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & 57) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedencePlusOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedencePlusOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedencePlusOperator" ):
                listener.enterPrecedencePlusOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedencePlusOperator" ):
                listener.exitPrecedencePlusOperator(self)




    def precedencePlusOperator(self):

        localctx = HiveParser.PrecedencePlusOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_precedencePlusOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3890
            _la = self._input.LA(1)
            if not(_la==350 or _la==351):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceConcatenateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCATENATE(self):
            return self.getToken(HiveParser.CONCATENATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceConcatenateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceConcatenateOperator" ):
                listener.enterPrecedenceConcatenateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceConcatenateOperator" ):
                listener.exitPrecedenceConcatenateOperator(self)




    def precedenceConcatenateOperator(self):

        localctx = HiveParser.PrecedenceConcatenateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_precedenceConcatenateOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3892
            self.match(HiveParser.CONCATENATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAmpersandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(HiveParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAmpersandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceAmpersandOperator" ):
                listener.enterPrecedenceAmpersandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceAmpersandOperator" ):
                listener.exitPrecedenceAmpersandOperator(self)




    def precedenceAmpersandOperator(self):

        localctx = HiveParser.PrecedenceAmpersandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_precedenceAmpersandOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3894
            self.match(HiveParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITWISEOR(self):
            return self.getToken(HiveParser.BITWISEOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseOrOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceBitwiseOrOperator" ):
                listener.enterPrecedenceBitwiseOrOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceBitwiseOrOperator" ):
                listener.exitPrecedenceBitwiseOrOperator(self)




    def precedenceBitwiseOrOperator(self):

        localctx = HiveParser.PrecedenceBitwiseOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_precedenceBitwiseOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3896
            self.match(HiveParser.BITWISEOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceRegexpOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_RLIKE(self):
            return self.getToken(HiveParser.KW_RLIKE, 0)

        def KW_REGEXP(self):
            return self.getToken(HiveParser.KW_REGEXP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceRegexpOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceRegexpOperator" ):
                listener.enterPrecedenceRegexpOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceRegexpOperator" ):
                listener.exitPrecedenceRegexpOperator(self)




    def precedenceRegexpOperator(self):

        localctx = HiveParser.PrecedenceRegexpOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_precedenceRegexpOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3898
            _la = self._input.LA(1)
            if not(_la==8 or _la==136 or _la==137):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def EQUAL_NS(self):
            return self.getToken(HiveParser.EQUAL_NS, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceComparisonOperator" ):
                listener.enterPrecedenceComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceComparisonOperator" ):
                listener.exitPrecedenceComparisonOperator(self)




    def precedenceComparisonOperator(self):

        localctx = HiveParser.PrecedenceComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_precedenceComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3900
            _la = self._input.LA(1)
            if not(((((_la - 342)) & ~0x3f) == 0 and ((1 << (_la - 342)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceNotOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceNotOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceNotOperator" ):
                listener.enterPrecedenceNotOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceNotOperator" ):
                listener.exitPrecedenceNotOperator(self)




    def precedenceNotOperator(self):

        localctx = HiveParser.PrecedenceNotOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_precedenceNotOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3902
            self.match(HiveParser.KW_NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceLogicOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceLogicOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceLogicOperator" ):
                listener.enterPrecedenceLogicOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceLogicOperator" ):
                listener.exitPrecedenceLogicOperator(self)




    def precedenceLogicOperator(self):

        localctx = HiveParser.PrecedenceLogicOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_precedenceLogicOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3904
            _la = self._input.LA(1)
            if not(_la==5 or _la==6):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def precedenceExpression(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceExpressionContext,0)


        def precedenceLogicOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceLogicOperatorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HiveParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 702
        self.enterRecursionRule(localctx, 702, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.state = 3907
                self.match(HiveParser.LPAREN)
                self.state = 3908
                self.expression(0)
                self.state = 3909
                self.match(HiveParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 3911
                self.precedenceExpression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,477,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 3914
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 3915
                    self.precedenceLogicOperator()
                    self.state = 3916
                    self.expression(4) 
                self.state = 3922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,477,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrecedenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomExpression(self):
            return self.getTypedRuleContext(HiveParser.AtomExpressionContext,0)


        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LSQUARE)
            else:
                return self.getToken(HiveParser.LSQUARE, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RSQUARE)
            else:
                return self.getToken(HiveParser.RSQUARE, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def precedenceUnaryOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceUnaryOperatorContext,0)


        def precedenceExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrecedenceExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrecedenceExpressionContext,i)


        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def precedenceNotOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceNotOperatorContext,0)


        def precedenceBitwiseXorOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseXorOperatorContext,0)


        def precedenceStarOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceStarOperatorContext,0)


        def precedencePlusOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedencePlusOperatorContext,0)


        def precedenceConcatenateOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceConcatenateOperatorContext,0)


        def precedenceAmpersandOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceAmpersandOperatorContext,0)


        def precedenceBitwiseOrOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrOperatorContext,0)


        def precedenceComparisonOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceComparisonOperatorContext,0)


        def precedenceRegexpOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceRegexpOperatorContext,0)


        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def isCondition(self):
            return self.getTypedRuleContext(HiveParser.IsConditionContext,0)


        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def KW_ANY(self):
            return self.getToken(HiveParser.KW_ANY, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def precedenceSimilarExpressionIn(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionInContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceExpression" ):
                listener.enterPrecedenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceExpression" ):
                listener.exitPrecedenceExpression(self)



    def precedenceExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HiveParser.PrecedenceExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 704
        self.enterRecursionRule(localctx, 704, self.RULE_precedenceExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 10, 12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 64, 68, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 93, 96, 97, 98, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 206, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 237, 238, 242, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 362, 364, 365, 367, 368, 370]:
                self.state = 3924
                self.atomExpression()
                self.state = 3933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3931
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [338]:
                            self.state = 3925
                            self.match(HiveParser.LSQUARE)
                            self.state = 3926
                            self.expression(0)
                            self.state = 3927
                            self.match(HiveParser.RSQUARE)
                            pass
                        elif token in [332]:
                            self.state = 3929
                            self.match(HiveParser.DOT)
                            self.state = 3930
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 3935
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

                pass
            elif token in [350, 351, 356]:
                self.state = 3936
                self.precedenceUnaryOperator()
                self.state = 3937
                self.precedenceExpression(15)
                pass
            elif token in [11]:
                self.state = 3939
                self.match(HiveParser.KW_EXISTS)
                self.state = 3940
                self.subQueryExpression()
                pass
            elif token in [7]:
                self.state = 3941
                self.precedenceNotOperator()
                self.state = 3942
                self.precedenceExpression(1)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 4008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,486,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4006
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                    if la_ == 1:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3946
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 3947
                        self.precedenceBitwiseXorOperator()
                        self.state = 3948
                        self.precedenceExpression(14)
                        pass

                    elif la_ == 2:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3950
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3951
                        self.precedenceStarOperator()
                        self.state = 3952
                        self.precedenceExpression(13)
                        pass

                    elif la_ == 3:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3954
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3955
                        self.precedencePlusOperator()
                        self.state = 3956
                        self.precedenceExpression(12)
                        pass

                    elif la_ == 4:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3958
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3959
                        self.precedenceConcatenateOperator()
                        self.state = 3960
                        self.precedenceExpression(11)
                        pass

                    elif la_ == 5:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3962
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 3963
                        self.precedenceAmpersandOperator()
                        self.state = 3964
                        self.precedenceExpression(10)
                        pass

                    elif la_ == 6:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3966
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3967
                        self.precedenceBitwiseOrOperator()
                        self.state = 3968
                        self.precedenceExpression(9)
                        pass

                    elif la_ == 7:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3970
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3971
                        self.precedenceComparisonOperator()
                        self.state = 3972
                        self.precedenceExpression(8)
                        pass

                    elif la_ == 8:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3974
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3976
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==7:
                            self.state = 3975
                            self.match(HiveParser.KW_NOT)


                        self.state = 3978
                        self.precedenceRegexpOperator()
                        self.state = 3979
                        self.precedenceExpression(7)
                        pass

                    elif la_ == 9:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3981
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3983
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==7:
                            self.state = 3982
                            self.match(HiveParser.KW_NOT)


                        self.state = 3985
                        self.match(HiveParser.KW_BETWEEN)
                        self.state = 3986
                        self.precedenceExpression(0)
                        self.state = 3987
                        self.match(HiveParser.KW_AND)
                        self.state = 3988
                        self.precedenceExpression(4)
                        pass

                    elif la_ == 10:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3990
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 3991
                        self.match(HiveParser.KW_IS)
                        self.state = 3992
                        self.isCondition()
                        pass

                    elif la_ == 11:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 3993
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==7:
                            self.state = 3994
                            self.match(HiveParser.KW_NOT)


                        self.state = 3997
                        self.match(HiveParser.KW_LIKE)
                        self.state = 3998
                        _la = self._input.LA(1)
                        if not(_la==3 or _la==9):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3999
                        self.expressionsInParenthesis()
                        pass

                    elif la_ == 12:
                        localctx = HiveParser.PrecedenceExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_precedenceExpression)
                        self.state = 4000
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 4002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==7:
                            self.state = 4001
                            self.match(HiveParser.KW_NOT)


                        self.state = 4004
                        self.match(HiveParser.KW_IN)
                        self.state = 4005
                        self.precedenceSimilarExpressionIn()
                        pass

             
                self.state = 4010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,486,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrecedenceSimilarExpressionInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedenceSimilarExpressionIn" ):
                listener.enterPrecedenceSimilarExpressionIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedenceSimilarExpressionIn" ):
                listener.exitPrecedenceSimilarExpressionIn(self)




    def precedenceSimilarExpressionIn(self):

        localctx = HiveParser.PrecedenceSimilarExpressionInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_precedenceSimilarExpressionIn)
        try:
            self.state = 4013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4011
                self.subQueryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4012
                self.expressionsInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_subQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubQueryExpression" ):
                listener.enterSubQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubQueryExpression" ):
                listener.exitSubQueryExpression(self)




    def subQueryExpression(self):

        localctx = HiveParser.SubQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_subQueryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4015
            self.match(HiveParser.LPAREN)
            self.state = 4016
            self.selectStatement()
            self.state = 4017
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = HiveParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4019
            _la = self._input.LA(1)
            if not(_la==1 or _la==2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueTokContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_booleanValueTok

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValueTok" ):
                listener.enterBooleanValueTok(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValueTok" ):
                listener.exitBooleanValueTok(self)




    def booleanValueTok(self):

        localctx = HiveParser.BooleanValueTokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_booleanValueTok)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4021
            _la = self._input.LA(1)
            if not(_la==1 or _la==2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOrPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableOrPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOrPartition" ):
                listener.enterTableOrPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOrPartition" ):
                listener.exitTableOrPartition(self)




    def tableOrPartition(self):

        localctx = HiveParser.TableOrPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_tableOrPartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4023
            self.tableName()
            self.state = 4025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 4024
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionValContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = HiveParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4027
            self.match(HiveParser.KW_PARTITION)
            self.state = 4028
            self.match(HiveParser.LPAREN)
            self.state = 4029
            self.partitionVal()
            self.state = 4034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 4030
                self.match(HiveParser.COMMA)
                self.state = 4031
                self.partitionVal()
                self.state = 4036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4037
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = HiveParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4039
            self.identifier()
            self.state = 4042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==342:
                self.state = 4040
                self.match(HiveParser.EQUAL)
                self.state = 4041
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def dropPartitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.DropPartitionValContext)
            else:
                return self.getTypedRuleContext(HiveParser.DropPartitionValContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_dropPartitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPartitionSpec" ):
                listener.enterDropPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPartitionSpec" ):
                listener.exitDropPartitionSpec(self)




    def dropPartitionSpec(self):

        localctx = HiveParser.DropPartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_dropPartitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4044
            self.match(HiveParser.KW_PARTITION)
            self.state = 4045
            self.match(HiveParser.LPAREN)
            self.state = 4046
            self.dropPartitionVal()
            self.state = 4051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==334:
                self.state = 4047
                self.match(HiveParser.COMMA)
                self.state = 4048
                self.dropPartitionVal()
                self.state = 4053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4054
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def dropPartitionOperator(self):
            return self.getTypedRuleContext(HiveParser.DropPartitionOperatorContext,0)


        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropPartitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPartitionVal" ):
                listener.enterDropPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPartitionVal" ):
                listener.exitDropPartitionVal(self)




    def dropPartitionVal(self):

        localctx = HiveParser.DropPartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_dropPartitionVal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4056
            self.identifier()
            self.state = 4057
            self.dropPartitionOperator()
            self.state = 4058
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dropPartitionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPartitionOperator" ):
                listener.enterDropPartitionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPartitionOperator" ):
                listener.exitDropPartitionOperator(self)




    def dropPartitionOperator(self):

        localctx = HiveParser.DropPartitionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_dropPartitionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4060
            _la = self._input.LA(1)
            if not(((((_la - 342)) & ~0x3f) == 0 and ((1 << (_la - 342)) & 125) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysFuncNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_FLOOR(self):
            return self.getToken(HiveParser.KW_FLOOR, 0)

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def EQUAL_NS(self):
            return self.getToken(HiveParser.EQUAL_NS, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def DIVIDE(self):
            return self.getToken(HiveParser.DIVIDE, 0)

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def MOD(self):
            return self.getToken(HiveParser.MOD, 0)

        def DIV(self):
            return self.getToken(HiveParser.DIV, 0)

        def AMPERSAND(self):
            return self.getToken(HiveParser.AMPERSAND, 0)

        def TILDE(self):
            return self.getToken(HiveParser.TILDE, 0)

        def BITWISEOR(self):
            return self.getToken(HiveParser.BITWISEOR, 0)

        def BITWISEXOR(self):
            return self.getToken(HiveParser.BITWISEXOR, 0)

        def KW_RLIKE(self):
            return self.getToken(HiveParser.KW_RLIKE, 0)

        def KW_REGEXP(self):
            return self.getToken(HiveParser.KW_REGEXP, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_sysFuncNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysFuncNames" ):
                listener.enterSysFuncNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysFuncNames" ):
                listener.exitSysFuncNames(self)




    def sysFuncNames(self):

        localctx = HiveParser.SysFuncNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_sysFuncNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4062
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1504) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 1729382256918200447) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 21990232817667) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & 864686730408624129) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescFuncNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sysFuncNames(self):
            return self.getTypedRuleContext(HiveParser.SysFuncNamesContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_descFuncNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescFuncNames" ):
                listener.enterDescFuncNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescFuncNames" ):
                listener.exitDescFuncNames(self)




    def descFuncNames(self):

        localctx = HiveParser.DescFuncNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_descFuncNames)
        try:
            self.state = 4067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4064
                self.sysFuncNames()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4065
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4066
                self.functionIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def nonReserved(self):
            return self.getTypedRuleContext(HiveParser.NonReservedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = HiveParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_identifier)
        try:
            self.state = 4071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [368]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4069
                self.match(HiveParser.Identifier)
                pass
            elif token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4070
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = HiveParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_functionIdentifier)
        try:
            self.state = 4078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4073
                self.identifier()
                self.state = 4074
                self.match(HiveParser.DOT)
                self.state = 4075
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4077
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def QuotedIdentifier(self):
            return self.getToken(HiveParser.QuotedIdentifier, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_principalIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipalIdentifier" ):
                listener.enterPrincipalIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipalIdentifier" ):
                listener.exitPrincipalIdentifier(self)




    def principalIdentifier(self):

        localctx = HiveParser.PrincipalIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_principalIdentifier)
        try:
            self.state = 4082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14, 15, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 56, 57, 59, 60, 61, 62, 68, 70, 71, 74, 76, 78, 86, 90, 93, 97, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 174, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 368]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4080
                self.identifier()
                pass
            elif token in [369]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4081
                self.match(HiveParser.QuotedIdentifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_AFTER(self):
            return self.getToken(HiveParser.KW_AFTER, 0)

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_BEFORE(self):
            return self.getToken(HiveParser.KW_BEFORE, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def KW_CASCADE(self):
            return self.getToken(HiveParser.KW_CASCADE, 0)

        def KW_CHANGE(self):
            return self.getToken(HiveParser.KW_CHANGE, 0)

        def KW_CHECK(self):
            return self.getToken(HiveParser.KW_CHECK, 0)

        def KW_CLUSTER(self):
            return self.getToken(HiveParser.KW_CLUSTER, 0)

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_CLUSTERSTATUS(self):
            return self.getToken(HiveParser.KW_CLUSTERSTATUS, 0)

        def KW_COLLECTION(self):
            return self.getToken(HiveParser.KW_COLLECTION, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def KW_COMPACT(self):
            return self.getToken(HiveParser.KW_COMPACT, 0)

        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def KW_COMPUTE(self):
            return self.getToken(HiveParser.KW_COMPUTE, 0)

        def KW_CONCATENATE(self):
            return self.getToken(HiveParser.KW_CONCATENATE, 0)

        def KW_CONTINUE(self):
            return self.getToken(HiveParser.KW_CONTINUE, 0)

        def KW_DATA(self):
            return self.getToken(HiveParser.KW_DATA, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_DATABASES(self):
            return self.getToken(HiveParser.KW_DATABASES, 0)

        def KW_DATETIME(self):
            return self.getToken(HiveParser.KW_DATETIME, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def KW_DEFERRED(self):
            return self.getToken(HiveParser.KW_DEFERRED, 0)

        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def KW_DELIMITED(self):
            return self.getToken(HiveParser.KW_DELIMITED, 0)

        def KW_DEPENDENCY(self):
            return self.getToken(HiveParser.KW_DEPENDENCY, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def KW_DIRECTORIES(self):
            return self.getToken(HiveParser.KW_DIRECTORIES, 0)

        def KW_DIRECTORY(self):
            return self.getToken(HiveParser.KW_DIRECTORY, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_DISTRIBUTE(self):
            return self.getToken(HiveParser.KW_DISTRIBUTE, 0)

        def KW_DOW(self):
            return self.getToken(HiveParser.KW_DOW, 0)

        def KW_ELEM_TYPE(self):
            return self.getToken(HiveParser.KW_ELEM_TYPE, 0)

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_ENFORCED(self):
            return self.getToken(HiveParser.KW_ENFORCED, 0)

        def KW_ESCAPED(self):
            return self.getToken(HiveParser.KW_ESCAPED, 0)

        def KW_EXCLUSIVE(self):
            return self.getToken(HiveParser.KW_EXCLUSIVE, 0)

        def KW_EXPLAIN(self):
            return self.getToken(HiveParser.KW_EXPLAIN, 0)

        def KW_EXPORT(self):
            return self.getToken(HiveParser.KW_EXPORT, 0)

        def KW_FIELDS(self):
            return self.getToken(HiveParser.KW_FIELDS, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def KW_FILEFORMAT(self):
            return self.getToken(HiveParser.KW_FILEFORMAT, 0)

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_IDXPROPERTIES(self):
            return self.getToken(HiveParser.KW_IDXPROPERTIES, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def KW_INDEXES(self):
            return self.getToken(HiveParser.KW_INDEXES, 0)

        def KW_INPATH(self):
            return self.getToken(HiveParser.KW_INPATH, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def KW_ITEMS(self):
            return self.getToken(HiveParser.KW_ITEMS, 0)

        def KW_JAR(self):
            return self.getToken(HiveParser.KW_JAR, 0)

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_KEYS(self):
            return self.getToken(HiveParser.KW_KEYS, 0)

        def KW_KEY_TYPE(self):
            return self.getToken(HiveParser.KW_KEY_TYPE, 0)

        def KW_LAST(self):
            return self.getToken(HiveParser.KW_LAST, 0)

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def KW_LINES(self):
            return self.getToken(HiveParser.KW_LINES, 0)

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def KW_LOGICAL(self):
            return self.getToken(HiveParser.KW_LOGICAL, 0)

        def KW_LONG(self):
            return self.getToken(HiveParser.KW_LONG, 0)

        def KW_MAPJOIN(self):
            return self.getToken(HiveParser.KW_MAPJOIN, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_MSCK(self):
            return self.getToken(HiveParser.KW_MSCK, 0)

        def KW_NOSCAN(self):
            return self.getToken(HiveParser.KW_NOSCAN, 0)

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def KW_PLUS(self):
            return self.getToken(HiveParser.KW_PLUS, 0)

        def KW_PRINCIPALS(self):
            return self.getToken(HiveParser.KW_PRINCIPALS, 0)

        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_READ(self):
            return self.getToken(HiveParser.KW_READ, 0)

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def KW_RECORDREADER(self):
            return self.getToken(HiveParser.KW_RECORDREADER, 0)

        def KW_RECORDWRITER(self):
            return self.getToken(HiveParser.KW_RECORDWRITER, 0)

        def KW_RELOAD(self):
            return self.getToken(HiveParser.KW_RELOAD, 0)

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_REPAIR(self):
            return self.getToken(HiveParser.KW_REPAIR, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def KW_REPLICATION(self):
            return self.getToken(HiveParser.KW_REPLICATION, 0)

        def KW_RESTRICT(self):
            return self.getToken(HiveParser.KW_RESTRICT, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_SCHEMAS(self):
            return self.getToken(HiveParser.KW_SCHEMAS, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def KW_SETS(self):
            return self.getToken(HiveParser.KW_SETS, 0)

        def KW_SHARED(self):
            return self.getToken(HiveParser.KW_SHARED, 0)

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_SHOW_DATABASE(self):
            return self.getToken(HiveParser.KW_SHOW_DATABASE, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_SORT(self):
            return self.getToken(HiveParser.KW_SORT, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def KW_SSL(self):
            return self.getToken(HiveParser.KW_SSL, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_STREAMTABLE(self):
            return self.getToken(HiveParser.KW_STREAMTABLE, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def KW_TABLES(self):
            return self.getToken(HiveParser.KW_TABLES, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_TOUCH(self):
            return self.getToken(HiveParser.KW_TOUCH, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def KW_UNARCHIVE(self):
            return self.getToken(HiveParser.KW_UNARCHIVE, 0)

        def KW_UNDO(self):
            return self.getToken(HiveParser.KW_UNDO, 0)

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def KW_UNSIGNED(self):
            return self.getToken(HiveParser.KW_UNSIGNED, 0)

        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def KW_USE(self):
            return self.getToken(HiveParser.KW_USE, 0)

        def KW_UTC(self):
            return self.getToken(HiveParser.KW_UTC, 0)

        def KW_UTCTIMESTAMP(self):
            return self.getToken(HiveParser.KW_UTCTIMESTAMP, 0)

        def KW_VALUE_TYPE(self):
            return self.getToken(HiveParser.KW_VALUE_TYPE, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_WHILE(self):
            return self.getToken(HiveParser.KW_WHILE, 0)

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def KW_TRANSACTION(self):
            return self.getToken(HiveParser.KW_TRANSACTION, 0)

        def KW_WRITE(self):
            return self.getToken(HiveParser.KW_WRITE, 0)

        def KW_ISOLATION(self):
            return self.getToken(HiveParser.KW_ISOLATION, 0)

        def KW_LEVEL(self):
            return self.getToken(HiveParser.KW_LEVEL, 0)

        def KW_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SNAPSHOT, 0)

        def KW_AUTOCOMMIT(self):
            return self.getToken(HiveParser.KW_AUTOCOMMIT, 0)

        def KW_RELY(self):
            return self.getToken(HiveParser.KW_RELY, 0)

        def KW_NORELY(self):
            return self.getToken(HiveParser.KW_NORELY, 0)

        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_NOVALIDATE(self):
            return self.getToken(HiveParser.KW_NOVALIDATE, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_DUMP(self):
            return self.getToken(HiveParser.KW_DUMP, 0)

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def KW_CACHE(self):
            return self.getToken(HiveParser.KW_CACHE, 0)

        def KW_VIEWS(self):
            return self.getToken(HiveParser.KW_VIEWS, 0)

        def KW_VECTORIZATION(self):
            return self.getToken(HiveParser.KW_VECTORIZATION, 0)

        def KW_SUMMARY(self):
            return self.getToken(HiveParser.KW_SUMMARY, 0)

        def KW_OPERATOR(self):
            return self.getToken(HiveParser.KW_OPERATOR, 0)

        def KW_EXPRESSION(self):
            return self.getToken(HiveParser.KW_EXPRESSION, 0)

        def KW_DETAIL(self):
            return self.getToken(HiveParser.KW_DETAIL, 0)

        def KW_WAIT(self):
            return self.getToken(HiveParser.KW_WAIT, 0)

        def KW_ZONE(self):
            return self.getToken(HiveParser.KW_ZONE, 0)

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def KW_REOPTIMIZATION(self):
            return self.getToken(HiveParser.KW_REOPTIMIZATION, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def KW_PLANS(self):
            return self.getToken(HiveParser.KW_PLANS, 0)

        def KW_QUERY_PARALLELISM(self):
            return self.getToken(HiveParser.KW_QUERY_PARALLELISM, 0)

        def KW_ACTIVATE(self):
            return self.getToken(HiveParser.KW_ACTIVATE, 0)

        def KW_MOVE(self):
            return self.getToken(HiveParser.KW_MOVE, 0)

        def KW_DO(self):
            return self.getToken(HiveParser.KW_DO, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def KW_ALLOC_FRACTION(self):
            return self.getToken(HiveParser.KW_ALLOC_FRACTION, 0)

        def KW_SCHEDULING_POLICY(self):
            return self.getToken(HiveParser.KW_SCHEDULING_POLICY, 0)

        def KW_PATH(self):
            return self.getToken(HiveParser.KW_PATH, 0)

        def KW_MAPPING(self):
            return self.getToken(HiveParser.KW_MAPPING, 0)

        def KW_WORKLOAD(self):
            return self.getToken(HiveParser.KW_WORKLOAD, 0)

        def KW_MANAGEMENT(self):
            return self.getToken(HiveParser.KW_MANAGEMENT, 0)

        def KW_ACTIVE(self):
            return self.getToken(HiveParser.KW_ACTIVE, 0)

        def KW_UNMANAGED(self):
            return self.getToken(HiveParser.KW_UNMANAGED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = HiveParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4084
            _la = self._input.LA(1)
            if not(((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 5550602496763772943) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 5489887942252053509) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 7764098430583946999) != 0) or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & -58553770177527879) != 0) or ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 288230375194918551) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql11ReservedKeywordsUsedAsFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_CURRENT_DATE(self):
            return self.getToken(HiveParser.KW_CURRENT_DATE, 0)

        def KW_CURRENT_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0)

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_GROUPING(self):
            return self.getToken(HiveParser.KW_GROUPING, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql11ReservedKeywordsUsedAsFunctionName" ):
                listener.enterSql11ReservedKeywordsUsedAsFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql11ReservedKeywordsUsedAsFunctionName" ):
                listener.exitSql11ReservedKeywordsUsedAsFunctionName(self)




    def sql11ReservedKeywordsUsedAsFunctionName(self):

        localctx = HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_sql11ReservedKeywordsUsedAsFunctionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4086
            _la = self._input.LA(1)
            if not(_la==10 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2622845) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 75161927681) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[351] = self.expression_sempred
        self._predicates[352] = self.precedenceExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def precedenceExpression_sempred(self, localctx:PrecedenceExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         




